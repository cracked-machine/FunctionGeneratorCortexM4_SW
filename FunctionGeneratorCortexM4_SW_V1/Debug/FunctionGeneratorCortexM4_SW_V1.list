
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd7c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800bf5c  0800bf5c  0001bf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c654  0800c654  000210c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c654  0800c654  000210c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c654  0800c654  000210c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c654  0800c654  0001c654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c658  0800c658  0001c658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010c8  20000000  0800c65c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200010c8  0800d724  000210c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001568  0800d724  00021568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000210c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029270  00000000  00000000  000210f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000571b  00000000  00000000  0004a368  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e08  00000000  00000000  0004fa88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ab8  00000000  00000000  00051890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030303  00000000  00000000  00053348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020d02  00000000  00000000  0008364b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00124770  00000000  00000000  000a434d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c8abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fdc  00000000  00000000  001c8b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200010c8 	.word	0x200010c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bf44 	.word	0x0800bf44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200010cc 	.word	0x200010cc
 800021c:	0800bf44 	.word	0x0800bf44

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f00a f886 	bl	800a3d4 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f00a fc73 	bl	800abb4 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f00a fa87 	bl	800a7e4 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f00a f81c 	bl	800a330 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f004 fb0a 	bl	8004914 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fb4e 	bl	80009a0 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f00a fea1 	bl	800b04c <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800bf5c 	.word	0x0800bf5c
 8000314:	0800bf6c 	.word	0x0800bf6c

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8



	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 800031e:	4b42      	ldr	r3, [pc, #264]	; (8000428 <DM_UpdateDisplay+0x110>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d002      	beq.n	800032c <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000326:	f000 f8a1 	bl	800046c <_DrawFuncSelectMenu>
 800032a:	e05d      	b.n	80003e8 <DM_UpdateDisplay+0xd0>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 800032c:	4b3f      	ldr	r3, [pc, #252]	; (800042c <DM_UpdateDisplay+0x114>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <DM_UpdateDisplay+0x22>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawGainSelectMenu();
 8000334:	f000 fa64 	bl	8000800 <_DrawGainSelectMenu>
 8000338:	e056      	b.n	80003e8 <DM_UpdateDisplay+0xd0>
	}
	else if(eNextFreqMenuStatus)		//  frequency menu enabled
 800033a:	4b3d      	ldr	r3, [pc, #244]	; (8000430 <DM_UpdateDisplay+0x118>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d01c      	beq.n	800037c <DM_UpdateDisplay+0x64>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		switch(eNextFreqMenuStatus)
 8000342:	4b3b      	ldr	r3, [pc, #236]	; (8000430 <DM_UpdateDisplay+0x118>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	3b01      	subs	r3, #1
 8000348:	2b03      	cmp	r3, #3
 800034a:	d84c      	bhi.n	80003e6 <DM_UpdateDisplay+0xce>
 800034c:	a201      	add	r2, pc, #4	; (adr r2, 8000354 <DM_UpdateDisplay+0x3c>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000365 	.word	0x08000365
 8000358:	0800036b 	.word	0x0800036b
 800035c:	08000371 	.word	0x08000371
 8000360:	08000377 	.word	0x08000377
		{
			case ENABLE_FREQ_MAIN_MENU:
				FreqMenu_DrawFreqMainMenu();
 8000364:	f000 fbc8 	bl	8000af8 <FreqMenu_DrawFreqMainMenu>

				break;
 8000368:	e03e      	b.n	80003e8 <DM_UpdateDisplay+0xd0>

			case ENABLE_FREQ_PRESET_MENU:
				FreqMenu_DrawFreqPresetMenu();
 800036a:	f000 fbff 	bl	8000b6c <FreqMenu_DrawFreqPresetMenu>
				break;
 800036e:	e03b      	b.n	80003e8 <DM_UpdateDisplay+0xd0>

			case ENABLE_FREQ_ADJUST_MENU:
				FreqMenu_DrawFreqAdjustMenu();
 8000370:	f001 fd6e 	bl	8001e50 <FreqMenu_DrawFreqAdjustMenu>
				break;
 8000374:	e038      	b.n	80003e8 <DM_UpdateDisplay+0xd0>

			case ENABLE_FREQ_SWEEP_MENU:
				FreqMenu_DrawFreqSweepMenu();
 8000376:	f001 fd9b 	bl	8001eb0 <FreqMenu_DrawFreqSweepMenu>
				break;
 800037a:	e035      	b.n	80003e8 <DM_UpdateDisplay+0xd0>
			default:
				break;
		}

	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 800037c:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <DM_UpdateDisplay+0x11c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d002      	beq.n	800038a <DM_UpdateDisplay+0x72>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawBiasSelectMenu();
 8000384:	f000 fa8a 	bl	800089c <_DrawBiasSelectMenu>
 8000388:	e02e      	b.n	80003e8 <DM_UpdateDisplay+0xd0>
	}
	else
	{
		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 800038a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	2302      	movs	r3, #2
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	2300      	movs	r3, #0
 8000396:	22d2      	movs	r2, #210	; 0xd2
 8000398:	210a      	movs	r1, #10
 800039a:	4827      	ldr	r0, [pc, #156]	; (8000438 <DM_UpdateDisplay+0x120>)
 800039c:	f009 ffc8 	bl	800a330 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 80003a0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2302      	movs	r3, #2
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2300      	movs	r3, #0
 80003ac:	22d2      	movs	r2, #210	; 0xd2
 80003ae:	2164      	movs	r1, #100	; 0x64
 80003b0:	4822      	ldr	r0, [pc, #136]	; (800043c <DM_UpdateDisplay+0x124>)
 80003b2:	f009 ffbd 	bl	800a330 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 80003b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	2302      	movs	r3, #2
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	22d2      	movs	r2, #210	; 0xd2
 80003c4:	21af      	movs	r1, #175	; 0xaf
 80003c6:	481e      	ldr	r0, [pc, #120]	; (8000440 <DM_UpdateDisplay+0x128>)
 80003c8:	f009 ffb2 	bl	800a330 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 80003cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	2302      	movs	r3, #2
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	2300      	movs	r3, #0
 80003d8:	22d2      	movs	r2, #210	; 0xd2
 80003da:	f44f 7182 	mov.w	r1, #260	; 0x104
 80003de:	4819      	ldr	r0, [pc, #100]	; (8000444 <DM_UpdateDisplay+0x12c>)
 80003e0:	f009 ffa6 	bl	800a330 <ILI9341_Draw_Text>
 80003e4:	e000      	b.n	80003e8 <DM_UpdateDisplay+0xd0>
				break;
 80003e6:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 80003e8:	2300      	movs	r3, #0
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	2300      	movs	r3, #0
 80003ee:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <DM_UpdateDisplay+0x130>)
 80003f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	4639      	mov	r1, r7
 80003f8:	2205      	movs	r2, #5
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fb12 	bl	8000a24 <DM_AddDigitPadding>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d10b      	bne.n	800041e <DM_UpdateDisplay+0x106>
		ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 8000406:	4638      	mov	r0, r7
 8000408:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	2302      	movs	r3, #2
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2300      	movs	r3, #0
 8000414:	2232      	movs	r2, #50	; 0x32
 8000416:	f44f 7182 	mov.w	r1, #260	; 0x104
 800041a:	f009 ff89 	bl	800a330 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200010e4 	.word	0x200010e4
 800042c:	200010e5 	.word	0x200010e5
 8000430:	200010e6 	.word	0x200010e6
 8000434:	200010e7 	.word	0x200010e7
 8000438:	0800bf7c 	.word	0x0800bf7c
 800043c:	0800bf84 	.word	0x0800bf84
 8000440:	0800bf8c 	.word	0x0800bf8c
 8000444:	0800bf94 	.word	0x0800bf94
 8000448:	40012c00 	.word	0x40012c00

0800044c <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000456:	4a04      	ldr	r2, [pc, #16]	; (8000468 <DM_ShowFuncSelectMenu+0x1c>)
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	7013      	strb	r3, [r2, #0]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	200010e4 	.word	0x200010e4

0800046c <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af02      	add	r7, sp, #8

	switch(FuncO_GetOutputMode())
 8000472:	f002 fac7 	bl	8002a04 <FuncO_GetOutputMode>
 8000476:	4603      	mov	r3, r0
 8000478:	2b05      	cmp	r3, #5
 800047a:	f200 81a1 	bhi.w	80007c0 <_DrawFuncSelectMenu+0x354>
 800047e:	a201      	add	r2, pc, #4	; (adr r2, 8000484 <_DrawFuncSelectMenu+0x18>)
 8000480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000484:	0800049d 	.word	0x0800049d
 8000488:	08000523 	.word	0x08000523
 800048c:	080005a9 	.word	0x080005a9
 8000490:	0800062f 	.word	0x0800062f
 8000494:	080006b5 	.word	0x080006b5
 8000498:	0800073b 	.word	0x0800073b
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 800049c:	2300      	movs	r3, #0
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	2302      	movs	r3, #2
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a8:	221e      	movs	r2, #30
 80004aa:	210a      	movs	r1, #10
 80004ac:	48c6      	ldr	r0, [pc, #792]	; (80007c8 <_DrawFuncSelectMenu+0x35c>)
 80004ae:	f009 ff3f 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80004b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	2302      	movs	r3, #2
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2300      	movs	r3, #0
 80004be:	2232      	movs	r2, #50	; 0x32
 80004c0:	210a      	movs	r1, #10
 80004c2:	48c2      	ldr	r0, [pc, #776]	; (80007cc <_DrawFuncSelectMenu+0x360>)
 80004c4:	f009 ff34 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80004c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2302      	movs	r3, #2
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2300      	movs	r3, #0
 80004d4:	2246      	movs	r2, #70	; 0x46
 80004d6:	210a      	movs	r1, #10
 80004d8:	48bd      	ldr	r0, [pc, #756]	; (80007d0 <_DrawFuncSelectMenu+0x364>)
 80004da:	f009 ff29 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80004de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	2302      	movs	r3, #2
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	2300      	movs	r3, #0
 80004ea:	225a      	movs	r2, #90	; 0x5a
 80004ec:	210a      	movs	r1, #10
 80004ee:	48b9      	ldr	r0, [pc, #740]	; (80007d4 <_DrawFuncSelectMenu+0x368>)
 80004f0:	f009 ff1e 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80004f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2302      	movs	r3, #2
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	226e      	movs	r2, #110	; 0x6e
 8000502:	210a      	movs	r1, #10
 8000504:	48b4      	ldr	r0, [pc, #720]	; (80007d8 <_DrawFuncSelectMenu+0x36c>)
 8000506:	f009 ff13 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 800050a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	2302      	movs	r3, #2
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2300      	movs	r3, #0
 8000516:	2282      	movs	r2, #130	; 0x82
 8000518:	210a      	movs	r1, #10
 800051a:	48b0      	ldr	r0, [pc, #704]	; (80007dc <_DrawFuncSelectMenu+0x370>)
 800051c:	f009 ff08 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8000520:	e14e      	b.n	80007c0 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	2302      	movs	r3, #2
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2300      	movs	r3, #0
 800052e:	221e      	movs	r2, #30
 8000530:	210a      	movs	r1, #10
 8000532:	48a5      	ldr	r0, [pc, #660]	; (80007c8 <_DrawFuncSelectMenu+0x35c>)
 8000534:	f009 fefc 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 8000538:	2300      	movs	r3, #0
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	2302      	movs	r3, #2
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000544:	2232      	movs	r2, #50	; 0x32
 8000546:	210a      	movs	r1, #10
 8000548:	48a0      	ldr	r0, [pc, #640]	; (80007cc <_DrawFuncSelectMenu+0x360>)
 800054a:	f009 fef1 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800054e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2302      	movs	r3, #2
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	2246      	movs	r2, #70	; 0x46
 800055c:	210a      	movs	r1, #10
 800055e:	489c      	ldr	r0, [pc, #624]	; (80007d0 <_DrawFuncSelectMenu+0x364>)
 8000560:	f009 fee6 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2302      	movs	r3, #2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	225a      	movs	r2, #90	; 0x5a
 8000572:	210a      	movs	r1, #10
 8000574:	4897      	ldr	r0, [pc, #604]	; (80007d4 <_DrawFuncSelectMenu+0x368>)
 8000576:	f009 fedb 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	226e      	movs	r2, #110	; 0x6e
 8000588:	210a      	movs	r1, #10
 800058a:	4893      	ldr	r0, [pc, #588]	; (80007d8 <_DrawFuncSelectMenu+0x36c>)
 800058c:	f009 fed0 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2282      	movs	r2, #130	; 0x82
 800059e:	210a      	movs	r1, #10
 80005a0:	488e      	ldr	r0, [pc, #568]	; (80007dc <_DrawFuncSelectMenu+0x370>)
 80005a2:	f009 fec5 	bl	800a330 <ILI9341_Draw_Text>
			break;
 80005a6:	e10b      	b.n	80007c0 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2302      	movs	r3, #2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	221e      	movs	r2, #30
 80005b6:	210a      	movs	r1, #10
 80005b8:	4883      	ldr	r0, [pc, #524]	; (80007c8 <_DrawFuncSelectMenu+0x35c>)
 80005ba:	f009 feb9 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	2232      	movs	r2, #50	; 0x32
 80005cc:	210a      	movs	r1, #10
 80005ce:	487f      	ldr	r0, [pc, #508]	; (80007cc <_DrawFuncSelectMenu+0x360>)
 80005d0:	f009 feae 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 80005d4:	2300      	movs	r3, #0
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2302      	movs	r3, #2
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e0:	2246      	movs	r2, #70	; 0x46
 80005e2:	210a      	movs	r1, #10
 80005e4:	487a      	ldr	r0, [pc, #488]	; (80007d0 <_DrawFuncSelectMenu+0x364>)
 80005e6:	f009 fea3 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80005ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	225a      	movs	r2, #90	; 0x5a
 80005f8:	210a      	movs	r1, #10
 80005fa:	4876      	ldr	r0, [pc, #472]	; (80007d4 <_DrawFuncSelectMenu+0x368>)
 80005fc:	f009 fe98 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	226e      	movs	r2, #110	; 0x6e
 800060e:	210a      	movs	r1, #10
 8000610:	4871      	ldr	r0, [pc, #452]	; (80007d8 <_DrawFuncSelectMenu+0x36c>)
 8000612:	f009 fe8d 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2302      	movs	r3, #2
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	2282      	movs	r2, #130	; 0x82
 8000624:	210a      	movs	r1, #10
 8000626:	486d      	ldr	r0, [pc, #436]	; (80007dc <_DrawFuncSelectMenu+0x370>)
 8000628:	f009 fe82 	bl	800a330 <ILI9341_Draw_Text>
			break;
 800062c:	e0c8      	b.n	80007c0 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800062e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	221e      	movs	r2, #30
 800063c:	210a      	movs	r1, #10
 800063e:	4862      	ldr	r0, [pc, #392]	; (80007c8 <_DrawFuncSelectMenu+0x35c>)
 8000640:	f009 fe76 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2302      	movs	r3, #2
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	2232      	movs	r2, #50	; 0x32
 8000652:	210a      	movs	r1, #10
 8000654:	485d      	ldr	r0, [pc, #372]	; (80007cc <_DrawFuncSelectMenu+0x360>)
 8000656:	f009 fe6b 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800065a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2302      	movs	r3, #2
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	2246      	movs	r2, #70	; 0x46
 8000668:	210a      	movs	r1, #10
 800066a:	4859      	ldr	r0, [pc, #356]	; (80007d0 <_DrawFuncSelectMenu+0x364>)
 800066c:	f009 fe60 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800067c:	225a      	movs	r2, #90	; 0x5a
 800067e:	210a      	movs	r1, #10
 8000680:	4854      	ldr	r0, [pc, #336]	; (80007d4 <_DrawFuncSelectMenu+0x368>)
 8000682:	f009 fe55 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2302      	movs	r3, #2
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2300      	movs	r3, #0
 8000692:	226e      	movs	r2, #110	; 0x6e
 8000694:	210a      	movs	r1, #10
 8000696:	4850      	ldr	r0, [pc, #320]	; (80007d8 <_DrawFuncSelectMenu+0x36c>)
 8000698:	f009 fe4a 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 800069c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2302      	movs	r3, #2
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	2282      	movs	r2, #130	; 0x82
 80006aa:	210a      	movs	r1, #10
 80006ac:	484b      	ldr	r0, [pc, #300]	; (80007dc <_DrawFuncSelectMenu+0x370>)
 80006ae:	f009 fe3f 	bl	800a330 <ILI9341_Draw_Text>
			break;
 80006b2:	e085      	b.n	80007c0 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80006b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2302      	movs	r3, #2
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	221e      	movs	r2, #30
 80006c2:	210a      	movs	r1, #10
 80006c4:	4840      	ldr	r0, [pc, #256]	; (80007c8 <_DrawFuncSelectMenu+0x35c>)
 80006c6:	f009 fe33 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80006ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	2302      	movs	r3, #2
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2300      	movs	r3, #0
 80006d6:	2232      	movs	r2, #50	; 0x32
 80006d8:	210a      	movs	r1, #10
 80006da:	483c      	ldr	r0, [pc, #240]	; (80007cc <_DrawFuncSelectMenu+0x360>)
 80006dc:	f009 fe28 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80006e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2302      	movs	r3, #2
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2300      	movs	r3, #0
 80006ec:	2246      	movs	r2, #70	; 0x46
 80006ee:	210a      	movs	r1, #10
 80006f0:	4837      	ldr	r0, [pc, #220]	; (80007d0 <_DrawFuncSelectMenu+0x364>)
 80006f2:	f009 fe1d 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80006f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2302      	movs	r3, #2
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	225a      	movs	r2, #90	; 0x5a
 8000704:	210a      	movs	r1, #10
 8000706:	4833      	ldr	r0, [pc, #204]	; (80007d4 <_DrawFuncSelectMenu+0x368>)
 8000708:	f009 fe12 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 800070c:	2300      	movs	r3, #0
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	2302      	movs	r3, #2
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000718:	226e      	movs	r2, #110	; 0x6e
 800071a:	210a      	movs	r1, #10
 800071c:	482e      	ldr	r0, [pc, #184]	; (80007d8 <_DrawFuncSelectMenu+0x36c>)
 800071e:	f009 fe07 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	2302      	movs	r3, #2
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	2282      	movs	r2, #130	; 0x82
 8000730:	210a      	movs	r1, #10
 8000732:	482a      	ldr	r0, [pc, #168]	; (80007dc <_DrawFuncSelectMenu+0x370>)
 8000734:	f009 fdfc 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8000738:	e042      	b.n	80007c0 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800073a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2302      	movs	r3, #2
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	221e      	movs	r2, #30
 8000748:	210a      	movs	r1, #10
 800074a:	481f      	ldr	r0, [pc, #124]	; (80007c8 <_DrawFuncSelectMenu+0x35c>)
 800074c:	f009 fdf0 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	2302      	movs	r3, #2
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2300      	movs	r3, #0
 800075c:	2232      	movs	r2, #50	; 0x32
 800075e:	210a      	movs	r1, #10
 8000760:	481a      	ldr	r0, [pc, #104]	; (80007cc <_DrawFuncSelectMenu+0x360>)
 8000762:	f009 fde5 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	2302      	movs	r3, #2
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2300      	movs	r3, #0
 8000772:	2246      	movs	r2, #70	; 0x46
 8000774:	210a      	movs	r1, #10
 8000776:	4816      	ldr	r0, [pc, #88]	; (80007d0 <_DrawFuncSelectMenu+0x364>)
 8000778:	f009 fdda 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800077c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2302      	movs	r3, #2
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2300      	movs	r3, #0
 8000788:	225a      	movs	r2, #90	; 0x5a
 800078a:	210a      	movs	r1, #10
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <_DrawFuncSelectMenu+0x368>)
 800078e:	f009 fdcf 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	2302      	movs	r3, #2
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2300      	movs	r3, #0
 800079e:	226e      	movs	r2, #110	; 0x6e
 80007a0:	210a      	movs	r1, #10
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <_DrawFuncSelectMenu+0x36c>)
 80007a4:	f009 fdc4 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 80007a8:	2300      	movs	r3, #0
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	2302      	movs	r3, #2
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b4:	2282      	movs	r2, #130	; 0x82
 80007b6:	210a      	movs	r1, #10
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <_DrawFuncSelectMenu+0x370>)
 80007ba:	f009 fdb9 	bl	800a330 <ILI9341_Draw_Text>
			break;
 80007be:	bf00      	nop

	}

}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	0800bf9c 	.word	0x0800bf9c
 80007cc:	0800bfa4 	.word	0x0800bfa4
 80007d0:	0800bfb0 	.word	0x0800bfb0
 80007d4:	0800bfb8 	.word	0x0800bfb8
 80007d8:	0800bfc4 	.word	0x0800bfc4
 80007dc:	0800bfd0 	.word	0x0800bfd0

080007e0 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 80007ea:	4a04      	ldr	r2, [pc, #16]	; (80007fc <DM_ShowGainSelectMenu+0x1c>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	7013      	strb	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	200010e5 	.word	0x200010e5

08000800 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 8000806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	2302      	movs	r3, #2
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2300      	movs	r3, #0
 8000812:	2278      	movs	r2, #120	; 0x78
 8000814:	210a      	movs	r1, #10
 8000816:	4810      	ldr	r0, [pc, #64]	; (8000858 <_DrawGainSelectMenu+0x58>)
 8000818:	f009 fd8a 	bl	800a330 <ILI9341_Draw_Text>

	char gain[4] = "";
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
 8000820:	f002 f9ea 	bl	8002bf8 <GO_GetOutputGain>
 8000824:	4603      	mov	r3, r0
 8000826:	b29b      	uxth	r3, r3
 8000828:	1d39      	adds	r1, r7, #4
 800082a:	2204      	movs	r2, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f8f9 	bl	8000a24 <DM_AddDigitPadding>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10a      	bne.n	800084e <_DrawGainSelectMenu+0x4e>
		ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 8000838:	1d38      	adds	r0, r7, #4
 800083a:	2300      	movs	r3, #0
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	2302      	movs	r3, #2
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000846:	2278      	movs	r2, #120	; 0x78
 8000848:	21fa      	movs	r1, #250	; 0xfa
 800084a:	f009 fd71 	bl	800a330 <ILI9341_Draw_Text>

}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	0800bfd8 	.word	0x0800bfd8

0800085c <DM_ShowFreqMenu>:
 *
 *
 *
 */
void DM_ShowFreqMenu(eFreqMenu_Status pValue)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <DM_ShowFreqMenu+0x1c>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	7013      	strb	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	200010e6 	.word	0x200010e6

0800087c <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <DM_ShowBiasSelectMenu+0x1c>)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	7013      	strb	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	200010e7 	.word	0x200010e7

0800089c <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 80008a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	2302      	movs	r3, #2
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2300      	movs	r3, #0
 80008ae:	2278      	movs	r2, #120	; 0x78
 80008b0:	210a      	movs	r1, #10
 80008b2:	4823      	ldr	r0, [pc, #140]	; (8000940 <_DrawBiasSelectMenu+0xa4>)
 80008b4:	f009 fd3c 	bl	800a330 <ILI9341_Draw_Text>

	char bias[5] = "";
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	2300      	movs	r3, #0
 80008be:	733b      	strb	r3, [r7, #12]
	//snprintf(bias, sizeof(bias), "%u", (uint8_t)BO_GetOutputBias());
	if(DM_AddDigitPadding((uint16_t)BO_GetOutputBias(), bias, sizeof(bias)) == 0)
 80008c0:	f001 fe3a 	bl	8002538 <BO_GetOutputBias>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	f107 0108 	add.w	r1, r7, #8
 80008cc:	2205      	movs	r2, #5
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f8a8 	bl	8000a24 <DM_AddDigitPadding>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d12d      	bne.n	8000936 <_DrawBiasSelectMenu+0x9a>
	{
		if(BO_GetBiasPolarity())
 80008da:	f001 fddb 	bl	8002494 <BO_GetBiasPolarity>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d014      	beq.n	800090e <_DrawBiasSelectMenu+0x72>
		{
			char symbol[2] = "+\0";
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <_DrawBiasSelectMenu+0xa8>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	80bb      	strh	r3, [r7, #4]
			//char test[10] = strcat(symbol, "10");
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 80008ea:	f107 0208 	add.w	r2, r7, #8
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f00a fbe6 	bl	800b0c4 <strcat>
 80008f8:	2300      	movs	r3, #0
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	2302      	movs	r3, #2
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000904:	2278      	movs	r2, #120	; 0x78
 8000906:	21fa      	movs	r1, #250	; 0xfa
 8000908:	f009 fd12 	bl	800a330 <ILI9341_Draw_Text>
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
		}
	}

}
 800090c:	e013      	b.n	8000936 <_DrawBiasSelectMenu+0x9a>
			char symbol[2] = "-\0";
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <_DrawBiasSelectMenu+0xac>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	803b      	strh	r3, [r7, #0]
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 8000914:	f107 0208 	add.w	r2, r7, #8
 8000918:	463b      	mov	r3, r7
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f00a fbd1 	bl	800b0c4 <strcat>
 8000922:	2300      	movs	r3, #0
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	2302      	movs	r3, #2
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800092e:	2278      	movs	r2, #120	; 0x78
 8000930:	21fa      	movs	r1, #250	; 0xfa
 8000932:	f009 fcfd 	bl	800a330 <ILI9341_Draw_Text>
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	0800bff0 	.word	0x0800bff0
 8000944:	0800c008 	.word	0x0800c008
 8000948:	0800c00c 	.word	0x0800c00c

0800094c <DM_DigitCount>:
 *
 *
 *
 */
int DM_DigitCount(int num)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if(num < 10)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b09      	cmp	r3, #9
 8000958:	dc01      	bgt.n	800095e <DM_DigitCount+0x12>
		return 1;
 800095a:	2301      	movs	r3, #1
 800095c:	e018      	b.n	8000990 <DM_DigitCount+0x44>
	if(num < 100)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b63      	cmp	r3, #99	; 0x63
 8000962:	dc01      	bgt.n	8000968 <DM_DigitCount+0x1c>
		return 2;
 8000964:	2302      	movs	r3, #2
 8000966:	e013      	b.n	8000990 <DM_DigitCount+0x44>
	if(num < 1000)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800096e:	da01      	bge.n	8000974 <DM_DigitCount+0x28>
		return 3;
 8000970:	2303      	movs	r3, #3
 8000972:	e00d      	b.n	8000990 <DM_DigitCount+0x44>
	if(num < 10000)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f242 720f 	movw	r2, #9999	; 0x270f
 800097a:	4293      	cmp	r3, r2
 800097c:	dc01      	bgt.n	8000982 <DM_DigitCount+0x36>
		return 4;
 800097e:	2304      	movs	r3, #4
 8000980:	e006      	b.n	8000990 <DM_DigitCount+0x44>
	if(num < 100000)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <DM_DigitCount+0x50>)
 8000986:	4293      	cmp	r3, r2
 8000988:	dc01      	bgt.n	800098e <DM_DigitCount+0x42>
		return 5;
 800098a:	2305      	movs	r3, #5
 800098c:	e000      	b.n	8000990 <DM_DigitCount+0x44>
	else
		return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	0001869f 	.word	0x0001869f

080009a0 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 80009a6:	f009 fcf1 	bl	800a38c <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <DM_RefreshBackgroundLayout+0x80>)
 80009ac:	8818      	ldrh	r0, [r3, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	2302      	movs	r3, #2
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2332      	movs	r3, #50	; 0x32
 80009be:	2250      	movs	r2, #80	; 0x50
 80009c0:	21c8      	movs	r1, #200	; 0xc8
 80009c2:	f009 fb4b 	bl	800a05c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <DM_RefreshBackgroundLayout+0x80>)
 80009c8:	8858      	ldrh	r0, [r3, #2]
 80009ca:	2300      	movs	r3, #0
 80009cc:	9302      	str	r3, [sp, #8]
 80009ce:	2302      	movs	r3, #2
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2332      	movs	r3, #50	; 0x32
 80009da:	2250      	movs	r2, #80	; 0x50
 80009dc:	21c8      	movs	r1, #200	; 0xc8
 80009de:	f009 fb3d 	bl	800a05c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <DM_RefreshBackgroundLayout+0x80>)
 80009e4:	8898      	ldrh	r0, [r3, #4]
 80009e6:	2300      	movs	r3, #0
 80009e8:	9302      	str	r3, [sp, #8]
 80009ea:	2302      	movs	r3, #2
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2332      	movs	r3, #50	; 0x32
 80009f6:	2250      	movs	r2, #80	; 0x50
 80009f8:	21c8      	movs	r1, #200	; 0xc8
 80009fa:	f009 fb2f 	bl	800a05c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <DM_RefreshBackgroundLayout+0x80>)
 8000a00:	88d8      	ldrh	r0, [r3, #6]
 8000a02:	2300      	movs	r3, #0
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	2302      	movs	r3, #2
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2332      	movs	r3, #50	; 0x32
 8000a12:	2250      	movs	r2, #80	; 0x50
 8000a14:	21c8      	movs	r1, #200	; 0xc8
 8000a16:	f009 fb21 	bl	800a05c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000

08000a24 <DM_AddDigitPadding>:
 *				1 if buflen is invalid size
 *				2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	80fb      	strh	r3, [r7, #6]
 8000a30:	4613      	mov	r3, r2
 8000a32:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8000a34:	88bb      	ldrh	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <DM_AddDigitPadding+0x1c>
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	2b06      	cmp	r3, #6
 8000a3e:	d901      	bls.n	8000a44 <DM_AddDigitPadding+0x20>
		return 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e048      	b.n	8000ad6 <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8000a48:	89fb      	ldrh	r3, [r7, #14]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff7e 	bl	800094c <DM_DigitCount>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b05      	cmp	r3, #5
 8000a54:	d83e      	bhi.n	8000ad4 <DM_AddDigitPadding+0xb0>
 8000a56:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <DM_AddDigitPadding+0x38>)
 8000a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5c:	08000a75 	.word	0x08000a75
 8000a60:	08000a85 	.word	0x08000a85
 8000a64:	08000a95 	.word	0x08000a95
 8000a68:	08000aa5 	.word	0x08000aa5
 8000a6c:	08000ab5 	.word	0x08000ab5
 8000a70:	08000ac5 	.word	0x08000ac5
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <DM_AddDigitPadding+0xbc>)
 8000a78:	4619      	mov	r1, r3
 8000a7a:	6838      	ldr	r0, [r7, #0]
 8000a7c:	f00a faee 	bl	800b05c <sniprintf>
			return 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e028      	b.n	8000ad6 <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8000a84:	88b9      	ldrh	r1, [r7, #4]
 8000a86:	89fb      	ldrh	r3, [r7, #14]
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <DM_AddDigitPadding+0xc0>)
 8000a8a:	6838      	ldr	r0, [r7, #0]
 8000a8c:	f00a fae6 	bl	800b05c <sniprintf>
			return 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e020      	b.n	8000ad6 <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8000a94:	88b9      	ldrh	r1, [r7, #4]
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <DM_AddDigitPadding+0xc4>)
 8000a9a:	6838      	ldr	r0, [r7, #0]
 8000a9c:	f00a fade 	bl	800b05c <sniprintf>
			return 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e018      	b.n	8000ad6 <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8000aa4:	88b9      	ldrh	r1, [r7, #4]
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	4a10      	ldr	r2, [pc, #64]	; (8000aec <DM_AddDigitPadding+0xc8>)
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f00a fad6 	bl	800b05c <sniprintf>
			return 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e010      	b.n	8000ad6 <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8000ab4:	88b9      	ldrh	r1, [r7, #4]
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <DM_AddDigitPadding+0xcc>)
 8000aba:	6838      	ldr	r0, [r7, #0]
 8000abc:	f00a face 	bl	800b05c <sniprintf>
			return 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e008      	b.n	8000ad6 <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8000ac4:	88b9      	ldrh	r1, [r7, #4]
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <DM_AddDigitPadding+0xd0>)
 8000aca:	6838      	ldr	r0, [r7, #0]
 8000acc:	f00a fac6 	bl	800b05c <sniprintf>
			return 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e000      	b.n	8000ad6 <DM_AddDigitPadding+0xb2>

	}

	return 2;
 8000ad4:	2302      	movs	r3, #2


}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	0800c048 	.word	0x0800c048
 8000ae4:	0800c050 	.word	0x0800c050
 8000ae8:	0800c058 	.word	0x0800c058
 8000aec:	0800c060 	.word	0x0800c060
 8000af0:	0800c068 	.word	0x0800c068
 8000af4:	0800c06c 	.word	0x0800c06c

08000af8 <FreqMenu_DrawFreqMainMenu>:
 *
 *
 *
 */
void FreqMenu_DrawFreqMainMenu()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	10, 120, BLACK, 2, WHITE);
 8000afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	2302      	movs	r3, #2
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2278      	movs	r2, #120	; 0x78
 8000b0c:	210a      	movs	r1, #10
 8000b0e:	4813      	ldr	r0, [pc, #76]	; (8000b5c <FreqMenu_DrawFreqMainMenu+0x64>)
 8000b10:	f009 fc0e 	bl	800a330 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 8000b14:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	22d2      	movs	r2, #210	; 0xd2
 8000b22:	2105      	movs	r1, #5
 8000b24:	480e      	ldr	r0, [pc, #56]	; (8000b60 <FreqMenu_DrawFreqMainMenu+0x68>)
 8000b26:	f009 fc03 	bl	800a330 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 8000b2a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000b2e:	9301      	str	r3, [sp, #4]
 8000b30:	2302      	movs	r3, #2
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2300      	movs	r3, #0
 8000b36:	22d2      	movs	r2, #210	; 0xd2
 8000b38:	2157      	movs	r1, #87	; 0x57
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <FreqMenu_DrawFreqMainMenu+0x6c>)
 8000b3c:	f009 fbf8 	bl	800a330 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 8000b40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	2302      	movs	r3, #2
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	22d2      	movs	r2, #210	; 0xd2
 8000b4e:	21ae      	movs	r1, #174	; 0xae
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <FreqMenu_DrawFreqMainMenu+0x70>)
 8000b52:	f009 fbed 	bl	800a330 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	0800c070 	.word	0x0800c070
 8000b60:	0800c088 	.word	0x0800c088
 8000b64:	0800c090 	.word	0x0800c090
 8000b68:	0800c098 	.word	0x0800c098

08000b6c <FreqMenu_DrawFreqPresetMenu>:
 *
 *
 *
 */
void FreqMenu_DrawFreqPresetMenu()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af02      	add	r7, sp, #8

	switch(FreqO_GetFPreset())
 8000b72:	f001 fe79 	bl	8002868 <FreqO_GetFPreset>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b0d      	cmp	r3, #13
 8000b7a:	f201 8149 	bhi.w	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
 8000b7e:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <FreqMenu_DrawFreqPresetMenu+0x18>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000bbd 	.word	0x08000bbd
 8000b88:	08000cf5 	.word	0x08000cf5
 8000b8c:	08000e65 	.word	0x08000e65
 8000b90:	08000f9d 	.word	0x08000f9d
 8000b94:	0800110d 	.word	0x0800110d
 8000b98:	08001245 	.word	0x08001245
 8000b9c:	080013b5 	.word	0x080013b5
 8000ba0:	080014ed 	.word	0x080014ed
 8000ba4:	0800165d 	.word	0x0800165d
 8000ba8:	08001793 	.word	0x08001793
 8000bac:	08001901 	.word	0x08001901
 8000bb0:	08001a37 	.word	0x08001a37
 8000bb4:	08001ba5 	.word	0x08001ba5
 8000bb8:	08001cdb 	.word	0x08001cdb
	{
		case FPRESET_1HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, WHITE, 2, BLACK);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc8:	2223      	movs	r2, #35	; 0x23
 8000bca:	210a      	movs	r1, #10
 8000bcc:	4897      	ldr	r0, [pc, #604]	; (8000e2c <FreqMenu_DrawFreqPresetMenu+0x2c0>)
 8000bce:	f009 fbaf 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8000bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	2302      	movs	r3, #2
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	2237      	movs	r2, #55	; 0x37
 8000be0:	210a      	movs	r1, #10
 8000be2:	4893      	ldr	r0, [pc, #588]	; (8000e30 <FreqMenu_DrawFreqPresetMenu+0x2c4>)
 8000be4:	f009 fba4 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8000be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	2302      	movs	r3, #2
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	224b      	movs	r2, #75	; 0x4b
 8000bf6:	210a      	movs	r1, #10
 8000bf8:	488e      	ldr	r0, [pc, #568]	; (8000e34 <FreqMenu_DrawFreqPresetMenu+0x2c8>)
 8000bfa:	f009 fb99 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8000bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	2302      	movs	r3, #2
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	225f      	movs	r2, #95	; 0x5f
 8000c0c:	210a      	movs	r1, #10
 8000c0e:	488a      	ldr	r0, [pc, #552]	; (8000e38 <FreqMenu_DrawFreqPresetMenu+0x2cc>)
 8000c10:	f009 fb8e 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8000c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2273      	movs	r2, #115	; 0x73
 8000c22:	210a      	movs	r1, #10
 8000c24:	4885      	ldr	r0, [pc, #532]	; (8000e3c <FreqMenu_DrawFreqPresetMenu+0x2d0>)
 8000c26:	f009 fb83 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8000c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	2302      	movs	r3, #2
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2300      	movs	r3, #0
 8000c36:	2287      	movs	r2, #135	; 0x87
 8000c38:	210a      	movs	r1, #10
 8000c3a:	4881      	ldr	r0, [pc, #516]	; (8000e40 <FreqMenu_DrawFreqPresetMenu+0x2d4>)
 8000c3c:	f009 fb78 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8000c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	2302      	movs	r3, #2
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	229b      	movs	r2, #155	; 0x9b
 8000c4e:	210a      	movs	r1, #10
 8000c50:	487c      	ldr	r0, [pc, #496]	; (8000e44 <FreqMenu_DrawFreqPresetMenu+0x2d8>)
 8000c52:	f009 fb6d 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8000c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2300      	movs	r3, #0
 8000c62:	2223      	movs	r2, #35	; 0x23
 8000c64:	2178      	movs	r1, #120	; 0x78
 8000c66:	4878      	ldr	r0, [pc, #480]	; (8000e48 <FreqMenu_DrawFreqPresetMenu+0x2dc>)
 8000c68:	f009 fb62 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8000c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	2302      	movs	r3, #2
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2300      	movs	r3, #0
 8000c78:	2237      	movs	r2, #55	; 0x37
 8000c7a:	2178      	movs	r1, #120	; 0x78
 8000c7c:	4873      	ldr	r0, [pc, #460]	; (8000e4c <FreqMenu_DrawFreqPresetMenu+0x2e0>)
 8000c7e:	f009 fb57 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8000c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	2302      	movs	r3, #2
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	224b      	movs	r2, #75	; 0x4b
 8000c90:	2178      	movs	r1, #120	; 0x78
 8000c92:	486f      	ldr	r0, [pc, #444]	; (8000e50 <FreqMenu_DrawFreqPresetMenu+0x2e4>)
 8000c94:	f009 fb4c 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8000c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	225f      	movs	r2, #95	; 0x5f
 8000ca6:	2178      	movs	r1, #120	; 0x78
 8000ca8:	486a      	ldr	r0, [pc, #424]	; (8000e54 <FreqMenu_DrawFreqPresetMenu+0x2e8>)
 8000caa:	f009 fb41 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8000cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2273      	movs	r2, #115	; 0x73
 8000cbc:	2178      	movs	r1, #120	; 0x78
 8000cbe:	4866      	ldr	r0, [pc, #408]	; (8000e58 <FreqMenu_DrawFreqPresetMenu+0x2ec>)
 8000cc0:	f009 fb36 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8000cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	2302      	movs	r3, #2
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2287      	movs	r2, #135	; 0x87
 8000cd2:	2178      	movs	r1, #120	; 0x78
 8000cd4:	4861      	ldr	r0, [pc, #388]	; (8000e5c <FreqMenu_DrawFreqPresetMenu+0x2f0>)
 8000cd6:	f009 fb2b 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8000cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	229b      	movs	r2, #155	; 0x9b
 8000ce8:	2178      	movs	r1, #120	; 0x78
 8000cea:	485d      	ldr	r0, [pc, #372]	; (8000e60 <FreqMenu_DrawFreqPresetMenu+0x2f4>)
 8000cec:	f009 fb20 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8000cf0:	f001 b88e 	b.w	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
		case FPRESET_10HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8000cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2223      	movs	r2, #35	; 0x23
 8000d02:	210a      	movs	r1, #10
 8000d04:	4849      	ldr	r0, [pc, #292]	; (8000e2c <FreqMenu_DrawFreqPresetMenu+0x2c0>)
 8000d06:	f009 fb13 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, WHITE, 2, BLACK);
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	2302      	movs	r3, #2
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d16:	2237      	movs	r2, #55	; 0x37
 8000d18:	210a      	movs	r1, #10
 8000d1a:	4845      	ldr	r0, [pc, #276]	; (8000e30 <FreqMenu_DrawFreqPresetMenu+0x2c4>)
 8000d1c:	f009 fb08 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8000d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	2302      	movs	r3, #2
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	224b      	movs	r2, #75	; 0x4b
 8000d2e:	210a      	movs	r1, #10
 8000d30:	4840      	ldr	r0, [pc, #256]	; (8000e34 <FreqMenu_DrawFreqPresetMenu+0x2c8>)
 8000d32:	f009 fafd 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8000d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	225f      	movs	r2, #95	; 0x5f
 8000d44:	210a      	movs	r1, #10
 8000d46:	483c      	ldr	r0, [pc, #240]	; (8000e38 <FreqMenu_DrawFreqPresetMenu+0x2cc>)
 8000d48:	f009 faf2 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8000d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	2302      	movs	r3, #2
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	2273      	movs	r2, #115	; 0x73
 8000d5a:	210a      	movs	r1, #10
 8000d5c:	4837      	ldr	r0, [pc, #220]	; (8000e3c <FreqMenu_DrawFreqPresetMenu+0x2d0>)
 8000d5e:	f009 fae7 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8000d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	2302      	movs	r3, #2
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2287      	movs	r2, #135	; 0x87
 8000d70:	210a      	movs	r1, #10
 8000d72:	4833      	ldr	r0, [pc, #204]	; (8000e40 <FreqMenu_DrawFreqPresetMenu+0x2d4>)
 8000d74:	f009 fadc 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8000d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	2302      	movs	r3, #2
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2300      	movs	r3, #0
 8000d84:	229b      	movs	r2, #155	; 0x9b
 8000d86:	210a      	movs	r1, #10
 8000d88:	482e      	ldr	r0, [pc, #184]	; (8000e44 <FreqMenu_DrawFreqPresetMenu+0x2d8>)
 8000d8a:	f009 fad1 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8000d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	2302      	movs	r3, #2
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2223      	movs	r2, #35	; 0x23
 8000d9c:	2178      	movs	r1, #120	; 0x78
 8000d9e:	482a      	ldr	r0, [pc, #168]	; (8000e48 <FreqMenu_DrawFreqPresetMenu+0x2dc>)
 8000da0:	f009 fac6 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8000da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	2302      	movs	r3, #2
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	2237      	movs	r2, #55	; 0x37
 8000db2:	2178      	movs	r1, #120	; 0x78
 8000db4:	4825      	ldr	r0, [pc, #148]	; (8000e4c <FreqMenu_DrawFreqPresetMenu+0x2e0>)
 8000db6:	f009 fabb 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8000dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	224b      	movs	r2, #75	; 0x4b
 8000dc8:	2178      	movs	r1, #120	; 0x78
 8000dca:	4821      	ldr	r0, [pc, #132]	; (8000e50 <FreqMenu_DrawFreqPresetMenu+0x2e4>)
 8000dcc:	f009 fab0 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8000dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	225f      	movs	r2, #95	; 0x5f
 8000dde:	2178      	movs	r1, #120	; 0x78
 8000de0:	481c      	ldr	r0, [pc, #112]	; (8000e54 <FreqMenu_DrawFreqPresetMenu+0x2e8>)
 8000de2:	f009 faa5 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8000de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	2302      	movs	r3, #2
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2300      	movs	r3, #0
 8000df2:	2273      	movs	r2, #115	; 0x73
 8000df4:	2178      	movs	r1, #120	; 0x78
 8000df6:	4818      	ldr	r0, [pc, #96]	; (8000e58 <FreqMenu_DrawFreqPresetMenu+0x2ec>)
 8000df8:	f009 fa9a 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8000dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	2302      	movs	r3, #2
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2300      	movs	r3, #0
 8000e08:	2287      	movs	r2, #135	; 0x87
 8000e0a:	2178      	movs	r1, #120	; 0x78
 8000e0c:	4813      	ldr	r0, [pc, #76]	; (8000e5c <FreqMenu_DrawFreqPresetMenu+0x2f0>)
 8000e0e:	f009 fa8f 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8000e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	2302      	movs	r3, #2
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	229b      	movs	r2, #155	; 0x9b
 8000e20:	2178      	movs	r1, #120	; 0x78
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <FreqMenu_DrawFreqPresetMenu+0x2f4>)
 8000e24:	f009 fa84 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8000e28:	f000 bff2 	b.w	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
 8000e2c:	0800c0a0 	.word	0x0800c0a0
 8000e30:	0800c0a8 	.word	0x0800c0a8
 8000e34:	0800c0b0 	.word	0x0800c0b0
 8000e38:	0800c0b8 	.word	0x0800c0b8
 8000e3c:	0800c0c0 	.word	0x0800c0c0
 8000e40:	0800c0c8 	.word	0x0800c0c8
 8000e44:	0800c0d0 	.word	0x0800c0d0
 8000e48:	0800c0d8 	.word	0x0800c0d8
 8000e4c:	0800c0e0 	.word	0x0800c0e0
 8000e50:	0800c0e8 	.word	0x0800c0e8
 8000e54:	0800c0f0 	.word	0x0800c0f0
 8000e58:	0800c0f8 	.word	0x0800c0f8
 8000e5c:	0800c100 	.word	0x0800c100
 8000e60:	0800c108 	.word	0x0800c108
		case FPRESET_50HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8000e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2223      	movs	r2, #35	; 0x23
 8000e72:	210a      	movs	r1, #10
 8000e74:	4897      	ldr	r0, [pc, #604]	; (80010d4 <FreqMenu_DrawFreqPresetMenu+0x568>)
 8000e76:	f009 fa5b 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8000e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	2302      	movs	r3, #2
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	2237      	movs	r2, #55	; 0x37
 8000e88:	210a      	movs	r1, #10
 8000e8a:	4893      	ldr	r0, [pc, #588]	; (80010d8 <FreqMenu_DrawFreqPresetMenu+0x56c>)
 8000e8c:	f009 fa50 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, WHITE, 2, BLACK);
 8000e90:	2300      	movs	r3, #0
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	2302      	movs	r3, #2
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e9c:	224b      	movs	r2, #75	; 0x4b
 8000e9e:	210a      	movs	r1, #10
 8000ea0:	488e      	ldr	r0, [pc, #568]	; (80010dc <FreqMenu_DrawFreqPresetMenu+0x570>)
 8000ea2:	f009 fa45 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8000ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	2302      	movs	r3, #2
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	225f      	movs	r2, #95	; 0x5f
 8000eb4:	210a      	movs	r1, #10
 8000eb6:	488a      	ldr	r0, [pc, #552]	; (80010e0 <FreqMenu_DrawFreqPresetMenu+0x574>)
 8000eb8:	f009 fa3a 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8000ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2273      	movs	r2, #115	; 0x73
 8000eca:	210a      	movs	r1, #10
 8000ecc:	4885      	ldr	r0, [pc, #532]	; (80010e4 <FreqMenu_DrawFreqPresetMenu+0x578>)
 8000ece:	f009 fa2f 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8000ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2302      	movs	r3, #2
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2287      	movs	r2, #135	; 0x87
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	4881      	ldr	r0, [pc, #516]	; (80010e8 <FreqMenu_DrawFreqPresetMenu+0x57c>)
 8000ee4:	f009 fa24 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8000ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	229b      	movs	r2, #155	; 0x9b
 8000ef6:	210a      	movs	r1, #10
 8000ef8:	487c      	ldr	r0, [pc, #496]	; (80010ec <FreqMenu_DrawFreqPresetMenu+0x580>)
 8000efa:	f009 fa19 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8000efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	2302      	movs	r3, #2
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2223      	movs	r2, #35	; 0x23
 8000f0c:	2178      	movs	r1, #120	; 0x78
 8000f0e:	4878      	ldr	r0, [pc, #480]	; (80010f0 <FreqMenu_DrawFreqPresetMenu+0x584>)
 8000f10:	f009 fa0e 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8000f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2237      	movs	r2, #55	; 0x37
 8000f22:	2178      	movs	r1, #120	; 0x78
 8000f24:	4873      	ldr	r0, [pc, #460]	; (80010f4 <FreqMenu_DrawFreqPresetMenu+0x588>)
 8000f26:	f009 fa03 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8000f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	2302      	movs	r3, #2
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	224b      	movs	r2, #75	; 0x4b
 8000f38:	2178      	movs	r1, #120	; 0x78
 8000f3a:	486f      	ldr	r0, [pc, #444]	; (80010f8 <FreqMenu_DrawFreqPresetMenu+0x58c>)
 8000f3c:	f009 f9f8 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8000f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	2302      	movs	r3, #2
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	225f      	movs	r2, #95	; 0x5f
 8000f4e:	2178      	movs	r1, #120	; 0x78
 8000f50:	486a      	ldr	r0, [pc, #424]	; (80010fc <FreqMenu_DrawFreqPresetMenu+0x590>)
 8000f52:	f009 f9ed 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8000f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2300      	movs	r3, #0
 8000f62:	2273      	movs	r2, #115	; 0x73
 8000f64:	2178      	movs	r1, #120	; 0x78
 8000f66:	4866      	ldr	r0, [pc, #408]	; (8001100 <FreqMenu_DrawFreqPresetMenu+0x594>)
 8000f68:	f009 f9e2 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8000f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	2302      	movs	r3, #2
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	2287      	movs	r2, #135	; 0x87
 8000f7a:	2178      	movs	r1, #120	; 0x78
 8000f7c:	4861      	ldr	r0, [pc, #388]	; (8001104 <FreqMenu_DrawFreqPresetMenu+0x598>)
 8000f7e:	f009 f9d7 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8000f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	2302      	movs	r3, #2
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	229b      	movs	r2, #155	; 0x9b
 8000f90:	2178      	movs	r1, #120	; 0x78
 8000f92:	485d      	ldr	r0, [pc, #372]	; (8001108 <FreqMenu_DrawFreqPresetMenu+0x59c>)
 8000f94:	f009 f9cc 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8000f98:	f000 bf3a 	b.w	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
		case FPRESET_100HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8000f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	2223      	movs	r2, #35	; 0x23
 8000faa:	210a      	movs	r1, #10
 8000fac:	4849      	ldr	r0, [pc, #292]	; (80010d4 <FreqMenu_DrawFreqPresetMenu+0x568>)
 8000fae:	f009 f9bf 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	2302      	movs	r3, #2
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2237      	movs	r2, #55	; 0x37
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	4845      	ldr	r0, [pc, #276]	; (80010d8 <FreqMenu_DrawFreqPresetMenu+0x56c>)
 8000fc4:	f009 f9b4 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8000fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	2302      	movs	r3, #2
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	224b      	movs	r2, #75	; 0x4b
 8000fd6:	210a      	movs	r1, #10
 8000fd8:	4840      	ldr	r0, [pc, #256]	; (80010dc <FreqMenu_DrawFreqPresetMenu+0x570>)
 8000fda:	f009 f9a9 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, WHITE, 2, BLACK);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fea:	225f      	movs	r2, #95	; 0x5f
 8000fec:	210a      	movs	r1, #10
 8000fee:	483c      	ldr	r0, [pc, #240]	; (80010e0 <FreqMenu_DrawFreqPresetMenu+0x574>)
 8000ff0:	f009 f99e 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8000ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	2273      	movs	r2, #115	; 0x73
 8001002:	210a      	movs	r1, #10
 8001004:	4837      	ldr	r0, [pc, #220]	; (80010e4 <FreqMenu_DrawFreqPresetMenu+0x578>)
 8001006:	f009 f993 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 800100a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	2302      	movs	r3, #2
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2300      	movs	r3, #0
 8001016:	2287      	movs	r2, #135	; 0x87
 8001018:	210a      	movs	r1, #10
 800101a:	4833      	ldr	r0, [pc, #204]	; (80010e8 <FreqMenu_DrawFreqPresetMenu+0x57c>)
 800101c:	f009 f988 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	2302      	movs	r3, #2
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	229b      	movs	r2, #155	; 0x9b
 800102e:	210a      	movs	r1, #10
 8001030:	482e      	ldr	r0, [pc, #184]	; (80010ec <FreqMenu_DrawFreqPresetMenu+0x580>)
 8001032:	f009 f97d 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8001036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	2302      	movs	r3, #2
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2300      	movs	r3, #0
 8001042:	2223      	movs	r2, #35	; 0x23
 8001044:	2178      	movs	r1, #120	; 0x78
 8001046:	482a      	ldr	r0, [pc, #168]	; (80010f0 <FreqMenu_DrawFreqPresetMenu+0x584>)
 8001048:	f009 f972 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	2302      	movs	r3, #2
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	2237      	movs	r2, #55	; 0x37
 800105a:	2178      	movs	r1, #120	; 0x78
 800105c:	4825      	ldr	r0, [pc, #148]	; (80010f4 <FreqMenu_DrawFreqPresetMenu+0x588>)
 800105e:	f009 f967 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8001062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	2302      	movs	r3, #2
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2300      	movs	r3, #0
 800106e:	224b      	movs	r2, #75	; 0x4b
 8001070:	2178      	movs	r1, #120	; 0x78
 8001072:	4821      	ldr	r0, [pc, #132]	; (80010f8 <FreqMenu_DrawFreqPresetMenu+0x58c>)
 8001074:	f009 f95c 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	2302      	movs	r3, #2
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2300      	movs	r3, #0
 8001084:	225f      	movs	r2, #95	; 0x5f
 8001086:	2178      	movs	r1, #120	; 0x78
 8001088:	481c      	ldr	r0, [pc, #112]	; (80010fc <FreqMenu_DrawFreqPresetMenu+0x590>)
 800108a:	f009 f951 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 800108e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	2302      	movs	r3, #2
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2300      	movs	r3, #0
 800109a:	2273      	movs	r2, #115	; 0x73
 800109c:	2178      	movs	r1, #120	; 0x78
 800109e:	4818      	ldr	r0, [pc, #96]	; (8001100 <FreqMenu_DrawFreqPresetMenu+0x594>)
 80010a0:	f009 f946 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 80010a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	2302      	movs	r3, #2
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2300      	movs	r3, #0
 80010b0:	2287      	movs	r2, #135	; 0x87
 80010b2:	2178      	movs	r1, #120	; 0x78
 80010b4:	4813      	ldr	r0, [pc, #76]	; (8001104 <FreqMenu_DrawFreqPresetMenu+0x598>)
 80010b6:	f009 f93b 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 80010ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	2302      	movs	r3, #2
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2300      	movs	r3, #0
 80010c6:	229b      	movs	r2, #155	; 0x9b
 80010c8:	2178      	movs	r1, #120	; 0x78
 80010ca:	480f      	ldr	r0, [pc, #60]	; (8001108 <FreqMenu_DrawFreqPresetMenu+0x59c>)
 80010cc:	f009 f930 	bl	800a330 <ILI9341_Draw_Text>
			break;
 80010d0:	f000 be9e 	b.w	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
 80010d4:	0800c0a0 	.word	0x0800c0a0
 80010d8:	0800c0a8 	.word	0x0800c0a8
 80010dc:	0800c0b0 	.word	0x0800c0b0
 80010e0:	0800c0b8 	.word	0x0800c0b8
 80010e4:	0800c0c0 	.word	0x0800c0c0
 80010e8:	0800c0c8 	.word	0x0800c0c8
 80010ec:	0800c0d0 	.word	0x0800c0d0
 80010f0:	0800c0d8 	.word	0x0800c0d8
 80010f4:	0800c0e0 	.word	0x0800c0e0
 80010f8:	0800c0e8 	.word	0x0800c0e8
 80010fc:	0800c0f0 	.word	0x0800c0f0
 8001100:	0800c0f8 	.word	0x0800c0f8
 8001104:	0800c100 	.word	0x0800c100
 8001108:	0800c108 	.word	0x0800c108
		case FPRESET_250HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 800110c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2302      	movs	r3, #2
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	2223      	movs	r2, #35	; 0x23
 800111a:	210a      	movs	r1, #10
 800111c:	4897      	ldr	r0, [pc, #604]	; (800137c <FreqMenu_DrawFreqPresetMenu+0x810>)
 800111e:	f009 f907 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	2302      	movs	r3, #2
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2300      	movs	r3, #0
 800112e:	2237      	movs	r2, #55	; 0x37
 8001130:	210a      	movs	r1, #10
 8001132:	4893      	ldr	r0, [pc, #588]	; (8001380 <FreqMenu_DrawFreqPresetMenu+0x814>)
 8001134:	f009 f8fc 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	2302      	movs	r3, #2
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	224b      	movs	r2, #75	; 0x4b
 8001146:	210a      	movs	r1, #10
 8001148:	488e      	ldr	r0, [pc, #568]	; (8001384 <FreqMenu_DrawFreqPresetMenu+0x818>)
 800114a:	f009 f8f1 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	2302      	movs	r3, #2
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	225f      	movs	r2, #95	; 0x5f
 800115c:	210a      	movs	r1, #10
 800115e:	488a      	ldr	r0, [pc, #552]	; (8001388 <FreqMenu_DrawFreqPresetMenu+0x81c>)
 8001160:	f009 f8e6 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, WHITE, 2, BLACK);
 8001164:	2300      	movs	r3, #0
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	2302      	movs	r3, #2
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001170:	2273      	movs	r2, #115	; 0x73
 8001172:	210a      	movs	r1, #10
 8001174:	4885      	ldr	r0, [pc, #532]	; (800138c <FreqMenu_DrawFreqPresetMenu+0x820>)
 8001176:	f009 f8db 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 800117a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	2302      	movs	r3, #2
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	2287      	movs	r2, #135	; 0x87
 8001188:	210a      	movs	r1, #10
 800118a:	4881      	ldr	r0, [pc, #516]	; (8001390 <FreqMenu_DrawFreqPresetMenu+0x824>)
 800118c:	f009 f8d0 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2302      	movs	r3, #2
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	229b      	movs	r2, #155	; 0x9b
 800119e:	210a      	movs	r1, #10
 80011a0:	487c      	ldr	r0, [pc, #496]	; (8001394 <FreqMenu_DrawFreqPresetMenu+0x828>)
 80011a2:	f009 f8c5 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 80011a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2302      	movs	r3, #2
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	2223      	movs	r2, #35	; 0x23
 80011b4:	2178      	movs	r1, #120	; 0x78
 80011b6:	4878      	ldr	r0, [pc, #480]	; (8001398 <FreqMenu_DrawFreqPresetMenu+0x82c>)
 80011b8:	f009 f8ba 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 80011bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	2302      	movs	r3, #2
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2300      	movs	r3, #0
 80011c8:	2237      	movs	r2, #55	; 0x37
 80011ca:	2178      	movs	r1, #120	; 0x78
 80011cc:	4873      	ldr	r0, [pc, #460]	; (800139c <FreqMenu_DrawFreqPresetMenu+0x830>)
 80011ce:	f009 f8af 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 80011d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	2302      	movs	r3, #2
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	224b      	movs	r2, #75	; 0x4b
 80011e0:	2178      	movs	r1, #120	; 0x78
 80011e2:	486f      	ldr	r0, [pc, #444]	; (80013a0 <FreqMenu_DrawFreqPresetMenu+0x834>)
 80011e4:	f009 f8a4 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 80011e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	2302      	movs	r3, #2
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2300      	movs	r3, #0
 80011f4:	225f      	movs	r2, #95	; 0x5f
 80011f6:	2178      	movs	r1, #120	; 0x78
 80011f8:	486a      	ldr	r0, [pc, #424]	; (80013a4 <FreqMenu_DrawFreqPresetMenu+0x838>)
 80011fa:	f009 f899 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 80011fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	2302      	movs	r3, #2
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	2273      	movs	r2, #115	; 0x73
 800120c:	2178      	movs	r1, #120	; 0x78
 800120e:	4866      	ldr	r0, [pc, #408]	; (80013a8 <FreqMenu_DrawFreqPresetMenu+0x83c>)
 8001210:	f009 f88e 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2302      	movs	r3, #2
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2300      	movs	r3, #0
 8001220:	2287      	movs	r2, #135	; 0x87
 8001222:	2178      	movs	r1, #120	; 0x78
 8001224:	4861      	ldr	r0, [pc, #388]	; (80013ac <FreqMenu_DrawFreqPresetMenu+0x840>)
 8001226:	f009 f883 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 800122a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	2302      	movs	r3, #2
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	229b      	movs	r2, #155	; 0x9b
 8001238:	2178      	movs	r1, #120	; 0x78
 800123a:	485d      	ldr	r0, [pc, #372]	; (80013b0 <FreqMenu_DrawFreqPresetMenu+0x844>)
 800123c:	f009 f878 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8001240:	f000 bde6 	b.w	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
		case FPRESET_500HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8001244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	2302      	movs	r3, #2
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2300      	movs	r3, #0
 8001250:	2223      	movs	r2, #35	; 0x23
 8001252:	210a      	movs	r1, #10
 8001254:	4849      	ldr	r0, [pc, #292]	; (800137c <FreqMenu_DrawFreqPresetMenu+0x810>)
 8001256:	f009 f86b 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 800125a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2302      	movs	r3, #2
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2237      	movs	r2, #55	; 0x37
 8001268:	210a      	movs	r1, #10
 800126a:	4845      	ldr	r0, [pc, #276]	; (8001380 <FreqMenu_DrawFreqPresetMenu+0x814>)
 800126c:	f009 f860 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	2302      	movs	r3, #2
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2300      	movs	r3, #0
 800127c:	224b      	movs	r2, #75	; 0x4b
 800127e:	210a      	movs	r1, #10
 8001280:	4840      	ldr	r0, [pc, #256]	; (8001384 <FreqMenu_DrawFreqPresetMenu+0x818>)
 8001282:	f009 f855 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8001286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	2302      	movs	r3, #2
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2300      	movs	r3, #0
 8001292:	225f      	movs	r2, #95	; 0x5f
 8001294:	210a      	movs	r1, #10
 8001296:	483c      	ldr	r0, [pc, #240]	; (8001388 <FreqMenu_DrawFreqPresetMenu+0x81c>)
 8001298:	f009 f84a 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 800129c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	2302      	movs	r3, #2
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2300      	movs	r3, #0
 80012a8:	2273      	movs	r2, #115	; 0x73
 80012aa:	210a      	movs	r1, #10
 80012ac:	4837      	ldr	r0, [pc, #220]	; (800138c <FreqMenu_DrawFreqPresetMenu+0x820>)
 80012ae:	f009 f83f 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, WHITE, 2, BLACK);
 80012b2:	2300      	movs	r3, #0
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2302      	movs	r3, #2
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012be:	2287      	movs	r2, #135	; 0x87
 80012c0:	210a      	movs	r1, #10
 80012c2:	4833      	ldr	r0, [pc, #204]	; (8001390 <FreqMenu_DrawFreqPresetMenu+0x824>)
 80012c4:	f009 f834 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 80012c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2302      	movs	r3, #2
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2300      	movs	r3, #0
 80012d4:	229b      	movs	r2, #155	; 0x9b
 80012d6:	210a      	movs	r1, #10
 80012d8:	482e      	ldr	r0, [pc, #184]	; (8001394 <FreqMenu_DrawFreqPresetMenu+0x828>)
 80012da:	f009 f829 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 80012de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	2302      	movs	r3, #2
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2300      	movs	r3, #0
 80012ea:	2223      	movs	r2, #35	; 0x23
 80012ec:	2178      	movs	r1, #120	; 0x78
 80012ee:	482a      	ldr	r0, [pc, #168]	; (8001398 <FreqMenu_DrawFreqPresetMenu+0x82c>)
 80012f0:	f009 f81e 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 80012f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	2302      	movs	r3, #2
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	2237      	movs	r2, #55	; 0x37
 8001302:	2178      	movs	r1, #120	; 0x78
 8001304:	4825      	ldr	r0, [pc, #148]	; (800139c <FreqMenu_DrawFreqPresetMenu+0x830>)
 8001306:	f009 f813 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 800130a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	2302      	movs	r3, #2
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2300      	movs	r3, #0
 8001316:	224b      	movs	r2, #75	; 0x4b
 8001318:	2178      	movs	r1, #120	; 0x78
 800131a:	4821      	ldr	r0, [pc, #132]	; (80013a0 <FreqMenu_DrawFreqPresetMenu+0x834>)
 800131c:	f009 f808 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	2302      	movs	r3, #2
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	225f      	movs	r2, #95	; 0x5f
 800132e:	2178      	movs	r1, #120	; 0x78
 8001330:	481c      	ldr	r0, [pc, #112]	; (80013a4 <FreqMenu_DrawFreqPresetMenu+0x838>)
 8001332:	f008 fffd 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8001336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2302      	movs	r3, #2
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	2273      	movs	r2, #115	; 0x73
 8001344:	2178      	movs	r1, #120	; 0x78
 8001346:	4818      	ldr	r0, [pc, #96]	; (80013a8 <FreqMenu_DrawFreqPresetMenu+0x83c>)
 8001348:	f008 fff2 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 800134c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	2302      	movs	r3, #2
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	2287      	movs	r2, #135	; 0x87
 800135a:	2178      	movs	r1, #120	; 0x78
 800135c:	4813      	ldr	r0, [pc, #76]	; (80013ac <FreqMenu_DrawFreqPresetMenu+0x840>)
 800135e:	f008 ffe7 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8001362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	2302      	movs	r3, #2
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	229b      	movs	r2, #155	; 0x9b
 8001370:	2178      	movs	r1, #120	; 0x78
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <FreqMenu_DrawFreqPresetMenu+0x844>)
 8001374:	f008 ffdc 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8001378:	f000 bd4a 	b.w	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
 800137c:	0800c0a0 	.word	0x0800c0a0
 8001380:	0800c0a8 	.word	0x0800c0a8
 8001384:	0800c0b0 	.word	0x0800c0b0
 8001388:	0800c0b8 	.word	0x0800c0b8
 800138c:	0800c0c0 	.word	0x0800c0c0
 8001390:	0800c0c8 	.word	0x0800c0c8
 8001394:	0800c0d0 	.word	0x0800c0d0
 8001398:	0800c0d8 	.word	0x0800c0d8
 800139c:	0800c0e0 	.word	0x0800c0e0
 80013a0:	0800c0e8 	.word	0x0800c0e8
 80013a4:	0800c0f0 	.word	0x0800c0f0
 80013a8:	0800c0f8 	.word	0x0800c0f8
 80013ac:	0800c100 	.word	0x0800c100
 80013b0:	0800c108 	.word	0x0800c108
		case FPRESET_750HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 80013b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	2302      	movs	r3, #2
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	2223      	movs	r2, #35	; 0x23
 80013c2:	210a      	movs	r1, #10
 80013c4:	4897      	ldr	r0, [pc, #604]	; (8001624 <FreqMenu_DrawFreqPresetMenu+0xab8>)
 80013c6:	f008 ffb3 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 80013ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	2302      	movs	r3, #2
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	2237      	movs	r2, #55	; 0x37
 80013d8:	210a      	movs	r1, #10
 80013da:	4893      	ldr	r0, [pc, #588]	; (8001628 <FreqMenu_DrawFreqPresetMenu+0xabc>)
 80013dc:	f008 ffa8 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 80013e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2302      	movs	r3, #2
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2300      	movs	r3, #0
 80013ec:	224b      	movs	r2, #75	; 0x4b
 80013ee:	210a      	movs	r1, #10
 80013f0:	488e      	ldr	r0, [pc, #568]	; (800162c <FreqMenu_DrawFreqPresetMenu+0xac0>)
 80013f2:	f008 ff9d 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 80013f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	2302      	movs	r3, #2
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2300      	movs	r3, #0
 8001402:	225f      	movs	r2, #95	; 0x5f
 8001404:	210a      	movs	r1, #10
 8001406:	488a      	ldr	r0, [pc, #552]	; (8001630 <FreqMenu_DrawFreqPresetMenu+0xac4>)
 8001408:	f008 ff92 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 800140c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2302      	movs	r3, #2
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2273      	movs	r2, #115	; 0x73
 800141a:	210a      	movs	r1, #10
 800141c:	4885      	ldr	r0, [pc, #532]	; (8001634 <FreqMenu_DrawFreqPresetMenu+0xac8>)
 800141e:	f008 ff87 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8001422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	2302      	movs	r3, #2
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	2287      	movs	r2, #135	; 0x87
 8001430:	210a      	movs	r1, #10
 8001432:	4881      	ldr	r0, [pc, #516]	; (8001638 <FreqMenu_DrawFreqPresetMenu+0xacc>)
 8001434:	f008 ff7c 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, WHITE, 2, BLACK);
 8001438:	2300      	movs	r3, #0
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	2302      	movs	r3, #2
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001444:	229b      	movs	r2, #155	; 0x9b
 8001446:	210a      	movs	r1, #10
 8001448:	487c      	ldr	r0, [pc, #496]	; (800163c <FreqMenu_DrawFreqPresetMenu+0xad0>)
 800144a:	f008 ff71 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 800144e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2302      	movs	r3, #2
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	2223      	movs	r2, #35	; 0x23
 800145c:	2178      	movs	r1, #120	; 0x78
 800145e:	4878      	ldr	r0, [pc, #480]	; (8001640 <FreqMenu_DrawFreqPresetMenu+0xad4>)
 8001460:	f008 ff66 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8001464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	2302      	movs	r3, #2
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	2237      	movs	r2, #55	; 0x37
 8001472:	2178      	movs	r1, #120	; 0x78
 8001474:	4873      	ldr	r0, [pc, #460]	; (8001644 <FreqMenu_DrawFreqPresetMenu+0xad8>)
 8001476:	f008 ff5b 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 800147a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2302      	movs	r3, #2
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	224b      	movs	r2, #75	; 0x4b
 8001488:	2178      	movs	r1, #120	; 0x78
 800148a:	486f      	ldr	r0, [pc, #444]	; (8001648 <FreqMenu_DrawFreqPresetMenu+0xadc>)
 800148c:	f008 ff50 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2302      	movs	r3, #2
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	225f      	movs	r2, #95	; 0x5f
 800149e:	2178      	movs	r1, #120	; 0x78
 80014a0:	486a      	ldr	r0, [pc, #424]	; (800164c <FreqMenu_DrawFreqPresetMenu+0xae0>)
 80014a2:	f008 ff45 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 80014a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2302      	movs	r3, #2
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2300      	movs	r3, #0
 80014b2:	2273      	movs	r2, #115	; 0x73
 80014b4:	2178      	movs	r1, #120	; 0x78
 80014b6:	4866      	ldr	r0, [pc, #408]	; (8001650 <FreqMenu_DrawFreqPresetMenu+0xae4>)
 80014b8:	f008 ff3a 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 80014bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	2302      	movs	r3, #2
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	2287      	movs	r2, #135	; 0x87
 80014ca:	2178      	movs	r1, #120	; 0x78
 80014cc:	4861      	ldr	r0, [pc, #388]	; (8001654 <FreqMenu_DrawFreqPresetMenu+0xae8>)
 80014ce:	f008 ff2f 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 80014d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	2302      	movs	r3, #2
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2300      	movs	r3, #0
 80014de:	229b      	movs	r2, #155	; 0x9b
 80014e0:	2178      	movs	r1, #120	; 0x78
 80014e2:	485d      	ldr	r0, [pc, #372]	; (8001658 <FreqMenu_DrawFreqPresetMenu+0xaec>)
 80014e4:	f008 ff24 	bl	800a330 <ILI9341_Draw_Text>
			break;
 80014e8:	f000 bc92 	b.w	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
		case FPRESET_1KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 80014ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2302      	movs	r3, #2
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	2223      	movs	r2, #35	; 0x23
 80014fa:	210a      	movs	r1, #10
 80014fc:	4849      	ldr	r0, [pc, #292]	; (8001624 <FreqMenu_DrawFreqPresetMenu+0xab8>)
 80014fe:	f008 ff17 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	2302      	movs	r3, #2
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	2237      	movs	r2, #55	; 0x37
 8001510:	210a      	movs	r1, #10
 8001512:	4845      	ldr	r0, [pc, #276]	; (8001628 <FreqMenu_DrawFreqPresetMenu+0xabc>)
 8001514:	f008 ff0c 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	2302      	movs	r3, #2
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2300      	movs	r3, #0
 8001524:	224b      	movs	r2, #75	; 0x4b
 8001526:	210a      	movs	r1, #10
 8001528:	4840      	ldr	r0, [pc, #256]	; (800162c <FreqMenu_DrawFreqPresetMenu+0xac0>)
 800152a:	f008 ff01 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 800152e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	2302      	movs	r3, #2
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2300      	movs	r3, #0
 800153a:	225f      	movs	r2, #95	; 0x5f
 800153c:	210a      	movs	r1, #10
 800153e:	483c      	ldr	r0, [pc, #240]	; (8001630 <FreqMenu_DrawFreqPresetMenu+0xac4>)
 8001540:	f008 fef6 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8001544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	2302      	movs	r3, #2
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2300      	movs	r3, #0
 8001550:	2273      	movs	r2, #115	; 0x73
 8001552:	210a      	movs	r1, #10
 8001554:	4837      	ldr	r0, [pc, #220]	; (8001634 <FreqMenu_DrawFreqPresetMenu+0xac8>)
 8001556:	f008 feeb 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 800155a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2302      	movs	r3, #2
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	2287      	movs	r2, #135	; 0x87
 8001568:	210a      	movs	r1, #10
 800156a:	4833      	ldr	r0, [pc, #204]	; (8001638 <FreqMenu_DrawFreqPresetMenu+0xacc>)
 800156c:	f008 fee0 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	2302      	movs	r3, #2
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2300      	movs	r3, #0
 800157c:	229b      	movs	r2, #155	; 0x9b
 800157e:	210a      	movs	r1, #10
 8001580:	482e      	ldr	r0, [pc, #184]	; (800163c <FreqMenu_DrawFreqPresetMenu+0xad0>)
 8001582:	f008 fed5 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, WHITE, 2, BLACK);
 8001586:	2300      	movs	r3, #0
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	2302      	movs	r3, #2
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001592:	2223      	movs	r2, #35	; 0x23
 8001594:	2178      	movs	r1, #120	; 0x78
 8001596:	482a      	ldr	r0, [pc, #168]	; (8001640 <FreqMenu_DrawFreqPresetMenu+0xad4>)
 8001598:	f008 feca 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 800159c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	2302      	movs	r3, #2
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2300      	movs	r3, #0
 80015a8:	2237      	movs	r2, #55	; 0x37
 80015aa:	2178      	movs	r1, #120	; 0x78
 80015ac:	4825      	ldr	r0, [pc, #148]	; (8001644 <FreqMenu_DrawFreqPresetMenu+0xad8>)
 80015ae:	f008 febf 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 80015b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	2302      	movs	r3, #2
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	224b      	movs	r2, #75	; 0x4b
 80015c0:	2178      	movs	r1, #120	; 0x78
 80015c2:	4821      	ldr	r0, [pc, #132]	; (8001648 <FreqMenu_DrawFreqPresetMenu+0xadc>)
 80015c4:	f008 feb4 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 80015c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	2302      	movs	r3, #2
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2300      	movs	r3, #0
 80015d4:	225f      	movs	r2, #95	; 0x5f
 80015d6:	2178      	movs	r1, #120	; 0x78
 80015d8:	481c      	ldr	r0, [pc, #112]	; (800164c <FreqMenu_DrawFreqPresetMenu+0xae0>)
 80015da:	f008 fea9 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 80015de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	2302      	movs	r3, #2
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2300      	movs	r3, #0
 80015ea:	2273      	movs	r2, #115	; 0x73
 80015ec:	2178      	movs	r1, #120	; 0x78
 80015ee:	4818      	ldr	r0, [pc, #96]	; (8001650 <FreqMenu_DrawFreqPresetMenu+0xae4>)
 80015f0:	f008 fe9e 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 80015f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2302      	movs	r3, #2
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	2287      	movs	r2, #135	; 0x87
 8001602:	2178      	movs	r1, #120	; 0x78
 8001604:	4813      	ldr	r0, [pc, #76]	; (8001654 <FreqMenu_DrawFreqPresetMenu+0xae8>)
 8001606:	f008 fe93 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 800160a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2302      	movs	r3, #2
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	229b      	movs	r2, #155	; 0x9b
 8001618:	2178      	movs	r1, #120	; 0x78
 800161a:	480f      	ldr	r0, [pc, #60]	; (8001658 <FreqMenu_DrawFreqPresetMenu+0xaec>)
 800161c:	f008 fe88 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8001620:	e3f6      	b.n	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
 8001622:	bf00      	nop
 8001624:	0800c0a0 	.word	0x0800c0a0
 8001628:	0800c0a8 	.word	0x0800c0a8
 800162c:	0800c0b0 	.word	0x0800c0b0
 8001630:	0800c0b8 	.word	0x0800c0b8
 8001634:	0800c0c0 	.word	0x0800c0c0
 8001638:	0800c0c8 	.word	0x0800c0c8
 800163c:	0800c0d0 	.word	0x0800c0d0
 8001640:	0800c0d8 	.word	0x0800c0d8
 8001644:	0800c0e0 	.word	0x0800c0e0
 8001648:	0800c0e8 	.word	0x0800c0e8
 800164c:	0800c0f0 	.word	0x0800c0f0
 8001650:	0800c0f8 	.word	0x0800c0f8
 8001654:	0800c100 	.word	0x0800c100
 8001658:	0800c108 	.word	0x0800c108
		case FPRESET_5KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 800165c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	2302      	movs	r3, #2
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	2223      	movs	r2, #35	; 0x23
 800166a:	210a      	movs	r1, #10
 800166c:	4896      	ldr	r0, [pc, #600]	; (80018c8 <FreqMenu_DrawFreqPresetMenu+0xd5c>)
 800166e:	f008 fe5f 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2302      	movs	r3, #2
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	2237      	movs	r2, #55	; 0x37
 8001680:	210a      	movs	r1, #10
 8001682:	4892      	ldr	r0, [pc, #584]	; (80018cc <FreqMenu_DrawFreqPresetMenu+0xd60>)
 8001684:	f008 fe54 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2302      	movs	r3, #2
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	224b      	movs	r2, #75	; 0x4b
 8001696:	210a      	movs	r1, #10
 8001698:	488d      	ldr	r0, [pc, #564]	; (80018d0 <FreqMenu_DrawFreqPresetMenu+0xd64>)
 800169a:	f008 fe49 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 800169e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2302      	movs	r3, #2
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	225f      	movs	r2, #95	; 0x5f
 80016ac:	210a      	movs	r1, #10
 80016ae:	4889      	ldr	r0, [pc, #548]	; (80018d4 <FreqMenu_DrawFreqPresetMenu+0xd68>)
 80016b0:	f008 fe3e 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	2302      	movs	r3, #2
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2300      	movs	r3, #0
 80016c0:	2273      	movs	r2, #115	; 0x73
 80016c2:	210a      	movs	r1, #10
 80016c4:	4884      	ldr	r0, [pc, #528]	; (80018d8 <FreqMenu_DrawFreqPresetMenu+0xd6c>)
 80016c6:	f008 fe33 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 80016ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	2302      	movs	r3, #2
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2300      	movs	r3, #0
 80016d6:	2287      	movs	r2, #135	; 0x87
 80016d8:	210a      	movs	r1, #10
 80016da:	4880      	ldr	r0, [pc, #512]	; (80018dc <FreqMenu_DrawFreqPresetMenu+0xd70>)
 80016dc:	f008 fe28 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 80016e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	2302      	movs	r3, #2
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	229b      	movs	r2, #155	; 0x9b
 80016ee:	210a      	movs	r1, #10
 80016f0:	487b      	ldr	r0, [pc, #492]	; (80018e0 <FreqMenu_DrawFreqPresetMenu+0xd74>)
 80016f2:	f008 fe1d 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 80016f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	2302      	movs	r3, #2
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	2223      	movs	r2, #35	; 0x23
 8001704:	2178      	movs	r1, #120	; 0x78
 8001706:	4877      	ldr	r0, [pc, #476]	; (80018e4 <FreqMenu_DrawFreqPresetMenu+0xd78>)
 8001708:	f008 fe12 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, WHITE, 2, BLACK);
 800170c:	2300      	movs	r3, #0
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2302      	movs	r3, #2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001718:	2237      	movs	r2, #55	; 0x37
 800171a:	2178      	movs	r1, #120	; 0x78
 800171c:	4872      	ldr	r0, [pc, #456]	; (80018e8 <FreqMenu_DrawFreqPresetMenu+0xd7c>)
 800171e:	f008 fe07 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8001722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2302      	movs	r3, #2
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2300      	movs	r3, #0
 800172e:	224b      	movs	r2, #75	; 0x4b
 8001730:	2178      	movs	r1, #120	; 0x78
 8001732:	486e      	ldr	r0, [pc, #440]	; (80018ec <FreqMenu_DrawFreqPresetMenu+0xd80>)
 8001734:	f008 fdfc 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	2302      	movs	r3, #2
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2300      	movs	r3, #0
 8001744:	225f      	movs	r2, #95	; 0x5f
 8001746:	2178      	movs	r1, #120	; 0x78
 8001748:	4869      	ldr	r0, [pc, #420]	; (80018f0 <FreqMenu_DrawFreqPresetMenu+0xd84>)
 800174a:	f008 fdf1 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 800174e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2302      	movs	r3, #2
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2300      	movs	r3, #0
 800175a:	2273      	movs	r2, #115	; 0x73
 800175c:	2178      	movs	r1, #120	; 0x78
 800175e:	4865      	ldr	r0, [pc, #404]	; (80018f4 <FreqMenu_DrawFreqPresetMenu+0xd88>)
 8001760:	f008 fde6 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	2302      	movs	r3, #2
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	2287      	movs	r2, #135	; 0x87
 8001772:	2178      	movs	r1, #120	; 0x78
 8001774:	4860      	ldr	r0, [pc, #384]	; (80018f8 <FreqMenu_DrawFreqPresetMenu+0xd8c>)
 8001776:	f008 fddb 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 800177a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	2302      	movs	r3, #2
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	229b      	movs	r2, #155	; 0x9b
 8001788:	2178      	movs	r1, #120	; 0x78
 800178a:	485c      	ldr	r0, [pc, #368]	; (80018fc <FreqMenu_DrawFreqPresetMenu+0xd90>)
 800178c:	f008 fdd0 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8001790:	e33e      	b.n	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
		case FPRESET_10KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8001792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	2302      	movs	r3, #2
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	2223      	movs	r2, #35	; 0x23
 80017a0:	210a      	movs	r1, #10
 80017a2:	4849      	ldr	r0, [pc, #292]	; (80018c8 <FreqMenu_DrawFreqPresetMenu+0xd5c>)
 80017a4:	f008 fdc4 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 80017a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2302      	movs	r3, #2
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2300      	movs	r3, #0
 80017b4:	2237      	movs	r2, #55	; 0x37
 80017b6:	210a      	movs	r1, #10
 80017b8:	4844      	ldr	r0, [pc, #272]	; (80018cc <FreqMenu_DrawFreqPresetMenu+0xd60>)
 80017ba:	f008 fdb9 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 80017be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2300      	movs	r3, #0
 80017ca:	224b      	movs	r2, #75	; 0x4b
 80017cc:	210a      	movs	r1, #10
 80017ce:	4840      	ldr	r0, [pc, #256]	; (80018d0 <FreqMenu_DrawFreqPresetMenu+0xd64>)
 80017d0:	f008 fdae 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 80017d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	2302      	movs	r3, #2
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	225f      	movs	r2, #95	; 0x5f
 80017e2:	210a      	movs	r1, #10
 80017e4:	483b      	ldr	r0, [pc, #236]	; (80018d4 <FreqMenu_DrawFreqPresetMenu+0xd68>)
 80017e6:	f008 fda3 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 80017ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	2273      	movs	r2, #115	; 0x73
 80017f8:	210a      	movs	r1, #10
 80017fa:	4837      	ldr	r0, [pc, #220]	; (80018d8 <FreqMenu_DrawFreqPresetMenu+0xd6c>)
 80017fc:	f008 fd98 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8001800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2302      	movs	r3, #2
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	2287      	movs	r2, #135	; 0x87
 800180e:	210a      	movs	r1, #10
 8001810:	4832      	ldr	r0, [pc, #200]	; (80018dc <FreqMenu_DrawFreqPresetMenu+0xd70>)
 8001812:	f008 fd8d 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	229b      	movs	r2, #155	; 0x9b
 8001824:	210a      	movs	r1, #10
 8001826:	482e      	ldr	r0, [pc, #184]	; (80018e0 <FreqMenu_DrawFreqPresetMenu+0xd74>)
 8001828:	f008 fd82 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 800182c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	2302      	movs	r3, #2
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	2223      	movs	r2, #35	; 0x23
 800183a:	2178      	movs	r1, #120	; 0x78
 800183c:	4829      	ldr	r0, [pc, #164]	; (80018e4 <FreqMenu_DrawFreqPresetMenu+0xd78>)
 800183e:	f008 fd77 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8001842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	2302      	movs	r3, #2
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2300      	movs	r3, #0
 800184e:	2237      	movs	r2, #55	; 0x37
 8001850:	2178      	movs	r1, #120	; 0x78
 8001852:	4825      	ldr	r0, [pc, #148]	; (80018e8 <FreqMenu_DrawFreqPresetMenu+0xd7c>)
 8001854:	f008 fd6c 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, WHITE, 2, BLACK);
 8001858:	2300      	movs	r3, #0
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	2302      	movs	r3, #2
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001864:	224b      	movs	r2, #75	; 0x4b
 8001866:	2178      	movs	r1, #120	; 0x78
 8001868:	4820      	ldr	r0, [pc, #128]	; (80018ec <FreqMenu_DrawFreqPresetMenu+0xd80>)
 800186a:	f008 fd61 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 800186e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2302      	movs	r3, #2
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2300      	movs	r3, #0
 800187a:	225f      	movs	r2, #95	; 0x5f
 800187c:	2178      	movs	r1, #120	; 0x78
 800187e:	481c      	ldr	r0, [pc, #112]	; (80018f0 <FreqMenu_DrawFreqPresetMenu+0xd84>)
 8001880:	f008 fd56 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8001884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	2302      	movs	r3, #2
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2300      	movs	r3, #0
 8001890:	2273      	movs	r2, #115	; 0x73
 8001892:	2178      	movs	r1, #120	; 0x78
 8001894:	4817      	ldr	r0, [pc, #92]	; (80018f4 <FreqMenu_DrawFreqPresetMenu+0xd88>)
 8001896:	f008 fd4b 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 800189a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	2302      	movs	r3, #2
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	2287      	movs	r2, #135	; 0x87
 80018a8:	2178      	movs	r1, #120	; 0x78
 80018aa:	4813      	ldr	r0, [pc, #76]	; (80018f8 <FreqMenu_DrawFreqPresetMenu+0xd8c>)
 80018ac:	f008 fd40 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 80018b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	2302      	movs	r3, #2
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2300      	movs	r3, #0
 80018bc:	229b      	movs	r2, #155	; 0x9b
 80018be:	2178      	movs	r1, #120	; 0x78
 80018c0:	480e      	ldr	r0, [pc, #56]	; (80018fc <FreqMenu_DrawFreqPresetMenu+0xd90>)
 80018c2:	f008 fd35 	bl	800a330 <ILI9341_Draw_Text>
			break;
 80018c6:	e2a3      	b.n	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
 80018c8:	0800c0a0 	.word	0x0800c0a0
 80018cc:	0800c0a8 	.word	0x0800c0a8
 80018d0:	0800c0b0 	.word	0x0800c0b0
 80018d4:	0800c0b8 	.word	0x0800c0b8
 80018d8:	0800c0c0 	.word	0x0800c0c0
 80018dc:	0800c0c8 	.word	0x0800c0c8
 80018e0:	0800c0d0 	.word	0x0800c0d0
 80018e4:	0800c0d8 	.word	0x0800c0d8
 80018e8:	0800c0e0 	.word	0x0800c0e0
 80018ec:	0800c0e8 	.word	0x0800c0e8
 80018f0:	0800c0f0 	.word	0x0800c0f0
 80018f4:	0800c0f8 	.word	0x0800c0f8
 80018f8:	0800c100 	.word	0x0800c100
 80018fc:	0800c108 	.word	0x0800c108
		case FPRESET_25KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8001900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2302      	movs	r3, #2
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	2223      	movs	r2, #35	; 0x23
 800190e:	210a      	movs	r1, #10
 8001910:	4896      	ldr	r0, [pc, #600]	; (8001b6c <FreqMenu_DrawFreqPresetMenu+0x1000>)
 8001912:	f008 fd0d 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2300      	movs	r3, #0
 8001922:	2237      	movs	r2, #55	; 0x37
 8001924:	210a      	movs	r1, #10
 8001926:	4892      	ldr	r0, [pc, #584]	; (8001b70 <FreqMenu_DrawFreqPresetMenu+0x1004>)
 8001928:	f008 fd02 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 800192c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	2302      	movs	r3, #2
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2300      	movs	r3, #0
 8001938:	224b      	movs	r2, #75	; 0x4b
 800193a:	210a      	movs	r1, #10
 800193c:	488d      	ldr	r0, [pc, #564]	; (8001b74 <FreqMenu_DrawFreqPresetMenu+0x1008>)
 800193e:	f008 fcf7 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8001942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	2302      	movs	r3, #2
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2300      	movs	r3, #0
 800194e:	225f      	movs	r2, #95	; 0x5f
 8001950:	210a      	movs	r1, #10
 8001952:	4889      	ldr	r0, [pc, #548]	; (8001b78 <FreqMenu_DrawFreqPresetMenu+0x100c>)
 8001954:	f008 fcec 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8001958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	2302      	movs	r3, #2
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	2273      	movs	r2, #115	; 0x73
 8001966:	210a      	movs	r1, #10
 8001968:	4884      	ldr	r0, [pc, #528]	; (8001b7c <FreqMenu_DrawFreqPresetMenu+0x1010>)
 800196a:	f008 fce1 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 800196e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2302      	movs	r3, #2
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2300      	movs	r3, #0
 800197a:	2287      	movs	r2, #135	; 0x87
 800197c:	210a      	movs	r1, #10
 800197e:	4880      	ldr	r0, [pc, #512]	; (8001b80 <FreqMenu_DrawFreqPresetMenu+0x1014>)
 8001980:	f008 fcd6 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	2302      	movs	r3, #2
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2300      	movs	r3, #0
 8001990:	229b      	movs	r2, #155	; 0x9b
 8001992:	210a      	movs	r1, #10
 8001994:	487b      	ldr	r0, [pc, #492]	; (8001b84 <FreqMenu_DrawFreqPresetMenu+0x1018>)
 8001996:	f008 fccb 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 800199a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	2223      	movs	r2, #35	; 0x23
 80019a8:	2178      	movs	r1, #120	; 0x78
 80019aa:	4877      	ldr	r0, [pc, #476]	; (8001b88 <FreqMenu_DrawFreqPresetMenu+0x101c>)
 80019ac:	f008 fcc0 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 80019b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2237      	movs	r2, #55	; 0x37
 80019be:	2178      	movs	r1, #120	; 0x78
 80019c0:	4872      	ldr	r0, [pc, #456]	; (8001b8c <FreqMenu_DrawFreqPresetMenu+0x1020>)
 80019c2:	f008 fcb5 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 80019c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2302      	movs	r3, #2
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2300      	movs	r3, #0
 80019d2:	224b      	movs	r2, #75	; 0x4b
 80019d4:	2178      	movs	r1, #120	; 0x78
 80019d6:	486e      	ldr	r0, [pc, #440]	; (8001b90 <FreqMenu_DrawFreqPresetMenu+0x1024>)
 80019d8:	f008 fcaa 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, WHITE, 2, BLACK);
 80019dc:	2300      	movs	r3, #0
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2302      	movs	r3, #2
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e8:	225f      	movs	r2, #95	; 0x5f
 80019ea:	2178      	movs	r1, #120	; 0x78
 80019ec:	4869      	ldr	r0, [pc, #420]	; (8001b94 <FreqMenu_DrawFreqPresetMenu+0x1028>)
 80019ee:	f008 fc9f 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 80019f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2302      	movs	r3, #2
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2300      	movs	r3, #0
 80019fe:	2273      	movs	r2, #115	; 0x73
 8001a00:	2178      	movs	r1, #120	; 0x78
 8001a02:	4865      	ldr	r0, [pc, #404]	; (8001b98 <FreqMenu_DrawFreqPresetMenu+0x102c>)
 8001a04:	f008 fc94 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2302      	movs	r3, #2
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	2287      	movs	r2, #135	; 0x87
 8001a16:	2178      	movs	r1, #120	; 0x78
 8001a18:	4860      	ldr	r0, [pc, #384]	; (8001b9c <FreqMenu_DrawFreqPresetMenu+0x1030>)
 8001a1a:	f008 fc89 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8001a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2302      	movs	r3, #2
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	229b      	movs	r2, #155	; 0x9b
 8001a2c:	2178      	movs	r1, #120	; 0x78
 8001a2e:	485c      	ldr	r0, [pc, #368]	; (8001ba0 <FreqMenu_DrawFreqPresetMenu+0x1034>)
 8001a30:	f008 fc7e 	bl	800a330 <ILI9341_Draw_Text>
			break;
 8001a34:	e1ec      	b.n	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
		case FPRESET_50KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8001a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	2223      	movs	r2, #35	; 0x23
 8001a44:	210a      	movs	r1, #10
 8001a46:	4849      	ldr	r0, [pc, #292]	; (8001b6c <FreqMenu_DrawFreqPresetMenu+0x1000>)
 8001a48:	f008 fc72 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2302      	movs	r3, #2
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	2237      	movs	r2, #55	; 0x37
 8001a5a:	210a      	movs	r1, #10
 8001a5c:	4844      	ldr	r0, [pc, #272]	; (8001b70 <FreqMenu_DrawFreqPresetMenu+0x1004>)
 8001a5e:	f008 fc67 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	2302      	movs	r3, #2
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	224b      	movs	r2, #75	; 0x4b
 8001a70:	210a      	movs	r1, #10
 8001a72:	4840      	ldr	r0, [pc, #256]	; (8001b74 <FreqMenu_DrawFreqPresetMenu+0x1008>)
 8001a74:	f008 fc5c 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8001a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	225f      	movs	r2, #95	; 0x5f
 8001a86:	210a      	movs	r1, #10
 8001a88:	483b      	ldr	r0, [pc, #236]	; (8001b78 <FreqMenu_DrawFreqPresetMenu+0x100c>)
 8001a8a:	f008 fc51 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8001a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2302      	movs	r3, #2
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2273      	movs	r2, #115	; 0x73
 8001a9c:	210a      	movs	r1, #10
 8001a9e:	4837      	ldr	r0, [pc, #220]	; (8001b7c <FreqMenu_DrawFreqPresetMenu+0x1010>)
 8001aa0:	f008 fc46 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8001aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	2302      	movs	r3, #2
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2287      	movs	r2, #135	; 0x87
 8001ab2:	210a      	movs	r1, #10
 8001ab4:	4832      	ldr	r0, [pc, #200]	; (8001b80 <FreqMenu_DrawFreqPresetMenu+0x1014>)
 8001ab6:	f008 fc3b 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	229b      	movs	r2, #155	; 0x9b
 8001ac8:	210a      	movs	r1, #10
 8001aca:	482e      	ldr	r0, [pc, #184]	; (8001b84 <FreqMenu_DrawFreqPresetMenu+0x1018>)
 8001acc:	f008 fc30 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8001ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2300      	movs	r3, #0
 8001adc:	2223      	movs	r2, #35	; 0x23
 8001ade:	2178      	movs	r1, #120	; 0x78
 8001ae0:	4829      	ldr	r0, [pc, #164]	; (8001b88 <FreqMenu_DrawFreqPresetMenu+0x101c>)
 8001ae2:	f008 fc25 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8001ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	2302      	movs	r3, #2
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2300      	movs	r3, #0
 8001af2:	2237      	movs	r2, #55	; 0x37
 8001af4:	2178      	movs	r1, #120	; 0x78
 8001af6:	4825      	ldr	r0, [pc, #148]	; (8001b8c <FreqMenu_DrawFreqPresetMenu+0x1020>)
 8001af8:	f008 fc1a 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8001afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	2302      	movs	r3, #2
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2300      	movs	r3, #0
 8001b08:	224b      	movs	r2, #75	; 0x4b
 8001b0a:	2178      	movs	r1, #120	; 0x78
 8001b0c:	4820      	ldr	r0, [pc, #128]	; (8001b90 <FreqMenu_DrawFreqPresetMenu+0x1024>)
 8001b0e:	f008 fc0f 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	225f      	movs	r2, #95	; 0x5f
 8001b20:	2178      	movs	r1, #120	; 0x78
 8001b22:	481c      	ldr	r0, [pc, #112]	; (8001b94 <FreqMenu_DrawFreqPresetMenu+0x1028>)
 8001b24:	f008 fc04 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, WHITE, 2, BLACK);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b34:	2273      	movs	r2, #115	; 0x73
 8001b36:	2178      	movs	r1, #120	; 0x78
 8001b38:	4817      	ldr	r0, [pc, #92]	; (8001b98 <FreqMenu_DrawFreqPresetMenu+0x102c>)
 8001b3a:	f008 fbf9 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2302      	movs	r3, #2
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2287      	movs	r2, #135	; 0x87
 8001b4c:	2178      	movs	r1, #120	; 0x78
 8001b4e:	4813      	ldr	r0, [pc, #76]	; (8001b9c <FreqMenu_DrawFreqPresetMenu+0x1030>)
 8001b50:	f008 fbee 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	229b      	movs	r2, #155	; 0x9b
 8001b62:	2178      	movs	r1, #120	; 0x78
 8001b64:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <FreqMenu_DrawFreqPresetMenu+0x1034>)
 8001b66:	f008 fbe3 	bl	800a330 <ILI9341_Draw_Text>
		break;
 8001b6a:	e151      	b.n	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
 8001b6c:	0800c0a0 	.word	0x0800c0a0
 8001b70:	0800c0a8 	.word	0x0800c0a8
 8001b74:	0800c0b0 	.word	0x0800c0b0
 8001b78:	0800c0b8 	.word	0x0800c0b8
 8001b7c:	0800c0c0 	.word	0x0800c0c0
 8001b80:	0800c0c8 	.word	0x0800c0c8
 8001b84:	0800c0d0 	.word	0x0800c0d0
 8001b88:	0800c0d8 	.word	0x0800c0d8
 8001b8c:	0800c0e0 	.word	0x0800c0e0
 8001b90:	0800c0e8 	.word	0x0800c0e8
 8001b94:	0800c0f0 	.word	0x0800c0f0
 8001b98:	0800c0f8 	.word	0x0800c0f8
 8001b9c:	0800c100 	.word	0x0800c100
 8001ba0:	0800c108 	.word	0x0800c108
		case FPRESET_75KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8001ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2302      	movs	r3, #2
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2223      	movs	r2, #35	; 0x23
 8001bb2:	210a      	movs	r1, #10
 8001bb4:	4898      	ldr	r0, [pc, #608]	; (8001e18 <FreqMenu_DrawFreqPresetMenu+0x12ac>)
 8001bb6:	f008 fbbb 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2237      	movs	r2, #55	; 0x37
 8001bc8:	210a      	movs	r1, #10
 8001bca:	4894      	ldr	r0, [pc, #592]	; (8001e1c <FreqMenu_DrawFreqPresetMenu+0x12b0>)
 8001bcc:	f008 fbb0 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	224b      	movs	r2, #75	; 0x4b
 8001bde:	210a      	movs	r1, #10
 8001be0:	488f      	ldr	r0, [pc, #572]	; (8001e20 <FreqMenu_DrawFreqPresetMenu+0x12b4>)
 8001be2:	f008 fba5 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8001be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2302      	movs	r3, #2
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	225f      	movs	r2, #95	; 0x5f
 8001bf4:	210a      	movs	r1, #10
 8001bf6:	488b      	ldr	r0, [pc, #556]	; (8001e24 <FreqMenu_DrawFreqPresetMenu+0x12b8>)
 8001bf8:	f008 fb9a 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8001bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2302      	movs	r3, #2
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	2273      	movs	r2, #115	; 0x73
 8001c0a:	210a      	movs	r1, #10
 8001c0c:	4886      	ldr	r0, [pc, #536]	; (8001e28 <FreqMenu_DrawFreqPresetMenu+0x12bc>)
 8001c0e:	f008 fb8f 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8001c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2287      	movs	r2, #135	; 0x87
 8001c20:	210a      	movs	r1, #10
 8001c22:	4882      	ldr	r0, [pc, #520]	; (8001e2c <FreqMenu_DrawFreqPresetMenu+0x12c0>)
 8001c24:	f008 fb84 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	2302      	movs	r3, #2
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	229b      	movs	r2, #155	; 0x9b
 8001c36:	210a      	movs	r1, #10
 8001c38:	487d      	ldr	r0, [pc, #500]	; (8001e30 <FreqMenu_DrawFreqPresetMenu+0x12c4>)
 8001c3a:	f008 fb79 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8001c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2302      	movs	r3, #2
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2223      	movs	r2, #35	; 0x23
 8001c4c:	2178      	movs	r1, #120	; 0x78
 8001c4e:	4879      	ldr	r0, [pc, #484]	; (8001e34 <FreqMenu_DrawFreqPresetMenu+0x12c8>)
 8001c50:	f008 fb6e 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8001c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2237      	movs	r2, #55	; 0x37
 8001c62:	2178      	movs	r1, #120	; 0x78
 8001c64:	4874      	ldr	r0, [pc, #464]	; (8001e38 <FreqMenu_DrawFreqPresetMenu+0x12cc>)
 8001c66:	f008 fb63 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8001c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	2302      	movs	r3, #2
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	224b      	movs	r2, #75	; 0x4b
 8001c78:	2178      	movs	r1, #120	; 0x78
 8001c7a:	4870      	ldr	r0, [pc, #448]	; (8001e3c <FreqMenu_DrawFreqPresetMenu+0x12d0>)
 8001c7c:	f008 fb58 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	2302      	movs	r3, #2
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	225f      	movs	r2, #95	; 0x5f
 8001c8e:	2178      	movs	r1, #120	; 0x78
 8001c90:	486b      	ldr	r0, [pc, #428]	; (8001e40 <FreqMenu_DrawFreqPresetMenu+0x12d4>)
 8001c92:	f008 fb4d 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8001c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2273      	movs	r2, #115	; 0x73
 8001ca4:	2178      	movs	r1, #120	; 0x78
 8001ca6:	4867      	ldr	r0, [pc, #412]	; (8001e44 <FreqMenu_DrawFreqPresetMenu+0x12d8>)
 8001ca8:	f008 fb42 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, WHITE, 2, BLACK);
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb8:	2287      	movs	r2, #135	; 0x87
 8001cba:	2178      	movs	r1, #120	; 0x78
 8001cbc:	4862      	ldr	r0, [pc, #392]	; (8001e48 <FreqMenu_DrawFreqPresetMenu+0x12dc>)
 8001cbe:	f008 fb37 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8001cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	229b      	movs	r2, #155	; 0x9b
 8001cd0:	2178      	movs	r1, #120	; 0x78
 8001cd2:	485e      	ldr	r0, [pc, #376]	; (8001e4c <FreqMenu_DrawFreqPresetMenu+0x12e0>)
 8001cd4:	f008 fb2c 	bl	800a330 <ILI9341_Draw_Text>
		break;
 8001cd8:	e09a      	b.n	8001e10 <FreqMenu_DrawFreqPresetMenu+0x12a4>
		case FPRESET_100KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8001cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2223      	movs	r2, #35	; 0x23
 8001ce8:	210a      	movs	r1, #10
 8001cea:	484b      	ldr	r0, [pc, #300]	; (8001e18 <FreqMenu_DrawFreqPresetMenu+0x12ac>)
 8001cec:	f008 fb20 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2237      	movs	r2, #55	; 0x37
 8001cfe:	210a      	movs	r1, #10
 8001d00:	4846      	ldr	r0, [pc, #280]	; (8001e1c <FreqMenu_DrawFreqPresetMenu+0x12b0>)
 8001d02:	f008 fb15 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2300      	movs	r3, #0
 8001d12:	224b      	movs	r2, #75	; 0x4b
 8001d14:	210a      	movs	r1, #10
 8001d16:	4842      	ldr	r0, [pc, #264]	; (8001e20 <FreqMenu_DrawFreqPresetMenu+0x12b4>)
 8001d18:	f008 fb0a 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8001d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2302      	movs	r3, #2
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2300      	movs	r3, #0
 8001d28:	225f      	movs	r2, #95	; 0x5f
 8001d2a:	210a      	movs	r1, #10
 8001d2c:	483d      	ldr	r0, [pc, #244]	; (8001e24 <FreqMenu_DrawFreqPresetMenu+0x12b8>)
 8001d2e:	f008 faff 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8001d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2273      	movs	r2, #115	; 0x73
 8001d40:	210a      	movs	r1, #10
 8001d42:	4839      	ldr	r0, [pc, #228]	; (8001e28 <FreqMenu_DrawFreqPresetMenu+0x12bc>)
 8001d44:	f008 faf4 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8001d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	2302      	movs	r3, #2
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	2287      	movs	r2, #135	; 0x87
 8001d56:	210a      	movs	r1, #10
 8001d58:	4834      	ldr	r0, [pc, #208]	; (8001e2c <FreqMenu_DrawFreqPresetMenu+0x12c0>)
 8001d5a:	f008 fae9 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	2302      	movs	r3, #2
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	229b      	movs	r2, #155	; 0x9b
 8001d6c:	210a      	movs	r1, #10
 8001d6e:	4830      	ldr	r0, [pc, #192]	; (8001e30 <FreqMenu_DrawFreqPresetMenu+0x12c4>)
 8001d70:	f008 fade 	bl	800a330 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8001d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2223      	movs	r2, #35	; 0x23
 8001d82:	2178      	movs	r1, #120	; 0x78
 8001d84:	482b      	ldr	r0, [pc, #172]	; (8001e34 <FreqMenu_DrawFreqPresetMenu+0x12c8>)
 8001d86:	f008 fad3 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8001d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2302      	movs	r3, #2
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2300      	movs	r3, #0
 8001d96:	2237      	movs	r2, #55	; 0x37
 8001d98:	2178      	movs	r1, #120	; 0x78
 8001d9a:	4827      	ldr	r0, [pc, #156]	; (8001e38 <FreqMenu_DrawFreqPresetMenu+0x12cc>)
 8001d9c:	f008 fac8 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8001da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	2302      	movs	r3, #2
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2300      	movs	r3, #0
 8001dac:	224b      	movs	r2, #75	; 0x4b
 8001dae:	2178      	movs	r1, #120	; 0x78
 8001db0:	4822      	ldr	r0, [pc, #136]	; (8001e3c <FreqMenu_DrawFreqPresetMenu+0x12d0>)
 8001db2:	f008 fabd 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	225f      	movs	r2, #95	; 0x5f
 8001dc4:	2178      	movs	r1, #120	; 0x78
 8001dc6:	481e      	ldr	r0, [pc, #120]	; (8001e40 <FreqMenu_DrawFreqPresetMenu+0x12d4>)
 8001dc8:	f008 fab2 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8001dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2273      	movs	r2, #115	; 0x73
 8001dda:	2178      	movs	r1, #120	; 0x78
 8001ddc:	4819      	ldr	r0, [pc, #100]	; (8001e44 <FreqMenu_DrawFreqPresetMenu+0x12d8>)
 8001dde:	f008 faa7 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2302      	movs	r3, #2
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2300      	movs	r3, #0
 8001dee:	2287      	movs	r2, #135	; 0x87
 8001df0:	2178      	movs	r1, #120	; 0x78
 8001df2:	4815      	ldr	r0, [pc, #84]	; (8001e48 <FreqMenu_DrawFreqPresetMenu+0x12dc>)
 8001df4:	f008 fa9c 	bl	800a330 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, WHITE, 2, BLACK);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e04:	229b      	movs	r2, #155	; 0x9b
 8001e06:	2178      	movs	r1, #120	; 0x78
 8001e08:	4810      	ldr	r0, [pc, #64]	; (8001e4c <FreqMenu_DrawFreqPresetMenu+0x12e0>)
 8001e0a:	f008 fa91 	bl	800a330 <ILI9341_Draw_Text>
		break;
 8001e0e:	bf00      	nop

	}
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	0800c0a0 	.word	0x0800c0a0
 8001e1c:	0800c0a8 	.word	0x0800c0a8
 8001e20:	0800c0b0 	.word	0x0800c0b0
 8001e24:	0800c0b8 	.word	0x0800c0b8
 8001e28:	0800c0c0 	.word	0x0800c0c0
 8001e2c:	0800c0c8 	.word	0x0800c0c8
 8001e30:	0800c0d0 	.word	0x0800c0d0
 8001e34:	0800c0d8 	.word	0x0800c0d8
 8001e38:	0800c0e0 	.word	0x0800c0e0
 8001e3c:	0800c0e8 	.word	0x0800c0e8
 8001e40:	0800c0f0 	.word	0x0800c0f0
 8001e44:	0800c0f8 	.word	0x0800c0f8
 8001e48:	0800c100 	.word	0x0800c100
 8001e4c:	0800c108 	.word	0x0800c108

08001e50 <FreqMenu_DrawFreqAdjustMenu>:
 *
 *
 *
 */
void FreqMenu_DrawFreqAdjustMenu()
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 120, BLACK, 2, WHITE);
 8001e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	2278      	movs	r2, #120	; 0x78
 8001e64:	210a      	movs	r1, #10
 8001e66:	4811      	ldr	r0, [pc, #68]	; (8001eac <FreqMenu_DrawFreqAdjustMenu+0x5c>)
 8001e68:	f008 fa62 	bl	800a330 <ILI9341_Draw_Text>

	char freq[6] = "";
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	2300      	movs	r3, #0
 8001e72:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 8001e74:	f000 fc24 	bl	80026c0 <FreqO_GetOutputFreq>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4639      	mov	r1, r7
 8001e7e:	2206      	movs	r2, #6
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fdcf 	bl	8000a24 <DM_AddDigitPadding>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <FreqMenu_DrawFreqAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
 8001e8c:	4638      	mov	r0, r7
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	2302      	movs	r3, #2
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e9a:	2278      	movs	r2, #120	; 0x78
 8001e9c:	21fa      	movs	r1, #250	; 0xfa
 8001e9e:	f008 fa47 	bl	800a330 <ILI9341_Draw_Text>


}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	0800c114 	.word	0x0800c114

08001eb0 <FreqMenu_DrawFreqSweepMenu>:
 *
 *
 *
 */
void FreqMenu_DrawFreqSweepMenu()
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("TODO: Freq Sweep Menu", 	10, 120, BLACK, 2, WHITE);
 8001eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2278      	movs	r2, #120	; 0x78
 8001ec4:	210a      	movs	r1, #10
 8001ec6:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <FreqMenu_DrawFreqSweepMenu+0x24>)
 8001ec8:	f008 fa32 	bl	800a330 <ILI9341_Draw_Text>




}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	0800c12c 	.word	0x0800c12c

08001ed8 <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0

	switch(eNextState)
 8001edc:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b07      	cmp	r3, #7
 8001ee2:	f200 80db 	bhi.w	800209c <EM_ProcessEvent+0x1c4>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <EM_ProcessEvent+0x14>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f0d 	.word	0x08001f0d
 8001ef0:	08001f61 	.word	0x08001f61
 8001ef4:	08001f8d 	.word	0x08001f8d
 8001ef8:	08001fb7 	.word	0x08001fb7
 8001efc:	08002009 	.word	0x08002009
 8001f00:	08002033 	.word	0x08002033
 8001f04:	0800205d 	.word	0x0800205d
 8001f08:	08002073 	.word	0x08002073
	{
		case Idle_State:

			if(eNewEvent == evBlueBtn)
 8001f0c:	4b6e      	ldr	r3, [pc, #440]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <EM_ProcessEvent+0x48>
			{
				eNextState = _FuncMenuEntryHandler();
 8001f14:	f000 f8da 	bl	80020cc <_FuncMenuEntryHandler>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b69      	ldr	r3, [pc, #420]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001f1e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8001f20:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d105      	bne.n	8001f34 <EM_ProcessEvent+0x5c>
			{
				eNextState = _FreqMainMenuEntryHandler();
 8001f28:	f000 f9a6 	bl	8002278 <_FreqMainMenuEntryHandler>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001f32:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8001f34:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d105      	bne.n	8001f48 <EM_ProcessEvent+0x70>
			{
				eNextState = _GainMenuEntryHandler();
 8001f3c:	f000 f90a 	bl	8002154 <_GainMenuEntryHandler>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001f46:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8001f48:	4b5f      	ldr	r3, [pc, #380]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	f040 80a7 	bne.w	80020a0 <EM_ProcessEvent+0x1c8>
			{
				eNextState = _BiasMenuEntryHandler();
 8001f52:	f000 f94b 	bl	80021ec <_BiasMenuEntryHandler>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001f5c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001f5e:	e09f      	b.n	80020a0 <EM_ProcessEvent+0x1c8>

		case Func_Menu_State:

			if(eNewEvent == evEncoderSet)
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d105      	bne.n	8001f74 <EM_ProcessEvent+0x9c>
			{
				eNextState = _FuncMenuInputHandler();
 8001f68:	f000 f8c8 	bl	80020fc <_FuncMenuInputHandler>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001f72:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8001f74:	4b54      	ldr	r3, [pc, #336]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b06      	cmp	r3, #6
 8001f7a:	f040 8093 	bne.w	80020a4 <EM_ProcessEvent+0x1cc>
			{
				eNextState = _FuncMenuExitHandler();
 8001f7e:	f000 f8cf 	bl	8002120 <_FuncMenuExitHandler>
 8001f82:	4603      	mov	r3, r0
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b4f      	ldr	r3, [pc, #316]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001f88:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f8a:	e08b      	b.n	80020a4 <EM_ProcessEvent+0x1cc>

		case Gain_Menu_State:

			if(eNewEvent == evEncoderSet)
 8001f8c:	4b4e      	ldr	r3, [pc, #312]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d105      	bne.n	8001fa0 <EM_ProcessEvent+0xc8>
			{
				eNextState = _GainMenuInputHandler();
 8001f94:	f000 f8f8 	bl	8002188 <_GainMenuInputHandler>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001f9e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8001fa0:	4b49      	ldr	r3, [pc, #292]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d17f      	bne.n	80020a8 <EM_ProcessEvent+0x1d0>
			{
				eNextState = _GainMenuExitHandler();
 8001fa8:	f000 f906 	bl	80021b8 <_GainMenuExitHandler>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001fb2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001fb4:	e078      	b.n	80020a8 <EM_ProcessEvent+0x1d0>

			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8001fb6:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d105      	bne.n	8001fca <EM_ProcessEvent+0xf2>
			{
				eNextState = _FreqMainMenuExitHandler();
 8001fbe:	f000 f96f 	bl	80022a0 <_FreqMainMenuExitHandler>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001fc8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d105      	bne.n	8001fde <EM_ProcessEvent+0x106>
			{
//				FreqO_ApplyPreset(FPRESET_1HZ);
				eNextState = _FreqPresetMenuEntryHandler();
 8001fd2:	f000 f97f 	bl	80022d4 <_FreqPresetMenuEntryHandler>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001fdc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d105      	bne.n	8001ff2 <EM_ProcessEvent+0x11a>
			{
//				FreqO_ApplyPreset(FPRESET_100HZ);
				eNextState = _FreqAdjustMenuEntryHandler();
 8001fe6:	f000 f9bf 	bl	8002368 <_FreqAdjustMenuEntryHandler>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8001ff0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d158      	bne.n	80020ac <EM_ProcessEvent+0x1d4>
			{
//				FreqO_ApplyPreset(FPRESET_1KHZ);
				eNextState = _FreqSweepMenuEntryHandler();
 8001ffa:	f000 f9f9 	bl	80023f0 <_FreqSweepMenuEntryHandler>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8002004:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// No menu action
			}
			break;
 8002006:	e051      	b.n	80020ac <EM_ProcessEvent+0x1d4>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b05      	cmp	r3, #5
 800200e:	d105      	bne.n	800201c <EM_ProcessEvent+0x144>
			{
				eNextState = _FreqPresetMenuInputHandler();
 8002010:	f000 f980 	bl	8002314 <_FreqPresetMenuInputHandler>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 800201a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b06      	cmp	r3, #6
 8002022:	d145      	bne.n	80020b0 <EM_ProcessEvent+0x1d8>
			{
				eNextState = _FreqPresetMenuExitHandler();
 8002024:	f000 f988 	bl	8002338 <_FreqPresetMenuExitHandler>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 800202e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002030:	e03e      	b.n	80020b0 <EM_ProcessEvent+0x1d8>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002032:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d105      	bne.n	8002046 <EM_ProcessEvent+0x16e>
			{
				eNextState = _FreqAdjustMenuInputHandler();
 800203a:	f000 f9af 	bl	800239c <_FreqAdjustMenuInputHandler>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8002044:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b06      	cmp	r3, #6
 800204c:	d132      	bne.n	80020b4 <EM_ProcessEvent+0x1dc>
			{
				eNextState = _FreqAdjustMenuExitHandler();
 800204e:	f000 f9b7 	bl	80023c0 <_FreqAdjustMenuExitHandler>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8002058:	701a      	strb	r2, [r3, #0]
			}
			break;
 800205a:	e02b      	b.n	80020b4 <EM_ProcessEvent+0x1dc>
		case Freq_Sweep_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b06      	cmp	r3, #6
 8002062:	d129      	bne.n	80020b8 <EM_ProcessEvent+0x1e0>
			{
				eNextState = _FreqSweepMenuExitHandler();
 8002064:	f000 f9e0 	bl	8002428 <_FreqSweepMenuExitHandler>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 800206e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002070:	e022      	b.n	80020b8 <EM_ProcessEvent+0x1e0>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b05      	cmp	r3, #5
 8002078:	d105      	bne.n	8002086 <EM_ProcessEvent+0x1ae>
			{
				eNextState = _BiasMenuInputHandler();
 800207a:	f000 f8d1 	bl	8002220 <_BiasMenuInputHandler>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8002084:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <EM_ProcessEvent+0x1f0>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b06      	cmp	r3, #6
 800208c:	d116      	bne.n	80020bc <EM_ProcessEvent+0x1e4>
			{
				eNextState = _BiasMenuExitHandler();
 800208e:	f000 f8d9 	bl	8002244 <_BiasMenuExitHandler>
 8002092:	4603      	mov	r3, r0
 8002094:	461a      	mov	r2, r3
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <EM_ProcessEvent+0x1ec>)
 8002098:	701a      	strb	r2, [r3, #0]
			}

			break;
 800209a:	e00f      	b.n	80020bc <EM_ProcessEvent+0x1e4>

		default:
			break;
 800209c:	bf00      	nop
 800209e:	e00e      	b.n	80020be <EM_ProcessEvent+0x1e6>
			break;
 80020a0:	bf00      	nop
 80020a2:	e00c      	b.n	80020be <EM_ProcessEvent+0x1e6>
			break;
 80020a4:	bf00      	nop
 80020a6:	e00a      	b.n	80020be <EM_ProcessEvent+0x1e6>
			break;
 80020a8:	bf00      	nop
 80020aa:	e008      	b.n	80020be <EM_ProcessEvent+0x1e6>
			break;
 80020ac:	bf00      	nop
 80020ae:	e006      	b.n	80020be <EM_ProcessEvent+0x1e6>
			break;
 80020b0:	bf00      	nop
 80020b2:	e004      	b.n	80020be <EM_ProcessEvent+0x1e6>
			break;
 80020b4:	bf00      	nop
 80020b6:	e002      	b.n	80020be <EM_ProcessEvent+0x1e6>
			break;
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <EM_ProcessEvent+0x1e6>
			break;
 80020bc:	bf00      	nop
	}

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200010e8 	.word	0x200010e8
 80020c8:	200010e9 	.word	0x200010e9

080020cc <_FuncMenuEntryHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuEntryHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 80020d0:	4808      	ldr	r0, [pc, #32]	; (80020f4 <_FuncMenuEntryHandler+0x28>)
 80020d2:	f008 ffbb 	bl	800b04c <puts>
#endif

	_RefreshDisplay();
 80020d6:	f000 f9cf 	bl	8002478 <_RefreshDisplay>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 80020da:	2001      	movs	r0, #1
 80020dc:	f7fe f9b6 	bl	800044c <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 20;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <_FuncMenuEntryHandler+0x2c>)
 80020e2:	2214      	movs	r2, #20
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 20;
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <_FuncMenuEntryHandler+0x2c>)
 80020e8:	2214      	movs	r2, #20
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 80020ec:	2301      	movs	r3, #1
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	0800c144 	.word	0x0800c144
 80020f8:	40012c00 	.word	0x40012c00

080020fc <_FuncMenuInputHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncMenuInputHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8002100:	4805      	ldr	r0, [pc, #20]	; (8002118 <_FuncMenuInputHandler+0x1c>)
 8002102:	f008 ffa3 	bl	800b04c <puts>
#endif


	FuncO_ModifyOutput();
 8002106:	f000 fbcb 	bl	80028a0 <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <_FuncMenuInputHandler+0x20>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	0800c160 	.word	0x0800c160
 800211c:	200010e9 	.word	0x200010e9

08002120 <_FuncMenuExitHandler>:
 *
 *
 *
 */
eSystemState _FuncMenuExitHandler()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8002124:	4808      	ldr	r0, [pc, #32]	; (8002148 <_FuncMenuExitHandler+0x28>)
 8002126:	f008 ff91 	bl	800b04c <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 800212a:	2000      	movs	r0, #0
 800212c:	f7fe f98e 	bl	800044c <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <_FuncMenuExitHandler+0x2c>)
 8002132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002138:	f000 f99e 	bl	8002478 <_RefreshDisplay>

	eNewEvent = evIdle;
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <_FuncMenuExitHandler+0x30>)
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	0800c180 	.word	0x0800c180
 800214c:	40012c00 	.word	0x40012c00
 8002150:	200010e9 	.word	0x200010e9

08002154 <_GainMenuEntryHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuEntryHandler()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8002158:	4809      	ldr	r0, [pc, #36]	; (8002180 <_GainMenuEntryHandler+0x2c>)
 800215a:	f008 ff77 	bl	800b04c <puts>
#endif

	_RefreshDisplay();
 800215e:	f000 f98b 	bl	8002478 <_RefreshDisplay>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8002162:	2001      	movs	r0, #1
 8002164:	f7fe fb3c 	bl	80007e0 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-32 for this menu
	ENCODER_TIMER->CNT = GO_GetOutputGain();
 8002168:	f000 fd46 	bl	8002bf8 <GO_GetOutputGain>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <_GainMenuEntryHandler+0x30>)
 8002172:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 32;
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <_GainMenuEntryHandler+0x30>)
 8002176:	2220      	movs	r2, #32
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 800217a:	2302      	movs	r3, #2
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}
 8002180:	0800c19c 	.word	0x0800c19c
 8002184:	40012c00 	.word	0x40012c00

08002188 <_GainMenuInputHandler>:
 *
 *
 *
 */
eSystemState _GainMenuInputHandler()
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 800218c:	4808      	ldr	r0, [pc, #32]	; (80021b0 <_GainMenuInputHandler+0x28>)
 800218e:	f008 ff5d 	bl	800b04c <puts>
#endif

	GO_SetOutputToEncoder(SM_GetEncoderValue(ENCODER_REVERSE));
 8002192:	2001      	movs	r0, #1
 8002194:	f000 fd3c 	bl	8002c10 <SM_GetEncoderValue>
 8002198:	4603      	mov	r3, r0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fc3d 	bl	8002a1c <GO_SetOutputToEncoder>

	eNewEvent = evYellowBtn;
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <_GainMenuInputHandler+0x2c>)
 80021a4:	2203      	movs	r2, #3
 80021a6:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 80021a8:	2302      	movs	r3, #2
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	0800c1b4 	.word	0x0800c1b4
 80021b4:	200010e9 	.word	0x200010e9

080021b8 <_GainMenuExitHandler>:
 *
 *
 *
 */
eSystemState _GainMenuExitHandler()
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 80021bc:	4808      	ldr	r0, [pc, #32]	; (80021e0 <_GainMenuExitHandler+0x28>)
 80021be:	f008 ff45 	bl	800b04c <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7fe fb0c 	bl	80007e0 <DM_ShowGainSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <_GainMenuExitHandler+0x2c>)
 80021ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 80021d0:	f000 f952 	bl	8002478 <_RefreshDisplay>

	eNewEvent = evIdle;
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <_GainMenuExitHandler+0x30>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	0800c1cc 	.word	0x0800c1cc
 80021e4:	40012c00 	.word	0x40012c00
 80021e8:	200010e9 	.word	0x200010e9

080021ec <_BiasMenuEntryHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuEntryHandler()
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 80021f0:	4809      	ldr	r0, [pc, #36]	; (8002218 <_BiasMenuEntryHandler+0x2c>)
 80021f2:	f008 ff2b 	bl	800b04c <puts>
#endif

	_RefreshDisplay();
 80021f6:	f000 f93f 	bl	8002478 <_RefreshDisplay>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7fe fb3e 	bl	800087c <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <_BiasMenuEntryHandler+0x30>)
 8002202:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <_BiasMenuEntryHandler+0x30>)
 800220a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800220e:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8002210:	2307      	movs	r3, #7
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	0800c1e8 	.word	0x0800c1e8
 800221c:	40012c00 	.word	0x40012c00

08002220 <_BiasMenuInputHandler>:
 *
 *
 *
 */
eSystemState _BiasMenuInputHandler()
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8002224:	4805      	ldr	r0, [pc, #20]	; (800223c <_BiasMenuInputHandler+0x1c>)
 8002226:	f008 ff11 	bl	800b04c <puts>
#endif

	BO_ModifyOutput();
 800222a:	f000 f93f 	bl	80024ac <BO_ModifyOutput>

	eNewEvent = evRedBtn;
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <_BiasMenuInputHandler+0x20>)
 8002230:	2204      	movs	r2, #4
 8002232:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8002234:	2307      	movs	r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	0800c200 	.word	0x0800c200
 8002240:	200010e9 	.word	0x200010e9

08002244 <_BiasMenuExitHandler>:
 *
 *
 *
 */
eSystemState _BiasMenuExitHandler()
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8002248:	4808      	ldr	r0, [pc, #32]	; (800226c <_BiasMenuExitHandler+0x28>)
 800224a:	f008 feff 	bl	800b04c <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 800224e:	2000      	movs	r0, #0
 8002250:	f7fe fb14 	bl	800087c <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <_BiasMenuExitHandler+0x2c>)
 8002256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800225a:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 800225c:	f000 f90c 	bl	8002478 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <_BiasMenuExitHandler+0x30>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	0800c218 	.word	0x0800c218
 8002270:	40012c00 	.word	0x40012c00
 8002274:	200010e9 	.word	0x200010e9

08002278 <_FreqMainMenuEntryHandler>:
 *
 *	event handler for main freq menu
 *
 */
eSystemState _FreqMainMenuEntryHandler()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 800227c:	4806      	ldr	r0, [pc, #24]	; (8002298 <_FreqMainMenuEntryHandler+0x20>)
 800227e:	f008 fee5 	bl	800b04c <puts>
#endif

	_RefreshDisplay();
 8002282:	f000 f8f9 	bl	8002478 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_MAIN_MENU);
 8002286:	2001      	movs	r0, #1
 8002288:	f7fe fae8 	bl	800085c <DM_ShowFreqMenu>
	// set the rotary encoder limits to 0-? for this menu
//	ENCODER_TIMER->CNT = 0;
//	ENCODER_TIMER->ARR = 56;

	// stay in this state
	eNewEvent = evIdle;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <_FreqMainMenuEntryHandler+0x24>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8002292:	2303      	movs	r3, #3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	0800c234 	.word	0x0800c234
 800229c:	200010e9 	.word	0x200010e9

080022a0 <_FreqMainMenuExitHandler>:
 *
 *
 *
 */
eSystemState _FreqMainMenuExitHandler()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <_FreqMainMenuExitHandler+0x28>)
 80022a6:	f008 fed1 	bl	800b04c <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7fe fad6 	bl	800085c <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <_FreqMainMenuExitHandler+0x2c>)
 80022b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 80022b8:	f000 f8de 	bl	8002478 <_RefreshDisplay>

	eNewEvent = evIdle;
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <_FreqMainMenuExitHandler+0x30>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	0800c264 	.word	0x0800c264
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	200010e9 	.word	0x200010e9

080022d4 <_FreqPresetMenuEntryHandler>:
 *
 *	event handler for main freq menu
 *
 */
eSystemState _FreqPresetMenuEntryHandler()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <_FreqPresetMenuEntryHandler+0x34>)
 80022da:	f008 feb7 	bl	800b04c <puts>
#endif

	_RefreshDisplay();
 80022de:	f000 f8cb 	bl	8002478 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_PRESET_MENU);
 80022e2:	2002      	movs	r0, #2
 80022e4:	f7fe faba 	bl	800085c <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = FreqO_GetFPreset();
 80022e8:	f000 fabe 	bl	8002868 <FreqO_GetFPreset>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <_FreqPresetMenuEntryHandler+0x38>)
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <_FreqPresetMenuEntryHandler+0x38>)
 80022f6:	2238      	movs	r2, #56	; 0x38
 80022f8:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <_FreqPresetMenuEntryHandler+0x3c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8002300:	2304      	movs	r3, #4
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	0800c288 	.word	0x0800c288
 800230c:	40012c00 	.word	0x40012c00
 8002310:	200010e9 	.word	0x200010e9

08002314 <_FreqPresetMenuInputHandler>:
 *
 *
 *
 */
eSystemState _FreqPresetMenuInputHandler()
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8002318:	4805      	ldr	r0, [pc, #20]	; (8002330 <_FreqPresetMenuInputHandler+0x1c>)
 800231a:	f008 fe97 	bl	800b04c <puts>
#endif

	FreqO_ModifyOutput();
 800231e:	f000 f917 	bl	8002550 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <_FreqPresetMenuInputHandler+0x20>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8002328:	2304      	movs	r3, #4
}
 800232a:	4618      	mov	r0, r3
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	0800c24c 	.word	0x0800c24c
 8002334:	200010e9 	.word	0x200010e9

08002338 <_FreqPresetMenuExitHandler>:
 *
 *
 *
 */
eSystemState _FreqPresetMenuExitHandler()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 800233c:	4807      	ldr	r0, [pc, #28]	; (800235c <_FreqPresetMenuExitHandler+0x24>)
 800233e:	f008 fe85 	bl	800b04c <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe fa8a 	bl	800085c <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <_FreqPresetMenuExitHandler+0x28>)
 800234a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <_FreqPresetMenuExitHandler+0x2c>)
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	0800c2b0 	.word	0x0800c2b0
 8002360:	40012c00 	.word	0x40012c00
 8002364:	200010e9 	.word	0x200010e9

08002368 <_FreqAdjustMenuEntryHandler>:
 *
 *	event handler for main freq menu
 *
 */
eSystemState _FreqAdjustMenuEntryHandler()
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 800236c:	4808      	ldr	r0, [pc, #32]	; (8002390 <_FreqAdjustMenuEntryHandler+0x28>)
 800236e:	f008 fe6d 	bl	800b04c <puts>
#endif

	_RefreshDisplay();
 8002372:	f000 f881 	bl	8002478 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_ADJUST_MENU);
 8002376:	2003      	movs	r0, #3
 8002378:	f7fe fa70 	bl	800085c <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu

	ENCODER_TIMER->ARR = 65535;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <_FreqAdjustMenuEntryHandler+0x2c>)
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <_FreqAdjustMenuEntryHandler+0x30>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800238a:	2305      	movs	r3, #5
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	0800c2d0 	.word	0x0800c2d0
 8002394:	40012c00 	.word	0x40012c00
 8002398:	200010e9 	.word	0x200010e9

0800239c <_FreqAdjustMenuInputHandler>:
 *
 *
 *
 */
eSystemState _FreqAdjustMenuInputHandler()
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <_FreqAdjustMenuInputHandler+0x1c>)
 80023a2:	f008 fe53 	bl	800b04c <puts>
#endif

	FreqO_AdjustFreq();
 80023a6:	f000 fa6b 	bl	8002880 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <_FreqAdjustMenuInputHandler+0x20>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80023b0:	2305      	movs	r3, #5
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	0800c24c 	.word	0x0800c24c
 80023bc:	200010e9 	.word	0x200010e9

080023c0 <_FreqAdjustMenuExitHandler>:
 *
 *
 *
 */
eSystemState _FreqAdjustMenuExitHandler()
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 80023c4:	4807      	ldr	r0, [pc, #28]	; (80023e4 <_FreqAdjustMenuExitHandler+0x24>)
 80023c6:	f008 fe41 	bl	800b04c <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7fe fa46 	bl	800085c <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <_FreqAdjustMenuExitHandler+0x28>)
 80023d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <_FreqAdjustMenuExitHandler+0x2c>)
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	0800c2f0 	.word	0x0800c2f0
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	200010e9 	.word	0x200010e9

080023f0 <_FreqSweepMenuEntryHandler>:
 *
 *	event handler for main freq menu
 *
 */
eSystemState _FreqSweepMenuEntryHandler()
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 80023f4:	4809      	ldr	r0, [pc, #36]	; (800241c <_FreqSweepMenuEntryHandler+0x2c>)
 80023f6:	f008 fe29 	bl	800b04c <puts>
#endif

	_RefreshDisplay();
 80023fa:	f000 f83d 	bl	8002478 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_SWEEP_MENU);
 80023fe:	2004      	movs	r0, #4
 8002400:	f7fe fa2c 	bl	800085c <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <_FreqSweepMenuEntryHandler+0x30>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <_FreqSweepMenuEntryHandler+0x30>)
 800240c:	2238      	movs	r2, #56	; 0x38
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <_FreqSweepMenuEntryHandler+0x34>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8002416:	2306      	movs	r3, #6
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	0800c31c 	.word	0x0800c31c
 8002420:	40012c00 	.word	0x40012c00
 8002424:	200010e9 	.word	0x200010e9

08002428 <_FreqSweepMenuExitHandler>:
 *
 *
 *
 */
eSystemState _FreqSweepMenuExitHandler()
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 800242c:	4807      	ldr	r0, [pc, #28]	; (800244c <_FreqSweepMenuExitHandler+0x24>)
 800242e:	f008 fe0d 	bl	800b04c <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8002432:	2000      	movs	r0, #0
 8002434:	f7fe fa12 	bl	800085c <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <_FreqSweepMenuExitHandler+0x28>)
 800243a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <_FreqSweepMenuExitHandler+0x2c>)
 8002442:	2202      	movs	r2, #2
 8002444:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	0800c33c 	.word	0x0800c33c
 8002450:	40012c00 	.word	0x40012c00
 8002454:	200010e9 	.word	0x200010e9

08002458 <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8002462:	4a04      	ldr	r2, [pc, #16]	; (8002474 <EM_SetNewEvent+0x1c>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	7013      	strb	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	200010e9 	.word	0x200010e9

08002478 <_RefreshDisplay>:
}



void _RefreshDisplay()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 800247c:	4804      	ldr	r0, [pc, #16]	; (8002490 <_RefreshDisplay+0x18>)
 800247e:	f006 fb15 	bl	8008aac <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8002482:	f7fe fa8d 	bl	80009a0 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8002486:	4802      	ldr	r0, [pc, #8]	; (8002490 <_RefreshDisplay+0x18>)
 8002488:	f006 fada 	bl	8008a40 <HAL_TIM_Base_Start_IT>
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20001398 	.word	0x20001398

08002494 <BO_GetBiasPolarity>:
 *
 *
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <BO_GetBiasPolarity+0x14>)
 800249a:	781b      	ldrb	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000008 	.word	0x20000008

080024ac <BO_ModifyOutput>:
 *
 *
 *
 */
void BO_ModifyOutput()
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 80024b0:	2001      	movs	r0, #1
 80024b2:	f000 fbad 	bl	8002c10 <SM_GetEncoderValue>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80024bc:	d217      	bcs.n	80024ee <BO_ModifyOutput+0x42>

		eBiasPolarity = INVERSEBIAS;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <BO_ModifyOutput+0x84>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f000 fba3 	bl	8002c10 <SM_GetEncoderValue>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80024d8:	2200      	movs	r2, #0
 80024da:	2110      	movs	r1, #16
 80024dc:	4815      	ldr	r0, [pc, #84]	; (8002534 <BO_ModifyOutput+0x88>)
 80024de:	f004 f817 	bl	8006510 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80024e2:	2201      	movs	r2, #1
 80024e4:	2108      	movs	r1, #8
 80024e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ea:	f004 feff 	bl	80072ec <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 80024ee:	2001      	movs	r0, #1
 80024f0:	f000 fb8e 	bl	8002c10 <SM_GetEncoderValue>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80024fa:	d317      	bcc.n	800252c <BO_ModifyOutput+0x80>

		eBiasPolarity = NORMALBIAS;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <BO_ModifyOutput+0x84>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 8002502:	2001      	movs	r0, #1
 8002504:	f000 fb84 	bl	8002c10 <SM_GetEncoderValue>
 8002508:	4603      	mov	r3, r0
 800250a:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8002516:	2200      	movs	r2, #0
 8002518:	2110      	movs	r1, #16
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <BO_ModifyOutput+0x88>)
 800251c:	f003 fff8 	bl	8006510 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8002520:	2200      	movs	r2, #0
 8002522:	2108      	movs	r1, #8
 8002524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002528:	f004 fee0 	bl	80072ec <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000008 	.word	0x20000008
 8002534:	20001214 	.word	0x20001214

08002538 <BO_GetOutputBias>:
 *
 *
 *
 */
uint32_t BO_GetOutputBias()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 800253c:	2110      	movs	r1, #16
 800253e:	4803      	ldr	r0, [pc, #12]	; (800254c <BO_GetOutputBias+0x14>)
 8002540:	f004 f822 	bl	8006588 <HAL_DAC_GetValue>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20001214 	.word	0x20001214

08002550 <FreqO_ModifyOutput>:
 *
 *
 *
 */
void FreqO_ModifyOutput()
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0

	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 8002554:	2001      	movs	r0, #1
 8002556:	f000 fb5b 	bl	8002c10 <SM_GetEncoderValue>
 800255a:	4603      	mov	r3, r0
 800255c:	2b38      	cmp	r3, #56	; 0x38
 800255e:	f200 80ad 	bhi.w	80026bc <FreqO_ModifyOutput+0x16c>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <FreqO_ModifyOutput+0x18>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	0800264d 	.word	0x0800264d
 800256c:	0800264d 	.word	0x0800264d
 8002570:	0800264d 	.word	0x0800264d
 8002574:	0800264d 	.word	0x0800264d
 8002578:	08002655 	.word	0x08002655
 800257c:	08002655 	.word	0x08002655
 8002580:	08002655 	.word	0x08002655
 8002584:	08002655 	.word	0x08002655
 8002588:	0800265d 	.word	0x0800265d
 800258c:	0800265d 	.word	0x0800265d
 8002590:	0800265d 	.word	0x0800265d
 8002594:	0800265d 	.word	0x0800265d
 8002598:	08002665 	.word	0x08002665
 800259c:	08002665 	.word	0x08002665
 80025a0:	08002665 	.word	0x08002665
 80025a4:	08002665 	.word	0x08002665
 80025a8:	0800266d 	.word	0x0800266d
 80025ac:	0800266d 	.word	0x0800266d
 80025b0:	0800266d 	.word	0x0800266d
 80025b4:	0800266d 	.word	0x0800266d
 80025b8:	08002675 	.word	0x08002675
 80025bc:	08002675 	.word	0x08002675
 80025c0:	08002675 	.word	0x08002675
 80025c4:	08002675 	.word	0x08002675
 80025c8:	0800267d 	.word	0x0800267d
 80025cc:	0800267d 	.word	0x0800267d
 80025d0:	0800267d 	.word	0x0800267d
 80025d4:	0800267d 	.word	0x0800267d
 80025d8:	08002685 	.word	0x08002685
 80025dc:	08002685 	.word	0x08002685
 80025e0:	08002685 	.word	0x08002685
 80025e4:	080026bd 	.word	0x080026bd
 80025e8:	08002685 	.word	0x08002685
 80025ec:	0800268d 	.word	0x0800268d
 80025f0:	0800268d 	.word	0x0800268d
 80025f4:	0800268d 	.word	0x0800268d
 80025f8:	0800268d 	.word	0x0800268d
 80025fc:	08002695 	.word	0x08002695
 8002600:	08002695 	.word	0x08002695
 8002604:	08002695 	.word	0x08002695
 8002608:	08002695 	.word	0x08002695
 800260c:	0800269d 	.word	0x0800269d
 8002610:	0800269d 	.word	0x0800269d
 8002614:	0800269d 	.word	0x0800269d
 8002618:	0800269d 	.word	0x0800269d
 800261c:	080026a5 	.word	0x080026a5
 8002620:	080026a5 	.word	0x080026a5
 8002624:	080026a5 	.word	0x080026a5
 8002628:	080026a5 	.word	0x080026a5
 800262c:	080026ad 	.word	0x080026ad
 8002630:	080026ad 	.word	0x080026ad
 8002634:	080026ad 	.word	0x080026ad
 8002638:	080026ad 	.word	0x080026ad
 800263c:	080026b5 	.word	0x080026b5
 8002640:	080026b5 	.word	0x080026b5
 8002644:	080026b5 	.word	0x080026b5
 8002648:	080026b5 	.word	0x080026b5
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 800264c:	2000      	movs	r0, #0
 800264e:	f000 f843 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 8002652:	e033      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8002654:	2001      	movs	r0, #1
 8002656:	f000 f83f 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 800265a:	e02f      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 800265c:	2002      	movs	r0, #2
 800265e:	f000 f83b 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 8002662:	e02b      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8002664:	2003      	movs	r0, #3
 8002666:	f000 f837 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 800266a:	e027      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 800266c:	2004      	movs	r0, #4
 800266e:	f000 f833 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 8002672:	e023      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8002674:	2005      	movs	r0, #5
 8002676:	f000 f82f 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 800267a:	e01f      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 800267c:	2006      	movs	r0, #6
 800267e:	f000 f82b 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 8002682:	e01b      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8002684:	2007      	movs	r0, #7
 8002686:	f000 f827 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 800268a:	e017      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 800268c:	2008      	movs	r0, #8
 800268e:	f000 f823 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 8002692:	e013      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8002694:	2009      	movs	r0, #9
 8002696:	f000 f81f 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 800269a:	e00f      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 800269c:	200a      	movs	r0, #10
 800269e:	f000 f81b 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 80026a2:	e00b      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 80026a4:	200b      	movs	r0, #11
 80026a6:	f000 f817 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 80026aa:	e007      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 80026ac:	200c      	movs	r0, #12
 80026ae:	f000 f813 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 80026b2:	e003      	b.n	80026bc <FreqO_ModifyOutput+0x16c>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 80026b4:	200d      	movs	r0, #13
 80026b6:	f000 f80f 	bl	80026d8 <FreqO_ApplyPreset>
			break;
 80026ba:	bf00      	nop
	}

}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <FreqO_GetOutputFreq>:
 *
 *
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <FreqO_GetOutputFreq+0x14>)
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40013400 	.word	0x40013400

080026d8 <FreqO_ApplyPreset>:
 *
 *
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPreset)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
	switch(pPreset)
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	2b0d      	cmp	r3, #13
 80026e6:	f200 80b4 	bhi.w	8002852 <FreqO_ApplyPreset+0x17a>
 80026ea:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <FreqO_ApplyPreset+0x18>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002729 	.word	0x08002729
 80026f4:	0800273f 	.word	0x0800273f
 80026f8:	08002755 	.word	0x08002755
 80026fc:	0800276b 	.word	0x0800276b
 8002700:	08002781 	.word	0x08002781
 8002704:	08002797 	.word	0x08002797
 8002708:	080027ad 	.word	0x080027ad
 800270c:	080027c3 	.word	0x080027c3
 8002710:	080027d9 	.word	0x080027d9
 8002714:	080027ef 	.word	0x080027ef
 8002718:	08002803 	.word	0x08002803
 800271c:	08002817 	.word	0x08002817
 8002720:	0800282b 	.word	0x0800282b
 8002724:	0800283f 	.word	0x0800283f
	{
		case FPRESET_1HZ:
			TIM8->PSC = 0x0014;
 8002728:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <FreqO_ApplyPreset+0x188>)
 800272a:	2214      	movs	r2, #20
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0xFFFF;
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_1HZ;
 8002736:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
			break;
 800273c:	e089      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_10HZ:
			TIM8->PSC = 0x0003;
 800273e:	4b48      	ldr	r3, [pc, #288]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002740:	2203      	movs	r2, #3
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x87FF;
 8002744:	4b46      	ldr	r3, [pc, #280]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002746:	f248 72ff 	movw	r2, #34815	; 0x87ff
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_10HZ;
 800274c:	4b45      	ldr	r3, [pc, #276]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
			break;
 8002752:	e07e      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_50HZ:
			TIM8->PSC = 0x0000;
 8002754:	4b42      	ldr	r3, [pc, #264]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002756:	2200      	movs	r2, #0
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x6D00;
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <FreqO_ApplyPreset+0x188>)
 800275c:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_50HZ;
 8002762:	4b40      	ldr	r3, [pc, #256]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 8002764:	2202      	movs	r2, #2
 8002766:	701a      	strb	r2, [r3, #0]
			break;
 8002768:	e073      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_100HZ:
			TIM8->PSC = 0x0000;
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <FreqO_ApplyPreset+0x188>)
 800276c:	2200      	movs	r2, #0
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x37FF;
 8002770:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002772:	f243 72ff 	movw	r2, #14335	; 0x37ff
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_100HZ;
 8002778:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 800277a:	2203      	movs	r2, #3
 800277c:	701a      	strb	r2, [r3, #0]
			break;
 800277e:	e068      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_250HZ:
			TIM8->PSC = 0x0000;
 8002780:	4b37      	ldr	r3, [pc, #220]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x163F;
 8002786:	4b36      	ldr	r3, [pc, #216]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002788:	f241 623f 	movw	r2, #5695	; 0x163f
 800278c:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_250HZ;
 800278e:	4b35      	ldr	r3, [pc, #212]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 8002790:	2204      	movs	r2, #4
 8002792:	701a      	strb	r2, [r3, #0]
			break;
 8002794:	e05d      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_500HZ:
			TIM8->PSC = 0x0000;
 8002796:	4b32      	ldr	r3, [pc, #200]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002798:	2200      	movs	r2, #0
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0AFF;
 800279c:	4b30      	ldr	r3, [pc, #192]	; (8002860 <FreqO_ApplyPreset+0x188>)
 800279e:	f640 22ff 	movw	r2, #2815	; 0xaff
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_500HZ;
 80027a4:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 80027a6:	2205      	movs	r2, #5
 80027a8:	701a      	strb	r2, [r3, #0]
			break;
 80027aa:	e052      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_750HZ:
			TIM8->PSC = 0x0000;
 80027ac:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <FreqO_ApplyPreset+0x188>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x07BF;
 80027b2:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <FreqO_ApplyPreset+0x188>)
 80027b4:	f240 72bf 	movw	r2, #1983	; 0x7bf
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_750HZ;
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 80027bc:	2206      	movs	r2, #6
 80027be:	701a      	strb	r2, [r3, #0]
			break;
 80027c0:	e047      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_1KHZ:
			TIM8->PSC = 0x0000;
 80027c2:	4b27      	ldr	r3, [pc, #156]	; (8002860 <FreqO_ApplyPreset+0x188>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0577;
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <FreqO_ApplyPreset+0x188>)
 80027ca:	f240 5277 	movw	r2, #1399	; 0x577
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_1KHZ;
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 80027d2:	2207      	movs	r2, #7
 80027d4:	701a      	strb	r2, [r3, #0]
			break;
 80027d6:	e03c      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_5KHZ:
			TIM8->PSC = 0x0000;
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <FreqO_ApplyPreset+0x188>)
 80027da:	2200      	movs	r2, #0
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0118;
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <FreqO_ApplyPreset+0x188>)
 80027e0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_5KHZ;
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 80027e8:	2208      	movs	r2, #8
 80027ea:	701a      	strb	r2, [r3, #0]
			break;
 80027ec:	e031      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_10KHZ:
			TIM8->PSC = 0x0000;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <FreqO_ApplyPreset+0x188>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x008B;
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <FreqO_ApplyPreset+0x188>)
 80027f6:	228b      	movs	r2, #139	; 0x8b
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_10KHZ;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 80027fc:	2209      	movs	r2, #9
 80027fe:	701a      	strb	r2, [r3, #0]
			break;
 8002800:	e027      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_25KHZ:
			TIM8->PSC = 0x0000;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002804:	2200      	movs	r2, #0
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0037;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <FreqO_ApplyPreset+0x188>)
 800280a:	2237      	movs	r2, #55	; 0x37
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_25KHZ;
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 8002810:	220a      	movs	r2, #10
 8002812:	701a      	strb	r2, [r3, #0]
			break;
 8002814:	e01d      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_50KHZ:
			TIM8->PSC = 0x0000;
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002818:	2200      	movs	r2, #0
 800281a:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x001B;
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <FreqO_ApplyPreset+0x188>)
 800281e:	221b      	movs	r2, #27
 8002820:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_50KHZ;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 8002824:	220b      	movs	r2, #11
 8002826:	701a      	strb	r2, [r3, #0]
			break;
 8002828:	e013      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_75KHZ:
			TIM8->PSC = 0x0000;
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <FreqO_ApplyPreset+0x188>)
 800282c:	2200      	movs	r2, #0
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0012;
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002832:	2212      	movs	r2, #18
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_75KHZ;
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 8002838:	220c      	movs	r2, #12
 800283a:	701a      	strb	r2, [r3, #0]
			break;
 800283c:	e009      	b.n	8002852 <FreqO_ApplyPreset+0x17a>
		case FPRESET_100KHZ:
			TIM8->PSC = 0x0000;
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002840:	2200      	movs	r2, #0
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0006;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <FreqO_ApplyPreset+0x188>)
 8002846:	2206      	movs	r2, #6
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_100KHZ;
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <FreqO_ApplyPreset+0x18c>)
 800284c:	220d      	movs	r2, #13
 800284e:	701a      	strb	r2, [r3, #0]
			break;
 8002850:	bf00      	nop
	}
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40013400 	.word	0x40013400
 8002864:	20000009 	.word	0x20000009

08002868 <FreqO_GetFPreset>:

eFreq_Preset FreqO_GetFPreset()
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
	return eNewFreqPreset;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <FreqO_GetFPreset+0x14>)
 800286e:	781b      	ldrb	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000009 	.word	0x20000009

08002880 <FreqO_AdjustFreq>:

void FreqO_AdjustFreq()
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_MIDFREQ_MAG;
 8002884:	2000      	movs	r0, #0
 8002886:	f000 f9c3 	bl	8002c10 <SM_GetEncoderValue>
 800288a:	4603      	mov	r3, r0
 800288c:	461a      	mov	r2, r3
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	441a      	add	r2, r3
 8002894:	4b01      	ldr	r3, [pc, #4]	; (800289c <FreqO_AdjustFreq+0x1c>)
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40013400 	.word	0x40013400

080028a0 <FuncO_ModifyOutput>:

// signal output function
eOutput_mode eNewOutMode = Sine_Out_Mode;

void FuncO_ModifyOutput()
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af02      	add	r7, sp, #8


	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 f9b2 	bl	8002c10 <SM_GetEncoderValue>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b17      	cmp	r3, #23
 80028b0:	f200 8094 	bhi.w	80029dc <FuncO_ModifyOutput+0x13c>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <FuncO_ModifyOutput+0x1c>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	0800291d 	.word	0x0800291d
 80028c0:	0800291d 	.word	0x0800291d
 80028c4:	0800291d 	.word	0x0800291d
 80028c8:	0800293d 	.word	0x0800293d
 80028cc:	0800293d 	.word	0x0800293d
 80028d0:	0800293d 	.word	0x0800293d
 80028d4:	0800293d 	.word	0x0800293d
 80028d8:	0800295d 	.word	0x0800295d
 80028dc:	0800295d 	.word	0x0800295d
 80028e0:	0800295d 	.word	0x0800295d
 80028e4:	0800295d 	.word	0x0800295d
 80028e8:	0800297d 	.word	0x0800297d
 80028ec:	0800297d 	.word	0x0800297d
 80028f0:	0800297d 	.word	0x0800297d
 80028f4:	0800297d 	.word	0x0800297d
 80028f8:	0800299d 	.word	0x0800299d
 80028fc:	0800299d 	.word	0x0800299d
 8002900:	0800299d 	.word	0x0800299d
 8002904:	0800299d 	.word	0x0800299d
 8002908:	080029bd 	.word	0x080029bd
 800290c:	080029bd 	.word	0x080029bd
 8002910:	080029bd 	.word	0x080029bd
 8002914:	080029bd 	.word	0x080029bd
 8002918:	080029bd 	.word	0x080029bd
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 800291c:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <FuncO_ModifyOutput+0x144>)
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8002922:	2100      	movs	r1, #0
 8002924:	4830      	ldr	r0, [pc, #192]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 8002926:	f003 fd9d 	bl	8006464 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800292a:	2300      	movs	r3, #0
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	2378      	movs	r3, #120	; 0x78
 8002930:	4a2e      	ldr	r2, [pc, #184]	; (80029ec <FuncO_ModifyOutput+0x14c>)
 8002932:	2100      	movs	r1, #0
 8002934:	482c      	ldr	r0, [pc, #176]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 8002936:	f003 fcd3 	bl	80062e0 <HAL_DAC_Start_DMA>
			break;
 800293a:	e04f      	b.n	80029dc <FuncO_ModifyOutput+0x13c>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 800293c:	4b29      	ldr	r3, [pc, #164]	; (80029e4 <FuncO_ModifyOutput+0x144>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8002942:	2100      	movs	r1, #0
 8002944:	4828      	ldr	r0, [pc, #160]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 8002946:	f003 fd8d 	bl	8006464 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 800294a:	2300      	movs	r3, #0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2378      	movs	r3, #120	; 0x78
 8002950:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <FuncO_ModifyOutput+0x150>)
 8002952:	2100      	movs	r1, #0
 8002954:	4824      	ldr	r0, [pc, #144]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 8002956:	f003 fcc3 	bl	80062e0 <HAL_DAC_Start_DMA>

			break;
 800295a:	e03f      	b.n	80029dc <FuncO_ModifyOutput+0x13c>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <FuncO_ModifyOutput+0x144>)
 800295e:	2202      	movs	r2, #2
 8002960:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8002962:	2100      	movs	r1, #0
 8002964:	4820      	ldr	r0, [pc, #128]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 8002966:	f003 fd7d 	bl	8006464 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 800296a:	2300      	movs	r3, #0
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2378      	movs	r3, #120	; 0x78
 8002970:	4a20      	ldr	r2, [pc, #128]	; (80029f4 <FuncO_ModifyOutput+0x154>)
 8002972:	2100      	movs	r1, #0
 8002974:	481c      	ldr	r0, [pc, #112]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 8002976:	f003 fcb3 	bl	80062e0 <HAL_DAC_Start_DMA>
			break;
 800297a:	e02f      	b.n	80029dc <FuncO_ModifyOutput+0x13c>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <FuncO_ModifyOutput+0x144>)
 800297e:	2203      	movs	r2, #3
 8002980:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8002982:	2100      	movs	r1, #0
 8002984:	4818      	ldr	r0, [pc, #96]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 8002986:	f003 fd6d 	bl	8006464 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 800298a:	2300      	movs	r3, #0
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2378      	movs	r3, #120	; 0x78
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <FuncO_ModifyOutput+0x158>)
 8002992:	2100      	movs	r1, #0
 8002994:	4814      	ldr	r0, [pc, #80]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 8002996:	f003 fca3 	bl	80062e0 <HAL_DAC_Start_DMA>
			break;
 800299a:	e01f      	b.n	80029dc <FuncO_ModifyOutput+0x13c>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <FuncO_ModifyOutput+0x144>)
 800299e:	2204      	movs	r2, #4
 80029a0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80029a2:	2100      	movs	r1, #0
 80029a4:	4810      	ldr	r0, [pc, #64]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 80029a6:	f003 fd5d 	bl	8006464 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80029aa:	2300      	movs	r3, #0
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2378      	movs	r3, #120	; 0x78
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <FuncO_ModifyOutput+0x15c>)
 80029b2:	2100      	movs	r1, #0
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 80029b6:	f003 fc93 	bl	80062e0 <HAL_DAC_Start_DMA>
			break;
 80029ba:	e00f      	b.n	80029dc <FuncO_ModifyOutput+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <FuncO_ModifyOutput+0x144>)
 80029be:	2205      	movs	r2, #5
 80029c0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80029c2:	2100      	movs	r1, #0
 80029c4:	4808      	ldr	r0, [pc, #32]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 80029c6:	f003 fd4d 	bl	8006464 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 80029ca:	2300      	movs	r3, #0
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2378      	movs	r3, #120	; 0x78
 80029d0:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <FuncO_ModifyOutput+0x160>)
 80029d2:	2100      	movs	r1, #0
 80029d4:	4804      	ldr	r0, [pc, #16]	; (80029e8 <FuncO_ModifyOutput+0x148>)
 80029d6:	f003 fc83 	bl	80062e0 <HAL_DAC_Start_DMA>
			break;
 80029da:	bf00      	nop
	}
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200010ea 	.word	0x200010ea
 80029e8:	20001214 	.word	0x20001214
 80029ec:	200008e4 	.word	0x200008e4
 80029f0:	20000ac4 	.word	0x20000ac4
 80029f4:	20000524 	.word	0x20000524
 80029f8:	20000704 	.word	0x20000704
 80029fc:	20000ca4 	.word	0x20000ca4
 8002a00:	20000e84 	.word	0x20000e84

08002a04 <FuncO_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode FuncO_GetOutputMode()
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
	return eNewOutMode;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <FuncO_GetOutputMode+0x14>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	200010ea 	.word	0x200010ea

08002a1c <GO_SetOutputToEncoder>:
 *
 *
 *
 */
void GO_SetOutputToEncoder(uint8_t pGain)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(pGain)
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2b1f      	cmp	r3, #31
 8002a2a:	f200 80db 	bhi.w	8002be4 <GO_SetOutputToEncoder+0x1c8>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <GO_SetOutputToEncoder+0x18>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	08002ab5 	.word	0x08002ab5
 8002a38:	08002ab5 	.word	0x08002ab5
 8002a3c:	08002ab5 	.word	0x08002ab5
 8002a40:	08002ab5 	.word	0x08002ab5
 8002a44:	08002adb 	.word	0x08002adb
 8002a48:	08002adb 	.word	0x08002adb
 8002a4c:	08002adb 	.word	0x08002adb
 8002a50:	08002adb 	.word	0x08002adb
 8002a54:	08002b01 	.word	0x08002b01
 8002a58:	08002b01 	.word	0x08002b01
 8002a5c:	08002b01 	.word	0x08002b01
 8002a60:	08002b01 	.word	0x08002b01
 8002a64:	08002b27 	.word	0x08002b27
 8002a68:	08002b27 	.word	0x08002b27
 8002a6c:	08002b27 	.word	0x08002b27
 8002a70:	08002b27 	.word	0x08002b27
 8002a74:	08002b4d 	.word	0x08002b4d
 8002a78:	08002b4d 	.word	0x08002b4d
 8002a7c:	08002b4d 	.word	0x08002b4d
 8002a80:	08002b4d 	.word	0x08002b4d
 8002a84:	08002b73 	.word	0x08002b73
 8002a88:	08002b73 	.word	0x08002b73
 8002a8c:	08002b73 	.word	0x08002b73
 8002a90:	08002b73 	.word	0x08002b73
 8002a94:	08002b99 	.word	0x08002b99
 8002a98:	08002b99 	.word	0x08002b99
 8002a9c:	08002b99 	.word	0x08002b99
 8002aa0:	08002b99 	.word	0x08002b99
 8002aa4:	08002bbf 	.word	0x08002bbf
 8002aa8:	08002bbf 	.word	0x08002bbf
 8002aac:	08002bbf 	.word	0x08002bbf
 8002ab0:	08002bbf 	.word	0x08002bbf
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	484c      	ldr	r0, [pc, #304]	; (8002bec <GO_SetOutputToEncoder+0x1d0>)
 8002aba:	f004 fc17 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2120      	movs	r1, #32
 8002ac2:	484b      	ldr	r0, [pc, #300]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002ac4:	f004 fc12 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2110      	movs	r1, #16
 8002acc:	4848      	ldr	r0, [pc, #288]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002ace:	f004 fc0d 	bl	80072ec <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 8002ad2:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <GO_SetOutputToEncoder+0x1d8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
			break;
 8002ad8:	e084      	b.n	8002be4 <GO_SetOutputToEncoder+0x1c8>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8002ada:	2201      	movs	r2, #1
 8002adc:	2101      	movs	r1, #1
 8002ade:	4843      	ldr	r0, [pc, #268]	; (8002bec <GO_SetOutputToEncoder+0x1d0>)
 8002ae0:	f004 fc04 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	4841      	ldr	r0, [pc, #260]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002aea:	f004 fbff 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2110      	movs	r1, #16
 8002af2:	483f      	ldr	r0, [pc, #252]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002af4:	f004 fbfa 	bl	80072ec <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 8002af8:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <GO_SetOutputToEncoder+0x1d8>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
			break;
 8002afe:	e071      	b.n	8002be4 <GO_SetOutputToEncoder+0x1c8>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2101      	movs	r1, #1
 8002b04:	4839      	ldr	r0, [pc, #228]	; (8002bec <GO_SetOutputToEncoder+0x1d0>)
 8002b06:	f004 fbf1 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2120      	movs	r1, #32
 8002b0e:	4838      	ldr	r0, [pc, #224]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002b10:	f004 fbec 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8002b14:	2200      	movs	r2, #0
 8002b16:	2110      	movs	r1, #16
 8002b18:	4835      	ldr	r0, [pc, #212]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002b1a:	f004 fbe7 	bl	80072ec <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 8002b1e:	4b35      	ldr	r3, [pc, #212]	; (8002bf4 <GO_SetOutputToEncoder+0x1d8>)
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
			break;
 8002b24:	e05e      	b.n	8002be4 <GO_SetOutputToEncoder+0x1c8>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8002b26:	2201      	movs	r2, #1
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4830      	ldr	r0, [pc, #192]	; (8002bec <GO_SetOutputToEncoder+0x1d0>)
 8002b2c:	f004 fbde 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8002b30:	2201      	movs	r2, #1
 8002b32:	2120      	movs	r1, #32
 8002b34:	482e      	ldr	r0, [pc, #184]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002b36:	f004 fbd9 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2110      	movs	r1, #16
 8002b3e:	482c      	ldr	r0, [pc, #176]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002b40:	f004 fbd4 	bl	80072ec <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <GO_SetOutputToEncoder+0x1d8>)
 8002b46:	2203      	movs	r2, #3
 8002b48:	701a      	strb	r2, [r3, #0]
			break;
 8002b4a:	e04b      	b.n	8002be4 <GO_SetOutputToEncoder+0x1c8>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4826      	ldr	r0, [pc, #152]	; (8002bec <GO_SetOutputToEncoder+0x1d0>)
 8002b52:	f004 fbcb 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2120      	movs	r1, #32
 8002b5a:	4825      	ldr	r0, [pc, #148]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002b5c:	f004 fbc6 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8002b60:	2201      	movs	r2, #1
 8002b62:	2110      	movs	r1, #16
 8002b64:	4822      	ldr	r0, [pc, #136]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002b66:	f004 fbc1 	bl	80072ec <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 8002b6a:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <GO_SetOutputToEncoder+0x1d8>)
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	701a      	strb	r2, [r3, #0]
			break;
 8002b70:	e038      	b.n	8002be4 <GO_SetOutputToEncoder+0x1c8>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8002b72:	2201      	movs	r2, #1
 8002b74:	2101      	movs	r1, #1
 8002b76:	481d      	ldr	r0, [pc, #116]	; (8002bec <GO_SetOutputToEncoder+0x1d0>)
 8002b78:	f004 fbb8 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2120      	movs	r1, #32
 8002b80:	481b      	ldr	r0, [pc, #108]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002b82:	f004 fbb3 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8002b86:	2201      	movs	r2, #1
 8002b88:	2110      	movs	r1, #16
 8002b8a:	4819      	ldr	r0, [pc, #100]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002b8c:	f004 fbae 	bl	80072ec <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <GO_SetOutputToEncoder+0x1d8>)
 8002b92:	2205      	movs	r2, #5
 8002b94:	701a      	strb	r2, [r3, #0]
			break;
 8002b96:	e025      	b.n	8002be4 <GO_SetOutputToEncoder+0x1c8>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4813      	ldr	r0, [pc, #76]	; (8002bec <GO_SetOutputToEncoder+0x1d0>)
 8002b9e:	f004 fba5 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2120      	movs	r1, #32
 8002ba6:	4812      	ldr	r0, [pc, #72]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002ba8:	f004 fba0 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	2110      	movs	r1, #16
 8002bb0:	480f      	ldr	r0, [pc, #60]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002bb2:	f004 fb9b 	bl	80072ec <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <GO_SetOutputToEncoder+0x1d8>)
 8002bb8:	2206      	movs	r2, #6
 8002bba:	701a      	strb	r2, [r3, #0]
			break;
 8002bbc:	e012      	b.n	8002be4 <GO_SetOutputToEncoder+0x1c8>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	480a      	ldr	r0, [pc, #40]	; (8002bec <GO_SetOutputToEncoder+0x1d0>)
 8002bc4:	f004 fb92 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2120      	movs	r1, #32
 8002bcc:	4808      	ldr	r0, [pc, #32]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002bce:	f004 fb8d 	bl	80072ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2110      	movs	r1, #16
 8002bd6:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <GO_SetOutputToEncoder+0x1d4>)
 8002bd8:	f004 fb88 	bl	80072ec <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <GO_SetOutputToEncoder+0x1d8>)
 8002bde:	2207      	movs	r2, #7
 8002be0:	701a      	strb	r2, [r3, #0]
			break;
 8002be2:	bf00      	nop
	}

}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	48000400 	.word	0x48000400
 8002bf0:	48000800 	.word	0x48000800
 8002bf4:	2000000a 	.word	0x2000000a

08002bf8 <GO_GetOutputGain>:
 *
 *
 *
 */
uint8_t GO_GetOutputGain()
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <GO_GetOutputGain+0x14>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	2000000a 	.word	0x2000000a

08002c10 <SM_GetEncoderValue>:

#include "SignalManager.h"


uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <SM_GetEncoderValue+0x34>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <SM_GetEncoderValue+0x34>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	e002      	b.n	8002c38 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <SM_GetEncoderValue+0x34>)
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	b29b      	uxth	r3, r3
	}
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	40012c00 	.word	0x40012c00

08002c48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	; 0x30
 8002c4c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8002c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f008 f98f 	bl	800af84 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002c66:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002c68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c6e:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002c80:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c86:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c8c:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002c8e:	2204      	movs	r2, #4
 8002c90:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002cc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cd0:	4817      	ldr	r0, [pc, #92]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002cd2:	f002 f803 	bl	8004cdc <HAL_ADC_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002cdc:	f000 ff40 	bl	8003b60 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4811      	ldr	r0, [pc, #68]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002cec:	f002 fd8c 	bl	8005808 <HAL_ADCEx_MultiModeConfigChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002cf6:	f000 ff33 	bl	8003b60 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <MX_ADC1_Init+0xec>)
 8002cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cfe:	2306      	movs	r3, #6
 8002d00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d06:	237f      	movs	r3, #127	; 0x7f
 8002d08:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	4619      	mov	r1, r3
 8002d16:	4806      	ldr	r0, [pc, #24]	; (8002d30 <MX_ADC1_Init+0xe8>)
 8002d18:	f002 f9a0 	bl	800505c <HAL_ADC_ConfigChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002d22:	f000 ff1d 	bl	8003b60 <Error_Handler>
  }

}
 8002d26:	bf00      	nop
 8002d28:	3730      	adds	r7, #48	; 0x30
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20001110 	.word	0x20001110
 8002d34:	0c900008 	.word	0x0c900008

08002d38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d58:	d14f      	bne.n	8002dfa <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_ADC_MspInit+0xcc>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <HAL_ADC_MspInit+0xcc>)
 8002d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d66:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <HAL_ADC_MspInit+0xcc>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_ADC_MspInit+0xcc>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	4a23      	ldr	r2, [pc, #140]	; (8002e04 <HAL_ADC_MspInit+0xcc>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <HAL_ADC_MspInit+0xcc>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da0:	f004 f90a 	bl	8006fb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002da6:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_ADC_MspInit+0xd4>)
 8002da8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002dac:	2205      	movs	r2, #5
 8002dae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dde:	480a      	ldr	r0, [pc, #40]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002de0:	f003 fe1e 	bl	8006a20 <HAL_DMA_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8002dea:	f000 feb9 	bl	8003b60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_ADC_MspInit+0xd0>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	; 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	2000117c 	.word	0x2000117c
 8002e0c:	40020008 	.word	0x40020008

08002e10 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <MX_COMP1_Init+0x44>)
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <MX_COMP1_Init+0x48>)
 8002e18:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <MX_COMP1_Init+0x44>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <MX_COMP1_Init+0x44>)
 8002e22:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <MX_COMP1_Init+0x4c>)
 8002e24:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <MX_COMP1_Init+0x44>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <MX_COMP1_Init+0x44>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <MX_COMP1_Init+0x44>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <MX_COMP1_Init+0x44>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002e3e:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_COMP1_Init+0x44>)
 8002e40:	f002 ff36 	bl	8005cb0 <HAL_COMP_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8002e4a:	f000 fe89 	bl	8003b60 <Error_Handler>
  }

}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200011dc 	.word	0x200011dc
 8002e58:	40010200 	.word	0x40010200
 8002e5c:	00800030 	.word	0x00800030

08002e60 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_COMP_MspInit+0x5c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d118      	bne.n	8002eb4 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <HAL_COMP_MspInit+0x60>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <HAL_COMP_MspInit+0x60>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_COMP_MspInit+0x60>)
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb0:	f004 f882 	bl	8006fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40010200 	.word	0x40010200
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002eca:	463b      	mov	r3, r7
 8002ecc:	2230      	movs	r2, #48	; 0x30
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f008 f857 	bl	800af84 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <MX_DAC1_Init+0x8c>)
 8002ed8:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <MX_DAC1_Init+0x90>)
 8002eda:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002edc:	481c      	ldr	r0, [pc, #112]	; (8002f50 <MX_DAC1_Init+0x8c>)
 8002ede:	f003 f98a 	bl	80061f6 <HAL_DAC_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002ee8:	f000 fe3a 	bl	8003b60 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002eec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ef0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8002efe:	2306      	movs	r3, #6
 8002f00:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002f12:	463b      	mov	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	4619      	mov	r1, r3
 8002f18:	480d      	ldr	r0, [pc, #52]	; (8002f50 <MX_DAC1_Init+0x8c>)
 8002f1a:	f003 fb4b 	bl	80065b4 <HAL_DAC_ConfigChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8002f24:	f000 fe1c 	bl	8003b60 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002f30:	463b      	mov	r3, r7
 8002f32:	2210      	movs	r2, #16
 8002f34:	4619      	mov	r1, r3
 8002f36:	4806      	ldr	r0, [pc, #24]	; (8002f50 <MX_DAC1_Init+0x8c>)
 8002f38:	f003 fb3c 	bl	80065b4 <HAL_DAC_ConfigChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8002f42:	f000 fe0d 	bl	8003b60 <Error_Handler>
  }

}
 8002f46:	bf00      	nop
 8002f48:	3730      	adds	r7, #48	; 0x30
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20001214 	.word	0x20001214
 8002f54:	50000800 	.word	0x50000800

08002f58 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	; 0x30
 8002f5c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002f5e:	463b      	mov	r3, r7
 8002f60:	2230      	movs	r2, #48	; 0x30
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f008 f80d 	bl	800af84 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <MX_DAC2_Init+0x6c>)
 8002f6c:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <MX_DAC2_Init+0x70>)
 8002f6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8002f70:	4814      	ldr	r0, [pc, #80]	; (8002fc4 <MX_DAC2_Init+0x6c>)
 8002f72:	f003 f940 	bl	80061f6 <HAL_DAC_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8002f7c:	f000 fdf0 	bl	8003b60 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002f80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f84:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8002f92:	2306      	movs	r3, #6
 8002f94:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002fa6:	463b      	mov	r3, r7
 8002fa8:	2200      	movs	r2, #0
 8002faa:	4619      	mov	r1, r3
 8002fac:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <MX_DAC2_Init+0x6c>)
 8002fae:	f003 fb01 	bl	80065b4 <HAL_DAC_ConfigChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8002fb8:	f000 fdd2 	bl	8003b60 <Error_Handler>
  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3730      	adds	r7, #48	; 0x30
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20001200 	.word	0x20001200
 8002fc8:	50000c00 	.word	0x50000c00

08002fcc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	; 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a56      	ldr	r2, [pc, #344]	; (8003144 <HAL_DAC_MspInit+0x178>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d150      	bne.n	8003090 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002fee:	4b56      	ldr	r3, [pc, #344]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	4a55      	ldr	r2, [pc, #340]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ffa:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	4a4f      	ldr	r2, [pc, #316]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003012:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800301e:	2330      	movs	r3, #48	; 0x30
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003022:	2303      	movs	r3, #3
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	4619      	mov	r1, r3
 8003030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003034:	f003 ffc0 	bl	8006fb8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8003038:	4b44      	ldr	r3, [pc, #272]	; (800314c <HAL_DAC_MspInit+0x180>)
 800303a:	4a45      	ldr	r2, [pc, #276]	; (8003150 <HAL_DAC_MspInit+0x184>)
 800303c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800303e:	4b43      	ldr	r3, [pc, #268]	; (800314c <HAL_DAC_MspInit+0x180>)
 8003040:	2206      	movs	r2, #6
 8003042:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003044:	4b41      	ldr	r3, [pc, #260]	; (800314c <HAL_DAC_MspInit+0x180>)
 8003046:	2210      	movs	r2, #16
 8003048:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800304a:	4b40      	ldr	r3, [pc, #256]	; (800314c <HAL_DAC_MspInit+0x180>)
 800304c:	2200      	movs	r2, #0
 800304e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003050:	4b3e      	ldr	r3, [pc, #248]	; (800314c <HAL_DAC_MspInit+0x180>)
 8003052:	2280      	movs	r2, #128	; 0x80
 8003054:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003056:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_DAC_MspInit+0x180>)
 8003058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800305e:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_DAC_MspInit+0x180>)
 8003060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003064:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003066:	4b39      	ldr	r3, [pc, #228]	; (800314c <HAL_DAC_MspInit+0x180>)
 8003068:	2220      	movs	r2, #32
 800306a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800306c:	4b37      	ldr	r3, [pc, #220]	; (800314c <HAL_DAC_MspInit+0x180>)
 800306e:	2200      	movs	r2, #0
 8003070:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003072:	4836      	ldr	r0, [pc, #216]	; (800314c <HAL_DAC_MspInit+0x180>)
 8003074:	f003 fcd4 	bl	8006a20 <HAL_DMA_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800307e:	f000 fd6f 	bl	8003b60 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a31      	ldr	r2, [pc, #196]	; (800314c <HAL_DAC_MspInit+0x180>)
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	4a30      	ldr	r2, [pc, #192]	; (800314c <HAL_DAC_MspInit+0x180>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800308e:	e054      	b.n	800313a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2f      	ldr	r2, [pc, #188]	; (8003154 <HAL_DAC_MspInit+0x188>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d14f      	bne.n	800313a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800309a:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030a6:	4b28      	ldr	r3, [pc, #160]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	4a24      	ldr	r2, [pc, #144]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030be:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_DAC_MspInit+0x17c>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030ca:	2340      	movs	r3, #64	; 0x40
 80030cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ce:	2303      	movs	r3, #3
 80030d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d6:	f107 031c 	add.w	r3, r7, #28
 80030da:	4619      	mov	r1, r3
 80030dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e0:	f003 ff6a 	bl	8006fb8 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80030e4:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 80030e6:	4a1d      	ldr	r2, [pc, #116]	; (800315c <HAL_DAC_MspInit+0x190>)
 80030e8:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 80030ec:	2229      	movs	r2, #41	; 0x29
 80030ee:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030f0:	4b19      	ldr	r3, [pc, #100]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 80030f2:	2210      	movs	r2, #16
 80030f4:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f6:	4b18      	ldr	r3, [pc, #96]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003102:	4b15      	ldr	r3, [pc, #84]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 8003104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003108:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 800310c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003110:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 8003114:	2220      	movs	r2, #32
 8003116:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 800311a:	2200      	movs	r2, #0
 800311c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800311e:	480e      	ldr	r0, [pc, #56]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 8003120:	f003 fc7e 	bl	8006a20 <HAL_DMA_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800312a:	f000 fd19 	bl	8003b60 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a09      	ldr	r2, [pc, #36]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	4a08      	ldr	r2, [pc, #32]	; (8003158 <HAL_DAC_MspInit+0x18c>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6293      	str	r3, [r2, #40]	; 0x28
}
 800313a:	bf00      	nop
 800313c:	3730      	adds	r7, #48	; 0x30
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	50000800 	.word	0x50000800
 8003148:	40021000 	.word	0x40021000
 800314c:	20001228 	.word	0x20001228
 8003150:	4002001c 	.word	0x4002001c
 8003154:	50000c00 	.word	0x50000c00
 8003158:	20001288 	.word	0x20001288
 800315c:	40020030 	.word	0x40020030

08003160 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <MX_DMA_Init+0x70>)
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <MX_DMA_Init+0x70>)
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	6493      	str	r3, [r2, #72]	; 0x48
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <MX_DMA_Init+0x70>)
 8003174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <MX_DMA_Init+0x70>)
 8003180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003182:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <MX_DMA_Init+0x70>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6493      	str	r3, [r2, #72]	; 0x48
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <MX_DMA_Init+0x70>)
 800318c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2101      	movs	r1, #1
 800319a:	200b      	movs	r0, #11
 800319c:	f002 fff7 	bl	800618e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031a0:	200b      	movs	r0, #11
 80031a2:	f003 f80e 	bl	80061c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2100      	movs	r1, #0
 80031aa:	200c      	movs	r0, #12
 80031ac:	f002 ffef 	bl	800618e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80031b0:	200c      	movs	r0, #12
 80031b2:	f003 f806 	bl	80061c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	200d      	movs	r0, #13
 80031bc:	f002 ffe7 	bl	800618e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80031c0:	200d      	movs	r0, #13
 80031c2:	f002 fffe 	bl	80061c2 <HAL_NVIC_EnableIRQ>

}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000

080031d4 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 80031d8:	4b20      	ldr	r3, [pc, #128]	; (800325c <update_dc_bias_sweep+0x88>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <update_dc_bias_sweep+0x1a>
 80031e0:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <update_dc_bias_sweep+0x8c>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <update_dc_bias_sweep+0x8c>)
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	e005      	b.n	80031fa <update_dc_bias_sweep+0x26>
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <update_dc_bias_sweep+0x8c>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <update_dc_bias_sweep+0x8c>)
 80031f8:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <update_dc_bias_sweep+0x8c>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <update_dc_bias_sweep+0x90>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <update_dc_bias_sweep+0x3e>
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <update_dc_bias_sweep+0x90>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e002      	b.n	8003218 <update_dc_bias_sweep+0x44>
 8003212:	4b14      	ldr	r3, [pc, #80]	; (8003264 <update_dc_bias_sweep+0x90>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <update_dc_bias_sweep+0x8c>)
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <update_dc_bias_sweep+0x52>
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <update_dc_bias_sweep+0x88>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <update_dc_bias_sweep+0x8c>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322e:	d302      	bcc.n	8003236 <update_dc_bias_sweep+0x62>
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <update_dc_bias_sweep+0x88>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <update_dc_bias_sweep+0x90>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	2108      	movs	r1, #8
 8003240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003244:	f004 f852 	bl	80072ec <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <update_dc_bias_sweep+0x8c>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	2200      	movs	r2, #0
 800324e:	2110      	movs	r1, #16
 8003250:	4805      	ldr	r0, [pc, #20]	; (8003268 <update_dc_bias_sweep+0x94>)
 8003252:	f003 f95d 	bl	8006510 <HAL_DAC_SetValue>
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	2000000c 	.word	0x2000000c
 8003260:	200010ec 	.word	0x200010ec
 8003264:	200010f0 	.word	0x200010f0
 8003268:	20001214 	.word	0x20001214

0800326c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <__NVIC_GetPriorityGrouping+0x18>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 0307 	and.w	r3, r3, #7
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	db0b      	blt.n	80032b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	4907      	ldr	r1, [pc, #28]	; (80032c0 <__NVIC_EnableIRQ+0x38>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2001      	movs	r0, #1
 80032aa:	fa00 f202 	lsl.w	r2, r0, r2
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000e100 	.word	0xe000e100

080032c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	db0a      	blt.n	80032ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	490c      	ldr	r1, [pc, #48]	; (8003310 <__NVIC_SetPriority+0x4c>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	0112      	lsls	r2, r2, #4
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	440b      	add	r3, r1
 80032e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ec:	e00a      	b.n	8003304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4908      	ldr	r1, [pc, #32]	; (8003314 <__NVIC_SetPriority+0x50>)
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	3b04      	subs	r3, #4
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	440b      	add	r3, r1
 8003302:	761a      	strb	r2, [r3, #24]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000e100 	.word	0xe000e100
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	; 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f1c3 0307 	rsb	r3, r3, #7
 8003332:	2b04      	cmp	r3, #4
 8003334:	bf28      	it	cs
 8003336:	2304      	movcs	r3, #4
 8003338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3304      	adds	r3, #4
 800333e:	2b06      	cmp	r3, #6
 8003340:	d902      	bls.n	8003348 <NVIC_EncodePriority+0x30>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3b03      	subs	r3, #3
 8003346:	e000      	b.n	800334a <NVIC_EncodePriority+0x32>
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	401a      	ands	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	43d9      	mvns	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	4313      	orrs	r3, r2
         );
}
 8003372:	4618      	mov	r0, r3
 8003374:	3724      	adds	r7, #36	; 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800338a:	4a14      	ldr	r2, [pc, #80]	; (80033dc <LL_SYSCFG_SetEXTISource+0x5c>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	3302      	adds	r3, #2
 8003394:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	43db      	mvns	r3, r3
 800339e:	ea02 0103 	and.w	r1, r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	409a      	lsls	r2, r3
 80033c0:	4806      	ldr	r0, [pc, #24]	; (80033dc <LL_SYSCFG_SetEXTISource+0x5c>)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	430a      	orrs	r2, r1
 80033ca:	3302      	adds	r3, #2
 80033cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40010000 	.word	0x40010000

080033e0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	613b      	str	r3, [r7, #16]
  return result;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2103      	movs	r1, #3
 8003408:	fa01 f303 	lsl.w	r3, r1, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	401a      	ands	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	61bb      	str	r3, [r7, #24]
  return result;
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	601a      	str	r2, [r3, #0]
}
 8003432:	bf00      	nop
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800343e:	b480      	push	{r7}
 8003440:	b089      	sub	sp, #36	; 0x24
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	613b      	str	r3, [r7, #16]
  return result;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2103      	movs	r1, #3
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	401a      	ands	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	61bb      	str	r3, [r7, #24]
  return result;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	431a      	orrs	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	60da      	str	r2, [r3, #12]
}
 8003490:	bf00      	nop
 8003492:	3724      	adds	r7, #36	; 0x24
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034c4:	4907      	ldr	r1, [pc, #28]	; (80034e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40021000 	.word	0x40021000

080034e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80034ee:	f107 031c 	add.w	r3, r7, #28
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]
 8003508:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800350a:	2004      	movs	r0, #4
 800350c:	f7ff ffd4 	bl	80034b8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8003510:	2020      	movs	r0, #32
 8003512:	f7ff ffd1 	bl	80034b8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003516:	2001      	movs	r0, #1
 8003518:	f7ff ffce 	bl	80034b8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800351c:	2002      	movs	r0, #2
 800351e:	f7ff ffcb 	bl	80034b8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8003522:	2108      	movs	r1, #8
 8003524:	48d3      	ldr	r0, [pc, #844]	; (8003874 <MX_GPIO_Init+0x38c>)
 8003526:	f7ff ffb9 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 800352a:	2108      	movs	r1, #8
 800352c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003530:	f7ff ffb4 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8003534:	2110      	movs	r1, #16
 8003536:	48cf      	ldr	r0, [pc, #828]	; (8003874 <MX_GPIO_Init+0x38c>)
 8003538:	f7ff ffb0 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 800353c:	2120      	movs	r1, #32
 800353e:	48cd      	ldr	r0, [pc, #820]	; (8003874 <MX_GPIO_Init+0x38c>)
 8003540:	f7ff ffac 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8003544:	2101      	movs	r1, #1
 8003546:	48cc      	ldr	r0, [pc, #816]	; (8003878 <MX_GPIO_Init+0x390>)
 8003548:	f7ff ffa8 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 800354c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003550:	48c8      	ldr	r0, [pc, #800]	; (8003874 <MX_GPIO_Init+0x38c>)
 8003552:	f7ff ffa3 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8003556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800355a:	48c6      	ldr	r0, [pc, #792]	; (8003874 <MX_GPIO_Init+0x38c>)
 800355c:	f7ff ff9e 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	48c5      	ldr	r0, [pc, #788]	; (8003878 <MX_GPIO_Init+0x390>)
 8003564:	f7ff ff9a 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	48c3      	ldr	r0, [pc, #780]	; (8003878 <MX_GPIO_Init+0x390>)
 800356c:	f7ff ff96 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8003570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003574:	48c0      	ldr	r0, [pc, #768]	; (8003878 <MX_GPIO_Init+0x390>)
 8003576:	f7ff ff91 	bl	800349c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800357a:	49c0      	ldr	r1, [pc, #768]	; (800387c <MX_GPIO_Init+0x394>)
 800357c:	2002      	movs	r0, #2
 800357e:	f7ff feff 	bl	8003380 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8003582:	49bf      	ldr	r1, [pc, #764]	; (8003880 <MX_GPIO_Init+0x398>)
 8003584:	2002      	movs	r0, #2
 8003586:	f7ff fefb 	bl	8003380 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800358a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800358e:	2005      	movs	r0, #5
 8003590:	f7ff fef6 	bl	8003380 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8003594:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8003598:	2005      	movs	r0, #5
 800359a:	f7ff fef1 	bl	8003380 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 800359e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80035a2:	2002      	movs	r0, #2
 80035a4:	f7ff feec 	bl	8003380 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80035a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035ac:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80035ba:	2302      	movs	r3, #2
 80035bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80035c0:	f107 031c 	add.w	r3, r7, #28
 80035c4:	4618      	mov	r0, r3
 80035c6:	f006 fae7 	bl	8009b98 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80035ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ce:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80035dc:	2302      	movs	r3, #2
 80035de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	4618      	mov	r0, r3
 80035e8:	f006 fad6 	bl	8009b98 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80035ec:	2301      	movs	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80035f6:	2300      	movs	r3, #0
 80035f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80035fc:	2302      	movs	r3, #2
 80035fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8003602:	f107 031c 	add.w	r3, r7, #28
 8003606:	4618      	mov	r0, r3
 8003608:	f006 fac6 	bl	8009b98 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800360c:	2302      	movs	r3, #2
 800360e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800361c:	2302      	movs	r3, #2
 800361e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8003622:	f107 031c 	add.w	r3, r7, #28
 8003626:	4618      	mov	r0, r3
 8003628:	f006 fab6 	bl	8009b98 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800362c:	2304      	movs	r3, #4
 800362e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800363c:	2302      	movs	r3, #2
 800363e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8003642:	f107 031c 	add.w	r3, r7, #28
 8003646:	4618      	mov	r0, r3
 8003648:	f006 faa6 	bl	8009b98 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 800364c:	2201      	movs	r2, #1
 800364e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003652:	4888      	ldr	r0, [pc, #544]	; (8003874 <MX_GPIO_Init+0x38c>)
 8003654:	f7ff fef3 	bl	800343e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8003658:	2201      	movs	r2, #1
 800365a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800365e:	4885      	ldr	r0, [pc, #532]	; (8003874 <MX_GPIO_Init+0x38c>)
 8003660:	f7ff feed 	bl	800343e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8003664:	2201      	movs	r2, #1
 8003666:	2101      	movs	r1, #1
 8003668:	4886      	ldr	r0, [pc, #536]	; (8003884 <MX_GPIO_Init+0x39c>)
 800366a:	f7ff fee8 	bl	800343e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 800366e:	2201      	movs	r2, #1
 8003670:	2102      	movs	r1, #2
 8003672:	4884      	ldr	r0, [pc, #528]	; (8003884 <MX_GPIO_Init+0x39c>)
 8003674:	f7ff fee3 	bl	800343e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8003678:	2201      	movs	r2, #1
 800367a:	2104      	movs	r1, #4
 800367c:	487d      	ldr	r0, [pc, #500]	; (8003874 <MX_GPIO_Init+0x38c>)
 800367e:	f7ff fede 	bl	800343e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8003682:	2200      	movs	r2, #0
 8003684:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003688:	487a      	ldr	r0, [pc, #488]	; (8003874 <MX_GPIO_Init+0x38c>)
 800368a:	f7ff fea9 	bl	80033e0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800368e:	2200      	movs	r2, #0
 8003690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003694:	4877      	ldr	r0, [pc, #476]	; (8003874 <MX_GPIO_Init+0x38c>)
 8003696:	f7ff fea3 	bl	80033e0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800369a:	2200      	movs	r2, #0
 800369c:	2101      	movs	r1, #1
 800369e:	4879      	ldr	r0, [pc, #484]	; (8003884 <MX_GPIO_Init+0x39c>)
 80036a0:	f7ff fe9e 	bl	80033e0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80036a4:	2200      	movs	r2, #0
 80036a6:	2102      	movs	r1, #2
 80036a8:	4876      	ldr	r0, [pc, #472]	; (8003884 <MX_GPIO_Init+0x39c>)
 80036aa:	f7ff fe99 	bl	80033e0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2104      	movs	r1, #4
 80036b2:	4870      	ldr	r0, [pc, #448]	; (8003874 <MX_GPIO_Init+0x38c>)
 80036b4:	f7ff fe94 	bl	80033e0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80036b8:	2308      	movs	r3, #8
 80036ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80036bc:	2301      	movs	r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80036c8:	2302      	movs	r3, #2
 80036ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4868      	ldr	r0, [pc, #416]	; (8003874 <MX_GPIO_Init+0x38c>)
 80036d2:	f006 fc54 	bl	8009f7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80036d6:	2308      	movs	r3, #8
 80036d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80036da:	2301      	movs	r3, #1
 80036dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f2:	f006 fc44 	bl	8009f7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80036f6:	2310      	movs	r3, #16
 80036f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80036fa:	2301      	movs	r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4859      	ldr	r0, [pc, #356]	; (8003874 <MX_GPIO_Init+0x38c>)
 8003710:	f006 fc35 	bl	8009f7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8003714:	2320      	movs	r3, #32
 8003716:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003718:	2301      	movs	r3, #1
 800371a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4851      	ldr	r0, [pc, #324]	; (8003874 <MX_GPIO_Init+0x38c>)
 800372e:	f006 fc26 	bl	8009f7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8003732:	2301      	movs	r3, #1
 8003734:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003736:	2301      	movs	r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	4619      	mov	r1, r3
 800374a:	484b      	ldr	r0, [pc, #300]	; (8003878 <MX_GPIO_Init+0x390>)
 800374c:	f006 fc17 	bl	8009f7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8003750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003754:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003756:	2301      	movs	r3, #1
 8003758:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4842      	ldr	r0, [pc, #264]	; (8003874 <MX_GPIO_Init+0x38c>)
 800376c:	f006 fc07 	bl	8009f7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8003770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003774:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003776:	2301      	movs	r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	4619      	mov	r1, r3
 800378a:	483a      	ldr	r0, [pc, #232]	; (8003874 <MX_GPIO_Init+0x38c>)
 800378c:	f006 fbf7 	bl	8009f7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8003790:	2340      	movs	r3, #64	; 0x40
 8003792:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003794:	2301      	movs	r3, #1
 8003796:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	4833      	ldr	r0, [pc, #204]	; (8003878 <MX_GPIO_Init+0x390>)
 80037aa:	f006 fbe8 	bl	8009f7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80037b2:	2301      	movs	r3, #1
 80037b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80037b6:	2303      	movs	r3, #3
 80037b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	482c      	ldr	r0, [pc, #176]	; (8003878 <MX_GPIO_Init+0x390>)
 80037c8:	f006 fbd9 	bl	8009f7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80037cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80037d2:	2301      	movs	r3, #1
 80037d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80037d6:	2303      	movs	r3, #3
 80037d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4824      	ldr	r0, [pc, #144]	; (8003878 <MX_GPIO_Init+0x390>)
 80037e8:	f006 fbc9 	bl	8009f7e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80037ec:	f7ff fd3e 	bl	800326c <__NVIC_GetPriorityGrouping>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2200      	movs	r2, #0
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fd8e 	bl	8003318 <NVIC_EncodePriority>
 80037fc:	4603      	mov	r3, r0
 80037fe:	4619      	mov	r1, r3
 8003800:	2006      	movs	r0, #6
 8003802:	f7ff fd5f 	bl	80032c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8003806:	2006      	movs	r0, #6
 8003808:	f7ff fd3e 	bl	8003288 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800380c:	f7ff fd2e 	bl	800326c <__NVIC_GetPriorityGrouping>
 8003810:	4603      	mov	r3, r0
 8003812:	2200      	movs	r2, #0
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fd7e 	bl	8003318 <NVIC_EncodePriority>
 800381c:	4603      	mov	r3, r0
 800381e:	4619      	mov	r1, r3
 8003820:	2007      	movs	r0, #7
 8003822:	f7ff fd4f 	bl	80032c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8003826:	2007      	movs	r0, #7
 8003828:	f7ff fd2e 	bl	8003288 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800382c:	f7ff fd1e 	bl	800326c <__NVIC_GetPriorityGrouping>
 8003830:	4603      	mov	r3, r0
 8003832:	2200      	movs	r2, #0
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fd6e 	bl	8003318 <NVIC_EncodePriority>
 800383c:	4603      	mov	r3, r0
 800383e:	4619      	mov	r1, r3
 8003840:	2008      	movs	r0, #8
 8003842:	f7ff fd3f 	bl	80032c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8003846:	2008      	movs	r0, #8
 8003848:	f7ff fd1e 	bl	8003288 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800384c:	f7ff fd0e 	bl	800326c <__NVIC_GetPriorityGrouping>
 8003850:	4603      	mov	r3, r0
 8003852:	2200      	movs	r2, #0
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fd5e 	bl	8003318 <NVIC_EncodePriority>
 800385c:	4603      	mov	r3, r0
 800385e:	4619      	mov	r1, r3
 8003860:	2028      	movs	r0, #40	; 0x28
 8003862:	f7ff fd2f 	bl	80032c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003866:	2028      	movs	r0, #40	; 0x28
 8003868:	f7ff fd0e 	bl	8003288 <__NVIC_EnableIRQ>

}
 800386c:	bf00      	nop
 800386e:	3728      	adds	r7, #40	; 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	e009      	b.n	8003888 <MX_GPIO_Init+0x3a0>
 8003874:	48000800 	.word	0x48000800
 8003878:	48000400 	.word	0x48000400
 800387c:	0f000003 	.word	0x0f000003
 8003880:	f0000003 	.word	0xf0000003
 8003884:	48001400 	.word	0x48001400
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop

0800388c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003894:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003898:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80038a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80038a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80038ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00b      	beq.n	80038cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80038b4:	e000      	b.n	80038b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80038b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80038b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f9      	beq.n	80038b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80038c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80038cc:	687b      	ldr	r3, [r7, #4]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e009      	b.n	8003904 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	60ba      	str	r2, [r7, #8]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ffc7 	bl	800388c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	3301      	adds	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	dbf1      	blt.n	80038f0 <_write+0x16>
  return len;
 800390c:	687b      	ldr	r3, [r7, #4]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
	// do something
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003932:	f000 ff7e 	bl	8004832 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003936:	f000 f8a5 	bl	8003a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800393a:	f7ff fdd5 	bl	80034e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800393e:	f7ff fc0f 	bl	8003160 <MX_DMA_Init>
  MX_DAC1_Init();
 8003942:	f7ff fabf 	bl	8002ec4 <MX_DAC1_Init>
  MX_DAC2_Init();
 8003946:	f7ff fb07 	bl	8002f58 <MX_DAC2_Init>
  MX_ADC1_Init();
 800394a:	f7ff f97d 	bl	8002c48 <MX_ADC1_Init>
  MX_COMP1_Init();
 800394e:	f7ff fa5f 	bl	8002e10 <MX_COMP1_Init>
  MX_TIM2_Init();
 8003952:	f000 fc65 	bl	8004220 <MX_TIM2_Init>
  MX_TIM17_Init();
 8003956:	f000 fdfd 	bl	8004554 <MX_TIM17_Init>
  MX_SPI3_Init();
 800395a:	f000 f93f 	bl	8003bdc <MX_SPI3_Init>
  MX_RNG_Init();
 800395e:	f000 f92f 	bl	8003bc0 <MX_RNG_Init>
  MX_TIM1_Init();
 8003962:	f000 fbed 	bl	8004140 <MX_TIM1_Init>
  MX_TIM8_Init();
 8003966:	f000 fd15 	bl	8004394 <MX_TIM8_Init>
  MX_TIM16_Init();
 800396a:	f000 fdcd 	bl	8004508 <MX_TIM16_Init>
  MX_TIM15_Init();
 800396e:	f000 fd79 	bl	8004464 <MX_TIM15_Init>
  MX_TIM5_Init();
 8003972:	f000 fcbf 	bl	80042f4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2378      	movs	r3, #120	; 0x78
 800397c:	4a34      	ldr	r2, [pc, #208]	; (8003a50 <main+0x124>)
 800397e:	2100      	movs	r1, #0
 8003980:	4834      	ldr	r0, [pc, #208]	; (8003a54 <main+0x128>)
 8003982:	f002 fcad 	bl	80062e0 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8003986:	2110      	movs	r1, #16
 8003988:	4832      	ldr	r0, [pc, #200]	; (8003a54 <main+0x128>)
 800398a:	f002 fc56 	bl	800623a <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 800398e:	2300      	movs	r3, #0
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	2378      	movs	r3, #120	; 0x78
 8003994:	4a30      	ldr	r2, [pc, #192]	; (8003a58 <main+0x12c>)
 8003996:	2100      	movs	r1, #0
 8003998:	4830      	ldr	r0, [pc, #192]	; (8003a5c <main+0x130>)
 800399a:	f002 fca1 	bl	80062e0 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 800399e:	4830      	ldr	r0, [pc, #192]	; (8003a60 <main+0x134>)
 80039a0:	f005 f820 	bl	80089e4 <HAL_TIM_Base_Start>
  TIM8->ARR = 14015;			// 100Hz
 80039a4:	4b2f      	ldr	r3, [pc, #188]	; (8003a64 <main+0x138>)
 80039a6:	f243 62bf 	movw	r2, #14015	; 0x36bf
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c
  //TIM8->ARR = 65535;
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80039ac:	2201      	movs	r2, #1
 80039ae:	2108      	movs	r1, #8
 80039b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b4:	f003 fc9a 	bl	80072ec <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80039b8:	2201      	movs	r2, #1
 80039ba:	2101      	movs	r1, #1
 80039bc:	482a      	ldr	r0, [pc, #168]	; (8003a68 <main+0x13c>)
 80039be:	f003 fc95 	bl	80072ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80039c2:	2201      	movs	r2, #1
 80039c4:	2120      	movs	r1, #32
 80039c6:	4829      	ldr	r0, [pc, #164]	; (8003a6c <main+0x140>)
 80039c8:	f003 fc90 	bl	80072ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80039cc:	2201      	movs	r2, #1
 80039ce:	2110      	movs	r1, #16
 80039d0:	4826      	ldr	r0, [pc, #152]	; (8003a6c <main+0x140>)
 80039d2:	f003 fc8b 	bl	80072ec <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80039d6:	2200      	movs	r2, #0
 80039d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039dc:	4823      	ldr	r0, [pc, #140]	; (8003a6c <main+0x140>)
 80039de:	f003 fc85 	bl	80072ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80039e2:	2200      	movs	r2, #0
 80039e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039e8:	4820      	ldr	r0, [pc, #128]	; (8003a6c <main+0x140>)
 80039ea:	f003 fc7f 	bl	80072ec <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80039ee:	2201      	movs	r2, #1
 80039f0:	2108      	movs	r1, #8
 80039f2:	481e      	ldr	r0, [pc, #120]	; (8003a6c <main+0x140>)
 80039f4:	f003 fc7a 	bl	80072ec <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80039f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a02:	f023 0307 	bic.w	r3, r3, #7
 8003a06:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8003a08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a12:	f043 0305 	orr.w	r3, r3, #5
 8003a16:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8003a18:	4815      	ldr	r0, [pc, #84]	; (8003a70 <main+0x144>)
 8003a1a:	f005 f811 	bl	8008a40 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8003a1e:	4815      	ldr	r0, [pc, #84]	; (8003a74 <main+0x148>)
 8003a20:	f004 ffe0 	bl	80089e4 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <main+0x14c>)
 8003a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <main+0x14c>)
 8003a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8003a34:	f7fc fc44 	bl	80002c0 <DM_Init>
  DM_PostInit();
 8003a38:	f7fc fc50 	bl	80002dc <DM_PostInit>


  HAL_TIM_Base_Start_IT(&htim15);
 8003a3c:	480f      	ldr	r0, [pc, #60]	; (8003a7c <main+0x150>)
 8003a3e:	f004 ffff 	bl	8008a40 <HAL_TIM_Base_Start_IT>

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 8003a42:	480f      	ldr	r0, [pc, #60]	; (8003a80 <main+0x154>)
 8003a44:	f004 ffce 	bl	80089e4 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8003a48:	f7fe fa46 	bl	8001ed8 <EM_ProcessEvent>
 8003a4c:	e7fc      	b.n	8003a48 <main+0x11c>
 8003a4e:	bf00      	nop
 8003a50:	200008e4 	.word	0x200008e4
 8003a54:	20001214 	.word	0x20001214
 8003a58:	20000ca4 	.word	0x20000ca4
 8003a5c:	20001200 	.word	0x20001200
 8003a60:	2000134c 	.word	0x2000134c
 8003a64:	40013400 	.word	0x40013400
 8003a68:	48000400 	.word	0x48000400
 8003a6c:	48000800 	.word	0x48000800
 8003a70:	200014c8 	.word	0x200014c8
 8003a74:	2000147c 	.word	0x2000147c
 8003a78:	40001000 	.word	0x40001000
 8003a7c:	20001398 	.word	0x20001398
 8003a80:	20001430 	.word	0x20001430

08003a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0a8      	sub	sp, #160	; 0xa0
 8003a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a8e:	2238      	movs	r2, #56	; 0x38
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f007 fa76 	bl	800af84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	2254      	movs	r2, #84	; 0x54
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f007 fa68 	bl	800af84 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f003 fc31 	bl	800731c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8003aba:	2322      	movs	r3, #34	; 0x22
 8003abc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ac4:	2340      	movs	r3, #64	; 0x40
 8003ac6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8003ada:	2302      	movs	r3, #2
 8003adc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8003ae0:	232a      	movs	r3, #42	; 0x2a
 8003ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8003aec:	2304      	movs	r3, #4
 8003aee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003af2:	2302      	movs	r3, #2
 8003af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003afc:	4618      	mov	r0, r3
 8003afe:	f003 fcb1 	bl	8007464 <HAL_RCC_OscConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003b08:	f000 f82a 	bl	8003b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b10:	2303      	movs	r3, #3
 8003b12:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b14:	2300      	movs	r3, #0
 8003b16:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8003b20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b24:	2108      	movs	r1, #8
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 ffb4 	bl	8007a94 <HAL_RCC_ClockConfig>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003b32:	f000 f815 	bl	8003b60 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8003b36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003b3a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003b40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003b44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b46:	463b      	mov	r3, r7
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f004 f993 	bl	8007e74 <HAL_RCCEx_PeriphCLKConfig>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003b54:	f000 f804 	bl	8003b60 <Error_Handler>
  }
}
 8003b58:	bf00      	nop
 8003b5a:	37a0      	adds	r7, #160	; 0xa0
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <LL_AHB2_GRP1_EnableClock>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b9c:	4907      	ldr	r1, [pc, #28]	; (8003bbc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4013      	ands	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bae:	68fb      	ldr	r3, [r7, #12]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8003bc4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003bc8:	f7ff ffe2 	bl	8003b90 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <MX_RNG_Init+0x18>)
 8003bce:	f7ff ffce 	bl	8003b6e <LL_RNG_Enable>

}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	50060800 	.word	0x50060800

08003bdc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003be2:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <MX_SPI3_Init+0x78>)
 8003be4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003be6:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003bee:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bf4:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003bf6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bfa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bfc:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c02:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c12:	2210      	movs	r2, #16
 8003c14:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c16:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c36:	2208      	movs	r2, #8
 8003c38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003c3a:	4805      	ldr	r0, [pc, #20]	; (8003c50 <MX_SPI3_Init+0x74>)
 8003c3c:	f004 fb66 	bl	800830c <HAL_SPI_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003c46:	f7ff ff8b 	bl	8003b60 <Error_Handler>
  }

}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200012e8 	.word	0x200012e8
 8003c54:	40003c00 	.word	0x40003c00

08003c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <HAL_SPI_MspInit+0x7c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d128      	bne.n	8003ccc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <HAL_SPI_MspInit+0x80>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_SPI_MspInit+0x80>)
 8003c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c84:	6593      	str	r3, [r2, #88]	; 0x58
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <HAL_SPI_MspInit+0x80>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c92:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_SPI_MspInit+0x80>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <HAL_SPI_MspInit+0x80>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <HAL_SPI_MspInit+0x80>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003caa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003cbc:	2306      	movs	r3, #6
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4805      	ldr	r0, [pc, #20]	; (8003cdc <HAL_SPI_MspInit+0x84>)
 8003cc8:	f003 f976 	bl	8006fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3728      	adds	r7, #40	; 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40003c00 	.word	0x40003c00
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	48000800 	.word	0x48000800

08003ce0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8003cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cee:	6093      	str	r3, [r2, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40007000 	.word	0x40007000

08003d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <HAL_MspInit+0x44>)
 8003d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0a:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <HAL_MspInit+0x44>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6613      	str	r3, [r2, #96]	; 0x60
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <HAL_MspInit+0x44>)
 8003d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_MspInit+0x44>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <HAL_MspInit+0x44>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_MspInit+0x44>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8003d36:	f7ff ffd3 	bl	8003ce0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000

08003d48 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4013      	ands	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d101      	bne.n	8003d62 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40010400 	.word	0x40010400

08003d74 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6153      	str	r3, [r2, #20]
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40010400 	.word	0x40010400

08003d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003da6:	e7fe      	b.n	8003da6 <HardFault_Handler+0x4>

08003da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dac:	e7fe      	b.n	8003dac <MemManage_Handler+0x4>

08003dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003db2:	e7fe      	b.n	8003db2 <BusFault_Handler+0x4>

08003db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <UsageFault_Handler+0x4>

08003dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003de8:	f000 fd76 	bl	80048d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	uint16_t interrupt_time = TIM5->CNT;
 8003df6:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <EXTI0_IRQHandler+0x40>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	4a0d      	ldr	r2, [pc, #52]	; (8003e34 <EXTI0_IRQHandler+0x44>)
 8003e00:	8812      	ldrh	r2, [r2, #0]
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e08:	dd02      	ble.n	8003e10 <EXTI0_IRQHandler+0x20>
	{
		EM_SetNewEvent(evRedBtn);
 8003e0a:	2004      	movs	r0, #4
 8003e0c:	f7fe fb24 	bl	8002458 <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8003e10:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <EXTI0_IRQHandler+0x44>)
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	8013      	strh	r3, [r2, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8003e16:	2001      	movs	r0, #1
 8003e18:	f7ff ff96 	bl	8003d48 <LL_EXTI_IsActiveFlag_0_31>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <EXTI0_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7ff ffa6 	bl	8003d74 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40000c00 	.word	0x40000c00
 8003e34:	200010f6 	.word	0x200010f6

08003e38 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	uint16_t interrupt_time = TIM5->CNT;
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <EXTI1_IRQHandler+0x40>)
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <EXTI1_IRQHandler+0x44>)
 8003e48:	8812      	ldrh	r2, [r2, #0]
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e50:	dd02      	ble.n	8003e58 <EXTI1_IRQHandler+0x20>
	{
		EM_SetNewEvent(evGreenBtn);
 8003e52:	2002      	movs	r0, #2
 8003e54:	f7fe fb00 	bl	8002458 <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8003e58:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <EXTI1_IRQHandler+0x44>)
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	8013      	strh	r3, [r2, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8003e5e:	2002      	movs	r0, #2
 8003e60:	f7ff ff72 	bl	8003d48 <LL_EXTI_IsActiveFlag_0_31>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <EXTI1_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8003e6a:	2002      	movs	r0, #2
 8003e6c:	f7ff ff82 	bl	8003d74 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	200010f6 	.word	0x200010f6

08003e80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


	uint16_t interrupt_time = TIM5->CNT;
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <EXTI2_IRQHandler+0x40>)
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <EXTI2_IRQHandler+0x44>)
 8003e90:	8812      	ldrh	r2, [r2, #0]
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e98:	dd02      	ble.n	8003ea0 <EXTI2_IRQHandler+0x20>
	{
		EM_SetNewEvent(evEncoderPush);
 8003e9a:	2006      	movs	r0, #6
 8003e9c:	f7fe fadc 	bl	8002458 <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8003ea0:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <EXTI2_IRQHandler+0x44>)
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	8013      	strh	r3, [r2, #0]


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8003ea6:	2004      	movs	r0, #4
 8003ea8:	f7ff ff4e 	bl	8003d48 <LL_EXTI_IsActiveFlag_0_31>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <EXTI2_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8003eb2:	2004      	movs	r0, #4
 8003eb4:	f7ff ff5e 	bl	8003d74 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	200010f6 	.word	0x200010f6

08003ec8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <DMA1_Channel1_IRQHandler+0x10>)
 8003ece:	f002 ff23 	bl	8006d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000117c 	.word	0x2000117c

08003edc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003ee0:	4802      	ldr	r0, [pc, #8]	; (8003eec <DMA1_Channel2_IRQHandler+0x10>)
 8003ee2:	f002 ff19 	bl	8006d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20001228 	.word	0x20001228

08003ef0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <DMA1_Channel3_IRQHandler+0x10>)
 8003ef6:	f002 ff0f 	bl	8006d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20001288 	.word	0x20001288

08003f04 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8003f08:	f7fc fa06 	bl	8000318 <DM_UpdateDisplay>
	//DM_TestScreen();

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	4a0d      	ldr	r2, [pc, #52]	; (8003f48 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8003f12:	8812      	ldrh	r2, [r2, #0]
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d305      	bcc.n	8003f24 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8003f1e:	8812      	ldrh	r2, [r2, #0]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d902      	bls.n	8003f2a <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8003f24:	2005      	movs	r0, #5
 8003f26:	f7fe fa97 	bl	8002458 <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8003f32:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f34:	4805      	ldr	r0, [pc, #20]	; (8003f4c <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8003f36:	f004 fe8e 	bl	8008c56 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003f3a:	4805      	ldr	r0, [pc, #20]	; (8003f50 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8003f3c:	f004 fe8b 	bl	8008c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	200010f4 	.word	0x200010f4
 8003f4c:	2000147c 	.word	0x2000147c
 8003f50:	20001398 	.word	0x20001398

08003f54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8003f58:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f60:	4805      	ldr	r0, [pc, #20]	; (8003f78 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8003f62:	f004 fe78 	bl	8008c56 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003f66:	4805      	ldr	r0, [pc, #20]	; (8003f7c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8003f68:	f004 fe75 	bl	8008c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003f6c:	bf00      	nop
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20001104 	.word	0x20001104
 8003f74:	0800c368 	.word	0x0800c368
 8003f78:	2000147c 	.word	0x2000147c
 8003f7c:	20001514 	.word	0x20001514

08003f80 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8003f84:	f7ff f926 	bl	80031d4 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f88:	4803      	ldr	r0, [pc, #12]	; (8003f98 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003f8a:	f004 fe64 	bl	8008c56 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8003f8e:	4803      	ldr	r0, [pc, #12]	; (8003f9c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8003f90:	f004 fe61 	bl	8008c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	2000147c 	.word	0x2000147c
 8003f9c:	200013e4 	.word	0x200013e4

08003fa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003fa4:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <TIM2_IRQHandler+0x10>)
 8003fa6:	f004 fe56 	bl	8008c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	200014c8 	.word	0x200014c8

08003fb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8003fb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fbc:	4815      	ldr	r0, [pc, #84]	; (8004014 <EXTI15_10_IRQHandler+0x60>)
 8003fbe:	f003 f97d 	bl	80072bc <HAL_GPIO_ReadPin>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <EXTI15_10_IRQHandler+0x1a>
	{
//		uint16_t interrupt_time = TIM5->CNT;
//		if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
//		{
			EM_SetNewEvent(evYellowBtn);
 8003fc8:	2003      	movs	r0, #3
 8003fca:	f7fe fa45 	bl	8002458 <EM_SetNewEvent>
//		}
//		last_interrupt_time = interrupt_time;
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8003fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fd2:	4810      	ldr	r0, [pc, #64]	; (8004014 <EXTI15_10_IRQHandler+0x60>)
 8003fd4:	f003 f972 	bl	80072bc <HAL_GPIO_ReadPin>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <EXTI15_10_IRQHandler+0x30>
	{
//		uint16_t interrupt_time = TIM5->CNT;
//		if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
//		{
			EM_SetNewEvent(evBlueBtn);
 8003fde:	2001      	movs	r0, #1
 8003fe0:	f7fe fa3a 	bl	8002458 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8003fe4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003fe8:	f7ff feae 	bl	8003d48 <LL_EXTI_IsActiveFlag_0_31>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8003ff2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ff6:	f7ff febd 	bl	8003d74 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8003ffa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ffe:	f7ff fea3 	bl	8003d48 <LL_EXTI_IsActiveFlag_0_31>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8004008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800400c:	f7ff feb2 	bl	8003d74 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	48000800 	.word	0x48000800

08004018 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e00a      	b.n	8004040 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800402a:	f3af 8000 	nop.w
 800402e:	4601      	mov	r1, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	60ba      	str	r2, [r7, #8]
 8004036:	b2ca      	uxtb	r2, r1
 8004038:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3301      	adds	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	dbf0      	blt.n	800402a <_read+0x12>
	}

return len;
 8004048:	687b      	ldr	r3, [r7, #4]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
	return -1;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800407a:	605a      	str	r2, [r3, #4]
	return 0;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_isatty>:

int _isatty(int file)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
	return 1;
 8004092:	2301      	movs	r3, #1
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
	return 0;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <_sbrk+0x50>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <_sbrk+0x16>
		heap_end = &end;
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <_sbrk+0x50>)
 80040ce:	4a10      	ldr	r2, [pc, #64]	; (8004110 <_sbrk+0x54>)
 80040d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80040d2:	4b0e      	ldr	r3, [pc, #56]	; (800410c <_sbrk+0x50>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <_sbrk+0x50>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	466a      	mov	r2, sp
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d907      	bls.n	80040f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80040e6:	f006 ff23 	bl	800af30 <__errno>
 80040ea:	4602      	mov	r2, r0
 80040ec:	230c      	movs	r3, #12
 80040ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f4:	e006      	b.n	8004104 <_sbrk+0x48>
	}

	heap_end += incr;
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <_sbrk+0x50>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	4a03      	ldr	r2, [pc, #12]	; (800410c <_sbrk+0x50>)
 8004100:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	200010f8 	.word	0x200010f8
 8004110:	20001568 	.word	0x20001568

08004114 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <SystemInit+0x28>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <SystemInit+0x28>)
 8004120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <SystemInit+0x28>)
 800412a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800412e:	609a      	str	r2, [r3, #8]
#endif
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b09a      	sub	sp, #104	; 0x68
 8004144:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004146:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800414a:	2224      	movs	r2, #36	; 0x24
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f006 ff18 	bl	800af84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004154:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	2234      	movs	r2, #52	; 0x34
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f006 ff0c 	bl	800af84 <memset>

  htim1.Instance = TIM1;
 800416c:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <MX_TIM1_Init+0xd8>)
 800416e:	4a2b      	ldr	r2, [pc, #172]	; (800421c <MX_TIM1_Init+0xdc>)
 8004170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004172:	4b29      	ldr	r3, [pc, #164]	; (8004218 <MX_TIM1_Init+0xd8>)
 8004174:	2200      	movs	r2, #0
 8004176:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8004178:	4b27      	ldr	r3, [pc, #156]	; (8004218 <MX_TIM1_Init+0xd8>)
 800417a:	2240      	movs	r2, #64	; 0x40
 800417c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800417e:	4b26      	ldr	r3, [pc, #152]	; (8004218 <MX_TIM1_Init+0xd8>)
 8004180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004184:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004186:	4b24      	ldr	r3, [pc, #144]	; (8004218 <MX_TIM1_Init+0xd8>)
 8004188:	2200      	movs	r2, #0
 800418a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <MX_TIM1_Init+0xd8>)
 800418e:	2200      	movs	r2, #0
 8004190:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004192:	4b21      	ldr	r3, [pc, #132]	; (8004218 <MX_TIM1_Init+0xd8>)
 8004194:	2200      	movs	r2, #0
 8004196:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004198:	2303      	movs	r3, #3
 800419a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800419c:	2300      	movs	r3, #0
 800419e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80041a0:	2301      	movs	r3, #1
 80041a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80041a4:	2300      	movs	r3, #0
 80041a6:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80041ac:	2300      	movs	r3, #0
 80041ae:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80041b0:	2301      	movs	r3, #1
 80041b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80041b4:	2300      	movs	r3, #0
 80041b6:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80041bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041c0:	4619      	mov	r1, r3
 80041c2:	4815      	ldr	r0, [pc, #84]	; (8004218 <MX_TIM1_Init+0xd8>)
 80041c4:	f004 fca1 	bl	8008b0a <HAL_TIM_Encoder_Init>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80041ce:	f7ff fcc7 	bl	8003b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041e2:	4619      	mov	r1, r3
 80041e4:	480c      	ldr	r0, [pc, #48]	; (8004218 <MX_TIM1_Init+0xd8>)
 80041e6:	f005 fa19 	bl	800961c <HAL_TIMEx_MasterConfigSynchronization>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80041f0:	f7ff fcb6 	bl	8003b60 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80041f4:	2300      	movs	r3, #0
 80041f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80041f8:	2300      	movs	r3, #0
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4805      	ldr	r0, [pc, #20]	; (8004218 <MX_TIM1_Init+0xd8>)
 8004202:	f005 faa1 	bl	8009748 <HAL_TIMEx_ConfigBreakDeadTime>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800420c:	f7ff fca8 	bl	8003b60 <Error_Handler>
  }

}
 8004210:	bf00      	nop
 8004212:	3768      	adds	r7, #104	; 0x68
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	2000147c 	.word	0x2000147c
 800421c:	40012c00 	.word	0x40012c00

08004220 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08c      	sub	sp, #48	; 0x30
 8004224:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004226:	f107 0320 	add.w	r3, r7, #32
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	609a      	str	r2, [r3, #8]
 8004232:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004234:	f107 030c 	add.w	r3, r7, #12
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004244:	463b      	mov	r3, r7
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800424e:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <MX_TIM2_Init+0xd0>)
 8004250:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004254:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <MX_TIM2_Init+0xd0>)
 8004258:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800425c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <MX_TIM2_Init+0xd0>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8004264:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <MX_TIM2_Init+0xd0>)
 8004266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800426a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426c:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <MX_TIM2_Init+0xd0>)
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <MX_TIM2_Init+0xd0>)
 8004274:	2200      	movs	r2, #0
 8004276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004278:	481d      	ldr	r0, [pc, #116]	; (80042f0 <MX_TIM2_Init+0xd0>)
 800427a:	f004 fb5c 	bl	8008936 <HAL_TIM_Base_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004284:	f7ff fc6c 	bl	8003b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800428c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800428e:	f107 0320 	add.w	r3, r7, #32
 8004292:	4619      	mov	r1, r3
 8004294:	4816      	ldr	r0, [pc, #88]	; (80042f0 <MX_TIM2_Init+0xd0>)
 8004296:	f004 fe5d 	bl	8008f54 <HAL_TIM_ConfigClockSource>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80042a0:	f7ff fc5e 	bl	8003b60 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80042a4:	2305      	movs	r3, #5
 80042a6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80042a8:	2350      	movs	r3, #80	; 0x50
 80042aa:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	4619      	mov	r1, r3
 80042ba:	480d      	ldr	r0, [pc, #52]	; (80042f0 <MX_TIM2_Init+0xd0>)
 80042bc:	f004 ff3a 	bl	8009134 <HAL_TIM_SlaveConfigSynchro>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80042c6:	f7ff fc4b 	bl	8003b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ca:	2300      	movs	r3, #0
 80042cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042d2:	463b      	mov	r3, r7
 80042d4:	4619      	mov	r1, r3
 80042d6:	4806      	ldr	r0, [pc, #24]	; (80042f0 <MX_TIM2_Init+0xd0>)
 80042d8:	f005 f9a0 	bl	800961c <HAL_TIMEx_MasterConfigSynchronization>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80042e2:	f7ff fc3d 	bl	8003b60 <Error_Handler>
  }

}
 80042e6:	bf00      	nop
 80042e8:	3730      	adds	r7, #48	; 0x30
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200014c8 	.word	0x200014c8

080042f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042fa:	f107 0310 	add.w	r3, r7, #16
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <MX_TIM5_Init+0x98>)
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <MX_TIM5_Init+0x9c>)
 8004316:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <MX_TIM5_Init+0x98>)
 800431a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800431e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <MX_TIM5_Init+0x98>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004326:	4b19      	ldr	r3, [pc, #100]	; (800438c <MX_TIM5_Init+0x98>)
 8004328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800432c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800432e:	4b17      	ldr	r3, [pc, #92]	; (800438c <MX_TIM5_Init+0x98>)
 8004330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004334:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <MX_TIM5_Init+0x98>)
 8004338:	2200      	movs	r2, #0
 800433a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800433c:	4813      	ldr	r0, [pc, #76]	; (800438c <MX_TIM5_Init+0x98>)
 800433e:	f004 fafa 	bl	8008936 <HAL_TIM_Base_Init>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8004348:	f7ff fc0a 	bl	8003b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800434c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004350:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004352:	f107 0310 	add.w	r3, r7, #16
 8004356:	4619      	mov	r1, r3
 8004358:	480c      	ldr	r0, [pc, #48]	; (800438c <MX_TIM5_Init+0x98>)
 800435a:	f004 fdfb 	bl	8008f54 <HAL_TIM_ConfigClockSource>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8004364:	f7ff fbfc 	bl	8003b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004368:	2300      	movs	r3, #0
 800436a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4805      	ldr	r0, [pc, #20]	; (800438c <MX_TIM5_Init+0x98>)
 8004376:	f005 f951 	bl	800961c <HAL_TIMEx_MasterConfigSynchronization>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8004380:	f7ff fbee 	bl	8003b60 <Error_Handler>
  }

}
 8004384:	bf00      	nop
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20001430 	.word	0x20001430
 8004390:	40000c00 	.word	0x40000c00

08004394 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b094      	sub	sp, #80	; 0x50
 8004398:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800439a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043b4:	463b      	mov	r3, r7
 80043b6:	2234      	movs	r2, #52	; 0x34
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f006 fde2 	bl	800af84 <memset>

  htim8.Instance = TIM8;
 80043c0:	4b26      	ldr	r3, [pc, #152]	; (800445c <MX_TIM8_Init+0xc8>)
 80043c2:	4a27      	ldr	r2, [pc, #156]	; (8004460 <MX_TIM8_Init+0xcc>)
 80043c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80043c6:	4b25      	ldr	r3, [pc, #148]	; (800445c <MX_TIM8_Init+0xc8>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043cc:	4b23      	ldr	r3, [pc, #140]	; (800445c <MX_TIM8_Init+0xc8>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80043d2:	4b22      	ldr	r3, [pc, #136]	; (800445c <MX_TIM8_Init+0xc8>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <MX_TIM8_Init+0xc8>)
 80043da:	2200      	movs	r2, #0
 80043dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80043de:	4b1f      	ldr	r3, [pc, #124]	; (800445c <MX_TIM8_Init+0xc8>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <MX_TIM8_Init+0xc8>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80043ea:	481c      	ldr	r0, [pc, #112]	; (800445c <MX_TIM8_Init+0xc8>)
 80043ec:	f004 faa3 	bl	8008936 <HAL_TIM_Base_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80043f6:	f7ff fbb3 	bl	8003b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043fe:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004400:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004404:	4619      	mov	r1, r3
 8004406:	4815      	ldr	r0, [pc, #84]	; (800445c <MX_TIM8_Init+0xc8>)
 8004408:	f004 fda4 	bl	8008f54 <HAL_TIM_ConfigClockSource>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004412:	f7ff fba5 	bl	8003b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004416:	2320      	movs	r3, #32
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004422:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004426:	4619      	mov	r1, r3
 8004428:	480c      	ldr	r0, [pc, #48]	; (800445c <MX_TIM8_Init+0xc8>)
 800442a:	f005 f8f7 	bl	800961c <HAL_TIMEx_MasterConfigSynchronization>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8004434:	f7ff fb94 	bl	8003b60 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800443c:	2300      	movs	r3, #0
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004440:	463b      	mov	r3, r7
 8004442:	4619      	mov	r1, r3
 8004444:	4805      	ldr	r0, [pc, #20]	; (800445c <MX_TIM8_Init+0xc8>)
 8004446:	f005 f97f 	bl	8009748 <HAL_TIMEx_ConfigBreakDeadTime>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8004450:	f7ff fb86 	bl	8003b60 <Error_Handler>
  }

}
 8004454:	bf00      	nop
 8004456:	3750      	adds	r7, #80	; 0x50
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	2000134c 	.word	0x2000134c
 8004460:	40013400 	.word	0x40013400

08004464 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800446a:	f107 0310 	add.w	r3, r7, #16
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	605a      	str	r2, [r3, #4]
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8004482:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <MX_TIM15_Init+0x9c>)
 8004484:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <MX_TIM15_Init+0xa0>)
 8004486:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <MX_TIM15_Init+0x9c>)
 800448a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800448e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <MX_TIM15_Init+0x9c>)
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <MX_TIM15_Init+0x9c>)
 8004498:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800449c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800449e:	4b18      	ldr	r3, [pc, #96]	; (8004500 <MX_TIM15_Init+0x9c>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <MX_TIM15_Init+0x9c>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <MX_TIM15_Init+0x9c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80044b0:	4813      	ldr	r0, [pc, #76]	; (8004500 <MX_TIM15_Init+0x9c>)
 80044b2:	f004 fa40 	bl	8008936 <HAL_TIM_Base_Init>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80044bc:	f7ff fb50 	bl	8003b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80044c6:	f107 0310 	add.w	r3, r7, #16
 80044ca:	4619      	mov	r1, r3
 80044cc:	480c      	ldr	r0, [pc, #48]	; (8004500 <MX_TIM15_Init+0x9c>)
 80044ce:	f004 fd41 	bl	8008f54 <HAL_TIM_ConfigClockSource>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80044d8:	f7ff fb42 	bl	8003b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	4805      	ldr	r0, [pc, #20]	; (8004500 <MX_TIM15_Init+0x9c>)
 80044ea:	f005 f897 	bl	800961c <HAL_TIMEx_MasterConfigSynchronization>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80044f4:	f7ff fb34 	bl	8003b60 <Error_Handler>
  }

}
 80044f8:	bf00      	nop
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20001398 	.word	0x20001398
 8004504:	40014000 	.word	0x40014000

08004508 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <MX_TIM16_Init+0x44>)
 800450e:	4a10      	ldr	r2, [pc, #64]	; (8004550 <MX_TIM16_Init+0x48>)
 8004510:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8004512:	4b0e      	ldr	r3, [pc, #56]	; (800454c <MX_TIM16_Init+0x44>)
 8004514:	2200      	movs	r2, #0
 8004516:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <MX_TIM16_Init+0x44>)
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <MX_TIM16_Init+0x44>)
 8004520:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004524:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <MX_TIM16_Init+0x44>)
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <MX_TIM16_Init+0x44>)
 800452e:	2200      	movs	r2, #0
 8004530:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <MX_TIM16_Init+0x44>)
 8004534:	2200      	movs	r2, #0
 8004536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004538:	4804      	ldr	r0, [pc, #16]	; (800454c <MX_TIM16_Init+0x44>)
 800453a:	f004 f9fc 	bl	8008936 <HAL_TIM_Base_Init>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004544:	f7ff fb0c 	bl	8003b60 <Error_Handler>
  }

}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20001514 	.word	0x20001514
 8004550:	40014400 	.word	0x40014400

08004554 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <MX_TIM17_Init+0x44>)
 800455a:	4a10      	ldr	r2, [pc, #64]	; (800459c <MX_TIM17_Init+0x48>)
 800455c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <MX_TIM17_Init+0x44>)
 8004560:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004564:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <MX_TIM17_Init+0x44>)
 8004568:	2200      	movs	r2, #0
 800456a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <MX_TIM17_Init+0x44>)
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <MX_TIM17_Init+0x44>)
 8004574:	2200      	movs	r2, #0
 8004576:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004578:	4b07      	ldr	r3, [pc, #28]	; (8004598 <MX_TIM17_Init+0x44>)
 800457a:	2200      	movs	r2, #0
 800457c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <MX_TIM17_Init+0x44>)
 8004580:	2200      	movs	r2, #0
 8004582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004584:	4804      	ldr	r0, [pc, #16]	; (8004598 <MX_TIM17_Init+0x44>)
 8004586:	f004 f9d6 	bl	8008936 <HAL_TIM_Base_Init>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8004590:	f7ff fae6 	bl	8003b60 <Error_Handler>
  }

}
 8004594:	bf00      	nop
 8004596:	bd80      	pop	{r7, pc}
 8004598:	200013e4 	.word	0x200013e4
 800459c:	40014800 	.word	0x40014800

080045a0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 0314 	add.w	r3, r7, #20
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a23      	ldr	r2, [pc, #140]	; (800464c <HAL_TIM_Encoder_MspInit+0xac>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d13f      	bne.n	8004642 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_TIM_Encoder_MspInit+0xb0>)
 80045c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c6:	4a22      	ldr	r2, [pc, #136]	; (8004650 <HAL_TIM_Encoder_MspInit+0xb0>)
 80045c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045cc:	6613      	str	r3, [r2, #96]	; 0x60
 80045ce:	4b20      	ldr	r3, [pc, #128]	; (8004650 <HAL_TIM_Encoder_MspInit+0xb0>)
 80045d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_TIM_Encoder_MspInit+0xb0>)
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <HAL_TIM_Encoder_MspInit+0xb0>)
 80045e0:	f043 0304 	orr.w	r3, r3, #4
 80045e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <HAL_TIM_Encoder_MspInit+0xb0>)
 80045e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045f2:	2303      	movs	r3, #3
 80045f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fe:	2300      	movs	r3, #0
 8004600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004602:	2302      	movs	r3, #2
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004606:	f107 0314 	add.w	r3, r7, #20
 800460a:	4619      	mov	r1, r3
 800460c:	4811      	ldr	r0, [pc, #68]	; (8004654 <HAL_TIM_Encoder_MspInit+0xb4>)
 800460e:	f002 fcd3 	bl	8006fb8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004612:	2200      	movs	r2, #0
 8004614:	2100      	movs	r1, #0
 8004616:	2018      	movs	r0, #24
 8004618:	f001 fdb9 	bl	800618e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800461c:	2018      	movs	r0, #24
 800461e:	f001 fdd0 	bl	80061c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004622:	2200      	movs	r2, #0
 8004624:	2101      	movs	r1, #1
 8004626:	2019      	movs	r0, #25
 8004628:	f001 fdb1 	bl	800618e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800462c:	2019      	movs	r0, #25
 800462e:	f001 fdc8 	bl	80061c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	2101      	movs	r1, #1
 8004636:	201a      	movs	r0, #26
 8004638:	f001 fda9 	bl	800618e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800463c:	201a      	movs	r0, #26
 800463e:	f001 fdc0 	bl	80061c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004642:	bf00      	nop
 8004644:	3728      	adds	r7, #40	; 0x28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40021000 	.word	0x40021000
 8004654:	48000800 	.word	0x48000800

08004658 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08e      	sub	sp, #56	; 0x38
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004678:	d131      	bne.n	80046de <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800467a:	4b53      	ldr	r3, [pc, #332]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	4a52      	ldr	r2, [pc, #328]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6593      	str	r3, [r2, #88]	; 0x58
 8004686:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	4a4c      	ldr	r2, [pc, #304]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800469e:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046aa:	2301      	movs	r3, #1
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ae:	2302      	movs	r3, #2
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b6:	2300      	movs	r3, #0
 80046b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046ba:	2301      	movs	r3, #1
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046c2:	4619      	mov	r1, r3
 80046c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046c8:	f002 fc76 	bl	8006fb8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80046cc:	2200      	movs	r2, #0
 80046ce:	2101      	movs	r1, #1
 80046d0:	201c      	movs	r0, #28
 80046d2:	f001 fd5c 	bl	800618e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046d6:	201c      	movs	r0, #28
 80046d8:	f001 fd73 	bl	80061c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80046dc:	e070      	b.n	80047c0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3a      	ldr	r2, [pc, #232]	; (80047cc <HAL_TIM_Base_MspInit+0x174>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10c      	bne.n	8004702 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80046e8:	4b37      	ldr	r3, [pc, #220]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	4a36      	ldr	r2, [pc, #216]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 80046ee:	f043 0308 	orr.w	r3, r3, #8
 80046f2:	6593      	str	r3, [r2, #88]	; 0x58
 80046f4:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	69bb      	ldr	r3, [r7, #24]
}
 8004700:	e05e      	b.n	80047c0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a32      	ldr	r2, [pc, #200]	; (80047d0 <HAL_TIM_Base_MspInit+0x178>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d10c      	bne.n	8004726 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 800470e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004710:	4a2d      	ldr	r2, [pc, #180]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 8004712:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004716:	6613      	str	r3, [r2, #96]	; 0x60
 8004718:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 800471a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	697b      	ldr	r3, [r7, #20]
}
 8004724:	e04c      	b.n	80047c0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2a      	ldr	r2, [pc, #168]	; (80047d4 <HAL_TIM_Base_MspInit+0x17c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d114      	bne.n	800475a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004730:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 8004732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004734:	4a24      	ldr	r2, [pc, #144]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 8004736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473a:	6613      	str	r3, [r2, #96]	; 0x60
 800473c:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 800473e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	2018      	movs	r0, #24
 800474e:	f001 fd1e 	bl	800618e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004752:	2018      	movs	r0, #24
 8004754:	f001 fd35 	bl	80061c2 <HAL_NVIC_EnableIRQ>
}
 8004758:	e032      	b.n	80047c0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <HAL_TIM_Base_MspInit+0x180>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d114      	bne.n	800478e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004764:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	4a17      	ldr	r2, [pc, #92]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 800476a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476e:	6613      	str	r3, [r2, #96]	; 0x60
 8004770:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 8004772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800477c:	2200      	movs	r2, #0
 800477e:	2101      	movs	r1, #1
 8004780:	2019      	movs	r0, #25
 8004782:	f001 fd04 	bl	800618e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004786:	2019      	movs	r0, #25
 8004788:	f001 fd1b 	bl	80061c2 <HAL_NVIC_EnableIRQ>
}
 800478c:	e018      	b.n	80047c0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a12      	ldr	r2, [pc, #72]	; (80047dc <HAL_TIM_Base_MspInit+0x184>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d113      	bne.n	80047c0 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 800479e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a2:	6613      	str	r3, [r2, #96]	; 0x60
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <HAL_TIM_Base_MspInit+0x170>)
 80047a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	2101      	movs	r1, #1
 80047b4:	201a      	movs	r0, #26
 80047b6:	f001 fcea 	bl	800618e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80047ba:	201a      	movs	r0, #26
 80047bc:	f001 fd01 	bl	80061c2 <HAL_NVIC_EnableIRQ>
}
 80047c0:	bf00      	nop
 80047c2:	3738      	adds	r7, #56	; 0x38
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	40013400 	.word	0x40013400
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800

080047e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047e0:	480d      	ldr	r0, [pc, #52]	; (8004818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047e4:	480d      	ldr	r0, [pc, #52]	; (800481c <LoopForever+0x6>)
  ldr r1, =_edata
 80047e6:	490e      	ldr	r1, [pc, #56]	; (8004820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047e8:	4a0e      	ldr	r2, [pc, #56]	; (8004824 <LoopForever+0xe>)
  movs r3, #0
 80047ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80047ec:	e002      	b.n	80047f4 <LoopCopyDataInit>

080047ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047f2:	3304      	adds	r3, #4

080047f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047f8:	d3f9      	bcc.n	80047ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047fa:	4a0b      	ldr	r2, [pc, #44]	; (8004828 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047fc:	4c0b      	ldr	r4, [pc, #44]	; (800482c <LoopForever+0x16>)
  movs r3, #0
 80047fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004800:	e001      	b.n	8004806 <LoopFillZerobss>

08004802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004804:	3204      	adds	r2, #4

08004806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004808:	d3fb      	bcc.n	8004802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800480a:	f7ff fc83 	bl	8004114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800480e:	f006 fb95 	bl	800af3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004812:	f7ff f88b 	bl	800392c <main>

08004816 <LoopForever>:

LoopForever:
    b LoopForever
 8004816:	e7fe      	b.n	8004816 <LoopForever>
  ldr   r0, =_estack
 8004818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800481c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004820:	200010c8 	.word	0x200010c8
  ldr r2, =_sidata
 8004824:	0800c65c 	.word	0x0800c65c
  ldr r2, =_sbss
 8004828:	200010c8 	.word	0x200010c8
  ldr r4, =_ebss
 800482c:	20001568 	.word	0x20001568

08004830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004830:	e7fe      	b.n	8004830 <ADC1_2_IRQHandler>

08004832 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800483c:	2003      	movs	r0, #3
 800483e:	f001 fc9b 	bl	8006178 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004842:	2000      	movs	r0, #0
 8004844:	f000 f80e 	bl	8004864 <HAL_InitTick>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	71fb      	strb	r3, [r7, #7]
 8004852:	e001      	b.n	8004858 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004854:	f7ff fa54 	bl	8003d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004858:	79fb      	ldrb	r3, [r7, #7]

}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004870:	4b16      	ldr	r3, [pc, #88]	; (80048cc <HAL_InitTick+0x68>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d022      	beq.n	80048be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004878:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <HAL_InitTick+0x6c>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <HAL_InitTick+0x68>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004884:	fbb1 f3f3 	udiv	r3, r1, r3
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	4618      	mov	r0, r3
 800488e:	f001 fca6 	bl	80061de <HAL_SYSTICK_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10f      	bne.n	80048b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b0f      	cmp	r3, #15
 800489c:	d809      	bhi.n	80048b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800489e:	2200      	movs	r2, #0
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a6:	f001 fc72 	bl	800618e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80048aa:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <HAL_InitTick+0x70>)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	e007      	b.n	80048c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
 80048b6:	e004      	b.n	80048c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
 80048bc:	e001      	b.n	80048c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000018 	.word	0x20000018
 80048d0:	20000010 	.word	0x20000010
 80048d4:	20000014 	.word	0x20000014

080048d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_IncTick+0x1c>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_IncTick+0x20>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	4a03      	ldr	r2, [pc, #12]	; (80048f4 <HAL_IncTick+0x1c>)
 80048e8:	6013      	str	r3, [r2, #0]
}
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20001560 	.word	0x20001560
 80048f8:	20000018 	.word	0x20000018

080048fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <HAL_GetTick+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20001560 	.word	0x20001560

08004914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800491c:	f7ff ffee 	bl	80048fc <HAL_GetTick>
 8004920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800492c:	d004      	beq.n	8004938 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_Delay+0x40>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004938:	bf00      	nop
 800493a:	f7ff ffdf 	bl	80048fc <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	429a      	cmp	r2, r3
 8004948:	d8f7      	bhi.n	800493a <HAL_Delay+0x26>
  {
  }
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000018 	.word	0x20000018

08004958 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	609a      	str	r2, [r3, #8]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	609a      	str	r2, [r3, #8]
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80049c0:	b490      	push	{r4, r7}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3360      	adds	r3, #96	; 0x60
 80049d2:	461a      	mov	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <LL_ADC_SetOffset+0x40>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049f2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc90      	pop	{r4, r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	03fff000 	.word	0x03fff000

08004a04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a04:	b490      	push	{r4, r7}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3360      	adds	r3, #96	; 0x60
 8004a12:	461a      	mov	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc90      	pop	{r4, r7}
 8004a2a:	4770      	bx	lr

08004a2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a2c:	b490      	push	{r4, r7}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3360      	adds	r3, #96	; 0x60
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc90      	pop	{r4, r7}
 8004a5a:	4770      	bx	lr

08004a5c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004a5c:	b490      	push	{r4, r7}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3360      	adds	r3, #96	; 0x60
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc90      	pop	{r4, r7}
 8004a8a:	4770      	bx	lr

08004a8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004a8c:	b490      	push	{r4, r7}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3360      	adds	r3, #96	; 0x60
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc90      	pop	{r4, r7}
 8004aba:	4770      	bx	lr

08004abc <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	615a      	str	r2, [r3, #20]
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ae2:	b490      	push	{r4, r7}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3330      	adds	r3, #48	; 0x30
 8004af2:	461a      	mov	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	4413      	add	r3, r2
 8004b00:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	211f      	movs	r1, #31
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	401a      	ands	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	0e9b      	lsrs	r3, r3, #26
 8004b18:	f003 011f 	and.w	r1, r3, #31
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc90      	pop	{r4, r7}
 8004b32:	4770      	bx	lr

08004b34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b34:	b490      	push	{r4, r7}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3314      	adds	r3, #20
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	0e5b      	lsrs	r3, r3, #25
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	4413      	add	r3, r2
 8004b52:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004b54:	6822      	ldr	r2, [r4, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	0d1b      	lsrs	r3, r3, #20
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2107      	movs	r1, #7
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	0d1b      	lsrs	r3, r3, #20
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	fa01 f303 	lsl.w	r3, r1, r3
 8004b76:	4313      	orrs	r3, r2
 8004b78:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc90      	pop	{r4, r7}
 8004b82:	4770      	bx	lr

08004b84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f003 0318 	and.w	r3, r3, #24
 8004ba6:	4908      	ldr	r1, [pc, #32]	; (8004bc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ba8:	40d9      	lsrs	r1, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	400b      	ands	r3, r1
 8004bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	0007ffff 	.word	0x0007ffff

08004bcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004bdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6093      	str	r3, [r2, #8]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c04:	d101      	bne.n	8004c0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004c28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c54:	d101      	bne.n	8004c5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <LL_ADC_IsEnabled+0x18>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <LL_ADC_IsEnabled+0x1a>
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d101      	bne.n	8004ca6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d101      	bne.n	8004ccc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b089      	sub	sp, #36	; 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e1ad      	b.n	8005052 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fe f817 	bl	8002d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ff67 	bl	8004bf0 <LL_ADC_IsDeepPowerDownEnabled>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff4d 	bl	8004bcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ff82 	bl	8004c40 <LL_ADC_IsInternalRegulatorEnabled>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d113      	bne.n	8004d6a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff66 	bl	8004c18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004d4c:	4b9e      	ldr	r3, [pc, #632]	; (8004fc8 <HAL_ADC_Init+0x2ec>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	099b      	lsrs	r3, r3, #6
 8004d52:	4a9e      	ldr	r2, [pc, #632]	; (8004fcc <HAL_ADC_Init+0x2f0>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	099b      	lsrs	r3, r3, #6
 8004d5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d5c:	e002      	b.n	8004d64 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f9      	bne.n	8004d5e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff ff66 	bl	8004c40 <LL_ADC_IsInternalRegulatorEnabled>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10d      	bne.n	8004d96 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	f043 0210 	orr.w	r2, r3, #16
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8a:	f043 0201 	orr.w	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ff77 	bl	8004c8e <LL_ADC_REG_IsConversionOngoing>
 8004da0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f040 8148 	bne.w	8005040 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f040 8144 	bne.w	8005040 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004dc0:	f043 0202 	orr.w	r2, r3, #2
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ff4b 	bl	8004c68 <LL_ADC_IsEnabled>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d141      	bne.n	8004e5c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de0:	d004      	beq.n	8004dec <HAL_ADC_Init+0x110>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a7a      	ldr	r2, [pc, #488]	; (8004fd0 <HAL_ADC_Init+0x2f4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d10f      	bne.n	8004e0c <HAL_ADC_Init+0x130>
 8004dec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004df0:	f7ff ff3a 	bl	8004c68 <LL_ADC_IsEnabled>
 8004df4:	4604      	mov	r4, r0
 8004df6:	4876      	ldr	r0, [pc, #472]	; (8004fd0 <HAL_ADC_Init+0x2f4>)
 8004df8:	f7ff ff36 	bl	8004c68 <LL_ADC_IsEnabled>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4323      	orrs	r3, r4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e012      	b.n	8004e32 <HAL_ADC_Init+0x156>
 8004e0c:	4871      	ldr	r0, [pc, #452]	; (8004fd4 <HAL_ADC_Init+0x2f8>)
 8004e0e:	f7ff ff2b 	bl	8004c68 <LL_ADC_IsEnabled>
 8004e12:	4604      	mov	r4, r0
 8004e14:	4870      	ldr	r0, [pc, #448]	; (8004fd8 <HAL_ADC_Init+0x2fc>)
 8004e16:	f7ff ff27 	bl	8004c68 <LL_ADC_IsEnabled>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	431c      	orrs	r4, r3
 8004e1e:	486f      	ldr	r0, [pc, #444]	; (8004fdc <HAL_ADC_Init+0x300>)
 8004e20:	f7ff ff22 	bl	8004c68 <LL_ADC_IsEnabled>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4323      	orrs	r3, r4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e3e:	d004      	beq.n	8004e4a <HAL_ADC_Init+0x16e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a62      	ldr	r2, [pc, #392]	; (8004fd0 <HAL_ADC_Init+0x2f4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d101      	bne.n	8004e4e <HAL_ADC_Init+0x172>
 8004e4a:	4a65      	ldr	r2, [pc, #404]	; (8004fe0 <HAL_ADC_Init+0x304>)
 8004e4c:	e000      	b.n	8004e50 <HAL_ADC_Init+0x174>
 8004e4e:	4a65      	ldr	r2, [pc, #404]	; (8004fe4 <HAL_ADC_Init+0x308>)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f7ff fd7e 	bl	8004958 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7f5b      	ldrb	r3, [r3, #29]
 8004e60:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e66:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004e6c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004e72:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e7a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d106      	bne.n	8004e98 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	045b      	lsls	r3, r3, #17
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	4b4b      	ldr	r3, [pc, #300]	; (8004fe8 <HAL_ADC_Init+0x30c>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	69b9      	ldr	r1, [r7, #24]
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fed3 	bl	8004c8e <LL_ADC_REG_IsConversionOngoing>
 8004ee8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fee0 	bl	8004cb4 <LL_ADC_INJ_IsConversionOngoing>
 8004ef4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d17f      	bne.n	8004ffc <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d17c      	bne.n	8004ffc <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f06:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f0e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1e:	f023 0302 	bic.w	r3, r3, #2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	69b9      	ldr	r1, [r7, #24]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d017      	beq.n	8004f64 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f4c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6911      	ldr	r1, [r2, #16]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004f62:	e013      	b.n	8004f8c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f88:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d12a      	bne.n	8004fec <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fac:	4311      	orrs	r1, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004fb2:	4311      	orrs	r1, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	611a      	str	r2, [r3, #16]
 8004fc6:	e019      	b.n	8004ffc <HAL_ADC_Init+0x320>
 8004fc8:	20000010 	.word	0x20000010
 8004fcc:	053e2d63 	.word	0x053e2d63
 8004fd0:	50000100 	.word	0x50000100
 8004fd4:	50000400 	.word	0x50000400
 8004fd8:	50000500 	.word	0x50000500
 8004fdc:	50000600 	.word	0x50000600
 8004fe0:	50000300 	.word	0x50000300
 8004fe4:	50000700 	.word	0x50000700
 8004fe8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0201 	bic.w	r2, r2, #1
 8004ffa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d10c      	bne.n	800501e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f023 010f 	bic.w	r1, r3, #15
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	1e5a      	subs	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
 800501c:	e007      	b.n	800502e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 020f 	bic.w	r2, r2, #15
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	65da      	str	r2, [r3, #92]	; 0x5c
 800503e:	e007      	b.n	8005050 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005044:	f043 0210 	orr.w	r2, r3, #16
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005050:	7ffb      	ldrb	r3, [r7, #31]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3724      	adds	r7, #36	; 0x24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd90      	pop	{r4, r7, pc}
 800505a:	bf00      	nop

0800505c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b0a6      	sub	sp, #152	; 0x98
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_ADC_ConfigChannel+0x22>
 800507a:	2302      	movs	r3, #2
 800507c:	e38e      	b.n	800579c <HAL_ADC_ConfigChannel+0x740>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fdff 	bl	8004c8e <LL_ADC_REG_IsConversionOngoing>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	f040 836f 	bne.w	8005776 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	f7ff fd1c 	bl	8004ae2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fded 	bl	8004c8e <LL_ADC_REG_IsConversionOngoing>
 80050b4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fdf9 	bl	8004cb4 <LL_ADC_INJ_IsConversionOngoing>
 80050c2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 817b 	bne.w	80053c6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f040 8176 	bne.w	80053c6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e2:	d10f      	bne.n	8005104 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2200      	movs	r2, #0
 80050ee:	4619      	mov	r1, r3
 80050f0:	f7ff fd20 	bl	8004b34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fcdd 	bl	8004abc <LL_ADC_SetSamplingTimeCommonConfig>
 8005102:	e00e      	b.n	8005122 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6819      	ldr	r1, [r3, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	461a      	mov	r2, r3
 8005112:	f7ff fd0f 	bl	8004b34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2100      	movs	r1, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fccd 	bl	8004abc <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	08db      	lsrs	r3, r3, #3
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d022      	beq.n	800518a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	6919      	ldr	r1, [r3, #16]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005154:	f7ff fc34 	bl	80049c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6919      	ldr	r1, [r3, #16]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	461a      	mov	r2, r3
 8005166:	f7ff fc79 	bl	8004a5c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6919      	ldr	r1, [r3, #16]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	7f1b      	ldrb	r3, [r3, #28]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d102      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x124>
 800517a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800517e:	e000      	b.n	8005182 <HAL_ADC_ConfigChannel+0x126>
 8005180:	2300      	movs	r3, #0
 8005182:	461a      	mov	r2, r3
 8005184:	f7ff fc82 	bl	8004a8c <LL_ADC_SetOffsetSaturation>
 8005188:	e11d      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2100      	movs	r1, #0
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fc37 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005196:	4603      	mov	r3, r0
 8005198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x15a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fc2c 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80051ac:	4603      	mov	r3, r0
 80051ae:	0e9b      	lsrs	r3, r3, #26
 80051b0:	f003 021f 	and.w	r2, r3, #31
 80051b4:	e012      	b.n	80051dc <HAL_ADC_ConfigChannel+0x180>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2100      	movs	r1, #0
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff fc21 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80051d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051d4:	fab3 f383 	clz	r3, r3
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_ADC_ConfigChannel+0x198>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	0e9b      	lsrs	r3, r3, #26
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	e00a      	b.n	800520a <HAL_ADC_ConfigChannel+0x1ae>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fc:	fa93 f3a3 	rbit	r3, r3
 8005200:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8005202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005204:	fab3 f383 	clz	r3, r3
 8005208:	b2db      	uxtb	r3, r3
 800520a:	429a      	cmp	r2, r3
 800520c:	d106      	bne.n	800521c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	2100      	movs	r1, #0
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fc08 	bl	8004a2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2101      	movs	r1, #1
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fbee 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005228:	4603      	mov	r3, r0
 800522a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <HAL_ADC_ConfigChannel+0x1ec>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2101      	movs	r1, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fbe3 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 800523e:	4603      	mov	r3, r0
 8005240:	0e9b      	lsrs	r3, r3, #26
 8005242:	f003 021f 	and.w	r2, r3, #31
 8005246:	e010      	b.n	800526a <HAL_ADC_ConfigChannel+0x20e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2101      	movs	r1, #1
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fbd8 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005254:	4603      	mov	r3, r0
 8005256:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800525a:	fa93 f3a3 	rbit	r3, r3
 800525e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	fab3 f383 	clz	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005272:	2b00      	cmp	r3, #0
 8005274:	d105      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x226>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	0e9b      	lsrs	r3, r3, #26
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	e00a      	b.n	8005298 <HAL_ADC_ConfigChannel+0x23c>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800528a:	fa93 f3a3 	rbit	r3, r3
 800528e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005292:	fab3 f383 	clz	r3, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	429a      	cmp	r2, r3
 800529a:	d106      	bne.n	80052aa <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2101      	movs	r1, #1
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fbc1 	bl	8004a2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2102      	movs	r1, #2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fba7 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x27a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2102      	movs	r1, #2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fb9c 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80052cc:	4603      	mov	r3, r0
 80052ce:	0e9b      	lsrs	r3, r3, #26
 80052d0:	f003 021f 	and.w	r2, r3, #31
 80052d4:	e010      	b.n	80052f8 <HAL_ADC_ConfigChannel+0x29c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2102      	movs	r1, #2
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fb91 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80052e2:	4603      	mov	r3, r0
 80052e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052e8:	fa93 f3a3 	rbit	r3, r3
 80052ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80052ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f0:	fab3 f383 	clz	r3, r3
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <HAL_ADC_ConfigChannel+0x2b4>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	0e9b      	lsrs	r3, r3, #26
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	e00a      	b.n	8005326 <HAL_ADC_ConfigChannel+0x2ca>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005318:	fa93 f3a3 	rbit	r3, r3
 800531c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800531e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005320:	fab3 f383 	clz	r3, r3
 8005324:	b2db      	uxtb	r3, r3
 8005326:	429a      	cmp	r2, r3
 8005328:	d106      	bne.n	8005338 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2200      	movs	r2, #0
 8005330:	2102      	movs	r1, #2
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fb7a 	bl	8004a2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2103      	movs	r1, #3
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff fb60 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005344:	4603      	mov	r3, r0
 8005346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x308>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2103      	movs	r1, #3
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff fb55 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 800535a:	4603      	mov	r3, r0
 800535c:	0e9b      	lsrs	r3, r3, #26
 800535e:	f003 021f 	and.w	r2, r3, #31
 8005362:	e010      	b.n	8005386 <HAL_ADC_ConfigChannel+0x32a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2103      	movs	r1, #3
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fb4a 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005370:	4603      	mov	r3, r0
 8005372:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800537c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537e:	fab3 f383 	clz	r3, r3
 8005382:	b2db      	uxtb	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538e:	2b00      	cmp	r3, #0
 8005390:	d105      	bne.n	800539e <HAL_ADC_ConfigChannel+0x342>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	0e9b      	lsrs	r3, r3, #26
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	e00a      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x358>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80053ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d106      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2200      	movs	r2, #0
 80053be:	2103      	movs	r1, #3
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fb33 	bl	8004a2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fc4c 	bl	8004c68 <LL_ADC_IsEnabled>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f040 810c 	bne.w	80055f0 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	461a      	mov	r2, r3
 80053e6:	f7ff fbcd 	bl	8004b84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4aaf      	ldr	r2, [pc, #700]	; (80056ac <HAL_ADC_ConfigChannel+0x650>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	f040 80fd 	bne.w	80055f0 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10b      	bne.n	800541e <HAL_ADC_ConfigChannel+0x3c2>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	0e9b      	lsrs	r3, r3, #26
 800540c:	3301      	adds	r3, #1
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	2b09      	cmp	r3, #9
 8005414:	bf94      	ite	ls
 8005416:	2301      	movls	r3, #1
 8005418:	2300      	movhi	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e012      	b.n	8005444 <HAL_ADC_ConfigChannel+0x3e8>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005426:	fa93 f3a3 	rbit	r3, r3
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	fab3 f383 	clz	r3, r3
 8005432:	b2db      	uxtb	r3, r3
 8005434:	3301      	adds	r3, #1
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	2b09      	cmp	r3, #9
 800543c:	bf94      	ite	ls
 800543e:	2301      	movls	r3, #1
 8005440:	2300      	movhi	r3, #0
 8005442:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005444:	2b00      	cmp	r3, #0
 8005446:	d064      	beq.n	8005512 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005450:	2b00      	cmp	r3, #0
 8005452:	d107      	bne.n	8005464 <HAL_ADC_ConfigChannel+0x408>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	0e9b      	lsrs	r3, r3, #26
 800545a:	3301      	adds	r3, #1
 800545c:	069b      	lsls	r3, r3, #26
 800545e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005462:	e00e      	b.n	8005482 <HAL_ADC_ConfigChannel+0x426>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	fa93 f3a3 	rbit	r3, r3
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005474:	fab3 f383 	clz	r3, r3
 8005478:	b2db      	uxtb	r3, r3
 800547a:	3301      	adds	r3, #1
 800547c:	069b      	lsls	r3, r3, #26
 800547e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800548a:	2b00      	cmp	r3, #0
 800548c:	d109      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x446>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	0e9b      	lsrs	r3, r3, #26
 8005494:	3301      	adds	r3, #1
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2101      	movs	r1, #1
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	e010      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x468>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	fab3 f383 	clz	r3, r3
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	3301      	adds	r3, #1
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	2101      	movs	r1, #1
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	ea42 0103 	orr.w	r1, r2, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x48e>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	0e9b      	lsrs	r3, r3, #26
 80054da:	3301      	adds	r3, #1
 80054dc:	f003 021f 	and.w	r2, r3, #31
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	051b      	lsls	r3, r3, #20
 80054e8:	e011      	b.n	800550e <HAL_ADC_ConfigChannel+0x4b2>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	fa93 f3a3 	rbit	r3, r3
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	3301      	adds	r3, #1
 8005502:	f003 021f 	and.w	r2, r3, #31
 8005506:	4613      	mov	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	4413      	add	r3, r2
 800550c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800550e:	430b      	orrs	r3, r1
 8005510:	e069      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <HAL_ADC_ConfigChannel+0x4d2>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	0e9b      	lsrs	r3, r3, #26
 8005524:	3301      	adds	r3, #1
 8005526:	069b      	lsls	r3, r3, #26
 8005528:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800552c:	e00e      	b.n	800554c <HAL_ADC_ConfigChannel+0x4f0>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	fa93 f3a3 	rbit	r3, r3
 800553a:	61fb      	str	r3, [r7, #28]
  return result;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	fab3 f383 	clz	r3, r3
 8005542:	b2db      	uxtb	r3, r3
 8005544:	3301      	adds	r3, #1
 8005546:	069b      	lsls	r3, r3, #26
 8005548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_ADC_ConfigChannel+0x510>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	0e9b      	lsrs	r3, r3, #26
 800555e:	3301      	adds	r3, #1
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2101      	movs	r1, #1
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	e010      	b.n	800558e <HAL_ADC_ConfigChannel+0x532>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	fa93 f3a3 	rbit	r3, r3
 8005578:	617b      	str	r3, [r7, #20]
  return result;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	fab3 f383 	clz	r3, r3
 8005580:	b2db      	uxtb	r3, r3
 8005582:	3301      	adds	r3, #1
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2101      	movs	r1, #1
 800558a:	fa01 f303 	lsl.w	r3, r1, r3
 800558e:	ea42 0103 	orr.w	r1, r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <HAL_ADC_ConfigChannel+0x55e>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	0e9b      	lsrs	r3, r3, #26
 80055a4:	3301      	adds	r3, #1
 80055a6:	f003 021f 	and.w	r2, r3, #31
 80055aa:	4613      	mov	r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4413      	add	r3, r2
 80055b0:	3b1e      	subs	r3, #30
 80055b2:	051b      	lsls	r3, r3, #20
 80055b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055b8:	e014      	b.n	80055e4 <HAL_ADC_ConfigChannel+0x588>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	fa93 f3a3 	rbit	r3, r3
 80055c6:	60fb      	str	r3, [r7, #12]
  return result;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	fab3 f383 	clz	r3, r3
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	3301      	adds	r3, #1
 80055d2:	f003 021f 	and.w	r2, r3, #31
 80055d6:	4613      	mov	r3, r2
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	4413      	add	r3, r2
 80055dc:	3b1e      	subs	r3, #30
 80055de:	051b      	lsls	r3, r3, #20
 80055e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055e4:	430b      	orrs	r3, r1
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	6892      	ldr	r2, [r2, #8]
 80055ea:	4619      	mov	r1, r3
 80055ec:	f7ff faa2 	bl	8004b34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b2e      	ldr	r3, [pc, #184]	; (80056b0 <HAL_ADC_ConfigChannel+0x654>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80c9 	beq.w	8005790 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005606:	d004      	beq.n	8005612 <HAL_ADC_ConfigChannel+0x5b6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a29      	ldr	r2, [pc, #164]	; (80056b4 <HAL_ADC_ConfigChannel+0x658>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d101      	bne.n	8005616 <HAL_ADC_ConfigChannel+0x5ba>
 8005612:	4b29      	ldr	r3, [pc, #164]	; (80056b8 <HAL_ADC_ConfigChannel+0x65c>)
 8005614:	e000      	b.n	8005618 <HAL_ADC_ConfigChannel+0x5bc>
 8005616:	4b29      	ldr	r3, [pc, #164]	; (80056bc <HAL_ADC_ConfigChannel+0x660>)
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff f9c3 	bl	80049a4 <LL_ADC_GetCommonPathInternalCh>
 800561e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a26      	ldr	r2, [pc, #152]	; (80056c0 <HAL_ADC_ConfigChannel+0x664>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_ADC_ConfigChannel+0x5da>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <HAL_ADC_ConfigChannel+0x668>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d14e      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800563a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d148      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800564a:	d005      	beq.n	8005658 <HAL_ADC_ConfigChannel+0x5fc>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1d      	ldr	r2, [pc, #116]	; (80056c8 <HAL_ADC_ConfigChannel+0x66c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	f040 8099 	bne.w	800578a <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005660:	d004      	beq.n	800566c <HAL_ADC_ConfigChannel+0x610>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a13      	ldr	r2, [pc, #76]	; (80056b4 <HAL_ADC_ConfigChannel+0x658>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d101      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x614>
 800566c:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <HAL_ADC_ConfigChannel+0x65c>)
 800566e:	e000      	b.n	8005672 <HAL_ADC_ConfigChannel+0x616>
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <HAL_ADC_ConfigChannel+0x660>)
 8005672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005676:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7ff f97e 	bl	800497e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <HAL_ADC_ConfigChannel+0x670>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	4a11      	ldr	r2, [pc, #68]	; (80056d0 <HAL_ADC_ConfigChannel+0x674>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	099a      	lsrs	r2, r3, #6
 8005690:	4613      	mov	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800569a:	e002      	b.n	80056a2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	3b01      	subs	r3, #1
 80056a0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f9      	bne.n	800569c <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056a8:	e06f      	b.n	800578a <HAL_ADC_ConfigChannel+0x72e>
 80056aa:	bf00      	nop
 80056ac:	407f0000 	.word	0x407f0000
 80056b0:	80080000 	.word	0x80080000
 80056b4:	50000100 	.word	0x50000100
 80056b8:	50000300 	.word	0x50000300
 80056bc:	50000700 	.word	0x50000700
 80056c0:	c3210000 	.word	0xc3210000
 80056c4:	90c00010 	.word	0x90c00010
 80056c8:	50000600 	.word	0x50000600
 80056cc:	20000010 	.word	0x20000010
 80056d0:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a32      	ldr	r2, [pc, #200]	; (80057a4 <HAL_ADC_ConfigChannel+0x748>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d125      	bne.n	800572a <HAL_ADC_ConfigChannel+0x6ce>
 80056de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11f      	bne.n	800572a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2e      	ldr	r2, [pc, #184]	; (80057a8 <HAL_ADC_ConfigChannel+0x74c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d104      	bne.n	80056fe <HAL_ADC_ConfigChannel+0x6a2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2c      	ldr	r2, [pc, #176]	; (80057ac <HAL_ADC_ConfigChannel+0x750>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d047      	beq.n	800578e <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005706:	d004      	beq.n	8005712 <HAL_ADC_ConfigChannel+0x6b6>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a26      	ldr	r2, [pc, #152]	; (80057a8 <HAL_ADC_ConfigChannel+0x74c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <HAL_ADC_ConfigChannel+0x6ba>
 8005712:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <HAL_ADC_ConfigChannel+0x754>)
 8005714:	e000      	b.n	8005718 <HAL_ADC_ConfigChannel+0x6bc>
 8005716:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <HAL_ADC_ConfigChannel+0x758>)
 8005718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800571c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7ff f92b 	bl	800497e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005728:	e031      	b.n	800578e <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a22      	ldr	r2, [pc, #136]	; (80057b8 <HAL_ADC_ConfigChannel+0x75c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d12d      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d127      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <HAL_ADC_ConfigChannel+0x74c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d022      	beq.n	8005790 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005752:	d004      	beq.n	800575e <HAL_ADC_ConfigChannel+0x702>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <HAL_ADC_ConfigChannel+0x74c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d101      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x706>
 800575e:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <HAL_ADC_ConfigChannel+0x754>)
 8005760:	e000      	b.n	8005764 <HAL_ADC_ConfigChannel+0x708>
 8005762:	4a14      	ldr	r2, [pc, #80]	; (80057b4 <HAL_ADC_ConfigChannel+0x758>)
 8005764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005768:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f7ff f905 	bl	800497e <LL_ADC_SetCommonPathInternalCh>
 8005774:	e00c      	b.n	8005790 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577a:	f043 0220 	orr.w	r2, r3, #32
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005788:	e002      	b.n	8005790 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800578a:	bf00      	nop
 800578c:	e000      	b.n	8005790 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800578e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005798:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800579c:	4618      	mov	r0, r3
 800579e:	3798      	adds	r7, #152	; 0x98
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	c7520000 	.word	0xc7520000
 80057a8:	50000100 	.word	0x50000100
 80057ac:	50000500 	.word	0x50000500
 80057b0:	50000300 	.word	0x50000300
 80057b4:	50000700 	.word	0x50000700
 80057b8:	cb840000 	.word	0xcb840000

080057bc <LL_ADC_IsEnabled>:
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <LL_ADC_IsEnabled+0x18>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <LL_ADC_IsEnabled+0x1a>
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d101      	bne.n	80057fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005808:	b590      	push	{r4, r7, lr}
 800580a:	b0a1      	sub	sp, #132	; 0x84
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005822:	2302      	movs	r3, #2
 8005824:	e0e3      	b.n	80059ee <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005836:	d102      	bne.n	800583e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005838:	4b6f      	ldr	r3, [pc, #444]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	e009      	b.n	8005852 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a6e      	ldr	r2, [pc, #440]	; (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d102      	bne.n	800584e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8005848:	4b6d      	ldr	r3, [pc, #436]	; (8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	e001      	b.n	8005852 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0be      	b.n	80059ee <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff ffb5 	bl	80057e2 <LL_ADC_REG_IsConversionOngoing>
 8005878:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff ffaf 	bl	80057e2 <LL_ADC_REG_IsConversionOngoing>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	f040 80a0 	bne.w	80059cc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800588c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 809c 	bne.w	80059cc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800589c:	d004      	beq.n	80058a8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a55      	ldr	r2, [pc, #340]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d101      	bne.n	80058ac <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80058a8:	4b56      	ldr	r3, [pc, #344]	; (8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80058aa:	e000      	b.n	80058ae <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80058ac:	4b56      	ldr	r3, [pc, #344]	; (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80058ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d04b      	beq.n	8005950 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80058b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6859      	ldr	r1, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ca:	035b      	lsls	r3, r3, #13
 80058cc:	430b      	orrs	r3, r1
 80058ce:	431a      	orrs	r2, r3
 80058d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058dc:	d004      	beq.n	80058e8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a45      	ldr	r2, [pc, #276]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10f      	bne.n	8005908 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80058e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80058ec:	f7ff ff66 	bl	80057bc <LL_ADC_IsEnabled>
 80058f0:	4604      	mov	r4, r0
 80058f2:	4841      	ldr	r0, [pc, #260]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80058f4:	f7ff ff62 	bl	80057bc <LL_ADC_IsEnabled>
 80058f8:	4603      	mov	r3, r0
 80058fa:	4323      	orrs	r3, r4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	e012      	b.n	800592e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005908:	483c      	ldr	r0, [pc, #240]	; (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800590a:	f7ff ff57 	bl	80057bc <LL_ADC_IsEnabled>
 800590e:	4604      	mov	r4, r0
 8005910:	483b      	ldr	r0, [pc, #236]	; (8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005912:	f7ff ff53 	bl	80057bc <LL_ADC_IsEnabled>
 8005916:	4603      	mov	r3, r0
 8005918:	431c      	orrs	r4, r3
 800591a:	483c      	ldr	r0, [pc, #240]	; (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800591c:	f7ff ff4e 	bl	80057bc <LL_ADC_IsEnabled>
 8005920:	4603      	mov	r3, r0
 8005922:	4323      	orrs	r3, r4
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d056      	beq.n	80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800593a:	f023 030f 	bic.w	r3, r3, #15
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	6811      	ldr	r1, [r2, #0]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	6892      	ldr	r2, [r2, #8]
 8005946:	430a      	orrs	r2, r1
 8005948:	431a      	orrs	r2, r3
 800594a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800594c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800594e:	e047      	b.n	80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800595a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005964:	d004      	beq.n	8005970 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a23      	ldr	r2, [pc, #140]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10f      	bne.n	8005990 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005970:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005974:	f7ff ff22 	bl	80057bc <LL_ADC_IsEnabled>
 8005978:	4604      	mov	r4, r0
 800597a:	481f      	ldr	r0, [pc, #124]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800597c:	f7ff ff1e 	bl	80057bc <LL_ADC_IsEnabled>
 8005980:	4603      	mov	r3, r0
 8005982:	4323      	orrs	r3, r4
 8005984:	2b00      	cmp	r3, #0
 8005986:	bf0c      	ite	eq
 8005988:	2301      	moveq	r3, #1
 800598a:	2300      	movne	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e012      	b.n	80059b6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8005990:	481a      	ldr	r0, [pc, #104]	; (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8005992:	f7ff ff13 	bl	80057bc <LL_ADC_IsEnabled>
 8005996:	4604      	mov	r4, r0
 8005998:	4819      	ldr	r0, [pc, #100]	; (8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800599a:	f7ff ff0f 	bl	80057bc <LL_ADC_IsEnabled>
 800599e:	4603      	mov	r3, r0
 80059a0:	431c      	orrs	r4, r3
 80059a2:	481a      	ldr	r0, [pc, #104]	; (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80059a4:	f7ff ff0a 	bl	80057bc <LL_ADC_IsEnabled>
 80059a8:	4603      	mov	r3, r0
 80059aa:	4323      	orrs	r3, r4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d012      	beq.n	80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80059c2:	f023 030f 	bic.w	r3, r3, #15
 80059c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80059c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059ca:	e009      	b.n	80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80059de:	e000      	b.n	80059e2 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80059ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3784      	adds	r7, #132	; 0x84
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd90      	pop	{r4, r7, pc}
 80059f6:	bf00      	nop
 80059f8:	50000100 	.word	0x50000100
 80059fc:	50000400 	.word	0x50000400
 8005a00:	50000500 	.word	0x50000500
 8005a04:	50000300 	.word	0x50000300
 8005a08:	50000700 	.word	0x50000700
 8005a0c:	50000600 	.word	0x50000600

08005a10 <LL_EXTI_EnableIT_0_31>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <LL_EXTI_EnableIT_0_31+0x20>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4904      	ldr	r1, [pc, #16]	; (8005a30 <LL_EXTI_EnableIT_0_31+0x20>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40010400 	.word	0x40010400

08005a34 <LL_EXTI_EnableIT_32_63>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <LL_EXTI_EnableIT_32_63+0x20>)
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	4904      	ldr	r1, [pc, #16]	; (8005a54 <LL_EXTI_EnableIT_32_63+0x20>)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	620b      	str	r3, [r1, #32]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40010400 	.word	0x40010400

08005a58 <LL_EXTI_DisableIT_0_31>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <LL_EXTI_DisableIT_0_31+0x24>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	43db      	mvns	r3, r3
 8005a68:	4904      	ldr	r1, [pc, #16]	; (8005a7c <LL_EXTI_DisableIT_0_31+0x24>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010400 	.word	0x40010400

08005a80 <LL_EXTI_DisableIT_32_63>:
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <LL_EXTI_DisableIT_32_63+0x24>)
 8005a8a:	6a1a      	ldr	r2, [r3, #32]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	4904      	ldr	r1, [pc, #16]	; (8005aa4 <LL_EXTI_DisableIT_32_63+0x24>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	620b      	str	r3, [r1, #32]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40010400 	.word	0x40010400

08005aa8 <LL_EXTI_EnableEvent_0_31>:
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	4904      	ldr	r1, [pc, #16]	; (8005ac8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	604b      	str	r3, [r1, #4]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	40010400 	.word	0x40010400

08005acc <LL_EXTI_EnableEvent_32_63>:
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <LL_EXTI_EnableEvent_32_63+0x20>)
 8005ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad8:	4904      	ldr	r1, [pc, #16]	; (8005aec <LL_EXTI_EnableEvent_32_63+0x20>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40010400 	.word	0x40010400

08005af0 <LL_EXTI_DisableEvent_0_31>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	43db      	mvns	r3, r3
 8005b00:	4904      	ldr	r1, [pc, #16]	; (8005b14 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	604b      	str	r3, [r1, #4]
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40010400 	.word	0x40010400

08005b18 <LL_EXTI_DisableEvent_32_63>:
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <LL_EXTI_DisableEvent_32_63+0x24>)
 8005b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	43db      	mvns	r3, r3
 8005b28:	4904      	ldr	r1, [pc, #16]	; (8005b3c <LL_EXTI_DisableEvent_32_63+0x24>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40010400 	.word	0x40010400

08005b40 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	4904      	ldr	r1, [pc, #16]	; (8005b60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	608b      	str	r3, [r1, #8]
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	40010400 	.word	0x40010400

08005b64 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b70:	4904      	ldr	r1, [pc, #16]	; (8005b84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40010400 	.word	0x40010400

08005b88 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	43db      	mvns	r3, r3
 8005b98:	4904      	ldr	r1, [pc, #16]	; (8005bac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	608b      	str	r3, [r1, #8]
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010400 	.word	0x40010400

08005bb0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	4904      	ldr	r1, [pc, #16]	; (8005bd4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40010400 	.word	0x40010400

08005bd8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	4904      	ldr	r1, [pc, #16]	; (8005bf8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60cb      	str	r3, [r1, #12]
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	40010400 	.word	0x40010400

08005bfc <LL_EXTI_EnableFallingTrig_32_63>:
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c08:	4904      	ldr	r1, [pc, #16]	; (8005c1c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40010400 	.word	0x40010400

08005c20 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	4904      	ldr	r1, [pc, #16]	; (8005c44 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	60cb      	str	r3, [r1, #12]
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40010400 	.word	0x40010400

08005c48 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	43db      	mvns	r3, r3
 8005c58:	4904      	ldr	r1, [pc, #16]	; (8005c6c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40010400 	.word	0x40010400

08005c70 <LL_EXTI_ClearFlag_0_31>:
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005c78:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6153      	str	r3, [r2, #20]
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40010400 	.word	0x40010400

08005c90 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005c98:	4a04      	ldr	r2, [pc, #16]	; (8005cac <LL_EXTI_ClearFlag_32_63+0x1c>)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40010400 	.word	0x40010400

08005cb0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e180      	b.n	8005fce <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cda:	d102      	bne.n	8005ce2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e175      	b.n	8005fce <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	7f5b      	ldrb	r3, [r3, #29]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d108      	bne.n	8005cfe <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fd f8b1 	bl	8002e60 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d08:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b98      	ldr	r3, [pc, #608]	; (8005f90 <HAL_COMP_Init+0x2e0>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d015      	beq.n	8005d76 <HAL_COMP_Init+0xc6>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d112      	bne.n	8005d76 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005d50:	4b90      	ldr	r3, [pc, #576]	; (8005f94 <HAL_COMP_Init+0x2e4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	099b      	lsrs	r3, r3, #6
 8005d56:	4a90      	ldr	r2, [pc, #576]	; (8005f98 <HAL_COMP_Init+0x2e8>)
 8005d58:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5c:	099a      	lsrs	r2, r3, #6
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005d68:	e002      	b.n	8005d70 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f9      	bne.n	8005d6a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a88      	ldr	r2, [pc, #544]	; (8005f9c <HAL_COMP_Init+0x2ec>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d028      	beq.n	8005dd2 <HAL_COMP_Init+0x122>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a86      	ldr	r2, [pc, #536]	; (8005fa0 <HAL_COMP_Init+0x2f0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d020      	beq.n	8005dcc <HAL_COMP_Init+0x11c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a85      	ldr	r2, [pc, #532]	; (8005fa4 <HAL_COMP_Init+0x2f4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d018      	beq.n	8005dc6 <HAL_COMP_Init+0x116>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a83      	ldr	r2, [pc, #524]	; (8005fa8 <HAL_COMP_Init+0x2f8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d010      	beq.n	8005dc0 <HAL_COMP_Init+0x110>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a82      	ldr	r2, [pc, #520]	; (8005fac <HAL_COMP_Init+0x2fc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d008      	beq.n	8005dba <HAL_COMP_Init+0x10a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a80      	ldr	r2, [pc, #512]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d101      	bne.n	8005db6 <HAL_COMP_Init+0x106>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e00f      	b.n	8005dd6 <HAL_COMP_Init+0x126>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e00d      	b.n	8005dd6 <HAL_COMP_Init+0x126>
 8005dba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dbe:	e00a      	b.n	8005dd6 <HAL_COMP_Init+0x126>
 8005dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dc4:	e007      	b.n	8005dd6 <HAL_COMP_Init+0x126>
 8005dc6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005dca:	e004      	b.n	8005dd6 <HAL_COMP_Init+0x126>
 8005dcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005dd0:	e001      	b.n	8005dd6 <HAL_COMP_Init+0x126>
 8005dd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005dd6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80b6 	beq.w	8005f52 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d011      	beq.n	8005e16 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a6e      	ldr	r2, [pc, #440]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <HAL_COMP_Init+0x156>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a6c      	ldr	r2, [pc, #432]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d103      	bne.n	8005e0e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8005e06:	6938      	ldr	r0, [r7, #16]
 8005e08:	f7ff feac 	bl	8005b64 <LL_EXTI_EnableRisingTrig_32_63>
 8005e0c:	e014      	b.n	8005e38 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005e0e:	6938      	ldr	r0, [r7, #16]
 8005e10:	f7ff fe96 	bl	8005b40 <LL_EXTI_EnableRisingTrig_0_31>
 8005e14:	e010      	b.n	8005e38 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a65      	ldr	r2, [pc, #404]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_COMP_Init+0x17a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a63      	ldr	r2, [pc, #396]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d103      	bne.n	8005e32 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8005e2a:	6938      	ldr	r0, [r7, #16]
 8005e2c:	f7ff fec0 	bl	8005bb0 <LL_EXTI_DisableRisingTrig_32_63>
 8005e30:	e002      	b.n	8005e38 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005e32:	6938      	ldr	r0, [r7, #16]
 8005e34:	f7ff fea8 	bl	8005b88 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d011      	beq.n	8005e68 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a59      	ldr	r2, [pc, #356]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_COMP_Init+0x1a8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a58      	ldr	r2, [pc, #352]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d103      	bne.n	8005e60 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8005e58:	6938      	ldr	r0, [r7, #16]
 8005e5a:	f7ff fecf 	bl	8005bfc <LL_EXTI_EnableFallingTrig_32_63>
 8005e5e:	e014      	b.n	8005e8a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005e60:	6938      	ldr	r0, [r7, #16]
 8005e62:	f7ff feb9 	bl	8005bd8 <LL_EXTI_EnableFallingTrig_0_31>
 8005e66:	e010      	b.n	8005e8a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a50      	ldr	r2, [pc, #320]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d004      	beq.n	8005e7c <HAL_COMP_Init+0x1cc>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a4f      	ldr	r2, [pc, #316]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d103      	bne.n	8005e84 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8005e7c:	6938      	ldr	r0, [r7, #16]
 8005e7e:	f7ff fee3 	bl	8005c48 <LL_EXTI_DisableFallingTrig_32_63>
 8005e82:	e002      	b.n	8005e8a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005e84:	6938      	ldr	r0, [r7, #16]
 8005e86:	f7ff fecb 	bl	8005c20 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a48      	ldr	r2, [pc, #288]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d004      	beq.n	8005e9e <HAL_COMP_Init+0x1ee>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a46      	ldr	r2, [pc, #280]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d103      	bne.n	8005ea6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8005e9e:	6938      	ldr	r0, [r7, #16]
 8005ea0:	f7ff fef6 	bl	8005c90 <LL_EXTI_ClearFlag_32_63>
 8005ea4:	e002      	b.n	8005eac <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8005ea6:	6938      	ldr	r0, [r7, #16]
 8005ea8:	f7ff fee2 	bl	8005c70 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d011      	beq.n	8005edc <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a3c      	ldr	r2, [pc, #240]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_COMP_Init+0x21c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a3b      	ldr	r2, [pc, #236]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d103      	bne.n	8005ed4 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8005ecc:	6938      	ldr	r0, [r7, #16]
 8005ece:	f7ff fdfd 	bl	8005acc <LL_EXTI_EnableEvent_32_63>
 8005ed2:	e014      	b.n	8005efe <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8005ed4:	6938      	ldr	r0, [r7, #16]
 8005ed6:	f7ff fde7 	bl	8005aa8 <LL_EXTI_EnableEvent_0_31>
 8005eda:	e010      	b.n	8005efe <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a33      	ldr	r2, [pc, #204]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_COMP_Init+0x240>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a32      	ldr	r2, [pc, #200]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d103      	bne.n	8005ef8 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8005ef0:	6938      	ldr	r0, [r7, #16]
 8005ef2:	f7ff fe11 	bl	8005b18 <LL_EXTI_DisableEvent_32_63>
 8005ef6:	e002      	b.n	8005efe <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8005ef8:	6938      	ldr	r0, [r7, #16]
 8005efa:	f7ff fdf9 	bl	8005af0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d011      	beq.n	8005f2e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a28      	ldr	r2, [pc, #160]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d004      	beq.n	8005f1e <HAL_COMP_Init+0x26e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a26      	ldr	r2, [pc, #152]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d103      	bne.n	8005f26 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8005f1e:	6938      	ldr	r0, [r7, #16]
 8005f20:	f7ff fd88 	bl	8005a34 <LL_EXTI_EnableIT_32_63>
 8005f24:	e04b      	b.n	8005fbe <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8005f26:	6938      	ldr	r0, [r7, #16]
 8005f28:	f7ff fd72 	bl	8005a10 <LL_EXTI_EnableIT_0_31>
 8005f2c:	e047      	b.n	8005fbe <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d004      	beq.n	8005f42 <HAL_COMP_Init+0x292>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d103      	bne.n	8005f4a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8005f42:	6938      	ldr	r0, [r7, #16]
 8005f44:	f7ff fd9c 	bl	8005a80 <LL_EXTI_DisableIT_32_63>
 8005f48:	e039      	b.n	8005fbe <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8005f4a:	6938      	ldr	r0, [r7, #16]
 8005f4c:	f7ff fd84 	bl	8005a58 <LL_EXTI_DisableIT_0_31>
 8005f50:	e035      	b.n	8005fbe <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_COMP_Init+0x2b6>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d103      	bne.n	8005f6e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f7ff fdd6 	bl	8005b18 <LL_EXTI_DisableEvent_32_63>
 8005f6c:	e002      	b.n	8005f74 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005f6e:	6938      	ldr	r0, [r7, #16]
 8005f70:	f7ff fdbe 	bl	8005af0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a0d      	ldr	r2, [pc, #52]	; (8005fb0 <HAL_COMP_Init+0x300>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <HAL_COMP_Init+0x2d8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a0c      	ldr	r2, [pc, #48]	; (8005fb4 <HAL_COMP_Init+0x304>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d117      	bne.n	8005fb8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8005f88:	6938      	ldr	r0, [r7, #16]
 8005f8a:	f7ff fd79 	bl	8005a80 <LL_EXTI_DisableIT_32_63>
 8005f8e:	e016      	b.n	8005fbe <HAL_COMP_Init+0x30e>
 8005f90:	ff007e0f 	.word	0xff007e0f
 8005f94:	20000010 	.word	0x20000010
 8005f98:	053e2d63 	.word	0x053e2d63
 8005f9c:	40010200 	.word	0x40010200
 8005fa0:	40010204 	.word	0x40010204
 8005fa4:	40010208 	.word	0x40010208
 8005fa8:	4001020c 	.word	0x4001020c
 8005fac:	40010210 	.word	0x40010210
 8005fb0:	40010214 	.word	0x40010214
 8005fb4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005fb8:	6938      	ldr	r0, [r7, #16]
 8005fba:	f7ff fd4d 	bl	8005a58 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	7f5b      	ldrb	r3, [r3, #29]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005fce:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <__NVIC_SetPriorityGrouping>:
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	; (800601c <__NVIC_SetPriorityGrouping+0x44>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800600a:	4a04      	ldr	r2, [pc, #16]	; (800601c <__NVIC_SetPriorityGrouping+0x44>)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	60d3      	str	r3, [r2, #12]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	e000ed00 	.word	0xe000ed00

08006020 <__NVIC_GetPriorityGrouping>:
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <__NVIC_GetPriorityGrouping+0x18>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	0a1b      	lsrs	r3, r3, #8
 800602a:	f003 0307 	and.w	r3, r3, #7
}
 800602e:	4618      	mov	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	e000ed00 	.word	0xe000ed00

0800603c <__NVIC_EnableIRQ>:
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604a:	2b00      	cmp	r3, #0
 800604c:	db0b      	blt.n	8006066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	f003 021f 	and.w	r2, r3, #31
 8006054:	4907      	ldr	r1, [pc, #28]	; (8006074 <__NVIC_EnableIRQ+0x38>)
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	2001      	movs	r0, #1
 800605e:	fa00 f202 	lsl.w	r2, r0, r2
 8006062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	e000e100 	.word	0xe000e100

08006078 <__NVIC_SetPriority>:
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006088:	2b00      	cmp	r3, #0
 800608a:	db0a      	blt.n	80060a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	490c      	ldr	r1, [pc, #48]	; (80060c4 <__NVIC_SetPriority+0x4c>)
 8006092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006096:	0112      	lsls	r2, r2, #4
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	440b      	add	r3, r1
 800609c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80060a0:	e00a      	b.n	80060b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	4908      	ldr	r1, [pc, #32]	; (80060c8 <__NVIC_SetPriority+0x50>)
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	3b04      	subs	r3, #4
 80060b0:	0112      	lsls	r2, r2, #4
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	440b      	add	r3, r1
 80060b6:	761a      	strb	r2, [r3, #24]
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	e000e100 	.word	0xe000e100
 80060c8:	e000ed00 	.word	0xe000ed00

080060cc <NVIC_EncodePriority>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	b089      	sub	sp, #36	; 0x24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f1c3 0307 	rsb	r3, r3, #7
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	bf28      	it	cs
 80060ea:	2304      	movcs	r3, #4
 80060ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3304      	adds	r3, #4
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d902      	bls.n	80060fc <NVIC_EncodePriority+0x30>
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	3b03      	subs	r3, #3
 80060fa:	e000      	b.n	80060fe <NVIC_EncodePriority+0x32>
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43da      	mvns	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	401a      	ands	r2, r3
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006114:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	fa01 f303 	lsl.w	r3, r1, r3
 800611e:	43d9      	mvns	r1, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006124:	4313      	orrs	r3, r2
}
 8006126:	4618      	mov	r0, r3
 8006128:	3724      	adds	r7, #36	; 0x24
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <SysTick_Config>:
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006144:	d301      	bcc.n	800614a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006146:	2301      	movs	r3, #1
 8006148:	e00f      	b.n	800616a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800614a:	4a0a      	ldr	r2, [pc, #40]	; (8006174 <SysTick_Config+0x40>)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3b01      	subs	r3, #1
 8006150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006152:	210f      	movs	r1, #15
 8006154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006158:	f7ff ff8e 	bl	8006078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <SysTick_Config+0x40>)
 800615e:	2200      	movs	r2, #0
 8006160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006162:	4b04      	ldr	r3, [pc, #16]	; (8006174 <SysTick_Config+0x40>)
 8006164:	2207      	movs	r2, #7
 8006166:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	e000e010 	.word	0xe000e010

08006178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff ff29 	bl	8005fd8 <__NVIC_SetPriorityGrouping>
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b086      	sub	sp, #24
 8006192:	af00      	add	r7, sp, #0
 8006194:	4603      	mov	r3, r0
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800619c:	f7ff ff40 	bl	8006020 <__NVIC_GetPriorityGrouping>
 80061a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	6978      	ldr	r0, [r7, #20]
 80061a8:	f7ff ff90 	bl	80060cc <NVIC_EncodePriority>
 80061ac:	4602      	mov	r2, r0
 80061ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b2:	4611      	mov	r1, r2
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff ff5f 	bl	8006078 <__NVIC_SetPriority>
}
 80061ba:	bf00      	nop
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	4603      	mov	r3, r0
 80061ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff ff33 	bl	800603c <__NVIC_EnableIRQ>
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff ffa4 	bl	8006134 <SysTick_Config>
 80061ec:	4603      	mov	r3, r0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e014      	b.n	8006232 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	791b      	ldrb	r3, [r3, #4]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d105      	bne.n	800621e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fc fed7 	bl	8002fcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2202      	movs	r2, #2
 8006222:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	795b      	ldrb	r3, [r3, #5]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_DAC_Start+0x16>
 800624c:	2302      	movs	r3, #2
 800624e:	e043      	b.n	80062d8 <HAL_DAC_Start+0x9e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2202      	movs	r2, #2
 800625a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6819      	ldr	r1, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2201      	movs	r2, #1
 800626a:	409a      	lsls	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8006274:	2001      	movs	r0, #1
 8006276:	f7fe fb4d 	bl	8004914 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10f      	bne.n	80062a0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800628a:	2b02      	cmp	r3, #2
 800628c:	d11d      	bne.n	80062ca <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0201 	orr.w	r2, r2, #1
 800629c:	605a      	str	r2, [r3, #4]
 800629e:	e014      	b.n	80062ca <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2102      	movs	r1, #2
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d107      	bne.n	80062ca <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0202 	orr.w	r2, r2, #2
 80062c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	795b      	ldrb	r3, [r3, #5]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_DAC_Start_DMA+0x1e>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e0a1      	b.n	8006442 <HAL_DAC_Start_DMA+0x162>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2202      	movs	r2, #2
 8006308:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d12a      	bne.n	8006366 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	4a4d      	ldr	r2, [pc, #308]	; (800644c <HAL_DAC_Start_DMA+0x16c>)
 8006316:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	4a4c      	ldr	r2, [pc, #304]	; (8006450 <HAL_DAC_Start_DMA+0x170>)
 800631e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4a4b      	ldr	r2, [pc, #300]	; (8006454 <HAL_DAC_Start_DMA+0x174>)
 8006326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006336:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2b04      	cmp	r3, #4
 800633c:	d009      	beq.n	8006352 <HAL_DAC_Start_DMA+0x72>
 800633e:	2b08      	cmp	r3, #8
 8006340:	d00c      	beq.n	800635c <HAL_DAC_Start_DMA+0x7c>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d000      	beq.n	8006348 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8006346:	e039      	b.n	80063bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	613b      	str	r3, [r7, #16]
        break;
 8006350:	e034      	b.n	80063bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	330c      	adds	r3, #12
 8006358:	613b      	str	r3, [r7, #16]
        break;
 800635a:	e02f      	b.n	80063bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3310      	adds	r3, #16
 8006362:	613b      	str	r3, [r7, #16]
        break;
 8006364:	e02a      	b.n	80063bc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	4a3b      	ldr	r2, [pc, #236]	; (8006458 <HAL_DAC_Start_DMA+0x178>)
 800636c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	4a3a      	ldr	r2, [pc, #232]	; (800645c <HAL_DAC_Start_DMA+0x17c>)
 8006374:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	4a39      	ldr	r2, [pc, #228]	; (8006460 <HAL_DAC_Start_DMA+0x180>)
 800637c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800638c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	2b04      	cmp	r3, #4
 8006392:	d009      	beq.n	80063a8 <HAL_DAC_Start_DMA+0xc8>
 8006394:	2b08      	cmp	r3, #8
 8006396:	d00c      	beq.n	80063b2 <HAL_DAC_Start_DMA+0xd2>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d000      	beq.n	800639e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800639c:	e00e      	b.n	80063bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3314      	adds	r3, #20
 80063a4:	613b      	str	r3, [r7, #16]
        break;
 80063a6:	e009      	b.n	80063bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3318      	adds	r3, #24
 80063ae:	613b      	str	r3, [r7, #16]
        break;
 80063b0:	e004      	b.n	80063bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	331c      	adds	r3, #28
 80063b8:	613b      	str	r3, [r7, #16]
        break;
 80063ba:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d111      	bne.n	80063e6 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6898      	ldr	r0, [r3, #8]
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	f000 fbc8 	bl	8006b70 <HAL_DMA_Start_IT>
 80063e0:	4603      	mov	r3, r0
 80063e2:	75fb      	strb	r3, [r7, #23]
 80063e4:	e010      	b.n	8006408 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80063f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68d8      	ldr	r0, [r3, #12]
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	f000 fbb6 	bl	8006b70 <HAL_DMA_Start_IT>
 8006404:	4603      	mov	r3, r0
 8006406:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10f      	bne.n	8006434 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6819      	ldr	r1, [r3, #0]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2201      	movs	r2, #1
 8006422:	409a      	lsls	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800642c:	2001      	movs	r0, #1
 800642e:	f7fe fa71 	bl	8004914 <HAL_Delay>
 8006432:	e005      	b.n	8006440 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f043 0204 	orr.w	r2, r3, #4
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	0800690d 	.word	0x0800690d
 8006450:	0800692f 	.word	0x0800692f
 8006454:	0800694b 	.word	0x0800694b
 8006458:	080069b5 	.word	0x080069b5
 800645c:	080069d7 	.word	0x080069d7
 8006460:	080069f3 	.word	0x080069f3

08006464 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6819      	ldr	r1, [r3, #0]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43da      	mvns	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	400a      	ands	r2, r1
 800648a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2201      	movs	r2, #1
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43da      	mvns	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	400a      	ands	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80064a8:	2001      	movs	r0, #1
 80064aa:	f7fe fa33 	bl	8004914 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10f      	bne.n	80064d4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fbd4 	bl	8006c66 <HAL_DMA_Abort>
 80064be:	4603      	mov	r3, r0
 80064c0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e00e      	b.n	80064f2 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fbc4 	bl	8006c66 <HAL_DMA_Abort>
 80064de:	4603      	mov	r3, r0
 80064e0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80064f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2204      	movs	r2, #4
 80064fc:	711a      	strb	r2, [r3, #4]
 80064fe:	e002      	b.n	8006506 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4413      	add	r3, r2
 800653a:	3308      	adds	r3, #8
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	e004      	b.n	800654a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	3314      	adds	r3, #20
 8006548:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	461a      	mov	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	e002      	b.n	80065a6 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	; 0x28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	795b      	ldrb	r3, [r3, #5]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_DAC_ConfigChannel+0x1c>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e194      	b.n	80068fa <HAL_DAC_ConfigChannel+0x346>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2202      	movs	r2, #2
 80065da:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d174      	bne.n	80066ce <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d137      	bne.n	800665a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80065ea:	f7fe f987 	bl	80048fc <HAL_GetTick>
 80065ee:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80065f0:	e011      	b.n	8006616 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80065f2:	f7fe f983 	bl	80048fc <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d90a      	bls.n	8006616 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f043 0208 	orr.w	r2, r3, #8
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2203      	movs	r2, #3
 8006610:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e171      	b.n	80068fa <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e6      	bne.n	80065f2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8006624:	2001      	movs	r0, #1
 8006626:	f7fe f975 	bl	8004914 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006632:	641a      	str	r2, [r3, #64]	; 0x40
 8006634:	e01e      	b.n	8006674 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006636:	f7fe f961 	bl	80048fc <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b01      	cmp	r3, #1
 8006642:	d90a      	bls.n	800665a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f043 0208 	orr.w	r2, r3, #8
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2203      	movs	r2, #3
 8006654:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e14f      	b.n	80068fa <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	2b00      	cmp	r3, #0
 8006662:	dbe8      	blt.n	8006636 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8006664:	2001      	movs	r0, #1
 8006666:	f7fe f955 	bl	8004914 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006672:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006684:	fa01 f303 	lsl.w	r3, r1, r3
 8006688:	43db      	mvns	r3, r3
 800668a:	ea02 0103 	and.w	r1, r2, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	409a      	lsls	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f003 0310 	and.w	r3, r3, #16
 80066ae:	21ff      	movs	r1, #255	; 0xff
 80066b0:	fa01 f303 	lsl.w	r3, r1, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	ea02 0103 	and.w	r1, r2, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	409a      	lsls	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d11d      	bne.n	8006712 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	221f      	movs	r2, #31
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43db      	mvns	r3, r3
 80066ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ee:	4013      	ands	r3, r2
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f003 0310 	and.w	r3, r3, #16
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006706:	4313      	orrs	r3, r2
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2207      	movs	r2, #7
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	43db      	mvns	r3, r3
 8006728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672a:	4013      	ands	r3, r2
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800673a:	2300      	movs	r3, #0
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	e011      	b.n	8006764 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800674c:	2301      	movs	r3, #1
 800674e:	623b      	str	r3, [r7, #32]
 8006750:	e008      	b.n	8006764 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d102      	bne.n	8006760 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800675a:	2301      	movs	r3, #1
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	e001      	b.n	8006764 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006760:	2300      	movs	r3, #0
 8006762:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	6a3a      	ldr	r2, [r7, #32]
 8006770:	4313      	orrs	r3, r2
 8006772:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	43db      	mvns	r3, r3
 8006784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006786:	4013      	ands	r3, r2
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	791b      	ldrb	r3, [r3, #4]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d102      	bne.n	8006798 <HAL_DAC_ConfigChannel+0x1e4>
 8006792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006796:	e000      	b.n	800679a <HAL_DAC_ConfigChannel+0x1e6>
 8006798:	2300      	movs	r3, #0
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	4313      	orrs	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f003 0310 	and.w	r3, r3, #16
 80067a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b2:	4013      	ands	r3, r2
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	795b      	ldrb	r3, [r3, #5]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d102      	bne.n	80067c4 <HAL_DAC_ConfigChannel+0x210>
 80067be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c2:	e000      	b.n	80067c6 <HAL_DAC_ConfigChannel+0x212>
 80067c4:	2300      	movs	r3, #0
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d114      	bne.n	8006806 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80067dc:	f001 faf8 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 80067e0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	4a47      	ldr	r2, [pc, #284]	; (8006904 <HAL_DAC_ConfigChannel+0x350>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d904      	bls.n	80067f4 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
 80067f2:	e00d      	b.n	8006810 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	4a44      	ldr	r2, [pc, #272]	; (8006908 <HAL_DAC_ConfigChannel+0x354>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d909      	bls.n	8006810 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	e004      	b.n	8006810 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680c:	4313      	orrs	r3, r2
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681e:	4313      	orrs	r3, r2
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6819      	ldr	r1, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f003 0310 	and.w	r3, r3, #16
 8006836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	43da      	mvns	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	400a      	ands	r2, r1
 8006846:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	f640 72fe 	movw	r2, #4094	; 0xffe
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	43db      	mvns	r3, r3
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	4013      	ands	r3, r2
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f003 0310 	and.w	r3, r3, #16
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	fa02 f303 	lsl.w	r3, r2, r3
 8006878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687a:	4313      	orrs	r3, r2
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006884:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6819      	ldr	r1, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	22c0      	movs	r2, #192	; 0xc0
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	43da      	mvns	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	400a      	ands	r2, r1
 80068a0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	089b      	lsrs	r3, r3, #2
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	089b      	lsrs	r3, r3, #2
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4313      	orrs	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	f640 710f 	movw	r1, #3855	; 0xf0f
 80068d0:	fa01 f303 	lsl.w	r3, r1, r3
 80068d4:	43db      	mvns	r3, r3
 80068d6:	ea02 0103 	and.w	r1, r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	409a      	lsls	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3728      	adds	r7, #40	; 0x28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	09896800 	.word	0x09896800
 8006908:	04c4b400 	.word	0x04c4b400

0800690c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff fe20 	bl	8006560 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	711a      	strb	r2, [r3, #4]
}
 8006926:	bf00      	nop
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7ff fe19 	bl	8006574 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f043 0204 	orr.w	r2, r3, #4
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7fc ffd6 	bl	8003916 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	711a      	strb	r2, [r3, #4]
}
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff ffd8 	bl	8006978 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	711a      	strb	r2, [r3, #4]
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7ff ffd1 	bl	800698c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f043 0204 	orr.w	r2, r3, #4
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7ff ffc7 	bl	80069a0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	711a      	strb	r2, [r3, #4]
}
 8006a18:	bf00      	nop
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e08d      	b.n	8006b4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	4b47      	ldr	r3, [pc, #284]	; (8006b58 <HAL_DMA_Init+0x138>)
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d80f      	bhi.n	8006a5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	4b45      	ldr	r3, [pc, #276]	; (8006b5c <HAL_DMA_Init+0x13c>)
 8006a46:	4413      	add	r3, r2
 8006a48:	4a45      	ldr	r2, [pc, #276]	; (8006b60 <HAL_DMA_Init+0x140>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	091b      	lsrs	r3, r3, #4
 8006a50:	009a      	lsls	r2, r3, #2
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a42      	ldr	r2, [pc, #264]	; (8006b64 <HAL_DMA_Init+0x144>)
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8006a5c:	e00e      	b.n	8006a7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	4b40      	ldr	r3, [pc, #256]	; (8006b68 <HAL_DMA_Init+0x148>)
 8006a66:	4413      	add	r3, r2
 8006a68:	4a3d      	ldr	r2, [pc, #244]	; (8006b60 <HAL_DMA_Init+0x140>)
 8006a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	009a      	lsls	r2, r3, #2
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a3c      	ldr	r2, [pc, #240]	; (8006b6c <HAL_DMA_Init+0x14c>)
 8006a7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa10 	bl	8006ef4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006adc:	d102      	bne.n	8006ae4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006af8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d010      	beq.n	8006b24 <HAL_DMA_Init+0x104>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d80c      	bhi.n	8006b24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa30 	bl	8006f70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006b20:	605a      	str	r2, [r3, #4]
 8006b22:	e008      	b.n	8006b36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	40020407 	.word	0x40020407
 8006b5c:	bffdfff8 	.word	0xbffdfff8
 8006b60:	cccccccd 	.word	0xcccccccd
 8006b64:	40020000 	.word	0x40020000
 8006b68:	bffdfbf8 	.word	0xbffdfbf8
 8006b6c:	40020400 	.word	0x40020400

08006b70 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_DMA_Start_IT+0x20>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e066      	b.n	8006c5e <HAL_DMA_Start_IT+0xee>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d155      	bne.n	8006c50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f954 	bl	8006e76 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d008      	beq.n	8006be8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f042 020e 	orr.w	r2, r2, #14
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e00f      	b.n	8006c08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0204 	bic.w	r2, r2, #4
 8006bf6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 020a 	orr.w	r2, r2, #10
 8006c06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d007      	beq.n	8006c3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0201 	orr.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e005      	b.n	8006c5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d005      	beq.n	8006c8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2204      	movs	r2, #4
 8006c82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	73fb      	strb	r3, [r7, #15]
 8006c88:	e037      	b.n	8006cfa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 020e 	bic.w	r2, r2, #14
 8006c98:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0201 	bic.w	r2, r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	f003 021f 	and.w	r2, r3, #31
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8006ccc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006cd6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00c      	beq.n	8006cfa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006cf8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	2204      	movs	r2, #4
 8006d3a:	409a      	lsls	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d026      	beq.n	8006d92 <HAL_DMA_IRQHandler+0x7a>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d021      	beq.n	8006d92 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0204 	bic.w	r2, r2, #4
 8006d6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	f003 021f 	and.w	r2, r3, #31
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	2104      	movs	r1, #4
 8006d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d7e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d071      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006d90:	e06c      	b.n	8006e6c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	409a      	lsls	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d02e      	beq.n	8006e04 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d029      	beq.n	8006e04 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10b      	bne.n	8006dd6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 020a 	bic.w	r2, r2, #10
 8006dcc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	f003 021f 	and.w	r2, r3, #31
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	2102      	movs	r1, #2
 8006de4:	fa01 f202 	lsl.w	r2, r1, r2
 8006de8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d038      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006e02:	e033      	b.n	8006e6c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d02a      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d025      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 020e 	bic.w	r2, r2, #14
 8006e30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e36:	f003 021f 	and.w	r2, r3, #31
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	2101      	movs	r1, #1
 8006e40:	fa01 f202 	lsl.w	r2, r1, r2
 8006e44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
}
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e8c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d004      	beq.n	8006ea0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e9e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea4:	f003 021f 	and.w	r2, r3, #31
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d108      	bne.n	8006ed6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ed4:	e007      	b.n	8006ee6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	60da      	str	r2, [r3, #12]
}
 8006ee6:	bf00      	nop
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	4b16      	ldr	r3, [pc, #88]	; (8006f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d802      	bhi.n	8006f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006f08:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e001      	b.n	8006f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006f0e:	4b15      	ldr	r3, [pc, #84]	; (8006f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006f10:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	3b08      	subs	r3, #8
 8006f1e:	4a12      	ldr	r2, [pc, #72]	; (8006f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006f20:	fba2 2303 	umull	r2, r3, r2, r3
 8006f24:	091b      	lsrs	r3, r3, #4
 8006f26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2c:	089b      	lsrs	r3, r3, #2
 8006f2e:	009a      	lsls	r2, r3, #2
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	4413      	add	r3, r2
 8006f34:	461a      	mov	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a0b      	ldr	r2, [pc, #44]	; (8006f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006f3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 031f 	and.w	r3, r3, #31
 8006f46:	2201      	movs	r2, #1
 8006f48:	409a      	lsls	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40020407 	.word	0x40020407
 8006f60:	40020800 	.word	0x40020800
 8006f64:	40020820 	.word	0x40020820
 8006f68:	cccccccd 	.word	0xcccccccd
 8006f6c:	40020880 	.word	0x40020880

08006f70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a08      	ldr	r2, [pc, #32]	; (8006fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006f92:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	409a      	lsls	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	1000823f 	.word	0x1000823f
 8006fb4:	40020940 	.word	0x40020940

08006fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006fc6:	e15a      	b.n	800727e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	2101      	movs	r1, #1
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 814c 	beq.w	8007278 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d00b      	beq.n	8007000 <HAL_GPIO_Init+0x48>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d007      	beq.n	8007000 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ff4:	2b11      	cmp	r3, #17
 8006ff6:	d003      	beq.n	8007000 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b12      	cmp	r3, #18
 8006ffe:	d130      	bne.n	8007062 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	2203      	movs	r2, #3
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	43db      	mvns	r3, r3
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4013      	ands	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007036:	2201      	movs	r2, #1
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	43db      	mvns	r3, r3
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4013      	ands	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	091b      	lsrs	r3, r3, #4
 800704c:	f003 0201 	and.w	r2, r3, #1
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	2203      	movs	r2, #3
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	43db      	mvns	r3, r3
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4013      	ands	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d003      	beq.n	80070a2 <HAL_GPIO_Init+0xea>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b12      	cmp	r3, #18
 80070a0:	d123      	bne.n	80070ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	08da      	lsrs	r2, r3, #3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3208      	adds	r2, #8
 80070aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	220f      	movs	r2, #15
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	43db      	mvns	r3, r3
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4013      	ands	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	08da      	lsrs	r2, r3, #3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3208      	adds	r2, #8
 80070e4:	6939      	ldr	r1, [r7, #16]
 80070e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	2203      	movs	r2, #3
 80070f6:	fa02 f303 	lsl.w	r3, r2, r3
 80070fa:	43db      	mvns	r3, r3
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4013      	ands	r3, r2
 8007100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f003 0203 	and.w	r2, r3, #3
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	4313      	orrs	r3, r2
 8007116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80a6 	beq.w	8007278 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800712c:	4b5b      	ldr	r3, [pc, #364]	; (800729c <HAL_GPIO_Init+0x2e4>)
 800712e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007130:	4a5a      	ldr	r2, [pc, #360]	; (800729c <HAL_GPIO_Init+0x2e4>)
 8007132:	f043 0301 	orr.w	r3, r3, #1
 8007136:	6613      	str	r3, [r2, #96]	; 0x60
 8007138:	4b58      	ldr	r3, [pc, #352]	; (800729c <HAL_GPIO_Init+0x2e4>)
 800713a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	60bb      	str	r3, [r7, #8]
 8007142:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007144:	4a56      	ldr	r2, [pc, #344]	; (80072a0 <HAL_GPIO_Init+0x2e8>)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	089b      	lsrs	r3, r3, #2
 800714a:	3302      	adds	r3, #2
 800714c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007150:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f003 0303 	and.w	r3, r3, #3
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	220f      	movs	r2, #15
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	43db      	mvns	r3, r3
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4013      	ands	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800716e:	d01f      	beq.n	80071b0 <HAL_GPIO_Init+0x1f8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a4c      	ldr	r2, [pc, #304]	; (80072a4 <HAL_GPIO_Init+0x2ec>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d019      	beq.n	80071ac <HAL_GPIO_Init+0x1f4>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a4b      	ldr	r2, [pc, #300]	; (80072a8 <HAL_GPIO_Init+0x2f0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d013      	beq.n	80071a8 <HAL_GPIO_Init+0x1f0>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a4a      	ldr	r2, [pc, #296]	; (80072ac <HAL_GPIO_Init+0x2f4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00d      	beq.n	80071a4 <HAL_GPIO_Init+0x1ec>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a49      	ldr	r2, [pc, #292]	; (80072b0 <HAL_GPIO_Init+0x2f8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d007      	beq.n	80071a0 <HAL_GPIO_Init+0x1e8>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a48      	ldr	r2, [pc, #288]	; (80072b4 <HAL_GPIO_Init+0x2fc>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d101      	bne.n	800719c <HAL_GPIO_Init+0x1e4>
 8007198:	2305      	movs	r3, #5
 800719a:	e00a      	b.n	80071b2 <HAL_GPIO_Init+0x1fa>
 800719c:	2306      	movs	r3, #6
 800719e:	e008      	b.n	80071b2 <HAL_GPIO_Init+0x1fa>
 80071a0:	2304      	movs	r3, #4
 80071a2:	e006      	b.n	80071b2 <HAL_GPIO_Init+0x1fa>
 80071a4:	2303      	movs	r3, #3
 80071a6:	e004      	b.n	80071b2 <HAL_GPIO_Init+0x1fa>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e002      	b.n	80071b2 <HAL_GPIO_Init+0x1fa>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <HAL_GPIO_Init+0x1fa>
 80071b0:	2300      	movs	r3, #0
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	f002 0203 	and.w	r2, r2, #3
 80071b8:	0092      	lsls	r2, r2, #2
 80071ba:	4093      	lsls	r3, r2
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071c2:	4937      	ldr	r1, [pc, #220]	; (80072a0 <HAL_GPIO_Init+0x2e8>)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	089b      	lsrs	r3, r3, #2
 80071c8:	3302      	adds	r3, #2
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80071d0:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <HAL_GPIO_Init+0x300>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	43db      	mvns	r3, r3
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4013      	ands	r3, r2
 80071de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80071f4:	4a30      	ldr	r2, [pc, #192]	; (80072b8 <HAL_GPIO_Init+0x300>)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80071fa:	4b2f      	ldr	r3, [pc, #188]	; (80072b8 <HAL_GPIO_Init+0x300>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	43db      	mvns	r3, r3
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4013      	ands	r3, r2
 8007208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800721e:	4a26      	ldr	r2, [pc, #152]	; (80072b8 <HAL_GPIO_Init+0x300>)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007224:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <HAL_GPIO_Init+0x300>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	43db      	mvns	r3, r3
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4013      	ands	r3, r2
 8007232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007248:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <HAL_GPIO_Init+0x300>)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800724e:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <HAL_GPIO_Init+0x300>)
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	43db      	mvns	r3, r3
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4013      	ands	r3, r2
 800725c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007272:	4a11      	ldr	r2, [pc, #68]	; (80072b8 <HAL_GPIO_Init+0x300>)
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	3301      	adds	r3, #1
 800727c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	f47f ae9d 	bne.w	8006fc8 <HAL_GPIO_Init+0x10>
  }
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000
 80072a0:	40010000 	.word	0x40010000
 80072a4:	48000400 	.word	0x48000400
 80072a8:	48000800 	.word	0x48000800
 80072ac:	48000c00 	.word	0x48000c00
 80072b0:	48001000 	.word	0x48001000
 80072b4:	48001400 	.word	0x48001400
 80072b8:	40010400 	.word	0x40010400

080072bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	887b      	ldrh	r3, [r7, #2]
 80072ce:	4013      	ands	r3, r2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e001      	b.n	80072de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	807b      	strh	r3, [r7, #2]
 80072f8:	4613      	mov	r3, r2
 80072fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072fc:	787b      	ldrb	r3, [r7, #1]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007302:	887a      	ldrh	r2, [r7, #2]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007308:	e002      	b.n	8007310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800730a:	887a      	ldrh	r2, [r7, #2]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d141      	bne.n	80073ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800732a:	4b4b      	ldr	r3, [pc, #300]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007336:	d131      	bne.n	800739c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007338:	4b47      	ldr	r3, [pc, #284]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800733a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800733e:	4a46      	ldr	r2, [pc, #280]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007344:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007348:	4b43      	ldr	r3, [pc, #268]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007350:	4a41      	ldr	r2, [pc, #260]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007356:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007358:	4b40      	ldr	r3, [pc, #256]	; (800745c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2232      	movs	r2, #50	; 0x32
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	4a3f      	ldr	r2, [pc, #252]	; (8007460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007364:	fba2 2303 	umull	r2, r3, r2, r3
 8007368:	0c9b      	lsrs	r3, r3, #18
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800736e:	e002      	b.n	8007376 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3b01      	subs	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007376:	4b38      	ldr	r3, [pc, #224]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800737e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007382:	d102      	bne.n	800738a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f2      	bne.n	8007370 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800738a:	4b33      	ldr	r3, [pc, #204]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007396:	d158      	bne.n	800744a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e057      	b.n	800744c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800739c:	4b2e      	ldr	r3, [pc, #184]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800739e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073a2:	4a2d      	ldr	r2, [pc, #180]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80073ac:	e04d      	b.n	800744a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b4:	d141      	bne.n	800743a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073b6:	4b28      	ldr	r3, [pc, #160]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c2:	d131      	bne.n	8007428 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073c4:	4b24      	ldr	r3, [pc, #144]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ca:	4a23      	ldr	r2, [pc, #140]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073d4:	4b20      	ldr	r3, [pc, #128]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073dc:	4a1e      	ldr	r2, [pc, #120]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073e4:	4b1d      	ldr	r3, [pc, #116]	; (800745c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2232      	movs	r2, #50	; 0x32
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
 80073ee:	4a1c      	ldr	r2, [pc, #112]	; (8007460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80073f0:	fba2 2303 	umull	r2, r3, r2, r3
 80073f4:	0c9b      	lsrs	r3, r3, #18
 80073f6:	3301      	adds	r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073fa:	e002      	b.n	8007402 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3b01      	subs	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007402:	4b15      	ldr	r3, [pc, #84]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800740a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800740e:	d102      	bne.n	8007416 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1f2      	bne.n	80073fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007416:	4b10      	ldr	r3, [pc, #64]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800741e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007422:	d112      	bne.n	800744a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e011      	b.n	800744c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800742a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800742e:	4a0a      	ldr	r2, [pc, #40]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007438:	e007      	b.n	800744a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007442:	4a05      	ldr	r2, [pc, #20]	; (8007458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007448:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40007000 	.word	0x40007000
 800745c:	20000010 	.word	0x20000010
 8007460:	431bde83 	.word	0x431bde83

08007464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b088      	sub	sp, #32
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e308      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d075      	beq.n	800756e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007482:	4ba3      	ldr	r3, [pc, #652]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 030c 	and.w	r3, r3, #12
 800748a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800748c:	4ba0      	ldr	r3, [pc, #640]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b0c      	cmp	r3, #12
 800749a:	d102      	bne.n	80074a2 <HAL_RCC_OscConfig+0x3e>
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d002      	beq.n	80074a8 <HAL_RCC_OscConfig+0x44>
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d10b      	bne.n	80074c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a8:	4b99      	ldr	r3, [pc, #612]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d05b      	beq.n	800756c <HAL_RCC_OscConfig+0x108>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d157      	bne.n	800756c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e2e3      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c8:	d106      	bne.n	80074d8 <HAL_RCC_OscConfig+0x74>
 80074ca:	4b91      	ldr	r3, [pc, #580]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a90      	ldr	r2, [pc, #576]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80074d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	e01d      	b.n	8007514 <HAL_RCC_OscConfig+0xb0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074e0:	d10c      	bne.n	80074fc <HAL_RCC_OscConfig+0x98>
 80074e2:	4b8b      	ldr	r3, [pc, #556]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a8a      	ldr	r2, [pc, #552]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80074e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	4b88      	ldr	r3, [pc, #544]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a87      	ldr	r2, [pc, #540]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80074f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	e00b      	b.n	8007514 <HAL_RCC_OscConfig+0xb0>
 80074fc:	4b84      	ldr	r3, [pc, #528]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a83      	ldr	r2, [pc, #524]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	4b81      	ldr	r3, [pc, #516]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a80      	ldr	r2, [pc, #512]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 800750e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d013      	beq.n	8007544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751c:	f7fd f9ee 	bl	80048fc <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007524:	f7fd f9ea 	bl	80048fc <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b64      	cmp	r3, #100	; 0x64
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e2a8      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007536:	4b76      	ldr	r3, [pc, #472]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCC_OscConfig+0xc0>
 8007542:	e014      	b.n	800756e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007544:	f7fd f9da 	bl	80048fc <HAL_GetTick>
 8007548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800754c:	f7fd f9d6 	bl	80048fc <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b64      	cmp	r3, #100	; 0x64
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e294      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800755e:	4b6c      	ldr	r3, [pc, #432]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1f0      	bne.n	800754c <HAL_RCC_OscConfig+0xe8>
 800756a:	e000      	b.n	800756e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800756c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d075      	beq.n	8007666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800757a:	4b65      	ldr	r3, [pc, #404]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 030c 	and.w	r3, r3, #12
 8007582:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007584:	4b62      	ldr	r3, [pc, #392]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b0c      	cmp	r3, #12
 8007592:	d102      	bne.n	800759a <HAL_RCC_OscConfig+0x136>
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d002      	beq.n	80075a0 <HAL_RCC_OscConfig+0x13c>
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b04      	cmp	r3, #4
 800759e:	d11f      	bne.n	80075e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075a0:	4b5b      	ldr	r3, [pc, #364]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_RCC_OscConfig+0x154>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e267      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075b8:	4b55      	ldr	r3, [pc, #340]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	061b      	lsls	r3, r3, #24
 80075c6:	4952      	ldr	r1, [pc, #328]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80075cc:	4b51      	ldr	r3, [pc, #324]	; (8007714 <HAL_RCC_OscConfig+0x2b0>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fd f947 	bl	8004864 <HAL_InitTick>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d043      	beq.n	8007664 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e253      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d023      	beq.n	8007630 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075e8:	4b49      	ldr	r3, [pc, #292]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a48      	ldr	r2, [pc, #288]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80075ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f4:	f7fd f982 	bl	80048fc <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075fc:	f7fd f97e 	bl	80048fc <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e23c      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800760e:	4b40      	ldr	r3, [pc, #256]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0f0      	beq.n	80075fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800761a:	4b3d      	ldr	r3, [pc, #244]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	061b      	lsls	r3, r3, #24
 8007628:	4939      	ldr	r1, [pc, #228]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 800762a:	4313      	orrs	r3, r2
 800762c:	604b      	str	r3, [r1, #4]
 800762e:	e01a      	b.n	8007666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007630:	4b37      	ldr	r3, [pc, #220]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a36      	ldr	r2, [pc, #216]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800763a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763c:	f7fd f95e 	bl	80048fc <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007644:	f7fd f95a 	bl	80048fc <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e218      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007656:	4b2e      	ldr	r3, [pc, #184]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f0      	bne.n	8007644 <HAL_RCC_OscConfig+0x1e0>
 8007662:	e000      	b.n	8007666 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007664:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d03c      	beq.n	80076ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d01c      	beq.n	80076b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800767a:	4b25      	ldr	r3, [pc, #148]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 800767c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007680:	4a23      	ldr	r2, [pc, #140]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800768a:	f7fd f937 	bl	80048fc <HAL_GetTick>
 800768e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007690:	e008      	b.n	80076a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007692:	f7fd f933 	bl	80048fc <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e1f1      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076a4:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80076a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d0ef      	beq.n	8007692 <HAL_RCC_OscConfig+0x22e>
 80076b2:	e01b      	b.n	80076ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076b4:	4b16      	ldr	r3, [pc, #88]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80076b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ba:	4a15      	ldr	r2, [pc, #84]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c4:	f7fd f91a 	bl	80048fc <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076cc:	f7fd f916 	bl	80048fc <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e1d4      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076de:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 80076e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1ef      	bne.n	80076cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 80ab 	beq.w	8007850 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076fa:	2300      	movs	r3, #0
 80076fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076fe:	4b04      	ldr	r3, [pc, #16]	; (8007710 <HAL_RCC_OscConfig+0x2ac>)
 8007700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_RCC_OscConfig+0x2b4>
 800770a:	2301      	movs	r3, #1
 800770c:	e005      	b.n	800771a <HAL_RCC_OscConfig+0x2b6>
 800770e:	bf00      	nop
 8007710:	40021000 	.word	0x40021000
 8007714:	20000014 	.word	0x20000014
 8007718:	2300      	movs	r3, #0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00d      	beq.n	800773a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800771e:	4baf      	ldr	r3, [pc, #700]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007722:	4aae      	ldr	r2, [pc, #696]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007728:	6593      	str	r3, [r2, #88]	; 0x58
 800772a:	4bac      	ldr	r3, [pc, #688]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 800772c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007736:	2301      	movs	r3, #1
 8007738:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800773a:	4ba9      	ldr	r3, [pc, #676]	; (80079e0 <HAL_RCC_OscConfig+0x57c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007742:	2b00      	cmp	r3, #0
 8007744:	d118      	bne.n	8007778 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007746:	4ba6      	ldr	r3, [pc, #664]	; (80079e0 <HAL_RCC_OscConfig+0x57c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4aa5      	ldr	r2, [pc, #660]	; (80079e0 <HAL_RCC_OscConfig+0x57c>)
 800774c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007752:	f7fd f8d3 	bl	80048fc <HAL_GetTick>
 8007756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007758:	e008      	b.n	800776c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800775a:	f7fd f8cf 	bl	80048fc <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e18d      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800776c:	4b9c      	ldr	r3, [pc, #624]	; (80079e0 <HAL_RCC_OscConfig+0x57c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0f0      	beq.n	800775a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d108      	bne.n	8007792 <HAL_RCC_OscConfig+0x32e>
 8007780:	4b96      	ldr	r3, [pc, #600]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007786:	4a95      	ldr	r2, [pc, #596]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007788:	f043 0301 	orr.w	r3, r3, #1
 800778c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007790:	e024      	b.n	80077dc <HAL_RCC_OscConfig+0x378>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b05      	cmp	r3, #5
 8007798:	d110      	bne.n	80077bc <HAL_RCC_OscConfig+0x358>
 800779a:	4b90      	ldr	r3, [pc, #576]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 800779c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a0:	4a8e      	ldr	r2, [pc, #568]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80077a2:	f043 0304 	orr.w	r3, r3, #4
 80077a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077aa:	4b8c      	ldr	r3, [pc, #560]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80077ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b0:	4a8a      	ldr	r2, [pc, #552]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80077b2:	f043 0301 	orr.w	r3, r3, #1
 80077b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077ba:	e00f      	b.n	80077dc <HAL_RCC_OscConfig+0x378>
 80077bc:	4b87      	ldr	r3, [pc, #540]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80077be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c2:	4a86      	ldr	r2, [pc, #536]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077cc:	4b83      	ldr	r3, [pc, #524]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80077ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d2:	4a82      	ldr	r2, [pc, #520]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80077d4:	f023 0304 	bic.w	r3, r3, #4
 80077d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d016      	beq.n	8007812 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e4:	f7fd f88a 	bl	80048fc <HAL_GetTick>
 80077e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077ea:	e00a      	b.n	8007802 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ec:	f7fd f886 	bl	80048fc <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e142      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007802:	4b76      	ldr	r3, [pc, #472]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0ed      	beq.n	80077ec <HAL_RCC_OscConfig+0x388>
 8007810:	e015      	b.n	800783e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007812:	f7fd f873 	bl	80048fc <HAL_GetTick>
 8007816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007818:	e00a      	b.n	8007830 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800781a:	f7fd f86f 	bl	80048fc <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	f241 3288 	movw	r2, #5000	; 0x1388
 8007828:	4293      	cmp	r3, r2
 800782a:	d901      	bls.n	8007830 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e12b      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007830:	4b6a      	ldr	r3, [pc, #424]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1ed      	bne.n	800781a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800783e:	7ffb      	ldrb	r3, [r7, #31]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d105      	bne.n	8007850 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007844:	4b65      	ldr	r3, [pc, #404]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007848:	4a64      	ldr	r2, [pc, #400]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 800784a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800784e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d03c      	beq.n	80078d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01c      	beq.n	800789e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007864:	4b5d      	ldr	r3, [pc, #372]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800786a:	4a5c      	ldr	r2, [pc, #368]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 800786c:	f043 0301 	orr.w	r3, r3, #1
 8007870:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007874:	f7fd f842 	bl	80048fc <HAL_GetTick>
 8007878:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800787a:	e008      	b.n	800788e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800787c:	f7fd f83e 	bl	80048fc <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	2b02      	cmp	r3, #2
 8007888:	d901      	bls.n	800788e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e0fc      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800788e:	4b53      	ldr	r3, [pc, #332]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0ef      	beq.n	800787c <HAL_RCC_OscConfig+0x418>
 800789c:	e01b      	b.n	80078d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800789e:	4b4f      	ldr	r3, [pc, #316]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80078a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078a4:	4a4d      	ldr	r2, [pc, #308]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80078a6:	f023 0301 	bic.w	r3, r3, #1
 80078aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ae:	f7fd f825 	bl	80048fc <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078b6:	f7fd f821 	bl	80048fc <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e0df      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078c8:	4b44      	ldr	r3, [pc, #272]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80078ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1ef      	bne.n	80078b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80d3 	beq.w	8007a86 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078e0:	4b3e      	ldr	r3, [pc, #248]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 030c 	and.w	r3, r3, #12
 80078e8:	2b0c      	cmp	r3, #12
 80078ea:	f000 808d 	beq.w	8007a08 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d15a      	bne.n	80079ac <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f6:	4b39      	ldr	r3, [pc, #228]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a38      	ldr	r2, [pc, #224]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80078fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007902:	f7fc fffb 	bl	80048fc <HAL_GetTick>
 8007906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007908:	e008      	b.n	800791c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800790a:	f7fc fff7 	bl	80048fc <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d901      	bls.n	800791c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e0b5      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800791c:	4b2f      	ldr	r3, [pc, #188]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f0      	bne.n	800790a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007928:	4b2c      	ldr	r3, [pc, #176]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	4b2d      	ldr	r3, [pc, #180]	; (80079e4 <HAL_RCC_OscConfig+0x580>)
 800792e:	4013      	ands	r3, r2
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6a11      	ldr	r1, [r2, #32]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007938:	3a01      	subs	r2, #1
 800793a:	0112      	lsls	r2, r2, #4
 800793c:	4311      	orrs	r1, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007942:	0212      	lsls	r2, r2, #8
 8007944:	4311      	orrs	r1, r2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800794a:	0852      	lsrs	r2, r2, #1
 800794c:	3a01      	subs	r2, #1
 800794e:	0552      	lsls	r2, r2, #21
 8007950:	4311      	orrs	r1, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007956:	0852      	lsrs	r2, r2, #1
 8007958:	3a01      	subs	r2, #1
 800795a:	0652      	lsls	r2, r2, #25
 800795c:	4311      	orrs	r1, r2
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007962:	06d2      	lsls	r2, r2, #27
 8007964:	430a      	orrs	r2, r1
 8007966:	491d      	ldr	r1, [pc, #116]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007968:	4313      	orrs	r3, r2
 800796a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800796c:	4b1b      	ldr	r3, [pc, #108]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a1a      	ldr	r2, [pc, #104]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 8007972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007976:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007978:	4b18      	ldr	r3, [pc, #96]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	4a17      	ldr	r2, [pc, #92]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 800797e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007982:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007984:	f7fc ffba 	bl	80048fc <HAL_GetTick>
 8007988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800798c:	f7fc ffb6 	bl	80048fc <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e074      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0f0      	beq.n	800798c <HAL_RCC_OscConfig+0x528>
 80079aa:	e06c      	b.n	8007a86 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ac:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80079b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80079b8:	4b08      	ldr	r3, [pc, #32]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	4a07      	ldr	r2, [pc, #28]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80079c4:	4b05      	ldr	r3, [pc, #20]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	4a04      	ldr	r2, [pc, #16]	; (80079dc <HAL_RCC_OscConfig+0x578>)
 80079ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80079ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d4:	f7fc ff92 	bl	80048fc <HAL_GetTick>
 80079d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079da:	e00e      	b.n	80079fa <HAL_RCC_OscConfig+0x596>
 80079dc:	40021000 	.word	0x40021000
 80079e0:	40007000 	.word	0x40007000
 80079e4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e8:	f7fc ff88 	bl	80048fc <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e046      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079fa:	4b25      	ldr	r3, [pc, #148]	; (8007a90 <HAL_RCC_OscConfig+0x62c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f0      	bne.n	80079e8 <HAL_RCC_OscConfig+0x584>
 8007a06:	e03e      	b.n	8007a86 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e039      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007a14:	4b1e      	ldr	r3, [pc, #120]	; (8007a90 <HAL_RCC_OscConfig+0x62c>)
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f003 0203 	and.w	r2, r3, #3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d12c      	bne.n	8007a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	3b01      	subs	r3, #1
 8007a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d123      	bne.n	8007a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d11b      	bne.n	8007a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d113      	bne.n	8007a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	3b01      	subs	r3, #1
 8007a68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d109      	bne.n	8007a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a78:	085b      	lsrs	r3, r3, #1
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d001      	beq.n	8007a86 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40021000 	.word	0x40021000

08007a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e11e      	b.n	8007cea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007aac:	4b91      	ldr	r3, [pc, #580]	; (8007cf4 <HAL_RCC_ClockConfig+0x260>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d910      	bls.n	8007adc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aba:	4b8e      	ldr	r3, [pc, #568]	; (8007cf4 <HAL_RCC_ClockConfig+0x260>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f023 020f 	bic.w	r2, r3, #15
 8007ac2:	498c      	ldr	r1, [pc, #560]	; (8007cf4 <HAL_RCC_ClockConfig+0x260>)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aca:	4b8a      	ldr	r3, [pc, #552]	; (8007cf4 <HAL_RCC_ClockConfig+0x260>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d001      	beq.n	8007adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e106      	b.n	8007cea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d073      	beq.n	8007bd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d129      	bne.n	8007b44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007af0:	4b81      	ldr	r3, [pc, #516]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e0f4      	b.n	8007cea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007b00:	f000 f972 	bl	8007de8 <RCC_GetSysClockFreqFromPLLSource>
 8007b04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4a7c      	ldr	r2, [pc, #496]	; (8007cfc <HAL_RCC_ClockConfig+0x268>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d93f      	bls.n	8007b8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b0e:	4b7a      	ldr	r3, [pc, #488]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d033      	beq.n	8007b8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d12f      	bne.n	8007b8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b2e:	4b72      	ldr	r3, [pc, #456]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b36:	4a70      	ldr	r2, [pc, #448]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007b3e:	2380      	movs	r3, #128	; 0x80
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e024      	b.n	8007b8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d107      	bne.n	8007b5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b4c:	4b6a      	ldr	r3, [pc, #424]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d109      	bne.n	8007b6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e0c6      	b.n	8007cea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b5c:	4b66      	ldr	r3, [pc, #408]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e0be      	b.n	8007cea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007b6c:	f000 f8ce 	bl	8007d0c <HAL_RCC_GetSysClockFreq>
 8007b70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	4a61      	ldr	r2, [pc, #388]	; (8007cfc <HAL_RCC_ClockConfig+0x268>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d909      	bls.n	8007b8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b7a:	4b5f      	ldr	r3, [pc, #380]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b82:	4a5d      	ldr	r2, [pc, #372]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007b8a:	2380      	movs	r3, #128	; 0x80
 8007b8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b8e:	4b5a      	ldr	r3, [pc, #360]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f023 0203 	bic.w	r2, r3, #3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	4957      	ldr	r1, [pc, #348]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ba0:	f7fc feac 	bl	80048fc <HAL_GetTick>
 8007ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba6:	e00a      	b.n	8007bbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ba8:	f7fc fea8 	bl	80048fc <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e095      	b.n	8007cea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bbe:	4b4e      	ldr	r3, [pc, #312]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 020c 	and.w	r2, r3, #12
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d1eb      	bne.n	8007ba8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d023      	beq.n	8007c24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007be8:	4b43      	ldr	r3, [pc, #268]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	4a42      	ldr	r2, [pc, #264]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007bee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bf2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007c00:	4b3d      	ldr	r3, [pc, #244]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c08:	4a3b      	ldr	r2, [pc, #236]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007c0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c10:	4b39      	ldr	r3, [pc, #228]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	4936      	ldr	r1, [pc, #216]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	608b      	str	r3, [r1, #8]
 8007c22:	e008      	b.n	8007c36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b80      	cmp	r3, #128	; 0x80
 8007c28:	d105      	bne.n	8007c36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007c2a:	4b33      	ldr	r3, [pc, #204]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	4a32      	ldr	r2, [pc, #200]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c36:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <HAL_RCC_ClockConfig+0x260>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 030f 	and.w	r3, r3, #15
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d21d      	bcs.n	8007c80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c44:	4b2b      	ldr	r3, [pc, #172]	; (8007cf4 <HAL_RCC_ClockConfig+0x260>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f023 020f 	bic.w	r2, r3, #15
 8007c4c:	4929      	ldr	r1, [pc, #164]	; (8007cf4 <HAL_RCC_ClockConfig+0x260>)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c54:	f7fc fe52 	bl	80048fc <HAL_GetTick>
 8007c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c5a:	e00a      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c5c:	f7fc fe4e 	bl	80048fc <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e03b      	b.n	8007cea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c72:	4b20      	ldr	r3, [pc, #128]	; (8007cf4 <HAL_RCC_ClockConfig+0x260>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d1ed      	bne.n	8007c5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d008      	beq.n	8007c9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	4917      	ldr	r1, [pc, #92]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007caa:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	490f      	ldr	r1, [pc, #60]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cbe:	f000 f825 	bl	8007d0c <HAL_RCC_GetSysClockFreq>
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <HAL_RCC_ClockConfig+0x264>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	091b      	lsrs	r3, r3, #4
 8007cca:	f003 030f 	and.w	r3, r3, #15
 8007cce:	4a0c      	ldr	r2, [pc, #48]	; (8007d00 <HAL_RCC_ClockConfig+0x26c>)
 8007cd0:	5cd3      	ldrb	r3, [r2, r3]
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	fa21 f303 	lsr.w	r3, r1, r3
 8007cda:	4a0a      	ldr	r2, [pc, #40]	; (8007d04 <HAL_RCC_ClockConfig+0x270>)
 8007cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <HAL_RCC_ClockConfig+0x274>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fc fdbe 	bl	8004864 <HAL_InitTick>
 8007ce8:	4603      	mov	r3, r0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	40022000 	.word	0x40022000
 8007cf8:	40021000 	.word	0x40021000
 8007cfc:	04c4b400 	.word	0x04c4b400
 8007d00:	0800c36c 	.word	0x0800c36c
 8007d04:	20000010 	.word	0x20000010
 8007d08:	20000014 	.word	0x20000014

08007d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007d12:	4b2c      	ldr	r3, [pc, #176]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 030c 	and.w	r3, r3, #12
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	d102      	bne.n	8007d24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d1e:	4b2a      	ldr	r3, [pc, #168]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	e047      	b.n	8007db4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007d24:	4b27      	ldr	r3, [pc, #156]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f003 030c 	and.w	r3, r3, #12
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d102      	bne.n	8007d36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d30:	4b26      	ldr	r3, [pc, #152]	; (8007dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d32:	613b      	str	r3, [r7, #16]
 8007d34:	e03e      	b.n	8007db4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007d36:	4b23      	ldr	r3, [pc, #140]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f003 030c 	and.w	r3, r3, #12
 8007d3e:	2b0c      	cmp	r3, #12
 8007d40:	d136      	bne.n	8007db0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d42:	4b20      	ldr	r3, [pc, #128]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	091b      	lsrs	r3, r3, #4
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	3301      	adds	r3, #1
 8007d58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d10c      	bne.n	8007d7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d60:	4a1a      	ldr	r2, [pc, #104]	; (8007dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d68:	4a16      	ldr	r2, [pc, #88]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d6a:	68d2      	ldr	r2, [r2, #12]
 8007d6c:	0a12      	lsrs	r2, r2, #8
 8007d6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d72:	fb02 f303 	mul.w	r3, r2, r3
 8007d76:	617b      	str	r3, [r7, #20]
      break;
 8007d78:	e00c      	b.n	8007d94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d7a:	4a13      	ldr	r2, [pc, #76]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d82:	4a10      	ldr	r2, [pc, #64]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d84:	68d2      	ldr	r2, [r2, #12]
 8007d86:	0a12      	lsrs	r2, r2, #8
 8007d88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d8c:	fb02 f303 	mul.w	r3, r2, r3
 8007d90:	617b      	str	r3, [r7, #20]
      break;
 8007d92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	0e5b      	lsrs	r3, r3, #25
 8007d9a:	f003 0303 	and.w	r3, r3, #3
 8007d9e:	3301      	adds	r3, #1
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	e001      	b.n	8007db4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007db4:	693b      	ldr	r3, [r7, #16]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	40021000 	.word	0x40021000
 8007dc8:	00f42400 	.word	0x00f42400
 8007dcc:	007a1200 	.word	0x007a1200

08007dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dd4:	4b03      	ldr	r3, [pc, #12]	; (8007de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000010 	.word	0x20000010

08007de8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007dee:	4b1e      	ldr	r3, [pc, #120]	; (8007e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007df8:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	091b      	lsrs	r3, r3, #4
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d10c      	bne.n	8007e26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e0c:	4a17      	ldr	r2, [pc, #92]	; (8007e6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e14:	4a14      	ldr	r2, [pc, #80]	; (8007e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e16:	68d2      	ldr	r2, [r2, #12]
 8007e18:	0a12      	lsrs	r2, r2, #8
 8007e1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e1e:	fb02 f303 	mul.w	r3, r2, r3
 8007e22:	617b      	str	r3, [r7, #20]
    break;
 8007e24:	e00c      	b.n	8007e40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e26:	4a12      	ldr	r2, [pc, #72]	; (8007e70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2e:	4a0e      	ldr	r2, [pc, #56]	; (8007e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e30:	68d2      	ldr	r2, [r2, #12]
 8007e32:	0a12      	lsrs	r2, r2, #8
 8007e34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
 8007e3c:	617b      	str	r3, [r7, #20]
    break;
 8007e3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e40:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	0e5b      	lsrs	r3, r3, #25
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007e5a:	687b      	ldr	r3, [r7, #4]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	40021000 	.word	0x40021000
 8007e6c:	007a1200 	.word	0x007a1200
 8007e70:	00f42400 	.word	0x00f42400

08007e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e80:	2300      	movs	r3, #0
 8007e82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 8098 	beq.w	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e92:	2300      	movs	r3, #0
 8007e94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e96:	4b43      	ldr	r3, [pc, #268]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10d      	bne.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ea2:	4b40      	ldr	r3, [pc, #256]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea6:	4a3f      	ldr	r2, [pc, #252]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eac:	6593      	str	r3, [r2, #88]	; 0x58
 8007eae:	4b3d      	ldr	r3, [pc, #244]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb6:	60bb      	str	r3, [r7, #8]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ebe:	4b3a      	ldr	r3, [pc, #232]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a39      	ldr	r2, [pc, #228]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007eca:	f7fc fd17 	bl	80048fc <HAL_GetTick>
 8007ece:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ed0:	e009      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ed2:	f7fc fd13 	bl	80048fc <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d902      	bls.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	74fb      	strb	r3, [r7, #19]
        break;
 8007ee4:	e005      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ee6:	4b30      	ldr	r3, [pc, #192]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0ef      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ef2:	7cfb      	ldrb	r3, [r7, #19]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d159      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ef8:	4b2a      	ldr	r3, [pc, #168]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01e      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d019      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f14:	4b23      	ldr	r3, [pc, #140]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f20:	4b20      	ldr	r3, [pc, #128]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f26:	4a1f      	ldr	r2, [pc, #124]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f30:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f36:	4a1b      	ldr	r2, [pc, #108]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f40:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d016      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f52:	f7fc fcd3 	bl	80048fc <HAL_GetTick>
 8007f56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f58:	e00b      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f5a:	f7fc fccf 	bl	80048fc <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d902      	bls.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	74fb      	strb	r3, [r7, #19]
            break;
 8007f70:	e006      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f72:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0ec      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007f80:	7cfb      	ldrb	r3, [r7, #19]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f86:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f94:	4903      	ldr	r1, [pc, #12]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f9c:	e008      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f9e:	7cfb      	ldrb	r3, [r7, #19]
 8007fa0:	74bb      	strb	r3, [r7, #18]
 8007fa2:	e005      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fac:	7cfb      	ldrb	r3, [r7, #19]
 8007fae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fb0:	7c7b      	ldrb	r3, [r7, #17]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d105      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fb6:	4baf      	ldr	r3, [pc, #700]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fba:	4aae      	ldr	r2, [pc, #696]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fce:	4ba9      	ldr	r3, [pc, #676]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd4:	f023 0203 	bic.w	r2, r3, #3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	49a5      	ldr	r1, [pc, #660]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ff0:	4ba0      	ldr	r3, [pc, #640]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff6:	f023 020c 	bic.w	r2, r3, #12
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	499d      	ldr	r1, [pc, #628]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008000:	4313      	orrs	r3, r2
 8008002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008012:	4b98      	ldr	r3, [pc, #608]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4994      	ldr	r1, [pc, #592]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008034:	4b8f      	ldr	r3, [pc, #572]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	498c      	ldr	r1, [pc, #560]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0310 	and.w	r3, r3, #16
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008056:	4b87      	ldr	r3, [pc, #540]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	4983      	ldr	r1, [pc, #524]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0320 	and.w	r3, r3, #32
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008078:	4b7e      	ldr	r3, [pc, #504]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	497b      	ldr	r1, [pc, #492]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008088:	4313      	orrs	r3, r2
 800808a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800809a:	4b76      	ldr	r3, [pc, #472]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	4972      	ldr	r1, [pc, #456]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080bc:	4b6d      	ldr	r3, [pc, #436]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	496a      	ldr	r1, [pc, #424]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080de:	4b65      	ldr	r3, [pc, #404]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	4961      	ldr	r1, [pc, #388]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008100:	4b5c      	ldr	r3, [pc, #368]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008106:	f023 0203 	bic.w	r2, r3, #3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810e:	4959      	ldr	r1, [pc, #356]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008110:	4313      	orrs	r3, r2
 8008112:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008122:	4b54      	ldr	r3, [pc, #336]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	4950      	ldr	r1, [pc, #320]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008140:	2b00      	cmp	r3, #0
 8008142:	d015      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008144:	4b4b      	ldr	r3, [pc, #300]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008152:	4948      	ldr	r1, [pc, #288]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008162:	d105      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008164:	4b43      	ldr	r3, [pc, #268]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	4a42      	ldr	r2, [pc, #264]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800816a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800816e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008178:	2b00      	cmp	r3, #0
 800817a:	d015      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800817c:	4b3d      	ldr	r3, [pc, #244]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800817e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818a:	493a      	ldr	r1, [pc, #232]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800818c:	4313      	orrs	r3, r2
 800818e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800819a:	d105      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800819c:	4b35      	ldr	r3, [pc, #212]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	4a34      	ldr	r2, [pc, #208]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d015      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081b4:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c2:	492c      	ldr	r1, [pc, #176]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081d2:	d105      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081d4:	4b27      	ldr	r3, [pc, #156]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	4a26      	ldr	r2, [pc, #152]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d015      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081ec:	4b21      	ldr	r3, [pc, #132]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fa:	491e      	ldr	r1, [pc, #120]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800820a:	d105      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800820c:	4b19      	ldr	r3, [pc, #100]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	4a18      	ldr	r2, [pc, #96]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008216:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d015      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008224:	4b13      	ldr	r3, [pc, #76]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	4910      	ldr	r1, [pc, #64]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008234:	4313      	orrs	r3, r2
 8008236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008242:	d105      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008244:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	4a0a      	ldr	r2, [pc, #40]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800824a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800824e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d018      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800825c:	4b05      	ldr	r3, [pc, #20]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800825e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826a:	4902      	ldr	r1, [pc, #8]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008272:	e001      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008274:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008280:	d105      	bne.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008282:	4b21      	ldr	r3, [pc, #132]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	4a20      	ldr	r2, [pc, #128]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800828c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d015      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800829a:	4b1b      	ldr	r3, [pc, #108]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800829c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a8:	4917      	ldr	r1, [pc, #92]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b8:	d105      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80082ba:	4b13      	ldr	r3, [pc, #76]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	4a12      	ldr	r2, [pc, #72]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082c4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d015      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082d2:	4b0d      	ldr	r3, [pc, #52]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e0:	4909      	ldr	r1, [pc, #36]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082f0:	d105      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082f2:	4b05      	ldr	r3, [pc, #20]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	4a04      	ldr	r2, [pc, #16]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082fc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80082fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	40021000 	.word	0x40021000

0800830c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e084      	b.n	8008428 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d106      	bne.n	800833e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7fb fc8d 	bl	8003c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008354:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800835e:	d902      	bls.n	8008366 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e002      	b.n	800836c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800836a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008374:	d007      	beq.n	8008386 <HAL_SPI_Init+0x7a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800837e:	d002      	beq.n	8008386 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10b      	bne.n	80083a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008396:	d903      	bls.n	80083a0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	631a      	str	r2, [r3, #48]	; 0x30
 800839e:	e002      	b.n	80083a6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	431a      	orrs	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	ea42 0103 	orr.w	r1, r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	0c1b      	lsrs	r3, r3, #16
 80083e6:	f003 0204 	and.w	r2, r3, #4
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f4:	431a      	orrs	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	ea42 0103 	orr.w	r1, r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	430a      	orrs	r2, r1
 8008406:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	69da      	ldr	r2, [r3, #28]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008416:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	4613      	mov	r3, r2
 800843e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <HAL_SPI_Transmit+0x22>
 800844e:	2302      	movs	r3, #2
 8008450:	e150      	b.n	80086f4 <HAL_SPI_Transmit+0x2c4>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800845a:	f7fc fa4f 	bl	80048fc <HAL_GetTick>
 800845e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b01      	cmp	r3, #1
 800846e:	d002      	beq.n	8008476 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008470:	2302      	movs	r3, #2
 8008472:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008474:	e135      	b.n	80086e2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <HAL_SPI_Transmit+0x52>
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008486:	e12c      	b.n	80086e2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2203      	movs	r2, #3
 800848c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	88fa      	ldrh	r2, [r7, #6]
 80084a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	88fa      	ldrh	r2, [r7, #6]
 80084a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d2:	d107      	bne.n	80084e4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ee:	2b40      	cmp	r3, #64	; 0x40
 80084f0:	d007      	beq.n	8008502 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800850a:	d94b      	bls.n	80085a4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <HAL_SPI_Transmit+0xea>
 8008514:	8afb      	ldrh	r3, [r7, #22]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d13e      	bne.n	8008598 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	881a      	ldrh	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	1c9a      	adds	r2, r3, #2
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800853e:	e02b      	b.n	8008598 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b02      	cmp	r3, #2
 800854c:	d112      	bne.n	8008574 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008552:	881a      	ldrh	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	1c9a      	adds	r2, r3, #2
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008568:	b29b      	uxth	r3, r3
 800856a:	3b01      	subs	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008572:	e011      	b.n	8008598 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008574:	f7fc f9c2 	bl	80048fc <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d803      	bhi.n	800858c <HAL_SPI_Transmit+0x15c>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800858a:	d102      	bne.n	8008592 <HAL_SPI_Transmit+0x162>
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d102      	bne.n	8008598 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008596:	e0a4      	b.n	80086e2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800859c:	b29b      	uxth	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1ce      	bne.n	8008540 <HAL_SPI_Transmit+0x110>
 80085a2:	e07c      	b.n	800869e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_SPI_Transmit+0x182>
 80085ac:	8afb      	ldrh	r3, [r7, #22]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d170      	bne.n	8008694 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d912      	bls.n	80085e2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c0:	881a      	ldrh	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	1c9a      	adds	r2, r3, #2
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b02      	subs	r3, #2
 80085da:	b29a      	uxth	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085e0:	e058      	b.n	8008694 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	7812      	ldrb	r2, [r2, #0]
 80085ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008608:	e044      	b.n	8008694 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	d12b      	bne.n	8008670 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b01      	cmp	r3, #1
 8008620:	d912      	bls.n	8008648 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008626:	881a      	ldrh	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	1c9a      	adds	r2, r3, #2
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800863c:	b29b      	uxth	r3, r3
 800863e:	3b02      	subs	r3, #2
 8008640:	b29a      	uxth	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008646:	e025      	b.n	8008694 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	7812      	ldrb	r2, [r2, #0]
 8008654:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800866e:	e011      	b.n	8008694 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008670:	f7fc f944 	bl	80048fc <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	429a      	cmp	r2, r3
 800867e:	d803      	bhi.n	8008688 <HAL_SPI_Transmit+0x258>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008686:	d102      	bne.n	800868e <HAL_SPI_Transmit+0x25e>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008692:	e026      	b.n	80086e2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1b5      	bne.n	800860a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 f901 	bl	80088aa <SPI_EndRxTxTransaction>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2220      	movs	r2, #32
 80086b2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086bc:	2300      	movs	r3, #0
 80086be:	613b      	str	r3, [r7, #16]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	613b      	str	r3, [r7, #16]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	77fb      	strb	r3, [r7, #31]
 80086de:	e000      	b.n	80086e2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80086e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80086f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3720      	adds	r7, #32
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	4613      	mov	r3, r2
 800870a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800870c:	e04c      	b.n	80087a8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008714:	d048      	beq.n	80087a8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008716:	f7fc f8f1 	bl	80048fc <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d902      	bls.n	800872c <SPI_WaitFlagStateUntilTimeout+0x30>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d13d      	bne.n	80087a8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800873a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008744:	d111      	bne.n	800876a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800874e:	d004      	beq.n	800875a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008758:	d107      	bne.n	800876a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008768:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008772:	d10f      	bne.n	8008794 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008792:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e00f      	b.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	4013      	ands	r3, r2
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	bf0c      	ite	eq
 80087b8:	2301      	moveq	r3, #1
 80087ba:	2300      	movne	r3, #0
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d1a3      	bne.n	800870e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80087de:	e057      	b.n	8008890 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80087e6:	d106      	bne.n	80087f6 <SPI_WaitFifoStateUntilTimeout+0x26>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d103      	bne.n	80087f6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087fc:	d048      	beq.n	8008890 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80087fe:	f7fc f87d 	bl	80048fc <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d902      	bls.n	8008814 <SPI_WaitFifoStateUntilTimeout+0x44>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d13d      	bne.n	8008890 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008822:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800882c:	d111      	bne.n	8008852 <SPI_WaitFifoStateUntilTimeout+0x82>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008836:	d004      	beq.n	8008842 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008840:	d107      	bne.n	8008852 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008850:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885a:	d10f      	bne.n	800887c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800887a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e008      	b.n	80088a2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689a      	ldr	r2, [r3, #8]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4013      	ands	r3, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	d19f      	bne.n	80087e0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b086      	sub	sp, #24
 80088ae:	af02      	add	r7, sp, #8
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2200      	movs	r2, #0
 80088be:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff ff84 	bl	80087d0 <SPI_WaitFifoStateUntilTimeout>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088d2:	f043 0220 	orr.w	r2, r3, #32
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e027      	b.n	800892e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2200      	movs	r2, #0
 80088e6:	2180      	movs	r1, #128	; 0x80
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f7ff ff07 	bl	80086fc <SPI_WaitFlagStateUntilTimeout>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f8:	f043 0220 	orr.w	r2, r3, #32
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e014      	b.n	800892e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2200      	movs	r2, #0
 800890c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7ff ff5d 	bl	80087d0 <SPI_WaitFifoStateUntilTimeout>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d007      	beq.n	800892c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008920:	f043 0220 	orr.w	r2, r3, #32
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e000      	b.n	800892e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e049      	b.n	80089dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7fb fe7b 	bl	8004658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3304      	adds	r3, #4
 8008972:	4619      	mov	r1, r3
 8008974:	4610      	mov	r0, r2
 8008976:	f000 fc51 	bl	800921c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d001      	beq.n	80089fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e019      	b.n	8008a30 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <HAL_TIM_Base_Start+0x58>)
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b06      	cmp	r3, #6
 8008a14:	d00b      	beq.n	8008a2e <HAL_TIM_Base_Start+0x4a>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a1c:	d007      	beq.n	8008a2e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f042 0201 	orr.w	r2, r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	00010007 	.word	0x00010007

08008a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d001      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e021      	b.n	8008a9c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f042 0201 	orr.w	r2, r2, #1
 8008a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <HAL_TIM_Base_Start_IT+0x68>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b06      	cmp	r3, #6
 8008a80:	d00b      	beq.n	8008a9a <HAL_TIM_Base_Start_IT+0x5a>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a88:	d007      	beq.n	8008a9a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f042 0201 	orr.w	r2, r2, #1
 8008a98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	00010007 	.word	0x00010007

08008aac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0201 	bic.w	r2, r2, #1
 8008ac2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6a1a      	ldr	r2, [r3, #32]
 8008aca:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ace:	4013      	ands	r3, r2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10f      	bne.n	8008af4 <HAL_TIM_Base_Stop_IT+0x48>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6a1a      	ldr	r2, [r3, #32]
 8008ada:	f244 4344 	movw	r3, #17476	; 0x4444
 8008ade:	4013      	ands	r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d107      	bne.n	8008af4 <HAL_TIM_Base_Stop_IT+0x48>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0201 	bic.w	r2, r2, #1
 8008af2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b086      	sub	sp, #24
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e097      	b.n	8008c4e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d106      	bne.n	8008b38 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7fb fd34 	bl	80045a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6812      	ldr	r2, [r2, #0]
 8008b4a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008b4e:	f023 0307 	bic.w	r3, r3, #7
 8008b52:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	f000 fb5c 	bl	800921c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b8c:	f023 0303 	bic.w	r3, r3, #3
 8008b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	021b      	lsls	r3, r3, #8
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008baa:	f023 030c 	bic.w	r3, r3, #12
 8008bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	011a      	lsls	r2, r3, #4
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	031b      	lsls	r3, r3, #12
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008be8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008bf0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d122      	bne.n	8008cb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d11b      	bne.n	8008cb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f06f 0202 	mvn.w	r2, #2
 8008c82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 faa1 	bl	80091e0 <HAL_TIM_IC_CaptureCallback>
 8008c9e:	e005      	b.n	8008cac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fa93 	bl	80091cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 faa4 	bl	80091f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d122      	bne.n	8008d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d11b      	bne.n	8008d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f06f 0204 	mvn.w	r2, #4
 8008cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fa77 	bl	80091e0 <HAL_TIM_IC_CaptureCallback>
 8008cf2:	e005      	b.n	8008d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa69 	bl	80091cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa7a 	bl	80091f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d122      	bne.n	8008d5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f003 0308 	and.w	r3, r3, #8
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	d11b      	bne.n	8008d5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f06f 0208 	mvn.w	r2, #8
 8008d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2204      	movs	r2, #4
 8008d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fa4d 	bl	80091e0 <HAL_TIM_IC_CaptureCallback>
 8008d46:	e005      	b.n	8008d54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fa3f 	bl	80091cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa50 	bl	80091f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b10      	cmp	r3, #16
 8008d66:	d122      	bne.n	8008dae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f003 0310 	and.w	r3, r3, #16
 8008d72:	2b10      	cmp	r3, #16
 8008d74:	d11b      	bne.n	8008dae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f06f 0210 	mvn.w	r2, #16
 8008d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2208      	movs	r2, #8
 8008d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fa23 	bl	80091e0 <HAL_TIM_IC_CaptureCallback>
 8008d9a:	e005      	b.n	8008da8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fa15 	bl	80091cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fa26 	bl	80091f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d10e      	bne.n	8008dda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d107      	bne.n	8008dda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f06f 0201 	mvn.w	r2, #1
 8008dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f9ef 	bl	80091b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de4:	2b80      	cmp	r3, #128	; 0x80
 8008de6:	d10e      	bne.n	8008e06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b80      	cmp	r3, #128	; 0x80
 8008df4:	d107      	bne.n	8008e06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fd5d 	bl	80098c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e14:	d10e      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e20:	2b80      	cmp	r3, #128	; 0x80
 8008e22:	d107      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fd50 	bl	80098d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	d10e      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b40      	cmp	r3, #64	; 0x40
 8008e4e:	d107      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f9d4 	bl	8009208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d10e      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	d107      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f06f 0220 	mvn.w	r2, #32
 8008e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fd10 	bl	80098ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e9a:	d10f      	bne.n	8008ebc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eaa:	d107      	bne.n	8008ebc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fd16 	bl	80098e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eca:	d10f      	bne.n	8008eec <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eda:	d107      	bne.n	8008eec <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fd08 	bl	80098fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008efa:	d10f      	bne.n	8008f1c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f0a:	d107      	bne.n	8008f1c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fcfa 	bl	8009910 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f2a:	d10f      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f3a:	d107      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fcec 	bl	8009924 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_TIM_ConfigClockSource+0x18>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e0d2      	b.n	8009112 <HAL_TIM_ConfigClockSource+0x1be>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008f8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa8:	f000 80a9 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x1aa>
 8008fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb0:	d81a      	bhi.n	8008fe8 <HAL_TIM_ConfigClockSource+0x94>
 8008fb2:	2b30      	cmp	r3, #48	; 0x30
 8008fb4:	f000 809a 	beq.w	80090ec <HAL_TIM_ConfigClockSource+0x198>
 8008fb8:	2b30      	cmp	r3, #48	; 0x30
 8008fba:	d809      	bhi.n	8008fd0 <HAL_TIM_ConfigClockSource+0x7c>
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	f000 8095 	beq.w	80090ec <HAL_TIM_ConfigClockSource+0x198>
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	f000 8092 	beq.w	80090ec <HAL_TIM_ConfigClockSource+0x198>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 808f 	beq.w	80090ec <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008fce:	e097      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8008fd0:	2b50      	cmp	r3, #80	; 0x50
 8008fd2:	d05b      	beq.n	800908c <HAL_TIM_ConfigClockSource+0x138>
 8008fd4:	2b50      	cmp	r3, #80	; 0x50
 8008fd6:	d802      	bhi.n	8008fde <HAL_TIM_ConfigClockSource+0x8a>
 8008fd8:	2b40      	cmp	r3, #64	; 0x40
 8008fda:	d077      	beq.n	80090cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008fdc:	e090      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8008fde:	2b60      	cmp	r3, #96	; 0x60
 8008fe0:	d064      	beq.n	80090ac <HAL_TIM_ConfigClockSource+0x158>
 8008fe2:	2b70      	cmp	r3, #112	; 0x70
 8008fe4:	d028      	beq.n	8009038 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8008fe6:	e08b      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8008fe8:	4a4c      	ldr	r2, [pc, #304]	; (800911c <HAL_TIM_ConfigClockSource+0x1c8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d07e      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0x198>
 8008fee:	4a4b      	ldr	r2, [pc, #300]	; (800911c <HAL_TIM_ConfigClockSource+0x1c8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d810      	bhi.n	8009016 <HAL_TIM_ConfigClockSource+0xc2>
 8008ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ff8:	d078      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0x198>
 8008ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ffe:	d803      	bhi.n	8009008 <HAL_TIM_ConfigClockSource+0xb4>
 8009000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009004:	d02f      	beq.n	8009066 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8009006:	e07b      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009008:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800900c:	d06e      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0x198>
 800900e:	4a44      	ldr	r2, [pc, #272]	; (8009120 <HAL_TIM_ConfigClockSource+0x1cc>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d06b      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009014:	e074      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009016:	4a43      	ldr	r2, [pc, #268]	; (8009124 <HAL_TIM_ConfigClockSource+0x1d0>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d067      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0x198>
 800901c:	4a41      	ldr	r2, [pc, #260]	; (8009124 <HAL_TIM_ConfigClockSource+0x1d0>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d803      	bhi.n	800902a <HAL_TIM_ConfigClockSource+0xd6>
 8009022:	4a41      	ldr	r2, [pc, #260]	; (8009128 <HAL_TIM_ConfigClockSource+0x1d4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d061      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009028:	e06a      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800902a:	4a40      	ldr	r2, [pc, #256]	; (800912c <HAL_TIM_ConfigClockSource+0x1d8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d05d      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0x198>
 8009030:	4a3f      	ldr	r2, [pc, #252]	; (8009130 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d05a      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009036:	e063      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6818      	ldr	r0, [r3, #0]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	6899      	ldr	r1, [r3, #8]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f000 fac8 	bl	80095dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800905a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	609a      	str	r2, [r3, #8]
      break;
 8009064:	e04c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	6899      	ldr	r1, [r3, #8]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	f000 fab1 	bl	80095dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009088:	609a      	str	r2, [r3, #8]
      break;
 800908a:	e039      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6818      	ldr	r0, [r3, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	6859      	ldr	r1, [r3, #4]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	461a      	mov	r2, r3
 800909a:	f000 fa23 	bl	80094e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2150      	movs	r1, #80	; 0x50
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 fa7c 	bl	80095a2 <TIM_ITRx_SetConfig>
      break;
 80090aa:	e029      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	6859      	ldr	r1, [r3, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	461a      	mov	r2, r3
 80090ba:	f000 fa42 	bl	8009542 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2160      	movs	r1, #96	; 0x60
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fa6c 	bl	80095a2 <TIM_ITRx_SetConfig>
      break;
 80090ca:	e019      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	6859      	ldr	r1, [r3, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	461a      	mov	r2, r3
 80090da:	f000 fa03 	bl	80094e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2140      	movs	r1, #64	; 0x40
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fa5c 	bl	80095a2 <TIM_ITRx_SetConfig>
      break;
 80090ea:	e009      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4619      	mov	r1, r3
 80090f6:	4610      	mov	r0, r2
 80090f8:	f000 fa53 	bl	80095a2 <TIM_ITRx_SetConfig>
      break;
 80090fc:	e000      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80090fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	00100030 	.word	0x00100030
 8009120:	00100020 	.word	0x00100020
 8009124:	00100050 	.word	0x00100050
 8009128:	00100040 	.word	0x00100040
 800912c:	00100060 	.word	0x00100060
 8009130:	00100070 	.word	0x00100070

08009134 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009144:	2b01      	cmp	r3, #1
 8009146:	d101      	bne.n	800914c <HAL_TIM_SlaveConfigSynchro+0x18>
 8009148:	2302      	movs	r3, #2
 800914a:	e031      	b.n	80091b0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f904 	bl	800936c <TIM_SlaveTimer_SetConfig>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d009      	beq.n	800917e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e018      	b.n	80091b0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800918c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68da      	ldr	r2, [r3, #12]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800919c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a46      	ldr	r2, [pc, #280]	; (8009348 <TIM_Base_SetConfig+0x12c>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d017      	beq.n	8009264 <TIM_Base_SetConfig+0x48>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923a:	d013      	beq.n	8009264 <TIM_Base_SetConfig+0x48>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a43      	ldr	r2, [pc, #268]	; (800934c <TIM_Base_SetConfig+0x130>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d00f      	beq.n	8009264 <TIM_Base_SetConfig+0x48>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a42      	ldr	r2, [pc, #264]	; (8009350 <TIM_Base_SetConfig+0x134>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d00b      	beq.n	8009264 <TIM_Base_SetConfig+0x48>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a41      	ldr	r2, [pc, #260]	; (8009354 <TIM_Base_SetConfig+0x138>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d007      	beq.n	8009264 <TIM_Base_SetConfig+0x48>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a40      	ldr	r2, [pc, #256]	; (8009358 <TIM_Base_SetConfig+0x13c>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d003      	beq.n	8009264 <TIM_Base_SetConfig+0x48>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a3f      	ldr	r2, [pc, #252]	; (800935c <TIM_Base_SetConfig+0x140>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d108      	bne.n	8009276 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800926a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a33      	ldr	r2, [pc, #204]	; (8009348 <TIM_Base_SetConfig+0x12c>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d023      	beq.n	80092c6 <TIM_Base_SetConfig+0xaa>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009284:	d01f      	beq.n	80092c6 <TIM_Base_SetConfig+0xaa>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a30      	ldr	r2, [pc, #192]	; (800934c <TIM_Base_SetConfig+0x130>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d01b      	beq.n	80092c6 <TIM_Base_SetConfig+0xaa>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a2f      	ldr	r2, [pc, #188]	; (8009350 <TIM_Base_SetConfig+0x134>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d017      	beq.n	80092c6 <TIM_Base_SetConfig+0xaa>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a2e      	ldr	r2, [pc, #184]	; (8009354 <TIM_Base_SetConfig+0x138>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d013      	beq.n	80092c6 <TIM_Base_SetConfig+0xaa>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a2d      	ldr	r2, [pc, #180]	; (8009358 <TIM_Base_SetConfig+0x13c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00f      	beq.n	80092c6 <TIM_Base_SetConfig+0xaa>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a2d      	ldr	r2, [pc, #180]	; (8009360 <TIM_Base_SetConfig+0x144>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d00b      	beq.n	80092c6 <TIM_Base_SetConfig+0xaa>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a2c      	ldr	r2, [pc, #176]	; (8009364 <TIM_Base_SetConfig+0x148>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d007      	beq.n	80092c6 <TIM_Base_SetConfig+0xaa>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a2b      	ldr	r2, [pc, #172]	; (8009368 <TIM_Base_SetConfig+0x14c>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d003      	beq.n	80092c6 <TIM_Base_SetConfig+0xaa>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a26      	ldr	r2, [pc, #152]	; (800935c <TIM_Base_SetConfig+0x140>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d108      	bne.n	80092d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a12      	ldr	r2, [pc, #72]	; (8009348 <TIM_Base_SetConfig+0x12c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d013      	beq.n	800932c <TIM_Base_SetConfig+0x110>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a14      	ldr	r2, [pc, #80]	; (8009358 <TIM_Base_SetConfig+0x13c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d00f      	beq.n	800932c <TIM_Base_SetConfig+0x110>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a14      	ldr	r2, [pc, #80]	; (8009360 <TIM_Base_SetConfig+0x144>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00b      	beq.n	800932c <TIM_Base_SetConfig+0x110>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a13      	ldr	r2, [pc, #76]	; (8009364 <TIM_Base_SetConfig+0x148>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d007      	beq.n	800932c <TIM_Base_SetConfig+0x110>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a12      	ldr	r2, [pc, #72]	; (8009368 <TIM_Base_SetConfig+0x14c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d003      	beq.n	800932c <TIM_Base_SetConfig+0x110>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a0d      	ldr	r2, [pc, #52]	; (800935c <TIM_Base_SetConfig+0x140>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d103      	bne.n	8009334 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	691a      	ldr	r2, [r3, #16]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	615a      	str	r2, [r3, #20]
}
 800933a:	bf00      	nop
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	40012c00 	.word	0x40012c00
 800934c:	40000400 	.word	0x40000400
 8009350:	40000800 	.word	0x40000800
 8009354:	40000c00 	.word	0x40000c00
 8009358:	40013400 	.word	0x40013400
 800935c:	40015000 	.word	0x40015000
 8009360:	40014000 	.word	0x40014000
 8009364:	40014400 	.word	0x40014400
 8009368:	40014800 	.word	0x40014800

0800936c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009388:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	4313      	orrs	r3, r2
 8009392:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	2b70      	cmp	r3, #112	; 0x70
 80093b8:	d034      	beq.n	8009424 <TIM_SlaveTimer_SetConfig+0xb8>
 80093ba:	2b70      	cmp	r3, #112	; 0x70
 80093bc:	d811      	bhi.n	80093e2 <TIM_SlaveTimer_SetConfig+0x76>
 80093be:	2b30      	cmp	r3, #48	; 0x30
 80093c0:	d07d      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
 80093c2:	2b30      	cmp	r3, #48	; 0x30
 80093c4:	d806      	bhi.n	80093d4 <TIM_SlaveTimer_SetConfig+0x68>
 80093c6:	2b10      	cmp	r3, #16
 80093c8:	d079      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
 80093ca:	2b20      	cmp	r3, #32
 80093cc:	d077      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d075      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 80093d2:	e075      	b.n	80094c0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80093d4:	2b50      	cmp	r3, #80	; 0x50
 80093d6:	d05e      	beq.n	8009496 <TIM_SlaveTimer_SetConfig+0x12a>
 80093d8:	2b60      	cmp	r3, #96	; 0x60
 80093da:	d066      	beq.n	80094aa <TIM_SlaveTimer_SetConfig+0x13e>
 80093dc:	2b40      	cmp	r3, #64	; 0x40
 80093de:	d02c      	beq.n	800943a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 80093e0:	e06e      	b.n	80094c0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80093e2:	4a3a      	ldr	r2, [pc, #232]	; (80094cc <TIM_SlaveTimer_SetConfig+0x160>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d06a      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
 80093e8:	4a38      	ldr	r2, [pc, #224]	; (80094cc <TIM_SlaveTimer_SetConfig+0x160>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d809      	bhi.n	8009402 <TIM_SlaveTimer_SetConfig+0x96>
 80093ee:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80093f2:	d064      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
 80093f4:	4a36      	ldr	r2, [pc, #216]	; (80094d0 <TIM_SlaveTimer_SetConfig+0x164>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d061      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
 80093fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093fe:	d05e      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8009400:	e05e      	b.n	80094c0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8009402:	4a34      	ldr	r2, [pc, #208]	; (80094d4 <TIM_SlaveTimer_SetConfig+0x168>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d05a      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
 8009408:	4a32      	ldr	r2, [pc, #200]	; (80094d4 <TIM_SlaveTimer_SetConfig+0x168>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d803      	bhi.n	8009416 <TIM_SlaveTimer_SetConfig+0xaa>
 800940e:	4a32      	ldr	r2, [pc, #200]	; (80094d8 <TIM_SlaveTimer_SetConfig+0x16c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d054      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8009414:	e054      	b.n	80094c0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8009416:	4a31      	ldr	r2, [pc, #196]	; (80094dc <TIM_SlaveTimer_SetConfig+0x170>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d050      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
 800941c:	4a30      	ldr	r2, [pc, #192]	; (80094e0 <TIM_SlaveTimer_SetConfig+0x174>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d04d      	beq.n	80094be <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8009422:	e04d      	b.n	80094c0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68d9      	ldr	r1, [r3, #12]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	f000 f8d2 	bl	80095dc <TIM_ETR_SetConfig>
      break;
 8009438:	e042      	b.n	80094c0 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b05      	cmp	r3, #5
 8009440:	d004      	beq.n	800944c <TIM_SlaveTimer_SetConfig+0xe0>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800944a:	d101      	bne.n	8009450 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e038      	b.n	80094c2 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6a1a      	ldr	r2, [r3, #32]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0201 	bic.w	r2, r2, #1
 8009466:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009476:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	621a      	str	r2, [r3, #32]
      break;
 8009494:	e014      	b.n	80094c0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	6899      	ldr	r1, [r3, #8]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	461a      	mov	r2, r3
 80094a4:	f000 f81e 	bl	80094e4 <TIM_TI1_ConfigInputStage>
      break;
 80094a8:	e00a      	b.n	80094c0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6899      	ldr	r1, [r3, #8]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	461a      	mov	r2, r3
 80094b8:	f000 f843 	bl	8009542 <TIM_TI2_ConfigInputStage>
      break;
 80094bc:	e000      	b.n	80094c0 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 80094be:	bf00      	nop
  }
  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	00100030 	.word	0x00100030
 80094d0:	00100020 	.word	0x00100020
 80094d4:	00100050 	.word	0x00100050
 80094d8:	00100040 	.word	0x00100040
 80094dc:	00100060 	.word	0x00100060
 80094e0:	00100070 	.word	0x00100070

080094e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	f023 0201 	bic.w	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800950e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	4313      	orrs	r3, r2
 8009518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f023 030a 	bic.w	r3, r3, #10
 8009520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4313      	orrs	r3, r2
 8009528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	621a      	str	r2, [r3, #32]
}
 8009536:	bf00      	nop
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009542:	b480      	push	{r7}
 8009544:	b087      	sub	sp, #28
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	f023 0210 	bic.w	r2, r3, #16
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6a1b      	ldr	r3, [r3, #32]
 8009564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800956c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	031b      	lsls	r3, r3, #12
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	4313      	orrs	r3, r2
 8009576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800957e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	4313      	orrs	r3, r2
 8009588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	621a      	str	r2, [r3, #32]
}
 8009596:	bf00      	nop
 8009598:	371c      	adds	r7, #28
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80095b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	f043 0307 	orr.w	r3, r3, #7
 80095c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	609a      	str	r2, [r3, #8]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	021a      	lsls	r2, r3, #8
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	431a      	orrs	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	4313      	orrs	r3, r2
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	609a      	str	r2, [r3, #8]
}
 8009610:	bf00      	nop
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009630:	2302      	movs	r3, #2
 8009632:	e074      	b.n	800971e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a34      	ldr	r2, [pc, #208]	; (800972c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d009      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a33      	ldr	r2, [pc, #204]	; (8009730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d004      	beq.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a31      	ldr	r2, [pc, #196]	; (8009734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d108      	bne.n	8009684 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009678:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800968a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800968e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a21      	ldr	r2, [pc, #132]	; (800972c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d022      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b4:	d01d      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a1f      	ldr	r2, [pc, #124]	; (8009738 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d018      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a1d      	ldr	r2, [pc, #116]	; (800973c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d013      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a1c      	ldr	r2, [pc, #112]	; (8009740 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00e      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a15      	ldr	r2, [pc, #84]	; (8009730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d009      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a18      	ldr	r2, [pc, #96]	; (8009744 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d004      	beq.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a11      	ldr	r2, [pc, #68]	; (8009734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d10c      	bne.n	800970c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	4313      	orrs	r3, r2
 8009702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	40012c00 	.word	0x40012c00
 8009730:	40013400 	.word	0x40013400
 8009734:	40015000 	.word	0x40015000
 8009738:	40000400 	.word	0x40000400
 800973c:	40000800 	.word	0x40000800
 8009740:	40000c00 	.word	0x40000c00
 8009744:	40014000 	.word	0x40014000

08009748 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009752:	2300      	movs	r3, #0
 8009754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009760:	2302      	movs	r3, #2
 8009762:	e096      	b.n	8009892 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	4313      	orrs	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	4313      	orrs	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ca:	4313      	orrs	r3, r2
 80097cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	041b      	lsls	r3, r3, #16
 80097da:	4313      	orrs	r3, r2
 80097dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a2f      	ldr	r2, [pc, #188]	; (80098a0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d009      	beq.n	80097fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a2d      	ldr	r2, [pc, #180]	; (80098a4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a2c      	ldr	r2, [pc, #176]	; (80098a8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d106      	bne.n	800980a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	4313      	orrs	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a24      	ldr	r2, [pc, #144]	; (80098a0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d009      	beq.n	8009828 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a22      	ldr	r2, [pc, #136]	; (80098a4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d004      	beq.n	8009828 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a21      	ldr	r2, [pc, #132]	; (80098a8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d12b      	bne.n	8009880 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009832:	051b      	lsls	r3, r3, #20
 8009834:	4313      	orrs	r3, r2
 8009836:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	4313      	orrs	r3, r2
 8009844:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	4313      	orrs	r3, r2
 8009852:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a11      	ldr	r2, [pc, #68]	; (80098a0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d009      	beq.n	8009872 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a10      	ldr	r2, [pc, #64]	; (80098a4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d004      	beq.n	8009872 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a0e      	ldr	r2, [pc, #56]	; (80098a8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d106      	bne.n	8009880 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	4313      	orrs	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	40012c00 	.word	0x40012c00
 80098a4:	40013400 	.word	0x40013400
 80098a8:	40015000 	.word	0x40015000

080098ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <LL_EXTI_EnableIT_0_31>:
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009940:	4b05      	ldr	r3, [pc, #20]	; (8009958 <LL_EXTI_EnableIT_0_31+0x20>)
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	4904      	ldr	r1, [pc, #16]	; (8009958 <LL_EXTI_EnableIT_0_31+0x20>)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4313      	orrs	r3, r2
 800994a:	600b      	str	r3, [r1, #0]
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	40010400 	.word	0x40010400

0800995c <LL_EXTI_EnableIT_32_63>:
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009964:	4b05      	ldr	r3, [pc, #20]	; (800997c <LL_EXTI_EnableIT_32_63+0x20>)
 8009966:	6a1a      	ldr	r2, [r3, #32]
 8009968:	4904      	ldr	r1, [pc, #16]	; (800997c <LL_EXTI_EnableIT_32_63+0x20>)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4313      	orrs	r3, r2
 800996e:	620b      	str	r3, [r1, #32]
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	40010400 	.word	0x40010400

08009980 <LL_EXTI_DisableIT_0_31>:
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009988:	4b06      	ldr	r3, [pc, #24]	; (80099a4 <LL_EXTI_DisableIT_0_31+0x24>)
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	43db      	mvns	r3, r3
 8009990:	4904      	ldr	r1, [pc, #16]	; (80099a4 <LL_EXTI_DisableIT_0_31+0x24>)
 8009992:	4013      	ands	r3, r2
 8009994:	600b      	str	r3, [r1, #0]
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	40010400 	.word	0x40010400

080099a8 <LL_EXTI_DisableIT_32_63>:
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80099b0:	4b06      	ldr	r3, [pc, #24]	; (80099cc <LL_EXTI_DisableIT_32_63+0x24>)
 80099b2:	6a1a      	ldr	r2, [r3, #32]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	43db      	mvns	r3, r3
 80099b8:	4904      	ldr	r1, [pc, #16]	; (80099cc <LL_EXTI_DisableIT_32_63+0x24>)
 80099ba:	4013      	ands	r3, r2
 80099bc:	620b      	str	r3, [r1, #32]
}
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40010400 	.word	0x40010400

080099d0 <LL_EXTI_EnableEvent_0_31>:
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80099d8:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	4904      	ldr	r1, [pc, #16]	; (80099f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	604b      	str	r3, [r1, #4]
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	40010400 	.word	0x40010400

080099f4 <LL_EXTI_EnableEvent_32_63>:
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <LL_EXTI_EnableEvent_32_63+0x20>)
 80099fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a00:	4904      	ldr	r1, [pc, #16]	; (8009a14 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	40010400 	.word	0x40010400

08009a18 <LL_EXTI_DisableEvent_0_31>:
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009a20:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	43db      	mvns	r3, r3
 8009a28:	4904      	ldr	r1, [pc, #16]	; (8009a3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	604b      	str	r3, [r1, #4]
}
 8009a2e:	bf00      	nop
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40010400 	.word	0x40010400

08009a40 <LL_EXTI_DisableEvent_32_63>:
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009a48:	4b06      	ldr	r3, [pc, #24]	; (8009a64 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	43db      	mvns	r3, r3
 8009a50:	4904      	ldr	r1, [pc, #16]	; (8009a64 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009a52:	4013      	ands	r3, r2
 8009a54:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009a56:	bf00      	nop
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	40010400 	.word	0x40010400

08009a68 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	4904      	ldr	r1, [pc, #16]	; (8009a88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	608b      	str	r3, [r1, #8]
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	40010400 	.word	0x40010400

08009a8c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009a94:	4b05      	ldr	r3, [pc, #20]	; (8009aac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a98:	4904      	ldr	r1, [pc, #16]	; (8009aac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	40010400 	.word	0x40010400

08009ab0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009ab8:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	43db      	mvns	r3, r3
 8009ac0:	4904      	ldr	r1, [pc, #16]	; (8009ad4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	608b      	str	r3, [r1, #8]
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	40010400 	.word	0x40010400

08009ad8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	43db      	mvns	r3, r3
 8009ae8:	4904      	ldr	r1, [pc, #16]	; (8009afc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009aea:	4013      	ands	r3, r2
 8009aec:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009aee:	bf00      	nop
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40010400 	.word	0x40010400

08009b00 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009b08:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	4904      	ldr	r1, [pc, #16]	; (8009b20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60cb      	str	r3, [r1, #12]
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	40010400 	.word	0x40010400

08009b24 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009b2c:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b30:	4904      	ldr	r1, [pc, #16]	; (8009b44 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	40010400 	.word	0x40010400

08009b48 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009b50:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	43db      	mvns	r3, r3
 8009b58:	4904      	ldr	r1, [pc, #16]	; (8009b6c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	60cb      	str	r3, [r1, #12]
}
 8009b5e:	bf00      	nop
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	40010400 	.word	0x40010400

08009b70 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009b78:	4b06      	ldr	r3, [pc, #24]	; (8009b94 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	43db      	mvns	r3, r3
 8009b80:	4904      	ldr	r1, [pc, #16]	; (8009b94 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009b82:	4013      	ands	r3, r2
 8009b84:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	40010400 	.word	0x40010400

08009b98 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	7a1b      	ldrb	r3, [r3, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 80c8 	beq.w	8009d3e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d05d      	beq.n	8009c72 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	7a5b      	ldrb	r3, [r3, #9]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d00e      	beq.n	8009bdc <LL_EXTI_Init+0x44>
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d017      	beq.n	8009bf2 <LL_EXTI_Init+0x5a>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d120      	bne.n	8009c08 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff ff24 	bl	8009a18 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7ff feaf 	bl	8009938 <LL_EXTI_EnableIT_0_31>
          break;
 8009bda:	e018      	b.n	8009c0e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff fecd 	bl	8009980 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff fef0 	bl	80099d0 <LL_EXTI_EnableEvent_0_31>
          break;
 8009bf0:	e00d      	b.n	8009c0e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7ff fe9e 	bl	8009938 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7ff fee5 	bl	80099d0 <LL_EXTI_EnableEvent_0_31>
          break;
 8009c06:	e002      	b.n	8009c0e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	60fb      	str	r3, [r7, #12]
          break;
 8009c0c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	7a9b      	ldrb	r3, [r3, #10]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d02d      	beq.n	8009c72 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	7a9b      	ldrb	r3, [r3, #10]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d00e      	beq.n	8009c3c <LL_EXTI_Init+0xa4>
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d017      	beq.n	8009c52 <LL_EXTI_Init+0xba>
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d120      	bne.n	8009c68 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff ff8c 	bl	8009b48 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff ff17 	bl	8009a68 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8009c3a:	e01b      	b.n	8009c74 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff ff35 	bl	8009ab0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7ff ff58 	bl	8009b00 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8009c50:	e010      	b.n	8009c74 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff ff06 	bl	8009a68 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff ff4d 	bl	8009b00 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8009c66:	e005      	b.n	8009c74 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f043 0302 	orr.w	r3, r3, #2
 8009c6e:	60fb      	str	r3, [r7, #12]
            break;
 8009c70:	e000      	b.n	8009c74 <LL_EXTI_Init+0xdc>
        }
      }
 8009c72:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d075      	beq.n	8009d68 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	7a5b      	ldrb	r3, [r3, #9]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d00e      	beq.n	8009ca2 <LL_EXTI_Init+0x10a>
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d017      	beq.n	8009cb8 <LL_EXTI_Init+0x120>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d120      	bne.n	8009cce <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff fed5 	bl	8009a40 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff fe5e 	bl	800995c <LL_EXTI_EnableIT_32_63>
          break;
 8009ca0:	e01a      	b.n	8009cd8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff fe7e 	bl	80099a8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7ff fe9f 	bl	80099f4 <LL_EXTI_EnableEvent_32_63>
          break;
 8009cb6:	e00f      	b.n	8009cd8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff fe4d 	bl	800995c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff fe94 	bl	80099f4 <LL_EXTI_EnableEvent_32_63>
          break;
 8009ccc:	e004      	b.n	8009cd8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f043 0304 	orr.w	r3, r3, #4
 8009cd4:	60fb      	str	r3, [r7, #12]
          break;
 8009cd6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	7a9b      	ldrb	r3, [r3, #10]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d043      	beq.n	8009d68 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	7a9b      	ldrb	r3, [r3, #10]
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d00e      	beq.n	8009d06 <LL_EXTI_Init+0x16e>
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d017      	beq.n	8009d1c <LL_EXTI_Init+0x184>
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d120      	bne.n	8009d32 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7ff ff3b 	bl	8009b70 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff fec4 	bl	8009a8c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8009d04:	e031      	b.n	8009d6a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff fee4 	bl	8009ad8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff ff05 	bl	8009b24 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8009d1a:	e026      	b.n	8009d6a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff feb3 	bl	8009a8c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff fefa 	bl	8009b24 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8009d30:	e01b      	b.n	8009d6a <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f043 0305 	orr.w	r3, r3, #5
 8009d38:	60fb      	str	r3, [r7, #12]
            break;
 8009d3a:	bf00      	nop
 8009d3c:	e015      	b.n	8009d6a <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7ff fe1c 	bl	8009980 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7ff fe63 	bl	8009a18 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7ff fe26 	bl	80099a8 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff fe6d 	bl	8009a40 <LL_EXTI_DisableEvent_32_63>
 8009d66:	e000      	b.n	8009d6a <LL_EXTI_Init+0x1d2>
      }
 8009d68:	bf00      	nop
  }

  return status;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <LL_GPIO_SetPinMode>:
{
 8009d74:	b480      	push	{r7}
 8009d76:	b089      	sub	sp, #36	; 0x24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	fa93 f3a3 	rbit	r3, r3
 8009d8e:	613b      	str	r3, [r7, #16]
  return result;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	fab3 f383 	clz	r3, r3
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	2103      	movs	r1, #3
 8009d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009da0:	43db      	mvns	r3, r3
 8009da2:	401a      	ands	r2, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	fa93 f3a3 	rbit	r3, r3
 8009dae:	61bb      	str	r3, [r7, #24]
  return result;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	fab3 f383 	clz	r3, r3
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	6879      	ldr	r1, [r7, #4]
 8009dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	601a      	str	r2, [r3, #0]
}
 8009dc6:	bf00      	nop
 8009dc8:	3724      	adds	r7, #36	; 0x24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <LL_GPIO_SetPinOutputType>:
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	60f8      	str	r0, [r7, #12]
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	43db      	mvns	r3, r3
 8009de6:	401a      	ands	r2, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	6879      	ldr	r1, [r7, #4]
 8009dec:	fb01 f303 	mul.w	r3, r1, r3
 8009df0:	431a      	orrs	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	605a      	str	r2, [r3, #4]
}
 8009df6:	bf00      	nop
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <LL_GPIO_SetPinSpeed>:
{
 8009e02:	b480      	push	{r7}
 8009e04:	b089      	sub	sp, #36	; 0x24
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	689a      	ldr	r2, [r3, #8]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	fa93 f3a3 	rbit	r3, r3
 8009e1c:	613b      	str	r3, [r7, #16]
  return result;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	fab3 f383 	clz	r3, r3
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	2103      	movs	r1, #3
 8009e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e2e:	43db      	mvns	r3, r3
 8009e30:	401a      	ands	r2, r3
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	fa93 f3a3 	rbit	r3, r3
 8009e3c:	61bb      	str	r3, [r7, #24]
  return result;
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	fab3 f383 	clz	r3, r3
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	6879      	ldr	r1, [r7, #4]
 8009e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	609a      	str	r2, [r3, #8]
}
 8009e54:	bf00      	nop
 8009e56:	3724      	adds	r7, #36	; 0x24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <LL_GPIO_SetPinPull>:
{
 8009e60:	b480      	push	{r7}
 8009e62:	b089      	sub	sp, #36	; 0x24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	fa93 f3a3 	rbit	r3, r3
 8009e7a:	613b      	str	r3, [r7, #16]
  return result;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	fab3 f383 	clz	r3, r3
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	2103      	movs	r1, #3
 8009e88:	fa01 f303 	lsl.w	r3, r1, r3
 8009e8c:	43db      	mvns	r3, r3
 8009e8e:	401a      	ands	r2, r3
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	fa93 f3a3 	rbit	r3, r3
 8009e9a:	61bb      	str	r3, [r7, #24]
  return result;
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	fab3 f383 	clz	r3, r3
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8009eac:	431a      	orrs	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	60da      	str	r2, [r3, #12]
}
 8009eb2:	bf00      	nop
 8009eb4:	3724      	adds	r7, #36	; 0x24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <LL_GPIO_SetAFPin_0_7>:
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b089      	sub	sp, #36	; 0x24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6a1a      	ldr	r2, [r3, #32]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	fa93 f3a3 	rbit	r3, r3
 8009ed8:	613b      	str	r3, [r7, #16]
  return result;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	fab3 f383 	clz	r3, r3
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	210f      	movs	r1, #15
 8009ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eea:	43db      	mvns	r3, r3
 8009eec:	401a      	ands	r2, r3
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	fa93 f3a3 	rbit	r3, r3
 8009ef8:	61bb      	str	r3, [r7, #24]
  return result;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	fab3 f383 	clz	r3, r3
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	fa01 f303 	lsl.w	r3, r1, r3
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	621a      	str	r2, [r3, #32]
}
 8009f10:	bf00      	nop
 8009f12:	3724      	adds	r7, #36	; 0x24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <LL_GPIO_SetAFPin_8_15>:
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b089      	sub	sp, #36	; 0x24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	0a1b      	lsrs	r3, r3, #8
 8009f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	fa93 f3a3 	rbit	r3, r3
 8009f38:	613b      	str	r3, [r7, #16]
  return result;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	fab3 f383 	clz	r3, r3
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	210f      	movs	r1, #15
 8009f46:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4a:	43db      	mvns	r3, r3
 8009f4c:	401a      	ands	r2, r3
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	0a1b      	lsrs	r3, r3, #8
 8009f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	fa93 f3a3 	rbit	r3, r3
 8009f5a:	61bb      	str	r3, [r7, #24]
  return result;
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	fab3 f383 	clz	r3, r3
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009f72:	bf00      	nop
 8009f74:	3724      	adds	r7, #36	; 0x24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b086      	sub	sp, #24
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	fa93 f3a3 	rbit	r3, r3
 8009f94:	60bb      	str	r3, [r7, #8]
  return result;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	fab3 f383 	clz	r3, r3
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009fa0:	e040      	b.n	800a024 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	fa01 f303 	lsl.w	r3, r1, r3
 8009fae:	4013      	ands	r3, r2
 8009fb0:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d032      	beq.n	800a01e <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	6939      	ldr	r1, [r7, #16]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7ff fed7 	bl	8009d74 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d003      	beq.n	8009fd6 <LL_GPIO_Init+0x58>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d106      	bne.n	8009fe4 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	6939      	ldr	r1, [r7, #16]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff ff0f 	bl	8009e02 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6939      	ldr	r1, [r7, #16]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff ff37 	bl	8009e60 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d111      	bne.n	800a01e <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	2bff      	cmp	r3, #255	; 0xff
 8009ffe:	d807      	bhi.n	800a010 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	461a      	mov	r2, r3
 800a006:	6939      	ldr	r1, [r7, #16]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ff58 	bl	8009ebe <LL_GPIO_SetAFPin_0_7>
 800a00e:	e006      	b.n	800a01e <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	461a      	mov	r2, r3
 800a016:	6939      	ldr	r1, [r7, #16]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff ff7f 	bl	8009f1c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	3301      	adds	r3, #1
 800a022:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	fa22 f303 	lsr.w	r3, r2, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1b7      	bne.n	8009fa2 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d003      	beq.n	800a042 <LL_GPIO_Init+0xc4>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d107      	bne.n	800a052 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	6819      	ldr	r1, [r3, #0]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	461a      	mov	r2, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7ff fec0 	bl	8009dd2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800a05c:	b590      	push	{r4, r7, lr}
 800a05e:	b087      	sub	sp, #28
 800a060:	af02      	add	r7, sp, #8
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	4611      	mov	r1, r2
 800a068:	461a      	mov	r2, r3
 800a06a:	4623      	mov	r3, r4
 800a06c:	80fb      	strh	r3, [r7, #6]
 800a06e:	4603      	mov	r3, r0
 800a070:	80bb      	strh	r3, [r7, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	807b      	strh	r3, [r7, #2]
 800a076:	4613      	mov	r3, r2
 800a078:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800a07e:	7bfa      	ldrb	r2, [r7, #15]
 800a080:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a084:	429a      	cmp	r2, r3
 800a086:	d93a      	bls.n	800a0fe <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800a088:	88ba      	ldrh	r2, [r7, #4]
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	441a      	add	r2, r3
 800a08e:	88b9      	ldrh	r1, [r7, #4]
 800a090:	883b      	ldrh	r3, [r7, #0]
 800a092:	4419      	add	r1, r3
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	1acb      	subs	r3, r1, r3
 800a098:	429a      	cmp	r2, r3
 800a09a:	f000 8090 	beq.w	800a1be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800a09e:	88fa      	ldrh	r2, [r7, #6]
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	441a      	add	r2, r3
 800a0a4:	88f9      	ldrh	r1, [r7, #6]
 800a0a6:	887b      	ldrh	r3, [r7, #2]
 800a0a8:	4419      	add	r1, r3
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	1acb      	subs	r3, r1, r3
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	f000 8085 	beq.w	800a1be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	88fb      	ldrh	r3, [r7, #6]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	b298      	uxth	r0, r3
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	88bb      	ldrh	r3, [r7, #4]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	b299      	uxth	r1, r3
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	887a      	ldrh	r2, [r7, #2]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	b29c      	uxth	r4, r3
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	883a      	ldrh	r2, [r7, #0]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	2304      	movs	r3, #4
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	8c3b      	ldrh	r3, [r7, #32]
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	f000 fcd6 	bl	800aaa8 <ILI9341_Draw_Rectangle>
				goto finish;
 800a0fc:	e060      	b.n	800a1c0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	b29a      	uxth	r2, r3
 800a102:	88fb      	ldrh	r3, [r7, #6]
 800a104:	4413      	add	r3, r2
 800a106:	b298      	uxth	r0, r3
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	88bb      	ldrh	r3, [r7, #4]
 800a10e:	4413      	add	r3, r2
 800a110:	b299      	uxth	r1, r3
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	b29b      	uxth	r3, r3
 800a116:	005b      	lsls	r3, r3, #1
 800a118:	b29b      	uxth	r3, r3
 800a11a:	887a      	ldrh	r2, [r7, #2]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	b29a      	uxth	r2, r3
 800a120:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a124:	b29b      	uxth	r3, r3
 800a126:	f000 fa81 	bl	800a62c <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	88fb      	ldrh	r3, [r7, #6]
 800a130:	4413      	add	r3, r2
 800a132:	b298      	uxth	r0, r3
										(y + h) - b,
 800a134:	88ba      	ldrh	r2, [r7, #4]
 800a136:	883b      	ldrh	r3, [r7, #0]
 800a138:	4413      	add	r3, r2
 800a13a:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	b299      	uxth	r1, r3
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	b29b      	uxth	r3, r3
 800a148:	887a      	ldrh	r2, [r7, #2]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a152:	b29b      	uxth	r3, r3
 800a154:	f000 fa6a 	bl	800a62c <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	88fb      	ldrh	r3, [r7, #6]
 800a15e:	4413      	add	r3, r2
 800a160:	b298      	uxth	r0, r3
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	b29a      	uxth	r2, r3
 800a166:	88bb      	ldrh	r3, [r7, #4]
 800a168:	4413      	add	r3, r2
 800a16a:	b299      	uxth	r1, r3
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	b29b      	uxth	r3, r3
 800a174:	883a      	ldrh	r2, [r7, #0]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	b29a      	uxth	r2, r3
 800a17a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a17e:	b29b      	uxth	r3, r3
 800a180:	f000 fa9c 	bl	800a6bc <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800a184:	88fa      	ldrh	r2, [r7, #6]
 800a186:	887b      	ldrh	r3, [r7, #2]
 800a188:	4413      	add	r3, r2
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	b298      	uxth	r0, r3
 800a194:	7bfb      	ldrb	r3, [r7, #15]
 800a196:	b29a      	uxth	r2, r3
 800a198:	88bb      	ldrh	r3, [r7, #4]
 800a19a:	4413      	add	r3, r2
 800a19c:	b299      	uxth	r1, r3
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	883a      	ldrh	r2, [r7, #0]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	f000 fa83 	bl	800a6bc <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800a1bc:	e75f      	b.n	800a07e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800a1be:	bf00      	nop
	// done
	return;
 800a1c0:	bf00      	nop
}
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd90      	pop	{r4, r7, pc}

0800a1c8 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800a1c8:	b590      	push	{r4, r7, lr}
 800a1ca:	b089      	sub	sp, #36	; 0x24
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	4623      	mov	r3, r4
 800a1d8:	71fb      	strb	r3, [r7, #7]
 800a1da:	4603      	mov	r3, r0
 800a1dc:	80bb      	strh	r3, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	807b      	strh	r3, [r7, #2]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
 800a1e8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	2b1f      	cmp	r3, #31
 800a1ee:	d802      	bhi.n	800a1f6 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	71fb      	strb	r3, [r7, #7]
 800a1f4:	e002      	b.n	800a1fc <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	3b20      	subs	r3, #32
 800a1fa:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	753b      	strb	r3, [r7, #20]
 800a200:	e012      	b.n	800a228 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800a202:	7dfa      	ldrb	r2, [r7, #23]
 800a204:	7d38      	ldrb	r0, [r7, #20]
 800a206:	7d39      	ldrb	r1, [r7, #20]
 800a208:	4c48      	ldr	r4, [pc, #288]	; (800a32c <ILI9341_Draw_Char+0x164>)
 800a20a:	4613      	mov	r3, r2
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	4413      	add	r3, r2
 800a210:	005b      	lsls	r3, r3, #1
 800a212:	4423      	add	r3, r4
 800a214:	4403      	add	r3, r0
 800a216:	781a      	ldrb	r2, [r3, #0]
 800a218:	f107 0318 	add.w	r3, r7, #24
 800a21c:	440b      	add	r3, r1
 800a21e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800a222:	7d3b      	ldrb	r3, [r7, #20]
 800a224:	3301      	adds	r3, #1
 800a226:	753b      	strb	r3, [r7, #20]
 800a228:	7d3b      	ldrb	r3, [r7, #20]
 800a22a:	2b05      	cmp	r3, #5
 800a22c:	d9e9      	bls.n	800a202 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800a22e:	2300      	movs	r3, #0
 800a230:	757b      	strb	r3, [r7, #21]
 800a232:	e074      	b.n	800a31e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800a234:	2300      	movs	r3, #0
 800a236:	75bb      	strb	r3, [r7, #22]
 800a238:	e06b      	b.n	800a312 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800a23a:	7d7b      	ldrb	r3, [r7, #21]
 800a23c:	f107 0218 	add.w	r2, r7, #24
 800a240:	4413      	add	r3, r2
 800a242:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a246:	461a      	mov	r2, r3
 800a248:	7dbb      	ldrb	r3, [r7, #22]
 800a24a:	fa42 f303 	asr.w	r3, r2, r3
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d02d      	beq.n	800a2b2 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800a256:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d10e      	bne.n	800a27a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800a25c:	7d7b      	ldrb	r3, [r7, #21]
 800a25e:	b29a      	uxth	r2, r3
 800a260:	88bb      	ldrh	r3, [r7, #4]
 800a262:	4413      	add	r3, r2
 800a264:	b298      	uxth	r0, r3
 800a266:	7dbb      	ldrb	r3, [r7, #22]
 800a268:	b29a      	uxth	r2, r3
 800a26a:	887b      	ldrh	r3, [r7, #2]
 800a26c:	4413      	add	r3, r2
 800a26e:	b29b      	uxth	r3, r3
 800a270:	883a      	ldrh	r2, [r7, #0]
 800a272:	4619      	mov	r1, r3
 800a274:	f000 fae0 	bl	800a838 <ILI9341_Draw_Pixel>
 800a278:	e048      	b.n	800a30c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800a27a:	7d7b      	ldrb	r3, [r7, #21]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a280:	fb12 f303 	smulbb	r3, r2, r3
 800a284:	b29a      	uxth	r2, r3
 800a286:	88bb      	ldrh	r3, [r7, #4]
 800a288:	4413      	add	r3, r2
 800a28a:	b298      	uxth	r0, r3
 800a28c:	7dbb      	ldrb	r3, [r7, #22]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a292:	fb12 f303 	smulbb	r3, r2, r3
 800a296:	b29a      	uxth	r2, r3
 800a298:	887b      	ldrh	r3, [r7, #2]
 800a29a:	4413      	add	r3, r2
 800a29c:	b299      	uxth	r1, r3
 800a29e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800a2a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	883b      	ldrh	r3, [r7, #0]
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	4623      	mov	r3, r4
 800a2ac:	f000 fbfc 	bl	800aaa8 <ILI9341_Draw_Rectangle>
 800a2b0:	e02c      	b.n	800a30c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800a2b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d10e      	bne.n	800a2d6 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800a2b8:	7d7b      	ldrb	r3, [r7, #21]
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	88bb      	ldrh	r3, [r7, #4]
 800a2be:	4413      	add	r3, r2
 800a2c0:	b298      	uxth	r0, r3
 800a2c2:	7dbb      	ldrb	r3, [r7, #22]
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	887b      	ldrh	r3, [r7, #2]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	f000 fab2 	bl	800a838 <ILI9341_Draw_Pixel>
 800a2d4:	e01a      	b.n	800a30c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800a2d6:	7d7b      	ldrb	r3, [r7, #21]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a2dc:	fb12 f303 	smulbb	r3, r2, r3
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	88bb      	ldrh	r3, [r7, #4]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	b298      	uxth	r0, r3
 800a2e8:	7dbb      	ldrb	r3, [r7, #22]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a2ee:	fb12 f303 	smulbb	r3, r2, r3
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	887b      	ldrh	r3, [r7, #2]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	b299      	uxth	r1, r3
 800a2fa:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800a2fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a2fe:	2301      	movs	r3, #1
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	4623      	mov	r3, r4
 800a308:	f000 fbce 	bl	800aaa8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800a30c:	7dbb      	ldrb	r3, [r7, #22]
 800a30e:	3301      	adds	r3, #1
 800a310:	75bb      	strb	r3, [r7, #22]
 800a312:	7dbb      	ldrb	r3, [r7, #22]
 800a314:	2b07      	cmp	r3, #7
 800a316:	d990      	bls.n	800a23a <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800a318:	7d7b      	ldrb	r3, [r7, #21]
 800a31a:	3301      	adds	r3, #1
 800a31c:	757b      	strb	r3, [r7, #21]
 800a31e:	7d7b      	ldrb	r3, [r7, #21]
 800a320:	2b05      	cmp	r3, #5
 800a322:	d987      	bls.n	800a234 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800a324:	bf00      	nop
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd90      	pop	{r4, r7, pc}
 800a32c:	0800c37c 	.word	0x0800c37c

0800a330 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b087      	sub	sp, #28
 800a334:	af02      	add	r7, sp, #8
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	4608      	mov	r0, r1
 800a33a:	4611      	mov	r1, r2
 800a33c:	461a      	mov	r2, r3
 800a33e:	4603      	mov	r3, r0
 800a340:	817b      	strh	r3, [r7, #10]
 800a342:	460b      	mov	r3, r1
 800a344:	813b      	strh	r3, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800a34a:	e016      	b.n	800a37a <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	60fa      	str	r2, [r7, #12]
 800a352:	7818      	ldrb	r0, [r3, #0]
 800a354:	88fc      	ldrh	r4, [r7, #6]
 800a356:	893a      	ldrh	r2, [r7, #8]
 800a358:	8979      	ldrh	r1, [r7, #10]
 800a35a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	8c3b      	ldrh	r3, [r7, #32]
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	4623      	mov	r3, r4
 800a364:	f7ff ff30 	bl	800a1c8 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800a368:	8c3b      	ldrh	r3, [r7, #32]
 800a36a:	461a      	mov	r2, r3
 800a36c:	0052      	lsls	r2, r2, #1
 800a36e:	4413      	add	r3, r2
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	b29a      	uxth	r2, r3
 800a374:	897b      	ldrh	r3, [r7, #10]
 800a376:	4413      	add	r3, r2
 800a378:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e4      	bne.n	800a34c <ILI9341_Draw_Text+0x1c>
    }


}
 800a382:	bf00      	nop
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	bd90      	pop	{r4, r7, pc}
	...

0800a38c <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800a396:	2300      	movs	r3, #0
 800a398:	80fb      	strh	r3, [r7, #6]
 800a39a:	e010      	b.n	800a3be <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800a39c:	88fb      	ldrh	r3, [r7, #6]
 800a39e:	4a0c      	ldr	r2, [pc, #48]	; (800a3d0 <ILI9341_FillScreenGradient+0x44>)
 800a3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	88b9      	ldrh	r1, [r7, #4]
 800a3a8:	88f8      	ldrh	r0, [r7, #6]
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	9201      	str	r2, [sp, #4]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	23f0      	movs	r3, #240	; 0xf0
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f000 fb78 	bl	800aaa8 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800a3b8:	88fb      	ldrh	r3, [r7, #6]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	80fb      	strh	r3, [r7, #6]
 800a3be:	88fb      	ldrh	r3, [r7, #6]
 800a3c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a3c4:	d9ea      	bls.n	800a39c <ILI9341_FillScreenGradient+0x10>

	}
}
 800a3c6:	bf00      	nop
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20000024 	.word	0x20000024

0800a3d4 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800a3d8:	f000 fc3a 	bl	800ac50 <_LCD_Enable>
	ILI9341_SPI_Init();
 800a3dc:	f000 f908 	bl	800a5f0 <ILI9341_SPI_Init>
	_LCD_Reset();
 800a3e0:	f000 fc46 	bl	800ac70 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800a3e4:	2001      	movs	r0, #1
 800a3e6:	f000 fd11 	bl	800ae0c <_LCD_SendCommand>
	HAL_Delay(2000);
 800a3ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a3ee:	f7fa fa91 	bl	8004914 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800a3f2:	20cb      	movs	r0, #203	; 0xcb
 800a3f4:	f000 fd0a 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800a3f8:	2039      	movs	r0, #57	; 0x39
 800a3fa:	f000 fd39 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800a3fe:	202c      	movs	r0, #44	; 0x2c
 800a400:	f000 fd36 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x00);
 800a404:	2000      	movs	r0, #0
 800a406:	f000 fd33 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x34);
 800a40a:	2034      	movs	r0, #52	; 0x34
 800a40c:	f000 fd30 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x02);
 800a410:	2002      	movs	r0, #2
 800a412:	f000 fd2d 	bl	800ae70 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800a416:	20cf      	movs	r0, #207	; 0xcf
 800a418:	f000 fcf8 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a41c:	2000      	movs	r0, #0
 800a41e:	f000 fd27 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800a422:	20c1      	movs	r0, #193	; 0xc1
 800a424:	f000 fd24 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x30);
 800a428:	2030      	movs	r0, #48	; 0x30
 800a42a:	f000 fd21 	bl	800ae70 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800a42e:	20e8      	movs	r0, #232	; 0xe8
 800a430:	f000 fcec 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800a434:	2085      	movs	r0, #133	; 0x85
 800a436:	f000 fd1b 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x00);
 800a43a:	2000      	movs	r0, #0
 800a43c:	f000 fd18 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x78);
 800a440:	2078      	movs	r0, #120	; 0x78
 800a442:	f000 fd15 	bl	800ae70 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800a446:	20ea      	movs	r0, #234	; 0xea
 800a448:	f000 fce0 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a44c:	2000      	movs	r0, #0
 800a44e:	f000 fd0f 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x00);
 800a452:	2000      	movs	r0, #0
 800a454:	f000 fd0c 	bl	800ae70 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800a458:	20ed      	movs	r0, #237	; 0xed
 800a45a:	f000 fcd7 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800a45e:	2064      	movs	r0, #100	; 0x64
 800a460:	f000 fd06 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x03);
 800a464:	2003      	movs	r0, #3
 800a466:	f000 fd03 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x12);
 800a46a:	2012      	movs	r0, #18
 800a46c:	f000 fd00 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x81);
 800a470:	2081      	movs	r0, #129	; 0x81
 800a472:	f000 fcfd 	bl	800ae70 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800a476:	20f7      	movs	r0, #247	; 0xf7
 800a478:	f000 fcc8 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800a47c:	2020      	movs	r0, #32
 800a47e:	f000 fcf7 	bl	800ae70 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800a482:	20c0      	movs	r0, #192	; 0xc0
 800a484:	f000 fcc2 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800a488:	2023      	movs	r0, #35	; 0x23
 800a48a:	f000 fcf1 	bl	800ae70 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800a48e:	20c1      	movs	r0, #193	; 0xc1
 800a490:	f000 fcbc 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800a494:	2010      	movs	r0, #16
 800a496:	f000 fceb 	bl	800ae70 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800a49a:	20c5      	movs	r0, #197	; 0xc5
 800a49c:	f000 fcb6 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800a4a0:	203e      	movs	r0, #62	; 0x3e
 800a4a2:	f000 fce5 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x28);
 800a4a6:	2028      	movs	r0, #40	; 0x28
 800a4a8:	f000 fce2 	bl	800ae70 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800a4ac:	20c7      	movs	r0, #199	; 0xc7
 800a4ae:	f000 fcad 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800a4b2:	2086      	movs	r0, #134	; 0x86
 800a4b4:	f000 fcdc 	bl	800ae70 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800a4b8:	2036      	movs	r0, #54	; 0x36
 800a4ba:	f000 fca7 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800a4be:	2048      	movs	r0, #72	; 0x48
 800a4c0:	f000 fcd6 	bl	800ae70 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800a4c4:	203a      	movs	r0, #58	; 0x3a
 800a4c6:	f000 fca1 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800a4ca:	2055      	movs	r0, #85	; 0x55
 800a4cc:	f000 fcd0 	bl	800ae70 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800a4d0:	20b1      	movs	r0, #177	; 0xb1
 800a4d2:	f000 fc9b 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	f000 fcca 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x18);
 800a4dc:	2018      	movs	r0, #24
 800a4de:	f000 fcc7 	bl	800ae70 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800a4e2:	20b6      	movs	r0, #182	; 0xb6
 800a4e4:	f000 fc92 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800a4e8:	2008      	movs	r0, #8
 800a4ea:	f000 fcc1 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x82);
 800a4ee:	2082      	movs	r0, #130	; 0x82
 800a4f0:	f000 fcbe 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x27);
 800a4f4:	2027      	movs	r0, #39	; 0x27
 800a4f6:	f000 fcbb 	bl	800ae70 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800a4fa:	20f2      	movs	r0, #242	; 0xf2
 800a4fc:	f000 fc86 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a500:	2000      	movs	r0, #0
 800a502:	f000 fcb5 	bl	800ae70 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800a506:	2026      	movs	r0, #38	; 0x26
 800a508:	f000 fc80 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800a50c:	2001      	movs	r0, #1
 800a50e:	f000 fcaf 	bl	800ae70 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800a512:	20e0      	movs	r0, #224	; 0xe0
 800a514:	f000 fc7a 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800a518:	200f      	movs	r0, #15
 800a51a:	f000 fca9 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x31);
 800a51e:	2031      	movs	r0, #49	; 0x31
 800a520:	f000 fca6 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800a524:	202b      	movs	r0, #43	; 0x2b
 800a526:	f000 fca3 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800a52a:	200c      	movs	r0, #12
 800a52c:	f000 fca0 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800a530:	200e      	movs	r0, #14
 800a532:	f000 fc9d 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x08);
 800a536:	2008      	movs	r0, #8
 800a538:	f000 fc9a 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800a53c:	204e      	movs	r0, #78	; 0x4e
 800a53e:	f000 fc97 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800a542:	20f1      	movs	r0, #241	; 0xf1
 800a544:	f000 fc94 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x37);
 800a548:	2037      	movs	r0, #55	; 0x37
 800a54a:	f000 fc91 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x07);
 800a54e:	2007      	movs	r0, #7
 800a550:	f000 fc8e 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x10);
 800a554:	2010      	movs	r0, #16
 800a556:	f000 fc8b 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x03);
 800a55a:	2003      	movs	r0, #3
 800a55c:	f000 fc88 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800a560:	200e      	movs	r0, #14
 800a562:	f000 fc85 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x09);
 800a566:	2009      	movs	r0, #9
 800a568:	f000 fc82 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x00);
 800a56c:	2000      	movs	r0, #0
 800a56e:	f000 fc7f 	bl	800ae70 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800a572:	20e1      	movs	r0, #225	; 0xe1
 800a574:	f000 fc4a 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a578:	2000      	movs	r0, #0
 800a57a:	f000 fc79 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800a57e:	200e      	movs	r0, #14
 800a580:	f000 fc76 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x14);
 800a584:	2014      	movs	r0, #20
 800a586:	f000 fc73 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x03);
 800a58a:	2003      	movs	r0, #3
 800a58c:	f000 fc70 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x11);
 800a590:	2011      	movs	r0, #17
 800a592:	f000 fc6d 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x07);
 800a596:	2007      	movs	r0, #7
 800a598:	f000 fc6a 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x31);
 800a59c:	2031      	movs	r0, #49	; 0x31
 800a59e:	f000 fc67 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800a5a2:	20c1      	movs	r0, #193	; 0xc1
 800a5a4:	f000 fc64 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x48);
 800a5a8:	2048      	movs	r0, #72	; 0x48
 800a5aa:	f000 fc61 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x08);
 800a5ae:	2008      	movs	r0, #8
 800a5b0:	f000 fc5e 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800a5b4:	200f      	movs	r0, #15
 800a5b6:	f000 fc5b 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800a5ba:	200c      	movs	r0, #12
 800a5bc:	f000 fc58 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x31);
 800a5c0:	2031      	movs	r0, #49	; 0x31
 800a5c2:	f000 fc55 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x36);
 800a5c6:	2036      	movs	r0, #54	; 0x36
 800a5c8:	f000 fc52 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800a5cc:	200f      	movs	r0, #15
 800a5ce:	f000 fc4f 	bl	800ae70 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800a5d2:	2011      	movs	r0, #17
 800a5d4:	f000 fc1a 	bl	800ae0c <_LCD_SendCommand>
	HAL_Delay(240);
 800a5d8:	20f0      	movs	r0, #240	; 0xf0
 800a5da:	f7fa f99b 	bl	8004914 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800a5de:	2029      	movs	r0, #41	; 0x29
 800a5e0:	f000 fc14 	bl	800ae0c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	f000 fae5 	bl	800abb4 <ILI9341_Set_Rotation>
}
 800a5ea:	bf00      	nop
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5f4:	4b0b      	ldr	r3, [pc, #44]	; (800a624 <ILI9341_SPI_Init+0x34>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fc:	2b40      	cmp	r3, #64	; 0x40
 800a5fe:	d005      	beq.n	800a60c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800a600:	4b08      	ldr	r3, [pc, #32]	; (800a624 <ILI9341_SPI_Init+0x34>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a07      	ldr	r2, [pc, #28]	; (800a624 <ILI9341_SPI_Init+0x34>)
 800a606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a60a:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a60c:	4b06      	ldr	r3, [pc, #24]	; (800a628 <ILI9341_SPI_Init+0x38>)
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	4a05      	ldr	r2, [pc, #20]	; (800a628 <ILI9341_SPI_Init+0x38>)
 800a612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a616:	6153      	str	r3, [r2, #20]
}
 800a618:	bf00      	nop
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	40003c00 	.word	0x40003c00
 800a628:	48000400 	.word	0x48000400

0800a62c <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800a62c:	b590      	push	{r4, r7, lr}
 800a62e:	b085      	sub	sp, #20
 800a630:	af02      	add	r7, sp, #8
 800a632:	4604      	mov	r4, r0
 800a634:	4608      	mov	r0, r1
 800a636:	4611      	mov	r1, r2
 800a638:	461a      	mov	r2, r3
 800a63a:	4623      	mov	r3, r4
 800a63c:	80fb      	strh	r3, [r7, #6]
 800a63e:	4603      	mov	r3, r0
 800a640:	80bb      	strh	r3, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	807b      	strh	r3, [r7, #2]
 800a646:	4613      	mov	r3, r2
 800a648:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800a64a:	4b1a      	ldr	r3, [pc, #104]	; (800a6b4 <ILI9341_Draw_Horizontal_Line+0x88>)
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	88fa      	ldrh	r2, [r7, #6]
 800a652:	429a      	cmp	r2, r3
 800a654:	d229      	bcs.n	800a6aa <ILI9341_Draw_Horizontal_Line+0x7e>
 800a656:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	88ba      	ldrh	r2, [r7, #4]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d223      	bcs.n	800a6aa <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800a662:	88fa      	ldrh	r2, [r7, #6]
 800a664:	887b      	ldrh	r3, [r7, #2]
 800a666:	4413      	add	r3, r2
 800a668:	3b01      	subs	r3, #1
 800a66a:	4a12      	ldr	r2, [pc, #72]	; (800a6b4 <ILI9341_Draw_Horizontal_Line+0x88>)
 800a66c:	8812      	ldrh	r2, [r2, #0]
 800a66e:	b292      	uxth	r2, r2
 800a670:	4293      	cmp	r3, r2
 800a672:	db05      	blt.n	800a680 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800a674:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <ILI9341_Draw_Horizontal_Line+0x88>)
 800a676:	881b      	ldrh	r3, [r3, #0]
 800a678:	b29a      	uxth	r2, r3
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800a680:	88fa      	ldrh	r2, [r7, #6]
 800a682:	887b      	ldrh	r3, [r7, #2]
 800a684:	4413      	add	r3, r2
 800a686:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800a688:	3b01      	subs	r3, #1
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	88bb      	ldrh	r3, [r7, #4]
 800a68e:	88b9      	ldrh	r1, [r7, #4]
 800a690:	88f8      	ldrh	r0, [r7, #6]
 800a692:	f000 f85b 	bl	800a74c <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800a696:	887c      	ldrh	r4, [r7, #2]
 800a698:	883a      	ldrh	r2, [r7, #0]
 800a69a:	88b9      	ldrh	r1, [r7, #4]
 800a69c:	88f8      	ldrh	r0, [r7, #6]
 800a69e:	2303      	movs	r3, #3
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	4623      	mov	r3, r4
 800a6a4:	f000 fb02 	bl	800acac <_LCD_Write_Frame>
 800a6a8:	e000      	b.n	800a6ac <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800a6aa:	bf00      	nop
}
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd90      	pop	{r4, r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	2000001e 	.word	0x2000001e
 800a6b8:	2000001c 	.word	0x2000001c

0800a6bc <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800a6bc:	b590      	push	{r4, r7, lr}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	4623      	mov	r3, r4
 800a6cc:	80fb      	strh	r3, [r7, #6]
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	80bb      	strh	r3, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	807b      	strh	r3, [r7, #2]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800a6da:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <ILI9341_Draw_Vertical_Line+0x88>)
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	88fa      	ldrh	r2, [r7, #6]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d229      	bcs.n	800a73a <ILI9341_Draw_Vertical_Line+0x7e>
 800a6e6:	4b18      	ldr	r3, [pc, #96]	; (800a748 <ILI9341_Draw_Vertical_Line+0x8c>)
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	88ba      	ldrh	r2, [r7, #4]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d223      	bcs.n	800a73a <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800a6f2:	88ba      	ldrh	r2, [r7, #4]
 800a6f4:	887b      	ldrh	r3, [r7, #2]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	4a13      	ldr	r2, [pc, #76]	; (800a748 <ILI9341_Draw_Vertical_Line+0x8c>)
 800a6fc:	8812      	ldrh	r2, [r2, #0]
 800a6fe:	b292      	uxth	r2, r2
 800a700:	4293      	cmp	r3, r2
 800a702:	db05      	blt.n	800a710 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800a704:	4b10      	ldr	r3, [pc, #64]	; (800a748 <ILI9341_Draw_Vertical_Line+0x8c>)
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	b29a      	uxth	r2, r3
 800a70a:	88bb      	ldrh	r3, [r7, #4]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800a710:	88ba      	ldrh	r2, [r7, #4]
 800a712:	887b      	ldrh	r3, [r7, #2]
 800a714:	4413      	add	r3, r2
 800a716:	b29b      	uxth	r3, r3
 800a718:	3b01      	subs	r3, #1
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	88fa      	ldrh	r2, [r7, #6]
 800a71e:	88b9      	ldrh	r1, [r7, #4]
 800a720:	88f8      	ldrh	r0, [r7, #6]
 800a722:	f000 f813 	bl	800a74c <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800a726:	887c      	ldrh	r4, [r7, #2]
 800a728:	883a      	ldrh	r2, [r7, #0]
 800a72a:	88b9      	ldrh	r1, [r7, #4]
 800a72c:	88f8      	ldrh	r0, [r7, #6]
 800a72e:	2303      	movs	r3, #3
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	4623      	mov	r3, r4
 800a734:	f000 faba 	bl	800acac <_LCD_Write_Frame>
 800a738:	e000      	b.n	800a73c <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800a73a:	bf00      	nop
}
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd90      	pop	{r4, r7, pc}
 800a742:	bf00      	nop
 800a744:	2000001e 	.word	0x2000001e
 800a748:	2000001c 	.word	0x2000001c

0800a74c <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800a74c:	b590      	push	{r4, r7, lr}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	4611      	mov	r1, r2
 800a758:	461a      	mov	r2, r3
 800a75a:	4623      	mov	r3, r4
 800a75c:	80fb      	strh	r3, [r7, #6]
 800a75e:	4603      	mov	r3, r0
 800a760:	80bb      	strh	r3, [r7, #4]
 800a762:	460b      	mov	r3, r1
 800a764:	807b      	strh	r3, [r7, #2]
 800a766:	4613      	mov	r3, r2
 800a768:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800a76a:	202a      	movs	r0, #42	; 0x2a
 800a76c:	f000 fb4e 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800a770:	88fb      	ldrh	r3, [r7, #6]
 800a772:	0a1b      	lsrs	r3, r3, #8
 800a774:	b29b      	uxth	r3, r3
 800a776:	b2db      	uxtb	r3, r3
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 fb79 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(sc);
 800a77e:	88fb      	ldrh	r3, [r7, #6]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fb74 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800a788:	887b      	ldrh	r3, [r7, #2]
 800a78a:	0a1b      	lsrs	r3, r3, #8
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	4618      	mov	r0, r3
 800a792:	f000 fb6d 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(ec);
 800a796:	887b      	ldrh	r3, [r7, #2]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fb68 	bl	800ae70 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800a7a0:	202b      	movs	r0, #43	; 0x2b
 800a7a2:	f000 fb33 	bl	800ae0c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800a7a6:	88bb      	ldrh	r3, [r7, #4]
 800a7a8:	0a1b      	lsrs	r3, r3, #8
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 fb5e 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(sp);
 800a7b4:	88bb      	ldrh	r3, [r7, #4]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 fb59 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800a7be:	883b      	ldrh	r3, [r7, #0]
 800a7c0:	0a1b      	lsrs	r3, r3, #8
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fb52 	bl	800ae70 <_LCD_SendData>
	_LCD_SendData(ep);
 800a7cc:	883b      	ldrh	r3, [r7, #0]
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fb4d 	bl	800ae70 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800a7d6:	202c      	movs	r0, #44	; 0x2c
 800a7d8:	f000 fb18 	bl	800ae0c <_LCD_SendCommand>
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd90      	pop	{r4, r7, pc}

0800a7e4 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af02      	add	r7, sp, #8
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800a7ee:	4b10      	ldr	r3, [pc, #64]	; (800a830 <ILI9341_Fill_Screen+0x4c>)
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <ILI9341_Fill_Screen+0x50>)
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	f7ff ffa5 	bl	800a74c <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800a802:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <ILI9341_Fill_Screen+0x4c>)
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	b29b      	uxth	r3, r3
 800a808:	461a      	mov	r2, r3
 800a80a:	4b0a      	ldr	r3, [pc, #40]	; (800a834 <ILI9341_Fill_Screen+0x50>)
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	fb03 f302 	mul.w	r3, r3, r2
 800a814:	4619      	mov	r1, r3
 800a816:	88fa      	ldrh	r2, [r7, #6]
 800a818:	2304      	movs	r3, #4
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	460b      	mov	r3, r1
 800a81e:	2100      	movs	r1, #0
 800a820:	2000      	movs	r0, #0
 800a822:	f000 fa43 	bl	800acac <_LCD_Write_Frame>
}
 800a826:	bf00      	nop
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	2000001e 	.word	0x2000001e
 800a834:	2000001c 	.word	0x2000001c

0800a838 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08c      	sub	sp, #48	; 0x30
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	80fb      	strh	r3, [r7, #6]
 800a842:	460b      	mov	r3, r1
 800a844:	80bb      	strh	r3, [r7, #4]
 800a846:	4613      	mov	r3, r2
 800a848:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800a84a:	4b94      	ldr	r3, [pc, #592]	; (800aa9c <ILI9341_Draw_Pixel+0x264>)
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	88fa      	ldrh	r2, [r7, #6]
 800a852:	429a      	cmp	r2, r3
 800a854:	f080 811e 	bcs.w	800aa94 <ILI9341_Draw_Pixel+0x25c>
 800a858:	4b91      	ldr	r3, [pc, #580]	; (800aaa0 <ILI9341_Draw_Pixel+0x268>)
 800a85a:	881b      	ldrh	r3, [r3, #0]
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	88ba      	ldrh	r2, [r7, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	f080 8117 	bcs.w	800aa94 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800a866:	4b8f      	ldr	r3, [pc, #572]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	4a8e      	ldr	r2, [pc, #568]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a86c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a870:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a872:	4b8c      	ldr	r3, [pc, #560]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	4a8b      	ldr	r2, [pc, #556]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a87c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800a87e:	2200      	movs	r2, #0
 800a880:	2100      	movs	r1, #0
 800a882:	202a      	movs	r0, #42	; 0x2a
 800a884:	f000 fb26 	bl	800aed4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a888:	2300      	movs	r3, #0
 800a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a88c:	e008      	b.n	800a8a0 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a88e:	4b85      	ldr	r3, [pc, #532]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	4a84      	ldr	r2, [pc, #528]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a898:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89c:	3301      	adds	r3, #1
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	ddf3      	ble.n	800a88e <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800a8a6:	4b7f      	ldr	r3, [pc, #508]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	4a7e      	ldr	r2, [pc, #504]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a8b2:	4b7c      	ldr	r3, [pc, #496]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	4a7b      	ldr	r2, [pc, #492]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8bc:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a8be:	4b79      	ldr	r3, [pc, #484]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	4a78      	ldr	r2, [pc, #480]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a8c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8c8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800a8ca:	88fb      	ldrh	r3, [r7, #6]
 800a8cc:	0a1b      	lsrs	r3, r3, #8
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	753b      	strb	r3, [r7, #20]
 800a8d4:	88fb      	ldrh	r3, [r7, #6]
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800a8da:	88fb      	ldrh	r3, [r7, #6]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800a8e4:	88fb      	ldrh	r3, [r7, #6]
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800a8ec:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 9);
 800a8ee:	f107 0014 	add.w	r0, r7, #20
 800a8f2:	2309      	movs	r3, #9
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	2104      	movs	r1, #4
 800a8f8:	f000 fb02 	bl	800af00 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800a900:	e008      	b.n	800a914 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a902:	4b68      	ldr	r3, [pc, #416]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	4a67      	ldr	r2, [pc, #412]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a90c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a910:	3301      	adds	r3, #1
 800a912:	62bb      	str	r3, [r7, #40]	; 0x28
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	2b02      	cmp	r3, #2
 800a918:	ddf3      	ble.n	800a902 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a91a:	4b62      	ldr	r3, [pc, #392]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	4a61      	ldr	r2, [pc, #388]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a924:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800a926:	4b5f      	ldr	r3, [pc, #380]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	4a5e      	ldr	r2, [pc, #376]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a92c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a930:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a932:	4b5c      	ldr	r3, [pc, #368]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	4a5b      	ldr	r2, [pc, #364]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a93c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800a93e:	2200      	movs	r2, #0
 800a940:	2100      	movs	r1, #0
 800a942:	202b      	movs	r0, #43	; 0x2b
 800a944:	f000 fac6 	bl	800aed4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a948:	2300      	movs	r3, #0
 800a94a:	627b      	str	r3, [r7, #36]	; 0x24
 800a94c:	e008      	b.n	800a960 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a94e:	4b55      	ldr	r3, [pc, #340]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	4a54      	ldr	r2, [pc, #336]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a958:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	3301      	adds	r3, #1
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	2b02      	cmp	r3, #2
 800a964:	ddf3      	ble.n	800a94e <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800a966:	4b4f      	ldr	r3, [pc, #316]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	4a4e      	ldr	r2, [pc, #312]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a970:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a972:	4b4c      	ldr	r3, [pc, #304]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	4a4b      	ldr	r2, [pc, #300]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a97c:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a97e:	4b49      	ldr	r3, [pc, #292]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	4a48      	ldr	r2, [pc, #288]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a988:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800a98a:	88bb      	ldrh	r3, [r7, #4]
 800a98c:	0a1b      	lsrs	r3, r3, #8
 800a98e:	b29b      	uxth	r3, r3
 800a990:	b2db      	uxtb	r3, r3
 800a992:	743b      	strb	r3, [r7, #16]
 800a994:	88bb      	ldrh	r3, [r7, #4]
 800a996:	b2db      	uxtb	r3, r3
 800a998:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800a99a:	88bb      	ldrh	r3, [r7, #4]
 800a99c:	3301      	adds	r3, #1
 800a99e:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800a9a4:	88bb      	ldrh	r3, [r7, #4]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800a9ac:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 9);
 800a9ae:	f107 0010 	add.w	r0, r7, #16
 800a9b2:	2309      	movs	r3, #9
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2104      	movs	r1, #4
 800a9b8:	f000 faa2 	bl	800af00 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	623b      	str	r3, [r7, #32]
 800a9c0:	e008      	b.n	800a9d4 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a9c2:	4b38      	ldr	r3, [pc, #224]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	4a37      	ldr	r2, [pc, #220]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a9c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9cc:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	623b      	str	r3, [r7, #32]
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	ddf3      	ble.n	800a9c2 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a9da:	4b32      	ldr	r3, [pc, #200]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	4a31      	ldr	r2, [pc, #196]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9e4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800a9e6:	4b2f      	ldr	r3, [pc, #188]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	4a2e      	ldr	r2, [pc, #184]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a9ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9f0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a9f2:	4b2c      	ldr	r3, [pc, #176]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	4a2b      	ldr	r2, [pc, #172]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800a9f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9fc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2100      	movs	r1, #0
 800aa02:	202c      	movs	r0, #44	; 0x2c
 800aa04:	f000 fa66 	bl	800aed4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	e008      	b.n	800aa20 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800aa0e:	4b25      	ldr	r3, [pc, #148]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	4a24      	ldr	r2, [pc, #144]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa18:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	61fb      	str	r3, [r7, #28]
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	ddf3      	ble.n	800aa0e <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800aa26:	4b1f      	ldr	r3, [pc, #124]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	4a1e      	ldr	r2, [pc, #120]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa30:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800aa32:	4b1c      	ldr	r3, [pc, #112]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	4a1b      	ldr	r2, [pc, #108]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa3c:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800aa3e:	4b19      	ldr	r3, [pc, #100]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	4a18      	ldr	r2, [pc, #96]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa48:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800aa4a:	887b      	ldrh	r3, [r7, #2]
 800aa4c:	0a1b      	lsrs	r3, r3, #8
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	733b      	strb	r3, [r7, #12]
 800aa54:	887b      	ldrh	r3, [r7, #2]
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 9);
 800aa5a:	f107 000c 	add.w	r0, r7, #12
 800aa5e:	2309      	movs	r3, #9
 800aa60:	2200      	movs	r2, #0
 800aa62:	2104      	movs	r1, #4
 800aa64:	f000 fa4c 	bl	800af00 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	61bb      	str	r3, [r7, #24]
 800aa6c:	e008      	b.n	800aa80 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800aa6e:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	4a0c      	ldr	r2, [pc, #48]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa78:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	61bb      	str	r3, [r7, #24]
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	ddf3      	ble.n	800aa6e <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800aa86:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	4a06      	ldr	r2, [pc, #24]	; (800aaa4 <ILI9341_Draw_Pixel+0x26c>)
 800aa8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa90:	6153      	str	r3, [r2, #20]
 800aa92:	e000      	b.n	800aa96 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800aa94:	bf00      	nop


}
 800aa96:	3730      	adds	r7, #48	; 0x30
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	2000001e 	.word	0x2000001e
 800aaa0:	2000001c 	.word	0x2000001c
 800aaa4:	48000400 	.word	0x48000400

0800aaa8 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800aaa8:	b590      	push	{r4, r7, lr}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	4604      	mov	r4, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	4611      	mov	r1, r2
 800aab4:	461a      	mov	r2, r3
 800aab6:	4623      	mov	r3, r4
 800aab8:	80fb      	strh	r3, [r7, #6]
 800aaba:	4603      	mov	r3, r0
 800aabc:	80bb      	strh	r3, [r7, #4]
 800aabe:	460b      	mov	r3, r1
 800aac0:	807b      	strh	r3, [r7, #2]
 800aac2:	4613      	mov	r3, r2
 800aac4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800aac6:	4b39      	ldr	r3, [pc, #228]	; (800abac <ILI9341_Draw_Rectangle+0x104>)
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	88fa      	ldrh	r2, [r7, #6]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d268      	bcs.n	800aba4 <ILI9341_Draw_Rectangle+0xfc>
 800aad2:	4b37      	ldr	r3, [pc, #220]	; (800abb0 <ILI9341_Draw_Rectangle+0x108>)
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	88ba      	ldrh	r2, [r7, #4]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d262      	bcs.n	800aba4 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800aade:	88fa      	ldrh	r2, [r7, #6]
 800aae0:	887b      	ldrh	r3, [r7, #2]
 800aae2:	4413      	add	r3, r2
 800aae4:	3b01      	subs	r3, #1
 800aae6:	4a31      	ldr	r2, [pc, #196]	; (800abac <ILI9341_Draw_Rectangle+0x104>)
 800aae8:	8812      	ldrh	r2, [r2, #0]
 800aaea:	b292      	uxth	r2, r2
 800aaec:	4293      	cmp	r3, r2
 800aaee:	db05      	blt.n	800aafc <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800aaf0:	4b2e      	ldr	r3, [pc, #184]	; (800abac <ILI9341_Draw_Rectangle+0x104>)
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	88fb      	ldrh	r3, [r7, #6]
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800aafc:	88ba      	ldrh	r2, [r7, #4]
 800aafe:	883b      	ldrh	r3, [r7, #0]
 800ab00:	4413      	add	r3, r2
 800ab02:	3b01      	subs	r3, #1
 800ab04:	4a2a      	ldr	r2, [pc, #168]	; (800abb0 <ILI9341_Draw_Rectangle+0x108>)
 800ab06:	8812      	ldrh	r2, [r2, #0]
 800ab08:	b292      	uxth	r2, r2
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	db05      	blt.n	800ab1a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800ab0e:	4b28      	ldr	r3, [pc, #160]	; (800abb0 <ILI9341_Draw_Rectangle+0x108>)
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	88bb      	ldrh	r3, [r7, #4]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800ab1a:	88fa      	ldrh	r2, [r7, #6]
 800ab1c:	887b      	ldrh	r3, [r7, #2]
 800ab1e:	4413      	add	r3, r2
 800ab20:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ab22:	3b01      	subs	r3, #1
 800ab24:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ab26:	88ba      	ldrh	r2, [r7, #4]
 800ab28:	883b      	ldrh	r3, [r7, #0]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	88b9      	ldrh	r1, [r7, #4]
 800ab34:	88f8      	ldrh	r0, [r7, #6]
 800ab36:	4622      	mov	r2, r4
 800ab38:	f7ff fe08 	bl	800a74c <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ab3c:	883a      	ldrh	r2, [r7, #0]
 800ab3e:	887b      	ldrh	r3, [r7, #2]
 800ab40:	fb12 f303 	smulbb	r3, r2, r3
 800ab44:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800ab4a:	89fb      	ldrh	r3, [r7, #14]
 800ab4c:	f003 0301 	and.w	r3, r3, #1
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d009      	beq.n	800ab68 <ILI9341_Draw_Rectangle+0xc0>
 800ab54:	89fb      	ldrh	r3, [r7, #14]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d906      	bls.n	800ab68 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800ab5e:	89fb      	ldrh	r3, [r7, #14]
 800ab60:	085b      	lsrs	r3, r3, #1
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ab68:	89fc      	ldrh	r4, [r7, #14]
 800ab6a:	8c3a      	ldrh	r2, [r7, #32]
 800ab6c:	88b9      	ldrh	r1, [r7, #4]
 800ab6e:	88f8      	ldrh	r0, [r7, #6]
 800ab70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	4623      	mov	r3, r4
 800ab78:	f000 f898 	bl	800acac <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800ab7c:	7b7b      	ldrb	r3, [r7, #13]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d011      	beq.n	800aba6 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ab82:	88fa      	ldrh	r2, [r7, #6]
 800ab84:	887b      	ldrh	r3, [r7, #2]
 800ab86:	4413      	add	r3, r2
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ab8e:	88ba      	ldrh	r2, [r7, #4]
 800ab90:	883b      	ldrh	r3, [r7, #0]
 800ab92:	4413      	add	r3, r2
 800ab94:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ab96:	3b01      	subs	r3, #1
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	8c3a      	ldrh	r2, [r7, #32]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	f7ff fe4b 	bl	800a838 <ILI9341_Draw_Pixel>
 800aba2:	e000      	b.n	800aba6 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800aba4:	bf00      	nop
							colour);
	}
}
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd90      	pop	{r4, r7, pc}
 800abac:	2000001e 	.word	0x2000001e
 800abb0:	2000001c 	.word	0x2000001c

0800abb4 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	4603      	mov	r3, r0
 800abbc:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800abc2:	2036      	movs	r0, #54	; 0x36
 800abc4:	f000 f922 	bl	800ae0c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d836      	bhi.n	800ac3c <ILI9341_Set_Rotation+0x88>
 800abce:	a201      	add	r2, pc, #4	; (adr r2, 800abd4 <ILI9341_Set_Rotation+0x20>)
 800abd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd4:	0800abe5 	.word	0x0800abe5
 800abd8:	0800abfb 	.word	0x0800abfb
 800abdc:	0800ac11 	.word	0x0800ac11
 800abe0:	0800ac27 	.word	0x0800ac27
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800abe4:	2048      	movs	r0, #72	; 0x48
 800abe6:	f000 f943 	bl	800ae70 <_LCD_SendData>
			LCD_WIDTH = 240;
 800abea:	4b17      	ldr	r3, [pc, #92]	; (800ac48 <ILI9341_Set_Rotation+0x94>)
 800abec:	22f0      	movs	r2, #240	; 0xf0
 800abee:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800abf0:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <ILI9341_Set_Rotation+0x98>)
 800abf2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800abf6:	801a      	strh	r2, [r3, #0]
			break;
 800abf8:	e021      	b.n	800ac3e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800abfa:	2028      	movs	r0, #40	; 0x28
 800abfc:	f000 f938 	bl	800ae70 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ac00:	4b11      	ldr	r3, [pc, #68]	; (800ac48 <ILI9341_Set_Rotation+0x94>)
 800ac02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ac06:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ac08:	4b10      	ldr	r3, [pc, #64]	; (800ac4c <ILI9341_Set_Rotation+0x98>)
 800ac0a:	22f0      	movs	r2, #240	; 0xf0
 800ac0c:	801a      	strh	r2, [r3, #0]
			break;
 800ac0e:	e016      	b.n	800ac3e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800ac10:	2088      	movs	r0, #136	; 0x88
 800ac12:	f000 f92d 	bl	800ae70 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800ac16:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <ILI9341_Set_Rotation+0x94>)
 800ac18:	22f0      	movs	r2, #240	; 0xf0
 800ac1a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ac1c:	4b0b      	ldr	r3, [pc, #44]	; (800ac4c <ILI9341_Set_Rotation+0x98>)
 800ac1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ac22:	801a      	strh	r2, [r3, #0]
			break;
 800ac24:	e00b      	b.n	800ac3e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800ac26:	20e8      	movs	r0, #232	; 0xe8
 800ac28:	f000 f922 	bl	800ae70 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ac2c:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <ILI9341_Set_Rotation+0x94>)
 800ac2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ac32:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ac34:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <ILI9341_Set_Rotation+0x98>)
 800ac36:	22f0      	movs	r2, #240	; 0xf0
 800ac38:	801a      	strh	r2, [r3, #0]
			break;
 800ac3a:	e000      	b.n	800ac3e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800ac3c:	bf00      	nop
	}
}
 800ac3e:	bf00      	nop
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	2000001e 	.word	0x2000001e
 800ac4c:	2000001c 	.word	0x2000001c

0800ac50 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ac54:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <_LCD_Enable+0x1c>)
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	4a04      	ldr	r2, [pc, #16]	; (800ac6c <_LCD_Enable+0x1c>)
 800ac5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac5e:	6153      	str	r3, [r2, #20]
}
 800ac60:	bf00      	nop
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	48000400 	.word	0x48000400

0800ac70 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800ac74:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <_LCD_Reset+0x38>)
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	4a0b      	ldr	r2, [pc, #44]	; (800aca8 <_LCD_Reset+0x38>)
 800ac7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac7e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800ac80:	20c8      	movs	r0, #200	; 0xc8
 800ac82:	f7f9 fe47 	bl	8004914 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ac86:	4b08      	ldr	r3, [pc, #32]	; (800aca8 <_LCD_Reset+0x38>)
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	4a07      	ldr	r2, [pc, #28]	; (800aca8 <_LCD_Reset+0x38>)
 800ac8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac90:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800ac92:	20c8      	movs	r0, #200	; 0xc8
 800ac94:	f7f9 fe3e 	bl	8004914 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ac98:	4b03      	ldr	r3, [pc, #12]	; (800aca8 <_LCD_Reset+0x38>)
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	4a02      	ldr	r2, [pc, #8]	; (800aca8 <_LCD_Reset+0x38>)
 800ac9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aca2:	6153      	str	r3, [r2, #20]
}
 800aca4:	bf00      	nop
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	48000400 	.word	0x48000400

0800acac <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800acac:	b5b0      	push	{r4, r5, r7, lr}
 800acae:	b08e      	sub	sp, #56	; 0x38
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	607b      	str	r3, [r7, #4]
 800acb4:	4603      	mov	r3, r0
 800acb6:	81fb      	strh	r3, [r7, #14]
 800acb8:	460b      	mov	r3, r1
 800acba:	81bb      	strh	r3, [r7, #12]
 800acbc:	4613      	mov	r3, r2
 800acbe:	817b      	strh	r3, [r7, #10]
 800acc0:	466b      	mov	r3, sp
 800acc2:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	4a4d      	ldr	r2, [pc, #308]	; (800ae04 <_LCD_Write_Frame+0x158>)
 800acce:	8812      	ldrh	r2, [r2, #0]
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d202      	bcs.n	800acda <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acd8:	e002      	b.n	800ace0 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800acda:	4b4a      	ldr	r3, [pc, #296]	; (800ae04 <_LCD_Write_Frame+0x158>)
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800ace0:	897b      	ldrh	r3, [r7, #10]
 800ace2:	0a1b      	lsrs	r3, r3, #8
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800ace8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acea:	4603      	mov	r3, r0
 800acec:	3b01      	subs	r3, #1
 800acee:	61bb      	str	r3, [r7, #24]
 800acf0:	4601      	mov	r1, r0
 800acf2:	f04f 0200 	mov.w	r2, #0
 800acf6:	f04f 0300 	mov.w	r3, #0
 800acfa:	f04f 0400 	mov.w	r4, #0
 800acfe:	00d4      	lsls	r4, r2, #3
 800ad00:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ad04:	00cb      	lsls	r3, r1, #3
 800ad06:	4601      	mov	r1, r0
 800ad08:	f04f 0200 	mov.w	r2, #0
 800ad0c:	f04f 0300 	mov.w	r3, #0
 800ad10:	f04f 0400 	mov.w	r4, #0
 800ad14:	00d4      	lsls	r4, r2, #3
 800ad16:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ad1a:	00cb      	lsls	r3, r1, #3
 800ad1c:	1dc3      	adds	r3, r0, #7
 800ad1e:	08db      	lsrs	r3, r3, #3
 800ad20:	00db      	lsls	r3, r3, #3
 800ad22:	ebad 0d03 	sub.w	sp, sp, r3
 800ad26:	466b      	mov	r3, sp
 800ad28:	3300      	adds	r3, #0
 800ad2a:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	633b      	str	r3, [r7, #48]	; 0x30
 800ad30:	e00d      	b.n	800ad4e <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad36:	4413      	add	r3, r2
 800ad38:	7ffa      	ldrb	r2, [r7, #31]
 800ad3a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3e:	3301      	adds	r3, #1
 800ad40:	897a      	ldrh	r2, [r7, #10]
 800ad42:	b2d1      	uxtb	r1, r2
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	3302      	adds	r3, #2
 800ad4c:	633b      	str	r3, [r7, #48]	; 0x30
 800ad4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d3ed      	bcc.n	800ad32 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00d      	beq.n	800ad86 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad72:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad78:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad7e:	fb01 f202 	mul.w	r2, r1, r2
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ad86:	4b20      	ldr	r3, [pc, #128]	; (800ae08 <_LCD_Write_Frame+0x15c>)
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	4a1f      	ldr	r2, [pc, #124]	; (800ae08 <_LCD_Write_Frame+0x15c>)
 800ad8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad90:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ad92:	4b1d      	ldr	r3, [pc, #116]	; (800ae08 <_LCD_Write_Frame+0x15c>)
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	4a1c      	ldr	r2, [pc, #112]	; (800ae08 <_LCD_Write_Frame+0x15c>)
 800ad98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad9c:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00f      	beq.n	800adc4 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ada4:	2300      	movs	r3, #0
 800ada6:	627b      	str	r3, [r7, #36]	; 0x24
 800ada8:	e008      	b.n	800adbc <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 9);
 800adaa:	6978      	ldr	r0, [r7, #20]
 800adac:	2309      	movs	r3, #9
 800adae:	2200      	movs	r2, #0
 800adb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adb2:	f000 f8a5 	bl	800af00 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb8:	3301      	adds	r3, #1
 800adba:	627b      	str	r3, [r7, #36]	; 0x24
 800adbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d3f2      	bcc.n	800adaa <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 9);
 800adc4:	6978      	ldr	r0, [r7, #20]
 800adc6:	2309      	movs	r3, #9
 800adc8:	2200      	movs	r2, #0
 800adca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adcc:	f000 f898 	bl	800af00 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800add0:	2300      	movs	r3, #0
 800add2:	623b      	str	r3, [r7, #32]
 800add4:	e008      	b.n	800ade8 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800add6:	4b0c      	ldr	r3, [pc, #48]	; (800ae08 <_LCD_Write_Frame+0x15c>)
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	4a0b      	ldr	r2, [pc, #44]	; (800ae08 <_LCD_Write_Frame+0x15c>)
 800addc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ade0:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	3301      	adds	r3, #1
 800ade6:	623b      	str	r3, [r7, #32]
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	2b02      	cmp	r3, #2
 800adec:	ddf3      	ble.n	800add6 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800adee:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <_LCD_Write_Frame+0x15c>)
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	4a05      	ldr	r2, [pc, #20]	; (800ae08 <_LCD_Write_Frame+0x15c>)
 800adf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf8:	6153      	str	r3, [r2, #20]
 800adfa:	46ad      	mov	sp, r5

}
 800adfc:	bf00      	nop
 800adfe:	3738      	adds	r7, #56	; 0x38
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bdb0      	pop	{r4, r5, r7, pc}
 800ae04:	20000020 	.word	0x20000020
 800ae08:	48000400 	.word	0x48000400

0800ae0c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ae16:	4b15      	ldr	r3, [pc, #84]	; (800ae6c <_LCD_SendCommand+0x60>)
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	4a14      	ldr	r2, [pc, #80]	; (800ae6c <_LCD_SendCommand+0x60>)
 800ae1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae20:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ae22:	4b12      	ldr	r3, [pc, #72]	; (800ae6c <_LCD_SendCommand+0x60>)
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	4a11      	ldr	r2, [pc, #68]	; (800ae6c <_LCD_SendCommand+0x60>)
 800ae28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae2c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	2200      	movs	r2, #0
 800ae32:	2100      	movs	r1, #0
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 f84d 	bl	800aed4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
 800ae3e:	e008      	b.n	800ae52 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ae40:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <_LCD_SendCommand+0x60>)
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	4a09      	ldr	r2, [pc, #36]	; (800ae6c <_LCD_SendCommand+0x60>)
 800ae46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae4a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	60fb      	str	r3, [r7, #12]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	ddf3      	ble.n	800ae40 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <_LCD_SendCommand+0x60>)
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	4a03      	ldr	r2, [pc, #12]	; (800ae6c <_LCD_SendCommand+0x60>)
 800ae5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae62:	6153      	str	r3, [r2, #20]
}
 800ae64:	bf00      	nop
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	48000400 	.word	0x48000400

0800ae70 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ae7a:	4b15      	ldr	r3, [pc, #84]	; (800aed0 <_LCD_SendData+0x60>)
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	4a14      	ldr	r2, [pc, #80]	; (800aed0 <_LCD_SendData+0x60>)
 800ae80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae84:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ae86:	4b12      	ldr	r3, [pc, #72]	; (800aed0 <_LCD_SendData+0x60>)
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	4a11      	ldr	r2, [pc, #68]	; (800aed0 <_LCD_SendData+0x60>)
 800ae8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae90:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	2200      	movs	r2, #0
 800ae96:	2100      	movs	r1, #0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 f81b 	bl	800aed4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	e008      	b.n	800aeb6 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800aea4:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <_LCD_SendData+0x60>)
 800aea6:	695b      	ldr	r3, [r3, #20]
 800aea8:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <_LCD_SendData+0x60>)
 800aeaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aeae:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	ddf3      	ble.n	800aea4 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800aebc:	4b04      	ldr	r3, [pc, #16]	; (800aed0 <_LCD_SendData+0x60>)
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	4a03      	ldr	r2, [pc, #12]	; (800aed0 <_LCD_SendData+0x60>)
 800aec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aec6:	6153      	str	r3, [r2, #20]
}
 800aec8:	bf00      	nop
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	48000400 	.word	0x48000400

0800aed4 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	71fb      	strb	r3, [r7, #7]
 800aede:	460b      	mov	r3, r1
 800aee0:	71bb      	strb	r3, [r7, #6]
 800aee2:	4613      	mov	r3, r2
 800aee4:	717b      	strb	r3, [r7, #5]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, &data_buffer, 1, 1);
 800aee6:	1df9      	adds	r1, r7, #7
 800aee8:	2301      	movs	r3, #1
 800aeea:	2201      	movs	r2, #1
 800aeec:	4803      	ldr	r0, [pc, #12]	; (800aefc <_SPI_SendByte+0x28>)
 800aeee:	f7fd fa9f 	bl	8008430 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800aef2:	bf00      	nop
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	200012e8 	.word	0x200012e8

0800af00 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	4611      	mov	r1, r2
 800af0c:	461a      	mov	r2, r3
 800af0e:	460b      	mov	r3, r1
 800af10:	71fb      	strb	r3, [r7, #7]
 800af12:	4613      	mov	r3, r2
 800af14:	71bb      	strb	r3, [r7, #6]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)data_buffer, buffer_size, 2 );
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	b29a      	uxth	r2, r3
 800af1a:	2302      	movs	r3, #2
 800af1c:	68f9      	ldr	r1, [r7, #12]
 800af1e:	4803      	ldr	r0, [pc, #12]	; (800af2c <_SPI_SendByteMultiByte+0x2c>)
 800af20:	f7fd fa86 	bl	8008430 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800af24:	bf00      	nop
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	200012e8 	.word	0x200012e8

0800af30 <__errno>:
 800af30:	4b01      	ldr	r3, [pc, #4]	; (800af38 <__errno+0x8>)
 800af32:	6818      	ldr	r0, [r3, #0]
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	20001064 	.word	0x20001064

0800af3c <__libc_init_array>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	4e0d      	ldr	r6, [pc, #52]	; (800af74 <__libc_init_array+0x38>)
 800af40:	4c0d      	ldr	r4, [pc, #52]	; (800af78 <__libc_init_array+0x3c>)
 800af42:	1ba4      	subs	r4, r4, r6
 800af44:	10a4      	asrs	r4, r4, #2
 800af46:	2500      	movs	r5, #0
 800af48:	42a5      	cmp	r5, r4
 800af4a:	d109      	bne.n	800af60 <__libc_init_array+0x24>
 800af4c:	4e0b      	ldr	r6, [pc, #44]	; (800af7c <__libc_init_array+0x40>)
 800af4e:	4c0c      	ldr	r4, [pc, #48]	; (800af80 <__libc_init_array+0x44>)
 800af50:	f000 fff8 	bl	800bf44 <_init>
 800af54:	1ba4      	subs	r4, r4, r6
 800af56:	10a4      	asrs	r4, r4, #2
 800af58:	2500      	movs	r5, #0
 800af5a:	42a5      	cmp	r5, r4
 800af5c:	d105      	bne.n	800af6a <__libc_init_array+0x2e>
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af64:	4798      	blx	r3
 800af66:	3501      	adds	r5, #1
 800af68:	e7ee      	b.n	800af48 <__libc_init_array+0xc>
 800af6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af6e:	4798      	blx	r3
 800af70:	3501      	adds	r5, #1
 800af72:	e7f2      	b.n	800af5a <__libc_init_array+0x1e>
 800af74:	0800c654 	.word	0x0800c654
 800af78:	0800c654 	.word	0x0800c654
 800af7c:	0800c654 	.word	0x0800c654
 800af80:	0800c658 	.word	0x0800c658

0800af84 <memset>:
 800af84:	4402      	add	r2, r0
 800af86:	4603      	mov	r3, r0
 800af88:	4293      	cmp	r3, r2
 800af8a:	d100      	bne.n	800af8e <memset+0xa>
 800af8c:	4770      	bx	lr
 800af8e:	f803 1b01 	strb.w	r1, [r3], #1
 800af92:	e7f9      	b.n	800af88 <memset+0x4>

0800af94 <_puts_r>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	460e      	mov	r6, r1
 800af98:	4605      	mov	r5, r0
 800af9a:	b118      	cbz	r0, 800afa4 <_puts_r+0x10>
 800af9c:	6983      	ldr	r3, [r0, #24]
 800af9e:	b90b      	cbnz	r3, 800afa4 <_puts_r+0x10>
 800afa0:	f000 fa50 	bl	800b444 <__sinit>
 800afa4:	69ab      	ldr	r3, [r5, #24]
 800afa6:	68ac      	ldr	r4, [r5, #8]
 800afa8:	b913      	cbnz	r3, 800afb0 <_puts_r+0x1c>
 800afaa:	4628      	mov	r0, r5
 800afac:	f000 fa4a 	bl	800b444 <__sinit>
 800afb0:	4b23      	ldr	r3, [pc, #140]	; (800b040 <_puts_r+0xac>)
 800afb2:	429c      	cmp	r4, r3
 800afb4:	d117      	bne.n	800afe6 <_puts_r+0x52>
 800afb6:	686c      	ldr	r4, [r5, #4]
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	071b      	lsls	r3, r3, #28
 800afbc:	d51d      	bpl.n	800affa <_puts_r+0x66>
 800afbe:	6923      	ldr	r3, [r4, #16]
 800afc0:	b1db      	cbz	r3, 800affa <_puts_r+0x66>
 800afc2:	3e01      	subs	r6, #1
 800afc4:	68a3      	ldr	r3, [r4, #8]
 800afc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800afca:	3b01      	subs	r3, #1
 800afcc:	60a3      	str	r3, [r4, #8]
 800afce:	b9e9      	cbnz	r1, 800b00c <_puts_r+0x78>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	da2e      	bge.n	800b032 <_puts_r+0x9e>
 800afd4:	4622      	mov	r2, r4
 800afd6:	210a      	movs	r1, #10
 800afd8:	4628      	mov	r0, r5
 800afda:	f000 f883 	bl	800b0e4 <__swbuf_r>
 800afde:	3001      	adds	r0, #1
 800afe0:	d011      	beq.n	800b006 <_puts_r+0x72>
 800afe2:	200a      	movs	r0, #10
 800afe4:	e011      	b.n	800b00a <_puts_r+0x76>
 800afe6:	4b17      	ldr	r3, [pc, #92]	; (800b044 <_puts_r+0xb0>)
 800afe8:	429c      	cmp	r4, r3
 800afea:	d101      	bne.n	800aff0 <_puts_r+0x5c>
 800afec:	68ac      	ldr	r4, [r5, #8]
 800afee:	e7e3      	b.n	800afb8 <_puts_r+0x24>
 800aff0:	4b15      	ldr	r3, [pc, #84]	; (800b048 <_puts_r+0xb4>)
 800aff2:	429c      	cmp	r4, r3
 800aff4:	bf08      	it	eq
 800aff6:	68ec      	ldreq	r4, [r5, #12]
 800aff8:	e7de      	b.n	800afb8 <_puts_r+0x24>
 800affa:	4621      	mov	r1, r4
 800affc:	4628      	mov	r0, r5
 800affe:	f000 f8c3 	bl	800b188 <__swsetup_r>
 800b002:	2800      	cmp	r0, #0
 800b004:	d0dd      	beq.n	800afc2 <_puts_r+0x2e>
 800b006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	da04      	bge.n	800b01a <_puts_r+0x86>
 800b010:	69a2      	ldr	r2, [r4, #24]
 800b012:	429a      	cmp	r2, r3
 800b014:	dc06      	bgt.n	800b024 <_puts_r+0x90>
 800b016:	290a      	cmp	r1, #10
 800b018:	d004      	beq.n	800b024 <_puts_r+0x90>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	1c5a      	adds	r2, r3, #1
 800b01e:	6022      	str	r2, [r4, #0]
 800b020:	7019      	strb	r1, [r3, #0]
 800b022:	e7cf      	b.n	800afc4 <_puts_r+0x30>
 800b024:	4622      	mov	r2, r4
 800b026:	4628      	mov	r0, r5
 800b028:	f000 f85c 	bl	800b0e4 <__swbuf_r>
 800b02c:	3001      	adds	r0, #1
 800b02e:	d1c9      	bne.n	800afc4 <_puts_r+0x30>
 800b030:	e7e9      	b.n	800b006 <_puts_r+0x72>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	200a      	movs	r0, #10
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	6022      	str	r2, [r4, #0]
 800b03a:	7018      	strb	r0, [r3, #0]
 800b03c:	e7e5      	b.n	800b00a <_puts_r+0x76>
 800b03e:	bf00      	nop
 800b040:	0800c5e0 	.word	0x0800c5e0
 800b044:	0800c600 	.word	0x0800c600
 800b048:	0800c5c0 	.word	0x0800c5c0

0800b04c <puts>:
 800b04c:	4b02      	ldr	r3, [pc, #8]	; (800b058 <puts+0xc>)
 800b04e:	4601      	mov	r1, r0
 800b050:	6818      	ldr	r0, [r3, #0]
 800b052:	f7ff bf9f 	b.w	800af94 <_puts_r>
 800b056:	bf00      	nop
 800b058:	20001064 	.word	0x20001064

0800b05c <sniprintf>:
 800b05c:	b40c      	push	{r2, r3}
 800b05e:	b530      	push	{r4, r5, lr}
 800b060:	4b17      	ldr	r3, [pc, #92]	; (800b0c0 <sniprintf+0x64>)
 800b062:	1e0c      	subs	r4, r1, #0
 800b064:	b09d      	sub	sp, #116	; 0x74
 800b066:	681d      	ldr	r5, [r3, #0]
 800b068:	da08      	bge.n	800b07c <sniprintf+0x20>
 800b06a:	238b      	movs	r3, #139	; 0x8b
 800b06c:	602b      	str	r3, [r5, #0]
 800b06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b072:	b01d      	add	sp, #116	; 0x74
 800b074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b078:	b002      	add	sp, #8
 800b07a:	4770      	bx	lr
 800b07c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b080:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b084:	bf14      	ite	ne
 800b086:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b08a:	4623      	moveq	r3, r4
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	9307      	str	r3, [sp, #28]
 800b090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	9006      	str	r0, [sp, #24]
 800b098:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b09c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b09e:	ab21      	add	r3, sp, #132	; 0x84
 800b0a0:	a902      	add	r1, sp, #8
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	f000 fbbd 	bl	800b824 <_svfiprintf_r>
 800b0aa:	1c43      	adds	r3, r0, #1
 800b0ac:	bfbc      	itt	lt
 800b0ae:	238b      	movlt	r3, #139	; 0x8b
 800b0b0:	602b      	strlt	r3, [r5, #0]
 800b0b2:	2c00      	cmp	r4, #0
 800b0b4:	d0dd      	beq.n	800b072 <sniprintf+0x16>
 800b0b6:	9b02      	ldr	r3, [sp, #8]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	701a      	strb	r2, [r3, #0]
 800b0bc:	e7d9      	b.n	800b072 <sniprintf+0x16>
 800b0be:	bf00      	nop
 800b0c0:	20001064 	.word	0x20001064

0800b0c4 <strcat>:
 800b0c4:	b510      	push	{r4, lr}
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	781a      	ldrb	r2, [r3, #0]
 800b0ca:	1c5c      	adds	r4, r3, #1
 800b0cc:	b93a      	cbnz	r2, 800b0de <strcat+0x1a>
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0d8:	2a00      	cmp	r2, #0
 800b0da:	d1f9      	bne.n	800b0d0 <strcat+0xc>
 800b0dc:	bd10      	pop	{r4, pc}
 800b0de:	4623      	mov	r3, r4
 800b0e0:	e7f2      	b.n	800b0c8 <strcat+0x4>
	...

0800b0e4 <__swbuf_r>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	460e      	mov	r6, r1
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	b118      	cbz	r0, 800b0f6 <__swbuf_r+0x12>
 800b0ee:	6983      	ldr	r3, [r0, #24]
 800b0f0:	b90b      	cbnz	r3, 800b0f6 <__swbuf_r+0x12>
 800b0f2:	f000 f9a7 	bl	800b444 <__sinit>
 800b0f6:	4b21      	ldr	r3, [pc, #132]	; (800b17c <__swbuf_r+0x98>)
 800b0f8:	429c      	cmp	r4, r3
 800b0fa:	d12a      	bne.n	800b152 <__swbuf_r+0x6e>
 800b0fc:	686c      	ldr	r4, [r5, #4]
 800b0fe:	69a3      	ldr	r3, [r4, #24]
 800b100:	60a3      	str	r3, [r4, #8]
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	071a      	lsls	r2, r3, #28
 800b106:	d52e      	bpl.n	800b166 <__swbuf_r+0x82>
 800b108:	6923      	ldr	r3, [r4, #16]
 800b10a:	b363      	cbz	r3, 800b166 <__swbuf_r+0x82>
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	6820      	ldr	r0, [r4, #0]
 800b110:	1ac0      	subs	r0, r0, r3
 800b112:	6963      	ldr	r3, [r4, #20]
 800b114:	b2f6      	uxtb	r6, r6
 800b116:	4283      	cmp	r3, r0
 800b118:	4637      	mov	r7, r6
 800b11a:	dc04      	bgt.n	800b126 <__swbuf_r+0x42>
 800b11c:	4621      	mov	r1, r4
 800b11e:	4628      	mov	r0, r5
 800b120:	f000 f926 	bl	800b370 <_fflush_r>
 800b124:	bb28      	cbnz	r0, 800b172 <__swbuf_r+0x8e>
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	3b01      	subs	r3, #1
 800b12a:	60a3      	str	r3, [r4, #8]
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	6022      	str	r2, [r4, #0]
 800b132:	701e      	strb	r6, [r3, #0]
 800b134:	6963      	ldr	r3, [r4, #20]
 800b136:	3001      	adds	r0, #1
 800b138:	4283      	cmp	r3, r0
 800b13a:	d004      	beq.n	800b146 <__swbuf_r+0x62>
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	07db      	lsls	r3, r3, #31
 800b140:	d519      	bpl.n	800b176 <__swbuf_r+0x92>
 800b142:	2e0a      	cmp	r6, #10
 800b144:	d117      	bne.n	800b176 <__swbuf_r+0x92>
 800b146:	4621      	mov	r1, r4
 800b148:	4628      	mov	r0, r5
 800b14a:	f000 f911 	bl	800b370 <_fflush_r>
 800b14e:	b190      	cbz	r0, 800b176 <__swbuf_r+0x92>
 800b150:	e00f      	b.n	800b172 <__swbuf_r+0x8e>
 800b152:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <__swbuf_r+0x9c>)
 800b154:	429c      	cmp	r4, r3
 800b156:	d101      	bne.n	800b15c <__swbuf_r+0x78>
 800b158:	68ac      	ldr	r4, [r5, #8]
 800b15a:	e7d0      	b.n	800b0fe <__swbuf_r+0x1a>
 800b15c:	4b09      	ldr	r3, [pc, #36]	; (800b184 <__swbuf_r+0xa0>)
 800b15e:	429c      	cmp	r4, r3
 800b160:	bf08      	it	eq
 800b162:	68ec      	ldreq	r4, [r5, #12]
 800b164:	e7cb      	b.n	800b0fe <__swbuf_r+0x1a>
 800b166:	4621      	mov	r1, r4
 800b168:	4628      	mov	r0, r5
 800b16a:	f000 f80d 	bl	800b188 <__swsetup_r>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d0cc      	beq.n	800b10c <__swbuf_r+0x28>
 800b172:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b176:	4638      	mov	r0, r7
 800b178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b17a:	bf00      	nop
 800b17c:	0800c5e0 	.word	0x0800c5e0
 800b180:	0800c600 	.word	0x0800c600
 800b184:	0800c5c0 	.word	0x0800c5c0

0800b188 <__swsetup_r>:
 800b188:	4b32      	ldr	r3, [pc, #200]	; (800b254 <__swsetup_r+0xcc>)
 800b18a:	b570      	push	{r4, r5, r6, lr}
 800b18c:	681d      	ldr	r5, [r3, #0]
 800b18e:	4606      	mov	r6, r0
 800b190:	460c      	mov	r4, r1
 800b192:	b125      	cbz	r5, 800b19e <__swsetup_r+0x16>
 800b194:	69ab      	ldr	r3, [r5, #24]
 800b196:	b913      	cbnz	r3, 800b19e <__swsetup_r+0x16>
 800b198:	4628      	mov	r0, r5
 800b19a:	f000 f953 	bl	800b444 <__sinit>
 800b19e:	4b2e      	ldr	r3, [pc, #184]	; (800b258 <__swsetup_r+0xd0>)
 800b1a0:	429c      	cmp	r4, r3
 800b1a2:	d10f      	bne.n	800b1c4 <__swsetup_r+0x3c>
 800b1a4:	686c      	ldr	r4, [r5, #4]
 800b1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	0715      	lsls	r5, r2, #28
 800b1ae:	d42c      	bmi.n	800b20a <__swsetup_r+0x82>
 800b1b0:	06d0      	lsls	r0, r2, #27
 800b1b2:	d411      	bmi.n	800b1d8 <__swsetup_r+0x50>
 800b1b4:	2209      	movs	r2, #9
 800b1b6:	6032      	str	r2, [r6, #0]
 800b1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1bc:	81a3      	strh	r3, [r4, #12]
 800b1be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1c2:	e03e      	b.n	800b242 <__swsetup_r+0xba>
 800b1c4:	4b25      	ldr	r3, [pc, #148]	; (800b25c <__swsetup_r+0xd4>)
 800b1c6:	429c      	cmp	r4, r3
 800b1c8:	d101      	bne.n	800b1ce <__swsetup_r+0x46>
 800b1ca:	68ac      	ldr	r4, [r5, #8]
 800b1cc:	e7eb      	b.n	800b1a6 <__swsetup_r+0x1e>
 800b1ce:	4b24      	ldr	r3, [pc, #144]	; (800b260 <__swsetup_r+0xd8>)
 800b1d0:	429c      	cmp	r4, r3
 800b1d2:	bf08      	it	eq
 800b1d4:	68ec      	ldreq	r4, [r5, #12]
 800b1d6:	e7e6      	b.n	800b1a6 <__swsetup_r+0x1e>
 800b1d8:	0751      	lsls	r1, r2, #29
 800b1da:	d512      	bpl.n	800b202 <__swsetup_r+0x7a>
 800b1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1de:	b141      	cbz	r1, 800b1f2 <__swsetup_r+0x6a>
 800b1e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1e4:	4299      	cmp	r1, r3
 800b1e6:	d002      	beq.n	800b1ee <__swsetup_r+0x66>
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 fa19 	bl	800b620 <_free_r>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1f8:	81a3      	strh	r3, [r4, #12]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	6063      	str	r3, [r4, #4]
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	f043 0308 	orr.w	r3, r3, #8
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	b94b      	cbnz	r3, 800b222 <__swsetup_r+0x9a>
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b218:	d003      	beq.n	800b222 <__swsetup_r+0x9a>
 800b21a:	4621      	mov	r1, r4
 800b21c:	4630      	mov	r0, r6
 800b21e:	f000 f9bf 	bl	800b5a0 <__smakebuf_r>
 800b222:	89a2      	ldrh	r2, [r4, #12]
 800b224:	f012 0301 	ands.w	r3, r2, #1
 800b228:	d00c      	beq.n	800b244 <__swsetup_r+0xbc>
 800b22a:	2300      	movs	r3, #0
 800b22c:	60a3      	str	r3, [r4, #8]
 800b22e:	6963      	ldr	r3, [r4, #20]
 800b230:	425b      	negs	r3, r3
 800b232:	61a3      	str	r3, [r4, #24]
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	b953      	cbnz	r3, 800b24e <__swsetup_r+0xc6>
 800b238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b23c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b240:	d1ba      	bne.n	800b1b8 <__swsetup_r+0x30>
 800b242:	bd70      	pop	{r4, r5, r6, pc}
 800b244:	0792      	lsls	r2, r2, #30
 800b246:	bf58      	it	pl
 800b248:	6963      	ldrpl	r3, [r4, #20]
 800b24a:	60a3      	str	r3, [r4, #8]
 800b24c:	e7f2      	b.n	800b234 <__swsetup_r+0xac>
 800b24e:	2000      	movs	r0, #0
 800b250:	e7f7      	b.n	800b242 <__swsetup_r+0xba>
 800b252:	bf00      	nop
 800b254:	20001064 	.word	0x20001064
 800b258:	0800c5e0 	.word	0x0800c5e0
 800b25c:	0800c600 	.word	0x0800c600
 800b260:	0800c5c0 	.word	0x0800c5c0

0800b264 <__sflush_r>:
 800b264:	898a      	ldrh	r2, [r1, #12]
 800b266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b26a:	4605      	mov	r5, r0
 800b26c:	0710      	lsls	r0, r2, #28
 800b26e:	460c      	mov	r4, r1
 800b270:	d458      	bmi.n	800b324 <__sflush_r+0xc0>
 800b272:	684b      	ldr	r3, [r1, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	dc05      	bgt.n	800b284 <__sflush_r+0x20>
 800b278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	dc02      	bgt.n	800b284 <__sflush_r+0x20>
 800b27e:	2000      	movs	r0, #0
 800b280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b286:	2e00      	cmp	r6, #0
 800b288:	d0f9      	beq.n	800b27e <__sflush_r+0x1a>
 800b28a:	2300      	movs	r3, #0
 800b28c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b290:	682f      	ldr	r7, [r5, #0]
 800b292:	6a21      	ldr	r1, [r4, #32]
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	d032      	beq.n	800b2fe <__sflush_r+0x9a>
 800b298:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	075a      	lsls	r2, r3, #29
 800b29e:	d505      	bpl.n	800b2ac <__sflush_r+0x48>
 800b2a0:	6863      	ldr	r3, [r4, #4]
 800b2a2:	1ac0      	subs	r0, r0, r3
 800b2a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2a6:	b10b      	cbz	r3, 800b2ac <__sflush_r+0x48>
 800b2a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2aa:	1ac0      	subs	r0, r0, r3
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2b2:	6a21      	ldr	r1, [r4, #32]
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b0      	blx	r6
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	d106      	bne.n	800b2cc <__sflush_r+0x68>
 800b2be:	6829      	ldr	r1, [r5, #0]
 800b2c0:	291d      	cmp	r1, #29
 800b2c2:	d848      	bhi.n	800b356 <__sflush_r+0xf2>
 800b2c4:	4a29      	ldr	r2, [pc, #164]	; (800b36c <__sflush_r+0x108>)
 800b2c6:	40ca      	lsrs	r2, r1
 800b2c8:	07d6      	lsls	r6, r2, #31
 800b2ca:	d544      	bpl.n	800b356 <__sflush_r+0xf2>
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	6062      	str	r2, [r4, #4]
 800b2d0:	04d9      	lsls	r1, r3, #19
 800b2d2:	6922      	ldr	r2, [r4, #16]
 800b2d4:	6022      	str	r2, [r4, #0]
 800b2d6:	d504      	bpl.n	800b2e2 <__sflush_r+0x7e>
 800b2d8:	1c42      	adds	r2, r0, #1
 800b2da:	d101      	bne.n	800b2e0 <__sflush_r+0x7c>
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	b903      	cbnz	r3, 800b2e2 <__sflush_r+0x7e>
 800b2e0:	6560      	str	r0, [r4, #84]	; 0x54
 800b2e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2e4:	602f      	str	r7, [r5, #0]
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	d0c9      	beq.n	800b27e <__sflush_r+0x1a>
 800b2ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2ee:	4299      	cmp	r1, r3
 800b2f0:	d002      	beq.n	800b2f8 <__sflush_r+0x94>
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f000 f994 	bl	800b620 <_free_r>
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	6360      	str	r0, [r4, #52]	; 0x34
 800b2fc:	e7c0      	b.n	800b280 <__sflush_r+0x1c>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4628      	mov	r0, r5
 800b302:	47b0      	blx	r6
 800b304:	1c41      	adds	r1, r0, #1
 800b306:	d1c8      	bne.n	800b29a <__sflush_r+0x36>
 800b308:	682b      	ldr	r3, [r5, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0c5      	beq.n	800b29a <__sflush_r+0x36>
 800b30e:	2b1d      	cmp	r3, #29
 800b310:	d001      	beq.n	800b316 <__sflush_r+0xb2>
 800b312:	2b16      	cmp	r3, #22
 800b314:	d101      	bne.n	800b31a <__sflush_r+0xb6>
 800b316:	602f      	str	r7, [r5, #0]
 800b318:	e7b1      	b.n	800b27e <__sflush_r+0x1a>
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b320:	81a3      	strh	r3, [r4, #12]
 800b322:	e7ad      	b.n	800b280 <__sflush_r+0x1c>
 800b324:	690f      	ldr	r7, [r1, #16]
 800b326:	2f00      	cmp	r7, #0
 800b328:	d0a9      	beq.n	800b27e <__sflush_r+0x1a>
 800b32a:	0793      	lsls	r3, r2, #30
 800b32c:	680e      	ldr	r6, [r1, #0]
 800b32e:	bf08      	it	eq
 800b330:	694b      	ldreq	r3, [r1, #20]
 800b332:	600f      	str	r7, [r1, #0]
 800b334:	bf18      	it	ne
 800b336:	2300      	movne	r3, #0
 800b338:	eba6 0807 	sub.w	r8, r6, r7
 800b33c:	608b      	str	r3, [r1, #8]
 800b33e:	f1b8 0f00 	cmp.w	r8, #0
 800b342:	dd9c      	ble.n	800b27e <__sflush_r+0x1a>
 800b344:	4643      	mov	r3, r8
 800b346:	463a      	mov	r2, r7
 800b348:	6a21      	ldr	r1, [r4, #32]
 800b34a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b34c:	4628      	mov	r0, r5
 800b34e:	47b0      	blx	r6
 800b350:	2800      	cmp	r0, #0
 800b352:	dc06      	bgt.n	800b362 <__sflush_r+0xfe>
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b360:	e78e      	b.n	800b280 <__sflush_r+0x1c>
 800b362:	4407      	add	r7, r0
 800b364:	eba8 0800 	sub.w	r8, r8, r0
 800b368:	e7e9      	b.n	800b33e <__sflush_r+0xda>
 800b36a:	bf00      	nop
 800b36c:	20400001 	.word	0x20400001

0800b370 <_fflush_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	690b      	ldr	r3, [r1, #16]
 800b374:	4605      	mov	r5, r0
 800b376:	460c      	mov	r4, r1
 800b378:	b1db      	cbz	r3, 800b3b2 <_fflush_r+0x42>
 800b37a:	b118      	cbz	r0, 800b384 <_fflush_r+0x14>
 800b37c:	6983      	ldr	r3, [r0, #24]
 800b37e:	b90b      	cbnz	r3, 800b384 <_fflush_r+0x14>
 800b380:	f000 f860 	bl	800b444 <__sinit>
 800b384:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <_fflush_r+0x48>)
 800b386:	429c      	cmp	r4, r3
 800b388:	d109      	bne.n	800b39e <_fflush_r+0x2e>
 800b38a:	686c      	ldr	r4, [r5, #4]
 800b38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b390:	b17b      	cbz	r3, 800b3b2 <_fflush_r+0x42>
 800b392:	4621      	mov	r1, r4
 800b394:	4628      	mov	r0, r5
 800b396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b39a:	f7ff bf63 	b.w	800b264 <__sflush_r>
 800b39e:	4b07      	ldr	r3, [pc, #28]	; (800b3bc <_fflush_r+0x4c>)
 800b3a0:	429c      	cmp	r4, r3
 800b3a2:	d101      	bne.n	800b3a8 <_fflush_r+0x38>
 800b3a4:	68ac      	ldr	r4, [r5, #8]
 800b3a6:	e7f1      	b.n	800b38c <_fflush_r+0x1c>
 800b3a8:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <_fflush_r+0x50>)
 800b3aa:	429c      	cmp	r4, r3
 800b3ac:	bf08      	it	eq
 800b3ae:	68ec      	ldreq	r4, [r5, #12]
 800b3b0:	e7ec      	b.n	800b38c <_fflush_r+0x1c>
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	bd38      	pop	{r3, r4, r5, pc}
 800b3b6:	bf00      	nop
 800b3b8:	0800c5e0 	.word	0x0800c5e0
 800b3bc:	0800c600 	.word	0x0800c600
 800b3c0:	0800c5c0 	.word	0x0800c5c0

0800b3c4 <std>:
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	b510      	push	{r4, lr}
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ce:	6083      	str	r3, [r0, #8]
 800b3d0:	8181      	strh	r1, [r0, #12]
 800b3d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b3d4:	81c2      	strh	r2, [r0, #14]
 800b3d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3da:	6183      	str	r3, [r0, #24]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	2208      	movs	r2, #8
 800b3e0:	305c      	adds	r0, #92	; 0x5c
 800b3e2:	f7ff fdcf 	bl	800af84 <memset>
 800b3e6:	4b05      	ldr	r3, [pc, #20]	; (800b3fc <std+0x38>)
 800b3e8:	6263      	str	r3, [r4, #36]	; 0x24
 800b3ea:	4b05      	ldr	r3, [pc, #20]	; (800b400 <std+0x3c>)
 800b3ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3ee:	4b05      	ldr	r3, [pc, #20]	; (800b404 <std+0x40>)
 800b3f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3f2:	4b05      	ldr	r3, [pc, #20]	; (800b408 <std+0x44>)
 800b3f4:	6224      	str	r4, [r4, #32]
 800b3f6:	6323      	str	r3, [r4, #48]	; 0x30
 800b3f8:	bd10      	pop	{r4, pc}
 800b3fa:	bf00      	nop
 800b3fc:	0800bd45 	.word	0x0800bd45
 800b400:	0800bd67 	.word	0x0800bd67
 800b404:	0800bd9f 	.word	0x0800bd9f
 800b408:	0800bdc3 	.word	0x0800bdc3

0800b40c <_cleanup_r>:
 800b40c:	4901      	ldr	r1, [pc, #4]	; (800b414 <_cleanup_r+0x8>)
 800b40e:	f000 b885 	b.w	800b51c <_fwalk_reent>
 800b412:	bf00      	nop
 800b414:	0800b371 	.word	0x0800b371

0800b418 <__sfmoreglue>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	1e4a      	subs	r2, r1, #1
 800b41c:	2568      	movs	r5, #104	; 0x68
 800b41e:	4355      	muls	r5, r2
 800b420:	460e      	mov	r6, r1
 800b422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b426:	f000 f949 	bl	800b6bc <_malloc_r>
 800b42a:	4604      	mov	r4, r0
 800b42c:	b140      	cbz	r0, 800b440 <__sfmoreglue+0x28>
 800b42e:	2100      	movs	r1, #0
 800b430:	e9c0 1600 	strd	r1, r6, [r0]
 800b434:	300c      	adds	r0, #12
 800b436:	60a0      	str	r0, [r4, #8]
 800b438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b43c:	f7ff fda2 	bl	800af84 <memset>
 800b440:	4620      	mov	r0, r4
 800b442:	bd70      	pop	{r4, r5, r6, pc}

0800b444 <__sinit>:
 800b444:	6983      	ldr	r3, [r0, #24]
 800b446:	b510      	push	{r4, lr}
 800b448:	4604      	mov	r4, r0
 800b44a:	bb33      	cbnz	r3, 800b49a <__sinit+0x56>
 800b44c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b450:	6503      	str	r3, [r0, #80]	; 0x50
 800b452:	4b12      	ldr	r3, [pc, #72]	; (800b49c <__sinit+0x58>)
 800b454:	4a12      	ldr	r2, [pc, #72]	; (800b4a0 <__sinit+0x5c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6282      	str	r2, [r0, #40]	; 0x28
 800b45a:	4298      	cmp	r0, r3
 800b45c:	bf04      	itt	eq
 800b45e:	2301      	moveq	r3, #1
 800b460:	6183      	streq	r3, [r0, #24]
 800b462:	f000 f81f 	bl	800b4a4 <__sfp>
 800b466:	6060      	str	r0, [r4, #4]
 800b468:	4620      	mov	r0, r4
 800b46a:	f000 f81b 	bl	800b4a4 <__sfp>
 800b46e:	60a0      	str	r0, [r4, #8]
 800b470:	4620      	mov	r0, r4
 800b472:	f000 f817 	bl	800b4a4 <__sfp>
 800b476:	2200      	movs	r2, #0
 800b478:	60e0      	str	r0, [r4, #12]
 800b47a:	2104      	movs	r1, #4
 800b47c:	6860      	ldr	r0, [r4, #4]
 800b47e:	f7ff ffa1 	bl	800b3c4 <std>
 800b482:	2201      	movs	r2, #1
 800b484:	2109      	movs	r1, #9
 800b486:	68a0      	ldr	r0, [r4, #8]
 800b488:	f7ff ff9c 	bl	800b3c4 <std>
 800b48c:	2202      	movs	r2, #2
 800b48e:	2112      	movs	r1, #18
 800b490:	68e0      	ldr	r0, [r4, #12]
 800b492:	f7ff ff97 	bl	800b3c4 <std>
 800b496:	2301      	movs	r3, #1
 800b498:	61a3      	str	r3, [r4, #24]
 800b49a:	bd10      	pop	{r4, pc}
 800b49c:	0800c5bc 	.word	0x0800c5bc
 800b4a0:	0800b40d 	.word	0x0800b40d

0800b4a4 <__sfp>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	4b1b      	ldr	r3, [pc, #108]	; (800b514 <__sfp+0x70>)
 800b4a8:	681e      	ldr	r6, [r3, #0]
 800b4aa:	69b3      	ldr	r3, [r6, #24]
 800b4ac:	4607      	mov	r7, r0
 800b4ae:	b913      	cbnz	r3, 800b4b6 <__sfp+0x12>
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f7ff ffc7 	bl	800b444 <__sinit>
 800b4b6:	3648      	adds	r6, #72	; 0x48
 800b4b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	d503      	bpl.n	800b4c8 <__sfp+0x24>
 800b4c0:	6833      	ldr	r3, [r6, #0]
 800b4c2:	b133      	cbz	r3, 800b4d2 <__sfp+0x2e>
 800b4c4:	6836      	ldr	r6, [r6, #0]
 800b4c6:	e7f7      	b.n	800b4b8 <__sfp+0x14>
 800b4c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4cc:	b16d      	cbz	r5, 800b4ea <__sfp+0x46>
 800b4ce:	3468      	adds	r4, #104	; 0x68
 800b4d0:	e7f4      	b.n	800b4bc <__sfp+0x18>
 800b4d2:	2104      	movs	r1, #4
 800b4d4:	4638      	mov	r0, r7
 800b4d6:	f7ff ff9f 	bl	800b418 <__sfmoreglue>
 800b4da:	6030      	str	r0, [r6, #0]
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d1f1      	bne.n	800b4c4 <__sfp+0x20>
 800b4e0:	230c      	movs	r3, #12
 800b4e2:	603b      	str	r3, [r7, #0]
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4ea:	4b0b      	ldr	r3, [pc, #44]	; (800b518 <__sfp+0x74>)
 800b4ec:	6665      	str	r5, [r4, #100]	; 0x64
 800b4ee:	e9c4 5500 	strd	r5, r5, [r4]
 800b4f2:	60a5      	str	r5, [r4, #8]
 800b4f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b4f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b4fc:	2208      	movs	r2, #8
 800b4fe:	4629      	mov	r1, r5
 800b500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b504:	f7ff fd3e 	bl	800af84 <memset>
 800b508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b50c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b510:	e7e9      	b.n	800b4e6 <__sfp+0x42>
 800b512:	bf00      	nop
 800b514:	0800c5bc 	.word	0x0800c5bc
 800b518:	ffff0001 	.word	0xffff0001

0800b51c <_fwalk_reent>:
 800b51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b520:	4680      	mov	r8, r0
 800b522:	4689      	mov	r9, r1
 800b524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b528:	2600      	movs	r6, #0
 800b52a:	b914      	cbnz	r4, 800b532 <_fwalk_reent+0x16>
 800b52c:	4630      	mov	r0, r6
 800b52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b532:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b536:	3f01      	subs	r7, #1
 800b538:	d501      	bpl.n	800b53e <_fwalk_reent+0x22>
 800b53a:	6824      	ldr	r4, [r4, #0]
 800b53c:	e7f5      	b.n	800b52a <_fwalk_reent+0xe>
 800b53e:	89ab      	ldrh	r3, [r5, #12]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d907      	bls.n	800b554 <_fwalk_reent+0x38>
 800b544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b548:	3301      	adds	r3, #1
 800b54a:	d003      	beq.n	800b554 <_fwalk_reent+0x38>
 800b54c:	4629      	mov	r1, r5
 800b54e:	4640      	mov	r0, r8
 800b550:	47c8      	blx	r9
 800b552:	4306      	orrs	r6, r0
 800b554:	3568      	adds	r5, #104	; 0x68
 800b556:	e7ee      	b.n	800b536 <_fwalk_reent+0x1a>

0800b558 <__swhatbuf_r>:
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	460e      	mov	r6, r1
 800b55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b560:	2900      	cmp	r1, #0
 800b562:	b096      	sub	sp, #88	; 0x58
 800b564:	4614      	mov	r4, r2
 800b566:	461d      	mov	r5, r3
 800b568:	da07      	bge.n	800b57a <__swhatbuf_r+0x22>
 800b56a:	2300      	movs	r3, #0
 800b56c:	602b      	str	r3, [r5, #0]
 800b56e:	89b3      	ldrh	r3, [r6, #12]
 800b570:	061a      	lsls	r2, r3, #24
 800b572:	d410      	bmi.n	800b596 <__swhatbuf_r+0x3e>
 800b574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b578:	e00e      	b.n	800b598 <__swhatbuf_r+0x40>
 800b57a:	466a      	mov	r2, sp
 800b57c:	f000 fc48 	bl	800be10 <_fstat_r>
 800b580:	2800      	cmp	r0, #0
 800b582:	dbf2      	blt.n	800b56a <__swhatbuf_r+0x12>
 800b584:	9a01      	ldr	r2, [sp, #4]
 800b586:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b58a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b58e:	425a      	negs	r2, r3
 800b590:	415a      	adcs	r2, r3
 800b592:	602a      	str	r2, [r5, #0]
 800b594:	e7ee      	b.n	800b574 <__swhatbuf_r+0x1c>
 800b596:	2340      	movs	r3, #64	; 0x40
 800b598:	2000      	movs	r0, #0
 800b59a:	6023      	str	r3, [r4, #0]
 800b59c:	b016      	add	sp, #88	; 0x58
 800b59e:	bd70      	pop	{r4, r5, r6, pc}

0800b5a0 <__smakebuf_r>:
 800b5a0:	898b      	ldrh	r3, [r1, #12]
 800b5a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5a4:	079d      	lsls	r5, r3, #30
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	d507      	bpl.n	800b5bc <__smakebuf_r+0x1c>
 800b5ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	6123      	str	r3, [r4, #16]
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	6163      	str	r3, [r4, #20]
 800b5b8:	b002      	add	sp, #8
 800b5ba:	bd70      	pop	{r4, r5, r6, pc}
 800b5bc:	ab01      	add	r3, sp, #4
 800b5be:	466a      	mov	r2, sp
 800b5c0:	f7ff ffca 	bl	800b558 <__swhatbuf_r>
 800b5c4:	9900      	ldr	r1, [sp, #0]
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f000 f877 	bl	800b6bc <_malloc_r>
 800b5ce:	b948      	cbnz	r0, 800b5e4 <__smakebuf_r+0x44>
 800b5d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5d4:	059a      	lsls	r2, r3, #22
 800b5d6:	d4ef      	bmi.n	800b5b8 <__smakebuf_r+0x18>
 800b5d8:	f023 0303 	bic.w	r3, r3, #3
 800b5dc:	f043 0302 	orr.w	r3, r3, #2
 800b5e0:	81a3      	strh	r3, [r4, #12]
 800b5e2:	e7e3      	b.n	800b5ac <__smakebuf_r+0xc>
 800b5e4:	4b0d      	ldr	r3, [pc, #52]	; (800b61c <__smakebuf_r+0x7c>)
 800b5e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	6020      	str	r0, [r4, #0]
 800b5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	9b00      	ldr	r3, [sp, #0]
 800b5f4:	6163      	str	r3, [r4, #20]
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	6120      	str	r0, [r4, #16]
 800b5fa:	b15b      	cbz	r3, 800b614 <__smakebuf_r+0x74>
 800b5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b600:	4630      	mov	r0, r6
 800b602:	f000 fc17 	bl	800be34 <_isatty_r>
 800b606:	b128      	cbz	r0, 800b614 <__smakebuf_r+0x74>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f023 0303 	bic.w	r3, r3, #3
 800b60e:	f043 0301 	orr.w	r3, r3, #1
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	431d      	orrs	r5, r3
 800b618:	81a5      	strh	r5, [r4, #12]
 800b61a:	e7cd      	b.n	800b5b8 <__smakebuf_r+0x18>
 800b61c:	0800b40d 	.word	0x0800b40d

0800b620 <_free_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4605      	mov	r5, r0
 800b624:	2900      	cmp	r1, #0
 800b626:	d045      	beq.n	800b6b4 <_free_r+0x94>
 800b628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62c:	1f0c      	subs	r4, r1, #4
 800b62e:	2b00      	cmp	r3, #0
 800b630:	bfb8      	it	lt
 800b632:	18e4      	addlt	r4, r4, r3
 800b634:	f000 fc44 	bl	800bec0 <__malloc_lock>
 800b638:	4a1f      	ldr	r2, [pc, #124]	; (800b6b8 <_free_r+0x98>)
 800b63a:	6813      	ldr	r3, [r2, #0]
 800b63c:	4610      	mov	r0, r2
 800b63e:	b933      	cbnz	r3, 800b64e <_free_r+0x2e>
 800b640:	6063      	str	r3, [r4, #4]
 800b642:	6014      	str	r4, [r2, #0]
 800b644:	4628      	mov	r0, r5
 800b646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b64a:	f000 bc3a 	b.w	800bec2 <__malloc_unlock>
 800b64e:	42a3      	cmp	r3, r4
 800b650:	d90c      	bls.n	800b66c <_free_r+0x4c>
 800b652:	6821      	ldr	r1, [r4, #0]
 800b654:	1862      	adds	r2, r4, r1
 800b656:	4293      	cmp	r3, r2
 800b658:	bf04      	itt	eq
 800b65a:	681a      	ldreq	r2, [r3, #0]
 800b65c:	685b      	ldreq	r3, [r3, #4]
 800b65e:	6063      	str	r3, [r4, #4]
 800b660:	bf04      	itt	eq
 800b662:	1852      	addeq	r2, r2, r1
 800b664:	6022      	streq	r2, [r4, #0]
 800b666:	6004      	str	r4, [r0, #0]
 800b668:	e7ec      	b.n	800b644 <_free_r+0x24>
 800b66a:	4613      	mov	r3, r2
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	b10a      	cbz	r2, 800b674 <_free_r+0x54>
 800b670:	42a2      	cmp	r2, r4
 800b672:	d9fa      	bls.n	800b66a <_free_r+0x4a>
 800b674:	6819      	ldr	r1, [r3, #0]
 800b676:	1858      	adds	r0, r3, r1
 800b678:	42a0      	cmp	r0, r4
 800b67a:	d10b      	bne.n	800b694 <_free_r+0x74>
 800b67c:	6820      	ldr	r0, [r4, #0]
 800b67e:	4401      	add	r1, r0
 800b680:	1858      	adds	r0, r3, r1
 800b682:	4282      	cmp	r2, r0
 800b684:	6019      	str	r1, [r3, #0]
 800b686:	d1dd      	bne.n	800b644 <_free_r+0x24>
 800b688:	6810      	ldr	r0, [r2, #0]
 800b68a:	6852      	ldr	r2, [r2, #4]
 800b68c:	605a      	str	r2, [r3, #4]
 800b68e:	4401      	add	r1, r0
 800b690:	6019      	str	r1, [r3, #0]
 800b692:	e7d7      	b.n	800b644 <_free_r+0x24>
 800b694:	d902      	bls.n	800b69c <_free_r+0x7c>
 800b696:	230c      	movs	r3, #12
 800b698:	602b      	str	r3, [r5, #0]
 800b69a:	e7d3      	b.n	800b644 <_free_r+0x24>
 800b69c:	6820      	ldr	r0, [r4, #0]
 800b69e:	1821      	adds	r1, r4, r0
 800b6a0:	428a      	cmp	r2, r1
 800b6a2:	bf04      	itt	eq
 800b6a4:	6811      	ldreq	r1, [r2, #0]
 800b6a6:	6852      	ldreq	r2, [r2, #4]
 800b6a8:	6062      	str	r2, [r4, #4]
 800b6aa:	bf04      	itt	eq
 800b6ac:	1809      	addeq	r1, r1, r0
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	605c      	str	r4, [r3, #4]
 800b6b2:	e7c7      	b.n	800b644 <_free_r+0x24>
 800b6b4:	bd38      	pop	{r3, r4, r5, pc}
 800b6b6:	bf00      	nop
 800b6b8:	200010fc 	.word	0x200010fc

0800b6bc <_malloc_r>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	1ccd      	adds	r5, r1, #3
 800b6c0:	f025 0503 	bic.w	r5, r5, #3
 800b6c4:	3508      	adds	r5, #8
 800b6c6:	2d0c      	cmp	r5, #12
 800b6c8:	bf38      	it	cc
 800b6ca:	250c      	movcc	r5, #12
 800b6cc:	2d00      	cmp	r5, #0
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	db01      	blt.n	800b6d6 <_malloc_r+0x1a>
 800b6d2:	42a9      	cmp	r1, r5
 800b6d4:	d903      	bls.n	800b6de <_malloc_r+0x22>
 800b6d6:	230c      	movs	r3, #12
 800b6d8:	6033      	str	r3, [r6, #0]
 800b6da:	2000      	movs	r0, #0
 800b6dc:	bd70      	pop	{r4, r5, r6, pc}
 800b6de:	f000 fbef 	bl	800bec0 <__malloc_lock>
 800b6e2:	4a21      	ldr	r2, [pc, #132]	; (800b768 <_malloc_r+0xac>)
 800b6e4:	6814      	ldr	r4, [r2, #0]
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	b991      	cbnz	r1, 800b710 <_malloc_r+0x54>
 800b6ea:	4c20      	ldr	r4, [pc, #128]	; (800b76c <_malloc_r+0xb0>)
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	b91b      	cbnz	r3, 800b6f8 <_malloc_r+0x3c>
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f000 fb17 	bl	800bd24 <_sbrk_r>
 800b6f6:	6020      	str	r0, [r4, #0]
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f000 fb12 	bl	800bd24 <_sbrk_r>
 800b700:	1c43      	adds	r3, r0, #1
 800b702:	d124      	bne.n	800b74e <_malloc_r+0x92>
 800b704:	230c      	movs	r3, #12
 800b706:	6033      	str	r3, [r6, #0]
 800b708:	4630      	mov	r0, r6
 800b70a:	f000 fbda 	bl	800bec2 <__malloc_unlock>
 800b70e:	e7e4      	b.n	800b6da <_malloc_r+0x1e>
 800b710:	680b      	ldr	r3, [r1, #0]
 800b712:	1b5b      	subs	r3, r3, r5
 800b714:	d418      	bmi.n	800b748 <_malloc_r+0x8c>
 800b716:	2b0b      	cmp	r3, #11
 800b718:	d90f      	bls.n	800b73a <_malloc_r+0x7e>
 800b71a:	600b      	str	r3, [r1, #0]
 800b71c:	50cd      	str	r5, [r1, r3]
 800b71e:	18cc      	adds	r4, r1, r3
 800b720:	4630      	mov	r0, r6
 800b722:	f000 fbce 	bl	800bec2 <__malloc_unlock>
 800b726:	f104 000b 	add.w	r0, r4, #11
 800b72a:	1d23      	adds	r3, r4, #4
 800b72c:	f020 0007 	bic.w	r0, r0, #7
 800b730:	1ac3      	subs	r3, r0, r3
 800b732:	d0d3      	beq.n	800b6dc <_malloc_r+0x20>
 800b734:	425a      	negs	r2, r3
 800b736:	50e2      	str	r2, [r4, r3]
 800b738:	e7d0      	b.n	800b6dc <_malloc_r+0x20>
 800b73a:	428c      	cmp	r4, r1
 800b73c:	684b      	ldr	r3, [r1, #4]
 800b73e:	bf16      	itet	ne
 800b740:	6063      	strne	r3, [r4, #4]
 800b742:	6013      	streq	r3, [r2, #0]
 800b744:	460c      	movne	r4, r1
 800b746:	e7eb      	b.n	800b720 <_malloc_r+0x64>
 800b748:	460c      	mov	r4, r1
 800b74a:	6849      	ldr	r1, [r1, #4]
 800b74c:	e7cc      	b.n	800b6e8 <_malloc_r+0x2c>
 800b74e:	1cc4      	adds	r4, r0, #3
 800b750:	f024 0403 	bic.w	r4, r4, #3
 800b754:	42a0      	cmp	r0, r4
 800b756:	d005      	beq.n	800b764 <_malloc_r+0xa8>
 800b758:	1a21      	subs	r1, r4, r0
 800b75a:	4630      	mov	r0, r6
 800b75c:	f000 fae2 	bl	800bd24 <_sbrk_r>
 800b760:	3001      	adds	r0, #1
 800b762:	d0cf      	beq.n	800b704 <_malloc_r+0x48>
 800b764:	6025      	str	r5, [r4, #0]
 800b766:	e7db      	b.n	800b720 <_malloc_r+0x64>
 800b768:	200010fc 	.word	0x200010fc
 800b76c:	20001100 	.word	0x20001100

0800b770 <__ssputs_r>:
 800b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b774:	688e      	ldr	r6, [r1, #8]
 800b776:	429e      	cmp	r6, r3
 800b778:	4682      	mov	sl, r0
 800b77a:	460c      	mov	r4, r1
 800b77c:	4690      	mov	r8, r2
 800b77e:	4699      	mov	r9, r3
 800b780:	d837      	bhi.n	800b7f2 <__ssputs_r+0x82>
 800b782:	898a      	ldrh	r2, [r1, #12]
 800b784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b788:	d031      	beq.n	800b7ee <__ssputs_r+0x7e>
 800b78a:	6825      	ldr	r5, [r4, #0]
 800b78c:	6909      	ldr	r1, [r1, #16]
 800b78e:	1a6f      	subs	r7, r5, r1
 800b790:	6965      	ldr	r5, [r4, #20]
 800b792:	2302      	movs	r3, #2
 800b794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b798:	fb95 f5f3 	sdiv	r5, r5, r3
 800b79c:	f109 0301 	add.w	r3, r9, #1
 800b7a0:	443b      	add	r3, r7
 800b7a2:	429d      	cmp	r5, r3
 800b7a4:	bf38      	it	cc
 800b7a6:	461d      	movcc	r5, r3
 800b7a8:	0553      	lsls	r3, r2, #21
 800b7aa:	d530      	bpl.n	800b80e <__ssputs_r+0x9e>
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	f7ff ff85 	bl	800b6bc <_malloc_r>
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	b950      	cbnz	r0, 800b7cc <__ssputs_r+0x5c>
 800b7b6:	230c      	movs	r3, #12
 800b7b8:	f8ca 3000 	str.w	r3, [sl]
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c2:	81a3      	strh	r3, [r4, #12]
 800b7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7cc:	463a      	mov	r2, r7
 800b7ce:	6921      	ldr	r1, [r4, #16]
 800b7d0:	f000 fb52 	bl	800be78 <memcpy>
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	6126      	str	r6, [r4, #16]
 800b7e2:	6165      	str	r5, [r4, #20]
 800b7e4:	443e      	add	r6, r7
 800b7e6:	1bed      	subs	r5, r5, r7
 800b7e8:	6026      	str	r6, [r4, #0]
 800b7ea:	60a5      	str	r5, [r4, #8]
 800b7ec:	464e      	mov	r6, r9
 800b7ee:	454e      	cmp	r6, r9
 800b7f0:	d900      	bls.n	800b7f4 <__ssputs_r+0x84>
 800b7f2:	464e      	mov	r6, r9
 800b7f4:	4632      	mov	r2, r6
 800b7f6:	4641      	mov	r1, r8
 800b7f8:	6820      	ldr	r0, [r4, #0]
 800b7fa:	f000 fb48 	bl	800be8e <memmove>
 800b7fe:	68a3      	ldr	r3, [r4, #8]
 800b800:	1b9b      	subs	r3, r3, r6
 800b802:	60a3      	str	r3, [r4, #8]
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	441e      	add	r6, r3
 800b808:	6026      	str	r6, [r4, #0]
 800b80a:	2000      	movs	r0, #0
 800b80c:	e7dc      	b.n	800b7c8 <__ssputs_r+0x58>
 800b80e:	462a      	mov	r2, r5
 800b810:	f000 fb58 	bl	800bec4 <_realloc_r>
 800b814:	4606      	mov	r6, r0
 800b816:	2800      	cmp	r0, #0
 800b818:	d1e2      	bne.n	800b7e0 <__ssputs_r+0x70>
 800b81a:	6921      	ldr	r1, [r4, #16]
 800b81c:	4650      	mov	r0, sl
 800b81e:	f7ff feff 	bl	800b620 <_free_r>
 800b822:	e7c8      	b.n	800b7b6 <__ssputs_r+0x46>

0800b824 <_svfiprintf_r>:
 800b824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	461d      	mov	r5, r3
 800b82a:	898b      	ldrh	r3, [r1, #12]
 800b82c:	061f      	lsls	r7, r3, #24
 800b82e:	b09d      	sub	sp, #116	; 0x74
 800b830:	4680      	mov	r8, r0
 800b832:	460c      	mov	r4, r1
 800b834:	4616      	mov	r6, r2
 800b836:	d50f      	bpl.n	800b858 <_svfiprintf_r+0x34>
 800b838:	690b      	ldr	r3, [r1, #16]
 800b83a:	b96b      	cbnz	r3, 800b858 <_svfiprintf_r+0x34>
 800b83c:	2140      	movs	r1, #64	; 0x40
 800b83e:	f7ff ff3d 	bl	800b6bc <_malloc_r>
 800b842:	6020      	str	r0, [r4, #0]
 800b844:	6120      	str	r0, [r4, #16]
 800b846:	b928      	cbnz	r0, 800b854 <_svfiprintf_r+0x30>
 800b848:	230c      	movs	r3, #12
 800b84a:	f8c8 3000 	str.w	r3, [r8]
 800b84e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b852:	e0c8      	b.n	800b9e6 <_svfiprintf_r+0x1c2>
 800b854:	2340      	movs	r3, #64	; 0x40
 800b856:	6163      	str	r3, [r4, #20]
 800b858:	2300      	movs	r3, #0
 800b85a:	9309      	str	r3, [sp, #36]	; 0x24
 800b85c:	2320      	movs	r3, #32
 800b85e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b862:	2330      	movs	r3, #48	; 0x30
 800b864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b868:	9503      	str	r5, [sp, #12]
 800b86a:	f04f 0b01 	mov.w	fp, #1
 800b86e:	4637      	mov	r7, r6
 800b870:	463d      	mov	r5, r7
 800b872:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b876:	b10b      	cbz	r3, 800b87c <_svfiprintf_r+0x58>
 800b878:	2b25      	cmp	r3, #37	; 0x25
 800b87a:	d13e      	bne.n	800b8fa <_svfiprintf_r+0xd6>
 800b87c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b880:	d00b      	beq.n	800b89a <_svfiprintf_r+0x76>
 800b882:	4653      	mov	r3, sl
 800b884:	4632      	mov	r2, r6
 800b886:	4621      	mov	r1, r4
 800b888:	4640      	mov	r0, r8
 800b88a:	f7ff ff71 	bl	800b770 <__ssputs_r>
 800b88e:	3001      	adds	r0, #1
 800b890:	f000 80a4 	beq.w	800b9dc <_svfiprintf_r+0x1b8>
 800b894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b896:	4453      	add	r3, sl
 800b898:	9309      	str	r3, [sp, #36]	; 0x24
 800b89a:	783b      	ldrb	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 809d 	beq.w	800b9dc <_svfiprintf_r+0x1b8>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8ac:	9304      	str	r3, [sp, #16]
 800b8ae:	9307      	str	r3, [sp, #28]
 800b8b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b8b6:	462f      	mov	r7, r5
 800b8b8:	2205      	movs	r2, #5
 800b8ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b8be:	4850      	ldr	r0, [pc, #320]	; (800ba00 <_svfiprintf_r+0x1dc>)
 800b8c0:	f7f4 fcae 	bl	8000220 <memchr>
 800b8c4:	9b04      	ldr	r3, [sp, #16]
 800b8c6:	b9d0      	cbnz	r0, 800b8fe <_svfiprintf_r+0xda>
 800b8c8:	06d9      	lsls	r1, r3, #27
 800b8ca:	bf44      	itt	mi
 800b8cc:	2220      	movmi	r2, #32
 800b8ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b8d2:	071a      	lsls	r2, r3, #28
 800b8d4:	bf44      	itt	mi
 800b8d6:	222b      	movmi	r2, #43	; 0x2b
 800b8d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b8dc:	782a      	ldrb	r2, [r5, #0]
 800b8de:	2a2a      	cmp	r2, #42	; 0x2a
 800b8e0:	d015      	beq.n	800b90e <_svfiprintf_r+0xea>
 800b8e2:	9a07      	ldr	r2, [sp, #28]
 800b8e4:	462f      	mov	r7, r5
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	250a      	movs	r5, #10
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8f0:	3b30      	subs	r3, #48	; 0x30
 800b8f2:	2b09      	cmp	r3, #9
 800b8f4:	d94d      	bls.n	800b992 <_svfiprintf_r+0x16e>
 800b8f6:	b1b8      	cbz	r0, 800b928 <_svfiprintf_r+0x104>
 800b8f8:	e00f      	b.n	800b91a <_svfiprintf_r+0xf6>
 800b8fa:	462f      	mov	r7, r5
 800b8fc:	e7b8      	b.n	800b870 <_svfiprintf_r+0x4c>
 800b8fe:	4a40      	ldr	r2, [pc, #256]	; (800ba00 <_svfiprintf_r+0x1dc>)
 800b900:	1a80      	subs	r0, r0, r2
 800b902:	fa0b f000 	lsl.w	r0, fp, r0
 800b906:	4318      	orrs	r0, r3
 800b908:	9004      	str	r0, [sp, #16]
 800b90a:	463d      	mov	r5, r7
 800b90c:	e7d3      	b.n	800b8b6 <_svfiprintf_r+0x92>
 800b90e:	9a03      	ldr	r2, [sp, #12]
 800b910:	1d11      	adds	r1, r2, #4
 800b912:	6812      	ldr	r2, [r2, #0]
 800b914:	9103      	str	r1, [sp, #12]
 800b916:	2a00      	cmp	r2, #0
 800b918:	db01      	blt.n	800b91e <_svfiprintf_r+0xfa>
 800b91a:	9207      	str	r2, [sp, #28]
 800b91c:	e004      	b.n	800b928 <_svfiprintf_r+0x104>
 800b91e:	4252      	negs	r2, r2
 800b920:	f043 0302 	orr.w	r3, r3, #2
 800b924:	9207      	str	r2, [sp, #28]
 800b926:	9304      	str	r3, [sp, #16]
 800b928:	783b      	ldrb	r3, [r7, #0]
 800b92a:	2b2e      	cmp	r3, #46	; 0x2e
 800b92c:	d10c      	bne.n	800b948 <_svfiprintf_r+0x124>
 800b92e:	787b      	ldrb	r3, [r7, #1]
 800b930:	2b2a      	cmp	r3, #42	; 0x2a
 800b932:	d133      	bne.n	800b99c <_svfiprintf_r+0x178>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	1d1a      	adds	r2, r3, #4
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	9203      	str	r2, [sp, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	bfb8      	it	lt
 800b940:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b944:	3702      	adds	r7, #2
 800b946:	9305      	str	r3, [sp, #20]
 800b948:	4d2e      	ldr	r5, [pc, #184]	; (800ba04 <_svfiprintf_r+0x1e0>)
 800b94a:	7839      	ldrb	r1, [r7, #0]
 800b94c:	2203      	movs	r2, #3
 800b94e:	4628      	mov	r0, r5
 800b950:	f7f4 fc66 	bl	8000220 <memchr>
 800b954:	b138      	cbz	r0, 800b966 <_svfiprintf_r+0x142>
 800b956:	2340      	movs	r3, #64	; 0x40
 800b958:	1b40      	subs	r0, r0, r5
 800b95a:	fa03 f000 	lsl.w	r0, r3, r0
 800b95e:	9b04      	ldr	r3, [sp, #16]
 800b960:	4303      	orrs	r3, r0
 800b962:	3701      	adds	r7, #1
 800b964:	9304      	str	r3, [sp, #16]
 800b966:	7839      	ldrb	r1, [r7, #0]
 800b968:	4827      	ldr	r0, [pc, #156]	; (800ba08 <_svfiprintf_r+0x1e4>)
 800b96a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b96e:	2206      	movs	r2, #6
 800b970:	1c7e      	adds	r6, r7, #1
 800b972:	f7f4 fc55 	bl	8000220 <memchr>
 800b976:	2800      	cmp	r0, #0
 800b978:	d038      	beq.n	800b9ec <_svfiprintf_r+0x1c8>
 800b97a:	4b24      	ldr	r3, [pc, #144]	; (800ba0c <_svfiprintf_r+0x1e8>)
 800b97c:	bb13      	cbnz	r3, 800b9c4 <_svfiprintf_r+0x1a0>
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	3307      	adds	r3, #7
 800b982:	f023 0307 	bic.w	r3, r3, #7
 800b986:	3308      	adds	r3, #8
 800b988:	9303      	str	r3, [sp, #12]
 800b98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b98c:	444b      	add	r3, r9
 800b98e:	9309      	str	r3, [sp, #36]	; 0x24
 800b990:	e76d      	b.n	800b86e <_svfiprintf_r+0x4a>
 800b992:	fb05 3202 	mla	r2, r5, r2, r3
 800b996:	2001      	movs	r0, #1
 800b998:	460f      	mov	r7, r1
 800b99a:	e7a6      	b.n	800b8ea <_svfiprintf_r+0xc6>
 800b99c:	2300      	movs	r3, #0
 800b99e:	3701      	adds	r7, #1
 800b9a0:	9305      	str	r3, [sp, #20]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	250a      	movs	r5, #10
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9ac:	3a30      	subs	r2, #48	; 0x30
 800b9ae:	2a09      	cmp	r2, #9
 800b9b0:	d903      	bls.n	800b9ba <_svfiprintf_r+0x196>
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0c8      	beq.n	800b948 <_svfiprintf_r+0x124>
 800b9b6:	9105      	str	r1, [sp, #20]
 800b9b8:	e7c6      	b.n	800b948 <_svfiprintf_r+0x124>
 800b9ba:	fb05 2101 	mla	r1, r5, r1, r2
 800b9be:	2301      	movs	r3, #1
 800b9c0:	4607      	mov	r7, r0
 800b9c2:	e7f0      	b.n	800b9a6 <_svfiprintf_r+0x182>
 800b9c4:	ab03      	add	r3, sp, #12
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	4622      	mov	r2, r4
 800b9ca:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <_svfiprintf_r+0x1ec>)
 800b9cc:	a904      	add	r1, sp, #16
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	f3af 8000 	nop.w
 800b9d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b9d8:	4681      	mov	r9, r0
 800b9da:	d1d6      	bne.n	800b98a <_svfiprintf_r+0x166>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	065b      	lsls	r3, r3, #25
 800b9e0:	f53f af35 	bmi.w	800b84e <_svfiprintf_r+0x2a>
 800b9e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9e6:	b01d      	add	sp, #116	; 0x74
 800b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ec:	ab03      	add	r3, sp, #12
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	4b07      	ldr	r3, [pc, #28]	; (800ba10 <_svfiprintf_r+0x1ec>)
 800b9f4:	a904      	add	r1, sp, #16
 800b9f6:	4640      	mov	r0, r8
 800b9f8:	f000 f882 	bl	800bb00 <_printf_i>
 800b9fc:	e7ea      	b.n	800b9d4 <_svfiprintf_r+0x1b0>
 800b9fe:	bf00      	nop
 800ba00:	0800c620 	.word	0x0800c620
 800ba04:	0800c626 	.word	0x0800c626
 800ba08:	0800c62a 	.word	0x0800c62a
 800ba0c:	00000000 	.word	0x00000000
 800ba10:	0800b771 	.word	0x0800b771

0800ba14 <_printf_common>:
 800ba14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba18:	4691      	mov	r9, r2
 800ba1a:	461f      	mov	r7, r3
 800ba1c:	688a      	ldr	r2, [r1, #8]
 800ba1e:	690b      	ldr	r3, [r1, #16]
 800ba20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba24:	4293      	cmp	r3, r2
 800ba26:	bfb8      	it	lt
 800ba28:	4613      	movlt	r3, r2
 800ba2a:	f8c9 3000 	str.w	r3, [r9]
 800ba2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba32:	4606      	mov	r6, r0
 800ba34:	460c      	mov	r4, r1
 800ba36:	b112      	cbz	r2, 800ba3e <_printf_common+0x2a>
 800ba38:	3301      	adds	r3, #1
 800ba3a:	f8c9 3000 	str.w	r3, [r9]
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	0699      	lsls	r1, r3, #26
 800ba42:	bf42      	ittt	mi
 800ba44:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ba48:	3302      	addmi	r3, #2
 800ba4a:	f8c9 3000 	strmi.w	r3, [r9]
 800ba4e:	6825      	ldr	r5, [r4, #0]
 800ba50:	f015 0506 	ands.w	r5, r5, #6
 800ba54:	d107      	bne.n	800ba66 <_printf_common+0x52>
 800ba56:	f104 0a19 	add.w	sl, r4, #25
 800ba5a:	68e3      	ldr	r3, [r4, #12]
 800ba5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ba60:	1a9b      	subs	r3, r3, r2
 800ba62:	42ab      	cmp	r3, r5
 800ba64:	dc28      	bgt.n	800bab8 <_printf_common+0xa4>
 800ba66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ba6a:	6822      	ldr	r2, [r4, #0]
 800ba6c:	3300      	adds	r3, #0
 800ba6e:	bf18      	it	ne
 800ba70:	2301      	movne	r3, #1
 800ba72:	0692      	lsls	r2, r2, #26
 800ba74:	d42d      	bmi.n	800bad2 <_printf_common+0xbe>
 800ba76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba7a:	4639      	mov	r1, r7
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	47c0      	blx	r8
 800ba80:	3001      	adds	r0, #1
 800ba82:	d020      	beq.n	800bac6 <_printf_common+0xb2>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	68e5      	ldr	r5, [r4, #12]
 800ba88:	f8d9 2000 	ldr.w	r2, [r9]
 800ba8c:	f003 0306 	and.w	r3, r3, #6
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	bf08      	it	eq
 800ba94:	1aad      	subeq	r5, r5, r2
 800ba96:	68a3      	ldr	r3, [r4, #8]
 800ba98:	6922      	ldr	r2, [r4, #16]
 800ba9a:	bf0c      	ite	eq
 800ba9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baa0:	2500      	movne	r5, #0
 800baa2:	4293      	cmp	r3, r2
 800baa4:	bfc4      	itt	gt
 800baa6:	1a9b      	subgt	r3, r3, r2
 800baa8:	18ed      	addgt	r5, r5, r3
 800baaa:	f04f 0900 	mov.w	r9, #0
 800baae:	341a      	adds	r4, #26
 800bab0:	454d      	cmp	r5, r9
 800bab2:	d11a      	bne.n	800baea <_printf_common+0xd6>
 800bab4:	2000      	movs	r0, #0
 800bab6:	e008      	b.n	800baca <_printf_common+0xb6>
 800bab8:	2301      	movs	r3, #1
 800baba:	4652      	mov	r2, sl
 800babc:	4639      	mov	r1, r7
 800babe:	4630      	mov	r0, r6
 800bac0:	47c0      	blx	r8
 800bac2:	3001      	adds	r0, #1
 800bac4:	d103      	bne.n	800bace <_printf_common+0xba>
 800bac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bace:	3501      	adds	r5, #1
 800bad0:	e7c3      	b.n	800ba5a <_printf_common+0x46>
 800bad2:	18e1      	adds	r1, r4, r3
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	2030      	movs	r0, #48	; 0x30
 800bad8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800badc:	4422      	add	r2, r4
 800bade:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bae2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bae6:	3302      	adds	r3, #2
 800bae8:	e7c5      	b.n	800ba76 <_printf_common+0x62>
 800baea:	2301      	movs	r3, #1
 800baec:	4622      	mov	r2, r4
 800baee:	4639      	mov	r1, r7
 800baf0:	4630      	mov	r0, r6
 800baf2:	47c0      	blx	r8
 800baf4:	3001      	adds	r0, #1
 800baf6:	d0e6      	beq.n	800bac6 <_printf_common+0xb2>
 800baf8:	f109 0901 	add.w	r9, r9, #1
 800bafc:	e7d8      	b.n	800bab0 <_printf_common+0x9c>
	...

0800bb00 <_printf_i>:
 800bb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bb08:	460c      	mov	r4, r1
 800bb0a:	7e09      	ldrb	r1, [r1, #24]
 800bb0c:	b085      	sub	sp, #20
 800bb0e:	296e      	cmp	r1, #110	; 0x6e
 800bb10:	4617      	mov	r7, r2
 800bb12:	4606      	mov	r6, r0
 800bb14:	4698      	mov	r8, r3
 800bb16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb18:	f000 80b3 	beq.w	800bc82 <_printf_i+0x182>
 800bb1c:	d822      	bhi.n	800bb64 <_printf_i+0x64>
 800bb1e:	2963      	cmp	r1, #99	; 0x63
 800bb20:	d036      	beq.n	800bb90 <_printf_i+0x90>
 800bb22:	d80a      	bhi.n	800bb3a <_printf_i+0x3a>
 800bb24:	2900      	cmp	r1, #0
 800bb26:	f000 80b9 	beq.w	800bc9c <_printf_i+0x19c>
 800bb2a:	2958      	cmp	r1, #88	; 0x58
 800bb2c:	f000 8083 	beq.w	800bc36 <_printf_i+0x136>
 800bb30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bb38:	e032      	b.n	800bba0 <_printf_i+0xa0>
 800bb3a:	2964      	cmp	r1, #100	; 0x64
 800bb3c:	d001      	beq.n	800bb42 <_printf_i+0x42>
 800bb3e:	2969      	cmp	r1, #105	; 0x69
 800bb40:	d1f6      	bne.n	800bb30 <_printf_i+0x30>
 800bb42:	6820      	ldr	r0, [r4, #0]
 800bb44:	6813      	ldr	r3, [r2, #0]
 800bb46:	0605      	lsls	r5, r0, #24
 800bb48:	f103 0104 	add.w	r1, r3, #4
 800bb4c:	d52a      	bpl.n	800bba4 <_printf_i+0xa4>
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6011      	str	r1, [r2, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	da03      	bge.n	800bb5e <_printf_i+0x5e>
 800bb56:	222d      	movs	r2, #45	; 0x2d
 800bb58:	425b      	negs	r3, r3
 800bb5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bb5e:	486f      	ldr	r0, [pc, #444]	; (800bd1c <_printf_i+0x21c>)
 800bb60:	220a      	movs	r2, #10
 800bb62:	e039      	b.n	800bbd8 <_printf_i+0xd8>
 800bb64:	2973      	cmp	r1, #115	; 0x73
 800bb66:	f000 809d 	beq.w	800bca4 <_printf_i+0x1a4>
 800bb6a:	d808      	bhi.n	800bb7e <_printf_i+0x7e>
 800bb6c:	296f      	cmp	r1, #111	; 0x6f
 800bb6e:	d020      	beq.n	800bbb2 <_printf_i+0xb2>
 800bb70:	2970      	cmp	r1, #112	; 0x70
 800bb72:	d1dd      	bne.n	800bb30 <_printf_i+0x30>
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	f043 0320 	orr.w	r3, r3, #32
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	e003      	b.n	800bb86 <_printf_i+0x86>
 800bb7e:	2975      	cmp	r1, #117	; 0x75
 800bb80:	d017      	beq.n	800bbb2 <_printf_i+0xb2>
 800bb82:	2978      	cmp	r1, #120	; 0x78
 800bb84:	d1d4      	bne.n	800bb30 <_printf_i+0x30>
 800bb86:	2378      	movs	r3, #120	; 0x78
 800bb88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb8c:	4864      	ldr	r0, [pc, #400]	; (800bd20 <_printf_i+0x220>)
 800bb8e:	e055      	b.n	800bc3c <_printf_i+0x13c>
 800bb90:	6813      	ldr	r3, [r2, #0]
 800bb92:	1d19      	adds	r1, r3, #4
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	6011      	str	r1, [r2, #0]
 800bb98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bba0:	2301      	movs	r3, #1
 800bba2:	e08c      	b.n	800bcbe <_printf_i+0x1be>
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6011      	str	r1, [r2, #0]
 800bba8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbac:	bf18      	it	ne
 800bbae:	b21b      	sxthne	r3, r3
 800bbb0:	e7cf      	b.n	800bb52 <_printf_i+0x52>
 800bbb2:	6813      	ldr	r3, [r2, #0]
 800bbb4:	6825      	ldr	r5, [r4, #0]
 800bbb6:	1d18      	adds	r0, r3, #4
 800bbb8:	6010      	str	r0, [r2, #0]
 800bbba:	0628      	lsls	r0, r5, #24
 800bbbc:	d501      	bpl.n	800bbc2 <_printf_i+0xc2>
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	e002      	b.n	800bbc8 <_printf_i+0xc8>
 800bbc2:	0668      	lsls	r0, r5, #25
 800bbc4:	d5fb      	bpl.n	800bbbe <_printf_i+0xbe>
 800bbc6:	881b      	ldrh	r3, [r3, #0]
 800bbc8:	4854      	ldr	r0, [pc, #336]	; (800bd1c <_printf_i+0x21c>)
 800bbca:	296f      	cmp	r1, #111	; 0x6f
 800bbcc:	bf14      	ite	ne
 800bbce:	220a      	movne	r2, #10
 800bbd0:	2208      	moveq	r2, #8
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbd8:	6865      	ldr	r5, [r4, #4]
 800bbda:	60a5      	str	r5, [r4, #8]
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	f2c0 8095 	blt.w	800bd0c <_printf_i+0x20c>
 800bbe2:	6821      	ldr	r1, [r4, #0]
 800bbe4:	f021 0104 	bic.w	r1, r1, #4
 800bbe8:	6021      	str	r1, [r4, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d13d      	bne.n	800bc6a <_printf_i+0x16a>
 800bbee:	2d00      	cmp	r5, #0
 800bbf0:	f040 808e 	bne.w	800bd10 <_printf_i+0x210>
 800bbf4:	4665      	mov	r5, ip
 800bbf6:	2a08      	cmp	r2, #8
 800bbf8:	d10b      	bne.n	800bc12 <_printf_i+0x112>
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	07db      	lsls	r3, r3, #31
 800bbfe:	d508      	bpl.n	800bc12 <_printf_i+0x112>
 800bc00:	6923      	ldr	r3, [r4, #16]
 800bc02:	6862      	ldr	r2, [r4, #4]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	bfde      	ittt	le
 800bc08:	2330      	movle	r3, #48	; 0x30
 800bc0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc0e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bc12:	ebac 0305 	sub.w	r3, ip, r5
 800bc16:	6123      	str	r3, [r4, #16]
 800bc18:	f8cd 8000 	str.w	r8, [sp]
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	aa03      	add	r2, sp, #12
 800bc20:	4621      	mov	r1, r4
 800bc22:	4630      	mov	r0, r6
 800bc24:	f7ff fef6 	bl	800ba14 <_printf_common>
 800bc28:	3001      	adds	r0, #1
 800bc2a:	d14d      	bne.n	800bcc8 <_printf_i+0x1c8>
 800bc2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc30:	b005      	add	sp, #20
 800bc32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc36:	4839      	ldr	r0, [pc, #228]	; (800bd1c <_printf_i+0x21c>)
 800bc38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bc3c:	6813      	ldr	r3, [r2, #0]
 800bc3e:	6821      	ldr	r1, [r4, #0]
 800bc40:	1d1d      	adds	r5, r3, #4
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6015      	str	r5, [r2, #0]
 800bc46:	060a      	lsls	r2, r1, #24
 800bc48:	d50b      	bpl.n	800bc62 <_printf_i+0x162>
 800bc4a:	07ca      	lsls	r2, r1, #31
 800bc4c:	bf44      	itt	mi
 800bc4e:	f041 0120 	orrmi.w	r1, r1, #32
 800bc52:	6021      	strmi	r1, [r4, #0]
 800bc54:	b91b      	cbnz	r3, 800bc5e <_printf_i+0x15e>
 800bc56:	6822      	ldr	r2, [r4, #0]
 800bc58:	f022 0220 	bic.w	r2, r2, #32
 800bc5c:	6022      	str	r2, [r4, #0]
 800bc5e:	2210      	movs	r2, #16
 800bc60:	e7b7      	b.n	800bbd2 <_printf_i+0xd2>
 800bc62:	064d      	lsls	r5, r1, #25
 800bc64:	bf48      	it	mi
 800bc66:	b29b      	uxthmi	r3, r3
 800bc68:	e7ef      	b.n	800bc4a <_printf_i+0x14a>
 800bc6a:	4665      	mov	r5, ip
 800bc6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc70:	fb02 3311 	mls	r3, r2, r1, r3
 800bc74:	5cc3      	ldrb	r3, [r0, r3]
 800bc76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	2900      	cmp	r1, #0
 800bc7e:	d1f5      	bne.n	800bc6c <_printf_i+0x16c>
 800bc80:	e7b9      	b.n	800bbf6 <_printf_i+0xf6>
 800bc82:	6813      	ldr	r3, [r2, #0]
 800bc84:	6825      	ldr	r5, [r4, #0]
 800bc86:	6961      	ldr	r1, [r4, #20]
 800bc88:	1d18      	adds	r0, r3, #4
 800bc8a:	6010      	str	r0, [r2, #0]
 800bc8c:	0628      	lsls	r0, r5, #24
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	d501      	bpl.n	800bc96 <_printf_i+0x196>
 800bc92:	6019      	str	r1, [r3, #0]
 800bc94:	e002      	b.n	800bc9c <_printf_i+0x19c>
 800bc96:	066a      	lsls	r2, r5, #25
 800bc98:	d5fb      	bpl.n	800bc92 <_printf_i+0x192>
 800bc9a:	8019      	strh	r1, [r3, #0]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	6123      	str	r3, [r4, #16]
 800bca0:	4665      	mov	r5, ip
 800bca2:	e7b9      	b.n	800bc18 <_printf_i+0x118>
 800bca4:	6813      	ldr	r3, [r2, #0]
 800bca6:	1d19      	adds	r1, r3, #4
 800bca8:	6011      	str	r1, [r2, #0]
 800bcaa:	681d      	ldr	r5, [r3, #0]
 800bcac:	6862      	ldr	r2, [r4, #4]
 800bcae:	2100      	movs	r1, #0
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	f7f4 fab5 	bl	8000220 <memchr>
 800bcb6:	b108      	cbz	r0, 800bcbc <_printf_i+0x1bc>
 800bcb8:	1b40      	subs	r0, r0, r5
 800bcba:	6060      	str	r0, [r4, #4]
 800bcbc:	6863      	ldr	r3, [r4, #4]
 800bcbe:	6123      	str	r3, [r4, #16]
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcc6:	e7a7      	b.n	800bc18 <_printf_i+0x118>
 800bcc8:	6923      	ldr	r3, [r4, #16]
 800bcca:	462a      	mov	r2, r5
 800bccc:	4639      	mov	r1, r7
 800bcce:	4630      	mov	r0, r6
 800bcd0:	47c0      	blx	r8
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	d0aa      	beq.n	800bc2c <_printf_i+0x12c>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	079b      	lsls	r3, r3, #30
 800bcda:	d413      	bmi.n	800bd04 <_printf_i+0x204>
 800bcdc:	68e0      	ldr	r0, [r4, #12]
 800bcde:	9b03      	ldr	r3, [sp, #12]
 800bce0:	4298      	cmp	r0, r3
 800bce2:	bfb8      	it	lt
 800bce4:	4618      	movlt	r0, r3
 800bce6:	e7a3      	b.n	800bc30 <_printf_i+0x130>
 800bce8:	2301      	movs	r3, #1
 800bcea:	464a      	mov	r2, r9
 800bcec:	4639      	mov	r1, r7
 800bcee:	4630      	mov	r0, r6
 800bcf0:	47c0      	blx	r8
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	d09a      	beq.n	800bc2c <_printf_i+0x12c>
 800bcf6:	3501      	adds	r5, #1
 800bcf8:	68e3      	ldr	r3, [r4, #12]
 800bcfa:	9a03      	ldr	r2, [sp, #12]
 800bcfc:	1a9b      	subs	r3, r3, r2
 800bcfe:	42ab      	cmp	r3, r5
 800bd00:	dcf2      	bgt.n	800bce8 <_printf_i+0x1e8>
 800bd02:	e7eb      	b.n	800bcdc <_printf_i+0x1dc>
 800bd04:	2500      	movs	r5, #0
 800bd06:	f104 0919 	add.w	r9, r4, #25
 800bd0a:	e7f5      	b.n	800bcf8 <_printf_i+0x1f8>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1ac      	bne.n	800bc6a <_printf_i+0x16a>
 800bd10:	7803      	ldrb	r3, [r0, #0]
 800bd12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd1a:	e76c      	b.n	800bbf6 <_printf_i+0xf6>
 800bd1c:	0800c631 	.word	0x0800c631
 800bd20:	0800c642 	.word	0x0800c642

0800bd24 <_sbrk_r>:
 800bd24:	b538      	push	{r3, r4, r5, lr}
 800bd26:	4c06      	ldr	r4, [pc, #24]	; (800bd40 <_sbrk_r+0x1c>)
 800bd28:	2300      	movs	r3, #0
 800bd2a:	4605      	mov	r5, r0
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	6023      	str	r3, [r4, #0]
 800bd30:	f7f8 f9c4 	bl	80040bc <_sbrk>
 800bd34:	1c43      	adds	r3, r0, #1
 800bd36:	d102      	bne.n	800bd3e <_sbrk_r+0x1a>
 800bd38:	6823      	ldr	r3, [r4, #0]
 800bd3a:	b103      	cbz	r3, 800bd3e <_sbrk_r+0x1a>
 800bd3c:	602b      	str	r3, [r5, #0]
 800bd3e:	bd38      	pop	{r3, r4, r5, pc}
 800bd40:	20001564 	.word	0x20001564

0800bd44 <__sread>:
 800bd44:	b510      	push	{r4, lr}
 800bd46:	460c      	mov	r4, r1
 800bd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4c:	f000 f8e0 	bl	800bf10 <_read_r>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	bfab      	itete	ge
 800bd54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd56:	89a3      	ldrhlt	r3, [r4, #12]
 800bd58:	181b      	addge	r3, r3, r0
 800bd5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd5e:	bfac      	ite	ge
 800bd60:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd62:	81a3      	strhlt	r3, [r4, #12]
 800bd64:	bd10      	pop	{r4, pc}

0800bd66 <__swrite>:
 800bd66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd6a:	461f      	mov	r7, r3
 800bd6c:	898b      	ldrh	r3, [r1, #12]
 800bd6e:	05db      	lsls	r3, r3, #23
 800bd70:	4605      	mov	r5, r0
 800bd72:	460c      	mov	r4, r1
 800bd74:	4616      	mov	r6, r2
 800bd76:	d505      	bpl.n	800bd84 <__swrite+0x1e>
 800bd78:	2302      	movs	r3, #2
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd80:	f000 f868 	bl	800be54 <_lseek_r>
 800bd84:	89a3      	ldrh	r3, [r4, #12]
 800bd86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd8e:	81a3      	strh	r3, [r4, #12]
 800bd90:	4632      	mov	r2, r6
 800bd92:	463b      	mov	r3, r7
 800bd94:	4628      	mov	r0, r5
 800bd96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9a:	f000 b817 	b.w	800bdcc <_write_r>

0800bd9e <__sseek>:
 800bd9e:	b510      	push	{r4, lr}
 800bda0:	460c      	mov	r4, r1
 800bda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bda6:	f000 f855 	bl	800be54 <_lseek_r>
 800bdaa:	1c43      	adds	r3, r0, #1
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	bf15      	itete	ne
 800bdb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdba:	81a3      	strheq	r3, [r4, #12]
 800bdbc:	bf18      	it	ne
 800bdbe:	81a3      	strhne	r3, [r4, #12]
 800bdc0:	bd10      	pop	{r4, pc}

0800bdc2 <__sclose>:
 800bdc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc6:	f000 b813 	b.w	800bdf0 <_close_r>
	...

0800bdcc <_write_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4c07      	ldr	r4, [pc, #28]	; (800bdec <_write_r+0x20>)
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	4608      	mov	r0, r1
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	6022      	str	r2, [r4, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	f7f7 fd7d 	bl	80038da <_write>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d102      	bne.n	800bdea <_write_r+0x1e>
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	b103      	cbz	r3, 800bdea <_write_r+0x1e>
 800bde8:	602b      	str	r3, [r5, #0]
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	20001564 	.word	0x20001564

0800bdf0 <_close_r>:
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	4c06      	ldr	r4, [pc, #24]	; (800be0c <_close_r+0x1c>)
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	6023      	str	r3, [r4, #0]
 800bdfc:	f7f8 f929 	bl	8004052 <_close>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d102      	bne.n	800be0a <_close_r+0x1a>
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	b103      	cbz	r3, 800be0a <_close_r+0x1a>
 800be08:	602b      	str	r3, [r5, #0]
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	20001564 	.word	0x20001564

0800be10 <_fstat_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	4c07      	ldr	r4, [pc, #28]	; (800be30 <_fstat_r+0x20>)
 800be14:	2300      	movs	r3, #0
 800be16:	4605      	mov	r5, r0
 800be18:	4608      	mov	r0, r1
 800be1a:	4611      	mov	r1, r2
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	f7f8 f924 	bl	800406a <_fstat>
 800be22:	1c43      	adds	r3, r0, #1
 800be24:	d102      	bne.n	800be2c <_fstat_r+0x1c>
 800be26:	6823      	ldr	r3, [r4, #0]
 800be28:	b103      	cbz	r3, 800be2c <_fstat_r+0x1c>
 800be2a:	602b      	str	r3, [r5, #0]
 800be2c:	bd38      	pop	{r3, r4, r5, pc}
 800be2e:	bf00      	nop
 800be30:	20001564 	.word	0x20001564

0800be34 <_isatty_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4c06      	ldr	r4, [pc, #24]	; (800be50 <_isatty_r+0x1c>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4605      	mov	r5, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	6023      	str	r3, [r4, #0]
 800be40:	f7f8 f923 	bl	800408a <_isatty>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_isatty_r+0x1a>
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_isatty_r+0x1a>
 800be4c:	602b      	str	r3, [r5, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	20001564 	.word	0x20001564

0800be54 <_lseek_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4c07      	ldr	r4, [pc, #28]	; (800be74 <_lseek_r+0x20>)
 800be58:	4605      	mov	r5, r0
 800be5a:	4608      	mov	r0, r1
 800be5c:	4611      	mov	r1, r2
 800be5e:	2200      	movs	r2, #0
 800be60:	6022      	str	r2, [r4, #0]
 800be62:	461a      	mov	r2, r3
 800be64:	f7f8 f91c 	bl	80040a0 <_lseek>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d102      	bne.n	800be72 <_lseek_r+0x1e>
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	b103      	cbz	r3, 800be72 <_lseek_r+0x1e>
 800be70:	602b      	str	r3, [r5, #0]
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	20001564 	.word	0x20001564

0800be78 <memcpy>:
 800be78:	b510      	push	{r4, lr}
 800be7a:	1e43      	subs	r3, r0, #1
 800be7c:	440a      	add	r2, r1
 800be7e:	4291      	cmp	r1, r2
 800be80:	d100      	bne.n	800be84 <memcpy+0xc>
 800be82:	bd10      	pop	{r4, pc}
 800be84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be8c:	e7f7      	b.n	800be7e <memcpy+0x6>

0800be8e <memmove>:
 800be8e:	4288      	cmp	r0, r1
 800be90:	b510      	push	{r4, lr}
 800be92:	eb01 0302 	add.w	r3, r1, r2
 800be96:	d807      	bhi.n	800bea8 <memmove+0x1a>
 800be98:	1e42      	subs	r2, r0, #1
 800be9a:	4299      	cmp	r1, r3
 800be9c:	d00a      	beq.n	800beb4 <memmove+0x26>
 800be9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bea2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bea6:	e7f8      	b.n	800be9a <memmove+0xc>
 800bea8:	4283      	cmp	r3, r0
 800beaa:	d9f5      	bls.n	800be98 <memmove+0xa>
 800beac:	1881      	adds	r1, r0, r2
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	42d3      	cmn	r3, r2
 800beb2:	d100      	bne.n	800beb6 <memmove+0x28>
 800beb4:	bd10      	pop	{r4, pc}
 800beb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bebe:	e7f7      	b.n	800beb0 <memmove+0x22>

0800bec0 <__malloc_lock>:
 800bec0:	4770      	bx	lr

0800bec2 <__malloc_unlock>:
 800bec2:	4770      	bx	lr

0800bec4 <_realloc_r>:
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec6:	4607      	mov	r7, r0
 800bec8:	4614      	mov	r4, r2
 800beca:	460e      	mov	r6, r1
 800becc:	b921      	cbnz	r1, 800bed8 <_realloc_r+0x14>
 800bece:	4611      	mov	r1, r2
 800bed0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bed4:	f7ff bbf2 	b.w	800b6bc <_malloc_r>
 800bed8:	b922      	cbnz	r2, 800bee4 <_realloc_r+0x20>
 800beda:	f7ff fba1 	bl	800b620 <_free_r>
 800bede:	4625      	mov	r5, r4
 800bee0:	4628      	mov	r0, r5
 800bee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee4:	f000 f826 	bl	800bf34 <_malloc_usable_size_r>
 800bee8:	42a0      	cmp	r0, r4
 800beea:	d20f      	bcs.n	800bf0c <_realloc_r+0x48>
 800beec:	4621      	mov	r1, r4
 800beee:	4638      	mov	r0, r7
 800bef0:	f7ff fbe4 	bl	800b6bc <_malloc_r>
 800bef4:	4605      	mov	r5, r0
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d0f2      	beq.n	800bee0 <_realloc_r+0x1c>
 800befa:	4631      	mov	r1, r6
 800befc:	4622      	mov	r2, r4
 800befe:	f7ff ffbb 	bl	800be78 <memcpy>
 800bf02:	4631      	mov	r1, r6
 800bf04:	4638      	mov	r0, r7
 800bf06:	f7ff fb8b 	bl	800b620 <_free_r>
 800bf0a:	e7e9      	b.n	800bee0 <_realloc_r+0x1c>
 800bf0c:	4635      	mov	r5, r6
 800bf0e:	e7e7      	b.n	800bee0 <_realloc_r+0x1c>

0800bf10 <_read_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4c07      	ldr	r4, [pc, #28]	; (800bf30 <_read_r+0x20>)
 800bf14:	4605      	mov	r5, r0
 800bf16:	4608      	mov	r0, r1
 800bf18:	4611      	mov	r1, r2
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	6022      	str	r2, [r4, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f7f8 f87a 	bl	8004018 <_read>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d102      	bne.n	800bf2e <_read_r+0x1e>
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	b103      	cbz	r3, 800bf2e <_read_r+0x1e>
 800bf2c:	602b      	str	r3, [r5, #0]
 800bf2e:	bd38      	pop	{r3, r4, r5, pc}
 800bf30:	20001564 	.word	0x20001564

0800bf34 <_malloc_usable_size_r>:
 800bf34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf38:	1f18      	subs	r0, r3, #4
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	bfbc      	itt	lt
 800bf3e:	580b      	ldrlt	r3, [r1, r0]
 800bf40:	18c0      	addlt	r0, r0, r3
 800bf42:	4770      	bx	lr

0800bf44 <_init>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	bf00      	nop
 800bf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf4a:	bc08      	pop	{r3}
 800bf4c:	469e      	mov	lr, r3
 800bf4e:	4770      	bx	lr

0800bf50 <_fini>:
 800bf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf52:	bf00      	nop
 800bf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf56:	bc08      	pop	{r3}
 800bf58:	469e      	mov	lr, r3
 800bf5a:	4770      	bx	lr
