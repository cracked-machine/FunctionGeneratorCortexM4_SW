
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001480  08015ad0  08015ad0  00025ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f50  08016f50  00031e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08016f50  08016f50  00031e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016f50  08016f50  00031e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016f50  08016f50  00026f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016f54  08016f54  00026f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e0c  20000000  08016f58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc0  20001e0c  08018d64  00031e0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dcc  08018d64  00032dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049ddc  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e72  00000000  00000000  0007bc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023d0  00000000  00000000  00083a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f60  00000000  00000000  00085e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c08  00000000  00000000  00087dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000304d5  00000000  00000000  000bd9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126e73  00000000  00000000  000ede9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00214d10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009dc0  00000000  00000000  00214d8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e0c 	.word	0x20001e0c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015ab4 	.word	0x08015ab4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e10 	.word	0x20001e10
 800021c:	08015ab4 	.word	0x08015ab4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00f ff6c 	bl	8010bec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00f ff5f 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00f ff54 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00f ff49 	bl	8010bec <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08015ad0 	.word	0x08015ad0
 8000d64:	08015adc 	.word	0x08015adc
 8000d68:	08015ae0 	.word	0x08015ae0
 8000d6c:	08015ae4 	.word	0x08015ae4

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00f ff7b 	bl	8010c6e <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f010 fbd1 	bl	8011520 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f010 f9b3 	bl	80110ec <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00f ff22 	bl	8010bec <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f008 fa70 	bl	8009290 <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fd56 	bl	8001860 <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08015ae8 	.word	0x08015ae8

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000dc6:	f004 fb4f 	bl	8005468 <ToplevelMenu_getStatus>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d015      	beq.n	8000dfc <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000dd0:	f004 fb4a 	bl	8005468 <ToplevelMenu_getStatus>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d008      	beq.n	8000dec <DM_UpdateDisplay+0x2c>
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d00a      	beq.n	8000df4 <DM_UpdateDisplay+0x34>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000de2:	e083      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f003 f8cf 	bl	8003f88 <ToplevelMenu_DrawMenu>
				break;
 8000dea:	e07f      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f003 f8cb 	bl	8003f88 <ToplevelMenu_DrawMenu>
				break;
 8000df2:	e07b      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f003 f8c7 	bl	8003f88 <ToplevelMenu_DrawMenu>
				break;
 8000dfa:	e077      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dfc:	f004 f924 	bl	8005048 <FuncMenu_getStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d015      	beq.n	8000e32 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000e06:	f004 f91f 	bl	8005048 <FuncMenu_getStatus>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d008      	beq.n	8000e22 <DM_UpdateDisplay+0x62>
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d00a      	beq.n	8000e2a <DM_UpdateDisplay+0x6a>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d000      	beq.n	8000e1a <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000e18:	e068      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f002 fb06 	bl	800342c <FuncMenu_DrawMenu>
				break;
 8000e20:	e064      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f002 fb02 	bl	800342c <FuncMenu_DrawMenu>
				break;
 8000e28:	e060      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f002 fafe 	bl	800342c <FuncMenu_DrawMenu>
				break;
 8000e30:	e05c      	b.n	8000eec <DM_UpdateDisplay+0x12c>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000e32:	f004 f9ff 	bl	8005234 <GainMenu_getStatus>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d015      	beq.n	8000e68 <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000e3c:	f004 f9fa 	bl	8005234 <GainMenu_getStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d008      	beq.n	8000e58 <DM_UpdateDisplay+0x98>
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d00a      	beq.n	8000e60 <DM_UpdateDisplay+0xa0>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e4e:	e04d      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f002 ffbf 	bl	8003dd4 <GainMenu_DrawMenu>
				break;
 8000e56:	e049      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f002 ffbb 	bl	8003dd4 <GainMenu_DrawMenu>
				break;
 8000e5e:	e045      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f002 ffb7 	bl	8003dd4 <GainMenu_DrawMenu>
				break;
 8000e66:	e041      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e68:	f004 f8e2 	bl	8005030 <FreqMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <DM_UpdateDisplay+0x100>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e72:	f004 f8dd 	bl	8005030 <FreqMenu_getStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d835      	bhi.n	8000eea <DM_UpdateDisplay+0x12a>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <DM_UpdateDisplay+0xc4>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000e99 	.word	0x08000e99
 8000e88:	08000ea1 	.word	0x08000ea1
 8000e8c:	08000ea9 	.word	0x08000ea9
 8000e90:	08000eb1 	.word	0x08000eb1
 8000e94:	08000eb9 	.word	0x08000eb9
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 fd45 	bl	8001928 <FreqMenu_DrawMenu>

				break;
 8000e9e:	e025      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 fd41 	bl	8001928 <FreqMenu_DrawMenu>
				break;
 8000ea6:	e021      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fd3d 	bl	8001928 <FreqMenu_DrawMenu>

				break;
 8000eae:	e01d      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f000 fd39 	bl	8001928 <FreqMenu_DrawMenu>
				break;
 8000eb6:	e019      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESCALER_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESCALER_MENU);
 8000eb8:	2005      	movs	r0, #5
 8000eba:	f000 fd35 	bl	8001928 <FreqMenu_DrawMenu>
				break;
 8000ebe:	e015      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000ec0:	f003 fadc 	bl	800447c <BiasMenu_getStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <DM_UpdateDisplay+0x112>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff04 	bl	8000cd8 <BiasMenu_DrawMenu>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG



}
 8000ed0:	e00c      	b.n	8000eec <DM_UpdateDisplay+0x12c>
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ed2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <DM_UpdateDisplay+0x134>)
 8000ee4:	f00f fe82 	bl	8010bec <ILI9341_Draw_Text>
}
 8000ee8:	e000      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				break;
 8000eea:	bf00      	nop
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08015af8 	.word	0x08015af8

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	_DisplayOutputSignalHertz(140, 45);
 8000efc:	212d      	movs	r1, #45	; 0x2d
 8000efe:	208c      	movs	r0, #140	; 0x8c
 8000f00:	f000 f99e 	bl	8001240 <_DisplayOutputSignalHertz>
	_DisplayOutputSignalVpp(175, 70);
 8000f04:	2146      	movs	r1, #70	; 0x46
 8000f06:	20af      	movs	r0, #175	; 0xaf
 8000f08:	f000 f9ea 	bl	80012e0 <_DisplayOutputSignalVpp>
	_DisplayOutputSignalDecibels(138, 95);
 8000f0c:	215f      	movs	r1, #95	; 0x5f
 8000f0e:	208a      	movs	r0, #138	; 0x8a
 8000f10:	f000 fa44 	bl	800139c <_DisplayOutputSignalDecibels>
	_DisplayOutputSignalOffset(161, 120);
 8000f14:	2178      	movs	r1, #120	; 0x78
 8000f16:	20a1      	movs	r0, #161	; 0xa1
 8000f18:	f000 fab4 	bl	8001484 <_DisplayOutputSignalOffset>
	_DisplayOutputWaveformIcons(80, 160, 245, 160);
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	22f5      	movs	r2, #245	; 0xf5
 8000f20:	21a0      	movs	r1, #160	; 0xa0
 8000f22:	2050      	movs	r0, #80	; 0x50
 8000f24:	f000 fb4e 	bl	80015c4 <_DisplayOutputWaveformIcons>

	DM_DisplayInputTriggerStatus();
 8000f28:	f000 f806 	bl	8000f38 <DM_DisplayInputTriggerStatus>
	DM_DisplayInputTriggerTimerHertz(200, 17);
 8000f2c:	2111      	movs	r1, #17
 8000f2e:	20c8      	movs	r0, #200	; 0xc8
 8000f30:	f000 f888 	bl	8001044 <DM_DisplayInputTriggerTimerHertz>

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <DM_DisplayInputTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerStatus()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8

	uint16_t text_x_pos = 240;
 8000f3e:	23f0      	movs	r3, #240	; 0xf0
 8000f40:	80fb      	strh	r3, [r7, #6]
	uint16_t text_y_pos = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	80bb      	strh	r3, [r7, #4]
	// eTriggerInputMode
	switch(IT_GetActiveTriggerMode())
 8000f46:	f005 fc0f 	bl	8006768 <IT_GetActiveTriggerMode>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d027      	beq.n	8000fa0 <DM_DisplayInputTriggerStatus+0x68>
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d048      	beq.n	8000fe6 <DM_DisplayInputTriggerStatus+0xae>
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d000      	beq.n	8000f5a <DM_DisplayInputTriggerStatus+0x22>
			else
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
			break;

	}
}
 8000f58:	e068      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000f5a:	f005 fc21 	bl	80067a0 <IT_GetTriggerStatus>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00e      	beq.n	8000f82 <DM_DisplayInputTriggerStatus+0x4a>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	88b8      	ldrh	r0, [r7, #4]
 8000f6c:	88f9      	ldrh	r1, [r7, #6]
 8000f6e:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000f72:	9201      	str	r2, [sp, #4]
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	4602      	mov	r2, r0
 8000f7a:	482f      	ldr	r0, [pc, #188]	; (8001038 <DM_DisplayInputTriggerStatus+0x100>)
 8000f7c:	f00f fe36 	bl	8010bec <ILI9341_Draw_Text>
			break;
 8000f80:	e054      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	88b8      	ldrh	r0, [r7, #4]
 8000f8a:	88f9      	ldrh	r1, [r7, #6]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000f96:	4602      	mov	r2, r0
 8000f98:	4827      	ldr	r0, [pc, #156]	; (8001038 <DM_DisplayInputTriggerStatus+0x100>)
 8000f9a:	f00f fe27 	bl	8010bec <ILI9341_Draw_Text>
			break;
 8000f9e:	e045      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000fa0:	f005 fbfe 	bl	80067a0 <IT_GetTriggerStatus>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00e      	beq.n	8000fc8 <DM_DisplayInputTriggerStatus+0x90>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	88b8      	ldrh	r0, [r7, #4]
 8000fb2:	88f9      	ldrh	r1, [r7, #6]
 8000fb4:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000fb8:	9201      	str	r2, [sp, #4]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	481e      	ldr	r0, [pc, #120]	; (800103c <DM_DisplayInputTriggerStatus+0x104>)
 8000fc2:	f00f fe13 	bl	8010bec <ILI9341_Draw_Text>
			break;
 8000fc6:	e031      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	88b8      	ldrh	r0, [r7, #4]
 8000fd0:	88f9      	ldrh	r1, [r7, #6]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	9201      	str	r2, [sp, #4]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4817      	ldr	r0, [pc, #92]	; (800103c <DM_DisplayInputTriggerStatus+0x104>)
 8000fe0:	f00f fe04 	bl	8010bec <ILI9341_Draw_Text>
			break;
 8000fe4:	e022      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000fe6:	f005 fbdb 	bl	80067a0 <IT_GetTriggerStatus>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00e      	beq.n	800100e <DM_DisplayInputTriggerStatus+0xd6>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	88b8      	ldrh	r0, [r7, #4]
 8000ff8:	88f9      	ldrh	r1, [r7, #6]
 8000ffa:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000ffe:	9201      	str	r2, [sp, #4]
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	4602      	mov	r2, r0
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <DM_DisplayInputTriggerStatus+0x108>)
 8001008:	f00f fdf0 	bl	8010bec <ILI9341_Draw_Text>
			break;
 800100c:	e00d      	b.n	800102a <DM_DisplayInputTriggerStatus+0xf2>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	88b8      	ldrh	r0, [r7, #4]
 8001016:	88f9      	ldrh	r1, [r7, #6]
 8001018:	2200      	movs	r2, #0
 800101a:	9201      	str	r2, [sp, #4]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001022:	4602      	mov	r2, r0
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <DM_DisplayInputTriggerStatus+0x108>)
 8001026:	f00f fde1 	bl	8010bec <ILI9341_Draw_Text>
			break;
 800102a:	bf00      	nop
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	08015b1c 	.word	0x08015b1c
 800103c:	08015b24 	.word	0x08015b24
 8001040:	08015b2c 	.word	0x08015b2c

08001044 <DM_DisplayInputTriggerTimerHertz>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerTimerHertz(uint16_t xpos, uint16_t ypos)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b095      	sub	sp, #84	; 0x54
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	80fb      	strh	r3, [r7, #6]
 8001050:	4613      	mov	r3, r2
 8001052:	80bb      	strh	r3, [r7, #4]
	if(IT_GetTriggerStatus())
 8001054:	f005 fba4 	bl	80067a0 <IT_GetTriggerStatus>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80d0 	beq.w	8001200 <DM_DisplayInputTriggerTimerHertz+0x1bc>
	{
		if(IT_GetAverageFreqCountHertz() < 1000)
 8001060:	f005 fc5a 	bl	8006918 <IT_GetAverageFreqCountHertz>
 8001064:	eeb0 7a40 	vmov.f32	s14, s0
 8001068:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 800106c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	d527      	bpl.n	80010c6 <DM_DisplayInputTriggerTimerHertz+0x82>
		{
			char avg_freq_count_hertz[13] = {};
 8001076:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%7.1f Hz", IT_GetAverageFreqCountHertz());
 8001084:	f005 fc48 	bl	8006918 <IT_GetAverageFreqCountHertz>
 8001088:	ee10 3a10 	vmov	r3, s0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa83 	bl	8000598 <__aeabi_f2d>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800109a:	e9cd 3400 	strd	r3, r4, [sp]
 800109e:	4a62      	ldr	r2, [pc, #392]	; (8001228 <DM_DisplayInputTriggerTimerHertz+0x1e4>)
 80010a0:	210d      	movs	r1, #13
 80010a2:	f011 f95f 	bl	8012364 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80010a6:	4b61      	ldr	r3, [pc, #388]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	88bc      	ldrh	r4, [r7, #4]
 80010ae:	88f9      	ldrh	r1, [r7, #6]
 80010b0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80010b4:	2200      	movs	r2, #0
 80010b6:	9201      	str	r2, [sp, #4]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010be:	4622      	mov	r2, r4
 80010c0:	f00f fd94 	bl	8010bec <ILI9341_Draw_Text>
	}
	else
	{
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
	}
}
 80010c4:	e0aa      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		else if(IT_GetAverageFreqCountHertz() < 10000)
 80010c6:	f005 fc27 	bl	8006918 <IT_GetAverageFreqCountHertz>
 80010ca:	eeb0 7a40 	vmov.f32	s14, s0
 80010ce:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001230 <DM_DisplayInputTriggerTimerHertz+0x1ec>
 80010d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	d52c      	bpl.n	8001136 <DM_DisplayInputTriggerTimerHertz+0xf2>
			char avg_freq_count_hertz[13] = {};
 80010dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz() / 1000);
 80010ea:	f005 fc15 	bl	8006918 <IT_GetAverageFreqCountHertz>
 80010ee:	eeb0 7a40 	vmov.f32	s14, s0
 80010f2:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 80010f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010fa:	ee16 0a90 	vmov	r0, s13
 80010fe:	f7ff fa4b 	bl	8000598 <__aeabi_f2d>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800110a:	e9cd 3400 	strd	r3, r4, [sp]
 800110e:	4a49      	ldr	r2, [pc, #292]	; (8001234 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 8001110:	210d      	movs	r1, #13
 8001112:	f011 f927 	bl	8012364 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	88bc      	ldrh	r4, [r7, #4]
 800111e:	88f9      	ldrh	r1, [r7, #6]
 8001120:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001124:	2200      	movs	r2, #0
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800112e:	4622      	mov	r2, r4
 8001130:	f00f fd5c 	bl	8010bec <ILI9341_Draw_Text>
}
 8001134:	e072      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		else if(IT_GetAverageFreqCountHertz() < 100000)
 8001136:	f005 fbef 	bl	8006918 <IT_GetAverageFreqCountHertz>
 800113a:	eeb0 7a40 	vmov.f32	s14, s0
 800113e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001238 <DM_DisplayInputTriggerTimerHertz+0x1f4>
 8001142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	d52c      	bpl.n	80011a6 <DM_DisplayInputTriggerTimerHertz+0x162>
			char avg_freq_count_hertz[13] = {};
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 800115a:	f005 fbdd 	bl	8006918 <IT_GetAverageFreqCountHertz>
 800115e:	eeb0 7a40 	vmov.f32	s14, s0
 8001162:	eddf 7a30 	vldr	s15, [pc, #192]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 8001166:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800116a:	ee16 0a90 	vmov	r0, s13
 800116e:	f7ff fa13 	bl	8000598 <__aeabi_f2d>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	f107 0018 	add.w	r0, r7, #24
 800117a:	e9cd 3400 	strd	r3, r4, [sp]
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 8001180:	210d      	movs	r1, #13
 8001182:	f011 f8ef 	bl	8012364 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	88bc      	ldrh	r4, [r7, #4]
 800118e:	88f9      	ldrh	r1, [r7, #6]
 8001190:	f107 0018 	add.w	r0, r7, #24
 8001194:	2200      	movs	r2, #0
 8001196:	9201      	str	r2, [sp, #4]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800119e:	4622      	mov	r2, r4
 80011a0:	f00f fd24 	bl	8010bec <ILI9341_Draw_Text>
}
 80011a4:	e03a      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
			char avg_freq_count_hertz[13] = {};
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 80011b4:	f005 fbb0 	bl	8006918 <IT_GetAverageFreqCountHertz>
 80011b8:	eeb0 7a40 	vmov.f32	s14, s0
 80011bc:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 80011c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011c4:	ee16 0a90 	vmov	r0, s13
 80011c8:	f7ff f9e6 	bl	8000598 <__aeabi_f2d>
 80011cc:	4603      	mov	r3, r0
 80011ce:	460c      	mov	r4, r1
 80011d0:	f107 0008 	add.w	r0, r7, #8
 80011d4:	e9cd 3400 	strd	r3, r4, [sp]
 80011d8:	4a16      	ldr	r2, [pc, #88]	; (8001234 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 80011da:	210d      	movs	r1, #13
 80011dc:	f011 f8c2 	bl	8012364 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	88bc      	ldrh	r4, [r7, #4]
 80011e8:	88f9      	ldrh	r1, [r7, #6]
 80011ea:	f107 0008 	add.w	r0, r7, #8
 80011ee:	2200      	movs	r2, #0
 80011f0:	9201      	str	r2, [sp, #4]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f8:	4622      	mov	r2, r4
 80011fa:	f00f fcf7 	bl	8010bec <ILI9341_Draw_Text>
}
 80011fe:	e00d      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	88b8      	ldrh	r0, [r7, #4]
 8001208:	88f9      	ldrh	r1, [r7, #6]
 800120a:	2200      	movs	r2, #0
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001214:	4602      	mov	r2, r0
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <DM_DisplayInputTriggerTimerHertz+0x1f8>)
 8001218:	f00f fce8 	bl	8010bec <ILI9341_Draw_Text>
}
 800121c:	bf00      	nop
 800121e:	374c      	adds	r7, #76	; 0x4c
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	447a0000 	.word	0x447a0000
 8001228:	08015b34 	.word	0x08015b34
 800122c:	20000000 	.word	0x20000000
 8001230:	461c4000 	.word	0x461c4000
 8001234:	08015b40 	.word	0x08015b40
 8001238:	47c35000 	.word	0x47c35000
 800123c:	08015b4c 	.word	0x08015b4c

08001240 <_DisplayOutputSignalHertz>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalHertz(uint16_t xpos, uint16_t ypos)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08b      	sub	sp, #44	; 0x2c
 8001244:	af02      	add	r7, sp, #8
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	80fb      	strh	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	80bb      	strh	r3, [r7, #4]
	char out_hertz[15] = "";
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = xpos;
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	77fb      	strb	r3, [r7, #31]
	uint8_t out_hertz_y = ypos;
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	77bb      	strb	r3, [r7, #30]

	// draw row header
	ILI9341_Draw_Text("FREQ   ....", 2, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800126a:	7fbb      	ldrb	r3, [r7, #30]
 800126c:	b299      	uxth	r1, r3
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <_DisplayOutputSignalHertz+0x94>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	2200      	movs	r2, #0
 8001276:	9201      	str	r2, [sp, #4]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800127e:	460a      	mov	r2, r1
 8001280:	2102      	movs	r1, #2
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <_DisplayOutputSignalHertz+0x98>)
 8001284:	f00f fcb2 	bl	8010bec <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001288:	f005 ff00 	bl	800708c <SM_GetOutputInHertz>
 800128c:	ee10 3a10 	vmov	r3, s0
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f981 	bl	8000598 <__aeabi_f2d>
 8001296:	4603      	mov	r3, r0
 8001298:	460c      	mov	r4, r1
 800129a:	f107 000c 	add.w	r0, r7, #12
 800129e:	e9cd 3400 	strd	r3, r4, [sp]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <_DisplayOutputSignalHertz+0x9c>)
 80012a4:	210f      	movs	r1, #15
 80012a6:	f011 f85d 	bl	8012364 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	b299      	uxth	r1, r3
 80012ae:	7fbb      	ldrb	r3, [r7, #30]
 80012b0:	b29c      	uxth	r4, r3
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_DisplayOutputSignalHertz+0x94>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f107 000c 	add.w	r0, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	9201      	str	r2, [sp, #4]
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80012c6:	4622      	mov	r2, r4
 80012c8:	f00f fc90 	bl	8010bec <ILI9341_Draw_Text>
}
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	08015b60 	.word	0x08015b60
 80012dc:	08015b6c 	.word	0x08015b6c

080012e0 <_DisplayOutputSignalVpp>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalVpp(uint16_t xpos, uint16_t ypos)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08d      	sub	sp, #52	; 0x34
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	4613      	mov	r3, r2
 80012ee:	80bb      	strh	r3, [r7, #4]
	char out_vpp[18] = "";
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = xpos;
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_vpp_y = ypos;
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("VPP    ....", 2, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800130e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001312:	b299      	uxth	r1, r3
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <_DisplayOutputSignalVpp+0xb0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	2200      	movs	r2, #0
 800131c:	9201      	str	r2, [sp, #4]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001324:	460a      	mov	r2, r1
 8001326:	2102      	movs	r1, #2
 8001328:	481a      	ldr	r0, [pc, #104]	; (8001394 <_DisplayOutputSignalVpp+0xb4>)
 800132a:	f00f fc5f 	bl	8010bec <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800132e:	2000      	movs	r0, #0
 8001330:	f005 fc14 	bl	8006b5c <SM_GetOutputChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800133a:	623b      	str	r3, [r7, #32]

	if(pTmpVppPreset)
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00e      	beq.n	8001360 <_DisplayOutputSignalVpp+0x80>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f926 	bl	8000598 <__aeabi_f2d>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	f107 000c 	add.w	r0, r7, #12
 8001354:	e9cd 3400 	strd	r3, r4, [sp]
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <_DisplayOutputSignalVpp+0xb8>)
 800135a:	2112      	movs	r1, #18
 800135c:	f011 f802 	bl	8012364 <sniprintf>
	}

	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001364:	b299      	uxth	r1, r3
 8001366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800136a:	b29c      	uxth	r4, r3
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_DisplayOutputSignalVpp+0xb0>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	f107 000c 	add.w	r0, r7, #12
 8001376:	2200      	movs	r2, #0
 8001378:	9201      	str	r2, [sp, #4]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001380:	4622      	mov	r2, r4
 8001382:	f00f fc33 	bl	8010bec <ILI9341_Draw_Text>
}
 8001386:	bf00      	nop
 8001388:	372c      	adds	r7, #44	; 0x2c
 800138a:	46bd      	mov	sp, r7
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000
 8001394:	08015b7c 	.word	0x08015b7c
 8001398:	08015b88 	.word	0x08015b88

0800139c <_DisplayOutputSignalDecibels>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalDecibels(uint16_t xpos, uint16_t ypos)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b08d      	sub	sp, #52	; 0x34
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	80fb      	strh	r3, [r7, #6]
 80013a8:	4613      	mov	r3, r2
 80013aa:	80bb      	strh	r3, [r7, #4]
	char out_decibels[20] = "";
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = xpos;
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_decibels_y = ypos;
 80013c4:	88bb      	ldrh	r3, [r7, #4]
 80013c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("GAIN   ....", 2, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80013ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ce:	b299      	uxth	r1, r3
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <_DisplayOutputSignalDecibels+0xd8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	2200      	movs	r2, #0
 80013d8:	9201      	str	r2, [sp, #4]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013e0:	460a      	mov	r2, r1
 80013e2:	2102      	movs	r1, #2
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <_DisplayOutputSignalDecibels+0xdc>)
 80013e6:	f00f fc01 	bl	8010bec <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80013ea:	2000      	movs	r0, #0
 80013ec:	f005 fbb6 	bl	8006b5c <SM_GetOutputChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80013f6:	623b      	str	r3, [r7, #32]
	if(pTmpVppPreset)
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00e      	beq.n	800141c <_DisplayOutputSignalDecibels+0x80>
	{
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8c8 	bl	8000598 <__aeabi_f2d>
 8001408:	4603      	mov	r3, r0
 800140a:	460c      	mov	r4, r1
 800140c:	f107 000c 	add.w	r0, r7, #12
 8001410:	e9cd 3400 	strd	r3, r4, [sp]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <_DisplayOutputSignalDecibels+0xe0>)
 8001416:	2114      	movs	r1, #20
 8001418:	f010 ffa4 	bl	8012364 <sniprintf>
	}

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800141c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001420:	b299      	uxth	r1, r3
 8001422:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001426:	b29c      	uxth	r4, r3
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <_DisplayOutputSignalDecibels+0xd8>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	f107 000c 	add.w	r0, r7, #12
 8001432:	2200      	movs	r2, #0
 8001434:	9201      	str	r2, [sp, #4]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800143c:	4622      	mov	r2, r4
 800143e:	f00f fbd5 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001446:	b29b      	uxth	r3, r3
 8001448:	3380      	adds	r3, #128	; 0x80
 800144a:	b299      	uxth	r1, r3
 800144c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001450:	b298      	uxth	r0, r3
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_DisplayOutputSignalDecibels+0xd8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	2200      	movs	r2, #0
 800145a:	9201      	str	r2, [sp, #4]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001462:	4602      	mov	r2, r0
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <_DisplayOutputSignalDecibels+0xe4>)
 8001466:	f00f fbc1 	bl	8010bec <ILI9341_Draw_Text>

}
 800146a:	bf00      	nop
 800146c:	372c      	adds	r7, #44	; 0x2c
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000
 8001478:	08015b94 	.word	0x08015b94
 800147c:	08015ba0 	.word	0x08015ba0
 8001480:	08015bac 	.word	0x08015bac

08001484 <_DisplayOutputSignalOffset>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalOffset(uint16_t xpos, uint16_t ypos)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b08d      	sub	sp, #52	; 0x34
 8001488:	af02      	add	r7, sp, #8
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	80fb      	strh	r3, [r7, #6]
 8001490:	4613      	mov	r3, r2
 8001492:	80bb      	strh	r3, [r7, #4]
	float volts_per_thou = 0.00075;
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <_DisplayOutputSignalOffset+0x128>)
 8001496:	623b      	str	r3, [r7, #32]
	char out_dcvolts[12] = "";
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = xpos;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	77fb      	strb	r3, [r7, #31]
	uint8_t out_dcvolts_y = ypos;
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	77bb      	strb	r3, [r7, #30]

	ILI9341_Draw_Text("OFFSET ....", 2, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80014ae:	7fbb      	ldrb	r3, [r7, #30]
 80014b0:	b299      	uxth	r1, r3
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <_DisplayOutputSignalOffset+0x12c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2200      	movs	r2, #0
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014c2:	460a      	mov	r2, r1
 80014c4:	2102      	movs	r1, #2
 80014c6:	483b      	ldr	r0, [pc, #236]	; (80015b4 <_DisplayOutputSignalOffset+0x130>)
 80014c8:	f00f fb90 	bl	8010bec <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 80014cc:	f004 fa20 	bl	8005910 <BO_GetOutputBias>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <_DisplayOutputSignalOffset+0x5a>
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
 80014dc:	e00b      	b.n	80014f6 <_DisplayOutputSignalOffset+0x72>
 80014de:	f004 fa17 	bl	8005910 <BO_GetOutputBias>
 80014e2:	ee07 0a90 	vmov	s15, r0
 80014e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 80014f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014f8:	f7ff f84e 	bl	8000598 <__aeabi_f2d>
 80014fc:	4603      	mov	r3, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	f107 0010 	add.w	r0, r7, #16
 8001504:	e9cd 3400 	strd	r3, r4, [sp]
 8001508:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <_DisplayOutputSignalOffset+0x134>)
 800150a:	210c      	movs	r1, #12
 800150c:	f010 ff2a 	bl	8012364 <sniprintf>
	if(BO_GetBiasPolarity())
 8001510:	f004 f99e 	bl	8005850 <BO_GetBiasPolarity>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d022      	beq.n	8001560 <_DisplayOutputSignalOffset+0xdc>
	{
		char symbol[3] = "+\0";
 800151a:	4a28      	ldr	r2, [pc, #160]	; (80015bc <_DisplayOutputSignalOffset+0x138>)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	4611      	mov	r1, r2
 8001524:	8019      	strh	r1, [r3, #0]
 8001526:	3302      	adds	r3, #2
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800152c:	f107 0210 	add.w	r2, r7, #16
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f010 ff48 	bl	80123cc <strcat>
 800153c:	4604      	mov	r4, r0
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	b299      	uxth	r1, r3
 8001542:	7fbb      	ldrb	r3, [r7, #30]
 8001544:	b298      	uxth	r0, r3
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <_DisplayOutputSignalOffset+0x12c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	2200      	movs	r2, #0
 800154e:	9201      	str	r2, [sp, #4]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001556:	4602      	mov	r2, r0
 8001558:	4620      	mov	r0, r4
 800155a:	f00f fb47 	bl	8010bec <ILI9341_Draw_Text>
	{
		char symbol[3] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
	}

}
 800155e:	e021      	b.n	80015a4 <_DisplayOutputSignalOffset+0x120>
		char symbol[3] = "-\0";
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <_DisplayOutputSignalOffset+0x13c>)
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	4611      	mov	r1, r2
 800156a:	8019      	strh	r1, [r3, #0]
 800156c:	3302      	adds	r3, #2
 800156e:	0c12      	lsrs	r2, r2, #16
 8001570:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001572:	f107 0210 	add.w	r2, r7, #16
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f010 ff25 	bl	80123cc <strcat>
 8001582:	4604      	mov	r4, r0
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	b299      	uxth	r1, r3
 8001588:	7fbb      	ldrb	r3, [r7, #30]
 800158a:	b298      	uxth	r0, r3
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_DisplayOutputSignalOffset+0x12c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	2200      	movs	r2, #0
 8001594:	9201      	str	r2, [sp, #4]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800159c:	4602      	mov	r2, r0
 800159e:	4620      	mov	r0, r4
 80015a0:	f00f fb24 	bl	8010bec <ILI9341_Draw_Text>
}
 80015a4:	bf00      	nop
 80015a6:	372c      	adds	r7, #44	; 0x2c
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	3a449ba6 	.word	0x3a449ba6
 80015b0:	20000000 	.word	0x20000000
 80015b4:	08015bb4 	.word	0x08015bb4
 80015b8:	08015bc0 	.word	0x08015bc0
 80015bc:	08015bcc 	.word	0x08015bcc
 80015c0:	08015bd0 	.word	0x08015bd0

080015c4 <_DisplayOutputWaveformIcons>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputWaveformIcons(uint16_t main_xpos, uint16_t main_ypos, uint16_t aux_xpos, uint16_t aux_ypos)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	4603      	mov	r3, r0
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	803b      	strh	r3, [r7, #0]

	ILI9341_Draw_Text(" OUT:", 1, main_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	330a      	adds	r3, #10
 80015e6:	b299      	uxth	r1, r3
 80015e8:	4b94      	ldr	r3, [pc, #592]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2200      	movs	r2, #0
 80015f0:	9201      	str	r2, [sp, #4]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015f8:	460a      	mov	r2, r1
 80015fa:	2101      	movs	r1, #1
 80015fc:	4890      	ldr	r0, [pc, #576]	; (8001840 <_DisplayOutputWaveformIcons+0x27c>)
 80015fe:	f00f faf5 	bl	8010bec <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8001602:	2000      	movs	r0, #0
 8001604:	f005 faaa 	bl	8006b5c <SM_GetOutputChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	73fb      	strb	r3, [r7, #15]
	switch(signal_output_func)
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b06      	cmp	r3, #6
 8001616:	d878      	bhi.n	800170a <_DisplayOutputWaveformIcons+0x146>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <_DisplayOutputWaveformIcons+0x5c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	0800163d 	.word	0x0800163d
 8001624:	0800165d 	.word	0x0800165d
 8001628:	08001679 	.word	0x08001679
 800162c:	08001695 	.word	0x08001695
 8001630:	080016b1 	.word	0x080016b1
 8001634:	080016cd 	.word	0x080016cd
 8001638:	080016e9 	.word	0x080016e9
	{
		case SINE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos-20, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	3b14      	subs	r3, #20
 8001640:	b299      	uxth	r1, r3
 8001642:	88f8      	ldrh	r0, [r7, #6]
 8001644:	233c      	movs	r3, #60	; 0x3c
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	4b7e      	ldr	r3, [pc, #504]	; (8001844 <_DisplayOutputWaveformIcons+0x280>)
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001654:	2203      	movs	r2, #3
 8001656:	f00f f925 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 800165a:	e056      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 800165c:	88b9      	ldrh	r1, [r7, #4]
 800165e:	88f8      	ldrh	r0, [r7, #6]
 8001660:	233c      	movs	r3, #60	; 0x3c
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	4b78      	ldr	r3, [pc, #480]	; (8001848 <_DisplayOutputWaveformIcons+0x284>)
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	23c8      	movs	r3, #200	; 0xc8
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001670:	2203      	movs	r2, #3
 8001672:	f00f f917 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 8001676:	e048      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001678:	88b9      	ldrh	r1, [r7, #4]
 800167a:	88f8      	ldrh	r0, [r7, #6]
 800167c:	233c      	movs	r3, #60	; 0x3c
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	4b72      	ldr	r3, [pc, #456]	; (800184c <_DisplayOutputWaveformIcons+0x288>)
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	23c8      	movs	r3, #200	; 0xc8
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f240 23fd 	movw	r3, #765	; 0x2fd
 800168c:	2203      	movs	r2, #3
 800168e:	f00f f909 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 8001692:	e03a      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001694:	88b9      	ldrh	r1, [r7, #4]
 8001696:	88f8      	ldrh	r0, [r7, #6]
 8001698:	233c      	movs	r3, #60	; 0x3c
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <_DisplayOutputWaveformIcons+0x28c>)
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	23c8      	movs	r3, #200	; 0xc8
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016a8:	2203      	movs	r2, #3
 80016aa:	f00f f8fb 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 80016ae:	e02c      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80016b0:	88b9      	ldrh	r1, [r7, #4]
 80016b2:	88f8      	ldrh	r0, [r7, #6]
 80016b4:	233c      	movs	r3, #60	; 0x3c
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	4b66      	ldr	r3, [pc, #408]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	23c8      	movs	r3, #200	; 0xc8
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016c4:	2203      	movs	r2, #3
 80016c6:	f00f f8ed 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 80016ca:	e01e      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80016cc:	88b9      	ldrh	r1, [r7, #4]
 80016ce:	88f8      	ldrh	r0, [r7, #6]
 80016d0:	233c      	movs	r3, #60	; 0x3c
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	4b5f      	ldr	r3, [pc, #380]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	23c8      	movs	r3, #200	; 0xc8
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016e0:	2203      	movs	r2, #3
 80016e2:	f00f f8df 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 80016e6:	e010      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", main_xpos, main_ypos+10, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	330a      	adds	r3, #10
 80016ec:	b298      	uxth	r0, r3
 80016ee:	4b53      	ldr	r3, [pc, #332]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	88f9      	ldrh	r1, [r7, #6]
 80016f6:	2200      	movs	r2, #0
 80016f8:	9201      	str	r2, [sp, #4]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001700:	4602      	mov	r2, r0
 8001702:	4855      	ldr	r0, [pc, #340]	; (8001858 <_DisplayOutputWaveformIcons+0x294>)
 8001704:	f00f fa72 	bl	8010bec <ILI9341_Draw_Text>
			break;
 8001708:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 170, aux_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800170a:	883b      	ldrh	r3, [r7, #0]
 800170c:	330a      	adds	r3, #10
 800170e:	b299      	uxth	r1, r3
 8001710:	4b4a      	ldr	r3, [pc, #296]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	2200      	movs	r2, #0
 8001718:	9201      	str	r2, [sp, #4]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001720:	460a      	mov	r2, r1
 8001722:	21aa      	movs	r1, #170	; 0xaa
 8001724:	484d      	ldr	r0, [pc, #308]	; (800185c <_DisplayOutputWaveformIcons+0x298>)
 8001726:	f00f fa61 	bl	8010bec <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800172a:	2001      	movs	r0, #1
 800172c:	f005 fa16 	bl	8006b5c <SM_GetOutputChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	73bb      	strb	r3, [r7, #14]
	switch(Aux_output_func)
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	2b06      	cmp	r3, #6
 800173e:	d878      	bhi.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
 8001740:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <_DisplayOutputWaveformIcons+0x184>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	08001765 	.word	0x08001765
 800174c:	08001785 	.word	0x08001785
 8001750:	080017a1 	.word	0x080017a1
 8001754:	080017bd 	.word	0x080017bd
 8001758:	080017d9 	.word	0x080017d9
 800175c:	080017f5 	.word	0x080017f5
 8001760:	08001811 	.word	0x08001811
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(aux_xpos, aux_ypos-20, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001764:	883b      	ldrh	r3, [r7, #0]
 8001766:	3b14      	subs	r3, #20
 8001768:	b299      	uxth	r1, r3
 800176a:	8878      	ldrh	r0, [r7, #2]
 800176c:	233c      	movs	r3, #60	; 0x3c
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <_DisplayOutputWaveformIcons+0x280>)
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2364      	movs	r3, #100	; 0x64
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800177c:	2203      	movs	r2, #3
 800177e:	f00f f891 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 8001782:	e056      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001784:	8839      	ldrh	r1, [r7, #0]
 8001786:	8878      	ldrh	r0, [r7, #2]
 8001788:	233c      	movs	r3, #60	; 0x3c
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <_DisplayOutputWaveformIcons+0x284>)
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	23c8      	movs	r3, #200	; 0xc8
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001798:	2203      	movs	r2, #3
 800179a:	f00f f883 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 800179e:	e048      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80017a0:	8839      	ldrh	r1, [r7, #0]
 80017a2:	8878      	ldrh	r0, [r7, #2]
 80017a4:	233c      	movs	r3, #60	; 0x3c
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <_DisplayOutputWaveformIcons+0x288>)
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	23c8      	movs	r3, #200	; 0xc8
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017b4:	2203      	movs	r2, #3
 80017b6:	f00f f875 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 80017ba:	e03a      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80017bc:	8839      	ldrh	r1, [r7, #0]
 80017be:	8878      	ldrh	r0, [r7, #2]
 80017c0:	233c      	movs	r3, #60	; 0x3c
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <_DisplayOutputWaveformIcons+0x28c>)
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	23c8      	movs	r3, #200	; 0xc8
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017d0:	2203      	movs	r2, #3
 80017d2:	f00f f867 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 80017d6:	e02c      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80017d8:	8839      	ldrh	r1, [r7, #0]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	233c      	movs	r3, #60	; 0x3c
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	23c8      	movs	r3, #200	; 0xc8
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017ec:	2203      	movs	r2, #3
 80017ee:	f00f f859 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 80017f2:	e01e      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80017f4:	8839      	ldrh	r1, [r7, #0]
 80017f6:	8878      	ldrh	r0, [r7, #2]
 80017f8:	233c      	movs	r3, #60	; 0x3c
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	23c8      	movs	r3, #200	; 0xc8
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001808:	2203      	movs	r2, #3
 800180a:	f00f f84b 	bl	80108a4 <ILI9341_Draw_Wave>
			break;
 800180e:	e010      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", aux_xpos, aux_ypos+10, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001810:	883b      	ldrh	r3, [r7, #0]
 8001812:	330a      	adds	r3, #10
 8001814:	b298      	uxth	r0, r3
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	8879      	ldrh	r1, [r7, #2]
 800181e:	2200      	movs	r2, #0
 8001820:	9201      	str	r2, [sp, #4]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001828:	4602      	mov	r2, r0
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <_DisplayOutputWaveformIcons+0x294>)
 800182c:	f00f f9de 	bl	8010bec <ILI9341_Draw_Text>
			break;
 8001830:	bf00      	nop
	}
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000
 8001840:	08015bd4 	.word	0x08015bd4
 8001844:	20000e28 	.word	0x20000e28
 8001848:	20000f18 	.word	0x20000f18
 800184c:	20000c48 	.word	0x20000c48
 8001850:	20000d38 	.word	0x20000d38
 8001854:	20001008 	.word	0x20001008
 8001858:	08015bdc 	.word	0x08015bdc
 800185c:	08015be0 	.word	0x08015be0

08001860 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 8001866:	4820      	ldr	r0, [pc, #128]	; (80018e8 <DM_RefreshScreen+0x88>)
 8001868:	f00c f9a6 	bl	800dbb8 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 800186c:	2000      	movs	r0, #0
 800186e:	f00f fc3d 	bl	80110ec <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001872:	2300      	movs	r3, #0
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	2302      	movs	r3, #2
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2328      	movs	r3, #40	; 0x28
 8001882:	2250      	movs	r2, #80	; 0x50
 8001884:	21c8      	movs	r1, #200	; 0xc8
 8001886:	2000      	movs	r0, #0
 8001888:	f00f f84d 	bl	8010926 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 800188c:	2300      	movs	r3, #0
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	2302      	movs	r3, #2
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2328      	movs	r3, #40	; 0x28
 800189c:	2250      	movs	r2, #80	; 0x50
 800189e:	21c8      	movs	r1, #200	; 0xc8
 80018a0:	2050      	movs	r0, #80	; 0x50
 80018a2:	f00f f840 	bl	8010926 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80018a6:	2300      	movs	r3, #0
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2302      	movs	r3, #2
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2328      	movs	r3, #40	; 0x28
 80018b6:	2250      	movs	r2, #80	; 0x50
 80018b8:	21c8      	movs	r1, #200	; 0xc8
 80018ba:	20a0      	movs	r0, #160	; 0xa0
 80018bc:	f00f f833 	bl	8010926 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80018c0:	2300      	movs	r3, #0
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2328      	movs	r3, #40	; 0x28
 80018d0:	2250      	movs	r2, #80	; 0x50
 80018d2:	21c8      	movs	r1, #200	; 0xc8
 80018d4:	20f0      	movs	r0, #240	; 0xf0
 80018d6:	f00f f826 	bl	8010926 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80018da:	4803      	ldr	r0, [pc, #12]	; (80018e8 <DM_RefreshScreen+0x88>)
 80018dc:	f00c f936 	bl	800db4c <HAL_TIM_Base_Start_IT>


}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20002bfc 	.word	0x20002bfc

080018ec <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <DM_SetErrorDebugMsg+0x34>)
 80018f8:	212d      	movs	r1, #45	; 0x2d
 80018fa:	480a      	ldr	r0, [pc, #40]	; (8001924 <DM_SetErrorDebugMsg+0x38>)
 80018fc:	f010 fd32 	bl	8012364 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8001900:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2301      	movs	r3, #1
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	22be      	movs	r2, #190	; 0xbe
 800190e:	210a      	movs	r1, #10
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <DM_SetErrorDebugMsg+0x38>)
 8001912:	f00f f96b 	bl	8010bec <ILI9341_Draw_Text>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	08015c64 	.word	0x08015c64
 8001924:	20001e28 	.word	0x20001e28

08001928 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	3b01      	subs	r3, #1
 8001936:	2b04      	cmp	r3, #4
 8001938:	d81b      	bhi.n	8001972 <FreqMenu_DrawMenu+0x4a>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <FreqMenu_DrawMenu+0x18>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	08001955 	.word	0x08001955
 8001944:	0800195b 	.word	0x0800195b
 8001948:	08001961 	.word	0x08001961
 800194c:	08001967 	.word	0x08001967
 8001950:	0800196d 	.word	0x0800196d
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001954:	f000 f812 	bl	800197c <FreqMenu_DrawMainMenu>
			break;
 8001958:	e00c      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 800195a:	f000 f859 	bl	8001a10 <FreqMenu_DrawPresetMenu>
			break;
 800195e:	e009      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001960:	f001 fb06 	bl	8002f70 <FreqMenu_DrawAdjustMenu>
			break;
 8001964:	e006      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001966:	f001 fb19 	bl	8002f9c <FreqMenu_DrawSweepMenu>
			break;
 800196a:	e003      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESCALER_MENU:
			FreqMenu_DrawPrescalerMenu();
 800196c:	f001 fd48 	bl	8003400 <FreqMenu_DrawPrescalerMenu>
			break;
 8001970:	e000      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 8001972:	bf00      	nop

	}
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	220a      	movs	r2, #10
 8001990:	2105      	movs	r1, #5
 8001992:	481a      	ldr	r0, [pc, #104]	; (80019fc <FreqMenu_DrawMainMenu+0x80>)
 8001994:	f00f f92a 	bl	8010bec <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 8001998:	f7ff faae 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800199c:	f240 23fd 	movw	r3, #765	; 0x2fd
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2302      	movs	r3, #2
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	22d2      	movs	r2, #210	; 0xd2
 80019aa:	2105      	movs	r1, #5
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <FreqMenu_DrawMainMenu+0x84>)
 80019ae:	f00f f91d 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80019b2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2302      	movs	r3, #2
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	22d2      	movs	r2, #210	; 0xd2
 80019c0:	2161      	movs	r1, #97	; 0x61
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <FreqMenu_DrawMainMenu+0x88>)
 80019c4:	f00f f912 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80019c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	22d2      	movs	r2, #210	; 0xd2
 80019d6:	21ac      	movs	r1, #172	; 0xac
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <FreqMenu_DrawMainMenu+0x8c>)
 80019da:	f00f f907 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80019de:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2300      	movs	r3, #0
 80019ea:	22d2      	movs	r2, #210	; 0xd2
 80019ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <FreqMenu_DrawMainMenu+0x90>)
 80019f2:	f00f f8fb 	bl	8010bec <ILI9341_Draw_Text>
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	08015c68 	.word	0x08015c68
 8001a00:	08015c74 	.word	0x08015c74
 8001a04:	08015c7c 	.word	0x08015c7c
 8001a08:	08015c84 	.word	0x08015c84
 8001a0c:	08015c8c 	.word	0x08015c8c

08001a10 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af02      	add	r7, sp, #8



	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2300      	movs	r3, #0
 8001a22:	220a      	movs	r2, #10
 8001a24:	2105      	movs	r1, #5
 8001a26:	4887      	ldr	r0, [pc, #540]	; (8001c44 <FreqMenu_DrawPresetMenu+0x234>)
 8001a28:	f00f f8e0 	bl	8010bec <ILI9341_Draw_Text>

	DM_DisplayInputTriggerStatus();
 8001a2c:	f7ff fa84 	bl	8000f38 <DM_DisplayInputTriggerStatus>

	uint8_t menu_pos_y1 = 40;
 8001a30:	2328      	movs	r3, #40	; 0x28
 8001a32:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001a34:	233c      	movs	r3, #60	; 0x3c
 8001a36:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001a38:	2350      	movs	r3, #80	; 0x50
 8001a3a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001a3c:	2364      	movs	r3, #100	; 0x64
 8001a3e:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001a40:	2378      	movs	r3, #120	; 0x78
 8001a42:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001a44:	238c      	movs	r3, #140	; 0x8c
 8001a46:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001a48:	23a0      	movs	r3, #160	; 0xa0
 8001a4a:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001a4c:	f004 f910 	bl	8005c70 <FreqO_GetFPresetObject>
 8001a50:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f001 825d 	beq.w	8002f14 <FreqMenu_DrawPresetMenu+0x1504>
	{
		switch(pFreqPresetTmp->hertz)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a62:	4293      	cmp	r3, r2
 8001a64:	f000 849a 	beq.w	800239c <FreqMenu_DrawPresetMenu+0x98c>
 8001a68:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d817      	bhi.n	8001aa0 <FreqMenu_DrawPresetMenu+0x90>
 8001a70:	2b32      	cmp	r3, #50	; 0x32
 8001a72:	f000 81b3 	beq.w	8001ddc <FreqMenu_DrawPresetMenu+0x3cc>
 8001a76:	2b32      	cmp	r3, #50	; 0x32
 8001a78:	d806      	bhi.n	8001a88 <FreqMenu_DrawPresetMenu+0x78>
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d038      	beq.n	8001af0 <FreqMenu_DrawPresetMenu+0xe0>
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	f000 8102 	beq.w	8001c88 <FreqMenu_DrawPresetMenu+0x278>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001a84:	f001 ba52 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001a88:	2bfa      	cmp	r3, #250	; 0xfa
 8001a8a:	f000 8317 	beq.w	80020bc <FreqMenu_DrawPresetMenu+0x6ac>
 8001a8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a92:	f000 83d9 	beq.w	8002248 <FreqMenu_DrawPresetMenu+0x838>
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	f000 8266 	beq.w	8001f68 <FreqMenu_DrawPresetMenu+0x558>
}
 8001a9c:	f001 ba46 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001aa0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	f000 8758 	beq.w	800295a <FreqMenu_DrawPresetMenu+0xf4a>
 8001aaa:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d80f      	bhi.n	8001ad2 <FreqMenu_DrawPresetMenu+0xc2>
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	f000 85e0 	beq.w	800267c <FreqMenu_DrawPresetMenu+0xc6c>
 8001abc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	f000 86a1 	beq.w	8002808 <FreqMenu_DrawPresetMenu+0xdf8>
 8001ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aca:	f000 852d 	beq.w	8002528 <FreqMenu_DrawPresetMenu+0xb18>
}
 8001ace:	f001 ba2d 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001ad2:	4a5d      	ldr	r2, [pc, #372]	; (8001c48 <FreqMenu_DrawPresetMenu+0x238>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f001 80ae 	beq.w	8002c36 <FreqMenu_DrawPresetMenu+0x1226>
 8001ada:	4a5c      	ldr	r2, [pc, #368]	; (8001c4c <FreqMenu_DrawPresetMenu+0x23c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	f001 816f 	beq.w	8002dc0 <FreqMenu_DrawPresetMenu+0x13b0>
 8001ae2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	f000 87fc 	beq.w	8002ae4 <FreqMenu_DrawPresetMenu+0x10d4>
}
 8001aec:	f001 ba1e 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2105      	movs	r1, #5
 8001b02:	4853      	ldr	r0, [pc, #332]	; (8001c50 <FreqMenu_DrawPresetMenu+0x240>)
 8001b04:	f00f f872 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2302      	movs	r3, #2
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b18:	2105      	movs	r1, #5
 8001b1a:	484e      	ldr	r0, [pc, #312]	; (8001c54 <FreqMenu_DrawPresetMenu+0x244>)
 8001b1c:	f00f f866 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b20:	7b7b      	ldrb	r3, [r7, #13]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2302      	movs	r3, #2
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b30:	2105      	movs	r1, #5
 8001b32:	4849      	ldr	r0, [pc, #292]	; (8001c58 <FreqMenu_DrawPresetMenu+0x248>)
 8001b34:	f00f f85a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2302      	movs	r3, #2
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	4844      	ldr	r0, [pc, #272]	; (8001c5c <FreqMenu_DrawPresetMenu+0x24c>)
 8001b4c:	f00f f84e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b60:	2105      	movs	r1, #5
 8001b62:	483f      	ldr	r0, [pc, #252]	; (8001c60 <FreqMenu_DrawPresetMenu+0x250>)
 8001b64:	f00f f842 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b68:	7abb      	ldrb	r3, [r7, #10]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2302      	movs	r3, #2
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b78:	2105      	movs	r1, #5
 8001b7a:	483a      	ldr	r0, [pc, #232]	; (8001c64 <FreqMenu_DrawPresetMenu+0x254>)
 8001b7c:	f00f f836 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b80:	7a7b      	ldrb	r3, [r7, #9]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	2302      	movs	r3, #2
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b90:	2105      	movs	r1, #5
 8001b92:	4835      	ldr	r0, [pc, #212]	; (8001c68 <FreqMenu_DrawPresetMenu+0x258>)
 8001b94:	f00f f82a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba8:	2178      	movs	r1, #120	; 0x78
 8001baa:	4830      	ldr	r0, [pc, #192]	; (8001c6c <FreqMenu_DrawPresetMenu+0x25c>)
 8001bac:	f00f f81e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb0:	7bbb      	ldrb	r3, [r7, #14]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc0:	2178      	movs	r1, #120	; 0x78
 8001bc2:	482b      	ldr	r0, [pc, #172]	; (8001c70 <FreqMenu_DrawPresetMenu+0x260>)
 8001bc4:	f00f f812 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bc8:	7b7b      	ldrb	r3, [r7, #13]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bd8:	2178      	movs	r1, #120	; 0x78
 8001bda:	4826      	ldr	r0, [pc, #152]	; (8001c74 <FreqMenu_DrawPresetMenu+0x264>)
 8001bdc:	f00f f806 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be0:	7b3b      	ldrb	r3, [r7, #12]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2302      	movs	r3, #2
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf0:	2178      	movs	r1, #120	; 0x78
 8001bf2:	4821      	ldr	r0, [pc, #132]	; (8001c78 <FreqMenu_DrawPresetMenu+0x268>)
 8001bf4:	f00e fffa 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2302      	movs	r3, #2
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c08:	2178      	movs	r1, #120	; 0x78
 8001c0a:	481c      	ldr	r0, [pc, #112]	; (8001c7c <FreqMenu_DrawPresetMenu+0x26c>)
 8001c0c:	f00e ffee 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c10:	7abb      	ldrb	r3, [r7, #10]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c20:	2178      	movs	r1, #120	; 0x78
 8001c22:	4817      	ldr	r0, [pc, #92]	; (8001c80 <FreqMenu_DrawPresetMenu+0x270>)
 8001c24:	f00e ffe2 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c28:	7a7b      	ldrb	r3, [r7, #9]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2302      	movs	r3, #2
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c38:	2178      	movs	r1, #120	; 0x78
 8001c3a:	4812      	ldr	r0, [pc, #72]	; (8001c84 <FreqMenu_DrawPresetMenu+0x274>)
 8001c3c:	f00e ffd6 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8001c40:	f001 b974 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8001c44:	08015c90 	.word	0x08015c90
 8001c48:	000124f8 	.word	0x000124f8
 8001c4c:	000186a0 	.word	0x000186a0
 8001c50:	08015ca4 	.word	0x08015ca4
 8001c54:	08015cac 	.word	0x08015cac
 8001c58:	08015cb4 	.word	0x08015cb4
 8001c5c:	08015cbc 	.word	0x08015cbc
 8001c60:	08015cc4 	.word	0x08015cc4
 8001c64:	08015ccc 	.word	0x08015ccc
 8001c68:	08015cd4 	.word	0x08015cd4
 8001c6c:	08015cdc 	.word	0x08015cdc
 8001c70:	08015ce4 	.word	0x08015ce4
 8001c74:	08015cec 	.word	0x08015cec
 8001c78:	08015cf4 	.word	0x08015cf4
 8001c7c:	08015cfc 	.word	0x08015cfc
 8001c80:	08015d04 	.word	0x08015d04
 8001c84:	08015d0c 	.word	0x08015d0c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	2302      	movs	r3, #2
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	48a5      	ldr	r0, [pc, #660]	; (8001f30 <FreqMenu_DrawPresetMenu+0x520>)
 8001c9c:	f00e ffa6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2302      	movs	r3, #2
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	48a0      	ldr	r0, [pc, #640]	; (8001f34 <FreqMenu_DrawPresetMenu+0x524>)
 8001cb4:	f00e ff9a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb8:	7b7b      	ldrb	r3, [r7, #13]
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc8:	2105      	movs	r1, #5
 8001cca:	489b      	ldr	r0, [pc, #620]	; (8001f38 <FreqMenu_DrawPresetMenu+0x528>)
 8001ccc:	f00e ff8e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd0:	7b3b      	ldrb	r3, [r7, #12]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4896      	ldr	r0, [pc, #600]	; (8001f3c <FreqMenu_DrawPresetMenu+0x52c>)
 8001ce4:	f00e ff82 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	4891      	ldr	r0, [pc, #580]	; (8001f40 <FreqMenu_DrawPresetMenu+0x530>)
 8001cfc:	f00e ff76 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7abb      	ldrb	r3, [r7, #10]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2105      	movs	r1, #5
 8001d12:	488c      	ldr	r0, [pc, #560]	; (8001f44 <FreqMenu_DrawPresetMenu+0x534>)
 8001d14:	f00e ff6a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7a7b      	ldrb	r3, [r7, #9]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	4887      	ldr	r0, [pc, #540]	; (8001f48 <FreqMenu_DrawPresetMenu+0x538>)
 8001d2c:	f00e ff5e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	2300      	movs	r3, #0
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d40:	2178      	movs	r1, #120	; 0x78
 8001d42:	4882      	ldr	r0, [pc, #520]	; (8001f4c <FreqMenu_DrawPresetMenu+0x53c>)
 8001d44:	f00e ff52 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d58:	2178      	movs	r1, #120	; 0x78
 8001d5a:	487d      	ldr	r0, [pc, #500]	; (8001f50 <FreqMenu_DrawPresetMenu+0x540>)
 8001d5c:	f00e ff46 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d70:	2178      	movs	r1, #120	; 0x78
 8001d72:	4878      	ldr	r0, [pc, #480]	; (8001f54 <FreqMenu_DrawPresetMenu+0x544>)
 8001d74:	f00e ff3a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d78:	7b3b      	ldrb	r3, [r7, #12]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d88:	2178      	movs	r1, #120	; 0x78
 8001d8a:	4873      	ldr	r0, [pc, #460]	; (8001f58 <FreqMenu_DrawPresetMenu+0x548>)
 8001d8c:	f00e ff2e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	486e      	ldr	r0, [pc, #440]	; (8001f5c <FreqMenu_DrawPresetMenu+0x54c>)
 8001da4:	f00e ff22 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da8:	7abb      	ldrb	r3, [r7, #10]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	4869      	ldr	r0, [pc, #420]	; (8001f60 <FreqMenu_DrawPresetMenu+0x550>)
 8001dbc:	f00e ff16 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc0:	7a7b      	ldrb	r3, [r7, #9]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd0:	2178      	movs	r1, #120	; 0x78
 8001dd2:	4864      	ldr	r0, [pc, #400]	; (8001f64 <FreqMenu_DrawPresetMenu+0x554>)
 8001dd4:	f00e ff0a 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8001dd8:	f001 b8a8 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2302      	movs	r3, #2
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dec:	2105      	movs	r1, #5
 8001dee:	4850      	ldr	r0, [pc, #320]	; (8001f30 <FreqMenu_DrawPresetMenu+0x520>)
 8001df0:	f00e fefc 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e04:	2105      	movs	r1, #5
 8001e06:	484b      	ldr	r0, [pc, #300]	; (8001f34 <FreqMenu_DrawPresetMenu+0x524>)
 8001e08:	f00e fef0 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	2302      	movs	r3, #2
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	4846      	ldr	r0, [pc, #280]	; (8001f38 <FreqMenu_DrawPresetMenu+0x528>)
 8001e20:	f00e fee4 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e24:	7b3b      	ldrb	r3, [r7, #12]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e34:	2105      	movs	r1, #5
 8001e36:	4841      	ldr	r0, [pc, #260]	; (8001f3c <FreqMenu_DrawPresetMenu+0x52c>)
 8001e38:	f00e fed8 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2302      	movs	r3, #2
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	483c      	ldr	r0, [pc, #240]	; (8001f40 <FreqMenu_DrawPresetMenu+0x530>)
 8001e50:	f00e fecc 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e54:	7abb      	ldrb	r3, [r7, #10]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e64:	2105      	movs	r1, #5
 8001e66:	4837      	ldr	r0, [pc, #220]	; (8001f44 <FreqMenu_DrawPresetMenu+0x534>)
 8001e68:	f00e fec0 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e6c:	7a7b      	ldrb	r3, [r7, #9]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	2302      	movs	r3, #2
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	4832      	ldr	r0, [pc, #200]	; (8001f48 <FreqMenu_DrawPresetMenu+0x538>)
 8001e80:	f00e feb4 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e94:	2178      	movs	r1, #120	; 0x78
 8001e96:	482d      	ldr	r0, [pc, #180]	; (8001f4c <FreqMenu_DrawPresetMenu+0x53c>)
 8001e98:	f00e fea8 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eac:	2178      	movs	r1, #120	; 0x78
 8001eae:	4828      	ldr	r0, [pc, #160]	; (8001f50 <FreqMenu_DrawPresetMenu+0x540>)
 8001eb0:	f00e fe9c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec4:	2178      	movs	r1, #120	; 0x78
 8001ec6:	4823      	ldr	r0, [pc, #140]	; (8001f54 <FreqMenu_DrawPresetMenu+0x544>)
 8001ec8:	f00e fe90 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ecc:	7b3b      	ldrb	r3, [r7, #12]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001edc:	2178      	movs	r1, #120	; 0x78
 8001ede:	481e      	ldr	r0, [pc, #120]	; (8001f58 <FreqMenu_DrawPresetMenu+0x548>)
 8001ee0:	f00e fe84 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2302      	movs	r3, #2
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef4:	2178      	movs	r1, #120	; 0x78
 8001ef6:	4819      	ldr	r0, [pc, #100]	; (8001f5c <FreqMenu_DrawPresetMenu+0x54c>)
 8001ef8:	f00e fe78 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001efc:	7abb      	ldrb	r3, [r7, #10]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2302      	movs	r3, #2
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f0c:	2178      	movs	r1, #120	; 0x78
 8001f0e:	4814      	ldr	r0, [pc, #80]	; (8001f60 <FreqMenu_DrawPresetMenu+0x550>)
 8001f10:	f00e fe6c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f14:	7a7b      	ldrb	r3, [r7, #9]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f24:	2178      	movs	r1, #120	; 0x78
 8001f26:	480f      	ldr	r0, [pc, #60]	; (8001f64 <FreqMenu_DrawPresetMenu+0x554>)
 8001f28:	f00e fe60 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8001f2c:	f000 bffe 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8001f30:	08015ca4 	.word	0x08015ca4
 8001f34:	08015cac 	.word	0x08015cac
 8001f38:	08015cb4 	.word	0x08015cb4
 8001f3c:	08015cbc 	.word	0x08015cbc
 8001f40:	08015cc4 	.word	0x08015cc4
 8001f44:	08015ccc 	.word	0x08015ccc
 8001f48:	08015cd4 	.word	0x08015cd4
 8001f4c:	08015cdc 	.word	0x08015cdc
 8001f50:	08015ce4 	.word	0x08015ce4
 8001f54:	08015cec 	.word	0x08015cec
 8001f58:	08015cf4 	.word	0x08015cf4
 8001f5c:	08015cfc 	.word	0x08015cfc
 8001f60:	08015d04 	.word	0x08015d04
 8001f64:	08015d0c 	.word	0x08015d0c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	2302      	movs	r3, #2
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f78:	2105      	movs	r1, #5
 8001f7a:	48a5      	ldr	r0, [pc, #660]	; (8002210 <FreqMenu_DrawPresetMenu+0x800>)
 8001f7c:	f00e fe36 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f80:	7bbb      	ldrb	r3, [r7, #14]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	2302      	movs	r3, #2
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f90:	2105      	movs	r1, #5
 8001f92:	48a0      	ldr	r0, [pc, #640]	; (8002214 <FreqMenu_DrawPresetMenu+0x804>)
 8001f94:	f00e fe2a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f98:	7b7b      	ldrb	r3, [r7, #13]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa8:	2105      	movs	r1, #5
 8001faa:	489b      	ldr	r0, [pc, #620]	; (8002218 <FreqMenu_DrawPresetMenu+0x808>)
 8001fac:	f00e fe1e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	2302      	movs	r3, #2
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	4896      	ldr	r0, [pc, #600]	; (800221c <FreqMenu_DrawPresetMenu+0x80c>)
 8001fc4:	f00e fe12 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc8:	7afb      	ldrb	r3, [r7, #11]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	4891      	ldr	r0, [pc, #580]	; (8002220 <FreqMenu_DrawPresetMenu+0x810>)
 8001fdc:	f00e fe06 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7abb      	ldrb	r3, [r7, #10]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	488c      	ldr	r0, [pc, #560]	; (8002224 <FreqMenu_DrawPresetMenu+0x814>)
 8001ff4:	f00e fdfa 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7a7b      	ldrb	r3, [r7, #9]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2105      	movs	r1, #5
 800200a:	4887      	ldr	r0, [pc, #540]	; (8002228 <FreqMenu_DrawPresetMenu+0x818>)
 800200c:	f00e fdee 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2178      	movs	r1, #120	; 0x78
 8002022:	4882      	ldr	r0, [pc, #520]	; (800222c <FreqMenu_DrawPresetMenu+0x81c>)
 8002024:	f00e fde2 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2302      	movs	r3, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002038:	2178      	movs	r1, #120	; 0x78
 800203a:	487d      	ldr	r0, [pc, #500]	; (8002230 <FreqMenu_DrawPresetMenu+0x820>)
 800203c:	f00e fdd6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002040:	7b7b      	ldrb	r3, [r7, #13]
 8002042:	b29a      	uxth	r2, r3
 8002044:	2300      	movs	r3, #0
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	2302      	movs	r3, #2
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002050:	2178      	movs	r1, #120	; 0x78
 8002052:	4878      	ldr	r0, [pc, #480]	; (8002234 <FreqMenu_DrawPresetMenu+0x824>)
 8002054:	f00e fdca 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002058:	7b3b      	ldrb	r3, [r7, #12]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002068:	2178      	movs	r1, #120	; 0x78
 800206a:	4873      	ldr	r0, [pc, #460]	; (8002238 <FreqMenu_DrawPresetMenu+0x828>)
 800206c:	f00e fdbe 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2302      	movs	r3, #2
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002080:	2178      	movs	r1, #120	; 0x78
 8002082:	486e      	ldr	r0, [pc, #440]	; (800223c <FreqMenu_DrawPresetMenu+0x82c>)
 8002084:	f00e fdb2 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002088:	7abb      	ldrb	r3, [r7, #10]
 800208a:	b29a      	uxth	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2302      	movs	r3, #2
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002098:	2178      	movs	r1, #120	; 0x78
 800209a:	4869      	ldr	r0, [pc, #420]	; (8002240 <FreqMenu_DrawPresetMenu+0x830>)
 800209c:	f00e fda6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a0:	7a7b      	ldrb	r3, [r7, #9]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2302      	movs	r3, #2
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b0:	2178      	movs	r1, #120	; 0x78
 80020b2:	4864      	ldr	r0, [pc, #400]	; (8002244 <FreqMenu_DrawPresetMenu+0x834>)
 80020b4:	f00e fd9a 	bl	8010bec <ILI9341_Draw_Text>
				break;
 80020b8:	f000 bf38 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	2300      	movs	r3, #0
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	2302      	movs	r3, #2
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020cc:	2105      	movs	r1, #5
 80020ce:	4850      	ldr	r0, [pc, #320]	; (8002210 <FreqMenu_DrawPresetMenu+0x800>)
 80020d0:	f00e fd8c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	2302      	movs	r3, #2
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e4:	2105      	movs	r1, #5
 80020e6:	484b      	ldr	r0, [pc, #300]	; (8002214 <FreqMenu_DrawPresetMenu+0x804>)
 80020e8:	f00e fd80 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ec:	7b7b      	ldrb	r3, [r7, #13]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2302      	movs	r3, #2
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020fc:	2105      	movs	r1, #5
 80020fe:	4846      	ldr	r0, [pc, #280]	; (8002218 <FreqMenu_DrawPresetMenu+0x808>)
 8002100:	f00e fd74 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002104:	7b3b      	ldrb	r3, [r7, #12]
 8002106:	b29a      	uxth	r2, r3
 8002108:	2300      	movs	r3, #0
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	2302      	movs	r3, #2
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002114:	2105      	movs	r1, #5
 8002116:	4841      	ldr	r0, [pc, #260]	; (800221c <FreqMenu_DrawPresetMenu+0x80c>)
 8002118:	f00e fd68 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	b29a      	uxth	r2, r3
 8002120:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2302      	movs	r3, #2
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	2105      	movs	r1, #5
 800212e:	483c      	ldr	r0, [pc, #240]	; (8002220 <FreqMenu_DrawPresetMenu+0x810>)
 8002130:	f00e fd5c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002134:	7abb      	ldrb	r3, [r7, #10]
 8002136:	b29a      	uxth	r2, r3
 8002138:	2300      	movs	r3, #0
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2302      	movs	r3, #2
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002144:	2105      	movs	r1, #5
 8002146:	4837      	ldr	r0, [pc, #220]	; (8002224 <FreqMenu_DrawPresetMenu+0x814>)
 8002148:	f00e fd50 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800214c:	7a7b      	ldrb	r3, [r7, #9]
 800214e:	b29a      	uxth	r2, r3
 8002150:	2300      	movs	r3, #0
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	2302      	movs	r3, #2
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800215c:	2105      	movs	r1, #5
 800215e:	4832      	ldr	r0, [pc, #200]	; (8002228 <FreqMenu_DrawPresetMenu+0x818>)
 8002160:	f00e fd44 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	b29a      	uxth	r2, r3
 8002168:	2300      	movs	r3, #0
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	2302      	movs	r3, #2
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002174:	2178      	movs	r1, #120	; 0x78
 8002176:	482d      	ldr	r0, [pc, #180]	; (800222c <FreqMenu_DrawPresetMenu+0x81c>)
 8002178:	f00e fd38 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	b29a      	uxth	r2, r3
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2302      	movs	r3, #2
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800218c:	2178      	movs	r1, #120	; 0x78
 800218e:	4828      	ldr	r0, [pc, #160]	; (8002230 <FreqMenu_DrawPresetMenu+0x820>)
 8002190:	f00e fd2c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002194:	7b7b      	ldrb	r3, [r7, #13]
 8002196:	b29a      	uxth	r2, r3
 8002198:	2300      	movs	r3, #0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2302      	movs	r3, #2
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a4:	2178      	movs	r1, #120	; 0x78
 80021a6:	4823      	ldr	r0, [pc, #140]	; (8002234 <FreqMenu_DrawPresetMenu+0x824>)
 80021a8:	f00e fd20 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021ac:	7b3b      	ldrb	r3, [r7, #12]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2302      	movs	r3, #2
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021bc:	2178      	movs	r1, #120	; 0x78
 80021be:	481e      	ldr	r0, [pc, #120]	; (8002238 <FreqMenu_DrawPresetMenu+0x828>)
 80021c0:	f00e fd14 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	2300      	movs	r3, #0
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d4:	2178      	movs	r1, #120	; 0x78
 80021d6:	4819      	ldr	r0, [pc, #100]	; (800223c <FreqMenu_DrawPresetMenu+0x82c>)
 80021d8:	f00e fd08 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021dc:	7abb      	ldrb	r3, [r7, #10]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2302      	movs	r3, #2
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ec:	2178      	movs	r1, #120	; 0x78
 80021ee:	4814      	ldr	r0, [pc, #80]	; (8002240 <FreqMenu_DrawPresetMenu+0x830>)
 80021f0:	f00e fcfc 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f4:	7a7b      	ldrb	r3, [r7, #9]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	2302      	movs	r3, #2
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002204:	2178      	movs	r1, #120	; 0x78
 8002206:	480f      	ldr	r0, [pc, #60]	; (8002244 <FreqMenu_DrawPresetMenu+0x834>)
 8002208:	f00e fcf0 	bl	8010bec <ILI9341_Draw_Text>
				break;
 800220c:	f000 be8e 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002210:	08015ca4 	.word	0x08015ca4
 8002214:	08015cac 	.word	0x08015cac
 8002218:	08015cb4 	.word	0x08015cb4
 800221c:	08015cbc 	.word	0x08015cbc
 8002220:	08015cc4 	.word	0x08015cc4
 8002224:	08015ccc 	.word	0x08015ccc
 8002228:	08015cd4 	.word	0x08015cd4
 800222c:	08015cdc 	.word	0x08015cdc
 8002230:	08015ce4 	.word	0x08015ce4
 8002234:	08015cec 	.word	0x08015cec
 8002238:	08015cf4 	.word	0x08015cf4
 800223c:	08015cfc 	.word	0x08015cfc
 8002240:	08015d04 	.word	0x08015d04
 8002244:	08015d0c 	.word	0x08015d0c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	b29a      	uxth	r2, r3
 800224c:	2300      	movs	r3, #0
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2302      	movs	r3, #2
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002258:	2105      	movs	r1, #5
 800225a:	48a5      	ldr	r0, [pc, #660]	; (80024f0 <FreqMenu_DrawPresetMenu+0xae0>)
 800225c:	f00e fcc6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002260:	7bbb      	ldrb	r3, [r7, #14]
 8002262:	b29a      	uxth	r2, r3
 8002264:	2300      	movs	r3, #0
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	2302      	movs	r3, #2
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002270:	2105      	movs	r1, #5
 8002272:	48a0      	ldr	r0, [pc, #640]	; (80024f4 <FreqMenu_DrawPresetMenu+0xae4>)
 8002274:	f00e fcba 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002278:	7b7b      	ldrb	r3, [r7, #13]
 800227a:	b29a      	uxth	r2, r3
 800227c:	2300      	movs	r3, #0
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	2302      	movs	r3, #2
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002288:	2105      	movs	r1, #5
 800228a:	489b      	ldr	r0, [pc, #620]	; (80024f8 <FreqMenu_DrawPresetMenu+0xae8>)
 800228c:	f00e fcae 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002290:	7b3b      	ldrb	r3, [r7, #12]
 8002292:	b29a      	uxth	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2302      	movs	r3, #2
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a0:	2105      	movs	r1, #5
 80022a2:	4896      	ldr	r0, [pc, #600]	; (80024fc <FreqMenu_DrawPresetMenu+0xaec>)
 80022a4:	f00e fca2 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b8:	2105      	movs	r1, #5
 80022ba:	4891      	ldr	r0, [pc, #580]	; (8002500 <FreqMenu_DrawPresetMenu+0xaf0>)
 80022bc:	f00e fc96 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022c0:	7abb      	ldrb	r3, [r7, #10]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2302      	movs	r3, #2
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2105      	movs	r1, #5
 80022d2:	488c      	ldr	r0, [pc, #560]	; (8002504 <FreqMenu_DrawPresetMenu+0xaf4>)
 80022d4:	f00e fc8a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7a7b      	ldrb	r3, [r7, #9]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2105      	movs	r1, #5
 80022ea:	4887      	ldr	r0, [pc, #540]	; (8002508 <FreqMenu_DrawPresetMenu+0xaf8>)
 80022ec:	f00e fc7e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2178      	movs	r1, #120	; 0x78
 8002302:	4882      	ldr	r0, [pc, #520]	; (800250c <FreqMenu_DrawPresetMenu+0xafc>)
 8002304:	f00e fc72 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2302      	movs	r3, #2
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002318:	2178      	movs	r1, #120	; 0x78
 800231a:	487d      	ldr	r0, [pc, #500]	; (8002510 <FreqMenu_DrawPresetMenu+0xb00>)
 800231c:	f00e fc66 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002320:	7b7b      	ldrb	r3, [r7, #13]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002330:	2178      	movs	r1, #120	; 0x78
 8002332:	4878      	ldr	r0, [pc, #480]	; (8002514 <FreqMenu_DrawPresetMenu+0xb04>)
 8002334:	f00e fc5a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002338:	7b3b      	ldrb	r3, [r7, #12]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2302      	movs	r3, #2
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002348:	2178      	movs	r1, #120	; 0x78
 800234a:	4873      	ldr	r0, [pc, #460]	; (8002518 <FreqMenu_DrawPresetMenu+0xb08>)
 800234c:	f00e fc4e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	b29a      	uxth	r2, r3
 8002354:	2300      	movs	r3, #0
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	2302      	movs	r3, #2
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002360:	2178      	movs	r1, #120	; 0x78
 8002362:	486e      	ldr	r0, [pc, #440]	; (800251c <FreqMenu_DrawPresetMenu+0xb0c>)
 8002364:	f00e fc42 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002368:	7abb      	ldrb	r3, [r7, #10]
 800236a:	b29a      	uxth	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002378:	2178      	movs	r1, #120	; 0x78
 800237a:	4869      	ldr	r0, [pc, #420]	; (8002520 <FreqMenu_DrawPresetMenu+0xb10>)
 800237c:	f00e fc36 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002380:	7a7b      	ldrb	r3, [r7, #9]
 8002382:	b29a      	uxth	r2, r3
 8002384:	2300      	movs	r3, #0
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	2302      	movs	r3, #2
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002390:	2178      	movs	r1, #120	; 0x78
 8002392:	4864      	ldr	r0, [pc, #400]	; (8002524 <FreqMenu_DrawPresetMenu+0xb14>)
 8002394:	f00e fc2a 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8002398:	f000 bdc8 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	2300      	movs	r3, #0
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	2302      	movs	r3, #2
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023ac:	2105      	movs	r1, #5
 80023ae:	4850      	ldr	r0, [pc, #320]	; (80024f0 <FreqMenu_DrawPresetMenu+0xae0>)
 80023b0:	f00e fc1c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	2302      	movs	r3, #2
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c4:	2105      	movs	r1, #5
 80023c6:	484b      	ldr	r0, [pc, #300]	; (80024f4 <FreqMenu_DrawPresetMenu+0xae4>)
 80023c8:	f00e fc10 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023cc:	7b7b      	ldrb	r3, [r7, #13]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	2300      	movs	r3, #0
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	2302      	movs	r3, #2
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023dc:	2105      	movs	r1, #5
 80023de:	4846      	ldr	r0, [pc, #280]	; (80024f8 <FreqMenu_DrawPresetMenu+0xae8>)
 80023e0:	f00e fc04 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e4:	7b3b      	ldrb	r3, [r7, #12]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	2300      	movs	r3, #0
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2302      	movs	r3, #2
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f4:	2105      	movs	r1, #5
 80023f6:	4841      	ldr	r0, [pc, #260]	; (80024fc <FreqMenu_DrawPresetMenu+0xaec>)
 80023f8:	f00e fbf8 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	2300      	movs	r3, #0
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2302      	movs	r3, #2
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800240c:	2105      	movs	r1, #5
 800240e:	483c      	ldr	r0, [pc, #240]	; (8002500 <FreqMenu_DrawPresetMenu+0xaf0>)
 8002410:	f00e fbec 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002414:	7abb      	ldrb	r3, [r7, #10]
 8002416:	b29a      	uxth	r2, r3
 8002418:	2300      	movs	r3, #0
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2302      	movs	r3, #2
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002424:	2105      	movs	r1, #5
 8002426:	4837      	ldr	r0, [pc, #220]	; (8002504 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002428:	f00e fbe0 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800242c:	7a7b      	ldrb	r3, [r7, #9]
 800242e:	b29a      	uxth	r2, r3
 8002430:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	2302      	movs	r3, #2
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2300      	movs	r3, #0
 800243c:	2105      	movs	r1, #5
 800243e:	4832      	ldr	r0, [pc, #200]	; (8002508 <FreqMenu_DrawPresetMenu+0xaf8>)
 8002440:	f00e fbd4 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	b29a      	uxth	r2, r3
 8002448:	2300      	movs	r3, #0
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2302      	movs	r3, #2
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002454:	2178      	movs	r1, #120	; 0x78
 8002456:	482d      	ldr	r0, [pc, #180]	; (800250c <FreqMenu_DrawPresetMenu+0xafc>)
 8002458:	f00e fbc8 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	b29a      	uxth	r2, r3
 8002460:	2300      	movs	r3, #0
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	2302      	movs	r3, #2
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800246c:	2178      	movs	r1, #120	; 0x78
 800246e:	4828      	ldr	r0, [pc, #160]	; (8002510 <FreqMenu_DrawPresetMenu+0xb00>)
 8002470:	f00e fbbc 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	b29a      	uxth	r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	2302      	movs	r3, #2
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002484:	2178      	movs	r1, #120	; 0x78
 8002486:	4823      	ldr	r0, [pc, #140]	; (8002514 <FreqMenu_DrawPresetMenu+0xb04>)
 8002488:	f00e fbb0 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800248c:	7b3b      	ldrb	r3, [r7, #12]
 800248e:	b29a      	uxth	r2, r3
 8002490:	2300      	movs	r3, #0
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	2302      	movs	r3, #2
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800249c:	2178      	movs	r1, #120	; 0x78
 800249e:	481e      	ldr	r0, [pc, #120]	; (8002518 <FreqMenu_DrawPresetMenu+0xb08>)
 80024a0:	f00e fba4 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	2302      	movs	r3, #2
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b4:	2178      	movs	r1, #120	; 0x78
 80024b6:	4819      	ldr	r0, [pc, #100]	; (800251c <FreqMenu_DrawPresetMenu+0xb0c>)
 80024b8:	f00e fb98 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024bc:	7abb      	ldrb	r3, [r7, #10]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2302      	movs	r3, #2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024cc:	2178      	movs	r1, #120	; 0x78
 80024ce:	4814      	ldr	r0, [pc, #80]	; (8002520 <FreqMenu_DrawPresetMenu+0xb10>)
 80024d0:	f00e fb8c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d4:	7a7b      	ldrb	r3, [r7, #9]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2302      	movs	r3, #2
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e4:	2178      	movs	r1, #120	; 0x78
 80024e6:	480f      	ldr	r0, [pc, #60]	; (8002524 <FreqMenu_DrawPresetMenu+0xb14>)
 80024e8:	f00e fb80 	bl	8010bec <ILI9341_Draw_Text>
				break;
 80024ec:	f000 bd1e 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 80024f0:	08015ca4 	.word	0x08015ca4
 80024f4:	08015cac 	.word	0x08015cac
 80024f8:	08015cb4 	.word	0x08015cb4
 80024fc:	08015cbc 	.word	0x08015cbc
 8002500:	08015cc4 	.word	0x08015cc4
 8002504:	08015ccc 	.word	0x08015ccc
 8002508:	08015cd4 	.word	0x08015cd4
 800250c:	08015cdc 	.word	0x08015cdc
 8002510:	08015ce4 	.word	0x08015ce4
 8002514:	08015cec 	.word	0x08015cec
 8002518:	08015cf4 	.word	0x08015cf4
 800251c:	08015cfc 	.word	0x08015cfc
 8002520:	08015d04 	.word	0x08015d04
 8002524:	08015d0c 	.word	0x08015d0c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	b29a      	uxth	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002538:	2105      	movs	r1, #5
 800253a:	48a5      	ldr	r0, [pc, #660]	; (80027d0 <FreqMenu_DrawPresetMenu+0xdc0>)
 800253c:	f00e fb56 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002540:	7bbb      	ldrb	r3, [r7, #14]
 8002542:	b29a      	uxth	r2, r3
 8002544:	2300      	movs	r3, #0
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002550:	2105      	movs	r1, #5
 8002552:	48a0      	ldr	r0, [pc, #640]	; (80027d4 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002554:	f00e fb4a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002558:	7b7b      	ldrb	r3, [r7, #13]
 800255a:	b29a      	uxth	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002568:	2105      	movs	r1, #5
 800256a:	489b      	ldr	r0, [pc, #620]	; (80027d8 <FreqMenu_DrawPresetMenu+0xdc8>)
 800256c:	f00e fb3e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002570:	7b3b      	ldrb	r3, [r7, #12]
 8002572:	b29a      	uxth	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002580:	2105      	movs	r1, #5
 8002582:	4896      	ldr	r0, [pc, #600]	; (80027dc <FreqMenu_DrawPresetMenu+0xdcc>)
 8002584:	f00e fb32 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	b29a      	uxth	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002598:	2105      	movs	r1, #5
 800259a:	4891      	ldr	r0, [pc, #580]	; (80027e0 <FreqMenu_DrawPresetMenu+0xdd0>)
 800259c:	f00e fb26 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a0:	7abb      	ldrb	r3, [r7, #10]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2302      	movs	r3, #2
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b0:	2105      	movs	r1, #5
 80025b2:	488c      	ldr	r0, [pc, #560]	; (80027e4 <FreqMenu_DrawPresetMenu+0xdd4>)
 80025b4:	f00e fb1a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b8:	7a7b      	ldrb	r3, [r7, #9]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	2300      	movs	r3, #0
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2302      	movs	r3, #2
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c8:	2105      	movs	r1, #5
 80025ca:	4887      	ldr	r0, [pc, #540]	; (80027e8 <FreqMenu_DrawPresetMenu+0xdd8>)
 80025cc:	f00e fb0e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2302      	movs	r3, #2
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	2178      	movs	r1, #120	; 0x78
 80025e2:	4882      	ldr	r0, [pc, #520]	; (80027ec <FreqMenu_DrawPresetMenu+0xddc>)
 80025e4:	f00e fb02 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	2300      	movs	r3, #0
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	2302      	movs	r3, #2
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f8:	2178      	movs	r1, #120	; 0x78
 80025fa:	487d      	ldr	r0, [pc, #500]	; (80027f0 <FreqMenu_DrawPresetMenu+0xde0>)
 80025fc:	f00e faf6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002600:	7b7b      	ldrb	r3, [r7, #13]
 8002602:	b29a      	uxth	r2, r3
 8002604:	2300      	movs	r3, #0
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	2302      	movs	r3, #2
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002610:	2178      	movs	r1, #120	; 0x78
 8002612:	4878      	ldr	r0, [pc, #480]	; (80027f4 <FreqMenu_DrawPresetMenu+0xde4>)
 8002614:	f00e faea 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002618:	7b3b      	ldrb	r3, [r7, #12]
 800261a:	b29a      	uxth	r2, r3
 800261c:	2300      	movs	r3, #0
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	2302      	movs	r3, #2
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002628:	2178      	movs	r1, #120	; 0x78
 800262a:	4873      	ldr	r0, [pc, #460]	; (80027f8 <FreqMenu_DrawPresetMenu+0xde8>)
 800262c:	f00e fade 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002630:	7afb      	ldrb	r3, [r7, #11]
 8002632:	b29a      	uxth	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	2302      	movs	r3, #2
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002640:	2178      	movs	r1, #120	; 0x78
 8002642:	486e      	ldr	r0, [pc, #440]	; (80027fc <FreqMenu_DrawPresetMenu+0xdec>)
 8002644:	f00e fad2 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002648:	7abb      	ldrb	r3, [r7, #10]
 800264a:	b29a      	uxth	r2, r3
 800264c:	2300      	movs	r3, #0
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2302      	movs	r3, #2
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002658:	2178      	movs	r1, #120	; 0x78
 800265a:	4869      	ldr	r0, [pc, #420]	; (8002800 <FreqMenu_DrawPresetMenu+0xdf0>)
 800265c:	f00e fac6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002660:	7a7b      	ldrb	r3, [r7, #9]
 8002662:	b29a      	uxth	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002670:	2178      	movs	r1, #120	; 0x78
 8002672:	4864      	ldr	r0, [pc, #400]	; (8002804 <FreqMenu_DrawPresetMenu+0xdf4>)
 8002674:	f00e faba 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8002678:	f000 bc58 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	b29a      	uxth	r2, r3
 8002680:	2300      	movs	r3, #0
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2302      	movs	r3, #2
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268c:	2105      	movs	r1, #5
 800268e:	4850      	ldr	r0, [pc, #320]	; (80027d0 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002690:	f00e faac 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	b29a      	uxth	r2, r3
 8002698:	2300      	movs	r3, #0
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	2302      	movs	r3, #2
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a4:	2105      	movs	r1, #5
 80026a6:	484b      	ldr	r0, [pc, #300]	; (80027d4 <FreqMenu_DrawPresetMenu+0xdc4>)
 80026a8:	f00e faa0 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ac:	7b7b      	ldrb	r3, [r7, #13]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2302      	movs	r3, #2
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026bc:	2105      	movs	r1, #5
 80026be:	4846      	ldr	r0, [pc, #280]	; (80027d8 <FreqMenu_DrawPresetMenu+0xdc8>)
 80026c0:	f00e fa94 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c4:	7b3b      	ldrb	r3, [r7, #12]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	2300      	movs	r3, #0
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2302      	movs	r3, #2
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d4:	2105      	movs	r1, #5
 80026d6:	4841      	ldr	r0, [pc, #260]	; (80027dc <FreqMenu_DrawPresetMenu+0xdcc>)
 80026d8:	f00e fa88 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026dc:	7afb      	ldrb	r3, [r7, #11]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	2302      	movs	r3, #2
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ec:	2105      	movs	r1, #5
 80026ee:	483c      	ldr	r0, [pc, #240]	; (80027e0 <FreqMenu_DrawPresetMenu+0xdd0>)
 80026f0:	f00e fa7c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f4:	7abb      	ldrb	r3, [r7, #10]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	2302      	movs	r3, #2
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002704:	2105      	movs	r1, #5
 8002706:	4837      	ldr	r0, [pc, #220]	; (80027e4 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002708:	f00e fa70 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800270c:	7a7b      	ldrb	r3, [r7, #9]
 800270e:	b29a      	uxth	r2, r3
 8002710:	2300      	movs	r3, #0
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2302      	movs	r3, #2
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800271c:	2105      	movs	r1, #5
 800271e:	4832      	ldr	r0, [pc, #200]	; (80027e8 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002720:	f00e fa64 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	b29a      	uxth	r2, r3
 8002728:	2300      	movs	r3, #0
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2302      	movs	r3, #2
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002734:	2178      	movs	r1, #120	; 0x78
 8002736:	482d      	ldr	r0, [pc, #180]	; (80027ec <FreqMenu_DrawPresetMenu+0xddc>)
 8002738:	f00e fa58 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800273c:	7bbb      	ldrb	r3, [r7, #14]
 800273e:	b29a      	uxth	r2, r3
 8002740:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2302      	movs	r3, #2
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2300      	movs	r3, #0
 800274c:	2178      	movs	r1, #120	; 0x78
 800274e:	4828      	ldr	r0, [pc, #160]	; (80027f0 <FreqMenu_DrawPresetMenu+0xde0>)
 8002750:	f00e fa4c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002754:	7b7b      	ldrb	r3, [r7, #13]
 8002756:	b29a      	uxth	r2, r3
 8002758:	2300      	movs	r3, #0
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2302      	movs	r3, #2
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002764:	2178      	movs	r1, #120	; 0x78
 8002766:	4823      	ldr	r0, [pc, #140]	; (80027f4 <FreqMenu_DrawPresetMenu+0xde4>)
 8002768:	f00e fa40 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800276c:	7b3b      	ldrb	r3, [r7, #12]
 800276e:	b29a      	uxth	r2, r3
 8002770:	2300      	movs	r3, #0
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2302      	movs	r3, #2
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800277c:	2178      	movs	r1, #120	; 0x78
 800277e:	481e      	ldr	r0, [pc, #120]	; (80027f8 <FreqMenu_DrawPresetMenu+0xde8>)
 8002780:	f00e fa34 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002784:	7afb      	ldrb	r3, [r7, #11]
 8002786:	b29a      	uxth	r2, r3
 8002788:	2300      	movs	r3, #0
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2302      	movs	r3, #2
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002794:	2178      	movs	r1, #120	; 0x78
 8002796:	4819      	ldr	r0, [pc, #100]	; (80027fc <FreqMenu_DrawPresetMenu+0xdec>)
 8002798:	f00e fa28 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800279c:	7abb      	ldrb	r3, [r7, #10]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	2302      	movs	r3, #2
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ac:	2178      	movs	r1, #120	; 0x78
 80027ae:	4814      	ldr	r0, [pc, #80]	; (8002800 <FreqMenu_DrawPresetMenu+0xdf0>)
 80027b0:	f00e fa1c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b4:	7a7b      	ldrb	r3, [r7, #9]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	2300      	movs	r3, #0
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	2302      	movs	r3, #2
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c4:	2178      	movs	r1, #120	; 0x78
 80027c6:	480f      	ldr	r0, [pc, #60]	; (8002804 <FreqMenu_DrawPresetMenu+0xdf4>)
 80027c8:	f00e fa10 	bl	8010bec <ILI9341_Draw_Text>
				break;
 80027cc:	e3ae      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 80027ce:	bf00      	nop
 80027d0:	08015ca4 	.word	0x08015ca4
 80027d4:	08015cac 	.word	0x08015cac
 80027d8:	08015cb4 	.word	0x08015cb4
 80027dc:	08015cbc 	.word	0x08015cbc
 80027e0:	08015cc4 	.word	0x08015cc4
 80027e4:	08015ccc 	.word	0x08015ccc
 80027e8:	08015cd4 	.word	0x08015cd4
 80027ec:	08015cdc 	.word	0x08015cdc
 80027f0:	08015ce4 	.word	0x08015ce4
 80027f4:	08015cec 	.word	0x08015cec
 80027f8:	08015cf4 	.word	0x08015cf4
 80027fc:	08015cfc 	.word	0x08015cfc
 8002800:	08015d04 	.word	0x08015d04
 8002804:	08015d0c 	.word	0x08015d0c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	b29a      	uxth	r2, r3
 800280c:	2300      	movs	r3, #0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2302      	movs	r3, #2
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002818:	2105      	movs	r1, #5
 800281a:	48a4      	ldr	r0, [pc, #656]	; (8002aac <FreqMenu_DrawPresetMenu+0x109c>)
 800281c:	f00e f9e6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	b29a      	uxth	r2, r3
 8002824:	2300      	movs	r3, #0
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2302      	movs	r3, #2
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002830:	2105      	movs	r1, #5
 8002832:	489f      	ldr	r0, [pc, #636]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002834:	f00e f9da 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002838:	7b7b      	ldrb	r3, [r7, #13]
 800283a:	b29a      	uxth	r2, r3
 800283c:	2300      	movs	r3, #0
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2302      	movs	r3, #2
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002848:	2105      	movs	r1, #5
 800284a:	489a      	ldr	r0, [pc, #616]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x10a4>)
 800284c:	f00e f9ce 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002850:	7b3b      	ldrb	r3, [r7, #12]
 8002852:	b29a      	uxth	r2, r3
 8002854:	2300      	movs	r3, #0
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2302      	movs	r3, #2
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002860:	2105      	movs	r1, #5
 8002862:	4895      	ldr	r0, [pc, #596]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002864:	f00e f9c2 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002868:	7afb      	ldrb	r3, [r7, #11]
 800286a:	b29a      	uxth	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2302      	movs	r3, #2
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002878:	2105      	movs	r1, #5
 800287a:	4890      	ldr	r0, [pc, #576]	; (8002abc <FreqMenu_DrawPresetMenu+0x10ac>)
 800287c:	f00e f9b6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002880:	7abb      	ldrb	r3, [r7, #10]
 8002882:	b29a      	uxth	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2302      	movs	r3, #2
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002890:	2105      	movs	r1, #5
 8002892:	488b      	ldr	r0, [pc, #556]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002894:	f00e f9aa 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002898:	7a7b      	ldrb	r3, [r7, #9]
 800289a:	b29a      	uxth	r2, r3
 800289c:	2300      	movs	r3, #0
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2302      	movs	r3, #2
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a8:	2105      	movs	r1, #5
 80028aa:	4886      	ldr	r0, [pc, #536]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x10b4>)
 80028ac:	f00e f99e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2302      	movs	r3, #2
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c0:	2178      	movs	r1, #120	; 0x78
 80028c2:	4881      	ldr	r0, [pc, #516]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x10b8>)
 80028c4:	f00e f992 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c8:	7bbb      	ldrb	r3, [r7, #14]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2302      	movs	r3, #2
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d8:	2178      	movs	r1, #120	; 0x78
 80028da:	487c      	ldr	r0, [pc, #496]	; (8002acc <FreqMenu_DrawPresetMenu+0x10bc>)
 80028dc:	f00e f986 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80028e0:	7b7b      	ldrb	r3, [r7, #13]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2302      	movs	r3, #2
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	2178      	movs	r1, #120	; 0x78
 80028f2:	4877      	ldr	r0, [pc, #476]	; (8002ad0 <FreqMenu_DrawPresetMenu+0x10c0>)
 80028f4:	f00e f97a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f8:	7b3b      	ldrb	r3, [r7, #12]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	2300      	movs	r3, #0
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	2302      	movs	r3, #2
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002908:	2178      	movs	r1, #120	; 0x78
 800290a:	4872      	ldr	r0, [pc, #456]	; (8002ad4 <FreqMenu_DrawPresetMenu+0x10c4>)
 800290c:	f00e f96e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	b29a      	uxth	r2, r3
 8002914:	2300      	movs	r3, #0
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	2302      	movs	r3, #2
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002920:	2178      	movs	r1, #120	; 0x78
 8002922:	486d      	ldr	r0, [pc, #436]	; (8002ad8 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002924:	f00e f962 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002928:	7abb      	ldrb	r3, [r7, #10]
 800292a:	b29a      	uxth	r2, r3
 800292c:	2300      	movs	r3, #0
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2302      	movs	r3, #2
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002938:	2178      	movs	r1, #120	; 0x78
 800293a:	4868      	ldr	r0, [pc, #416]	; (8002adc <FreqMenu_DrawPresetMenu+0x10cc>)
 800293c:	f00e f956 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002940:	7a7b      	ldrb	r3, [r7, #9]
 8002942:	b29a      	uxth	r2, r3
 8002944:	2300      	movs	r3, #0
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	2302      	movs	r3, #2
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002950:	2178      	movs	r1, #120	; 0x78
 8002952:	4863      	ldr	r0, [pc, #396]	; (8002ae0 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002954:	f00e f94a 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8002958:	e2e8      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	b29a      	uxth	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2302      	movs	r3, #2
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800296a:	2105      	movs	r1, #5
 800296c:	484f      	ldr	r0, [pc, #316]	; (8002aac <FreqMenu_DrawPresetMenu+0x109c>)
 800296e:	f00e f93d 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002972:	7bbb      	ldrb	r3, [r7, #14]
 8002974:	b29a      	uxth	r2, r3
 8002976:	2300      	movs	r3, #0
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002982:	2105      	movs	r1, #5
 8002984:	484a      	ldr	r0, [pc, #296]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002986:	f00e f931 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800298a:	7b7b      	ldrb	r3, [r7, #13]
 800298c:	b29a      	uxth	r2, r3
 800298e:	2300      	movs	r3, #0
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2302      	movs	r3, #2
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800299a:	2105      	movs	r1, #5
 800299c:	4845      	ldr	r0, [pc, #276]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x10a4>)
 800299e:	f00e f925 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029a2:	7b3b      	ldrb	r3, [r7, #12]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2302      	movs	r3, #2
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029b2:	2105      	movs	r1, #5
 80029b4:	4840      	ldr	r0, [pc, #256]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x10a8>)
 80029b6:	f00e f919 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	2302      	movs	r3, #2
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ca:	2105      	movs	r1, #5
 80029cc:	483b      	ldr	r0, [pc, #236]	; (8002abc <FreqMenu_DrawPresetMenu+0x10ac>)
 80029ce:	f00e f90d 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d2:	7abb      	ldrb	r3, [r7, #10]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	2300      	movs	r3, #0
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2302      	movs	r3, #2
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e2:	2105      	movs	r1, #5
 80029e4:	4836      	ldr	r0, [pc, #216]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x10b0>)
 80029e6:	f00e f901 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ea:	7a7b      	ldrb	r3, [r7, #9]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	2300      	movs	r3, #0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2302      	movs	r3, #2
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fa:	2105      	movs	r1, #5
 80029fc:	4831      	ldr	r0, [pc, #196]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x10b4>)
 80029fe:	f00e f8f5 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a12:	2178      	movs	r1, #120	; 0x78
 8002a14:	482c      	ldr	r0, [pc, #176]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002a16:	f00e f8e9 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1a:	7bbb      	ldrb	r3, [r7, #14]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2302      	movs	r3, #2
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2a:	2178      	movs	r1, #120	; 0x78
 8002a2c:	4827      	ldr	r0, [pc, #156]	; (8002acc <FreqMenu_DrawPresetMenu+0x10bc>)
 8002a2e:	f00e f8dd 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a32:	7b7b      	ldrb	r3, [r7, #13]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a42:	2178      	movs	r1, #120	; 0x78
 8002a44:	4822      	ldr	r0, [pc, #136]	; (8002ad0 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002a46:	f00e f8d1 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a4a:	7b3b      	ldrb	r3, [r7, #12]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2178      	movs	r1, #120	; 0x78
 8002a5c:	481d      	ldr	r0, [pc, #116]	; (8002ad4 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002a5e:	f00e f8c5 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a62:	7afb      	ldrb	r3, [r7, #11]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	2300      	movs	r3, #0
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a72:	2178      	movs	r1, #120	; 0x78
 8002a74:	4818      	ldr	r0, [pc, #96]	; (8002ad8 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002a76:	f00e f8b9 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7a:	7abb      	ldrb	r3, [r7, #10]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2302      	movs	r3, #2
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8a:	2178      	movs	r1, #120	; 0x78
 8002a8c:	4813      	ldr	r0, [pc, #76]	; (8002adc <FreqMenu_DrawPresetMenu+0x10cc>)
 8002a8e:	f00e f8ad 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a92:	7a7b      	ldrb	r3, [r7, #9]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	2300      	movs	r3, #0
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa2:	2178      	movs	r1, #120	; 0x78
 8002aa4:	480e      	ldr	r0, [pc, #56]	; (8002ae0 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002aa6:	f00e f8a1 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8002aaa:	e23f      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002aac:	08015ca4 	.word	0x08015ca4
 8002ab0:	08015cac 	.word	0x08015cac
 8002ab4:	08015cb4 	.word	0x08015cb4
 8002ab8:	08015cbc 	.word	0x08015cbc
 8002abc:	08015cc4 	.word	0x08015cc4
 8002ac0:	08015ccc 	.word	0x08015ccc
 8002ac4:	08015cd4 	.word	0x08015cd4
 8002ac8:	08015cdc 	.word	0x08015cdc
 8002acc:	08015ce4 	.word	0x08015ce4
 8002ad0:	08015cec 	.word	0x08015cec
 8002ad4:	08015cf4 	.word	0x08015cf4
 8002ad8:	08015cfc 	.word	0x08015cfc
 8002adc:	08015d04 	.word	0x08015d04
 8002ae0:	08015d0c 	.word	0x08015d0c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002af4:	2105      	movs	r1, #5
 8002af6:	48a4      	ldr	r0, [pc, #656]	; (8002d88 <FreqMenu_DrawPresetMenu+0x1378>)
 8002af8:	f00e f878 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	2300      	movs	r3, #0
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	2302      	movs	r3, #2
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	489f      	ldr	r0, [pc, #636]	; (8002d8c <FreqMenu_DrawPresetMenu+0x137c>)
 8002b10:	f00e f86c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b14:	7b7b      	ldrb	r3, [r7, #13]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b24:	2105      	movs	r1, #5
 8002b26:	489a      	ldr	r0, [pc, #616]	; (8002d90 <FreqMenu_DrawPresetMenu+0x1380>)
 8002b28:	f00e f860 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b2c:	7b3b      	ldrb	r3, [r7, #12]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2302      	movs	r3, #2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b3c:	2105      	movs	r1, #5
 8002b3e:	4895      	ldr	r0, [pc, #596]	; (8002d94 <FreqMenu_DrawPresetMenu+0x1384>)
 8002b40:	f00e f854 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b54:	2105      	movs	r1, #5
 8002b56:	4890      	ldr	r0, [pc, #576]	; (8002d98 <FreqMenu_DrawPresetMenu+0x1388>)
 8002b58:	f00e f848 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b5c:	7abb      	ldrb	r3, [r7, #10]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	2300      	movs	r3, #0
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2302      	movs	r3, #2
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	488b      	ldr	r0, [pc, #556]	; (8002d9c <FreqMenu_DrawPresetMenu+0x138c>)
 8002b70:	f00e f83c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b74:	7a7b      	ldrb	r3, [r7, #9]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b84:	2105      	movs	r1, #5
 8002b86:	4886      	ldr	r0, [pc, #536]	; (8002da0 <FreqMenu_DrawPresetMenu+0x1390>)
 8002b88:	f00e f830 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2302      	movs	r3, #2
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b9c:	2178      	movs	r1, #120	; 0x78
 8002b9e:	4881      	ldr	r0, [pc, #516]	; (8002da4 <FreqMenu_DrawPresetMenu+0x1394>)
 8002ba0:	f00e f824 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ba4:	7bbb      	ldrb	r3, [r7, #14]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2302      	movs	r3, #2
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bb4:	2178      	movs	r1, #120	; 0x78
 8002bb6:	487c      	ldr	r0, [pc, #496]	; (8002da8 <FreqMenu_DrawPresetMenu+0x1398>)
 8002bb8:	f00e f818 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bbc:	7b7b      	ldrb	r3, [r7, #13]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bcc:	2178      	movs	r1, #120	; 0x78
 8002bce:	4877      	ldr	r0, [pc, #476]	; (8002dac <FreqMenu_DrawPresetMenu+0x139c>)
 8002bd0:	f00e f80c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	7b3b      	ldrb	r3, [r7, #12]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2178      	movs	r1, #120	; 0x78
 8002be6:	4872      	ldr	r0, [pc, #456]	; (8002db0 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002be8:	f00e f800 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2178      	movs	r1, #120	; 0x78
 8002bfe:	486d      	ldr	r0, [pc, #436]	; (8002db4 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002c00:	f00d fff4 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c04:	7abb      	ldrb	r3, [r7, #10]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c14:	2178      	movs	r1, #120	; 0x78
 8002c16:	4868      	ldr	r0, [pc, #416]	; (8002db8 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002c18:	f00d ffe8 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c1c:	7a7b      	ldrb	r3, [r7, #9]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	2300      	movs	r3, #0
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2302      	movs	r3, #2
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c2c:	2178      	movs	r1, #120	; 0x78
 8002c2e:	4863      	ldr	r0, [pc, #396]	; (8002dbc <FreqMenu_DrawPresetMenu+0x13ac>)
 8002c30:	f00d ffdc 	bl	8010bec <ILI9341_Draw_Text>
			break;
 8002c34:	e17a      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	2302      	movs	r3, #2
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c46:	2105      	movs	r1, #5
 8002c48:	484f      	ldr	r0, [pc, #316]	; (8002d88 <FreqMenu_DrawPresetMenu+0x1378>)
 8002c4a:	f00d ffcf 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	2300      	movs	r3, #0
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	2302      	movs	r3, #2
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c5e:	2105      	movs	r1, #5
 8002c60:	484a      	ldr	r0, [pc, #296]	; (8002d8c <FreqMenu_DrawPresetMenu+0x137c>)
 8002c62:	f00d ffc3 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c66:	7b7b      	ldrb	r3, [r7, #13]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2302      	movs	r3, #2
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c76:	2105      	movs	r1, #5
 8002c78:	4845      	ldr	r0, [pc, #276]	; (8002d90 <FreqMenu_DrawPresetMenu+0x1380>)
 8002c7a:	f00d ffb7 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c7e:	7b3b      	ldrb	r3, [r7, #12]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	2300      	movs	r3, #0
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	2302      	movs	r3, #2
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c8e:	2105      	movs	r1, #5
 8002c90:	4840      	ldr	r0, [pc, #256]	; (8002d94 <FreqMenu_DrawPresetMenu+0x1384>)
 8002c92:	f00d ffab 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca6:	2105      	movs	r1, #5
 8002ca8:	483b      	ldr	r0, [pc, #236]	; (8002d98 <FreqMenu_DrawPresetMenu+0x1388>)
 8002caa:	f00d ff9f 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cae:	7abb      	ldrb	r3, [r7, #10]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cbe:	2105      	movs	r1, #5
 8002cc0:	4836      	ldr	r0, [pc, #216]	; (8002d9c <FreqMenu_DrawPresetMenu+0x138c>)
 8002cc2:	f00d ff93 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cc6:	7a7b      	ldrb	r3, [r7, #9]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cd6:	2105      	movs	r1, #5
 8002cd8:	4831      	ldr	r0, [pc, #196]	; (8002da0 <FreqMenu_DrawPresetMenu+0x1390>)
 8002cda:	f00d ff87 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cee:	2178      	movs	r1, #120	; 0x78
 8002cf0:	482c      	ldr	r0, [pc, #176]	; (8002da4 <FreqMenu_DrawPresetMenu+0x1394>)
 8002cf2:	f00d ff7b 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cf6:	7bbb      	ldrb	r3, [r7, #14]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2302      	movs	r3, #2
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d06:	2178      	movs	r1, #120	; 0x78
 8002d08:	4827      	ldr	r0, [pc, #156]	; (8002da8 <FreqMenu_DrawPresetMenu+0x1398>)
 8002d0a:	f00d ff6f 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d0e:	7b7b      	ldrb	r3, [r7, #13]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	2300      	movs	r3, #0
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	2302      	movs	r3, #2
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d1e:	2178      	movs	r1, #120	; 0x78
 8002d20:	4822      	ldr	r0, [pc, #136]	; (8002dac <FreqMenu_DrawPresetMenu+0x139c>)
 8002d22:	f00d ff63 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d26:	7b3b      	ldrb	r3, [r7, #12]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d36:	2178      	movs	r1, #120	; 0x78
 8002d38:	481d      	ldr	r0, [pc, #116]	; (8002db0 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002d3a:	f00d ff57 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	2300      	movs	r3, #0
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2302      	movs	r3, #2
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d4e:	2178      	movs	r1, #120	; 0x78
 8002d50:	4818      	ldr	r0, [pc, #96]	; (8002db4 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002d52:	f00d ff4b 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d56:	7abb      	ldrb	r3, [r7, #10]
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	2302      	movs	r3, #2
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2300      	movs	r3, #0
 8002d66:	2178      	movs	r1, #120	; 0x78
 8002d68:	4813      	ldr	r0, [pc, #76]	; (8002db8 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002d6a:	f00d ff3f 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d6e:	7a7b      	ldrb	r3, [r7, #9]
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	2300      	movs	r3, #0
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	2302      	movs	r3, #2
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d7e:	2178      	movs	r1, #120	; 0x78
 8002d80:	480e      	ldr	r0, [pc, #56]	; (8002dbc <FreqMenu_DrawPresetMenu+0x13ac>)
 8002d82:	f00d ff33 	bl	8010bec <ILI9341_Draw_Text>
			break;
 8002d86:	e0d1      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002d88:	08015ca4 	.word	0x08015ca4
 8002d8c:	08015cac 	.word	0x08015cac
 8002d90:	08015cb4 	.word	0x08015cb4
 8002d94:	08015cbc 	.word	0x08015cbc
 8002d98:	08015cc4 	.word	0x08015cc4
 8002d9c:	08015ccc 	.word	0x08015ccc
 8002da0:	08015cd4 	.word	0x08015cd4
 8002da4:	08015cdc 	.word	0x08015cdc
 8002da8:	08015ce4 	.word	0x08015ce4
 8002dac:	08015cec 	.word	0x08015cec
 8002db0:	08015cf4 	.word	0x08015cf4
 8002db4:	08015cfc 	.word	0x08015cfc
 8002db8:	08015d04 	.word	0x08015d04
 8002dbc:	08015d0c 	.word	0x08015d0c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	2302      	movs	r3, #2
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dd0:	2105      	movs	r1, #5
 8002dd2:	4858      	ldr	r0, [pc, #352]	; (8002f34 <FreqMenu_DrawPresetMenu+0x1524>)
 8002dd4:	f00d ff0a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dd8:	7bbb      	ldrb	r3, [r7, #14]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	2302      	movs	r3, #2
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002de8:	2105      	movs	r1, #5
 8002dea:	4853      	ldr	r0, [pc, #332]	; (8002f38 <FreqMenu_DrawPresetMenu+0x1528>)
 8002dec:	f00d fefe 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002df0:	7b7b      	ldrb	r3, [r7, #13]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	2300      	movs	r3, #0
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	2302      	movs	r3, #2
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e00:	2105      	movs	r1, #5
 8002e02:	484e      	ldr	r0, [pc, #312]	; (8002f3c <FreqMenu_DrawPresetMenu+0x152c>)
 8002e04:	f00d fef2 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e08:	7b3b      	ldrb	r3, [r7, #12]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	2302      	movs	r3, #2
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e18:	2105      	movs	r1, #5
 8002e1a:	4849      	ldr	r0, [pc, #292]	; (8002f40 <FreqMenu_DrawPresetMenu+0x1530>)
 8002e1c:	f00d fee6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e20:	7afb      	ldrb	r3, [r7, #11]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2302      	movs	r3, #2
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e30:	2105      	movs	r1, #5
 8002e32:	4844      	ldr	r0, [pc, #272]	; (8002f44 <FreqMenu_DrawPresetMenu+0x1534>)
 8002e34:	f00d feda 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e38:	7abb      	ldrb	r3, [r7, #10]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	2302      	movs	r3, #2
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e48:	2105      	movs	r1, #5
 8002e4a:	483f      	ldr	r0, [pc, #252]	; (8002f48 <FreqMenu_DrawPresetMenu+0x1538>)
 8002e4c:	f00d fece 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e50:	7a7b      	ldrb	r3, [r7, #9]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	2300      	movs	r3, #0
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	2302      	movs	r3, #2
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e60:	2105      	movs	r1, #5
 8002e62:	483a      	ldr	r0, [pc, #232]	; (8002f4c <FreqMenu_DrawPresetMenu+0x153c>)
 8002e64:	f00d fec2 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	2302      	movs	r3, #2
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e78:	2178      	movs	r1, #120	; 0x78
 8002e7a:	4835      	ldr	r0, [pc, #212]	; (8002f50 <FreqMenu_DrawPresetMenu+0x1540>)
 8002e7c:	f00d feb6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e80:	7bbb      	ldrb	r3, [r7, #14]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	2302      	movs	r3, #2
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e90:	2178      	movs	r1, #120	; 0x78
 8002e92:	4830      	ldr	r0, [pc, #192]	; (8002f54 <FreqMenu_DrawPresetMenu+0x1544>)
 8002e94:	f00d feaa 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e98:	7b7b      	ldrb	r3, [r7, #13]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ea8:	2178      	movs	r1, #120	; 0x78
 8002eaa:	482b      	ldr	r0, [pc, #172]	; (8002f58 <FreqMenu_DrawPresetMenu+0x1548>)
 8002eac:	f00d fe9e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002eb0:	7b3b      	ldrb	r3, [r7, #12]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2302      	movs	r3, #2
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ec0:	2178      	movs	r1, #120	; 0x78
 8002ec2:	4826      	ldr	r0, [pc, #152]	; (8002f5c <FreqMenu_DrawPresetMenu+0x154c>)
 8002ec4:	f00d fe92 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ed8:	2178      	movs	r1, #120	; 0x78
 8002eda:	4821      	ldr	r0, [pc, #132]	; (8002f60 <FreqMenu_DrawPresetMenu+0x1550>)
 8002edc:	f00d fe86 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ee0:	7abb      	ldrb	r3, [r7, #10]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2302      	movs	r3, #2
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ef0:	2178      	movs	r1, #120	; 0x78
 8002ef2:	481c      	ldr	r0, [pc, #112]	; (8002f64 <FreqMenu_DrawPresetMenu+0x1554>)
 8002ef4:	f00d fe7a 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ef8:	7a7b      	ldrb	r3, [r7, #9]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2302      	movs	r3, #2
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	2178      	movs	r1, #120	; 0x78
 8002f0a:	4817      	ldr	r0, [pc, #92]	; (8002f68 <FreqMenu_DrawPresetMenu+0x1558>)
 8002f0c:	f00d fe6e 	bl	8010bec <ILI9341_Draw_Text>
			break;
 8002f10:	bf00      	nop
 8002f12:	e00b      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002f14:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	22b4      	movs	r2, #180	; 0xb4
 8002f22:	2105      	movs	r1, #5
 8002f24:	4811      	ldr	r0, [pc, #68]	; (8002f6c <FreqMenu_DrawPresetMenu+0x155c>)
 8002f26:	f00d fe61 	bl	8010bec <ILI9341_Draw_Text>
}
 8002f2a:	e7ff      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	08015ca4 	.word	0x08015ca4
 8002f38:	08015cac 	.word	0x08015cac
 8002f3c:	08015cb4 	.word	0x08015cb4
 8002f40:	08015cbc 	.word	0x08015cbc
 8002f44:	08015cc4 	.word	0x08015cc4
 8002f48:	08015ccc 	.word	0x08015ccc
 8002f4c:	08015cd4 	.word	0x08015cd4
 8002f50:	08015cdc 	.word	0x08015cdc
 8002f54:	08015ce4 	.word	0x08015ce4
 8002f58:	08015cec 	.word	0x08015cec
 8002f5c:	08015cf4 	.word	0x08015cf4
 8002f60:	08015cfc 	.word	0x08015cfc
 8002f64:	08015d04 	.word	0x08015d04
 8002f68:	08015d0c 	.word	0x08015d0c
 8002f6c:	08015d18 	.word	0x08015d18

08002f70 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	220a      	movs	r2, #10
 8002f84:	2105      	movs	r1, #5
 8002f86:	4804      	ldr	r0, [pc, #16]	; (8002f98 <FreqMenu_DrawAdjustMenu+0x28>)
 8002f88:	f00d fe30 	bl	8010bec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002f8c:	f7fd ffb4 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	08015d48 	.word	0x08015d48

08002f9c <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b0a0      	sub	sp, #128	; 0x80
 8002fa0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	2302      	movs	r3, #2
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2300      	movs	r3, #0
 8002fae:	220a      	movs	r2, #10
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	48a2      	ldr	r0, [pc, #648]	; (800323c <FreqMenu_DrawSweepMenu+0x2a0>)
 8002fb4:	f00d fe1a 	bl	8010bec <ILI9341_Draw_Text>
	DM_DisplayInputTriggerStatus();
 8002fb8:	f7fd ffbe 	bl	8000f38 <DM_DisplayInputTriggerStatus>

	// draw enabled status


	char enabled_text[20] = "";
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	667b      	str	r3, [r7, #100]	; 0x64
 8002fc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002fce:	4b9c      	ldr	r3, [pc, #624]	; (8003240 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d109      	bne.n	8002fee <FreqMenu_DrawSweepMenu+0x52>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002fda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002fde:	4a99      	ldr	r2, [pc, #612]	; (8003244 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002fe0:	461c      	mov	r4, r3
 8002fe2:	4615      	mov	r5, r2
 8002fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	7023      	strb	r3, [r4, #0]
 8002fec:	e008      	b.n	8003000 <FreqMenu_DrawSweepMenu+0x64>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002fee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ff2:	4a95      	ldr	r2, [pc, #596]	; (8003248 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	4615      	mov	r5, r2
 8002ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003000:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8003004:	2300      	movs	r3, #0
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	2302      	movs	r3, #2
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003010:	2228      	movs	r2, #40	; 0x28
 8003012:	2105      	movs	r1, #5
 8003014:	f00d fdea 	bl	8010bec <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8003018:	2300      	movs	r3, #0
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
 800301c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
 800302c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 800302e:	f004 f82d 	bl	800708c <SM_GetOutputInHertz>
 8003032:	ee10 3a10 	vmov	r3, s0
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd faae 	bl	8000598 <__aeabi_f2d>
 800303c:	4603      	mov	r3, r0
 800303e:	460c      	mov	r4, r1
 8003040:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003044:	e9cd 3400 	strd	r3, r4, [sp]
 8003048:	4a80      	ldr	r2, [pc, #512]	; (800324c <FreqMenu_DrawSweepMenu+0x2b0>)
 800304a:	2119      	movs	r1, #25
 800304c:	f00f f98a 	bl	8012364 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003050:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003054:	2300      	movs	r3, #0
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	2302      	movs	r3, #2
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003060:	223c      	movs	r2, #60	; 0x3c
 8003062:	2105      	movs	r1, #5
 8003064:	f00d fdc2 	bl	8010bec <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003068:	2300      	movs	r3, #0
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	2302      	movs	r3, #2
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003074:	2264      	movs	r2, #100	; 0x64
 8003076:	2105      	movs	r1, #5
 8003078:	4875      	ldr	r0, [pc, #468]	; (8003250 <FreqMenu_DrawSweepMenu+0x2b4>)
 800307a:	f00d fdb7 	bl	8010bec <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 800307e:	4b70      	ldr	r3, [pc, #448]	; (8003240 <FreqMenu_DrawSweepMenu+0x2a4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b10      	cmp	r3, #16
 8003088:	d117      	bne.n	80030ba <FreqMenu_DrawSweepMenu+0x11e>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800308a:	2300      	movs	r3, #0
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2302      	movs	r3, #2
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003096:	2264      	movs	r2, #100	; 0x64
 8003098:	21eb      	movs	r1, #235	; 0xeb
 800309a:	486e      	ldr	r0, [pc, #440]	; (8003254 <FreqMenu_DrawSweepMenu+0x2b8>)
 800309c:	f00d fda6 	bl	8010bec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030a0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2302      	movs	r3, #2
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2300      	movs	r3, #0
 80030ac:	2264      	movs	r2, #100	; 0x64
 80030ae:	f240 1109 	movw	r1, #265	; 0x109
 80030b2:	4869      	ldr	r0, [pc, #420]	; (8003258 <FreqMenu_DrawSweepMenu+0x2bc>)
 80030b4:	f00d fd9a 	bl	8010bec <ILI9341_Draw_Text>
 80030b8:	e016      	b.n	80030e8 <FreqMenu_DrawSweepMenu+0x14c>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030ba:	2300      	movs	r3, #0
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	2302      	movs	r3, #2
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030c6:	2264      	movs	r2, #100	; 0x64
 80030c8:	f240 1109 	movw	r1, #265	; 0x109
 80030cc:	4862      	ldr	r0, [pc, #392]	; (8003258 <FreqMenu_DrawSweepMenu+0x2bc>)
 80030ce:	f00d fd8d 	bl	8010bec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030d2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	2302      	movs	r3, #2
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	2264      	movs	r2, #100	; 0x64
 80030e0:	21eb      	movs	r1, #235	; 0xeb
 80030e2:	485c      	ldr	r0, [pc, #368]	; (8003254 <FreqMenu_DrawSweepMenu+0x2b8>)
 80030e4:	f00d fd82 	bl	8010bec <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 80030e8:	4b5c      	ldr	r3, [pc, #368]	; (800325c <FreqMenu_DrawSweepMenu+0x2c0>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <FreqMenu_DrawSweepMenu+0x16c>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	2302      	movs	r3, #2
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2300      	movs	r3, #0
 80030fc:	2278      	movs	r2, #120	; 0x78
 80030fe:	2105      	movs	r1, #5
 8003100:	4857      	ldr	r0, [pc, #348]	; (8003260 <FreqMenu_DrawSweepMenu+0x2c4>)
 8003102:	f00d fd73 	bl	8010bec <ILI9341_Draw_Text>
 8003106:	e00a      	b.n	800311e <FreqMenu_DrawSweepMenu+0x182>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003108:	2300      	movs	r3, #0
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	2302      	movs	r3, #2
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003114:	2278      	movs	r2, #120	; 0x78
 8003116:	2105      	movs	r1, #5
 8003118:	4851      	ldr	r0, [pc, #324]	; (8003260 <FreqMenu_DrawSweepMenu+0x2c4>)
 800311a:	f00d fd67 	bl	8010bec <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
 8003130:	611a      	str	r2, [r3, #16]
 8003132:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <FreqMenu_DrawSweepMenu+0x2c8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fa2d 	bl	8000598 <__aeabi_f2d>
 800313e:	4603      	mov	r3, r0
 8003140:	460c      	mov	r4, r1
 8003142:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003146:	e9cd 3400 	strd	r3, r4, [sp]
 800314a:	4a47      	ldr	r2, [pc, #284]	; (8003268 <FreqMenu_DrawSweepMenu+0x2cc>)
 800314c:	2119      	movs	r1, #25
 800314e:	f00f f909 	bl	8012364 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003152:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003156:	2300      	movs	r3, #0
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	2302      	movs	r3, #2
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003162:	2278      	movs	r2, #120	; 0x78
 8003164:	21b6      	movs	r1, #182	; 0xb6
 8003166:	f00d fd41 	bl	8010bec <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 800316a:	4b3c      	ldr	r3, [pc, #240]	; (800325c <FreqMenu_DrawSweepMenu+0x2c0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10f      	bne.n	8003192 <FreqMenu_DrawSweepMenu+0x1f6>
 8003172:	4b3e      	ldr	r3, [pc, #248]	; (800326c <FreqMenu_DrawSweepMenu+0x2d0>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <FreqMenu_DrawSweepMenu+0x1f6>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 800317a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	2302      	movs	r3, #2
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	228c      	movs	r2, #140	; 0x8c
 8003188:	2105      	movs	r1, #5
 800318a:	4839      	ldr	r0, [pc, #228]	; (8003270 <FreqMenu_DrawSweepMenu+0x2d4>)
 800318c:	f00d fd2e 	bl	8010bec <ILI9341_Draw_Text>
 8003190:	e00a      	b.n	80031a8 <FreqMenu_DrawSweepMenu+0x20c>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003192:	2300      	movs	r3, #0
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2302      	movs	r3, #2
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800319e:	228c      	movs	r2, #140	; 0x8c
 80031a0:	2105      	movs	r1, #5
 80031a2:	4833      	ldr	r0, [pc, #204]	; (8003270 <FreqMenu_DrawSweepMenu+0x2d4>)
 80031a4:	f00d fd22 	bl	8010bec <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <FreqMenu_DrawSweepMenu+0x2d8>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <FreqMenu_DrawSweepMenu+0x2dc>)
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	ee17 0a90 	vmov	r0, s15
 80031d0:	f003 ffa0 	bl	8007114 <SM_ConvertPeriodToHertz>
 80031d4:	eeb0 7a40 	vmov.f32	s14, s0
 80031d8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800327c <FreqMenu_DrawSweepMenu+0x2e0>
 80031dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031e0:	ee16 0a90 	vmov	r0, s13
 80031e4:	f7fd f9d8 	bl	8000598 <__aeabi_f2d>
 80031e8:	4603      	mov	r3, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	f107 0018 	add.w	r0, r7, #24
 80031f0:	e9cd 3400 	strd	r3, r4, [sp]
 80031f4:	4a22      	ldr	r2, [pc, #136]	; (8003280 <FreqMenu_DrawSweepMenu+0x2e4>)
 80031f6:	2114      	movs	r1, #20
 80031f8:	f00f f8b4 	bl	8012364 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031fc:	f107 0018 	add.w	r0, r7, #24
 8003200:	2300      	movs	r3, #0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2302      	movs	r3, #2
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800320c:	228c      	movs	r2, #140	; 0x8c
 800320e:	219e      	movs	r1, #158	; 0x9e
 8003210:	f00d fcec 	bl	8010bec <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <FreqMenu_DrawSweepMenu+0x2c0>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d135      	bne.n	8003288 <FreqMenu_DrawSweepMenu+0x2ec>
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <FreqMenu_DrawSweepMenu+0x2d0>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d131      	bne.n	8003288 <FreqMenu_DrawSweepMenu+0x2ec>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8003224:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2302      	movs	r3, #2
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	22a0      	movs	r2, #160	; 0xa0
 8003232:	2105      	movs	r1, #5
 8003234:	4813      	ldr	r0, [pc, #76]	; (8003284 <FreqMenu_DrawSweepMenu+0x2e8>)
 8003236:	f00d fcd9 	bl	8010bec <ILI9341_Draw_Text>
 800323a:	e030      	b.n	800329e <FreqMenu_DrawSweepMenu+0x302>
 800323c:	08015d5c 	.word	0x08015d5c
 8003240:	40000c00 	.word	0x40000c00
 8003244:	08015d70 	.word	0x08015d70
 8003248:	08015d84 	.word	0x08015d84
 800324c:	08015d98 	.word	0x08015d98
 8003250:	08015dac 	.word	0x08015dac
 8003254:	08015db8 	.word	0x08015db8
 8003258:	08015dbc 	.word	0x08015dbc
 800325c:	20001e59 	.word	0x20001e59
 8003260:	08015dc4 	.word	0x08015dc4
 8003264:	20002270 	.word	0x20002270
 8003268:	08015dd4 	.word	0x08015dd4
 800326c:	20001e58 	.word	0x20001e58
 8003270:	08015de0 	.word	0x08015de0
 8003274:	20000124 	.word	0x20000124
 8003278:	40013400 	.word	0x40013400
 800327c:	42f00000 	.word	0x42f00000
 8003280:	08015df0 	.word	0x08015df0
 8003284:	08015dfc 	.word	0x08015dfc
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003288:	2300      	movs	r3, #0
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2302      	movs	r3, #2
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003294:	22a0      	movs	r2, #160	; 0xa0
 8003296:	2105      	movs	r1, #5
 8003298:	484d      	ldr	r0, [pc, #308]	; (80033d0 <FreqMenu_DrawSweepMenu+0x434>)
 800329a:	f00d fca7 	bl	8010bec <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	609a      	str	r2, [r3, #8]
 80032ae:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 80032b0:	4b48      	ldr	r3, [pc, #288]	; (80033d4 <FreqMenu_DrawSweepMenu+0x438>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <FreqMenu_DrawSweepMenu+0x43c>)
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	ee17 0a90 	vmov	r0, s15
 80032c6:	f003 ff25 	bl	8007114 <SM_ConvertPeriodToHertz>
 80032ca:	eeb0 7a40 	vmov.f32	s14, s0
 80032ce:	eddf 7a43 	vldr	s15, [pc, #268]	; 80033dc <FreqMenu_DrawSweepMenu+0x440>
 80032d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032d6:	ee16 0a90 	vmov	r0, s13
 80032da:	f7fd f95d 	bl	8000598 <__aeabi_f2d>
 80032de:	4603      	mov	r3, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	1d38      	adds	r0, r7, #4
 80032e4:	e9cd 3400 	strd	r3, r4, [sp]
 80032e8:	4a3d      	ldr	r2, [pc, #244]	; (80033e0 <FreqMenu_DrawSweepMenu+0x444>)
 80032ea:	2114      	movs	r1, #20
 80032ec:	f00f f83a 	bl	8012364 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032f0:	1d38      	adds	r0, r7, #4
 80032f2:	2300      	movs	r3, #0
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032fe:	22a0      	movs	r2, #160	; 0xa0
 8003300:	21aa      	movs	r1, #170	; 0xaa
 8003302:	f00d fc73 	bl	8010bec <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8003306:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <FreqMenu_DrawSweepMenu+0x448>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10b      	bne.n	800332a <FreqMenu_DrawSweepMenu+0x38e>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003312:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2302      	movs	r3, #2
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	22d5      	movs	r2, #213	; 0xd5
 8003320:	2106      	movs	r1, #6
 8003322:	4831      	ldr	r0, [pc, #196]	; (80033e8 <FreqMenu_DrawSweepMenu+0x44c>)
 8003324:	f00d fc62 	bl	8010bec <ILI9341_Draw_Text>
 8003328:	e00a      	b.n	8003340 <FreqMenu_DrawSweepMenu+0x3a4>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800332a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	2302      	movs	r3, #2
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2300      	movs	r3, #0
 8003336:	22d5      	movs	r2, #213	; 0xd5
 8003338:	2105      	movs	r1, #5
 800333a:	482c      	ldr	r0, [pc, #176]	; (80033ec <FreqMenu_DrawSweepMenu+0x450>)
 800333c:	f00d fc56 	bl	8010bec <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003340:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	2302      	movs	r3, #2
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2300      	movs	r3, #0
 800334c:	22cc      	movs	r2, #204	; 0xcc
 800334e:	2168      	movs	r1, #104	; 0x68
 8003350:	4827      	ldr	r0, [pc, #156]	; (80033f0 <FreqMenu_DrawSweepMenu+0x454>)
 8003352:	f00d fc4b 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003356:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	2302      	movs	r3, #2
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2300      	movs	r3, #0
 8003362:	22de      	movs	r2, #222	; 0xde
 8003364:	2161      	movs	r1, #97	; 0x61
 8003366:	4823      	ldr	r0, [pc, #140]	; (80033f4 <FreqMenu_DrawSweepMenu+0x458>)
 8003368:	f00d fc40 	bl	8010bec <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800336c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2302      	movs	r3, #2
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	22cc      	movs	r2, #204	; 0xcc
 800337a:	21b7      	movs	r1, #183	; 0xb7
 800337c:	481c      	ldr	r0, [pc, #112]	; (80033f0 <FreqMenu_DrawSweepMenu+0x454>)
 800337e:	f00d fc35 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003382:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	2302      	movs	r3, #2
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	22de      	movs	r2, #222	; 0xde
 8003390:	21ad      	movs	r1, #173	; 0xad
 8003392:	4819      	ldr	r0, [pc, #100]	; (80033f8 <FreqMenu_DrawSweepMenu+0x45c>)
 8003394:	f00d fc2a 	bl	8010bec <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003398:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	2302      	movs	r3, #2
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	22cc      	movs	r2, #204	; 0xcc
 80033a6:	f240 1107 	movw	r1, #263	; 0x107
 80033aa:	4811      	ldr	r0, [pc, #68]	; (80033f0 <FreqMenu_DrawSweepMenu+0x454>)
 80033ac:	f00d fc1e 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80033b0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	2302      	movs	r3, #2
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	22de      	movs	r2, #222	; 0xde
 80033be:	21fc      	movs	r1, #252	; 0xfc
 80033c0:	480e      	ldr	r0, [pc, #56]	; (80033fc <FreqMenu_DrawSweepMenu+0x460>)
 80033c2:	f00d fc13 	bl	8010bec <ILI9341_Draw_Text>
}
 80033c6:	bf00      	nop
 80033c8:	3778      	adds	r7, #120	; 0x78
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bdb0      	pop	{r4, r5, r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08015dfc 	.word	0x08015dfc
 80033d4:	20000128 	.word	0x20000128
 80033d8:	40013400 	.word	0x40013400
 80033dc:	42f00000 	.word	0x42f00000
 80033e0:	08015e0c 	.word	0x08015e0c
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	08015e18 	.word	0x08015e18
 80033ec:	08015e20 	.word	0x08015e20
 80033f0:	08015e28 	.word	0x08015e28
 80033f4:	08015e2c 	.word	0x08015e2c
 80033f8:	08015e34 	.word	0x08015e34
 80033fc:	08015e3c 	.word	0x08015e3c

08003400 <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2302      	movs	r3, #2
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	2300      	movs	r3, #0
 8003412:	220a      	movs	r2, #10
 8003414:	2105      	movs	r1, #5
 8003416:	4804      	ldr	r0, [pc, #16]	; (8003428 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003418:	f00d fbe8 	bl	8010bec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800341c:	f7fd fd6c 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	08015e44 	.word	0x08015e44

0800342c <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d007      	beq.n	800344c <FuncMenu_DrawMenu+0x20>
 800343c:	2b03      	cmp	r3, #3
 800343e:	d009      	beq.n	8003454 <FuncMenu_DrawMenu+0x28>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d000      	beq.n	8003446 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003444:	e00a      	b.n	800345c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003446:	f000 f80d 	bl	8003464 <FuncMenu_DrawMainMenu>
			break;
 800344a:	e007      	b.n	800345c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 800344c:	2000      	movs	r0, #0
 800344e:	f000 f851 	bl	80034f4 <FuncMenu_DrawOutputMenu>
			break;
 8003452:	e003      	b.n	800345c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003454:	2001      	movs	r0, #1
 8003456:	f000 f84d 	bl	80034f4 <FuncMenu_DrawOutputMenu>
			break;
 800345a:	bf00      	nop

	}
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800346a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	2302      	movs	r3, #2
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2300      	movs	r3, #0
 8003476:	220a      	movs	r2, #10
 8003478:	210a      	movs	r1, #10
 800347a:	481a      	ldr	r0, [pc, #104]	; (80034e4 <FuncMenu_DrawMainMenu+0x80>)
 800347c:	f00d fbb6 	bl	8010bec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003480:	f7fd fd3a 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003484:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	2302      	movs	r3, #2
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	2300      	movs	r3, #0
 8003490:	22d2      	movs	r2, #210	; 0xd2
 8003492:	2105      	movs	r1, #5
 8003494:	4814      	ldr	r0, [pc, #80]	; (80034e8 <FuncMenu_DrawMainMenu+0x84>)
 8003496:	f00d fba9 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800349a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	2302      	movs	r3, #2
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	22d2      	movs	r2, #210	; 0xd2
 80034a8:	2164      	movs	r1, #100	; 0x64
 80034aa:	4810      	ldr	r0, [pc, #64]	; (80034ec <FuncMenu_DrawMainMenu+0x88>)
 80034ac:	f00d fb9e 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	2302      	movs	r3, #2
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2300      	movs	r3, #0
 80034bc:	22d2      	movs	r2, #210	; 0xd2
 80034be:	21af      	movs	r1, #175	; 0xaf
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <FuncMenu_DrawMainMenu+0x8c>)
 80034c2:	f00d fb93 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034c6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2302      	movs	r3, #2
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	22d2      	movs	r2, #210	; 0xd2
 80034d4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034d8:	4805      	ldr	r0, [pc, #20]	; (80034f0 <FuncMenu_DrawMainMenu+0x8c>)
 80034da:	f00d fb87 	bl	8010bec <ILI9341_Draw_Text>
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	08015e54 	.word	0x08015e54
 80034e8:	08015e60 	.word	0x08015e60
 80034ec:	08015e68 	.word	0x08015e68
 80034f0:	08015e6c 	.word	0x08015e6c

080034f4 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	2302      	movs	r3, #2
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	220a      	movs	r2, #10
 8003512:	210a      	movs	r1, #10
 8003514:	4896      	ldr	r0, [pc, #600]	; (8003770 <FuncMenu_DrawOutputMenu+0x27c>)
 8003516:	f00d fb69 	bl	8010bec <ILI9341_Draw_Text>
 800351a:	e00a      	b.n	8003532 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800351c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	2302      	movs	r3, #2
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2300      	movs	r3, #0
 8003528:	220a      	movs	r2, #10
 800352a:	210a      	movs	r1, #10
 800352c:	4891      	ldr	r0, [pc, #580]	; (8003774 <FuncMenu_DrawOutputMenu+0x280>)
 800352e:	f00d fb5d 	bl	8010bec <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 fb11 	bl	8006b5c <SM_GetOutputChannel>
 800353a:	4603      	mov	r3, r0
 800353c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003540:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8424 	beq.w	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b06      	cmp	r3, #6
 8003550:	f200 841f 	bhi.w	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <FuncMenu_DrawOutputMenu+0x68>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003579 	.word	0x08003579
 8003560:	08003675 	.word	0x08003675
 8003564:	08003799 	.word	0x08003799
 8003568:	08003895 	.word	0x08003895
 800356c:	08003991 	.word	0x08003991
 8003570:	08003ac9 	.word	0x08003ac9
 8003574:	08003bdb 	.word	0x08003bdb
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003578:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	2302      	movs	r3, #2
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	2232      	movs	r2, #50	; 0x32
 8003586:	210a      	movs	r1, #10
 8003588:	487b      	ldr	r0, [pc, #492]	; (8003778 <FuncMenu_DrawOutputMenu+0x284>)
 800358a:	f00d fb2f 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800358e:	2300      	movs	r3, #0
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	2302      	movs	r3, #2
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800359a:	2246      	movs	r2, #70	; 0x46
 800359c:	210a      	movs	r1, #10
 800359e:	4877      	ldr	r0, [pc, #476]	; (800377c <FuncMenu_DrawOutputMenu+0x288>)
 80035a0:	f00d fb24 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035a4:	2300      	movs	r3, #0
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	2302      	movs	r3, #2
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035b0:	225a      	movs	r2, #90	; 0x5a
 80035b2:	210a      	movs	r1, #10
 80035b4:	4872      	ldr	r0, [pc, #456]	; (8003780 <FuncMenu_DrawOutputMenu+0x28c>)
 80035b6:	f00d fb19 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035ba:	2300      	movs	r3, #0
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	2302      	movs	r3, #2
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035c6:	226e      	movs	r2, #110	; 0x6e
 80035c8:	210a      	movs	r1, #10
 80035ca:	486e      	ldr	r0, [pc, #440]	; (8003784 <FuncMenu_DrawOutputMenu+0x290>)
 80035cc:	f00d fb0e 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035d0:	2300      	movs	r3, #0
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	2302      	movs	r3, #2
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035dc:	2282      	movs	r2, #130	; 0x82
 80035de:	210a      	movs	r1, #10
 80035e0:	4869      	ldr	r0, [pc, #420]	; (8003788 <FuncMenu_DrawOutputMenu+0x294>)
 80035e2:	f00d fb03 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035e6:	2300      	movs	r3, #0
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2302      	movs	r3, #2
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035f2:	2296      	movs	r2, #150	; 0x96
 80035f4:	210a      	movs	r1, #10
 80035f6:	4865      	ldr	r0, [pc, #404]	; (800378c <FuncMenu_DrawOutputMenu+0x298>)
 80035f8:	f00d faf8 	bl	8010bec <ILI9341_Draw_Text>

				if(pOutChan)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003602:	2300      	movs	r3, #0
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	2302      	movs	r3, #2
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800360e:	22aa      	movs	r2, #170	; 0xaa
 8003610:	210a      	movs	r1, #10
 8003612:	485f      	ldr	r0, [pc, #380]	; (8003790 <FuncMenu_DrawOutputMenu+0x29c>)
 8003614:	f00d faea 	bl	8010bec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003618:	f240 23fd 	movw	r3, #765	; 0x2fd
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2302      	movs	r3, #2
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2300      	movs	r3, #0
 8003624:	22d2      	movs	r2, #210	; 0xd2
 8003626:	2105      	movs	r1, #5
 8003628:	485a      	ldr	r0, [pc, #360]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800362a:	f00d fadf 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800362e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	2302      	movs	r3, #2
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	22d2      	movs	r2, #210	; 0xd2
 800363c:	2161      	movs	r1, #97	; 0x61
 800363e:	4855      	ldr	r0, [pc, #340]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003640:	f00d fad4 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003644:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	2302      	movs	r3, #2
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2300      	movs	r3, #0
 8003650:	22d2      	movs	r2, #210	; 0xd2
 8003652:	21af      	movs	r1, #175	; 0xaf
 8003654:	484f      	ldr	r0, [pc, #316]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003656:	f00d fac9 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800365a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	2302      	movs	r3, #2
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2300      	movs	r3, #0
 8003666:	22d2      	movs	r2, #210	; 0xd2
 8003668:	f44f 7182 	mov.w	r1, #260	; 0x104
 800366c:	4849      	ldr	r0, [pc, #292]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800366e:	f00d fabd 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8003672:	e38e      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003674:	2300      	movs	r3, #0
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	2302      	movs	r3, #2
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003680:	2232      	movs	r2, #50	; 0x32
 8003682:	210a      	movs	r1, #10
 8003684:	483c      	ldr	r0, [pc, #240]	; (8003778 <FuncMenu_DrawOutputMenu+0x284>)
 8003686:	f00d fab1 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800368a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2302      	movs	r3, #2
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	2246      	movs	r2, #70	; 0x46
 8003698:	210a      	movs	r1, #10
 800369a:	4838      	ldr	r0, [pc, #224]	; (800377c <FuncMenu_DrawOutputMenu+0x288>)
 800369c:	f00d faa6 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a0:	2300      	movs	r3, #0
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	2302      	movs	r3, #2
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ac:	225a      	movs	r2, #90	; 0x5a
 80036ae:	210a      	movs	r1, #10
 80036b0:	4833      	ldr	r0, [pc, #204]	; (8003780 <FuncMenu_DrawOutputMenu+0x28c>)
 80036b2:	f00d fa9b 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036b6:	2300      	movs	r3, #0
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	2302      	movs	r3, #2
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036c2:	226e      	movs	r2, #110	; 0x6e
 80036c4:	210a      	movs	r1, #10
 80036c6:	482f      	ldr	r0, [pc, #188]	; (8003784 <FuncMenu_DrawOutputMenu+0x290>)
 80036c8:	f00d fa90 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036cc:	2300      	movs	r3, #0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2302      	movs	r3, #2
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d8:	2282      	movs	r2, #130	; 0x82
 80036da:	210a      	movs	r1, #10
 80036dc:	482a      	ldr	r0, [pc, #168]	; (8003788 <FuncMenu_DrawOutputMenu+0x294>)
 80036de:	f00d fa85 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036e2:	2300      	movs	r3, #0
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2302      	movs	r3, #2
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ee:	2296      	movs	r2, #150	; 0x96
 80036f0:	210a      	movs	r1, #10
 80036f2:	4826      	ldr	r0, [pc, #152]	; (800378c <FuncMenu_DrawOutputMenu+0x298>)
 80036f4:	f00d fa7a 	bl	8010bec <ILI9341_Draw_Text>

				if(pOutChan)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036fe:	2300      	movs	r3, #0
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2302      	movs	r3, #2
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800370a:	22aa      	movs	r2, #170	; 0xaa
 800370c:	210a      	movs	r1, #10
 800370e:	4820      	ldr	r0, [pc, #128]	; (8003790 <FuncMenu_DrawOutputMenu+0x29c>)
 8003710:	f00d fa6c 	bl	8010bec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003714:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	2302      	movs	r3, #2
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	22d2      	movs	r2, #210	; 0xd2
 8003722:	2105      	movs	r1, #5
 8003724:	481b      	ldr	r0, [pc, #108]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003726:	f00d fa61 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800372a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2302      	movs	r3, #2
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	22d2      	movs	r2, #210	; 0xd2
 8003738:	2161      	movs	r1, #97	; 0x61
 800373a:	4816      	ldr	r0, [pc, #88]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800373c:	f00d fa56 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003740:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	2302      	movs	r3, #2
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	22d2      	movs	r2, #210	; 0xd2
 800374e:	21af      	movs	r1, #175	; 0xaf
 8003750:	4810      	ldr	r0, [pc, #64]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003752:	f00d fa4b 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003756:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	2302      	movs	r3, #2
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2300      	movs	r3, #0
 8003762:	22d2      	movs	r2, #210	; 0xd2
 8003764:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003768:	480a      	ldr	r0, [pc, #40]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800376a:	f00d fa3f 	bl	8010bec <ILI9341_Draw_Text>
				break;
 800376e:	e310      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
 8003770:	08015e74 	.word	0x08015e74
 8003774:	08015e84 	.word	0x08015e84
 8003778:	08015e94 	.word	0x08015e94
 800377c:	08015e9c 	.word	0x08015e9c
 8003780:	08015ea8 	.word	0x08015ea8
 8003784:	08015eb0 	.word	0x08015eb0
 8003788:	08015ebc 	.word	0x08015ebc
 800378c:	08015ec8 	.word	0x08015ec8
 8003790:	08015ed0 	.word	0x08015ed0
 8003794:	08015e6c 	.word	0x08015e6c
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003798:	2300      	movs	r3, #0
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2302      	movs	r3, #2
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037a4:	2232      	movs	r2, #50	; 0x32
 80037a6:	210a      	movs	r1, #10
 80037a8:	48be      	ldr	r0, [pc, #760]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x5b0>)
 80037aa:	f00d fa1f 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ae:	2300      	movs	r3, #0
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	2302      	movs	r3, #2
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037ba:	2246      	movs	r2, #70	; 0x46
 80037bc:	210a      	movs	r1, #10
 80037be:	48ba      	ldr	r0, [pc, #744]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x5b4>)
 80037c0:	f00d fa14 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80037c4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	2302      	movs	r3, #2
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2300      	movs	r3, #0
 80037d0:	225a      	movs	r2, #90	; 0x5a
 80037d2:	210a      	movs	r1, #10
 80037d4:	48b5      	ldr	r0, [pc, #724]	; (8003aac <FuncMenu_DrawOutputMenu+0x5b8>)
 80037d6:	f00d fa09 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037da:	2300      	movs	r3, #0
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2302      	movs	r3, #2
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e6:	226e      	movs	r2, #110	; 0x6e
 80037e8:	210a      	movs	r1, #10
 80037ea:	48b1      	ldr	r0, [pc, #708]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x5bc>)
 80037ec:	f00d f9fe 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037f0:	2300      	movs	r3, #0
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	2302      	movs	r3, #2
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037fc:	2282      	movs	r2, #130	; 0x82
 80037fe:	210a      	movs	r1, #10
 8003800:	48ac      	ldr	r0, [pc, #688]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x5c0>)
 8003802:	f00d f9f3 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003806:	2300      	movs	r3, #0
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2302      	movs	r3, #2
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003812:	2296      	movs	r2, #150	; 0x96
 8003814:	210a      	movs	r1, #10
 8003816:	48a8      	ldr	r0, [pc, #672]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003818:	f00d f9e8 	bl	8010bec <ILI9341_Draw_Text>
				if(pOutChan)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003822:	2300      	movs	r3, #0
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	2302      	movs	r3, #2
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800382e:	22aa      	movs	r2, #170	; 0xaa
 8003830:	210a      	movs	r1, #10
 8003832:	48a2      	ldr	r0, [pc, #648]	; (8003abc <FuncMenu_DrawOutputMenu+0x5c8>)
 8003834:	f00d f9da 	bl	8010bec <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003838:	f240 23fd 	movw	r3, #765	; 0x2fd
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2302      	movs	r3, #2
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	22d2      	movs	r2, #210	; 0xd2
 8003846:	2105      	movs	r1, #5
 8003848:	489d      	ldr	r0, [pc, #628]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800384a:	f00d f9cf 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800384e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	2302      	movs	r3, #2
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2300      	movs	r3, #0
 800385a:	22d2      	movs	r2, #210	; 0xd2
 800385c:	2161      	movs	r1, #97	; 0x61
 800385e:	4898      	ldr	r0, [pc, #608]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003860:	f00d f9c4 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003864:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	2302      	movs	r3, #2
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	22d2      	movs	r2, #210	; 0xd2
 8003872:	21af      	movs	r1, #175	; 0xaf
 8003874:	4892      	ldr	r0, [pc, #584]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003876:	f00d f9b9 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800387a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2302      	movs	r3, #2
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2300      	movs	r3, #0
 8003886:	22d2      	movs	r2, #210	; 0xd2
 8003888:	f44f 7182 	mov.w	r1, #260	; 0x104
 800388c:	488c      	ldr	r0, [pc, #560]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800388e:	f00d f9ad 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8003892:	e27e      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003894:	2300      	movs	r3, #0
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	2302      	movs	r3, #2
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038a0:	2232      	movs	r2, #50	; 0x32
 80038a2:	210a      	movs	r1, #10
 80038a4:	487f      	ldr	r0, [pc, #508]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x5b0>)
 80038a6:	f00d f9a1 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038aa:	2300      	movs	r3, #0
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	2302      	movs	r3, #2
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038b6:	2246      	movs	r2, #70	; 0x46
 80038b8:	210a      	movs	r1, #10
 80038ba:	487b      	ldr	r0, [pc, #492]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x5b4>)
 80038bc:	f00d f996 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038c0:	2300      	movs	r3, #0
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	2302      	movs	r3, #2
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038cc:	225a      	movs	r2, #90	; 0x5a
 80038ce:	210a      	movs	r1, #10
 80038d0:	4876      	ldr	r0, [pc, #472]	; (8003aac <FuncMenu_DrawOutputMenu+0x5b8>)
 80038d2:	f00d f98b 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80038d6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2302      	movs	r3, #2
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	226e      	movs	r2, #110	; 0x6e
 80038e4:	210a      	movs	r1, #10
 80038e6:	4872      	ldr	r0, [pc, #456]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x5bc>)
 80038e8:	f00d f980 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ec:	2300      	movs	r3, #0
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	2302      	movs	r3, #2
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038f8:	2282      	movs	r2, #130	; 0x82
 80038fa:	210a      	movs	r1, #10
 80038fc:	486d      	ldr	r0, [pc, #436]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x5c0>)
 80038fe:	f00d f975 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003902:	2300      	movs	r3, #0
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2302      	movs	r3, #2
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800390e:	2296      	movs	r2, #150	; 0x96
 8003910:	210a      	movs	r1, #10
 8003912:	4869      	ldr	r0, [pc, #420]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003914:	f00d f96a 	bl	8010bec <ILI9341_Draw_Text>

				if(pOutChan)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800391e:	2300      	movs	r3, #0
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	2302      	movs	r3, #2
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800392a:	22aa      	movs	r2, #170	; 0xaa
 800392c:	210a      	movs	r1, #10
 800392e:	4863      	ldr	r0, [pc, #396]	; (8003abc <FuncMenu_DrawOutputMenu+0x5c8>)
 8003930:	f00d f95c 	bl	8010bec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003934:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	2302      	movs	r3, #2
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	2300      	movs	r3, #0
 8003940:	22d2      	movs	r2, #210	; 0xd2
 8003942:	2105      	movs	r1, #5
 8003944:	485e      	ldr	r0, [pc, #376]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003946:	f00d f951 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800394a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	2302      	movs	r3, #2
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	22d2      	movs	r2, #210	; 0xd2
 8003958:	2161      	movs	r1, #97	; 0x61
 800395a:	4859      	ldr	r0, [pc, #356]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800395c:	f00d f946 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003960:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2302      	movs	r3, #2
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2300      	movs	r3, #0
 800396c:	22d2      	movs	r2, #210	; 0xd2
 800396e:	21af      	movs	r1, #175	; 0xaf
 8003970:	4853      	ldr	r0, [pc, #332]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003972:	f00d f93b 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003976:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	2302      	movs	r3, #2
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2300      	movs	r3, #0
 8003982:	22d2      	movs	r2, #210	; 0xd2
 8003984:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003988:	484d      	ldr	r0, [pc, #308]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800398a:	f00d f92f 	bl	8010bec <ILI9341_Draw_Text>
				break;
 800398e:	e200      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003990:	2300      	movs	r3, #0
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	2302      	movs	r3, #2
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800399c:	2232      	movs	r2, #50	; 0x32
 800399e:	210a      	movs	r1, #10
 80039a0:	4840      	ldr	r0, [pc, #256]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x5b0>)
 80039a2:	f00d f923 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039a6:	2300      	movs	r3, #0
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	2302      	movs	r3, #2
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039b2:	2246      	movs	r2, #70	; 0x46
 80039b4:	210a      	movs	r1, #10
 80039b6:	483c      	ldr	r0, [pc, #240]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x5b4>)
 80039b8:	f00d f918 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039bc:	2300      	movs	r3, #0
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2302      	movs	r3, #2
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039c8:	225a      	movs	r2, #90	; 0x5a
 80039ca:	210a      	movs	r1, #10
 80039cc:	4837      	ldr	r0, [pc, #220]	; (8003aac <FuncMenu_DrawOutputMenu+0x5b8>)
 80039ce:	f00d f90d 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039d2:	2300      	movs	r3, #0
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	2302      	movs	r3, #2
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039de:	226e      	movs	r2, #110	; 0x6e
 80039e0:	210a      	movs	r1, #10
 80039e2:	4833      	ldr	r0, [pc, #204]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x5bc>)
 80039e4:	f00d f902 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80039e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2302      	movs	r3, #2
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	2282      	movs	r2, #130	; 0x82
 80039f6:	210a      	movs	r1, #10
 80039f8:	482e      	ldr	r0, [pc, #184]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x5c0>)
 80039fa:	f00d f8f7 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039fe:	2300      	movs	r3, #0
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	2302      	movs	r3, #2
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a0a:	2296      	movs	r2, #150	; 0x96
 8003a0c:	210a      	movs	r1, #10
 8003a0e:	482a      	ldr	r0, [pc, #168]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003a10:	f00d f8ec 	bl	8010bec <ILI9341_Draw_Text>

				if(pOutChan)
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	2302      	movs	r3, #2
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a26:	22aa      	movs	r2, #170	; 0xaa
 8003a28:	210a      	movs	r1, #10
 8003a2a:	4824      	ldr	r0, [pc, #144]	; (8003abc <FuncMenu_DrawOutputMenu+0x5c8>)
 8003a2c:	f00d f8de 	bl	8010bec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a30:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	2302      	movs	r3, #2
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	22d2      	movs	r2, #210	; 0xd2
 8003a3e:	2105      	movs	r1, #5
 8003a40:	481f      	ldr	r0, [pc, #124]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a42:	f00d f8d3 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a46:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	22d2      	movs	r2, #210	; 0xd2
 8003a54:	2161      	movs	r1, #97	; 0x61
 8003a56:	481a      	ldr	r0, [pc, #104]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a58:	f00d f8c8 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a5c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2302      	movs	r3, #2
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	22d2      	movs	r2, #210	; 0xd2
 8003a6a:	21af      	movs	r1, #175	; 0xaf
 8003a6c:	4814      	ldr	r0, [pc, #80]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a6e:	f00d f8bd 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a72:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	2302      	movs	r3, #2
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	22d2      	movs	r2, #210	; 0xd2
 8003a80:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a84:	480e      	ldr	r0, [pc, #56]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a86:	f00d f8b1 	bl	8010bec <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	2302      	movs	r3, #2
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a96:	2232      	movs	r2, #50	; 0x32
 8003a98:	2196      	movs	r1, #150	; 0x96
 8003a9a:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x5d0>)
 8003a9c:	f00d f8a6 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8003aa0:	e177      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
 8003aa2:	bf00      	nop
 8003aa4:	08015e94 	.word	0x08015e94
 8003aa8:	08015e9c 	.word	0x08015e9c
 8003aac:	08015ea8 	.word	0x08015ea8
 8003ab0:	08015eb0 	.word	0x08015eb0
 8003ab4:	08015ebc 	.word	0x08015ebc
 8003ab8:	08015ec8 	.word	0x08015ec8
 8003abc:	08015ed0 	.word	0x08015ed0
 8003ac0:	08015e6c 	.word	0x08015e6c
 8003ac4:	08015ed8 	.word	0x08015ed8
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2302      	movs	r3, #2
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ad4:	2232      	movs	r2, #50	; 0x32
 8003ad6:	210a      	movs	r1, #10
 8003ad8:	48b0      	ldr	r0, [pc, #704]	; (8003d9c <FuncMenu_DrawOutputMenu+0x8a8>)
 8003ada:	f00d f887 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003aea:	2246      	movs	r2, #70	; 0x46
 8003aec:	210a      	movs	r1, #10
 8003aee:	48ac      	ldr	r0, [pc, #688]	; (8003da0 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003af0:	f00d f87c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003af4:	2300      	movs	r3, #0
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	2302      	movs	r3, #2
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b00:	225a      	movs	r2, #90	; 0x5a
 8003b02:	210a      	movs	r1, #10
 8003b04:	48a7      	ldr	r0, [pc, #668]	; (8003da4 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003b06:	f00d f871 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	2302      	movs	r3, #2
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b16:	226e      	movs	r2, #110	; 0x6e
 8003b18:	210a      	movs	r1, #10
 8003b1a:	48a3      	ldr	r0, [pc, #652]	; (8003da8 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003b1c:	f00d f866 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b20:	2300      	movs	r3, #0
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	2302      	movs	r3, #2
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b2c:	2282      	movs	r2, #130	; 0x82
 8003b2e:	210a      	movs	r1, #10
 8003b30:	489e      	ldr	r0, [pc, #632]	; (8003dac <FuncMenu_DrawOutputMenu+0x8b8>)
 8003b32:	f00d f85b 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003b36:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	2296      	movs	r2, #150	; 0x96
 8003b44:	210a      	movs	r1, #10
 8003b46:	489a      	ldr	r0, [pc, #616]	; (8003db0 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003b48:	f00d f850 	bl	8010bec <ILI9341_Draw_Text>

				if(pOutChan)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b52:	2300      	movs	r3, #0
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	2302      	movs	r3, #2
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b5e:	22aa      	movs	r2, #170	; 0xaa
 8003b60:	210a      	movs	r1, #10
 8003b62:	4894      	ldr	r0, [pc, #592]	; (8003db4 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003b64:	f00d f842 	bl	8010bec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b68:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	2302      	movs	r3, #2
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2300      	movs	r3, #0
 8003b74:	22d2      	movs	r2, #210	; 0xd2
 8003b76:	2105      	movs	r1, #5
 8003b78:	488f      	ldr	r0, [pc, #572]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b7a:	f00d f837 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b7e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	2302      	movs	r3, #2
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	22d2      	movs	r2, #210	; 0xd2
 8003b8c:	2161      	movs	r1, #97	; 0x61
 8003b8e:	488a      	ldr	r0, [pc, #552]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b90:	f00d f82c 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	22d2      	movs	r2, #210	; 0xd2
 8003ba2:	21af      	movs	r1, #175	; 0xaf
 8003ba4:	4884      	ldr	r0, [pc, #528]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ba6:	f00d f821 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003baa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	22d2      	movs	r2, #210	; 0xd2
 8003bb8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003bbc:	487e      	ldr	r0, [pc, #504]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003bbe:	f00d f815 	bl	8010bec <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003bce:	2232      	movs	r2, #50	; 0x32
 8003bd0:	2196      	movs	r1, #150	; 0x96
 8003bd2:	487a      	ldr	r0, [pc, #488]	; (8003dbc <FuncMenu_DrawOutputMenu+0x8c8>)
 8003bd4:	f00d f80a 	bl	8010bec <ILI9341_Draw_Text>
				break;
 8003bd8:	e0db      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	2302      	movs	r3, #2
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003be6:	2232      	movs	r2, #50	; 0x32
 8003be8:	210a      	movs	r1, #10
 8003bea:	486c      	ldr	r0, [pc, #432]	; (8003d9c <FuncMenu_DrawOutputMenu+0x8a8>)
 8003bec:	f00c fffe 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003bfc:	2246      	movs	r2, #70	; 0x46
 8003bfe:	210a      	movs	r1, #10
 8003c00:	4867      	ldr	r0, [pc, #412]	; (8003da0 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003c02:	f00c fff3 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c06:	2300      	movs	r3, #0
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c12:	225a      	movs	r2, #90	; 0x5a
 8003c14:	210a      	movs	r1, #10
 8003c16:	4863      	ldr	r0, [pc, #396]	; (8003da4 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003c18:	f00c ffe8 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	2302      	movs	r3, #2
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c28:	226e      	movs	r2, #110	; 0x6e
 8003c2a:	210a      	movs	r1, #10
 8003c2c:	485e      	ldr	r0, [pc, #376]	; (8003da8 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003c2e:	f00c ffdd 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c32:	2300      	movs	r3, #0
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	2302      	movs	r3, #2
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c3e:	2282      	movs	r2, #130	; 0x82
 8003c40:	210a      	movs	r1, #10
 8003c42:	485a      	ldr	r0, [pc, #360]	; (8003dac <FuncMenu_DrawOutputMenu+0x8b8>)
 8003c44:	f00c ffd2 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c54:	2296      	movs	r2, #150	; 0x96
 8003c56:	210a      	movs	r1, #10
 8003c58:	4855      	ldr	r0, [pc, #340]	; (8003db0 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003c5a:	f00c ffc7 	bl	8010bec <ILI9341_Draw_Text>

				if(pOutChan)
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c64:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	22aa      	movs	r2, #170	; 0xaa
 8003c72:	210a      	movs	r1, #10
 8003c74:	484f      	ldr	r0, [pc, #316]	; (8003db4 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003c76:	f00c ffb9 	bl	8010bec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003c7a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	2302      	movs	r3, #2
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	22d2      	movs	r2, #210	; 0xd2
 8003c88:	2105      	movs	r1, #5
 8003c8a:	484b      	ldr	r0, [pc, #300]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003c8c:	f00c ffae 	bl	8010bec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003c90:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	2302      	movs	r3, #2
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	22d2      	movs	r2, #210	; 0xd2
 8003c9e:	2161      	movs	r1, #97	; 0x61
 8003ca0:	4845      	ldr	r0, [pc, #276]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ca2:	f00c ffa3 	bl	8010bec <ILI9341_Draw_Text>

				if(pOutChan)
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05a      	beq.n	8003d62 <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003cac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	22d2      	movs	r2, #210	; 0xd2
 8003cba:	21af      	movs	r1, #175	; 0xaf
 8003cbc:	4840      	ldr	r0, [pc, #256]	; (8003dc0 <FuncMenu_DrawOutputMenu+0x8cc>)
 8003cbe:	f00c ff95 	bl	8010bec <ILI9341_Draw_Text>
					char duty[10] = "";
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	f107 030c 	add.w	r3, r7, #12
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 8003cd0:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003dc8 <FuncMenu_DrawOutputMenu+0x8d4>
 8003cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cf4:	ee17 0a90 	vmov	r0, s15
 8003cf8:	f7fc fc4e 	bl	8000598 <__aeabi_f2d>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	f107 0008 	add.w	r0, r7, #8
 8003d04:	e9cd 3400 	strd	r3, r4, [sp]
 8003d08:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <FuncMenu_DrawOutputMenu+0x8d8>)
 8003d0a:	210a      	movs	r1, #10
 8003d0c:	f00e fb2a 	bl	8012364 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d10:	f107 0008 	add.w	r0, r7, #8
 8003d14:	2300      	movs	r3, #0
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	2302      	movs	r3, #2
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d20:	2232      	movs	r2, #50	; 0x32
 8003d22:	21dc      	movs	r1, #220	; 0xdc
 8003d24:	f00c ff62 	bl	8010bec <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003d28:	f003 fa1a 	bl	8007160 <SM_IsFuncPwmDutyMode>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d32:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	2302      	movs	r3, #2
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2232      	movs	r2, #50	; 0x32
 8003d40:	2196      	movs	r1, #150	; 0x96
 8003d42:	4823      	ldr	r0, [pc, #140]	; (8003dd0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003d44:	f00c ff52 	bl	8010bec <ILI9341_Draw_Text>
 8003d48:	e016      	b.n	8003d78 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	2302      	movs	r3, #2
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d56:	2232      	movs	r2, #50	; 0x32
 8003d58:	2196      	movs	r1, #150	; 0x96
 8003d5a:	481d      	ldr	r0, [pc, #116]	; (8003dd0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003d5c:	f00c ff46 	bl	8010bec <ILI9341_Draw_Text>
 8003d60:	e00a      	b.n	8003d78 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003d62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	2302      	movs	r3, #2
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	22d2      	movs	r2, #210	; 0xd2
 8003d70:	21af      	movs	r1, #175	; 0xaf
 8003d72:	4811      	ldr	r0, [pc, #68]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003d74:	f00c ff3a 	bl	8010bec <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003d78:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	2302      	movs	r3, #2
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	22d2      	movs	r2, #210	; 0xd2
 8003d86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003d8a:	480b      	ldr	r0, [pc, #44]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003d8c:	f00c ff2e 	bl	8010bec <ILI9341_Draw_Text>

				break;
 8003d90:	bf00      	nop
				//
		}
	}
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	08015e94 	.word	0x08015e94
 8003da0:	08015e9c 	.word	0x08015e9c
 8003da4:	08015ea8 	.word	0x08015ea8
 8003da8:	08015eb0 	.word	0x08015eb0
 8003dac:	08015ebc 	.word	0x08015ebc
 8003db0:	08015ec8 	.word	0x08015ec8
 8003db4:	08015ed0 	.word	0x08015ed0
 8003db8:	08015e6c 	.word	0x08015e6c
 8003dbc:	08015ed8 	.word	0x08015ed8
 8003dc0:	08015ee8 	.word	0x08015ee8
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	42c80000 	.word	0x42c80000
 8003dcc:	08015ef0 	.word	0x08015ef0
 8003dd0:	08015ef8 	.word	0x08015ef8

08003dd4 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d007      	beq.n	8003df4 <GainMenu_DrawMenu+0x20>
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d008      	beq.n	8003dfa <GainMenu_DrawMenu+0x26>
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d000      	beq.n	8003dee <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003dec:	e008      	b.n	8003e00 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003dee:	f000 f80b 	bl	8003e08 <GainMenu_DrawMainMenu>
			break;
 8003df2:	e005      	b.n	8003e00 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003df4:	f000 f868 	bl	8003ec8 <GainMenu_DrawSignalMenu>
			break;
 8003df8:	e002      	b.n	8003e00 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003dfa:	f000 f8af 	bl	8003f5c <GainMenu_DrawAuxMenu>
			break;
 8003dfe:	bf00      	nop

	}
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	2302      	movs	r3, #2
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	220a      	movs	r2, #10
 8003e1c:	210a      	movs	r1, #10
 8003e1e:	4826      	ldr	r0, [pc, #152]	; (8003eb8 <GainMenu_DrawMainMenu+0xb0>)
 8003e20:	f00c fee4 	bl	8010bec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003e24:	f7fd f868 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003e28:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2302      	movs	r3, #2
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2300      	movs	r3, #0
 8003e34:	22d2      	movs	r2, #210	; 0xd2
 8003e36:	2105      	movs	r1, #5
 8003e38:	4820      	ldr	r0, [pc, #128]	; (8003ebc <GainMenu_DrawMainMenu+0xb4>)
 8003e3a:	f00c fed7 	bl	8010bec <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f002 fe8c 	bl	8006b5c <SM_GetOutputChannel>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	2b06      	cmp	r3, #6
 8003e52:	d10b      	bne.n	8003e6c <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e54:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	22d2      	movs	r2, #210	; 0xd2
 8003e62:	2164      	movs	r1, #100	; 0x64
 8003e64:	4816      	ldr	r0, [pc, #88]	; (8003ec0 <GainMenu_DrawMainMenu+0xb8>)
 8003e66:	f00c fec1 	bl	8010bec <ILI9341_Draw_Text>
 8003e6a:	e00a      	b.n	8003e82 <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e6c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2302      	movs	r3, #2
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	22d2      	movs	r2, #210	; 0xd2
 8003e7a:	2164      	movs	r1, #100	; 0x64
 8003e7c:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <GainMenu_DrawMainMenu+0xbc>)
 8003e7e:	f00c feb5 	bl	8010bec <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003e82:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2302      	movs	r3, #2
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	22d2      	movs	r2, #210	; 0xd2
 8003e90:	21af      	movs	r1, #175	; 0xaf
 8003e92:	480b      	ldr	r0, [pc, #44]	; (8003ec0 <GainMenu_DrawMainMenu+0xb8>)
 8003e94:	f00c feaa 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003e98:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	22d2      	movs	r2, #210	; 0xd2
 8003ea6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003eaa:	4805      	ldr	r0, [pc, #20]	; (8003ec0 <GainMenu_DrawMainMenu+0xb8>)
 8003eac:	f00c fe9e 	bl	8010bec <ILI9341_Draw_Text>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	08015f00 	.word	0x08015f00
 8003ebc:	08015f0c 	.word	0x08015f0c
 8003ec0:	08015f14 	.word	0x08015f14
 8003ec4:	08015f1c 	.word	0x08015f1c

08003ec8 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	220a      	movs	r2, #10
 8003edc:	210a      	movs	r1, #10
 8003ede:	481a      	ldr	r0, [pc, #104]	; (8003f48 <GainMenu_DrawSignalMenu+0x80>)
 8003ee0:	f00c fe84 	bl	8010bec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ee4:	f7fd f808 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003ee8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	2302      	movs	r3, #2
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	22d2      	movs	r2, #210	; 0xd2
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	4814      	ldr	r0, [pc, #80]	; (8003f4c <GainMenu_DrawSignalMenu+0x84>)
 8003efa:	f00c fe77 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003efe:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	2302      	movs	r3, #2
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	22d2      	movs	r2, #210	; 0xd2
 8003f0c:	2161      	movs	r1, #97	; 0x61
 8003f0e:	4810      	ldr	r0, [pc, #64]	; (8003f50 <GainMenu_DrawSignalMenu+0x88>)
 8003f10:	f00c fe6c 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003f14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	22d2      	movs	r2, #210	; 0xd2
 8003f22:	21be      	movs	r1, #190	; 0xbe
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <GainMenu_DrawSignalMenu+0x8c>)
 8003f26:	f00c fe61 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003f2a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	2302      	movs	r3, #2
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	22d2      	movs	r2, #210	; 0xd2
 8003f38:	f240 1109 	movw	r1, #265	; 0x109
 8003f3c:	4806      	ldr	r0, [pc, #24]	; (8003f58 <GainMenu_DrawSignalMenu+0x90>)
 8003f3e:	f00c fe55 	bl	8010bec <ILI9341_Draw_Text>
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	08015f20 	.word	0x08015f20
 8003f4c:	08015f30 	.word	0x08015f30
 8003f50:	08015f38 	.word	0x08015f38
 8003f54:	08015f40 	.word	0x08015f40
 8003f58:	08015f44 	.word	0x08015f44

08003f5c <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	2302      	movs	r3, #2
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	220a      	movs	r2, #10
 8003f70:	210a      	movs	r1, #10
 8003f72:	4804      	ldr	r0, [pc, #16]	; (8003f84 <GainMenu_DrawAuxMenu+0x28>)
 8003f74:	f00c fe3a 	bl	8010bec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003f78:	f7fc ffbe 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	08015f48 	.word	0x08015f48

08003f88 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d007      	beq.n	8003fa8 <ToplevelMenu_DrawMenu+0x20>
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d008      	beq.n	8003fae <ToplevelMenu_DrawMenu+0x26>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d000      	beq.n	8003fa2 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003fa0:	e008      	b.n	8003fb4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003fa2:	f000 f80b 	bl	8003fbc <ToplevelMenu_DrawMainMenu>
			break;
 8003fa6:	e005      	b.n	8003fb4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003fa8:	f000 f844 	bl	8004034 <ToplevelMenu_DrawOutputMenu>
			break;
 8003fac:	e002      	b.n	8003fb4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003fae:	f000 f88b 	bl	80040c8 <ToplevelMenu_DrawInputMenu>
			break;
 8003fb2:	bf00      	nop

	}
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003fc2:	f7fc ff99 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fc6:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2302      	movs	r3, #2
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	22d2      	movs	r2, #210	; 0xd2
 8003fd4:	2106      	movs	r1, #6
 8003fd6:	4814      	ldr	r0, [pc, #80]	; (8004028 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003fd8:	f00c fe08 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003fdc:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	22d2      	movs	r2, #210	; 0xd2
 8003fea:	215d      	movs	r1, #93	; 0x5d
 8003fec:	480f      	ldr	r0, [pc, #60]	; (800402c <ToplevelMenu_DrawMainMenu+0x70>)
 8003fee:	f00c fdfd 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003ff2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	22d2      	movs	r2, #210	; 0xd2
 8004000:	21af      	movs	r1, #175	; 0xaf
 8004002:	480b      	ldr	r0, [pc, #44]	; (8004030 <ToplevelMenu_DrawMainMenu+0x74>)
 8004004:	f00c fdf2 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8004008:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	2302      	movs	r3, #2
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	22d2      	movs	r2, #210	; 0xd2
 8004016:	f44f 7182 	mov.w	r1, #260	; 0x104
 800401a:	4805      	ldr	r0, [pc, #20]	; (8004030 <ToplevelMenu_DrawMainMenu+0x74>)
 800401c:	f00c fde6 	bl	8010bec <ILI9341_Draw_Text>


}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08015f58 	.word	0x08015f58
 800402c:	08015f60 	.word	0x08015f60
 8004030:	08015f68 	.word	0x08015f68

08004034 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800403a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	2302      	movs	r3, #2
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	220a      	movs	r2, #10
 8004048:	210a      	movs	r1, #10
 800404a:	481a      	ldr	r0, [pc, #104]	; (80040b4 <ToplevelMenu_DrawOutputMenu+0x80>)
 800404c:	f00c fdce 	bl	8010bec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8004050:	f7fc ff52 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8004054:	f240 23fd 	movw	r3, #765	; 0x2fd
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	2302      	movs	r3, #2
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	22d2      	movs	r2, #210	; 0xd2
 8004062:	210f      	movs	r1, #15
 8004064:	4814      	ldr	r0, [pc, #80]	; (80040b8 <ToplevelMenu_DrawOutputMenu+0x84>)
 8004066:	f00c fdc1 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800406a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	2302      	movs	r3, #2
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2300      	movs	r3, #0
 8004076:	22d2      	movs	r2, #210	; 0xd2
 8004078:	2162      	movs	r1, #98	; 0x62
 800407a:	4810      	ldr	r0, [pc, #64]	; (80040bc <ToplevelMenu_DrawOutputMenu+0x88>)
 800407c:	f00c fdb6 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004080:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2302      	movs	r3, #2
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2300      	movs	r3, #0
 800408c:	22d2      	movs	r2, #210	; 0xd2
 800408e:	21b0      	movs	r1, #176	; 0xb0
 8004090:	480b      	ldr	r0, [pc, #44]	; (80040c0 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8004092:	f00c fdab 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8004096:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	2302      	movs	r3, #2
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	22d2      	movs	r2, #210	; 0xd2
 80040a4:	21f5      	movs	r1, #245	; 0xf5
 80040a6:	4807      	ldr	r0, [pc, #28]	; (80040c4 <ToplevelMenu_DrawOutputMenu+0x90>)
 80040a8:	f00c fda0 	bl	8010bec <ILI9341_Draw_Text>
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	08015f70 	.word	0x08015f70
 80040b8:	08015f78 	.word	0x08015f78
 80040bc:	08015f80 	.word	0x08015f80
 80040c0:	08015f88 	.word	0x08015f88
 80040c4:	08015f90 	.word	0x08015f90

080040c8 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8

	DM_DisplayInputTriggerStatus();
 80040ce:	f7fc ff33 	bl	8000f38 <DM_DisplayInputTriggerStatus>

	//
	// BREADCRUMB TRAIL
	//
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80040d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	2302      	movs	r3, #2
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2300      	movs	r3, #0
 80040de:	220a      	movs	r2, #10
 80040e0:	210a      	movs	r1, #10
 80040e2:	48c5      	ldr	r0, [pc, #788]	; (80043f8 <ToplevelMenu_DrawInputMenu+0x330>)
 80040e4:	f00c fd82 	bl	8010bec <ILI9341_Draw_Text>

	//
	// TRIGGER SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040e8:	2300      	movs	r3, #0
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	2302      	movs	r3, #2
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80040f4:	2232      	movs	r2, #50	; 0x32
 80040f6:	210a      	movs	r1, #10
 80040f8:	48c0      	ldr	r0, [pc, #768]	; (80043fc <ToplevelMenu_DrawInputMenu+0x334>)
 80040fa:	f00c fd77 	bl	8010bec <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 80040fe:	f002 fb4f 	bl	80067a0 <IT_GetTriggerStatus>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d016      	beq.n	8004136 <ToplevelMenu_DrawInputMenu+0x6e>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004108:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	2302      	movs	r3, #2
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	2232      	movs	r2, #50	; 0x32
 8004116:	2196      	movs	r1, #150	; 0x96
 8004118:	48b9      	ldr	r0, [pc, #740]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 800411a:	f00c fd67 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800411e:	2300      	movs	r3, #0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2302      	movs	r3, #2
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800412a:	2232      	movs	r2, #50	; 0x32
 800412c:	21c8      	movs	r1, #200	; 0xc8
 800412e:	48b5      	ldr	r0, [pc, #724]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 8004130:	f00c fd5c 	bl	8010bec <ILI9341_Draw_Text>
 8004134:	e015      	b.n	8004162 <ToplevelMenu_DrawInputMenu+0x9a>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004136:	2300      	movs	r3, #0
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	2302      	movs	r3, #2
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004142:	2232      	movs	r2, #50	; 0x32
 8004144:	2196      	movs	r1, #150	; 0x96
 8004146:	48ae      	ldr	r0, [pc, #696]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 8004148:	f00c fd50 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800414c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	2302      	movs	r3, #2
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	2232      	movs	r2, #50	; 0x32
 800415a:	21c8      	movs	r1, #200	; 0xc8
 800415c:	48a9      	ldr	r0, [pc, #676]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 800415e:	f00c fd45 	bl	8010bec <ILI9341_Draw_Text>
	}

	//
	// MODE SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004162:	2300      	movs	r3, #0
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	2302      	movs	r3, #2
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800416e:	2246      	movs	r2, #70	; 0x46
 8004170:	210a      	movs	r1, #10
 8004172:	48a5      	ldr	r0, [pc, #660]	; (8004408 <ToplevelMenu_DrawInputMenu+0x340>)
 8004174:	f00c fd3a 	bl	8010bec <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 8004178:	f002 faf6 	bl	8006768 <IT_GetActiveTriggerMode>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d122      	bne.n	80041c8 <ToplevelMenu_DrawInputMenu+0x100>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004182:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	2302      	movs	r3, #2
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2300      	movs	r3, #0
 800418e:	2246      	movs	r2, #70	; 0x46
 8004190:	2196      	movs	r1, #150	; 0x96
 8004192:	489e      	ldr	r0, [pc, #632]	; (800440c <ToplevelMenu_DrawInputMenu+0x344>)
 8004194:	f00c fd2a 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004198:	2300      	movs	r3, #0
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	2302      	movs	r3, #2
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041a4:	2246      	movs	r2, #70	; 0x46
 80041a6:	21c8      	movs	r1, #200	; 0xc8
 80041a8:	4899      	ldr	r0, [pc, #612]	; (8004410 <ToplevelMenu_DrawInputMenu+0x348>)
 80041aa:	f00c fd1f 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041ae:	2300      	movs	r3, #0
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2302      	movs	r3, #2
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041ba:	2246      	movs	r2, #70	; 0x46
 80041bc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80041c0:	4894      	ldr	r0, [pc, #592]	; (8004414 <ToplevelMenu_DrawInputMenu+0x34c>)
 80041c2:	f00c fd13 	bl	8010bec <ILI9341_Draw_Text>
 80041c6:	e04e      	b.n	8004266 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 80041c8:	f002 face 	bl	8006768 <IT_GetActiveTriggerMode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d122      	bne.n	8004218 <ToplevelMenu_DrawInputMenu+0x150>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041d2:	2300      	movs	r3, #0
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	2302      	movs	r3, #2
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041de:	2246      	movs	r2, #70	; 0x46
 80041e0:	2196      	movs	r1, #150	; 0x96
 80041e2:	488a      	ldr	r0, [pc, #552]	; (800440c <ToplevelMenu_DrawInputMenu+0x344>)
 80041e4:	f00c fd02 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80041e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	2302      	movs	r3, #2
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	2246      	movs	r2, #70	; 0x46
 80041f6:	21c8      	movs	r1, #200	; 0xc8
 80041f8:	4885      	ldr	r0, [pc, #532]	; (8004410 <ToplevelMenu_DrawInputMenu+0x348>)
 80041fa:	f00c fcf7 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041fe:	2300      	movs	r3, #0
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2302      	movs	r3, #2
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800420a:	2246      	movs	r2, #70	; 0x46
 800420c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004210:	4880      	ldr	r0, [pc, #512]	; (8004414 <ToplevelMenu_DrawInputMenu+0x34c>)
 8004212:	f00c fceb 	bl	8010bec <ILI9341_Draw_Text>
 8004216:	e026      	b.n	8004266 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_ADC)
 8004218:	f002 faa6 	bl	8006768 <IT_GetActiveTriggerMode>
 800421c:	4603      	mov	r3, r0
 800421e:	2b02      	cmp	r3, #2
 8004220:	d121      	bne.n	8004266 <ToplevelMenu_DrawInputMenu+0x19e>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004222:	2300      	movs	r3, #0
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	2302      	movs	r3, #2
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800422e:	2246      	movs	r2, #70	; 0x46
 8004230:	2196      	movs	r1, #150	; 0x96
 8004232:	4876      	ldr	r0, [pc, #472]	; (800440c <ToplevelMenu_DrawInputMenu+0x344>)
 8004234:	f00c fcda 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004238:	2300      	movs	r3, #0
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	2302      	movs	r3, #2
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004244:	2246      	movs	r2, #70	; 0x46
 8004246:	21c8      	movs	r1, #200	; 0xc8
 8004248:	4871      	ldr	r0, [pc, #452]	; (8004410 <ToplevelMenu_DrawInputMenu+0x348>)
 800424a:	f00c fccf 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800424e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	2302      	movs	r3, #2
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2300      	movs	r3, #0
 800425a:	2246      	movs	r2, #70	; 0x46
 800425c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004260:	486c      	ldr	r0, [pc, #432]	; (8004414 <ToplevelMenu_DrawInputMenu+0x34c>)
 8004262:	f00c fcc3 	bl	8010bec <ILI9341_Draw_Text>
	}

	//
	// LFO/COMPVOLT MODE DISPLAY
	//
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 8004266:	f002 fa7f 	bl	8006768 <IT_GetActiveTriggerMode>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d141      	bne.n	80042f4 <ToplevelMenu_DrawInputMenu+0x22c>
	{
		ILI9341_Draw_Text("LF MODE:", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004270:	2300      	movs	r3, #0
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	2302      	movs	r3, #2
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800427c:	225a      	movs	r2, #90	; 0x5a
 800427e:	210a      	movs	r1, #10
 8004280:	4865      	ldr	r0, [pc, #404]	; (8004418 <ToplevelMenu_DrawInputMenu+0x350>)
 8004282:	f00c fcb3 	bl	8010bec <ILI9341_Draw_Text>
		if(INPUT_TIMER->PSC > 128)
 8004286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	d916      	bls.n	80042be <ToplevelMenu_DrawInputMenu+0x1f6>
		{
			ILI9341_Draw_Text("ON", 	150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004290:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	2302      	movs	r3, #2
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	225a      	movs	r2, #90	; 0x5a
 800429e:	2196      	movs	r1, #150	; 0x96
 80042a0:	4857      	ldr	r0, [pc, #348]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 80042a2:	f00c fca3 	bl	8010bec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80042a6:	2300      	movs	r3, #0
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2302      	movs	r3, #2
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042b2:	225a      	movs	r2, #90	; 0x5a
 80042b4:	21c8      	movs	r1, #200	; 0xc8
 80042b6:	4853      	ldr	r0, [pc, #332]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 80042b8:	f00c fc98 	bl	8010bec <ILI9341_Draw_Text>
 80042bc:	e015      	b.n	80042ea <ToplevelMenu_DrawInputMenu+0x222>
		}
		else
		{
			ILI9341_Draw_Text("ON", 	150, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80042be:	2300      	movs	r3, #0
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	2302      	movs	r3, #2
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042ca:	225a      	movs	r2, #90	; 0x5a
 80042cc:	2196      	movs	r1, #150	; 0x96
 80042ce:	484c      	ldr	r0, [pc, #304]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 80042d0:	f00c fc8c 	bl	8010bec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80042d4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2302      	movs	r3, #2
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	225a      	movs	r2, #90	; 0x5a
 80042e2:	21c8      	movs	r1, #200	; 0xc8
 80042e4:	4847      	ldr	r0, [pc, #284]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 80042e6:	f00c fc81 	bl	8010bec <ILI9341_Draw_Text>
		}

		DM_DisplayInputTriggerTimerHertz(200, 17);
 80042ea:	2111      	movs	r1, #17
 80042ec:	20c8      	movs	r0, #200	; 0xc8
 80042ee:	f7fc fea9 	bl	8001044 <DM_DisplayInputTriggerTimerHertz>
 80042f2:	e038      	b.n	8004366 <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 80042f4:	f002 fa38 	bl	8006768 <IT_GetActiveTriggerMode>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d128      	bne.n	8004350 <ToplevelMenu_DrawInputMenu+0x288>
	{
		char comp_text[20] = "";
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8004310:	4842      	ldr	r0, [pc, #264]	; (800441c <ToplevelMenu_DrawInputMenu+0x354>)
 8004312:	f006 ffc7 	bl	800b2a4 <HAL_COMP_GetOutputLevel>
 8004316:	4603      	mov	r3, r0
 8004318:	1d38      	adds	r0, r7, #4
 800431a:	4a41      	ldr	r2, [pc, #260]	; (8004420 <ToplevelMenu_DrawInputMenu+0x358>)
 800431c:	2114      	movs	r1, #20
 800431e:	f00e f821 	bl	8012364 <sniprintf>
		ILI9341_Draw_Text(comp_text, 150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004322:	1d38      	adds	r0, r7, #4
 8004324:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	2302      	movs	r3, #2
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	225a      	movs	r2, #90	; 0x5a
 8004332:	2196      	movs	r1, #150	; 0x96
 8004334:	f00c fc5a 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("                ", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004338:	2300      	movs	r3, #0
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2302      	movs	r3, #2
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004344:	225a      	movs	r2, #90	; 0x5a
 8004346:	21c8      	movs	r1, #200	; 0xc8
 8004348:	4836      	ldr	r0, [pc, #216]	; (8004424 <ToplevelMenu_DrawInputMenu+0x35c>)
 800434a:	f00c fc4f 	bl	8010bec <ILI9341_Draw_Text>
 800434e:	e00a      	b.n	8004366 <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else
	{
		ILI9341_Draw_Text("                                    ", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004350:	2300      	movs	r3, #0
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	2302      	movs	r3, #2
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800435c:	225a      	movs	r2, #90	; 0x5a
 800435e:	210a      	movs	r1, #10
 8004360:	4831      	ldr	r0, [pc, #196]	; (8004428 <ToplevelMenu_DrawInputMenu+0x360>)
 8004362:	f00c fc43 	bl	8010bec <ILI9341_Draw_Text>
	}

	//
	// MENU BUTTON DISPLAY
	//
	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8004366:	f240 23fd 	movw	r3, #765	; 0x2fd
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	2302      	movs	r3, #2
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2300      	movs	r3, #0
 8004372:	22cc      	movs	r2, #204	; 0xcc
 8004374:	2114      	movs	r1, #20
 8004376:	482d      	ldr	r0, [pc, #180]	; (800442c <ToplevelMenu_DrawInputMenu+0x364>)
 8004378:	f00c fc38 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800437c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2302      	movs	r3, #2
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	22de      	movs	r2, #222	; 0xde
 800438a:	2114      	movs	r1, #20
 800438c:	4828      	ldr	r0, [pc, #160]	; (8004430 <ToplevelMenu_DrawInputMenu+0x368>)
 800438e:	f00c fc2d 	bl	8010bec <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8004392:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	2302      	movs	r3, #2
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2300      	movs	r3, #0
 800439e:	22cc      	movs	r2, #204	; 0xcc
 80043a0:	2168      	movs	r1, #104	; 0x68
 80043a2:	4824      	ldr	r0, [pc, #144]	; (8004434 <ToplevelMenu_DrawInputMenu+0x36c>)
 80043a4:	f00c fc22 	bl	8010bec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80043a8:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	2302      	movs	r3, #2
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2300      	movs	r3, #0
 80043b4:	22de      	movs	r2, #222	; 0xde
 80043b6:	2161      	movs	r1, #97	; 0x61
 80043b8:	481f      	ldr	r0, [pc, #124]	; (8004438 <ToplevelMenu_DrawInputMenu+0x370>)
 80043ba:	f00c fc17 	bl	8010bec <ILI9341_Draw_Text>

	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 80043be:	f002 f9d3 	bl	8006768 <IT_GetActiveTriggerMode>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d13b      	bne.n	8004440 <ToplevelMenu_DrawInputMenu+0x378>
	{
		// draw additional "LFO Mode" menu option
		ILI9341_Draw_Text("LF", 	190,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	2302      	movs	r3, #2
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	2300      	movs	r3, #0
 80043d4:	22cc      	movs	r2, #204	; 0xcc
 80043d6:	21be      	movs	r1, #190	; 0xbe
 80043d8:	4818      	ldr	r0, [pc, #96]	; (800443c <ToplevelMenu_DrawInputMenu+0x374>)
 80043da:	f00c fc07 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("MODE",	175, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	2302      	movs	r3, #2
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	22de      	movs	r2, #222	; 0xde
 80043ec:	21af      	movs	r1, #175	; 0xaf
 80043ee:	4812      	ldr	r0, [pc, #72]	; (8004438 <ToplevelMenu_DrawInputMenu+0x370>)
 80043f0:	f00c fbfc 	bl	8010bec <ILI9341_Draw_Text>

/*
	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 80043f4:	e03a      	b.n	800446c <ToplevelMenu_DrawInputMenu+0x3a4>
 80043f6:	bf00      	nop
 80043f8:	08015f98 	.word	0x08015f98
 80043fc:	08015fa0 	.word	0x08015fa0
 8004400:	08015fac 	.word	0x08015fac
 8004404:	08015fb0 	.word	0x08015fb0
 8004408:	08015fb4 	.word	0x08015fb4
 800440c:	08015fbc 	.word	0x08015fbc
 8004410:	08015fc0 	.word	0x08015fc0
 8004414:	08015fc8 	.word	0x08015fc8
 8004418:	08015fcc 	.word	0x08015fcc
 800441c:	200029f4 	.word	0x200029f4
 8004420:	08015fd8 	.word	0x08015fd8
 8004424:	08015fe0 	.word	0x08015fe0
 8004428:	08015ff4 	.word	0x08015ff4
 800442c:	0801601c 	.word	0x0801601c
 8004430:	08016020 	.word	0x08016020
 8004434:	08016028 	.word	0x08016028
 8004438:	0801602c 	.word	0x0801602c
 800443c:	08016034 	.word	0x08016034
		ILI9341_Draw_Text("   ", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004440:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	2302      	movs	r3, #2
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2300      	movs	r3, #0
 800444c:	22cc      	movs	r2, #204	; 0xcc
 800444e:	21b7      	movs	r1, #183	; 0xb7
 8004450:	4808      	ldr	r0, [pc, #32]	; (8004474 <ToplevelMenu_DrawInputMenu+0x3ac>)
 8004452:	f00c fbcb 	bl	8010bec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("    ",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004456:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	2302      	movs	r3, #2
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	22de      	movs	r2, #222	; 0xde
 8004464:	21ad      	movs	r1, #173	; 0xad
 8004466:	4804      	ldr	r0, [pc, #16]	; (8004478 <ToplevelMenu_DrawInputMenu+0x3b0>)
 8004468:	f00c fbc0 	bl	8010bec <ILI9341_Draw_Text>
}
 800446c:	bf00      	nop
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	08016038 	.word	0x08016038
 8004478:	08015f68 	.word	0x08015f68

0800447c <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <BiasMenu_getStatus+0x14>)
 8004482:	781b      	ldrb	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20001e55 	.word	0x20001e55

08004494 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004498:	f7fd f9e2 	bl	8001860 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <BiasMenuEntryHandler+0x30>)
 800449e:	2201      	movs	r2, #1
 80044a0:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <BiasMenuEntryHandler+0x34>)
 80044a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80044aa:	f001 f9dd 	bl	8005868 <BO_GetDcBiasEncoderValue>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <BiasMenuEntryHandler+0x34>)
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <BiasMenuEntryHandler+0x38>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80044bc:	230f      	movs	r3, #15
}
 80044be:	4618      	mov	r0, r3
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20001e55 	.word	0x20001e55
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	20001e57 	.word	0x20001e57

080044d0 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	3b01      	subs	r3, #1
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d82d      	bhi.n	800453e <BiasMenuInputHandler+0x6e>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <BiasMenuInputHandler+0x18>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	0800452d 	.word	0x0800452d
 80044f4:	0800453f 	.word	0x0800453f
 80044f8:	080044fd 	.word	0x080044fd
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80044fc:	2000      	movs	r0, #0
 80044fe:	f002 fda9 	bl	8007054 <SM_GetEncoderValue>
 8004502:	4603      	mov	r3, r0
 8004504:	4618      	mov	r0, r3
 8004506:	f001 f9bb 	bl	8005880 <BO_MapEncoderPositionToSignalOutput>
			break;
 800450a:	e019      	b.n	8004540 <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 800450c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004510:	f001 f9b6 	bl	8005880 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <BiasMenuInputHandler+0x80>)
 8004516:	f44f 7248 	mov.w	r2, #800	; 0x320
 800451a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800451c:	e010      	b.n	8004540 <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 800451e:	200a      	movs	r0, #10
 8004520:	f001 f9ae 	bl	8005880 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <BiasMenuInputHandler+0x80>)
 8004526:	220a      	movs	r2, #10
 8004528:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800452a:	e009      	b.n	8004540 <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 800452c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004530:	f001 f9a6 	bl	8005880 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <BiasMenuInputHandler+0x80>)
 8004536:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800453a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800453c:	e000      	b.n	8004540 <BiasMenuInputHandler+0x70>

		default:
			break;
 800453e:	bf00      	nop
	}


	eNewEvent = evIdle;
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <BiasMenuInputHandler+0x84>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8004546:	230f      	movs	r3, #15
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40012c00 	.word	0x40012c00
 8004554:	20001e57 	.word	0x20001e57

08004558 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <BiasMenuExitHandler+0x1c>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004562:	f7fd f97d 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004566:	4b04      	ldr	r3, [pc, #16]	; (8004578 <BiasMenuExitHandler+0x20>)
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800456c:	2301      	movs	r3, #1
}
 800456e:	4618      	mov	r0, r3
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20001e55 	.word	0x20001e55
 8004578:	20001e57 	.word	0x20001e57

0800457c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <EM_ProcessEvent+0xb4>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b0f      	cmp	r3, #15
 8004586:	d850      	bhi.n	800462a <EM_ProcessEvent+0xae>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <EM_ProcessEvent+0x14>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045d1 	.word	0x080045d1
 8004594:	080045d7 	.word	0x080045d7
 8004598:	080045dd 	.word	0x080045dd
 800459c:	080045e3 	.word	0x080045e3
 80045a0:	080045e9 	.word	0x080045e9
 80045a4:	080045ef 	.word	0x080045ef
 80045a8:	080045f5 	.word	0x080045f5
 80045ac:	080045fb 	.word	0x080045fb
 80045b0:	08004601 	.word	0x08004601
 80045b4:	0800462b 	.word	0x0800462b
 80045b8:	08004607 	.word	0x08004607
 80045bc:	0800460d 	.word	0x0800460d
 80045c0:	08004613 	.word	0x08004613
 80045c4:	0800461f 	.word	0x0800461f
 80045c8:	08004619 	.word	0x08004619
 80045cc:	08004625 	.word	0x08004625
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 80045d0:	f000 f830 	bl	8004634 <_ProcessIdleStateEvents>
			break;
 80045d4:	e02a      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 80045d6:	f000 f849 	bl	800466c <_ProcessTopLevelOutputMenuStateEvents>
			break;
 80045da:	e027      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 80045dc:	f000 f88c 	bl	80046f8 <_ProcessTopLevelInputMenuStateEvents>
			break;
 80045e0:	e024      	b.n	800462c <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 80045e2:	f000 f8b5 	bl	8004750 <_ProcessFuncMainMenuStateEvents>
			break;
 80045e6:	e021      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 80045e8:	f000 f8d8 	bl	800479c <_ProcessFuncSignalMenuStateEvents>
			break;
 80045ec:	e01e      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 80045ee:	f000 f8f1 	bl	80047d4 <_ProcessFuncAuxMenuStateEvents>
			break;
 80045f2:	e01b      	b.n	800462c <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 80045f4:	f000 f914 	bl	8004820 <_ProcessGainMainMenuStateEvents>
			break;
 80045f8:	e018      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 80045fa:	f000 f949 	bl	8004890 <_ProcessGainSignalMenuStateEvents>
			break;
 80045fe:	e015      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 8004600:	f000 f990 	bl	8004924 <_ProcessGainAuxMenuStateEvents>
			break;
 8004604:	e012      	b.n	800462c <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 8004606:	f000 f9a9 	bl	800495c <_ProcessFreqMainMenuStateEvents>
			break;
 800460a:	e00f      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 800460c:	f000 f9e4 	bl	80049d8 <_ProcessFreqPresetMenuStateEvents>
			break;
 8004610:	e00c      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 8004612:	f000 f9fd 	bl	8004a10 <_ProcessFreqAdjustMenuState>
			break;
 8004616:	e009      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 8004618:	f000 fa16 	bl	8004a48 <_ProcessFreqPrescalerMenuStateEvents>
			break;
 800461c:	e006      	b.n	800462c <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 800461e:	f000 fa2f 	bl	8004a80 <_ProcessFreqSweepMenuStateEvents>
			break;
 8004622:	e003      	b.n	800462c <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 8004624:	f000 fa76 	bl	8004b14 <_ProcessBiasMainMenuEvents>
			break;
 8004628:	e000      	b.n	800462c <EM_ProcessEvent+0xb0>

		default:
			break;
 800462a:	bf00      	nop
	}

}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20001e56 	.word	0x20001e56

08004634 <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <_ProcessIdleStateEvents+0x30>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 8004640:	f000 ff2e 	bl	80054a0 <ToplevelOutputMenuEntryHandler>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <_ProcessIdleStateEvents+0x34>)
 800464a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <_ProcessIdleStateEvents+0x30>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d105      	bne.n	8004660 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 8004654:	f000 ff48 	bl	80054e8 <ToplevelInputMenuEntryHandler>
 8004658:	4603      	mov	r3, r0
 800465a:	461a      	mov	r2, r3
 800465c:	4b02      	ldr	r3, [pc, #8]	; (8004668 <_ProcessIdleStateEvents+0x34>)
 800465e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 8004660:	bf00      	nop
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20001e57 	.word	0x20001e57
 8004668:	20001e56 	.word	0x20001e56

0800466c <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b06      	cmp	r3, #6
 8004676:	d105      	bne.n	8004684 <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 8004678:	f000 ff24 	bl	80054c4 <ToplevelOutputMenuExitHandler>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004682:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d108      	bne.n	800469e <_ProcessTopLevelOutputMenuStateEvents+0x32>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800468c:	2000      	movs	r0, #0
 800468e:	f000 fef7 	bl	8005480 <ToplevelMenu_setStatus>
		eNextState = FuncMainMenuEntryHandler();
 8004692:	f000 fce5 	bl	8005060 <FuncMainMenuEntryHandler>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 800469c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d108      	bne.n	80046b8 <_ProcessTopLevelOutputMenuStateEvents+0x4c>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046a6:	2000      	movs	r0, #0
 80046a8:	f000 feea 	bl	8005480 <ToplevelMenu_setStatus>
		eNextState = FreqMainMenuEntryHandler();
 80046ac:	f000 fbd0 	bl	8004e50 <FreqMainMenuEntryHandler>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80046b6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d108      	bne.n	80046d2 <_ProcessTopLevelOutputMenuStateEvents+0x66>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f000 fedd 	bl	8005480 <ToplevelMenu_setStatus>
		eNextState = GainMainMenuEntryHandler();
 80046c6:	f000 fdc1 	bl	800524c <GainMainMenuEntryHandler>
 80046ca:	4603      	mov	r3, r0
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80046d0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d108      	bne.n	80046ec <_ProcessTopLevelOutputMenuStateEvents+0x80>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046da:	2000      	movs	r0, #0
 80046dc:	f000 fed0 	bl	8005480 <ToplevelMenu_setStatus>
		eNextState = BiasMenuEntryHandler();
 80046e0:	f7ff fed8 	bl	8004494 <BiasMenuEntryHandler>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80046ea:	701a      	strb	r2, [r3, #0]
	}
}
 80046ec:	bf00      	nop
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20001e57 	.word	0x20001e57
 80046f4:	20001e56 	.word	0x20001e56

080046f8 <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80046fc:	4b12      	ldr	r3, [pc, #72]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b06      	cmp	r3, #6
 8004702:	d105      	bne.n	8004710 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 8004704:	f000 ff24 	bl	8005550 <ToplevelInputMenuExitHandler>
 8004708:	4603      	mov	r3, r0
 800470a:	461a      	mov	r2, r3
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <_ProcessTopLevelInputMenuStateEvents+0x54>)
 800470e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d108      	bne.n	800472a <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fef5 	bl	800550c <ToplevelInputMenuInputHandler>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004728:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d108      	bne.n	8004744 <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fee8 	bl	800550c <ToplevelInputMenuInputHandler>
 800473c:	4603      	mov	r3, r0
 800473e:	461a      	mov	r2, r3
 8004740:	4b02      	ldr	r3, [pc, #8]	; (800474c <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004742:	701a      	strb	r2, [r3, #0]
	}
}
 8004744:	bf00      	nop
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20001e57 	.word	0x20001e57
 800474c:	20001e56 	.word	0x20001e56

08004750 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <_ProcessFuncMainMenuStateEvents+0x44>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b06      	cmp	r3, #6
 800475a:	d105      	bne.n	8004768 <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 800475c:	f000 fc92 	bl	8005084 <FuncMainMenuExitHandler>
 8004760:	4603      	mov	r3, r0
 8004762:	461a      	mov	r2, r3
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004766:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <_ProcessFuncMainMenuStateEvents+0x44>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004770:	f000 fc9c 	bl	80050ac <FuncSignalMenuEntryHandler>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <_ProcessFuncMainMenuStateEvents+0x48>)
 800477a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <_ProcessFuncMainMenuStateEvents+0x44>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d105      	bne.n	8004790 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 8004784:	f000 fcd6 	bl	8005134 <FuncAuxMenuEntryHandler>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	4b02      	ldr	r3, [pc, #8]	; (8004798 <_ProcessFuncMainMenuStateEvents+0x48>)
 800478e:	701a      	strb	r2, [r3, #0]
	}
}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20001e57 	.word	0x20001e57
 8004798:	20001e56 	.word	0x20001e56

0800479c <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <_ProcessFuncSignalMenuStateEvents+0x30>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d105      	bne.n	80047b4 <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 80047a8:	f000 fc9e 	bl	80050e8 <FuncSignalMenuInputHandler>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80047b2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <_ProcessFuncSignalMenuStateEvents+0x30>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b06      	cmp	r3, #6
 80047ba:	d105      	bne.n	80047c8 <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 80047bc:	f000 fca6 	bl	800510c <FuncSignalMenuExitHandler>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	4b02      	ldr	r3, [pc, #8]	; (80047d0 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80047c6:	701a      	strb	r2, [r3, #0]
	}
}
 80047c8:	bf00      	nop
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20001e57 	.word	0x20001e57
 80047d0:	20001e56 	.word	0x20001e56

080047d4 <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b05      	cmp	r3, #5
 80047de:	d105      	bne.n	80047ec <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 80047e0:	f000 fcc6 	bl	8005170 <FuncAuxMenuInputHandler>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461a      	mov	r2, r3
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <_ProcessFuncAuxMenuStateEvents+0x48>)
 80047ea:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d105      	bne.n	8004800 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 80047f4:	f000 fd0a 	bl	800520c <FuncAuxMenuExitHandler>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <_ProcessFuncAuxMenuStateEvents+0x48>)
 80047fe:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <_ProcessFuncAuxMenuStateEvents+0x44>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d105      	bne.n	8004814 <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 8004808:	f000 fcee 	bl	80051e8 <FuncAuxToggleDutyMode>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	4b02      	ldr	r3, [pc, #8]	; (800481c <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004812:	701a      	strb	r2, [r3, #0]
	}

}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20001e57 	.word	0x20001e57
 800481c:	20001e56 	.word	0x20001e56

08004820 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <_ProcessGainMainMenuStateEvents+0x68>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b06      	cmp	r3, #6
 800482c:	d108      	bne.n	8004840 <_ProcessGainMainMenuStateEvents+0x20>
	{
		eNextState = GainMainMenuExitHandler();
 800482e:	f000 fd1f 	bl	8005270 <GainMainMenuExitHandler>
 8004832:	4603      	mov	r3, r0
 8004834:	461a      	mov	r2, r3
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <_ProcessGainMainMenuStateEvents+0x6c>)
 8004838:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800483a:	2002      	movs	r0, #2
 800483c:	f000 fe20 	bl	8005480 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <_ProcessGainMainMenuStateEvents+0x68>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <_ProcessGainMainMenuStateEvents+0x34>
	{
		eNextState = GainSignalMenuEntryHandler();
 8004848:	f000 fd24 	bl	8005294 <GainSignalMenuEntryHandler>
 800484c:	4603      	mov	r3, r0
 800484e:	461a      	mov	r2, r3
 8004850:	4b0e      	ldr	r3, [pc, #56]	; (800488c <_ProcessGainMainMenuStateEvents+0x6c>)
 8004852:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <_ProcessGainMainMenuStateEvents+0x68>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d110      	bne.n	800487e <_ProcessGainMainMenuStateEvents+0x5e>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800485c:	2001      	movs	r0, #1
 800485e:	f002 f97d 	bl	8006b5c <SM_GetOutputChannel>
 8004862:	4603      	mov	r3, r0
 8004864:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d005      	beq.n	800487e <_ProcessGainMainMenuStateEvents+0x5e>
			eNextState = GainAuxMenuEntryHandler();
 8004872:	f000 fda5 	bl	80053c0 <GainAuxMenuEntryHandler>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <_ProcessGainMainMenuStateEvents+0x6c>)
 800487c:	701a      	strb	r2, [r3, #0]
	}
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20001e57 	.word	0x20001e57
 800488c:	20001e56 	.word	0x20001e56

08004890 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004894:	4b21      	ldr	r3, [pc, #132]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b05      	cmp	r3, #5
 800489a:	d106      	bne.n	80048aa <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 800489c:	2005      	movs	r0, #5
 800489e:	f000 fd2b 	bl	80052f8 <GainSignalMenuInputHandler>
 80048a2:	4603      	mov	r3, r0
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048a8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b06      	cmp	r3, #6
 80048b0:	d105      	bne.n	80048be <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 80048b2:	f000 fd73 	bl	800539c <GainSignalMenuExitHandler>
 80048b6:	4603      	mov	r3, r0
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b19      	ldr	r3, [pc, #100]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048bc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80048be:	4b17      	ldr	r3, [pc, #92]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d106      	bne.n	80048d4 <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 80048c6:	2001      	movs	r0, #1
 80048c8:	f000 fd16 	bl	80052f8 <GainSignalMenuInputHandler>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	4b13      	ldr	r3, [pc, #76]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048d2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d106      	bne.n	80048ea <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 80048dc:	2002      	movs	r0, #2
 80048de:	f000 fd0b 	bl	80052f8 <GainSignalMenuInputHandler>
 80048e2:	4603      	mov	r3, r0
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048e8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80048ea:	4b0c      	ldr	r3, [pc, #48]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d106      	bne.n	8004900 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 80048f2:	2003      	movs	r0, #3
 80048f4:	f000 fd00 	bl	80052f8 <GainSignalMenuInputHandler>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048fe:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d106      	bne.n	8004916 <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 8004908:	2004      	movs	r0, #4
 800490a:	f000 fcf5 	bl	80052f8 <GainSignalMenuInputHandler>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
 8004912:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004914:	701a      	strb	r2, [r3, #0]
	}

}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20001e57 	.word	0x20001e57
 8004920:	20001e56 	.word	0x20001e56

08004924 <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <_ProcessGainAuxMenuStateEvents+0x30>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b05      	cmp	r3, #5
 800492e:	d105      	bne.n	800493c <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 8004930:	f000 fd76 	bl	8005420 <GainAuxMenuInputHandler>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <_ProcessGainAuxMenuStateEvents+0x34>)
 800493a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <_ProcessGainAuxMenuStateEvents+0x30>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b06      	cmp	r3, #6
 8004942:	d105      	bne.n	8004950 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 8004944:	f000 fd7e 	bl	8005444 <GainAuxMenuExitHandler>
 8004948:	4603      	mov	r3, r0
 800494a:	461a      	mov	r2, r3
 800494c:	4b02      	ldr	r3, [pc, #8]	; (8004958 <_ProcessGainAuxMenuStateEvents+0x34>)
 800494e:	701a      	strb	r2, [r3, #0]
	}
}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20001e57 	.word	0x20001e57
 8004958:	20001e56 	.word	0x20001e56

0800495c <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b06      	cmp	r3, #6
 8004966:	d108      	bne.n	800497a <_ProcessFreqMainMenuStateEvents+0x1e>
	{
		eNextState = FreqMainMenuExitHandler();
 8004968:	f000 fa84 	bl	8004e74 <FreqMainMenuExitHandler>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004972:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004974:	2002      	movs	r0, #2
 8004976:	f000 fd83 	bl	8005480 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d105      	bne.n	800498e <_ProcessFreqMainMenuStateEvents+0x32>
	{
		eNextState = FreqPresetMenuEntryHandler();
 8004982:	f000 fa8f 	bl	8004ea4 <FreqPresetMenuEntryHandler>
 8004986:	4603      	mov	r3, r0
 8004988:	461a      	mov	r2, r3
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 800498c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d105      	bne.n	80049a2 <_ProcessFreqMainMenuStateEvents+0x46>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 8004996:	f000 fad5 	bl	8004f44 <FreqAdjustMenuEntryHandler>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 80049a0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d105      	bne.n	80049b6 <_ProcessFreqMainMenuStateEvents+0x5a>
	{
		eNextState = FreqSweepMenuEntryHandler();
 80049aa:	f000 f905 	bl	8004bb8 <FreqSweepMenuEntryHandler>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 80049b4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d105      	bne.n	80049ca <_ProcessFreqMainMenuStateEvents+0x6e>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 80049be:	f000 fafd 	bl	8004fbc <FreqPrescalerMenuEntryHandler>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 80049c8:	701a      	strb	r2, [r3, #0]
	}
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20001e57 	.word	0x20001e57
 80049d4:	20001e56 	.word	0x20001e56

080049d8 <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d105      	bne.n	80049f0 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 80049e4:	f000 fa8a 	bl	8004efc <FreqPresetMenuInputHandler>
 80049e8:	4603      	mov	r3, r0
 80049ea:	461a      	mov	r2, r3
 80049ec:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <_ProcessFreqPresetMenuStateEvents+0x34>)
 80049ee:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d105      	bne.n	8004a04 <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 80049f8:	f000 fa92 	bl	8004f20 <FreqPresetMenuExitHandler>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <_ProcessFreqPresetMenuStateEvents+0x34>)
 8004a02:	701a      	strb	r2, [r3, #0]
	}
}
 8004a04:	bf00      	nop
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20001e57 	.word	0x20001e57
 8004a0c:	20001e56 	.word	0x20001e56

08004a10 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <_ProcessFreqAdjustMenuState+0x30>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d105      	bne.n	8004a28 <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 8004a1c:	f000 fab0 	bl	8004f80 <FreqAdjustMenuInputHandler>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <_ProcessFreqAdjustMenuState+0x34>)
 8004a26:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <_ProcessFreqAdjustMenuState+0x30>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b06      	cmp	r3, #6
 8004a2e:	d105      	bne.n	8004a3c <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 8004a30:	f000 fab2 	bl	8004f98 <FreqAdjustMenuExitHandler>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <_ProcessFreqAdjustMenuState+0x34>)
 8004a3a:	701a      	strb	r2, [r3, #0]
	}
}
 8004a3c:	bf00      	nop
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20001e57 	.word	0x20001e57
 8004a44:	20001e56 	.word	0x20001e56

08004a48 <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d105      	bne.n	8004a60 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 8004a54:	f000 face 	bl	8004ff4 <FreqPrescalerMenuInputHandler>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004a5e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b06      	cmp	r3, #6
 8004a66:	d105      	bne.n	8004a74 <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 8004a68:	f000 fad0 	bl	800500c <FreqPrescalerMenuExitHandler>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004a72:	701a      	strb	r2, [r3, #0]
	}
}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20001e57 	.word	0x20001e57
 8004a7c:	20001e56 	.word	0x20001e56

08004a80 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004a84:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004a8c:	2007      	movs	r0, #7
 8004a8e:	f000 f8e9 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004a98:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004a9a:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d106      	bne.n	8004ab0 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8004aa2:	2008      	movs	r0, #8
 8004aa4:	f000 f8de 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004aae:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004ab0:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d106      	bne.n	8004ac6 <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004ab8:	2009      	movs	r0, #9
 8004aba:	f000 f8d3 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004ac4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004ac6:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d106      	bne.n	8004adc <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8004ace:	200a      	movs	r0, #10
 8004ad0:	f000 f8c8 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004ada:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d106      	bne.n	8004af2 <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8004ae4:	200b      	movs	r0, #11
 8004ae6:	f000 f8bd 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004af0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d105      	bne.n	8004b06 <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 8004afa:	f000 f989 	bl	8004e10 <FreqSweepMenuExitHandler>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004b04:	701a      	strb	r2, [r3, #0]
	}

}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20001e57 	.word	0x20001e57
 8004b10:	20001e56 	.word	0x20001e56

08004b14 <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b05      	cmp	r3, #5
 8004b1e:	d106      	bne.n	8004b2e <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 8004b20:	2005      	movs	r0, #5
 8004b22:	f7ff fcd5 	bl	80044d0 <BiasMenuInputHandler>
 8004b26:	4603      	mov	r3, r0
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b2c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b06      	cmp	r3, #6
 8004b34:	d108      	bne.n	8004b48 <_ProcessBiasMainMenuEvents+0x34>
	{
		eNextState = BiasMenuExitHandler();
 8004b36:	f7ff fd0f 	bl	8004558 <BiasMenuExitHandler>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b40:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004b42:	2002      	movs	r0, #2
 8004b44:	f000 fc9c 	bl	8005480 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004b48:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <_ProcessBiasMainMenuEvents+0x4a>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 8004b50:	2001      	movs	r0, #1
 8004b52:	f7ff fcbd 	bl	80044d0 <BiasMenuInputHandler>
 8004b56:	4603      	mov	r3, r0
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b5c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d106      	bne.n	8004b74 <_ProcessBiasMainMenuEvents+0x60>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 8004b66:	2002      	movs	r0, #2
 8004b68:	f7ff fcb2 	bl	80044d0 <BiasMenuInputHandler>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b72:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d106      	bne.n	8004b8a <_ProcessBiasMainMenuEvents+0x76>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	f7ff fca7 	bl	80044d0 <BiasMenuInputHandler>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b88:	701a      	strb	r2, [r3, #0]
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20001e57 	.word	0x20001e57
 8004b94:	20001e56 	.word	0x20001e56

08004b98 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004ba2:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <EM_SetNewEvent+0x1c>)
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	7013      	strb	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	20001e57 	.word	0x20001e57

08004bb8 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004bbc:	f7fc fe50 	bl	8001860 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004bc0:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <FreqSweepMenuEntryHandler+0x94>)
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bcc:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <FreqSweepMenuEntryHandler+0x98>)
 8004bce:	edd3 7a00 	vldr	s15, [r3]
 8004bd2:	eeb4 7a67 	vcmp.f32	s14, s15
 8004bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bda:	d008      	beq.n	8004bee <FreqSweepMenuEntryHandler+0x36>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <FreqSweepMenuEntryHandler+0x94>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be8:	4b19      	ldr	r3, [pc, #100]	; (8004c50 <FreqSweepMenuEntryHandler+0x98>)
 8004bea:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <FreqSweepMenuEntryHandler+0x98>)
 8004bf0:	edd3 7a00 	vldr	s15, [r3]
 8004bf4:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004bf8:	eef4 7a47 	vcmp.f32	s15, s14
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	d101      	bne.n	8004c06 <FreqSweepMenuEntryHandler+0x4e>
	{
		FS_SetSweepModeDown();
 8004c02:	f001 f88f 	bl	8005d24 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004c06:	2000      	movs	r0, #0
 8004c08:	f001 f8e6 	bl	8005dd8 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f001 f943 	bl	8005e98 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004c12:	f001 f97d 	bl	8005f10 <FS_GetCalculatedSweepFrequencyInHertz>
 8004c16:	eef0 7a40 	vmov.f32	s15, s0
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <FreqSweepMenuEntryHandler+0x9c>)
 8004c1c:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <FreqSweepMenuEntryHandler+0xa0>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004c26:	2009      	movs	r0, #9
 8004c28:	f000 f81c 	bl	8004c64 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <FreqSweepMenuEntryHandler+0xa0>)
 8004c2e:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004c32:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <FreqSweepMenuEntryHandler+0xa0>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004c3a:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <FreqSweepMenuEntryHandler+0xa4>)
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <FreqSweepMenuEntryHandler+0xa8>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004c46:	230d      	movs	r3, #13
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	20000128 	.word	0x20000128
 8004c54:	20002270 	.word	0x20002270
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	20001e5a 	.word	0x20001e5a
 8004c60:	20001e57 	.word	0x20001e57

08004c64 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	3b07      	subs	r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	f200 80b2 	bhi.w	8004ddc <FreqSweepMenuInputHandler+0x178>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <FreqSweepMenuInputHandler+0x1c>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004c95 	.word	0x08004c95
 8004c84:	08004caf 	.word	0x08004caf
 8004c88:	08004dcd 	.word	0x08004dcd
 8004c8c:	08004dd5 	.word	0x08004dd5
 8004c90:	08004ce9 	.word	0x08004ce9
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004c94:	4b56      	ldr	r3, [pc, #344]	; (8004df0 <FreqSweepMenuInputHandler+0x18c>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a55      	ldr	r2, [pc, #340]	; (8004df0 <FreqSweepMenuInputHandler+0x18c>)
 8004c9a:	f083 0301 	eor.w	r3, r3, #1
 8004c9e:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004ca0:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <FreqSweepMenuInputHandler+0x18c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <FreqSweepMenuInputHandler+0x18c>)
 8004ca6:	f083 0301 	eor.w	r3, r3, #1
 8004caa:	6013      	str	r3, [r2, #0]
			break;
 8004cac:	e097      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8004cae:	4b51      	ldr	r3, [pc, #324]	; (8004df4 <FreqSweepMenuInputHandler+0x190>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	f083 0301 	eor.w	r3, r3, #1
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	4b4e      	ldr	r3, [pc, #312]	; (8004df4 <FreqSweepMenuInputHandler+0x190>)
 8004cba:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	; (8004df4 <FreqSweepMenuInputHandler+0x190>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d004      	beq.n	8004cce <FreqSweepMenuInputHandler+0x6a>
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d008      	beq.n	8004cda <FreqSweepMenuInputHandler+0x76>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <FreqSweepMenuInputHandler+0x70>
 8004ccc:	e006      	b.n	8004cdc <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 8004cce:	f001 f829 	bl	8005d24 <FS_SetSweepModeDown>
					break;
 8004cd2:	e003      	b.n	8004cdc <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 8004cd4:	f001 f856 	bl	8005d84 <FS_SetSweepModeUp>
					break;
 8004cd8:	e000      	b.n	8004cdc <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8004cda:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004cdc:	4b46      	ldr	r3, [pc, #280]	; (8004df8 <FreqSweepMenuInputHandler+0x194>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 f879 	bl	8005dd8 <FS_SetEncoderControlMode>

			break;
 8004ce6:	e07a      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004ce8:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <FreqSweepMenuInputHandler+0x194>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <FreqSweepMenuInputHandler+0x92>
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d00b      	beq.n	8004d0c <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004cf4:	e073      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f001 f8ce 	bl	8005e98 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004cfc:	f001 f908 	bl	8005f10 <FS_GetCalculatedSweepFrequencyInHertz>
 8004d00:	eef0 7a40 	vmov.f32	s15, s0
 8004d04:	4b3d      	ldr	r3, [pc, #244]	; (8004dfc <FreqSweepMenuInputHandler+0x198>)
 8004d06:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004d0a:	e05e      	b.n	8004dca <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004d0c:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <FreqSweepMenuInputHandler+0x190>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <FreqSweepMenuInputHandler+0xb6>
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d02a      	beq.n	8004d6e <FreqSweepMenuInputHandler+0x10a>
							break;
 8004d18:	e056      	b.n	8004dc8 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004d1a:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d803      	bhi.n	8004d2a <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004d22:	4b37      	ldr	r3, [pc, #220]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d24:	220d      	movs	r2, #13
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004d28:	e04e      	b.n	8004dc8 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004d2a:	4b35      	ldr	r3, [pc, #212]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d36:	4b33      	ldr	r3, [pc, #204]	; (8004e04 <FreqSweepMenuInputHandler+0x1a0>)
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d44:	dd09      	ble.n	8004d5a <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8004d46:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <FreqSweepMenuInputHandler+0x1a0>)
 8004d48:	edd3 7a00 	vldr	s15, [r3]
 8004d4c:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d52:	ee17 2a90 	vmov	r2, s15
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004d58:	e036      	b.n	8004dc8 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8004d5a:	4b29      	ldr	r3, [pc, #164]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	4b28      	ldr	r3, [pc, #160]	; (8004e08 <FreqSweepMenuInputHandler+0x1a4>)
 8004d68:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004d6c:	e02c      	b.n	8004dc8 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d904      	bls.n	8004d84 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004d7a:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004d82:	e020      	b.n	8004dc6 <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d90:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <FreqSweepMenuInputHandler+0x1a4>)
 8004d92:	edd3 7a00 	vldr	s15, [r3]
 8004d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9e:	d509      	bpl.n	8004db4 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <FreqSweepMenuInputHandler+0x1a4>)
 8004da2:	edd3 7a00 	vldr	s15, [r3]
 8004da6:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dac:	ee17 2a90 	vmov	r2, s15
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004db2:	e008      	b.n	8004dc6 <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc0:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <FreqSweepMenuInputHandler+0x1a0>)
 8004dc2:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004dc6:	bf00      	nop
					break;
 8004dc8:	bf00      	nop
			break;
 8004dca:	e008      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004dcc:	2000      	movs	r0, #0
 8004dce:	f001 f803 	bl	8005dd8 <FS_SetEncoderControlMode>

			break;
 8004dd2:	e004      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f000 ffff 	bl	8005dd8 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004dda:	e000      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004ddc:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <FreqSweepMenuInputHandler+0x1a8>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004de4:	230d      	movs	r3, #13
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	20001e58 	.word	0x20001e58
 8004df8:	20001e59 	.word	0x20001e59
 8004dfc:	20002270 	.word	0x20002270
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	20000128 	.word	0x20000128
 8004e08:	20000124 	.word	0x20000124
 8004e0c:	20001e57 	.word	0x20001e57

08004e10 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e14:	f7fc fd24 	bl	8001860 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <FreqSweepMenuExitHandler+0x34>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <FreqSweepMenuExitHandler+0x34>)
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <FreqSweepMenuExitHandler+0x34>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a06      	ldr	r2, [pc, #24]	; (8004e44 <FreqSweepMenuExitHandler+0x34>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <FreqSweepMenuExitHandler+0x38>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <FreqSweepMenuExitHandler+0x3c>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e3c:	230a      	movs	r3, #10
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	20001e5a 	.word	0x20001e5a
 8004e4c:	20001e57 	.word	0x20001e57

08004e50 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e54:	f7fc fd04 	bl	8001860 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <FreqMainMenuEntryHandler+0x1c>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004e5e:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <FreqMainMenuEntryHandler+0x20>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e64:	230a      	movs	r3, #10
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20001e5a 	.word	0x20001e5a
 8004e70:	20001e57 	.word	0x20001e57

08004e74 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <FreqMainMenuExitHandler+0x24>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <FreqMainMenuExitHandler+0x28>)
 8004e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004e86:	f7fc fceb 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <FreqMainMenuExitHandler+0x2c>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004e90:	2301      	movs	r3, #1
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20001e5a 	.word	0x20001e5a
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	20001e57 	.word	0x20001e57

08004ea4 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004eaa:	f7fc fcd9 	bl	8001860 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004eae:	f000 ff2d 	bl	8005d0c <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <FreqPresetMenuEntryHandler+0x48>)
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004eb8:	f000 feda 	bl	8005c70 <FreqO_GetFPresetObject>
 8004ebc:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <FreqPresetMenuEntryHandler+0x4c>)
 8004ec6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004ecc:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <FreqPresetMenuEntryHandler+0x4c>)
 8004ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ed4:	e002      	b.n	8004edc <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004ed6:	4807      	ldr	r0, [pc, #28]	; (8004ef4 <FreqPresetMenuEntryHandler+0x50>)
 8004ed8:	f7fc fd08 	bl	80018ec <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <FreqPresetMenuEntryHandler+0x54>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004ee2:	230b      	movs	r3, #11
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20001e5a 	.word	0x20001e5a
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	0801603c 	.word	0x0801603c
 8004ef8:	20001e57 	.word	0x20001e57

08004efc <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f00:	2000      	movs	r0, #0
 8004f02:	f002 f8a7 	bl	8007054 <SM_GetEncoderValue>
 8004f06:	4603      	mov	r3, r0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fd8d 	bl	8005a28 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004f0e:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <FreqPresetMenuInputHandler+0x20>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004f14:	230b      	movs	r3, #11
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20001e57 	.word	0x20001e57

08004f20 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f24:	f7fc fc9c 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <FreqPresetMenuExitHandler+0x1c>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <FreqPresetMenuExitHandler+0x20>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004f34:	230a      	movs	r3, #10
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20001e5a 	.word	0x20001e5a
 8004f40:	20001e57 	.word	0x20001e57

08004f44 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f48:	f7fc fc8a 	bl	8001860 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <FreqAdjustMenuEntryHandler+0x2c>)
 8004f4e:	2203      	movs	r2, #3
 8004f50:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <FreqAdjustMenuEntryHandler+0x30>)
 8004f54:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <FreqAdjustMenuEntryHandler+0x34>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <FreqAdjustMenuEntryHandler+0x34>)
 8004f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <FreqAdjustMenuEntryHandler+0x38>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004f68:	230c      	movs	r3, #12
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20001e5a 	.word	0x20001e5a
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	20001e57 	.word	0x20001e57

08004f80 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004f84:	f000 fe20 	bl	8005bc8 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004f88:	4b02      	ldr	r3, [pc, #8]	; (8004f94 <FreqAdjustMenuInputHandler+0x14>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004f8e:	230c      	movs	r3, #12
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20001e57 	.word	0x20001e57

08004f98 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f9c:	f7fc fc60 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <FreqAdjustMenuExitHandler+0x1c>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004fa6:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <FreqAdjustMenuExitHandler+0x20>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004fac:	230a      	movs	r3, #10
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20001e5a 	.word	0x20001e5a
 8004fb8:	20001e57 	.word	0x20001e57

08004fbc <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004fc0:	f7fc fc4e 	bl	8001860 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESCALER_MENU;
 8004fc4:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <FreqPrescalerMenuEntryHandler+0x2c>)
 8004fc6:	2205      	movs	r2, #5
 8004fc8:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004fca:	4b08      	ldr	r3, [pc, #32]	; (8004fec <FreqPrescalerMenuEntryHandler+0x30>)
 8004fcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <FreqPrescalerMenuEntryHandler+0x30>)
 8004fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fd8:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <FreqPrescalerMenuEntryHandler+0x34>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004fe0:	230e      	movs	r3, #14
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20001e5a 	.word	0x20001e5a
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	20001e57 	.word	0x20001e57

08004ff4 <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004ff8:	f000 fe12 	bl	8005c20 <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004ffc:	4b02      	ldr	r3, [pc, #8]	; (8005008 <FreqPrescalerMenuInputHandler+0x14>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8005002:	230e      	movs	r3, #14
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20001e57 	.word	0x20001e57

0800500c <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005010:	f7fc fc26 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8005014:	4b04      	ldr	r3, [pc, #16]	; (8005028 <FreqPrescalerMenuExitHandler+0x1c>)
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800501a:	4b04      	ldr	r3, [pc, #16]	; (800502c <FreqPrescalerMenuExitHandler+0x20>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8005020:	230a      	movs	r3, #10
}
 8005022:	4618      	mov	r0, r3
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20001e5a 	.word	0x20001e5a
 800502c:	20001e57 	.word	0x20001e57

08005030 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8005034:	4b03      	ldr	r3, [pc, #12]	; (8005044 <FreqMenu_getStatus+0x14>)
 8005036:	781b      	ldrb	r3, [r3, #0]
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20001e5a 	.word	0x20001e5a

08005048 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <FuncMenu_getStatus+0x14>)
 800504e:	781b      	ldrb	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20001e5b 	.word	0x20001e5b

08005060 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005064:	f7fc fbfc 	bl	8001860 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8005068:	4b04      	ldr	r3, [pc, #16]	; (800507c <FuncMainMenuEntryHandler+0x1c>)
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800506e:	4b04      	ldr	r3, [pc, #16]	; (8005080 <FuncMainMenuEntryHandler+0x20>)
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8005074:	2303      	movs	r3, #3
}
 8005076:	4618      	mov	r0, r3
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20001e5b 	.word	0x20001e5b
 8005080:	20001e57 	.word	0x20001e57

08005084 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <FuncMainMenuExitHandler+0x20>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800508e:	2002      	movs	r0, #2
 8005090:	f000 f9f6 	bl	8005480 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8005094:	f7fc fbe4 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8005098:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <FuncMainMenuExitHandler+0x24>)
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800509e:	2301      	movs	r3, #1
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20001e5b 	.word	0x20001e5b
 80050a8:	20001e57 	.word	0x20001e57

080050ac <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050b0:	f7fc fbd6 	bl	8001860 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 80050b4:	f000 ff5a 	bl	8005f6c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <FuncSignalMenuEntryHandler+0x30>)
 80050ba:	2202      	movs	r2, #2
 80050bc:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 80050be:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <FuncSignalMenuEntryHandler+0x34>)
 80050c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80050c6:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <FuncSignalMenuEntryHandler+0x34>)
 80050c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <FuncSignalMenuEntryHandler+0x38>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80050d4:	2304      	movs	r3, #4
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20001e5b 	.word	0x20001e5b
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	20001e57 	.word	0x20001e57

080050e8 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80050ec:	2000      	movs	r0, #0
 80050ee:	f001 ffb1 	bl	8007054 <SM_GetEncoderValue>
 80050f2:	4603      	mov	r3, r0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 ff45 	bl	8005f84 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 80050fa:	4b03      	ldr	r3, [pc, #12]	; (8005108 <FuncSignalMenuInputHandler+0x20>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8005100:	2304      	movs	r3, #4
}
 8005102:	4618      	mov	r0, r3
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20001e57 	.word	0x20001e57

0800510c <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <FuncSignalMenuExitHandler+0x20>)
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8005116:	f7fc fba3 	bl	8001860 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 800511a:	f002 f83d 	bl	8007198 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 800511e:	4b04      	ldr	r3, [pc, #16]	; (8005130 <FuncSignalMenuExitHandler+0x24>)
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8005124:	2303      	movs	r3, #3
}
 8005126:	4618      	mov	r0, r3
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20001e5b 	.word	0x20001e5b
 8005130:	20001e57 	.word	0x20001e57

08005134 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005138:	f7fc fb92 	bl	8001860 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 800513c:	f000 ff16 	bl	8005f6c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8005140:	4b08      	ldr	r3, [pc, #32]	; (8005164 <FuncAuxMenuEntryHandler+0x30>)
 8005142:	2203      	movs	r2, #3
 8005144:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <FuncAuxMenuEntryHandler+0x34>)
 8005148:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800514c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <FuncAuxMenuEntryHandler+0x34>)
 8005150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <FuncAuxMenuEntryHandler+0x38>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800515c:	2305      	movs	r3, #5
}
 800515e:	4618      	mov	r0, r3
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20001e5b 	.word	0x20001e5b
 8005168:	40012c00 	.word	0x40012c00
 800516c:	20001e57 	.word	0x20001e57

08005170 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8005170:	b590      	push	{r4, r7, lr}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8005176:	f001 fff3 	bl	8007160 <SM_IsFuncPwmDutyMode>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01a      	beq.n	80051b6 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8005180:	2000      	movs	r0, #0
 8005182:	f001 ff67 	bl	8007054 <SM_GetEncoderValue>
 8005186:	4603      	mov	r3, r0
 8005188:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	4618      	mov	r0, r3
 800518e:	f7fb f9e1 	bl	8000554 <__aeabi_ui2d>
 8005192:	4603      	mov	r3, r0
 8005194:	460c      	mov	r4, r1
 8005196:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80051d8 <FuncAuxMenuInputHandler+0x68>
 800519a:	ec44 3b10 	vmov	d0, r3, r4
 800519e:	f00f f9f3 	bl	8014588 <pow>
 80051a2:	ec53 2b10 	vmov	r2, r3, d0
 80051a6:	4c0e      	ldr	r4, [pc, #56]	; (80051e0 <FuncAuxMenuInputHandler+0x70>)
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	f7fb fd24 	bl	8000bf8 <__aeabi_d2uiz>
 80051b0:	4603      	mov	r3, r0
 80051b2:	6363      	str	r3, [r4, #52]	; 0x34
 80051b4:	e006      	b.n	80051c4 <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80051b6:	2000      	movs	r0, #0
 80051b8:	f001 ff4c 	bl	8007054 <SM_GetEncoderValue>
 80051bc:	4603      	mov	r3, r0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 ff1a 	bl	8005ff8 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 80051c4:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <FuncAuxMenuInputHandler+0x74>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80051ca:	2305      	movs	r3, #5
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd90      	pop	{r4, r7, pc}
 80051d4:	f3af 8000 	nop.w
 80051d8:	00000000 	.word	0x00000000
 80051dc:	40000000 	.word	0x40000000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	20001e57 	.word	0x20001e57

080051e8 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 80051ec:	f001 ffc4 	bl	8007178 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <FuncAuxToggleDutyMode+0x1c>)
 80051f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 80051f8:	4b03      	ldr	r3, [pc, #12]	; (8005208 <FuncAuxToggleDutyMode+0x20>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80051fe:	2305      	movs	r3, #5
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40012c00 	.word	0x40012c00
 8005208:	20001e57 	.word	0x20001e57

0800520c <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <FuncAuxMenuExitHandler+0x20>)
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8005216:	f001 ffbf 	bl	8007198 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 800521a:	f7fc fb21 	bl	8001860 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <FuncAuxMenuExitHandler+0x24>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8005224:	2303      	movs	r3, #3
}
 8005226:	4618      	mov	r0, r3
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20001e5b 	.word	0x20001e5b
 8005230:	20001e57 	.word	0x20001e57

08005234 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <GainMenu_getStatus+0x14>)
 800523a:	781b      	ldrb	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20001e5c 	.word	0x20001e5c

0800524c <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005250:	f7fc fb06 	bl	8001860 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <GainMainMenuEntryHandler+0x1c>)
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800525a:	4b04      	ldr	r3, [pc, #16]	; (800526c <GainMainMenuEntryHandler+0x20>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005260:	2306      	movs	r3, #6
}
 8005262:	4618      	mov	r0, r3
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20001e5c 	.word	0x20001e5c
 800526c:	20001e57 	.word	0x20001e57

08005270 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <GainMainMenuExitHandler+0x1c>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800527a:	f7fc faf1 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800527e:	4b04      	ldr	r3, [pc, #16]	; (8005290 <GainMainMenuExitHandler+0x20>)
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8005284:	2301      	movs	r3, #1
}
 8005286:	4618      	mov	r0, r3
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20001e5c 	.word	0x20001e5c
 8005290:	20001e57 	.word	0x20001e57

08005294 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800529a:	f7fc fae1 	bl	8001860 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 800529e:	f001 f8a1 	bl	80063e4 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 80052a2:	f001 ff85 	bl	80071b0 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <GainSignalMenuEntryHandler+0x54>)
 80052a8:	2202      	movs	r2, #2
 80052aa:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80052ac:	2000      	movs	r0, #0
 80052ae:	f001 fc55 	bl	8006b5c <SM_GetOutputChannel>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80052b8:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <GainSignalMenuEntryHandler+0x58>)
 80052c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <GainSignalMenuEntryHandler+0x58>)
 80052ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80052d0:	e002      	b.n	80052d8 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80052d2:	4807      	ldr	r0, [pc, #28]	; (80052f0 <GainSignalMenuEntryHandler+0x5c>)
 80052d4:	f7fc fb0a 	bl	80018ec <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <GainSignalMenuEntryHandler+0x60>)
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80052de:	2307      	movs	r3, #7
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20001e5c 	.word	0x20001e5c
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	08016078 	.word	0x08016078
 80052f4:	20001e57 	.word	0x20001e57

080052f8 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8005302:	2000      	movs	r0, #0
 8005304:	f001 fc2a 	bl	8006b5c <SM_GetOutputChannel>
 8005308:	4603      	mov	r3, r0
 800530a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800530e:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	3b01      	subs	r3, #1
 8005314:	2b04      	cmp	r3, #4
 8005316:	d834      	bhi.n	8005382 <GainSignalMenuInputHandler+0x8a>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <GainSignalMenuInputHandler+0x28>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005363 	.word	0x08005363
 8005324:	0800536b 	.word	0x0800536b
 8005328:	08005373 	.word	0x08005373
 800532c:	0800537b 	.word	0x0800537b
 8005330:	08005335 	.word	0x08005335
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d025      	beq.n	8005386 <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b06      	cmp	r3, #6
 8005340:	d107      	bne.n	8005352 <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8005342:	2001      	movs	r0, #1
 8005344:	f001 fe86 	bl	8007054 <SM_GetEncoderValue>
 8005348:	4603      	mov	r3, r0
 800534a:	4618      	mov	r0, r3
 800534c:	f001 f856 	bl	80063fc <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8005350:	e019      	b.n	8005386 <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005352:	2000      	movs	r0, #0
 8005354:	f001 fe7e 	bl	8007054 <SM_GetEncoderValue>
 8005358:	4603      	mov	r3, r0
 800535a:	4618      	mov	r0, r3
 800535c:	f002 f89a 	bl	8007494 <VPP_MapEncoderPositionToSignalOutput>
			break;
 8005360:	e011      	b.n	8005386 <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 8005362:	2011      	movs	r0, #17
 8005364:	f001 ff30 	bl	80071c8 <VPP_ApplyProfileToSignal>
			break;
 8005368:	e00e      	b.n	8005388 <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 800536a:	2020      	movs	r0, #32
 800536c:	f001 ff2c 	bl	80071c8 <VPP_ApplyProfileToSignal>
			break;
 8005370:	e00a      	b.n	8005388 <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 8005372:	2031      	movs	r0, #49	; 0x31
 8005374:	f001 ff28 	bl	80071c8 <VPP_ApplyProfileToSignal>
			break;
 8005378:	e006      	b.n	8005388 <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 800537a:	2059      	movs	r0, #89	; 0x59
 800537c:	f001 ff24 	bl	80071c8 <VPP_ApplyProfileToSignal>
			break;
 8005380:	e002      	b.n	8005388 <GainSignalMenuInputHandler+0x90>

		default:
			break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <GainSignalMenuInputHandler+0x90>
			break;
 8005386:	bf00      	nop
	}

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evIdle;
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <GainSignalMenuInputHandler+0xa0>)
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800538e:	2307      	movs	r3, #7
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20001e57 	.word	0x20001e57

0800539c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <GainSignalMenuExitHandler+0x1c>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80053a6:	f7fc fa5b 	bl	8001860 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80053aa:	4b04      	ldr	r3, [pc, #16]	; (80053bc <GainSignalMenuExitHandler+0x20>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80053b0:	2306      	movs	r3, #6
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20001e5c 	.word	0x20001e5c
 80053bc:	20001e57 	.word	0x20001e57

080053c0 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80053c6:	f7fc fa4b 	bl	8001860 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 80053ca:	f001 fef1 	bl	80071b0 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <GainAuxMenuEntryHandler+0x50>)
 80053d0:	2203      	movs	r2, #3
 80053d2:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 80053d4:	2001      	movs	r0, #1
 80053d6:	f001 fbc1 	bl	8006b5c <SM_GetOutputChannel>
 80053da:	4603      	mov	r3, r0
 80053dc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80053e0:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <GainAuxMenuEntryHandler+0x54>)
 80053ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80053f0:	4b08      	ldr	r3, [pc, #32]	; (8005414 <GainAuxMenuEntryHandler+0x54>)
 80053f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80053f8:	e002      	b.n	8005400 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80053fa:	4807      	ldr	r0, [pc, #28]	; (8005418 <GainAuxMenuEntryHandler+0x58>)
 80053fc:	f7fc fa76 	bl	80018ec <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <GainAuxMenuEntryHandler+0x5c>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005406:	2308      	movs	r3, #8
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20001e5c 	.word	0x20001e5c
 8005414:	40012c00 	.word	0x40012c00
 8005418:	08016078 	.word	0x08016078
 800541c:	20001e57 	.word	0x20001e57

08005420 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005424:	2000      	movs	r0, #0
 8005426:	f001 fe15 	bl	8007054 <SM_GetEncoderValue>
 800542a:	4603      	mov	r3, r0
 800542c:	4618      	mov	r0, r3
 800542e:	f002 f86b 	bl	8007508 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8005432:	4b03      	ldr	r3, [pc, #12]	; (8005440 <GainAuxMenuInputHandler+0x20>)
 8005434:	2203      	movs	r2, #3
 8005436:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005438:	2308      	movs	r3, #8
}
 800543a:	4618      	mov	r0, r3
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20001e57 	.word	0x20001e57

08005444 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <GainAuxMenuExitHandler+0x1c>)
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800544e:	f7fc fa07 	bl	8001860 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005452:	4b04      	ldr	r3, [pc, #16]	; (8005464 <GainAuxMenuExitHandler+0x20>)
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005458:	2306      	movs	r3, #6
}
 800545a:	4618      	mov	r0, r3
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20001e5c 	.word	0x20001e5c
 8005464:	20001e57 	.word	0x20001e57

08005468 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <ToplevelMenu_getStatus+0x14>)
 800546e:	781b      	ldrb	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000001 	.word	0x20000001

08005480 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 800548a:	4a04      	ldr	r2, [pc, #16]	; (800549c <ToplevelMenu_setStatus+0x1c>)
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	7013      	strb	r3, [r2, #0]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	20000001 	.word	0x20000001

080054a0 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80054a4:	f7fc f9dc 	bl	8001860 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 80054a8:	4b04      	ldr	r3, [pc, #16]	; (80054bc <ToplevelOutputMenuEntryHandler+0x1c>)
 80054aa:	2202      	movs	r2, #2
 80054ac:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80054ae:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <ToplevelOutputMenuEntryHandler+0x20>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80054b4:	2301      	movs	r3, #1
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000001 	.word	0x20000001
 80054c0:	20001e57 	.word	0x20001e57

080054c4 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80054c8:	f7fc f9ca 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <ToplevelOutputMenuExitHandler+0x1c>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80054d2:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <ToplevelOutputMenuExitHandler+0x20>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000001 	.word	0x20000001
 80054e4:	20001e57 	.word	0x20001e57

080054e8 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80054ec:	f7fc f9b8 	bl	8001860 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 80054f0:	4b04      	ldr	r3, [pc, #16]	; (8005504 <ToplevelInputMenuEntryHandler+0x1c>)
 80054f2:	2203      	movs	r2, #3
 80054f4:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80054f6:	4b04      	ldr	r3, [pc, #16]	; (8005508 <ToplevelInputMenuEntryHandler+0x20>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80054fc:	2302      	movs	r3, #2
}
 80054fe:	4618      	mov	r0, r3
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000001 	.word	0x20000001
 8005508:	20001e57 	.word	0x20001e57

0800550c <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d002      	beq.n	8005522 <ToplevelInputMenuInputHandler+0x16>
 800551c:	2b02      	cmp	r3, #2
 800551e:	d003      	beq.n	8005528 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8005520:	e00b      	b.n	800553a <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 8005522:	f001 f857 	bl	80065d4 <IT_ArbitrateInputTrigger>
				break;
 8005526:	e008      	b.n	800553a <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8005528:	f001 f904 	bl	8006734 <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 800552c:	2001      	movs	r0, #1
 800552e:	f7ff ffed 	bl	800550c <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8005532:	2001      	movs	r0, #1
 8005534:	f7ff ffea 	bl	800550c <ToplevelInputMenuInputHandler>
				break;
 8005538:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 800553a:	4b04      	ldr	r3, [pc, #16]	; (800554c <ToplevelInputMenuInputHandler+0x40>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8005540:	2302      	movs	r3, #2
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20001e57 	.word	0x20001e57

08005550 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005554:	f7fc f984 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <ToplevelInputMenuExitHandler+0x1c>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800555e:	4b04      	ldr	r3, [pc, #16]	; (8005570 <ToplevelInputMenuExitHandler+0x20>)
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000001 	.word	0x20000001
 8005570:	20001e57 	.word	0x20001e57

08005574 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800557c:	4b07      	ldr	r3, [pc, #28]	; (800559c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4013      	ands	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d101      	bne.n	800558e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40010400 	.word	0x40010400

080055a0 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <IM_Init+0x1c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <IM_Init+0x1c>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6013      	str	r3, [r2, #0]



}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40014400 	.word	0x40014400

080055c0 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80055c4:	4b26      	ldr	r3, [pc, #152]	; (8005660 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d11c      	bne.n	800560a <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 80055d0:	4b24      	ldr	r3, [pc, #144]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	ee07 3a90 	vmov	s15, r3
 80055d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055dc:	4b22      	ldr	r3, [pc, #136]	; (8005668 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80055de:	edd3 7a00 	vldr	s15, [r3]
 80055e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ea:	db09      	blt.n	8005600 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 80055ec:	4b1f      	ldr	r3, [pc, #124]	; (800566c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80055f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f8:	ee17 2a90 	vmov	r2, s15
 80055fc:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 80055fe:	e029      	b.n	8005654 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8005600:	4b18      	ldr	r3, [pc, #96]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	3201      	adds	r2, #1
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005608:	e024      	b.n	8005654 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 800560a:	4b16      	ldr	r3, [pc, #88]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d104      	bne.n	800561c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8005612:	4b14      	ldr	r3, [pc, #80]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005618:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800561a:	e01b      	b.n	8005654 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 800561c:	4b11      	ldr	r3, [pc, #68]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005628:	4b10      	ldr	r3, [pc, #64]	; (800566c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800562a:	edd3 7a00 	vldr	s15, [r3]
 800562e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	d809      	bhi.n	800564c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800563a:	edd3 7a00 	vldr	s15, [r3]
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005644:	ee17 2a90 	vmov	r2, s15
 8005648:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800564a:	e003      	b.n	8005654 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	3a01      	subs	r2, #1
 8005652:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005654:	bf00      	nop
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40013400 	.word	0x40013400
 8005668:	20000128 	.word	0x20000128
 800566c:	20000124 	.word	0x20000124

08005670 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005676:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <IM_BTN1_EXTI14_Handler+0x44>)
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	4a0e      	ldr	r2, [pc, #56]	; (80056b8 <IM_BTN1_EXTI14_Handler+0x48>)
 8005680:	8812      	ldrh	r2, [r2, #0]
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005688:	dd0c      	ble.n	80056a4 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800568a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800568e:	f7ff ff71 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8005698:	2001      	movs	r0, #1
 800569a:	f7ff fa7d 	bl	8004b98 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 800569e:	4807      	ldr	r0, [pc, #28]	; (80056bc <IM_BTN1_EXTI14_Handler+0x4c>)
 80056a0:	f00c fe58 	bl	8012354 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 80056a4:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <IM_BTN1_EXTI14_Handler+0x48>)
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	8013      	strh	r3, [r2, #0]


}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40014400 	.word	0x40014400
 80056b8:	20001e5e 	.word	0x20001e5e
 80056bc:	080160b0 	.word	0x080160b0

080056c0 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80056c6:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <IM_BTN2_EXTI15_Handler+0x44>)
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	4a0e      	ldr	r2, [pc, #56]	; (8005708 <IM_BTN2_EXTI15_Handler+0x48>)
 80056d0:	8812      	ldrh	r2, [r2, #0]
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d8:	dd0c      	ble.n	80056f4 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80056da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80056de:	f7ff ff49 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80056e8:	2003      	movs	r0, #3
 80056ea:	f7ff fa55 	bl	8004b98 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80056ee:	4807      	ldr	r0, [pc, #28]	; (800570c <IM_BTN2_EXTI15_Handler+0x4c>)
 80056f0:	f00c fe30 	bl	8012354 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <IM_BTN2_EXTI15_Handler+0x48>)
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	8013      	strh	r3, [r2, #0]


}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40014400 	.word	0x40014400
 8005708:	20001e60 	.word	0x20001e60
 800570c:	080160c8 	.word	0x080160c8

08005710 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005716:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <IM_BTN3_EXTI0_Handler+0x40>)
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	4a0d      	ldr	r2, [pc, #52]	; (8005754 <IM_BTN3_EXTI0_Handler+0x44>)
 8005720:	8812      	ldrh	r2, [r2, #0]
 8005722:	1a9b      	subs	r3, r3, r2
 8005724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005728:	dd0b      	ble.n	8005742 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800572a:	2001      	movs	r0, #1
 800572c:	f7ff ff22 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8005736:	2004      	movs	r0, #4
 8005738:	f7ff fa2e 	bl	8004b98 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 800573c:	4806      	ldr	r0, [pc, #24]	; (8005758 <IM_BTN3_EXTI0_Handler+0x48>)
 800573e:	f00c fe09 	bl	8012354 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8005742:	4a04      	ldr	r2, [pc, #16]	; (8005754 <IM_BTN3_EXTI0_Handler+0x44>)
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	8013      	strh	r3, [r2, #0]


}
 8005748:	bf00      	nop
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40014400 	.word	0x40014400
 8005754:	20001e62 	.word	0x20001e62
 8005758:	080160e4 	.word	0x080160e4

0800575c <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005762:	4b0e      	ldr	r3, [pc, #56]	; (800579c <IM_BTN4_EXTI1_Handler+0x40>)
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <IM_BTN4_EXTI1_Handler+0x44>)
 800576c:	8812      	ldrh	r2, [r2, #0]
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005774:	dd0b      	ble.n	800578e <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8005776:	2002      	movs	r0, #2
 8005778:	f7ff fefc 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8005782:	2002      	movs	r0, #2
 8005784:	f7ff fa08 	bl	8004b98 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005788:	4806      	ldr	r0, [pc, #24]	; (80057a4 <IM_BTN4_EXTI1_Handler+0x48>)
 800578a:	f00c fde3 	bl	8012354 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 800578e:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <IM_BTN4_EXTI1_Handler+0x44>)
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	8013      	strh	r3, [r2, #0]


}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40014400 	.word	0x40014400
 80057a0:	20001e64 	.word	0x20001e64
 80057a4:	080160fc 	.word	0x080160fc

080057a8 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <IM_ENC_EXTI2_Handler+0x40>)
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <IM_ENC_EXTI2_Handler+0x44>)
 80057b8:	8812      	ldrh	r2, [r2, #0]
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057c0:	dd0b      	ble.n	80057da <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80057c2:	2004      	movs	r0, #4
 80057c4:	f7ff fed6 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80057ce:	2006      	movs	r0, #6
 80057d0:	f7ff f9e2 	bl	8004b98 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80057d4:	4806      	ldr	r0, [pc, #24]	; (80057f0 <IM_ENC_EXTI2_Handler+0x48>)
 80057d6:	f00c fdbd 	bl	8012354 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80057da:	4a04      	ldr	r2, [pc, #16]	; (80057ec <IM_ENC_EXTI2_Handler+0x44>)
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	8013      	strh	r3, [r2, #0]


}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40014400 	.word	0x40014400
 80057ec:	20001e66 	.word	0x20001e66
 80057f0:	08016114 	.word	0x08016114

080057f4 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <IM_ENC_DIRF_Handler+0x4c>)
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005806:	d117      	bne.n	8005838 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005808:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <IM_ENC_DIRF_Handler+0x50>)
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	4a0d      	ldr	r2, [pc, #52]	; (8005848 <IM_ENC_DIRF_Handler+0x54>)
 8005812:	8812      	ldrh	r2, [r2, #0]
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	dd0b      	ble.n	8005832 <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 800581a:	2005      	movs	r0, #5
 800581c:	f7ff f9bc 	bl	8004b98 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 8005820:	480a      	ldr	r0, [pc, #40]	; (800584c <IM_ENC_DIRF_Handler+0x58>)
 8005822:	f00c fd97 	bl	8012354 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <IM_ENC_DIRF_Handler+0x4c>)
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	4a05      	ldr	r2, [pc, #20]	; (8005840 <IM_ENC_DIRF_Handler+0x4c>)
 800582c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005830:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 8005832:	4a05      	ldr	r2, [pc, #20]	; (8005848 <IM_ENC_DIRF_Handler+0x54>)
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	8013      	strh	r3, [r2, #0]


	}


}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40014400 	.word	0x40014400
 8005848:	20001e68 	.word	0x20001e68
 800584c:	08016130 	.word	0x08016130

08005850 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <BO_GetBiasPolarity+0x14>)
 8005856:	781b      	ldrb	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000002 	.word	0x20000002

08005868 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <BO_GetDcBiasEncoderValue+0x14>)
 800586e:	881b      	ldrh	r3, [r3, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000004 	.word	0x20000004

08005880 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 800588a:	2000      	movs	r0, #0
 800588c:	f001 fbe2 	bl	8007054 <SM_GetEncoderValue>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8005896:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800589e:	d214      	bcs.n	80058ca <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80058b4:	2200      	movs	r2, #0
 80058b6:	2110      	movs	r1, #16
 80058b8:	4814      	ldr	r0, [pc, #80]	; (800590c <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80058ba:	f005 ffcf 	bl	800b85c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80058be:	2201      	movs	r2, #1
 80058c0:	2108      	movs	r1, #8
 80058c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058c6:	f006 fff1 	bl	800c8ac <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80058d0:	d314      	bcc.n	80058fc <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80058d2:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80058e6:	2200      	movs	r2, #0
 80058e8:	2110      	movs	r1, #16
 80058ea:	4808      	ldr	r0, [pc, #32]	; (800590c <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80058ec:	f005 ffb6 	bl	800b85c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80058f0:	2200      	movs	r2, #0
 80058f2:	2108      	movs	r1, #8
 80058f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058f8:	f006 ffd8 	bl	800c8ac <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000004 	.word	0x20000004
 8005908:	20000002 	.word	0x20000002
 800590c:	20002a2c 	.word	0x20002a2c

08005910 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005914:	2110      	movs	r1, #16
 8005916:	4803      	ldr	r0, [pc, #12]	; (8005924 <BO_GetOutputBias+0x14>)
 8005918:	f005 ffe6 	bl	800b8e8 <HAL_DAC_GetValue>
 800591c:	4603      	mov	r3, r0
}
 800591e:	4618      	mov	r0, r3
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20002a2c 	.word	0x20002a2c

08005928 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 800592e:	2300      	movs	r3, #0
 8005930:	607b      	str	r3, [r7, #4]
 8005932:	e06b      	b.n	8005a0c <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 8005934:	493a      	ldr	r1, [pc, #232]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	3308      	adds	r3, #8
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d129      	bne.n	800599e <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 800594a:	4935      	ldr	r1, [pc, #212]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	3304      	adds	r3, #4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a31      	ldr	r2, [pc, #196]	; (8005a24 <FreqO_InitFreqProfiles+0xfc>)
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800596a:	492d      	ldr	r1, [pc, #180]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3310      	adds	r3, #16
 800597a:	edd3 7a00 	vldr	s15, [r3]
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005986:	ee17 0a90 	vmov	r0, s15
 800598a:	4925      	ldr	r1, [pc, #148]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	330c      	adds	r3, #12
 800599a:	6018      	str	r0, [r3, #0]
 800599c:	e033      	b.n	8005a06 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 800599e:	4920      	ldr	r1, [pc, #128]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	3304      	adds	r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <FreqO_InitFreqProfiles+0xfc>)
 80059b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80059b6:	481a      	ldr	r0, [pc, #104]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4403      	add	r3, r0
 80059c4:	3308      	adds	r3, #8
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059d4:	4912      	ldr	r1, [pc, #72]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	3310      	adds	r3, #16
 80059e4:	edd3 7a00 	vldr	s15, [r3]
 80059e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f0:	ee17 0a90 	vmov	r0, s15
 80059f4:	490a      	ldr	r1, [pc, #40]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	330c      	adds	r3, #12
 8005a04:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	607b      	str	r3, [r7, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b0d      	cmp	r3, #13
 8005a10:	dd90      	ble.n	8005934 <FreqO_InitFreqProfiles+0xc>
	}
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000008 	.word	0x20000008
 8005a24:	00155cc0 	.word	0x00155cc0

08005a28 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <FreqO_MapEncoderPositionCoarse+0x78>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d910      	bls.n	8005a66 <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b0d      	cmp	r3, #13
 8005a4e:	d901      	bls.n	8005a54 <FreqO_MapEncoderPositionCoarse+0x2c>
 8005a50:	230d      	movs	r3, #13
 8005a52:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f945 	bl	8005ce4 <FreqO_GetProfileByIndex>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f872 	bl	8005b48 <FreqO_ApplyProfile>
 8005a64:	e014      	b.n	8005a90 <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 8005a66:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d20f      	bcs.n	8005a90 <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b0d      	cmp	r3, #13
 8005a7a:	d901      	bls.n	8005a80 <FreqO_MapEncoderPositionCoarse+0x58>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f92f 	bl	8005ce4 <FreqO_GetProfileByIndex>
 8005a86:	4603      	mov	r3, r0
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 f85c 	bl	8005b48 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8005a90:	4a04      	ldr	r2, [pc, #16]	; (8005aa4 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	8013      	strh	r3, [r2, #0]

}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000120 	.word	0x20000120
 8005aa4:	20001e6a 	.word	0x20001e6a

08005aa8 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005ab2:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <FreqO_MapEncoderPositionFine+0x44>)
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d904      	bls.n	8005ac6 <FreqO_MapEncoderPositionFine+0x1e>
	{
		OUTPUT_TIMER->ARR++;
 8005abc:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <FreqO_MapEncoderPositionFine+0x48>)
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	3201      	adds	r2, #1
 8005ac2:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ac4:	e008      	b.n	8005ad8 <FreqO_MapEncoderPositionFine+0x30>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <FreqO_MapEncoderPositionFine+0x44>)
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d203      	bcs.n	8005ad8 <FreqO_MapEncoderPositionFine+0x30>
	{
		OUTPUT_TIMER->ARR--;
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <FreqO_MapEncoderPositionFine+0x48>)
 8005ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005ad8:	4a04      	ldr	r2, [pc, #16]	; (8005aec <FreqO_MapEncoderPositionFine+0x44>)
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	8013      	strh	r3, [r2, #0]

}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20001e6a 	.word	0x20001e6a
 8005af0:	40013400 	.word	0x40013400

08005af4 <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005afe:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d904      	bls.n	8005b12 <FreqO_MapEncoderPositionToPrescaler+0x1e>
	{
		OUTPUT_TIMER->PSC++;
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0c:	3201      	adds	r2, #1
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b10:	e00c      	b.n	8005b2c <FreqO_MapEncoderPositionToPrescaler+0x38>

	}
	else if (pEncValue < freq_last_encoder_value)
 8005b12:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d207      	bcs.n	8005b2c <FreqO_MapEncoderPositionToPrescaler+0x38>
	{
		if(OUTPUT_TIMER->PSC > 0)
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <FreqO_MapEncoderPositionToPrescaler+0x38>
			OUTPUT_TIMER->PSC--;
 8005b24:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b28:	3a01      	subs	r2, #1
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005b2c:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	8013      	strh	r3, [r2, #0]

}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20001e6a 	.word	0x20001e6a
 8005b44:	40013400 	.word	0x40013400

08005b48 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f899 	bl	8005c88 <FreqO_FindFPresetObject>
 8005b56:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d024      	beq.n	8005ba8 <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 8005b5e:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <FreqO_ApplyProfile+0x70>)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 8005b66:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <FreqO_ApplyProfile+0x70>)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f000 fff4 	bl	8006b5c <SM_GetOutputChannel>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	2b06      	cmp	r3, #6
 8005b82:	d10d      	bne.n	8005ba0 <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005b84:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <FreqO_ApplyProfile+0x74>)
 8005b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <FreqO_ApplyProfile+0x74>)
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <FreqO_ApplyProfile+0x74>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	4a08      	ldr	r2, [pc, #32]	; (8005bbc <FreqO_ApplyProfile+0x74>)
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005ba0:	4a07      	ldr	r2, [pc, #28]	; (8005bc0 <FreqO_ApplyProfile+0x78>)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005ba6:	e002      	b.n	8005bae <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005ba8:	4806      	ldr	r0, [pc, #24]	; (8005bc4 <FreqO_ApplyProfile+0x7c>)
 8005baa:	f7fb fe9f 	bl	80018ec <DM_SetErrorDebugMsg>
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	20000120 	.word	0x20000120
 8005bc4:	08016148 	.word	0x08016148

08005bc8 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f001 fa40 	bl	8007054 <SM_GetEncoderValue>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ff66 	bl	8005aa8 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005bdc:	2001      	movs	r0, #1
 8005bde:	f000 ffbd 	bl	8006b5c <SM_GetOutputChannel>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	2b06      	cmp	r3, #6
 8005bf0:	d110      	bne.n	8005c14 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <FreqO_AdjustFreq+0x54>)
 8005bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf8:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f001 fa2a 	bl	8007054 <SM_GetEncoderValue>
 8005c00:	4603      	mov	r3, r0
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <FreqO_AdjustFreq+0x54>)
 8005c08:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005c0a:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <FreqO_AdjustFreq+0x54>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	4a03      	ldr	r2, [pc, #12]	; (8005c1c <FreqO_AdjustFreq+0x54>)
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40000400 	.word	0x40000400

08005c20 <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 8005c26:	2000      	movs	r0, #0
 8005c28:	f001 fa14 	bl	8007054 <SM_GetEncoderValue>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff ff60 	bl	8005af4 <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005c34:	2001      	movs	r0, #1
 8005c36:	f000 ff91 	bl	8006b5c <SM_GetOutputChannel>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d10c      	bne.n	8005c64 <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	f001 fa02 	bl	8007054 <SM_GetEncoderValue>
 8005c50:	4603      	mov	r3, r0
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <FreqO_AdjustPrescaler+0x4c>)
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005c5a:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <FreqO_AdjustPrescaler+0x4c>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	4a03      	ldr	r2, [pc, #12]	; (8005c6c <FreqO_AdjustPrescaler+0x4c>)
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40000400 	.word	0x40000400

08005c70 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
	return freq_profile;
 8005c74:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <FreqO_GetFPresetObject+0x14>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000120 	.word	0x20000120

08005c88 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e016      	b.n	8005cc4 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8005c96:	4911      	ldr	r1, [pc, #68]	; (8005cdc <FreqO_FindFPresetObject+0x54>)
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d107      	bne.n	8005cbe <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <FreqO_FindFPresetObject+0x54>)
 8005cba:	4413      	add	r3, r2
 8005cbc:	e009      	b.n	8005cd2 <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b0d      	cmp	r3, #13
 8005cc8:	dde5      	ble.n	8005c96 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005cca:	4805      	ldr	r0, [pc, #20]	; (8005ce0 <FreqO_FindFPresetObject+0x58>)
 8005ccc:	f7fb fe0e 	bl	80018ec <DM_SetErrorDebugMsg>
	return 0;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000008 	.word	0x20000008
 8005ce0:	08016170 	.word	0x08016170

08005ce4 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <FreqO_GetProfileByIndex+0x24>)
 8005cf8:	4413      	add	r3, r2
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000008 	.word	0x20000008

08005d0c <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005d10:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <FreqO_ResetLastEncoderValue+0x14>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	801a      	strh	r2, [r3, #0]
}
 8005d16:	bf00      	nop
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20001e6a 	.word	0x20001e6a

08005d24 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <FS_SetSweepModeDown+0x48>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0f      	ldr	r2, [pc, #60]	; (8005d6c <FS_SetSweepModeDown+0x48>)
 8005d2e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d32:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <FS_SetSweepModeDown+0x48>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <FS_SetSweepModeDown+0x48>)
 8005d3a:	f043 0310 	orr.w	r3, r3, #16
 8005d3e:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <FS_SetSweepModeDown+0x4c>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <FS_SetSweepModeDown+0x50>)
 8005d4e:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <FS_SetSweepModeDown+0x54>)
 8005d54:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <FS_SetSweepModeDown+0x58>)
 8005d56:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <FS_SetSweepModeDown+0x5c>)
 8005d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005d60:	bf00      	nop
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40013400 	.word	0x40013400
 8005d74:	20000124 	.word	0x20000124
 8005d78:	20000128 	.word	0x20000128
 8005d7c:	477fff00 	.word	0x477fff00
 8005d80:	40012c00 	.word	0x40012c00

08005d84 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005d88:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <FS_SetSweepModeUp+0x40>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0d      	ldr	r2, [pc, #52]	; (8005dc4 <FS_SetSweepModeUp+0x40>)
 8005d8e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d92:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005d94:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <FS_SetSweepModeUp+0x40>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <FS_SetSweepModeUp+0x40>)
 8005d9a:	f023 0310 	bic.w	r3, r3, #16
 8005d9e:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005da0:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <FS_SetSweepModeUp+0x44>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	ee07 3a90 	vmov	s15, r3
 8005da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dac:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <FS_SetSweepModeUp+0x48>)
 8005dae:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005db2:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <FS_SetSweepModeUp+0x4c>)
 8005db4:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <FS_SetSweepModeUp+0x50>)
 8005db6:	601a      	str	r2, [r3, #0]


}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40000c00 	.word	0x40000c00
 8005dc8:	40013400 	.word	0x40013400
 8005dcc:	20000128 	.word	0x20000128
 8005dd0:	20000124 	.word	0x20000124
 8005dd4:	41500000 	.word	0x41500000

08005dd8 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d038      	beq.n	8005e5a <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005de8:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <FS_SetEncoderControlMode+0xa4>)
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005df0:	220d      	movs	r2, #13
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005df4:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <FS_SetEncoderControlMode+0xac>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <FS_SetEncoderControlMode+0x32>
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d014      	beq.n	8005e32 <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005e08:	e031      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005e0a:	4b1d      	ldr	r3, [pc, #116]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e16:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <FS_SetEncoderControlMode+0xb0>)
 8005e18:	edd3 7a00 	vldr	s15, [r3]
 8005e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e24:	dc00      	bgt.n	8005e28 <FS_SetEncoderControlMode+0x50>
				break;
 8005e26:	e022      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005e28:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <FS_SetEncoderControlMode+0xb4>)
 8005e2a:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005e30:	e01d      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005e32:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e3e:	4b14      	ldr	r3, [pc, #80]	; (8005e90 <FS_SetEncoderControlMode+0xb8>)
 8005e40:	edd3 7a00 	vldr	s15, [r3]
 8005e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4c:	d400      	bmi.n	8005e50 <FS_SetEncoderControlMode+0x78>
				break;
 8005e4e:	e00e      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005e50:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <FS_SetEncoderControlMode+0xb4>)
 8005e52:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005e58:	e009      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005e5a:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <FS_SetEncoderControlMode+0xa4>)
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e68:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005e6c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20001e59 	.word	0x20001e59
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	20001e58 	.word	0x20001e58
 8005e88:	20000128 	.word	0x20000128
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	20000124 	.word	0x20000124
 8005e94:	00000000 	.word	0x00000000

08005e98 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d122      	bne.n	8005eee <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005ea8:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fa fb51 	bl	8000554 <__aeabi_ui2d>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005ef8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005eba:	ec44 3b10 	vmov	d0, r3, r4
 8005ebe:	f00e fb63 	bl	8014588 <pow>
 8005ec2:	ec51 0b10 	vmov	r0, r1, d0
 8005ec6:	a30e      	add	r3, pc, #56	; (adr r3, 8005f00 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f7fa fa06 	bl	80002dc <__adddf3>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	f7fa fe8e 	bl	8000bf8 <__aeabi_d2uiz>
 8005edc:	4603      	mov	r3, r0
 8005ede:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee6:	d002      	beq.n	8005eee <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005ee8:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd90      	pop	{r4, r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	40080000 	.word	0x40080000
 8005f00:	00000000 	.word	0x00000000
 8005f04:	40d06800 	.word	0x40d06800
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	40000c00 	.word	0x40000c00

08005f10 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f28:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005f68 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f30:	e011      	b.n	8005f56 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f4e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005f68 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005f56:	eeb0 0a67 	vmov.f32	s0, s15
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	4d2037a0 	.word	0x4d2037a0

08005f6c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005f70:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <FuncO_ResetLastEncoderValue+0x14>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	801a      	strh	r2, [r3, #0]
}
 8005f76:	bf00      	nop
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	20001e96 	.word	0x20001e96

08005f84 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f000 fde4 	bl	8006b5c <SM_GetOutputChannel>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005f9e:	4b15      	ldr	r3, [pc, #84]	; (8005ff4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	88fa      	ldrh	r2, [r7, #6]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d90c      	bls.n	8005fc2 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	3301      	adds	r3, #1
 8005fac:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	d901      	bls.n	8005fb8 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005fb4:	2305      	movs	r3, #5
 8005fb6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f856 	bl	800606c <FuncO_ApplyProfileToSignal>
 8005fc0:	e010      	b.n	8005fe4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d20b      	bcs.n	8005fe4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	2b06      	cmp	r3, #6
 8005fd6:	d901      	bls.n	8005fdc <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 f844 	bl	800606c <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005fe4:	4a03      	ldr	r2, [pc, #12]	; (8005ff4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	8013      	strh	r3, [r2, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20001e96 	.word	0x20001e96

08005ff8 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8006002:	2001      	movs	r0, #1
 8006004:	f000 fdaa 	bl	8006b5c <SM_GetOutputChannel>
 8006008:	4603      	mov	r3, r0
 800600a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	429a      	cmp	r2, r3
 800601a:	d90c      	bls.n	8006036 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	3301      	adds	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b06      	cmp	r3, #6
 8006026:	d901      	bls.n	800602c <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8006028:	2306      	movs	r3, #6
 800602a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f880 	bl	8006134 <FuncO_ApplyProfileToAux>
 8006034:	e010      	b.n	8006058 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8006036:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	429a      	cmp	r2, r3
 800603e:	d20b      	bcs.n	8006058 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	3b01      	subs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b06      	cmp	r3, #6
 800604a:	d901      	bls.n	8006050 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 f86e 	bl	8006134 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8006058:	4a03      	ldr	r2, [pc, #12]	; (8006068 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	8013      	strh	r3, [r2, #0]
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20001e96 	.word	0x20001e96

0800606c <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 800606c:	b590      	push	{r4, r7, lr}
 800606e:	b087      	sub	sp, #28
 8006070:	af02      	add	r7, sp, #8
 8006072:	4603      	mov	r3, r0
 8006074:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8006076:	79fc      	ldrb	r4, [r7, #7]
 8006078:	2000      	movs	r0, #0
 800607a:	f000 fd6f 	bl	8006b5c <SM_GetOutputChannel>
 800607e:	4601      	mov	r1, r0
 8006080:	00e3      	lsls	r3, r4, #3
 8006082:	4a27      	ldr	r2, [pc, #156]	; (8006120 <FuncO_ApplyProfileToSignal+0xb4>)
 8006084:	4413      	add	r3, r2
 8006086:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 800608a:	4826      	ldr	r0, [pc, #152]	; (8006124 <FuncO_ApplyProfileToSignal+0xb8>)
 800608c:	f00c f962 	bl	8012354 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8006090:	79fc      	ldrb	r4, [r7, #7]
 8006092:	2000      	movs	r0, #0
 8006094:	f000 fd62 	bl	8006b5c <SM_GetOutputChannel>
 8006098:	4601      	mov	r1, r0
 800609a:	4a21      	ldr	r2, [pc, #132]	; (8006120 <FuncO_ApplyProfileToSignal+0xb4>)
 800609c:	00e3      	lsls	r3, r4, #3
 800609e:	4413      	add	r3, r2
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80060a4:	2000      	movs	r0, #0
 80060a6:	f000 fd59 	bl	8006b5c <SM_GetOutputChannel>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f001 f886 	bl	80071c8 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <FuncO_ApplyProfileToSignal+0xbc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a19      	ldr	r2, [pc, #100]	; (8006128 <FuncO_ApplyProfileToSignal+0xbc>)
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80060c8:	2100      	movs	r1, #0
 80060ca:	4818      	ldr	r0, [pc, #96]	; (800612c <FuncO_ApplyProfileToSignal+0xc0>)
 80060cc:	f005 fb70 	bl	800b7b0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80060d0:	2000      	movs	r0, #0
 80060d2:	f000 fd43 	bl	8006b5c <SM_GetOutputChannel>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f103 0208 	add.w	r2, r3, #8
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2378      	movs	r3, #120	; 0x78
 80060e2:	2100      	movs	r1, #0
 80060e4:	4811      	ldr	r0, [pc, #68]	; (800612c <FuncO_ApplyProfileToSignal+0xc0>)
 80060e6:	f005 faa1 	bl	800b62c <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80060ea:	2100      	movs	r1, #0
 80060ec:	4810      	ldr	r0, [pc, #64]	; (8006130 <FuncO_ApplyProfileToSignal+0xc4>)
 80060ee:	f005 fb5f 	bl	800b7b0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80060f2:	2001      	movs	r0, #1
 80060f4:	f000 fd32 	bl	8006b5c <SM_GetOutputChannel>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f103 0208 	add.w	r2, r3, #8
 80060fe:	2300      	movs	r3, #0
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	2378      	movs	r3, #120	; 0x78
 8006104:	2100      	movs	r1, #0
 8006106:	480a      	ldr	r0, [pc, #40]	; (8006130 <FuncO_ApplyProfileToSignal+0xc4>)
 8006108:	f005 fa90 	bl	800b62c <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <FuncO_ApplyProfileToSignal+0xbc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a05      	ldr	r2, [pc, #20]	; (8006128 <FuncO_ApplyProfileToSignal+0xbc>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6013      	str	r3, [r2, #0]



}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	bd90      	pop	{r4, r7, pc}
 8006120:	2000012c 	.word	0x2000012c
 8006124:	080161a0 	.word	0x080161a0
 8006128:	40013400 	.word	0x40013400
 800612c:	20002a2c 	.word	0x20002a2c
 8006130:	20002a18 	.word	0x20002a18

08006134 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b087      	sub	sp, #28
 8006138:	af02      	add	r7, sp, #8
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800613e:	79fc      	ldrb	r4, [r7, #7]
 8006140:	2001      	movs	r0, #1
 8006142:	f000 fd0b 	bl	8006b5c <SM_GetOutputChannel>
 8006146:	4601      	mov	r1, r0
 8006148:	00e3      	lsls	r3, r4, #3
 800614a:	4a96      	ldr	r2, [pc, #600]	; (80063a4 <FuncO_ApplyProfileToAux+0x270>)
 800614c:	4413      	add	r3, r2
 800614e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	2b06      	cmp	r3, #6
 8006156:	d10a      	bne.n	800616e <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8006158:	4893      	ldr	r0, [pc, #588]	; (80063a8 <FuncO_ApplyProfileToAux+0x274>)
 800615a:	f00c f8fb 	bl	8012354 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 800615e:	f000 ff65 	bl	800702c <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8006162:	f000 fd11 	bl	8006b88 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8006166:	4b91      	ldr	r3, [pc, #580]	; (80063ac <FuncO_ApplyProfileToAux+0x278>)
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 800616c:	e115      	b.n	800639a <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 800616e:	4b8f      	ldr	r3, [pc, #572]	; (80063ac <FuncO_ApplyProfileToAux+0x278>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 808e 	beq.w	8006294 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8006178:	488d      	ldr	r0, [pc, #564]	; (80063b0 <FuncO_ApplyProfileToAux+0x27c>)
 800617a:	f00c f8eb 	bl	8012354 <puts>
		SM_DisablePwmToAux();
 800617e:	f000 fe3f 	bl	8006e00 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8006182:	f000 fe79 	bl	8006e78 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8006186:	488b      	ldr	r0, [pc, #556]	; (80063b4 <FuncO_ApplyProfileToAux+0x280>)
 8006188:	f00c f8e4 	bl	8012354 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800618c:	79fc      	ldrb	r4, [r7, #7]
 800618e:	2001      	movs	r0, #1
 8006190:	f000 fce4 	bl	8006b5c <SM_GetOutputChannel>
 8006194:	4601      	mov	r1, r0
 8006196:	4a83      	ldr	r2, [pc, #524]	; (80063a4 <FuncO_ApplyProfileToAux+0x270>)
 8006198:	00e3      	lsls	r3, r4, #3
 800619a:	4413      	add	r3, r2
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80061a0:	4884      	ldr	r0, [pc, #528]	; (80063b4 <FuncO_ApplyProfileToAux+0x280>)
 80061a2:	f00c f8d7 	bl	8012354 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80061a6:	2001      	movs	r0, #1
 80061a8:	f000 fcd8 	bl	8006b5c <SM_GetOutputChannel>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 80061b6:	4880      	ldr	r0, [pc, #512]	; (80063b8 <FuncO_ApplyProfileToAux+0x284>)
 80061b8:	f00c f858 	bl	801226c <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80061bc:	7b7b      	ldrb	r3, [r7, #13]
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 f830 	bl	8007224 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 80061c4:	487d      	ldr	r0, [pc, #500]	; (80063bc <FuncO_ApplyProfileToAux+0x288>)
 80061c6:	f00c f8c5 	bl	8012354 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 80061ca:	487d      	ldr	r0, [pc, #500]	; (80063c0 <FuncO_ApplyProfileToAux+0x28c>)
 80061cc:	f007 fc96 	bl	800dafc <HAL_TIM_Base_Stop>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	4619      	mov	r1, r3
 80061d8:	487a      	ldr	r0, [pc, #488]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 80061da:	f00c f847 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80061de:	487a      	ldr	r0, [pc, #488]	; (80063c8 <FuncO_ApplyProfileToAux+0x294>)
 80061e0:	f00c f8b8 	bl	8012354 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80061e4:	2100      	movs	r1, #0
 80061e6:	4879      	ldr	r0, [pc, #484]	; (80063cc <FuncO_ApplyProfileToAux+0x298>)
 80061e8:	f005 fae2 	bl	800b7b0 <HAL_DAC_Stop_DMA>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	4619      	mov	r1, r3
 80061f4:	4873      	ldr	r0, [pc, #460]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 80061f6:	f00c f839 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80061fa:	4875      	ldr	r0, [pc, #468]	; (80063d0 <FuncO_ApplyProfileToAux+0x29c>)
 80061fc:	f00c f8aa 	bl	8012354 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8006200:	2001      	movs	r0, #1
 8006202:	f000 fcab 	bl	8006b5c <SM_GetOutputChannel>
 8006206:	4603      	mov	r3, r0
 8006208:	f103 0208 	add.w	r2, r3, #8
 800620c:	2300      	movs	r3, #0
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	2378      	movs	r3, #120	; 0x78
 8006212:	2100      	movs	r1, #0
 8006214:	486d      	ldr	r0, [pc, #436]	; (80063cc <FuncO_ApplyProfileToAux+0x298>)
 8006216:	f005 fa09 	bl	800b62c <HAL_DAC_Start_DMA>
 800621a:	4603      	mov	r3, r0
 800621c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	4619      	mov	r1, r3
 8006222:	4868      	ldr	r0, [pc, #416]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006224:	f00c f822 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006228:	486a      	ldr	r0, [pc, #424]	; (80063d4 <FuncO_ApplyProfileToAux+0x2a0>)
 800622a:	f00c f893 	bl	8012354 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800622e:	2100      	movs	r1, #0
 8006230:	4869      	ldr	r0, [pc, #420]	; (80063d8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006232:	f005 fabd 	bl	800b7b0 <HAL_DAC_Stop_DMA>
 8006236:	4603      	mov	r3, r0
 8006238:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	4619      	mov	r1, r3
 800623e:	4861      	ldr	r0, [pc, #388]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006240:	f00c f814 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006244:	4865      	ldr	r0, [pc, #404]	; (80063dc <FuncO_ApplyProfileToAux+0x2a8>)
 8006246:	f00c f885 	bl	8012354 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800624a:	2000      	movs	r0, #0
 800624c:	f000 fc86 	bl	8006b5c <SM_GetOutputChannel>
 8006250:	4603      	mov	r3, r0
 8006252:	f103 0208 	add.w	r2, r3, #8
 8006256:	2300      	movs	r3, #0
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	2378      	movs	r3, #120	; 0x78
 800625c:	2100      	movs	r1, #0
 800625e:	485e      	ldr	r0, [pc, #376]	; (80063d8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006260:	f005 f9e4 	bl	800b62c <HAL_DAC_Start_DMA>
 8006264:	4603      	mov	r3, r0
 8006266:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	4619      	mov	r1, r3
 800626c:	4855      	ldr	r0, [pc, #340]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 800626e:	f00b fffd 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8006272:	485b      	ldr	r0, [pc, #364]	; (80063e0 <FuncO_ApplyProfileToAux+0x2ac>)
 8006274:	f00c f86e 	bl	8012354 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8006278:	4851      	ldr	r0, [pc, #324]	; (80063c0 <FuncO_ApplyProfileToAux+0x28c>)
 800627a:	f007 fc11 	bl	800daa0 <HAL_TIM_Base_Start>
 800627e:	4603      	mov	r3, r0
 8006280:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	4619      	mov	r1, r3
 8006286:	484f      	ldr	r0, [pc, #316]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006288:	f00b fff0 	bl	801226c <iprintf>
		last_output_mode_was_pwm = 0;
 800628c:	4b47      	ldr	r3, [pc, #284]	; (80063ac <FuncO_ApplyProfileToAux+0x278>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
}
 8006292:	e082      	b.n	800639a <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8006294:	4847      	ldr	r0, [pc, #284]	; (80063b4 <FuncO_ApplyProfileToAux+0x280>)
 8006296:	f00c f85d 	bl	8012354 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800629a:	79fc      	ldrb	r4, [r7, #7]
 800629c:	2001      	movs	r0, #1
 800629e:	f000 fc5d 	bl	8006b5c <SM_GetOutputChannel>
 80062a2:	4601      	mov	r1, r0
 80062a4:	4a3f      	ldr	r2, [pc, #252]	; (80063a4 <FuncO_ApplyProfileToAux+0x270>)
 80062a6:	00e3      	lsls	r3, r4, #3
 80062a8:	4413      	add	r3, r2
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80062ae:	4841      	ldr	r0, [pc, #260]	; (80063b4 <FuncO_ApplyProfileToAux+0x280>)
 80062b0:	f00c f850 	bl	8012354 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80062b4:	2001      	movs	r0, #1
 80062b6:	f000 fc51 	bl	8006b5c <SM_GetOutputChannel>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 80062c4:	483c      	ldr	r0, [pc, #240]	; (80063b8 <FuncO_ApplyProfileToAux+0x284>)
 80062c6:	f00b ffd1 	bl	801226c <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 ffa9 	bl	8007224 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 80062d2:	483a      	ldr	r0, [pc, #232]	; (80063bc <FuncO_ApplyProfileToAux+0x288>)
 80062d4:	f00c f83e 	bl	8012354 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 80062d8:	4839      	ldr	r0, [pc, #228]	; (80063c0 <FuncO_ApplyProfileToAux+0x28c>)
 80062da:	f007 fc0f 	bl	800dafc <HAL_TIM_Base_Stop>
 80062de:	4603      	mov	r3, r0
 80062e0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80062e2:	7bbb      	ldrb	r3, [r7, #14]
 80062e4:	4619      	mov	r1, r3
 80062e6:	4837      	ldr	r0, [pc, #220]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 80062e8:	f00b ffc0 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80062ec:	4836      	ldr	r0, [pc, #216]	; (80063c8 <FuncO_ApplyProfileToAux+0x294>)
 80062ee:	f00c f831 	bl	8012354 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80062f2:	2100      	movs	r1, #0
 80062f4:	4835      	ldr	r0, [pc, #212]	; (80063cc <FuncO_ApplyProfileToAux+0x298>)
 80062f6:	f005 fa5b 	bl	800b7b0 <HAL_DAC_Stop_DMA>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
 8006300:	4619      	mov	r1, r3
 8006302:	4830      	ldr	r0, [pc, #192]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006304:	f00b ffb2 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8006308:	4831      	ldr	r0, [pc, #196]	; (80063d0 <FuncO_ApplyProfileToAux+0x29c>)
 800630a:	f00c f823 	bl	8012354 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800630e:	2001      	movs	r0, #1
 8006310:	f000 fc24 	bl	8006b5c <SM_GetOutputChannel>
 8006314:	4603      	mov	r3, r0
 8006316:	f103 0208 	add.w	r2, r3, #8
 800631a:	2300      	movs	r3, #0
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	2378      	movs	r3, #120	; 0x78
 8006320:	2100      	movs	r1, #0
 8006322:	482a      	ldr	r0, [pc, #168]	; (80063cc <FuncO_ApplyProfileToAux+0x298>)
 8006324:	f005 f982 	bl	800b62c <HAL_DAC_Start_DMA>
 8006328:	4603      	mov	r3, r0
 800632a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	4619      	mov	r1, r3
 8006330:	4824      	ldr	r0, [pc, #144]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006332:	f00b ff9b 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006336:	4827      	ldr	r0, [pc, #156]	; (80063d4 <FuncO_ApplyProfileToAux+0x2a0>)
 8006338:	f00c f80c 	bl	8012354 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800633c:	2100      	movs	r1, #0
 800633e:	4826      	ldr	r0, [pc, #152]	; (80063d8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006340:	f005 fa36 	bl	800b7b0 <HAL_DAC_Stop_DMA>
 8006344:	4603      	mov	r3, r0
 8006346:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	4619      	mov	r1, r3
 800634c:	481d      	ldr	r0, [pc, #116]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 800634e:	f00b ff8d 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006352:	4822      	ldr	r0, [pc, #136]	; (80063dc <FuncO_ApplyProfileToAux+0x2a8>)
 8006354:	f00b fffe 	bl	8012354 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8006358:	2000      	movs	r0, #0
 800635a:	f000 fbff 	bl	8006b5c <SM_GetOutputChannel>
 800635e:	4603      	mov	r3, r0
 8006360:	f103 0208 	add.w	r2, r3, #8
 8006364:	2300      	movs	r3, #0
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2378      	movs	r3, #120	; 0x78
 800636a:	2100      	movs	r1, #0
 800636c:	481a      	ldr	r0, [pc, #104]	; (80063d8 <FuncO_ApplyProfileToAux+0x2a4>)
 800636e:	f005 f95d 	bl	800b62c <HAL_DAC_Start_DMA>
 8006372:	4603      	mov	r3, r0
 8006374:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	4619      	mov	r1, r3
 800637a:	4812      	ldr	r0, [pc, #72]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 800637c:	f00b ff76 	bl	801226c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8006380:	4817      	ldr	r0, [pc, #92]	; (80063e0 <FuncO_ApplyProfileToAux+0x2ac>)
 8006382:	f00b ffe7 	bl	8012354 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8006386:	480e      	ldr	r0, [pc, #56]	; (80063c0 <FuncO_ApplyProfileToAux+0x28c>)
 8006388:	f007 fb8a 	bl	800daa0 <HAL_TIM_Base_Start>
 800638c:	4603      	mov	r3, r0
 800638e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	4619      	mov	r1, r3
 8006394:	480b      	ldr	r0, [pc, #44]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006396:	f00b ff69 	bl	801226c <iprintf>
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd90      	pop	{r4, r7, pc}
 80063a2:	bf00      	nop
 80063a4:	2000012c 	.word	0x2000012c
 80063a8:	080161b4 	.word	0x080161b4
 80063ac:	20001e94 	.word	0x20001e94
 80063b0:	080161dc 	.word	0x080161dc
 80063b4:	08016208 	.word	0x08016208
 80063b8:	08016234 	.word	0x08016234
 80063bc:	0801624c 	.word	0x0801624c
 80063c0:	20002b64 	.word	0x20002b64
 80063c4:	08016280 	.word	0x08016280
 80063c8:	0801628c 	.word	0x0801628c
 80063cc:	20002a18 	.word	0x20002a18
 80063d0:	080162d0 	.word	0x080162d0
 80063d4:	08016314 	.word	0x08016314
 80063d8:	20002a2c 	.word	0x20002a2c
 80063dc:	08016358 	.word	0x08016358
 80063e0:	0801639c 	.word	0x0801639c

080063e4 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 80063e8:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <GO_ResetLastEncoderValue+0x14>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	801a      	strh	r2, [r3, #0]
}
 80063ee:	bf00      	nop
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20001e98 	.word	0x20001e98

080063fc <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8006406:	2000      	movs	r0, #0
 8006408:	f000 fba8 	bl	8006b5c <SM_GetOutputChannel>
 800640c:	4603      	mov	r3, r0
 800640e:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8006416:	4b15      	ldr	r3, [pc, #84]	; (800646c <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	429a      	cmp	r2, r3
 800641e:	d90c      	bls.n	800643a <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	3301      	adds	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	2b07      	cmp	r3, #7
 800642a:	d901      	bls.n	8006430 <GO_MapEncoderPositionToSignalOutput+0x34>
 800642c:	2307      	movs	r3, #7
 800642e:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f81c 	bl	8006470 <GO_ApplyPresetToSignal>
 8006438:	e010      	b.n	800645c <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	429a      	cmp	r2, r3
 8006442:	d20b      	bcs.n	800645c <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	3b01      	subs	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b07      	cmp	r3, #7
 800644e:	d901      	bls.n	8006454 <GO_MapEncoderPositionToSignalOutput+0x58>
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f80a 	bl	8006470 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 800645c:	4a03      	ldr	r2, [pc, #12]	; (800646c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20001e98 	.word	0x20001e98

08006470 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800647a:	79fc      	ldrb	r4, [r7, #7]
 800647c:	2000      	movs	r0, #0
 800647e:	f000 fb6d 	bl	8006b5c <SM_GetOutputChannel>
 8006482:	4601      	mov	r1, r0
 8006484:	4623      	mov	r3, r4
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4423      	add	r3, r4
 800648a:	4a4f      	ldr	r2, [pc, #316]	; (80065c8 <GO_ApplyPresetToSignal+0x158>)
 800648c:	4413      	add	r3, r2
 800648e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	2b07      	cmp	r3, #7
 8006496:	f200 8093 	bhi.w	80065c0 <GO_ApplyPresetToSignal+0x150>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <GO_ApplyPresetToSignal+0x30>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064c1 	.word	0x080064c1
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006521 	.word	0x08006521
 80064b0:	08006541 	.word	0x08006541
 80064b4:	08006561 	.word	0x08006561
 80064b8:	08006581 	.word	0x08006581
 80064bc:	080065a1 	.word	0x080065a1
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80064c0:	2200      	movs	r2, #0
 80064c2:	2101      	movs	r1, #1
 80064c4:	4841      	ldr	r0, [pc, #260]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 80064c6:	f006 f9f1 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80064ca:	2200      	movs	r2, #0
 80064cc:	2120      	movs	r1, #32
 80064ce:	4840      	ldr	r0, [pc, #256]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80064d0:	f006 f9ec 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80064d4:	2200      	movs	r2, #0
 80064d6:	2110      	movs	r1, #16
 80064d8:	483d      	ldr	r0, [pc, #244]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80064da:	f006 f9e7 	bl	800c8ac <HAL_GPIO_WritePin>
			break;
 80064de:	e06f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80064e0:	2201      	movs	r2, #1
 80064e2:	2101      	movs	r1, #1
 80064e4:	4839      	ldr	r0, [pc, #228]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 80064e6:	f006 f9e1 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80064ea:	2200      	movs	r2, #0
 80064ec:	2120      	movs	r1, #32
 80064ee:	4838      	ldr	r0, [pc, #224]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80064f0:	f006 f9dc 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80064f4:	2200      	movs	r2, #0
 80064f6:	2110      	movs	r1, #16
 80064f8:	4835      	ldr	r0, [pc, #212]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80064fa:	f006 f9d7 	bl	800c8ac <HAL_GPIO_WritePin>
			break;
 80064fe:	e05f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006500:	2200      	movs	r2, #0
 8006502:	2101      	movs	r1, #1
 8006504:	4831      	ldr	r0, [pc, #196]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006506:	f006 f9d1 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800650a:	2201      	movs	r2, #1
 800650c:	2120      	movs	r1, #32
 800650e:	4830      	ldr	r0, [pc, #192]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006510:	f006 f9cc 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006514:	2200      	movs	r2, #0
 8006516:	2110      	movs	r1, #16
 8006518:	482d      	ldr	r0, [pc, #180]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800651a:	f006 f9c7 	bl	800c8ac <HAL_GPIO_WritePin>
			break;
 800651e:	e04f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006520:	2201      	movs	r2, #1
 8006522:	2101      	movs	r1, #1
 8006524:	4829      	ldr	r0, [pc, #164]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006526:	f006 f9c1 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800652a:	2201      	movs	r2, #1
 800652c:	2120      	movs	r1, #32
 800652e:	4828      	ldr	r0, [pc, #160]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006530:	f006 f9bc 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006534:	2200      	movs	r2, #0
 8006536:	2110      	movs	r1, #16
 8006538:	4825      	ldr	r0, [pc, #148]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800653a:	f006 f9b7 	bl	800c8ac <HAL_GPIO_WritePin>
			break;
 800653e:	e03f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006540:	2200      	movs	r2, #0
 8006542:	2101      	movs	r1, #1
 8006544:	4821      	ldr	r0, [pc, #132]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006546:	f006 f9b1 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800654a:	2200      	movs	r2, #0
 800654c:	2120      	movs	r1, #32
 800654e:	4820      	ldr	r0, [pc, #128]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006550:	f006 f9ac 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006554:	2201      	movs	r2, #1
 8006556:	2110      	movs	r1, #16
 8006558:	481d      	ldr	r0, [pc, #116]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800655a:	f006 f9a7 	bl	800c8ac <HAL_GPIO_WritePin>
			break;
 800655e:	e02f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006560:	2201      	movs	r2, #1
 8006562:	2101      	movs	r1, #1
 8006564:	4819      	ldr	r0, [pc, #100]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006566:	f006 f9a1 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800656a:	2200      	movs	r2, #0
 800656c:	2120      	movs	r1, #32
 800656e:	4818      	ldr	r0, [pc, #96]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006570:	f006 f99c 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006574:	2201      	movs	r2, #1
 8006576:	2110      	movs	r1, #16
 8006578:	4815      	ldr	r0, [pc, #84]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800657a:	f006 f997 	bl	800c8ac <HAL_GPIO_WritePin>
			break;
 800657e:	e01f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006580:	2200      	movs	r2, #0
 8006582:	2101      	movs	r1, #1
 8006584:	4811      	ldr	r0, [pc, #68]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006586:	f006 f991 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800658a:	2201      	movs	r2, #1
 800658c:	2120      	movs	r1, #32
 800658e:	4810      	ldr	r0, [pc, #64]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006590:	f006 f98c 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006594:	2201      	movs	r2, #1
 8006596:	2110      	movs	r1, #16
 8006598:	480d      	ldr	r0, [pc, #52]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800659a:	f006 f987 	bl	800c8ac <HAL_GPIO_WritePin>
			break;
 800659e:	e00f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80065a0:	2201      	movs	r2, #1
 80065a2:	2101      	movs	r1, #1
 80065a4:	4809      	ldr	r0, [pc, #36]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 80065a6:	f006 f981 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80065aa:	2201      	movs	r2, #1
 80065ac:	2120      	movs	r1, #32
 80065ae:	4808      	ldr	r0, [pc, #32]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80065b0:	f006 f97c 	bl	800c8ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80065b4:	2201      	movs	r2, #1
 80065b6:	2110      	movs	r1, #16
 80065b8:	4805      	ldr	r0, [pc, #20]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80065ba:	f006 f977 	bl	800c8ac <HAL_GPIO_WritePin>
			break;
 80065be:	bf00      	nop
	}

}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd90      	pop	{r4, r7, pc}
 80065c8:	20000164 	.word	0x20000164
 80065cc:	48000400 	.word	0x48000400
 80065d0:	48000800 	.word	0x48000800

080065d4 <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 80065da:	f000 f8e1 	bl	80067a0 <IT_GetTriggerStatus>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d020      	beq.n	8006626 <IT_ArbitrateInputTrigger+0x52>
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
		// set status to disabled
*/

		// disable freq count timer
		HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80065e4:	2100      	movs	r1, #0
 80065e6:	4849      	ldr	r0, [pc, #292]	; (800670c <IT_ArbitrateInputTrigger+0x138>)
 80065e8:	f007 fedc 	bl	800e3a4 <HAL_TIM_IC_Stop_DMA>
//		INPUT_TIMER->DIER &= ~TIM_DIER_UDE;
//		INPUT_TIMER->CR1 &= ~TIM_CR1_CEN;

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 80065ec:	4848      	ldr	r0, [pc, #288]	; (8006710 <IT_ArbitrateInputTrigger+0x13c>)
 80065ee:	f004 fdb3 	bl	800b158 <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 80065f2:	4848      	ldr	r0, [pc, #288]	; (8006714 <IT_ArbitrateInputTrigger+0x140>)
 80065f4:	f003 fb56 	bl	8009ca4 <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 80065f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8006608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006612:	f023 0308 	bic.w	r3, r3, #8
 8006616:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);
 8006618:	2000      	movs	r0, #0
 800661a:	f000 f8cd 	bl	80067b8 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 800661e:	2000      	movs	r0, #0
 8006620:	f7ff fd24 	bl	800606c <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
	}

}
 8006624:	e06f      	b.n	8006706 <IT_ArbitrateInputTrigger+0x132>
		switch(IT_GetActiveTriggerMode())
 8006626:	f000 f89f 	bl	8006768 <IT_GetActiveTriggerMode>
 800662a:	4603      	mov	r3, r0
 800662c:	2b01      	cmp	r3, #1
 800662e:	d017      	beq.n	8006660 <IT_ArbitrateInputTrigger+0x8c>
 8006630:	2b02      	cmp	r3, #2
 8006632:	d050      	beq.n	80066d6 <IT_ArbitrateInputTrigger+0x102>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d000      	beq.n	800663a <IT_ArbitrateInputTrigger+0x66>
				break;
 8006638:	e062      	b.n	8006700 <IT_ArbitrateInputTrigger+0x12c>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 800663a:	2201      	movs	r2, #1
 800663c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006640:	4835      	ldr	r0, [pc, #212]	; (8006718 <IT_ArbitrateInputTrigger+0x144>)
 8006642:	f006 f933 	bl	800c8ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 8006646:	2200      	movs	r2, #0
 8006648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800664c:	4832      	ldr	r0, [pc, #200]	; (8006718 <IT_ArbitrateInputTrigger+0x144>)
 800664e:	f006 f92d 	bl	800c8ac <HAL_GPIO_WritePin>
				HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, freq_count_store, MAX_FREQ_COUNT_STORE);
 8006652:	2308      	movs	r3, #8
 8006654:	4a31      	ldr	r2, [pc, #196]	; (800671c <IT_ArbitrateInputTrigger+0x148>)
 8006656:	2100      	movs	r1, #0
 8006658:	482c      	ldr	r0, [pc, #176]	; (800670c <IT_ArbitrateInputTrigger+0x138>)
 800665a:	f007 fd15 	bl	800e088 <HAL_TIM_IC_Start_DMA>
				break;
 800665e:	e04f      	b.n	8006700 <IT_ArbitrateInputTrigger+0x12c>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006666:	482c      	ldr	r0, [pc, #176]	; (8006718 <IT_ArbitrateInputTrigger+0x144>)
 8006668:	f006 f920 	bl	800c8ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 800666c:	2201      	movs	r2, #1
 800666e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006672:	4829      	ldr	r0, [pc, #164]	; (8006718 <IT_ArbitrateInputTrigger+0x144>)
 8006674:	f006 f91a 	bl	800c8ac <HAL_GPIO_WritePin>
				COMP1->CSR |= COMP_CSR_EN;
 8006678:	4b29      	ldr	r3, [pc, #164]	; (8006720 <IT_ArbitrateInputTrigger+0x14c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a28      	ldr	r2, [pc, #160]	; (8006720 <IT_ArbitrateInputTrigger+0x14c>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 8006684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800668e:	f023 031e 	bic.w	r3, r3, #30
 8006692:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= (GPIO_AF8_COMP1);
 8006694:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800669e:	f043 0308 	orr.w	r3, r3, #8
 80066a2:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80066a4:	4b1f      	ldr	r3, [pc, #124]	; (8006724 <IT_ArbitrateInputTrigger+0x150>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1e      	ldr	r2, [pc, #120]	; (8006724 <IT_ArbitrateInputTrigger+0x150>)
 80066aa:	f023 0301 	bic.w	r3, r3, #1
 80066ae:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80066b0:	2100      	movs	r1, #0
 80066b2:	481d      	ldr	r0, [pc, #116]	; (8006728 <IT_ArbitrateInputTrigger+0x154>)
 80066b4:	f005 f87c 	bl	800b7b0 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, comp1_output_value, 1, DAC_ALIGN_12B_R);
 80066b8:	2300      	movs	r3, #0
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2301      	movs	r3, #1
 80066be:	4a1b      	ldr	r2, [pc, #108]	; (800672c <IT_ArbitrateInputTrigger+0x158>)
 80066c0:	2100      	movs	r1, #0
 80066c2:	4819      	ldr	r0, [pc, #100]	; (8006728 <IT_ArbitrateInputTrigger+0x154>)
 80066c4:	f004 ffb2 	bl	800b62c <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80066c8:	4b16      	ldr	r3, [pc, #88]	; (8006724 <IT_ArbitrateInputTrigger+0x150>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a15      	ldr	r2, [pc, #84]	; (8006724 <IT_ArbitrateInputTrigger+0x150>)
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	6013      	str	r3, [r2, #0]
				break;
 80066d4:	e014      	b.n	8006700 <IT_ArbitrateInputTrigger+0x12c>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80066d6:	2201      	movs	r2, #1
 80066d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066dc:	480e      	ldr	r0, [pc, #56]	; (8006718 <IT_ArbitrateInputTrigger+0x144>)
 80066de:	f006 f8e5 	bl	800c8ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 80066e2:	2201      	movs	r2, #1
 80066e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066e8:	480b      	ldr	r0, [pc, #44]	; (8006718 <IT_ArbitrateInputTrigger+0x144>)
 80066ea:	f006 f8df 	bl	800c8ac <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
 80066ee:	22f0      	movs	r2, #240	; 0xf0
 80066f0:	490f      	ldr	r1, [pc, #60]	; (8006730 <IT_ArbitrateInputTrigger+0x15c>)
 80066f2:	4808      	ldr	r0, [pc, #32]	; (8006714 <IT_ArbitrateInputTrigger+0x140>)
 80066f4:	f003 fa08 	bl	8009b08 <HAL_ADC_Start_DMA>
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80066f8:	2000      	movs	r0, #0
 80066fa:	f7ff fcb7 	bl	800606c <FuncO_ApplyProfileToSignal>
				break;
 80066fe:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
 8006700:	2001      	movs	r0, #1
 8006702:	f000 f859 	bl	80067b8 <IT_SetTriggerStatus>
}
 8006706:	bf00      	nop
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20002d2c 	.word	0x20002d2c
 8006710:	200029f4 	.word	0x200029f4
 8006714:	20002928 	.word	0x20002928
 8006718:	48000800 	.word	0x48000800
 800671c:	20002338 	.word	0x20002338
 8006720:	40010200 	.word	0x40010200
 8006724:	40013400 	.word	0x40013400
 8006728:	20002a2c 	.word	0x20002a2c
 800672c:	20002330 	.word	0x20002330
 8006730:	20001e9c 	.word	0x20001e9c

08006734 <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 8006738:	f000 f816 	bl	8006768 <IT_GetActiveTriggerMode>
 800673c:	4603      	mov	r3, r0
 800673e:	2b01      	cmp	r3, #1
 8006740:	d008      	beq.n	8006754 <IT_CycleInputTriggerMode+0x20>
 8006742:	2b02      	cmp	r3, #2
 8006744:	d00a      	beq.n	800675c <IT_CycleInputTriggerMode+0x28>
 8006746:	2b00      	cmp	r3, #0
 8006748:	d000      	beq.n	800674c <IT_CycleInputTriggerMode+0x18>
		case INPUT_TIMER_ADC:
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
			break;

		default:
			break;
 800674a:	e00b      	b.n	8006764 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_COMP);
 800674c:	2001      	movs	r0, #1
 800674e:	f000 f817 	bl	8006780 <IT_SetActiveTriggerMode>
			break;
 8006752:	e007      	b.n	8006764 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_ADC);
 8006754:	2002      	movs	r0, #2
 8006756:	f000 f813 	bl	8006780 <IT_SetActiveTriggerMode>
			break;
 800675a:	e003      	b.n	8006764 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
 800675c:	2000      	movs	r0, #0
 800675e:	f000 f80f 	bl	8006780 <IT_SetActiveTriggerMode>
			break;
 8006762:	bf00      	nop
	}
}
 8006764:	bf00      	nop
 8006766:	bd80      	pop	{r7, pc}

08006768 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 800676c:	4b03      	ldr	r3, [pc, #12]	; (800677c <IT_GetActiveTriggerMode+0x14>)
 800676e:	781b      	ldrb	r3, [r3, #0]
}
 8006770:	4618      	mov	r0, r3
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20001e9a 	.word	0x20001e9a

08006780 <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	4603      	mov	r3, r0
 8006788:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 800678a:	4a04      	ldr	r2, [pc, #16]	; (800679c <IT_SetActiveTriggerMode+0x1c>)
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	7013      	strb	r3, [r2, #0]
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	20001e9a 	.word	0x20001e9a

080067a0 <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 80067a4:	4b03      	ldr	r3, [pc, #12]	; (80067b4 <IT_GetTriggerStatus+0x14>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20001e9b 	.word	0x20001e9b

080067b8 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 80067c2:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <IT_SetTriggerStatus+0x1c>)
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	7013      	strb	r3, [r2, #0]
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	20001e9b 	.word	0x20001e9b

080067d8 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 80067e0:	4808      	ldr	r0, [pc, #32]	; (8006804 <HAL_COMP_TriggerCallback+0x2c>)
 80067e2:	f004 fd5f 	bl	800b2a4 <HAL_COMP_GetOutputLevel>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <HAL_COMP_TriggerCallback+0x30>)
 80067ee:	f640 72ff 	movw	r2, #4095	; 0xfff
 80067f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 80067f4:	e002      	b.n	80067fc <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <HAL_COMP_TriggerCallback+0x30>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	200029f4 	.word	0x200029f4
 8006808:	20002330 	.word	0x20002330

0800680c <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	if(trigger_input[0] == 0)
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <HAL_ADC_ConvCpltCallback+0x34>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <HAL_ADC_ConvCpltCallback+0x18>
		OUTPUT_TIMER->ARR = 1;
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <HAL_ADC_ConvCpltCallback+0x38>)
 800681e:	2201      	movs	r2, #1
 8006820:	62da      	str	r2, [r3, #44]	; 0x2c
 8006822:	e003      	b.n	800682c <HAL_ADC_ConvCpltCallback+0x20>
	else
		OUTPUT_TIMER->ARR = trigger_input[0];
 8006824:	4a07      	ldr	r2, [pc, #28]	; (8006844 <HAL_ADC_ConvCpltCallback+0x38>)
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <HAL_ADC_ConvCpltCallback+0x34>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	62d3      	str	r3, [r2, #44]	; 0x2c
	printf("%lu\n", trigger_input[0]);
 800682c:	4b04      	ldr	r3, [pc, #16]	; (8006840 <HAL_ADC_ConvCpltCallback+0x34>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4619      	mov	r1, r3
 8006832:	4805      	ldr	r0, [pc, #20]	; (8006848 <HAL_ADC_ConvCpltCallback+0x3c>)
 8006834:	f00b fd1a 	bl	801226c <iprintf>
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20001e9c 	.word	0x20001e9c
 8006844:	40013400 	.word	0x40013400
 8006848:	08016400 	.word	0x08016400

0800684c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b590      	push	{r4, r7, lr}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]

	avg_freq_count_period = 0;
 8006854:	4b2a      	ldr	r3, [pc, #168]	; (8006900 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e00b      	b.n	8006878 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		avg_freq_count_period += freq_count_store[x];
 8006860:	4a28      	ldr	r2, [pc, #160]	; (8006904 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006868:	4b25      	ldr	r3, [pc, #148]	; (8006900 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4413      	add	r3, r2
 800686e:	4a24      	ldr	r2, [pc, #144]	; (8006900 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006870:	6013      	str	r3, [r2, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b07      	cmp	r3, #7
 800687c:	ddf0      	ble.n	8006860 <HAL_TIM_IC_CaptureCallback+0x14>
	}

	avg_freq_count_period /= MAX_FREQ_COUNT_STORE;
 800687e:	4b20      	ldr	r3, [pc, #128]	; (8006900 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	08db      	lsrs	r3, r3, #3
 8006884:	4a1e      	ldr	r2, [pc, #120]	; (8006900 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006886:	6013      	str	r3, [r2, #0]
	avg_freq_count_hertz = (float)SM_MCLK / ((float)INPUT_TIMER->PSC * (float)avg_freq_count_period);
 8006888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006896:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068a6:	eddf 6a18 	vldr	s13, [pc, #96]	; 8006908 <HAL_TIM_IC_CaptureCallback+0xbc>
 80068aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ae:	4b17      	ldr	r3, [pc, #92]	; (800690c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80068b0:	edc3 7a00 	vstr	s15, [r3]

	// auto toggle "LF" mode
	if(avg_freq_count_hertz < 50)
 80068b4:	4b15      	ldr	r3, [pc, #84]	; (800690c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80068b6:	edd3 7a00 	vldr	s15, [r3]
 80068ba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006910 <HAL_TIM_IC_CaptureCallback+0xc4>
 80068be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c6:	d505      	bpl.n	80068d4 <HAL_TIM_IC_CaptureCallback+0x88>
		INPUT_TIMER->PSC = 8000;
 80068c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80068d0:	629a      	str	r2, [r3, #40]	; 0x28
 80068d2:	e003      	b.n	80068dc <HAL_TIM_IC_CaptureCallback+0x90>
	else
		INPUT_TIMER->PSC = 128;
 80068d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068d8:	2280      	movs	r2, #128	; 0x80
 80068da:	629a      	str	r2, [r3, #40]	; 0x28

	printf("ARR %lu = %4.2fHz\n",avg_freq_count_period, avg_freq_count_hertz);
 80068dc:	4b08      	ldr	r3, [pc, #32]	; (8006900 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80068de:	681c      	ldr	r4, [r3, #0]
 80068e0:	4b0a      	ldr	r3, [pc, #40]	; (800690c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7f9 fe57 	bl	8000598 <__aeabi_f2d>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4621      	mov	r1, r4
 80068f0:	4808      	ldr	r0, [pc, #32]	; (8006914 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80068f2:	f00b fcbb 	bl	801226c <iprintf>

}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd90      	pop	{r4, r7, pc}
 80068fe:	bf00      	nop
 8006900:	20002358 	.word	0x20002358
 8006904:	20002338 	.word	0x20002338
 8006908:	4d2037a0 	.word	0x4d2037a0
 800690c:	2000235c 	.word	0x2000235c
 8006910:	42480000 	.word	0x42480000
 8006914:	08016408 	.word	0x08016408

08006918 <IT_GetAverageFreqCountHertz>:
 *	@param None
 *	@retval None
 *
 */
float IT_GetAverageFreqCountHertz()
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
	return avg_freq_count_hertz;
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <IT_GetAverageFreqCountHertz+0x18>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	ee07 3a90 	vmov	s15, r3
}
 8006924:	eeb0 0a67 	vmov.f32	s0, s15
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	2000235c 	.word	0x2000235c

08006934 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8006938:	f7fe fff6 	bl	8005928 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 800693c:	f000 f8ae 	bl	8006a9c <_InitOutputChannels>
	_InitAmpProfiles();
 8006940:	f000 f824 	bl	800698c <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8006944:	2110      	movs	r1, #16
 8006946:	480f      	ldr	r0, [pc, #60]	; (8006984 <SM_Init+0x50>)
 8006948:	f004 fe1d 	bl	800b586 <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 800694c:	2201      	movs	r2, #1
 800694e:	2108      	movs	r1, #8
 8006950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006954:	f005 ffaa 	bl	800c8ac <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8006958:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <SM_Init+0x54>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a0a      	ldr	r2, [pc, #40]	; (8006988 <SM_Init+0x54>)
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006964:	2000      	movs	r0, #0
 8006966:	f7ff fb81 	bl	800606c <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 800696a:	2059      	movs	r0, #89	; 0x59
 800696c:	f000 fc2c 	bl	80071c8 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 8006970:	2000      	movs	r0, #0
 8006972:	f7ff fbdf 	bl	8006134 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 8006976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800697a:	f7ff f8e5 	bl	8005b48 <FreqO_ApplyProfile>

}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20002a2c 	.word	0x20002a2c
 8006988:	40013400 	.word	0x40013400

0800698c <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 800698c:	b590      	push	{r4, r7, lr}
 800698e:	b08b      	sub	sp, #44	; 0x2c
 8006990:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006992:	2300      	movs	r3, #0
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
 8006996:	e033      	b.n	8006a00 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006998:	493c      	ldr	r1, [pc, #240]	; (8006a8c <_InitAmpProfiles+0x100>)
 800699a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699c:	4613      	mov	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	440b      	add	r3, r1
 80069a6:	3304      	adds	r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 80069ac:	4b38      	ldr	r3, [pc, #224]	; (8006a90 <_InitAmpProfiles+0x104>)
 80069ae:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 80069b0:	4936      	ldr	r1, [pc, #216]	; (8006a8c <_InitAmpProfiles+0x100>)
 80069b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b4:	4613      	mov	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	3308      	adds	r3, #8
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ca:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 80069ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80069d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80069d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80069da:	ed97 7a02 	vldr	s14, [r7, #8]
 80069de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e2:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 80069e6:	4929      	ldr	r1, [pc, #164]	; (8006a8c <_InitAmpProfiles+0x100>)
 80069e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ea:	4613      	mov	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3310      	adds	r3, #16
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	3301      	adds	r3, #1
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	2b61      	cmp	r3, #97	; 0x61
 8006a04:	ddc8      	ble.n	8006998 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006a06:	2300      	movs	r3, #0
 8006a08:	623b      	str	r3, [r7, #32]
 8006a0a:	e037      	b.n	8006a7c <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8006a0c:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <_InitAmpProfiles+0x108>)
 8006a0e:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006a10:	491e      	ldr	r1, [pc, #120]	; (8006a8c <_InitAmpProfiles+0x100>)
 8006a12:	6a3a      	ldr	r2, [r7, #32]
 8006a14:	4613      	mov	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	1a9b      	subs	r3, r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	3304      	adds	r3, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8006a24:	ed97 7a06 	vldr	s14, [r7, #24]
 8006a28:	edd7 7a07 	vldr	s15, [r7, #28]
 8006a2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a30:	ee16 0a90 	vmov	r0, s13
 8006a34:	f7f9 fdb0 	bl	8000598 <__aeabi_f2d>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	ec44 3b10 	vmov	d0, r3, r4
 8006a40:	f00d fd22 	bl	8014488 <log10>
 8006a44:	ec51 0b10 	vmov	r0, r1, d0
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <_InitAmpProfiles+0x10c>)
 8006a4e:	f7f9 fdfb 	bl	8000648 <__aeabi_dmul>
 8006a52:	4603      	mov	r3, r0
 8006a54:	460c      	mov	r4, r1
 8006a56:	4618      	mov	r0, r3
 8006a58:	4621      	mov	r1, r4
 8006a5a:	f7fa f8ed 	bl	8000c38 <__aeabi_d2f>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8006a62:	490a      	ldr	r1, [pc, #40]	; (8006a8c <_InitAmpProfiles+0x100>)
 8006a64:	6a3a      	ldr	r2, [r7, #32]
 8006a66:	4613      	mov	r3, r2
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	330c      	adds	r3, #12
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	623b      	str	r3, [r7, #32]
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	2b61      	cmp	r3, #97	; 0x61
 8006a80:	ddc4      	ble.n	8006a0c <_InitAmpProfiles+0x80>

	}
}
 8006a82:	bf00      	nop
 8006a84:	372c      	adds	r7, #44	; 0x2c
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd90      	pop	{r4, r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	2000017c 	.word	0x2000017c
 8006a90:	402ccccd 	.word	0x402ccccd
 8006a94:	3a83126f 	.word	0x3a83126f
 8006a98:	40340000 	.word	0x40340000

08006a9c <_InitOutputChannels>:

void _InitOutputChannels()
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8006aa2:	4b28      	ldr	r3, [pc, #160]	; (8006b44 <_InitOutputChannels+0xa8>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006aa8:	4b27      	ldr	r3, [pc, #156]	; (8006b48 <_InitOutputChannels+0xac>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4a25      	ldr	r2, [pc, #148]	; (8006b44 <_InitOutputChannels+0xa8>)
 8006aae:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006ab0:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <_InitOutputChannels+0xa8>)
 8006ab2:	4a25      	ldr	r2, [pc, #148]	; (8006b48 <_InitOutputChannels+0xac>)
 8006ab4:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	e00b      	b.n	8006ad6 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006abe:	4a23      	ldr	r2, [pc, #140]	; (8006b4c <_InitOutputChannels+0xb0>)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006ac6:	491f      	ldr	r1, [pc, #124]	; (8006b44 <_InitOutputChannels+0xa8>)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3302      	adds	r3, #2
 8006acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b77      	cmp	r3, #119	; 0x77
 8006ada:	ddf0      	ble.n	8006abe <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006adc:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <_InitOutputChannels+0xa8>)
 8006ade:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <_InitOutputChannels+0xb4>)
 8006ae0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006ae4:	4b17      	ldr	r3, [pc, #92]	; (8006b44 <_InitOutputChannels+0xa8>)
 8006ae6:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <_InitOutputChannels+0xb8>)
 8006ae8:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8006aec:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <_InitOutputChannels+0xbc>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006af2:	4b15      	ldr	r3, [pc, #84]	; (8006b48 <_InitOutputChannels+0xac>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <_InitOutputChannels+0xbc>)
 8006af8:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006afa:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <_InitOutputChannels+0xbc>)
 8006afc:	4a12      	ldr	r2, [pc, #72]	; (8006b48 <_InitOutputChannels+0xac>)
 8006afe:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006b02:	2300      	movs	r3, #0
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	e00b      	b.n	8006b20 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006b08:	4a10      	ldr	r2, [pc, #64]	; (8006b4c <_InitOutputChannels+0xb0>)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b10:	4911      	ldr	r1, [pc, #68]	; (8006b58 <_InitOutputChannels+0xbc>)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	3302      	adds	r3, #2
 8006b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b77      	cmp	r3, #119	; 0x77
 8006b24:	ddf0      	ble.n	8006b08 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <_InitOutputChannels+0xbc>)
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <_InitOutputChannels+0xb4>)
 8006b2a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <_InitOutputChannels+0xbc>)
 8006b30:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <_InitOutputChannels+0xb8>)
 8006b32:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20002360 	.word	0x20002360
 8006b48:	2000012c 	.word	0x2000012c
 8006b4c:	200014b8 	.word	0x200014b8
 8006b50:	20000b38 	.word	0x20000b38
 8006b54:	20000179 	.word	0x20000179
 8006b58:	20002554 	.word	0x20002554

08006b5c <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8006b6c:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <SM_GetOutputChannel+0x24>)
 8006b6e:	e000      	b.n	8006b72 <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8006b70:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <SM_GetOutputChannel+0x28>)
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20002360 	.word	0x20002360
 8006b84:	20002554 	.word	0x20002554

08006b88 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b096      	sub	sp, #88	; 0x58
 8006b8c:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8006b8e:	4889      	ldr	r0, [pc, #548]	; (8006db4 <SM_EnablePwmToAux+0x22c>)
 8006b90:	f00b fbe0 	bl	8012354 <puts>

	HAL_StatusTypeDef res = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	609a      	str	r2, [r3, #8]
 8006ba6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006bb4:	f107 031c 	add.w	r3, r7, #28
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	605a      	str	r2, [r3, #4]
 8006bbe:	609a      	str	r2, [r3, #8]
 8006bc0:	60da      	str	r2, [r3, #12]
 8006bc2:	611a      	str	r2, [r3, #16]
 8006bc4:	615a      	str	r2, [r3, #20]
 8006bc6:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bc8:	f107 0308 	add.w	r3, r7, #8
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	605a      	str	r2, [r3, #4]
 8006bd2:	609a      	str	r2, [r3, #8]
 8006bd4:	60da      	str	r2, [r3, #12]
 8006bd6:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8006bd8:	4b77      	ldr	r3, [pc, #476]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006bda:	4a78      	ldr	r2, [pc, #480]	; (8006dbc <SM_EnablePwmToAux+0x234>)
 8006bdc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006bde:	4b76      	ldr	r3, [pc, #472]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006be4:	4b74      	ldr	r3, [pc, #464]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006be6:	2210      	movs	r2, #16
 8006be8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006bea:	4b73      	ldr	r3, [pc, #460]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006bf0:	4b71      	ldr	r3, [pc, #452]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006bf8:	4b6f      	ldr	r3, [pc, #444]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006bfa:	2280      	movs	r2, #128	; 0x80
 8006bfc:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8006bfe:	486e      	ldr	r0, [pc, #440]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006c00:	f006 fef6 	bl	800d9f0 <HAL_TIM_Base_Init>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d107      	bne.n	8006c20 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8006c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c14:	4619      	mov	r1, r3
 8006c16:	486a      	ldr	r0, [pc, #424]	; (8006dc0 <SM_EnablePwmToAux+0x238>)
 8006c18:	f00b fb28 	bl	801226c <iprintf>
		Error_Handler();
 8006c1c:	f001 fb9c 	bl	8008358 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c24:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8006c26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4862      	ldr	r0, [pc, #392]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006c2e:	f008 f84f 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d107      	bne.n	8006c4e <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 8006c3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c42:	4619      	mov	r1, r3
 8006c44:	485f      	ldr	r0, [pc, #380]	; (8006dc4 <SM_EnablePwmToAux+0x23c>)
 8006c46:	f00b fb11 	bl	801226c <iprintf>
		Error_Handler();
 8006c4a:	f001 fb85 	bl	8008358 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8006c4e:	485a      	ldr	r0, [pc, #360]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006c50:	f006 ffe1 	bl	800dc16 <HAL_TIM_PWM_Init>
 8006c54:	4603      	mov	r3, r0
 8006c56:	461a      	mov	r2, r3
 8006c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d107      	bne.n	8006c70 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8006c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c64:	4619      	mov	r1, r3
 8006c66:	4858      	ldr	r0, [pc, #352]	; (8006dc8 <SM_EnablePwmToAux+0x240>)
 8006c68:	f00b fb00 	bl	801226c <iprintf>
		Error_Handler();
 8006c6c:	f001 fb74 	bl	8008358 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006c70:	2320      	movs	r3, #32
 8006c72:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c74:	2300      	movs	r3, #0
 8006c76:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006c78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	484e      	ldr	r0, [pc, #312]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006c80:	f009 f8f0 	bl	800fe64 <HAL_TIMEx_MasterConfigSynchronization>
 8006c84:	4603      	mov	r3, r0
 8006c86:	461a      	mov	r2, r3
 8006c88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d107      	bne.n	8006ca0 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006c90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c94:	4619      	mov	r1, r3
 8006c96:	484d      	ldr	r0, [pc, #308]	; (8006dcc <SM_EnablePwmToAux+0x244>)
 8006c98:	f00b fae8 	bl	801226c <iprintf>
		Error_Handler();
 8006c9c:	f001 fb5c 	bl	8008358 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ca0:	2360      	movs	r3, #96	; 0x60
 8006ca2:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006cb0:	f107 031c 	add.w	r3, r7, #28
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	483f      	ldr	r0, [pc, #252]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006cba:	f007 fef9 	bl	800eab0 <HAL_TIM_PWM_ConfigChannel>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d107      	bne.n	8006cda <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006cca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cce:	4619      	mov	r1, r3
 8006cd0:	483f      	ldr	r0, [pc, #252]	; (8006dd0 <SM_EnablePwmToAux+0x248>)
 8006cd2:	f00b facb 	bl	801226c <iprintf>
		Error_Handler();
 8006cd6:	f001 fb3f 	bl	8008358 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006cda:	483e      	ldr	r0, [pc, #248]	; (8006dd4 <SM_EnablePwmToAux+0x24c>)
 8006cdc:	f00b fb3a 	bl	8012354 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006ce0:	4b3d      	ldr	r3, [pc, #244]	; (8006dd8 <SM_EnablePwmToAux+0x250>)
 8006ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce4:	4a3c      	ldr	r2, [pc, #240]	; (8006dd8 <SM_EnablePwmToAux+0x250>)
 8006ce6:	f043 0301 	orr.w	r3, r3, #1
 8006cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cec:	4b3a      	ldr	r3, [pc, #232]	; (8006dd8 <SM_EnablePwmToAux+0x250>)
 8006cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	607b      	str	r3, [r7, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006cf8:	2340      	movs	r3, #64	; 0x40
 8006cfa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006d0c:	4833      	ldr	r0, [pc, #204]	; (8006ddc <SM_EnablePwmToAux+0x254>)
 8006d0e:	f00b fb21 	bl	8012354 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d12:	f107 0308 	add.w	r3, r7, #8
 8006d16:	4619      	mov	r1, r3
 8006d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d1c:	f005 fb62 	bl	800c3e4 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8006d20:	482f      	ldr	r0, [pc, #188]	; (8006de0 <SM_EnablePwmToAux+0x258>)
 8006d22:	f00b fb17 	bl	8012354 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006d26:	4b2c      	ldr	r3, [pc, #176]	; (8006dd8 <SM_EnablePwmToAux+0x250>)
 8006d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2a:	4a2b      	ldr	r2, [pc, #172]	; (8006dd8 <SM_EnablePwmToAux+0x250>)
 8006d2c:	f043 0302 	orr.w	r3, r3, #2
 8006d30:	6593      	str	r3, [r2, #88]	; 0x58
 8006d32:	4b29      	ldr	r3, [pc, #164]	; (8006dd8 <SM_EnablePwmToAux+0x250>)
 8006d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 8006d3e:	4829      	ldr	r0, [pc, #164]	; (8006de4 <SM_EnablePwmToAux+0x25c>)
 8006d40:	f00b fb08 	bl	8012354 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006d44:	2200      	movs	r2, #0
 8006d46:	2100      	movs	r1, #0
 8006d48:	201d      	movs	r0, #29
 8006d4a:	f004 fbb8 	bl	800b4be <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 8006d4e:	4826      	ldr	r0, [pc, #152]	; (8006de8 <SM_EnablePwmToAux+0x260>)
 8006d50:	f00b fb00 	bl	8012354 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006d54:	201d      	movs	r0, #29
 8006d56:	f004 fbcc 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 8006d5a:	4824      	ldr	r0, [pc, #144]	; (8006dec <SM_EnablePwmToAux+0x264>)
 8006d5c:	f00b fafa 	bl	8012354 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006d60:	2100      	movs	r1, #0
 8006d62:	4815      	ldr	r0, [pc, #84]	; (8006db8 <SM_EnablePwmToAux+0x230>)
 8006d64:	f006 ffb8 	bl	800dcd8 <HAL_TIM_PWM_Start>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d107      	bne.n	8006d84 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8006d74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d78:	4619      	mov	r1, r3
 8006d7a:	481d      	ldr	r0, [pc, #116]	; (8006df0 <SM_EnablePwmToAux+0x268>)
 8006d7c:	f00b fa76 	bl	801226c <iprintf>
		Error_Handler();
 8006d80:	f001 faea 	bl	8008358 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8006d84:	481b      	ldr	r0, [pc, #108]	; (8006df4 <SM_EnablePwmToAux+0x26c>)
 8006d86:	f00b fae5 	bl	8012354 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006d8a:	2007      	movs	r0, #7
 8006d8c:	f7ff fb70 	bl	8006470 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006d90:	4819      	ldr	r0, [pc, #100]	; (8006df8 <SM_EnablePwmToAux+0x270>)
 8006d92:	f00b fadf 	bl	8012354 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 8006d96:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <SM_EnablePwmToAux+0x234>)
 8006d98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d9c:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006d9e:	4817      	ldr	r0, [pc, #92]	; (8006dfc <SM_EnablePwmToAux+0x274>)
 8006da0:	f00b fad8 	bl	8012354 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006da4:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <SM_EnablePwmToAux+0x234>)
 8006da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006daa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006dac:	bf00      	nop
 8006dae:	3758      	adds	r7, #88	; 0x58
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	08016464 	.word	0x08016464
 8006db8:	200022e0 	.word	0x200022e0
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	08016478 	.word	0x08016478
 8006dc4:	080164ac 	.word	0x080164ac
 8006dc8:	080164e8 	.word	0x080164e8
 8006dcc:	08016518 	.word	0x08016518
 8006dd0:	08016560 	.word	0x08016560
 8006dd4:	0801659c 	.word	0x0801659c
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	080165cc 	.word	0x080165cc
 8006de0:	080165f0 	.word	0x080165f0
 8006de4:	08016628 	.word	0x08016628
 8006de8:	08016650 	.word	0x08016650
 8006dec:	08016678 	.word	0x08016678
 8006df0:	080166a0 	.word	0x080166a0
 8006df4:	080166d4 	.word	0x080166d4
 8006df8:	08016700 	.word	0x08016700
 8006dfc:	08016734 	.word	0x08016734

08006e00 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 8006e06:	4815      	ldr	r0, [pc, #84]	; (8006e5c <SM_DisablePwmToAux+0x5c>)
 8006e08:	f00b fa30 	bl	801226c <iprintf>

	HAL_StatusTypeDef res = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006e10:	4813      	ldr	r0, [pc, #76]	; (8006e60 <SM_DisablePwmToAux+0x60>)
 8006e12:	f00b fa9f 	bl	8012354 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006e16:	2100      	movs	r1, #0
 8006e18:	4812      	ldr	r0, [pc, #72]	; (8006e64 <SM_DisablePwmToAux+0x64>)
 8006e1a:	f007 f837 	bl	800de8c <HAL_TIM_PWM_Stop>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	461a      	mov	r2, r3
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d106      	bne.n	8006e36 <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	480e      	ldr	r0, [pc, #56]	; (8006e68 <SM_DisablePwmToAux+0x68>)
 8006e2e:	f00b fa1d 	bl	801226c <iprintf>
		Error_Handler();
 8006e32:	f001 fa91 	bl	8008358 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 8006e36:	480d      	ldr	r0, [pc, #52]	; (8006e6c <SM_DisablePwmToAux+0x6c>)
 8006e38:	f00b fa8c 	bl	8012354 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 8006e3c:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <SM_DisablePwmToAux+0x70>)
 8006e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e40:	4a0b      	ldr	r2, [pc, #44]	; (8006e70 <SM_DisablePwmToAux+0x70>)
 8006e42:	f023 0302 	bic.w	r3, r3, #2
 8006e46:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8006e48:	480a      	ldr	r0, [pc, #40]	; (8006e74 <SM_DisablePwmToAux+0x74>)
 8006e4a:	f00b fa83 	bl	8012354 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8006e4e:	201d      	movs	r0, #29
 8006e50:	f004 fb5d 	bl	800b50e <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	08016764 	.word	0x08016764
 8006e60:	08016778 	.word	0x08016778
 8006e64:	200022e0 	.word	0x200022e0
 8006e68:	080167a0 	.word	0x080167a0
 8006e6c:	080167d4 	.word	0x080167d4
 8006e70:	40021000 	.word	0x40021000
 8006e74:	08016810 	.word	0x08016810

08006e78 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b0b2      	sub	sp, #200	; 0xc8
 8006e7c:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006e7e:	4860      	ldr	r0, [pc, #384]	; (8007000 <SM_EnableDacToAux+0x188>)
 8006e80:	f00b f9f4 	bl	801226c <iprintf>

	HAL_StatusTypeDef res = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006e8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006e8e:	2230      	movs	r2, #48	; 0x30
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f00a fd86 	bl	80119a4 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	605a      	str	r2, [r3, #4]
 8006ea2:	609a      	str	r2, [r3, #8]
 8006ea4:	60da      	str	r2, [r3, #12]
 8006ea6:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006ea8:	4b56      	ldr	r3, [pc, #344]	; (8007004 <SM_EnableDacToAux+0x18c>)
 8006eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006eac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f004 fb46 	bl	800b542 <HAL_DAC_Init>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d107      	bne.n	8006ed2 <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006ec2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	484f      	ldr	r0, [pc, #316]	; (8007008 <SM_EnableDacToAux+0x190>)
 8006eca:	f00b f9cf 	bl	801226c <iprintf>
		Error_Handler();
 8006ece:	f001 fa43 	bl	8008358 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006ed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006eec:	2306      	movs	r3, #6
 8006eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006efe:	2301      	movs	r3, #1
 8006f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006f0a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006f0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f12:	2200      	movs	r2, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f004 fcfd 	bl	800b914 <HAL_DAC_ConfigChannel>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d107      	bne.n	8006f36 <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006f26:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4837      	ldr	r0, [pc, #220]	; (800700c <SM_EnableDacToAux+0x194>)
 8006f2e:	f00b f99d 	bl	801226c <iprintf>
		Error_Handler();
 8006f32:	f001 fa11 	bl	8008358 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006f36:	4836      	ldr	r0, [pc, #216]	; (8007010 <SM_EnableDacToAux+0x198>)
 8006f38:	f00b fa0c 	bl	8012354 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006f3c:	4b35      	ldr	r3, [pc, #212]	; (8007014 <SM_EnableDacToAux+0x19c>)
 8006f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f40:	4a34      	ldr	r2, [pc, #208]	; (8007014 <SM_EnableDacToAux+0x19c>)
 8006f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f48:	4b32      	ldr	r3, [pc, #200]	; (8007014 <SM_EnableDacToAux+0x19c>)
 8006f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f50:	60bb      	str	r3, [r7, #8]
 8006f52:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006f54:	4830      	ldr	r0, [pc, #192]	; (8007018 <SM_EnableDacToAux+0x1a0>)
 8006f56:	f00b f9fd 	bl	8012354 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006f5a:	4b2e      	ldr	r3, [pc, #184]	; (8007014 <SM_EnableDacToAux+0x19c>)
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5e:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <SM_EnableDacToAux+0x19c>)
 8006f60:	f043 0301 	orr.w	r3, r3, #1
 8006f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f66:	4b2b      	ldr	r3, [pc, #172]	; (8007014 <SM_EnableDacToAux+0x19c>)
 8006f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	607b      	str	r3, [r7, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006f84:	4825      	ldr	r0, [pc, #148]	; (800701c <SM_EnableDacToAux+0x1a4>)
 8006f86:	f00b f9e5 	bl	8012354 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f8e:	4619      	mov	r1, r3
 8006f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f94:	f005 fa26 	bl	800c3e4 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006f98:	4b21      	ldr	r3, [pc, #132]	; (8007020 <SM_EnableDacToAux+0x1a8>)
 8006f9a:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006f9c:	2329      	movs	r3, #41	; 0x29
 8006f9e:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fb0:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006fb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006fb8:	2320      	movs	r3, #32
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006fc0:	f107 030c 	add.w	r3, r7, #12
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f004 fedb 	bl	800bd80 <HAL_DMA_Init>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d107      	bne.n	8006fe6 <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006fd6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4811      	ldr	r0, [pc, #68]	; (8007024 <SM_EnableDacToAux+0x1ac>)
 8006fde:	f00b f945 	bl	801226c <iprintf>
		Error_Handler();
 8006fe2:	f001 f9b9 	bl	8008358 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006fe6:	4810      	ldr	r0, [pc, #64]	; (8007028 <SM_EnableDacToAux+0x1b0>)
 8006fe8:	f00b f9b4 	bl	8012354 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006fec:	f107 030c 	add.w	r3, r7, #12
 8006ff0:	677b      	str	r3, [r7, #116]	; 0x74
 8006ff2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006ff8:	bf00      	nop
 8006ffa:	37c8      	adds	r7, #200	; 0xc8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	08016838 	.word	0x08016838
 8007004:	50000c00 	.word	0x50000c00
 8007008:	0801684c 	.word	0x0801684c
 800700c:	08016878 	.word	0x08016878
 8007010:	080168b0 	.word	0x080168b0
 8007014:	40021000 	.word	0x40021000
 8007018:	080168e0 	.word	0x080168e0
 800701c:	08016910 	.word	0x08016910
 8007020:	40020030 	.word	0x40020030
 8007024:	08016934 	.word	0x08016934
 8007028:	08016960 	.word	0x08016960

0800702c <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8007030:	4806      	ldr	r0, [pc, #24]	; (800704c <SM_DisableDacToAux+0x20>)
 8007032:	f00b f98f 	bl	8012354 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8007036:	4806      	ldr	r0, [pc, #24]	; (8007050 <SM_DisableDacToAux+0x24>)
 8007038:	f00b f98c 	bl	8012354 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 800703c:	2140      	movs	r1, #64	; 0x40
 800703e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007042:	f005 fb51 	bl	800c6e8 <HAL_GPIO_DeInit>

}
 8007046:	bf00      	nop
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	08016984 	.word	0x08016984
 8007050:	08016998 	.word	0x08016998

08007054 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
	if(direction)
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8007064:	4b08      	ldr	r3, [pc, #32]	; (8007088 <SM_GetEncoderValue+0x34>)
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	b29a      	uxth	r2, r3
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <SM_GetEncoderValue+0x34>)
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	b29b      	uxth	r3, r3
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	b29b      	uxth	r3, r3
 8007074:	e002      	b.n	800707c <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8007076:	4b04      	ldr	r3, [pc, #16]	; (8007088 <SM_GetEncoderValue+0x34>)
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	b29b      	uxth	r3, r3
	}
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	40012c00 	.word	0x40012c00

0800708c <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8007092:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <SM_GetOutputInHertz+0x7c>)
 8007094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <SM_GetOutputInHertz+0x16>
 800709a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	e007      	b.n	80070b2 <SM_GetOutputInHertz+0x26>
 80070a2:	4b19      	ldr	r3, [pc, #100]	; (8007108 <SM_GetOutputInHertz+0x7c>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ae:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <SM_GetOutputInHertz+0x7c>)
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <SM_GetOutputInHertz+0x36>
 80070ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80070be:	607b      	str	r3, [r7, #4]
 80070c0:	e007      	b.n	80070d2 <SM_GetOutputInHertz+0x46>
 80070c2:	4b11      	ldr	r3, [pc, #68]	; (8007108 <SM_GetOutputInHertz+0x7c>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 80070d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80070d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80070da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070de:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800710c <SM_GetOutputInHertz+0x80>
 80070e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070e6:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 80070ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80070ee:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007110 <SM_GetOutputInHertz+0x84>
 80070f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80070f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80070fa:	eeb0 0a67 	vmov.f32	s0, s15
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	40013400 	.word	0x40013400
 800710c:	4d2037a0 	.word	0x4d2037a0
 8007110:	42f00000 	.word	0x42f00000

08007114 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8007120:	887b      	ldrh	r3, [r7, #2]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <SM_ConvertPeriodToHertz+0x16>
 8007126:	2301      	movs	r3, #1
 8007128:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 800712a:	887b      	ldrh	r3, [r7, #2]
 800712c:	ee07 3a90 	vmov	s15, r3
 8007130:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800715c <SM_ConvertPeriodToHertz+0x48>
 8007146:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800714a:	eef0 7a66 	vmov.f32	s15, s13
}
 800714e:	eeb0 0a67 	vmov.f32	s0, s15
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	4d2037a0 	.word	0x4d2037a0

08007160 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8007164:	4b03      	ldr	r3, [pc, #12]	; (8007174 <SM_IsFuncPwmDutyMode+0x14>)
 8007166:	781b      	ldrb	r3, [r3, #0]
}
 8007168:	4618      	mov	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	2000225c 	.word	0x2000225c

08007178 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <SM_ToggleFuncPwmDutyMode+0x1c>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	f083 0301 	eor.w	r3, r3, #1
 8007184:	b2da      	uxtb	r2, r3
 8007186:	4b03      	ldr	r3, [pc, #12]	; (8007194 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8007188:	701a      	strb	r2, [r3, #0]
}
 800718a:	bf00      	nop
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	2000225c 	.word	0x2000225c

08007198 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 800719c:	4b03      	ldr	r3, [pc, #12]	; (80071ac <SM_ResetFuncPwmDutyMode+0x14>)
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]

}
 80071a2:	bf00      	nop
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	2000225c 	.word	0x2000225c

080071b0 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 80071b4:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <VPP_ResetLastEncoderValue+0x14>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	801a      	strh	r2, [r3, #0]
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	2000225e 	.word	0x2000225e

080071c8 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80071d2:	79fa      	ldrb	r2, [r7, #7]
 80071d4:	4613      	mov	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	1a9b      	subs	r3, r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4a10      	ldr	r2, [pc, #64]	; (8007220 <VPP_ApplyProfileToSignal+0x58>)
 80071de:	4413      	add	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80071e2:	2000      	movs	r0, #0
 80071e4:	f7ff fcba 	bl	8006b5c <SM_GetOutputChannel>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	7a1b      	ldrb	r3, [r3, #8]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff f93b 	bl	8006470 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	ed93 7a05 	vldr	s14, [r3, #20]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8b1b      	ldrh	r3, [r3, #24]
 800720a:	4618      	mov	r0, r3
 800720c:	eef0 0a47 	vmov.f32	s1, s14
 8007210:	eeb0 0a67 	vmov.f32	s0, s15
 8007214:	f000 f830 	bl	8007278 <_ProcessSignalDataTable>


}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	2000017c 	.word	0x2000017c

08007224 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800722e:	79fa      	ldrb	r2, [r7, #7]
 8007230:	4613      	mov	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4a0e      	ldr	r2, [pc, #56]	; (8007274 <VPP_ApplyProfileToAux+0x50>)
 800723a:	4413      	add	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 800723e:	2001      	movs	r0, #1
 8007240:	f7ff fc8c 	bl	8006b5c <SM_GetOutputChannel>
 8007244:	4602      	mov	r2, r0
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	ed93 7a05 	vldr	s14, [r3, #20]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8b1b      	ldrh	r3, [r3, #24]
 800725c:	4618      	mov	r0, r3
 800725e:	eef0 0a47 	vmov.f32	s1, s14
 8007262:	eeb0 0a67 	vmov.f32	s0, s15
 8007266:	f000 f88d 	bl	8007384 <_ProcessAuxDataTable>



}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	2000017c 	.word	0x2000017c

08007278 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	; 0x28
 800727c:	af00      	add	r7, sp, #0
 800727e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007282:	edc7 0a02 	vstr	s1, [r7, #8]
 8007286:	4603      	mov	r3, r0
 8007288:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 800728a:	2000      	movs	r0, #0
 800728c:	f7ff fc66 	bl	8006b5c <SM_GetOutputChannel>
 8007290:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b06      	cmp	r3, #6
 800729c:	d06b      	beq.n	8007376 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800729e:	2300      	movs	r3, #0
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
 80072a2:	e00c      	b.n	80072be <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	4933      	ldr	r1, [pc, #204]	; (8007380 <_ProcessSignalDataTable+0x108>)
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	3301      	adds	r3, #1
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	2b77      	cmp	r3, #119	; 0x77
 80072c2:	ddef      	ble.n	80072a4 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80072c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80072c8:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	089b      	lsrs	r3, r3, #2
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072de:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072e2:	2300      	movs	r3, #0
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	e02e      	b.n	8007346 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80072e8:	4a25      	ldr	r2, [pc, #148]	; (8007380 <_ProcessSignalDataTable+0x108>)
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80072fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007304:	ee17 1a90 	vmov	r1, s15
 8007308:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <_ProcessSignalDataTable+0x108>)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8007310:	4a1b      	ldr	r2, [pc, #108]	; (8007380 <_ProcessSignalDataTable+0x108>)
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007318:	ee07 3a90 	vmov	s15, r3
 800731c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007320:	edd7 7a08 	vldr	s15, [r7, #32]
 8007324:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8007328:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800732c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007334:	ee17 1a90 	vmov	r1, s15
 8007338:	4a11      	ldr	r2, [pc, #68]	; (8007380 <_ProcessSignalDataTable+0x108>)
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	3301      	adds	r3, #1
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	2b77      	cmp	r3, #119	; 0x77
 800734a:	ddcd      	ble.n	80072e8 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	e00e      	b.n	8007370 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8007352:	2000      	movs	r0, #0
 8007354:	f7ff fc02 	bl	8006b5c <SM_GetOutputChannel>
 8007358:	4601      	mov	r1, r0
 800735a:	4a09      	ldr	r2, [pc, #36]	; (8007380 <_ProcessSignalDataTable+0x108>)
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	3302      	adds	r3, #2
 8007366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	3301      	adds	r3, #1
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b77      	cmp	r3, #119	; 0x77
 8007374:	dded      	ble.n	8007352 <_ProcessSignalDataTable+0xda>
		}
	}

}
 8007376:	bf00      	nop
 8007378:	3728      	adds	r7, #40	; 0x28
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20002748 	.word	0x20002748

08007384 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af00      	add	r7, sp, #0
 800738a:	ed87 0a03 	vstr	s0, [r7, #12]
 800738e:	edc7 0a02 	vstr	s1, [r7, #8]
 8007392:	4603      	mov	r3, r0
 8007394:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8007396:	2001      	movs	r0, #1
 8007398:	f7ff fbe0 	bl	8006b5c <SM_GetOutputChannel>
 800739c:	4603      	mov	r3, r0
 800739e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b06      	cmp	r3, #6
 80073a6:	d059      	beq.n	800745c <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80073a8:	2300      	movs	r3, #0
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	e00f      	b.n	80073ce <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 80073ae:	2001      	movs	r0, #1
 80073b0:	f7ff fbd4 	bl	8006b5c <SM_GetOutputChannel>
 80073b4:	4603      	mov	r3, r0
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4933      	ldr	r1, [pc, #204]	; (8007490 <_ProcessAuxDataTable+0x10c>)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	3301      	adds	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	2b77      	cmp	r3, #119	; 0x77
 80073d2:	ddec      	ble.n	80073ae <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80073d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80073d8:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 80073e0:	88fb      	ldrh	r3, [r7, #6]
 80073e2:	089b      	lsrs	r3, r3, #2
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073ee:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]
 80073f6:	e02e      	b.n	8007456 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80073f8:	4a25      	ldr	r2, [pc, #148]	; (8007490 <_ProcessAuxDataTable+0x10c>)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007400:	ee07 3a90 	vmov	s15, r3
 8007404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007408:	edd7 7a03 	vldr	s15, [r7, #12]
 800740c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007414:	ee17 1a90 	vmov	r1, s15
 8007418:	4a1d      	ldr	r2, [pc, #116]	; (8007490 <_ProcessAuxDataTable+0x10c>)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8007420:	4a1b      	ldr	r2, [pc, #108]	; (8007490 <_ProcessAuxDataTable+0x10c>)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007428:	ee07 3a90 	vmov	s15, r3
 800742c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007430:	edd7 7a06 	vldr	s15, [r7, #24]
 8007434:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8007438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800743c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007444:	ee17 1a90 	vmov	r1, s15
 8007448:	4a11      	ldr	r2, [pc, #68]	; (8007490 <_ProcessAuxDataTable+0x10c>)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	3301      	adds	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b77      	cmp	r3, #119	; 0x77
 800745a:	ddcd      	ble.n	80073f8 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800745c:	2300      	movs	r3, #0
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	e00e      	b.n	8007480 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8007462:	2001      	movs	r0, #1
 8007464:	f7ff fb7a 	bl	8006b5c <SM_GetOutputChannel>
 8007468:	4601      	mov	r1, r0
 800746a:	4a09      	ldr	r2, [pc, #36]	; (8007490 <_ProcessAuxDataTable+0x10c>)
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3302      	adds	r3, #2
 8007476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	3301      	adds	r3, #1
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b77      	cmp	r3, #119	; 0x77
 8007484:	dded      	ble.n	8007462 <_ProcessAuxDataTable+0xde>
	}
}
 8007486:	bf00      	nop
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20002748 	.word	0x20002748

08007494 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800749e:	2000      	movs	r0, #0
 80074a0:	f7ff fb5c 	bl	8006b5c <SM_GetOutputChannel>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80074ae:	4b15      	ldr	r3, [pc, #84]	; (8007504 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	88fa      	ldrh	r2, [r7, #6]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d90c      	bls.n	80074d2 <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	3301      	adds	r3, #1
 80074bc:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	2b61      	cmp	r3, #97	; 0x61
 80074c2:	d901      	bls.n	80074c8 <VPP_MapEncoderPositionToSignalOutput+0x34>
 80074c4:	2361      	movs	r3, #97	; 0x61
 80074c6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fe7c 	bl	80071c8 <VPP_ApplyProfileToSignal>
 80074d0:	e010      	b.n	80074f4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d20b      	bcs.n	80074f4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	3b01      	subs	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b61      	cmp	r3, #97	; 0x61
 80074e6:	d901      	bls.n	80074ec <VPP_MapEncoderPositionToSignalOutput+0x58>
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff fe6a 	bl	80071c8 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 80074f4:	4a03      	ldr	r2, [pc, #12]	; (8007504 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	8013      	strh	r3, [r2, #0]

}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	2000225e 	.word	0x2000225e

08007508 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8007512:	2001      	movs	r0, #1
 8007514:	f7ff fb22 	bl	8006b5c <SM_GetOutputChannel>
 8007518:	4603      	mov	r3, r0
 800751a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	429a      	cmp	r2, r3
 800752a:	d90c      	bls.n	8007546 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	3301      	adds	r3, #1
 8007530:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	2b61      	cmp	r3, #97	; 0x61
 8007536:	d901      	bls.n	800753c <VPP_MapEncoderPositionToAuxOutput+0x34>
 8007538:	2361      	movs	r3, #97	; 0x61
 800753a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff fe70 	bl	8007224 <VPP_ApplyProfileToAux>
 8007544:	e010      	b.n	8007568 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8007546:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	429a      	cmp	r2, r3
 800754e:	d20b      	bcs.n	8007568 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	3b01      	subs	r3, #1
 8007554:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b61      	cmp	r3, #97	; 0x61
 800755a:	d901      	bls.n	8007560 <VPP_MapEncoderPositionToAuxOutput+0x58>
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff fe5e 	bl	8007224 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8007568:	4a03      	ldr	r2, [pc, #12]	; (8007578 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	8013      	strh	r3, [r2, #0]

}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	2000225e 	.word	0x2000225e

0800757c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08c      	sub	sp, #48	; 0x30
 8007580:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8007582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	605a      	str	r2, [r3, #4]
 800758c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	2220      	movs	r2, #32
 8007592:	2100      	movs	r1, #0
 8007594:	4618      	mov	r0, r3
 8007596:	f00a fa05 	bl	80119a4 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800759a:	4b32      	ldr	r3, [pc, #200]	; (8007664 <MX_ADC1_Init+0xe8>)
 800759c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80075a2:	4b30      	ldr	r3, [pc, #192]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80075a8:	4b2e      	ldr	r3, [pc, #184]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80075ae:	4b2d      	ldr	r3, [pc, #180]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80075b4:	4b2b      	ldr	r3, [pc, #172]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80075ba:	4b2a      	ldr	r3, [pc, #168]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075bc:	2200      	movs	r2, #0
 80075be:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80075c0:	4b28      	ldr	r3, [pc, #160]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075c2:	2204      	movs	r2, #4
 80075c4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80075c6:	4b27      	ldr	r3, [pc, #156]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80075cc:	4b25      	ldr	r3, [pc, #148]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075ce:	2201      	movs	r2, #1
 80075d0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80075d2:	4b24      	ldr	r3, [pc, #144]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80075d8:	4b22      	ldr	r3, [pc, #136]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80075e0:	4b20      	ldr	r3, [pc, #128]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80075e6:	4b1f      	ldr	r3, [pc, #124]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80075ec:	4b1d      	ldr	r3, [pc, #116]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80075f4:	4b1b      	ldr	r3, [pc, #108]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80075fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80075fc:	4b19      	ldr	r3, [pc, #100]	; (8007664 <MX_ADC1_Init+0xe8>)
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007604:	4817      	ldr	r0, [pc, #92]	; (8007664 <MX_ADC1_Init+0xe8>)
 8007606:	f002 f8bf 	bl	8009788 <HAL_ADC_Init>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007610:	f000 fea2 	bl	8008358 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007614:	2300      	movs	r3, #0
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800761c:	4619      	mov	r1, r3
 800761e:	4811      	ldr	r0, [pc, #68]	; (8007664 <MX_ADC1_Init+0xe8>)
 8007620:	f003 f986 	bl	800a930 <HAL_ADCEx_MultiModeConfigChannel>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800762a:	f000 fe95 	bl	8008358 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800762e:	4b0e      	ldr	r3, [pc, #56]	; (8007668 <MX_ADC1_Init+0xec>)
 8007630:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007632:	2306      	movs	r3, #6
 8007634:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800763a:	237f      	movs	r3, #127	; 0x7f
 800763c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800763e:	2304      	movs	r3, #4
 8007640:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007646:	1d3b      	adds	r3, r7, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4806      	ldr	r0, [pc, #24]	; (8007664 <MX_ADC1_Init+0xe8>)
 800764c:	f002 fba0 	bl	8009d90 <HAL_ADC_ConfigChannel>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8007656:	f000 fe7f 	bl	8008358 <Error_Handler>
  }

}
 800765a:	bf00      	nop
 800765c:	3730      	adds	r7, #48	; 0x30
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20002928 	.word	0x20002928
 8007668:	0c900008 	.word	0x0c900008

0800766c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007674:	f107 0314 	add.w	r3, r7, #20
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	609a      	str	r2, [r3, #8]
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800768c:	d14f      	bne.n	800772e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800768e:	4b2a      	ldr	r3, [pc, #168]	; (8007738 <HAL_ADC_MspInit+0xcc>)
 8007690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007692:	4a29      	ldr	r2, [pc, #164]	; (8007738 <HAL_ADC_MspInit+0xcc>)
 8007694:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800769a:	4b27      	ldr	r3, [pc, #156]	; (8007738 <HAL_ADC_MspInit+0xcc>)
 800769c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076a6:	4b24      	ldr	r3, [pc, #144]	; (8007738 <HAL_ADC_MspInit+0xcc>)
 80076a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076aa:	4a23      	ldr	r2, [pc, #140]	; (8007738 <HAL_ADC_MspInit+0xcc>)
 80076ac:	f043 0301 	orr.w	r3, r3, #1
 80076b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076b2:	4b21      	ldr	r3, [pc, #132]	; (8007738 <HAL_ADC_MspInit+0xcc>)
 80076b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80076be:	2304      	movs	r3, #4
 80076c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80076c2:	2303      	movs	r3, #3
 80076c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076ca:	f107 0314 	add.w	r3, r7, #20
 80076ce:	4619      	mov	r1, r3
 80076d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076d4:	f004 fe86 	bl	800c3e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80076d8:	4b18      	ldr	r3, [pc, #96]	; (800773c <HAL_ADC_MspInit+0xd0>)
 80076da:	4a19      	ldr	r2, [pc, #100]	; (8007740 <HAL_ADC_MspInit+0xd4>)
 80076dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80076de:	4b17      	ldr	r3, [pc, #92]	; (800773c <HAL_ADC_MspInit+0xd0>)
 80076e0:	2205      	movs	r2, #5
 80076e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80076e4:	4b15      	ldr	r3, [pc, #84]	; (800773c <HAL_ADC_MspInit+0xd0>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80076ea:	4b14      	ldr	r3, [pc, #80]	; (800773c <HAL_ADC_MspInit+0xd0>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80076f0:	4b12      	ldr	r3, [pc, #72]	; (800773c <HAL_ADC_MspInit+0xd0>)
 80076f2:	2280      	movs	r2, #128	; 0x80
 80076f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <HAL_ADC_MspInit+0xd0>)
 80076f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <HAL_ADC_MspInit+0xd0>)
 8007700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007704:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007706:	4b0d      	ldr	r3, [pc, #52]	; (800773c <HAL_ADC_MspInit+0xd0>)
 8007708:	2220      	movs	r2, #32
 800770a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800770c:	4b0b      	ldr	r3, [pc, #44]	; (800773c <HAL_ADC_MspInit+0xd0>)
 800770e:	2200      	movs	r2, #0
 8007710:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007712:	480a      	ldr	r0, [pc, #40]	; (800773c <HAL_ADC_MspInit+0xd0>)
 8007714:	f004 fb34 	bl	800bd80 <HAL_DMA_Init>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800771e:	f000 fe1b 	bl	8008358 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a05      	ldr	r2, [pc, #20]	; (800773c <HAL_ADC_MspInit+0xd0>)
 8007726:	655a      	str	r2, [r3, #84]	; 0x54
 8007728:	4a04      	ldr	r2, [pc, #16]	; (800773c <HAL_ADC_MspInit+0xd0>)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800772e:	bf00      	nop
 8007730:	3728      	adds	r7, #40	; 0x28
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40021000 	.word	0x40021000
 800773c:	20002994 	.word	0x20002994
 8007740:	40020008 	.word	0x40020008

08007744 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <MX_COMP1_Init+0x44>)
 800774a:	4a10      	ldr	r2, [pc, #64]	; (800778c <MX_COMP1_Init+0x48>)
 800774c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800774e:	4b0e      	ldr	r3, [pc, #56]	; (8007788 <MX_COMP1_Init+0x44>)
 8007750:	2200      	movs	r2, #0
 8007752:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8007754:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <MX_COMP1_Init+0x44>)
 8007756:	4a0e      	ldr	r2, [pc, #56]	; (8007790 <MX_COMP1_Init+0x4c>)
 8007758:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800775a:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <MX_COMP1_Init+0x44>)
 800775c:	2200      	movs	r2, #0
 800775e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <MX_COMP1_Init+0x44>)
 8007762:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007766:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8007768:	4b07      	ldr	r3, [pc, #28]	; (8007788 <MX_COMP1_Init+0x44>)
 800776a:	2200      	movs	r2, #0
 800776c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800776e:	4b06      	ldr	r3, [pc, #24]	; (8007788 <MX_COMP1_Init+0x44>)
 8007770:	2231      	movs	r2, #49	; 0x31
 8007772:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8007774:	4804      	ldr	r0, [pc, #16]	; (8007788 <MX_COMP1_Init+0x44>)
 8007776:	f003 fb5b 	bl	800ae30 <HAL_COMP_Init>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8007780:	f000 fdea 	bl	8008358 <Error_Handler>
  }

}
 8007784:	bf00      	nop
 8007786:	bd80      	pop	{r7, pc}
 8007788:	200029f4 	.word	0x200029f4
 800778c:	40010200 	.word	0x40010200
 8007790:	00800030 	.word	0x00800030

08007794 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800779c:	f107 030c 	add.w	r3, r7, #12
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	609a      	str	r2, [r3, #8]
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a13      	ldr	r2, [pc, #76]	; (8007800 <HAL_COMP_MspInit+0x6c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d120      	bne.n	80077f8 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077b6:	4b13      	ldr	r3, [pc, #76]	; (8007804 <HAL_COMP_MspInit+0x70>)
 80077b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ba:	4a12      	ldr	r2, [pc, #72]	; (8007804 <HAL_COMP_MspInit+0x70>)
 80077bc:	f043 0301 	orr.w	r3, r3, #1
 80077c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077c2:	4b10      	ldr	r3, [pc, #64]	; (8007804 <HAL_COMP_MspInit+0x70>)
 80077c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	60bb      	str	r3, [r7, #8]
 80077cc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80077ce:	2302      	movs	r3, #2
 80077d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077d2:	2303      	movs	r3, #3
 80077d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077da:	f107 030c 	add.w	r3, r7, #12
 80077de:	4619      	mov	r1, r3
 80077e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077e4:	f004 fdfe 	bl	800c3e4 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80077e8:	2200      	movs	r2, #0
 80077ea:	2100      	movs	r1, #0
 80077ec:	2040      	movs	r0, #64	; 0x40
 80077ee:	f003 fe66 	bl	800b4be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80077f2:	2040      	movs	r0, #64	; 0x40
 80077f4:	f003 fe7d 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80077f8:	bf00      	nop
 80077fa:	3720      	adds	r7, #32
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40010200 	.word	0x40010200
 8007804:	40021000 	.word	0x40021000

08007808 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08c      	sub	sp, #48	; 0x30
 800780c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800780e:	463b      	mov	r3, r7
 8007810:	2230      	movs	r2, #48	; 0x30
 8007812:	2100      	movs	r1, #0
 8007814:	4618      	mov	r0, r3
 8007816:	f00a f8c5 	bl	80119a4 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800781a:	4b1e      	ldr	r3, [pc, #120]	; (8007894 <MX_DAC1_Init+0x8c>)
 800781c:	4a1e      	ldr	r2, [pc, #120]	; (8007898 <MX_DAC1_Init+0x90>)
 800781e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007820:	481c      	ldr	r0, [pc, #112]	; (8007894 <MX_DAC1_Init+0x8c>)
 8007822:	f003 fe8e 	bl	800b542 <HAL_DAC_Init>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800782c:	f000 fd94 	bl	8008358 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007834:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007836:	2300      	movs	r3, #0
 8007838:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800783a:	2300      	movs	r3, #0
 800783c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800783e:	2300      	movs	r3, #0
 8007840:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8007842:	2306      	movs	r3, #6
 8007844:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007846:	2300      	movs	r3, #0
 8007848:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800784e:	2301      	movs	r3, #1
 8007850:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007856:	463b      	mov	r3, r7
 8007858:	2200      	movs	r2, #0
 800785a:	4619      	mov	r1, r3
 800785c:	480d      	ldr	r0, [pc, #52]	; (8007894 <MX_DAC1_Init+0x8c>)
 800785e:	f004 f859 	bl	800b914 <HAL_DAC_ConfigChannel>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8007868:	f000 fd76 	bl	8008358 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007870:	2301      	movs	r3, #1
 8007872:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007874:	463b      	mov	r3, r7
 8007876:	2210      	movs	r2, #16
 8007878:	4619      	mov	r1, r3
 800787a:	4806      	ldr	r0, [pc, #24]	; (8007894 <MX_DAC1_Init+0x8c>)
 800787c:	f004 f84a 	bl	800b914 <HAL_DAC_ConfigChannel>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8007886:	f000 fd67 	bl	8008358 <Error_Handler>
  }

}
 800788a:	bf00      	nop
 800788c:	3730      	adds	r7, #48	; 0x30
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20002a2c 	.word	0x20002a2c
 8007898:	50000800 	.word	0x50000800

0800789c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08c      	sub	sp, #48	; 0x30
 80078a0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80078a2:	463b      	mov	r3, r7
 80078a4:	2230      	movs	r2, #48	; 0x30
 80078a6:	2100      	movs	r1, #0
 80078a8:	4618      	mov	r0, r3
 80078aa:	f00a f87b 	bl	80119a4 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80078ae:	4b16      	ldr	r3, [pc, #88]	; (8007908 <MX_DAC2_Init+0x6c>)
 80078b0:	4a16      	ldr	r2, [pc, #88]	; (800790c <MX_DAC2_Init+0x70>)
 80078b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80078b4:	4814      	ldr	r0, [pc, #80]	; (8007908 <MX_DAC2_Init+0x6c>)
 80078b6:	f003 fe44 	bl	800b542 <HAL_DAC_Init>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80078c0:	f000 fd4a 	bl	8008358 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80078c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078c8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80078ce:	2300      	movs	r3, #0
 80078d0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80078d6:	2306      	movs	r3, #6
 80078d8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80078da:	2300      	movs	r3, #0
 80078dc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80078e2:	2301      	movs	r3, #1
 80078e4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80078ea:	463b      	mov	r3, r7
 80078ec:	2200      	movs	r2, #0
 80078ee:	4619      	mov	r1, r3
 80078f0:	4805      	ldr	r0, [pc, #20]	; (8007908 <MX_DAC2_Init+0x6c>)
 80078f2:	f004 f80f 	bl	800b914 <HAL_DAC_ConfigChannel>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80078fc:	f000 fd2c 	bl	8008358 <Error_Handler>
  }

}
 8007900:	bf00      	nop
 8007902:	3730      	adds	r7, #48	; 0x30
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20002a18 	.word	0x20002a18
 800790c:	50000c00 	.word	0x50000c00

08007910 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08c      	sub	sp, #48	; 0x30
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007918:	f107 031c 	add.w	r3, r7, #28
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	605a      	str	r2, [r3, #4]
 8007922:	609a      	str	r2, [r3, #8]
 8007924:	60da      	str	r2, [r3, #12]
 8007926:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a56      	ldr	r2, [pc, #344]	; (8007a88 <HAL_DAC_MspInit+0x178>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d150      	bne.n	80079d4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007932:	4b56      	ldr	r3, [pc, #344]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 8007934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007936:	4a55      	ldr	r2, [pc, #340]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 8007938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800793c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800793e:	4b53      	ldr	r3, [pc, #332]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 8007940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007946:	61bb      	str	r3, [r7, #24]
 8007948:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800794a:	4b50      	ldr	r3, [pc, #320]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 800794c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794e:	4a4f      	ldr	r2, [pc, #316]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 8007950:	f043 0301 	orr.w	r3, r3, #1
 8007954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007956:	4b4d      	ldr	r3, [pc, #308]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 8007958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007962:	2330      	movs	r3, #48	; 0x30
 8007964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007966:	2303      	movs	r3, #3
 8007968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800796a:	2300      	movs	r3, #0
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800796e:	f107 031c 	add.w	r3, r7, #28
 8007972:	4619      	mov	r1, r3
 8007974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007978:	f004 fd34 	bl	800c3e4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800797c:	4b44      	ldr	r3, [pc, #272]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 800797e:	4a45      	ldr	r2, [pc, #276]	; (8007a94 <HAL_DAC_MspInit+0x184>)
 8007980:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8007982:	4b43      	ldr	r3, [pc, #268]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 8007984:	2206      	movs	r2, #6
 8007986:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007988:	4b41      	ldr	r3, [pc, #260]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 800798a:	2210      	movs	r2, #16
 800798c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800798e:	4b40      	ldr	r3, [pc, #256]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 8007990:	2200      	movs	r2, #0
 8007992:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007994:	4b3e      	ldr	r3, [pc, #248]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 8007996:	2280      	movs	r2, #128	; 0x80
 8007998:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800799a:	4b3d      	ldr	r3, [pc, #244]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 800799c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079a0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80079a2:	4b3b      	ldr	r3, [pc, #236]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 80079a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079a8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80079aa:	4b39      	ldr	r3, [pc, #228]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 80079ac:	2220      	movs	r2, #32
 80079ae:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80079b0:	4b37      	ldr	r3, [pc, #220]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80079b6:	4836      	ldr	r0, [pc, #216]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 80079b8:	f004 f9e2 	bl	800bd80 <HAL_DMA_Init>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80079c2:	f000 fcc9 	bl	8008358 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a31      	ldr	r2, [pc, #196]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 80079ca:	609a      	str	r2, [r3, #8]
 80079cc:	4a30      	ldr	r2, [pc, #192]	; (8007a90 <HAL_DAC_MspInit+0x180>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80079d2:	e054      	b.n	8007a7e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a2f      	ldr	r2, [pc, #188]	; (8007a98 <HAL_DAC_MspInit+0x188>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d14f      	bne.n	8007a7e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80079de:	4b2b      	ldr	r3, [pc, #172]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 80079e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e2:	4a2a      	ldr	r2, [pc, #168]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 80079e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079ea:	4b28      	ldr	r3, [pc, #160]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 80079ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079f6:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 80079f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fa:	4a24      	ldr	r2, [pc, #144]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 80079fc:	f043 0301 	orr.w	r3, r3, #1
 8007a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a02:	4b22      	ldr	r3, [pc, #136]	; (8007a8c <HAL_DAC_MspInit+0x17c>)
 8007a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007a0e:	2340      	movs	r3, #64	; 0x40
 8007a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007a12:	2303      	movs	r3, #3
 8007a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a1a:	f107 031c 	add.w	r3, r7, #28
 8007a1e:	4619      	mov	r1, r3
 8007a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a24:	f004 fcde 	bl	800c3e4 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8007a28:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <HAL_DAC_MspInit+0x190>)
 8007a2c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8007a2e:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a30:	2229      	movs	r2, #41	; 0x29
 8007a32:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a34:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a36:	2210      	movs	r2, #16
 8007a38:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007a40:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a42:	2280      	movs	r2, #128	; 0x80
 8007a44:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007a46:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a4c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a54:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8007a56:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a58:	2220      	movs	r2, #32
 8007a5a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007a5c:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8007a62:	480e      	ldr	r0, [pc, #56]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a64:	f004 f98c 	bl	800bd80 <HAL_DMA_Init>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8007a6e:	f000 fc73 	bl	8008358 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a09      	ldr	r2, [pc, #36]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a76:	609a      	str	r2, [r3, #8]
 8007a78:	4a08      	ldr	r2, [pc, #32]	; (8007a9c <HAL_DAC_MspInit+0x18c>)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007a7e:	bf00      	nop
 8007a80:	3730      	adds	r7, #48	; 0x30
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	50000800 	.word	0x50000800
 8007a8c:	40021000 	.word	0x40021000
 8007a90:	20002274 	.word	0x20002274
 8007a94:	4002001c 	.word	0x4002001c
 8007a98:	50000c00 	.word	0x50000c00
 8007a9c:	20002a40 	.word	0x20002a40
 8007aa0:	40020030 	.word	0x40020030

08007aa4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007aaa:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <MX_DMA_Init+0x80>)
 8007aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aae:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <MX_DMA_Init+0x80>)
 8007ab0:	f043 0304 	orr.w	r3, r3, #4
 8007ab4:	6493      	str	r3, [r2, #72]	; 0x48
 8007ab6:	4b1b      	ldr	r3, [pc, #108]	; (8007b24 <MX_DMA_Init+0x80>)
 8007ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	607b      	str	r3, [r7, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007ac2:	4b18      	ldr	r3, [pc, #96]	; (8007b24 <MX_DMA_Init+0x80>)
 8007ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac6:	4a17      	ldr	r2, [pc, #92]	; (8007b24 <MX_DMA_Init+0x80>)
 8007ac8:	f043 0301 	orr.w	r3, r3, #1
 8007acc:	6493      	str	r3, [r2, #72]	; 0x48
 8007ace:	4b15      	ldr	r3, [pc, #84]	; (8007b24 <MX_DMA_Init+0x80>)
 8007ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007ada:	2200      	movs	r2, #0
 8007adc:	2101      	movs	r1, #1
 8007ade:	200b      	movs	r0, #11
 8007ae0:	f003 fced 	bl	800b4be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007ae4:	200b      	movs	r0, #11
 8007ae6:	f003 fd04 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007aea:	2200      	movs	r2, #0
 8007aec:	2100      	movs	r1, #0
 8007aee:	200c      	movs	r0, #12
 8007af0:	f003 fce5 	bl	800b4be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007af4:	200c      	movs	r0, #12
 8007af6:	f003 fcfc 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007afa:	2200      	movs	r2, #0
 8007afc:	2100      	movs	r1, #0
 8007afe:	200d      	movs	r0, #13
 8007b00:	f003 fcdd 	bl	800b4be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007b04:	200d      	movs	r0, #13
 8007b06:	f003 fcf4 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	200e      	movs	r0, #14
 8007b10:	f003 fcd5 	bl	800b4be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007b14:	200e      	movs	r0, #14
 8007b16:	f003 fcec 	bl	800b4f2 <HAL_NVIC_EnableIRQ>

}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	40021000 	.word	0x40021000

08007b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b2c:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <__NVIC_GetPriorityGrouping+0x18>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	0a1b      	lsrs	r3, r3, #8
 8007b32:	f003 0307 	and.w	r3, r3, #7
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	e000ed00 	.word	0xe000ed00

08007b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	db0b      	blt.n	8007b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	f003 021f 	and.w	r2, r3, #31
 8007b5c:	4907      	ldr	r1, [pc, #28]	; (8007b7c <__NVIC_EnableIRQ+0x38>)
 8007b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	2001      	movs	r0, #1
 8007b66:	fa00 f202 	lsl.w	r2, r0, r2
 8007b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	e000e100 	.word	0xe000e100

08007b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	db0a      	blt.n	8007baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	490c      	ldr	r1, [pc, #48]	; (8007bcc <__NVIC_SetPriority+0x4c>)
 8007b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9e:	0112      	lsls	r2, r2, #4
 8007ba0:	b2d2      	uxtb	r2, r2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ba8:	e00a      	b.n	8007bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	4908      	ldr	r1, [pc, #32]	; (8007bd0 <__NVIC_SetPriority+0x50>)
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	3b04      	subs	r3, #4
 8007bb8:	0112      	lsls	r2, r2, #4
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	761a      	strb	r2, [r3, #24]
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	e000e100 	.word	0xe000e100
 8007bd0:	e000ed00 	.word	0xe000ed00

08007bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b089      	sub	sp, #36	; 0x24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f1c3 0307 	rsb	r3, r3, #7
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	bf28      	it	cs
 8007bf2:	2304      	movcs	r3, #4
 8007bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	2b06      	cmp	r3, #6
 8007bfc:	d902      	bls.n	8007c04 <NVIC_EncodePriority+0x30>
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	3b03      	subs	r3, #3
 8007c02:	e000      	b.n	8007c06 <NVIC_EncodePriority+0x32>
 8007c04:	2300      	movs	r3, #0
 8007c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	43da      	mvns	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	401a      	ands	r2, r3
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	fa01 f303 	lsl.w	r3, r1, r3
 8007c26:	43d9      	mvns	r1, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c2c:	4313      	orrs	r3, r2
         );
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3724      	adds	r7, #36	; 0x24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
	...

08007c3c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8007c46:	4a14      	ldr	r2, [pc, #80]	; (8007c98 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	3302      	adds	r3, #2
 8007c50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	0c1b      	lsrs	r3, r3, #16
 8007c58:	43db      	mvns	r3, r3
 8007c5a:	ea02 0103 	and.w	r1, r2, r3
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	0c1b      	lsrs	r3, r3, #16
 8007c62:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	fa93 f3a3 	rbit	r3, r3
 8007c6a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	fab3 f383 	clz	r3, r3
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 031f 	and.w	r3, r3, #31
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	4806      	ldr	r0, [pc, #24]	; (8007c98 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	f003 0303 	and.w	r3, r3, #3
 8007c84:	430a      	orrs	r2, r1
 8007c86:	3302      	adds	r3, #2
 8007c88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007c8c:	bf00      	nop
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	40010000 	.word	0x40010000

08007c9c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b089      	sub	sp, #36	; 0x24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	fa93 f3a3 	rbit	r3, r3
 8007cb6:	613b      	str	r3, [r7, #16]
  return result;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	fab3 f383 	clz	r3, r3
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	2103      	movs	r1, #3
 8007cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc8:	43db      	mvns	r3, r3
 8007cca:	401a      	ands	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	fa93 f3a3 	rbit	r3, r3
 8007cd6:	61bb      	str	r3, [r7, #24]
  return result;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	fab3 f383 	clz	r3, r3
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	6879      	ldr	r1, [r7, #4]
 8007ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	601a      	str	r2, [r3, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	3724      	adds	r7, #36	; 0x24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b089      	sub	sp, #36	; 0x24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	fa93 f3a3 	rbit	r3, r3
 8007d14:	613b      	str	r3, [r7, #16]
  return result;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	fab3 f383 	clz	r3, r3
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	2103      	movs	r1, #3
 8007d22:	fa01 f303 	lsl.w	r3, r1, r3
 8007d26:	43db      	mvns	r3, r3
 8007d28:	401a      	ands	r2, r3
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	fa93 f3a3 	rbit	r3, r3
 8007d34:	61bb      	str	r3, [r7, #24]
  return result;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	fab3 f383 	clz	r3, r3
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	fa01 f303 	lsl.w	r3, r1, r3
 8007d46:	431a      	orrs	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	60da      	str	r2, [r3, #12]
}
 8007d4c:	bf00      	nop
 8007d4e:	3724      	adds	r7, #36	; 0x24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007d7c:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d80:	4907      	ldr	r1, [pc, #28]	; (8007da0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007d92:	68fb      	ldr	r3, [r7, #12]
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	40021000 	.word	0x40021000

08007da4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007daa:	f107 031c 	add.w	r3, r7, #28
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	605a      	str	r2, [r3, #4]
 8007db4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007db6:	1d3b      	adds	r3, r7, #4
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]
 8007dbc:	605a      	str	r2, [r3, #4]
 8007dbe:	609a      	str	r2, [r3, #8]
 8007dc0:	60da      	str	r2, [r3, #12]
 8007dc2:	611a      	str	r2, [r3, #16]
 8007dc4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007dc6:	2004      	movs	r0, #4
 8007dc8:	f7ff ffd4 	bl	8007d74 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007dcc:	2020      	movs	r0, #32
 8007dce:	f7ff ffd1 	bl	8007d74 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	f7ff ffce 	bl	8007d74 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007dd8:	2002      	movs	r0, #2
 8007dda:	f7ff ffcb 	bl	8007d74 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007dde:	2108      	movs	r1, #8
 8007de0:	48d3      	ldr	r0, [pc, #844]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007de2:	f7ff ffb9 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 8007de6:	2108      	movs	r1, #8
 8007de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dec:	f7ff ffb4 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 8007df0:	2110      	movs	r1, #16
 8007df2:	48cf      	ldr	r0, [pc, #828]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007df4:	f7ff ffb0 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007df8:	2120      	movs	r1, #32
 8007dfa:	48cd      	ldr	r0, [pc, #820]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007dfc:	f7ff ffac 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 8007e00:	2101      	movs	r1, #1
 8007e02:	48cc      	ldr	r0, [pc, #816]	; (8008134 <MX_GPIO_Init+0x390>)
 8007e04:	f7ff ffa8 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007e0c:	48c8      	ldr	r0, [pc, #800]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007e0e:	f7ff ffa3 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007e12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e16:	48c6      	ldr	r0, [pc, #792]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007e18:	f7ff ff9e 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007e1c:	2140      	movs	r1, #64	; 0x40
 8007e1e:	48c5      	ldr	r0, [pc, #788]	; (8008134 <MX_GPIO_Init+0x390>)
 8007e20:	f7ff ff9a 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007e24:	2180      	movs	r1, #128	; 0x80
 8007e26:	48c3      	ldr	r0, [pc, #780]	; (8008134 <MX_GPIO_Init+0x390>)
 8007e28:	f7ff ff96 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e30:	48c0      	ldr	r0, [pc, #768]	; (8008134 <MX_GPIO_Init+0x390>)
 8007e32:	f7ff ff91 	bl	8007d58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007e36:	49c0      	ldr	r1, [pc, #768]	; (8008138 <MX_GPIO_Init+0x394>)
 8007e38:	2002      	movs	r0, #2
 8007e3a:	f7ff feff 	bl	8007c3c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007e3e:	49bf      	ldr	r1, [pc, #764]	; (800813c <MX_GPIO_Init+0x398>)
 8007e40:	2002      	movs	r0, #2
 8007e42:	f7ff fefb 	bl	8007c3c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8007e46:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007e4a:	2005      	movs	r0, #5
 8007e4c:	f7ff fef6 	bl	8007c3c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007e50:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007e54:	2005      	movs	r0, #5
 8007e56:	f7ff fef1 	bl	8007c3c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007e5a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007e5e:	2002      	movs	r0, #2
 8007e60:	f7ff feec 	bl	8007c3c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007e64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e68:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e70:	2300      	movs	r3, #0
 8007e72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e76:	2302      	movs	r3, #2
 8007e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e7c:	f107 031c 	add.w	r3, r7, #28
 8007e80:	4618      	mov	r0, r3
 8007e82:	f008 faad 	bl	80103e0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e8a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e92:	2300      	movs	r3, #0
 8007e94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e98:	2302      	movs	r3, #2
 8007e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e9e:	f107 031c 	add.w	r3, r7, #28
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f008 fa9c 	bl	80103e0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007ebe:	f107 031c 	add.w	r3, r7, #28
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f008 fa8c 	bl	80103e0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007ec8:	2302      	movs	r3, #2
 8007eca:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007ed8:	2302      	movs	r3, #2
 8007eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007ede:	f107 031c 	add.w	r3, r7, #28
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f008 fa7c 	bl	80103e0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007ee8:	2304      	movs	r3, #4
 8007eea:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007ef8:	2302      	movs	r3, #2
 8007efa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007efe:	f107 031c 	add.w	r3, r7, #28
 8007f02:	4618      	mov	r0, r3
 8007f04:	f008 fa6c 	bl	80103e0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f0e:	4888      	ldr	r0, [pc, #544]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007f10:	f7ff fef3 	bl	8007cfa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007f14:	2201      	movs	r2, #1
 8007f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f1a:	4885      	ldr	r0, [pc, #532]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007f1c:	f7ff feed 	bl	8007cfa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007f20:	2201      	movs	r2, #1
 8007f22:	2101      	movs	r1, #1
 8007f24:	4886      	ldr	r0, [pc, #536]	; (8008140 <MX_GPIO_Init+0x39c>)
 8007f26:	f7ff fee8 	bl	8007cfa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	2102      	movs	r1, #2
 8007f2e:	4884      	ldr	r0, [pc, #528]	; (8008140 <MX_GPIO_Init+0x39c>)
 8007f30:	f7ff fee3 	bl	8007cfa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007f34:	2201      	movs	r2, #1
 8007f36:	2104      	movs	r1, #4
 8007f38:	487d      	ldr	r0, [pc, #500]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007f3a:	f7ff fede 	bl	8007cfa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f44:	487a      	ldr	r0, [pc, #488]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007f46:	f7ff fea9 	bl	8007c9c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f50:	4877      	ldr	r0, [pc, #476]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007f52:	f7ff fea3 	bl	8007c9c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007f56:	2200      	movs	r2, #0
 8007f58:	2101      	movs	r1, #1
 8007f5a:	4879      	ldr	r0, [pc, #484]	; (8008140 <MX_GPIO_Init+0x39c>)
 8007f5c:	f7ff fe9e 	bl	8007c9c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007f60:	2200      	movs	r2, #0
 8007f62:	2102      	movs	r1, #2
 8007f64:	4876      	ldr	r0, [pc, #472]	; (8008140 <MX_GPIO_Init+0x39c>)
 8007f66:	f7ff fe99 	bl	8007c9c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2104      	movs	r1, #4
 8007f6e:	4870      	ldr	r0, [pc, #448]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007f70:	f7ff fe94 	bl	8007c9c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007f74:	2308      	movs	r3, #8
 8007f76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007f84:	2302      	movs	r3, #2
 8007f86:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007f88:	1d3b      	adds	r3, r7, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4868      	ldr	r0, [pc, #416]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007f8e:	f008 fc1a 	bl	80107c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007f92:	2308      	movs	r3, #8
 8007f94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f96:	2301      	movs	r3, #1
 8007f98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007fa6:	1d3b      	adds	r3, r7, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007fae:	f008 fc0a 	bl	80107c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007fb2:	2310      	movs	r3, #16
 8007fb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007fc6:	1d3b      	adds	r3, r7, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4859      	ldr	r0, [pc, #356]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007fcc:	f008 fbfb 	bl	80107c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007fd0:	2320      	movs	r3, #32
 8007fd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007fe4:	1d3b      	adds	r3, r7, #4
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4851      	ldr	r0, [pc, #324]	; (8008130 <MX_GPIO_Init+0x38c>)
 8007fea:	f008 fbec 	bl	80107c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ffe:	2300      	movs	r3, #0
 8008000:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8008002:	1d3b      	adds	r3, r7, #4
 8008004:	4619      	mov	r1, r3
 8008006:	484b      	ldr	r0, [pc, #300]	; (8008134 <MX_GPIO_Init+0x390>)
 8008008:	f008 fbdd 	bl	80107c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 800800c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008010:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008012:	2301      	movs	r3, #1
 8008014:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800801e:	2300      	movs	r3, #0
 8008020:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8008022:	1d3b      	adds	r3, r7, #4
 8008024:	4619      	mov	r1, r3
 8008026:	4842      	ldr	r0, [pc, #264]	; (8008130 <MX_GPIO_Init+0x38c>)
 8008028:	f008 fbcd 	bl	80107c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 800802c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008030:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008032:	2301      	movs	r3, #1
 8008034:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800803a:	2300      	movs	r3, #0
 800803c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8008042:	1d3b      	adds	r3, r7, #4
 8008044:	4619      	mov	r1, r3
 8008046:	483a      	ldr	r0, [pc, #232]	; (8008130 <MX_GPIO_Init+0x38c>)
 8008048:	f008 fbbd 	bl	80107c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008050:	2301      	movs	r3, #1
 8008052:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008054:	2303      	movs	r3, #3
 8008056:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8008060:	1d3b      	adds	r3, r7, #4
 8008062:	4619      	mov	r1, r3
 8008064:	4833      	ldr	r0, [pc, #204]	; (8008134 <MX_GPIO_Init+0x390>)
 8008066:	f008 fbae 	bl	80107c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800806a:	2380      	movs	r3, #128	; 0x80
 800806c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800806e:	2301      	movs	r3, #1
 8008070:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008072:	2303      	movs	r3, #3
 8008074:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008076:	2300      	movs	r3, #0
 8008078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800807a:	2300      	movs	r3, #0
 800807c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800807e:	1d3b      	adds	r3, r7, #4
 8008080:	4619      	mov	r1, r3
 8008082:	482c      	ldr	r0, [pc, #176]	; (8008134 <MX_GPIO_Init+0x390>)
 8008084:	f008 fb9f 	bl	80107c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8008088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800808c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800808e:	2301      	movs	r3, #1
 8008090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008092:	2303      	movs	r3, #3
 8008094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008096:	2300      	movs	r3, #0
 8008098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800809e:	1d3b      	adds	r3, r7, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4824      	ldr	r0, [pc, #144]	; (8008134 <MX_GPIO_Init+0x390>)
 80080a4:	f008 fb8f 	bl	80107c6 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80080a8:	f7ff fd3e 	bl	8007b28 <__NVIC_GetPriorityGrouping>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2200      	movs	r2, #0
 80080b0:	2100      	movs	r1, #0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fd8e 	bl	8007bd4 <NVIC_EncodePriority>
 80080b8:	4603      	mov	r3, r0
 80080ba:	4619      	mov	r1, r3
 80080bc:	2006      	movs	r0, #6
 80080be:	f7ff fd5f 	bl	8007b80 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80080c2:	2006      	movs	r0, #6
 80080c4:	f7ff fd3e 	bl	8007b44 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80080c8:	f7ff fd2e 	bl	8007b28 <__NVIC_GetPriorityGrouping>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fd7e 	bl	8007bd4 <NVIC_EncodePriority>
 80080d8:	4603      	mov	r3, r0
 80080da:	4619      	mov	r1, r3
 80080dc:	2007      	movs	r0, #7
 80080de:	f7ff fd4f 	bl	8007b80 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80080e2:	2007      	movs	r0, #7
 80080e4:	f7ff fd2e 	bl	8007b44 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80080e8:	f7ff fd1e 	bl	8007b28 <__NVIC_GetPriorityGrouping>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2200      	movs	r2, #0
 80080f0:	2100      	movs	r1, #0
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff fd6e 	bl	8007bd4 <NVIC_EncodePriority>
 80080f8:	4603      	mov	r3, r0
 80080fa:	4619      	mov	r1, r3
 80080fc:	2008      	movs	r0, #8
 80080fe:	f7ff fd3f 	bl	8007b80 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8008102:	2008      	movs	r0, #8
 8008104:	f7ff fd1e 	bl	8007b44 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008108:	f7ff fd0e 	bl	8007b28 <__NVIC_GetPriorityGrouping>
 800810c:	4603      	mov	r3, r0
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff fd5e 	bl	8007bd4 <NVIC_EncodePriority>
 8008118:	4603      	mov	r3, r0
 800811a:	4619      	mov	r1, r3
 800811c:	2028      	movs	r0, #40	; 0x28
 800811e:	f7ff fd2f 	bl	8007b80 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008122:	2028      	movs	r0, #40	; 0x28
 8008124:	f7ff fd0e 	bl	8007b44 <__NVIC_EnableIRQ>

}
 8008128:	bf00      	nop
 800812a:	3728      	adds	r7, #40	; 0x28
 800812c:	46bd      	mov	sp, r7
 800812e:	e009      	b.n	8008144 <MX_GPIO_Init+0x3a0>
 8008130:	48000800 	.word	0x48000800
 8008134:	48000400 	.word	0x48000400
 8008138:	0f000003 	.word	0x0f000003
 800813c:	f0000003 	.word	0xf0000003
 8008140:	48001400 	.word	0x48001400
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop

08008148 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008150:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008154:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d013      	beq.n	8008188 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8008160:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008164:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8008168:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00b      	beq.n	8008188 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8008170:	e000      	b.n	8008174 <ITM_SendChar+0x2c>
    {
      __NOP();
 8008172:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8008174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0f9      	beq.n	8008172 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800817e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	b2d2      	uxtb	r2, r2
 8008186:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8008188:	687b      	ldr	r3, [r7, #4]
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b086      	sub	sp, #24
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	607a      	str	r2, [r7, #4]
  int i=0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80081a6:	2300      	movs	r3, #0
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	e009      	b.n	80081c0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	60ba      	str	r2, [r7, #8]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff ffc7 	bl	8008148 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	3301      	adds	r3, #1
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	dbf1      	blt.n	80081ac <_write+0x16>
  return len;
 80081c8:	687b      	ldr	r3, [r7, #4]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80081d8:	f000 ffe9 	bl	80091ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80081dc:	f000 f84e 	bl	800827c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80081e0:	f7ff fde0 	bl	8007da4 <MX_GPIO_Init>
  MX_DMA_Init();
 80081e4:	f7ff fc5e 	bl	8007aa4 <MX_DMA_Init>
  MX_DAC1_Init();
 80081e8:	f7ff fb0e 	bl	8007808 <MX_DAC1_Init>
  MX_ADC1_Init();
 80081ec:	f7ff f9c6 	bl	800757c <MX_ADC1_Init>
  MX_COMP1_Init();
 80081f0:	f7ff faa8 	bl	8007744 <MX_COMP1_Init>
  MX_SPI3_Init();
 80081f4:	f000 f8ee 	bl	80083d4 <MX_SPI3_Init>
  MX_RNG_Init();
 80081f8:	f000 f8de 	bl	80083b8 <MX_RNG_Init>
  MX_TIM1_Init();
 80081fc:	f000 fb5c 	bl	80088b8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8008200:	f000 fd2a 	bl	8008c58 <MX_TIM8_Init>
  MX_TIM16_Init();
 8008204:	f000 fde2 	bl	8008dcc <MX_TIM16_Init>
  MX_TIM15_Init();
 8008208:	f000 fd8e 	bl	8008d28 <MX_TIM15_Init>
  MX_TIM5_Init();
 800820c:	f000 fcd6 	bl	8008bbc <MX_TIM5_Init>
  MX_TIM3_Init();
 8008210:	f000 fc38 	bl	8008a84 <MX_TIM3_Init>
  MX_DAC2_Init();
 8008214:	f7ff fb42 	bl	800789c <MX_DAC2_Init>
  MX_TIM17_Init();
 8008218:	f000 fe00 	bl	8008e1c <MX_TIM17_Init>
  MX_TIM2_Init();
 800821c:	f000 fbbc 	bl	8008998 <MX_TIM2_Init>
  MX_TIM4_Init();
 8008220:	f000 fc7e 	bl	8008b20 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8008224:	f7fe fb86 	bl	8006934 <SM_Init>

  HAL_TIM_Base_Start_IT(&htim17);
 8008228:	4810      	ldr	r0, [pc, #64]	; (800826c <main+0x98>)
 800822a:	f005 fc8f 	bl	800db4c <HAL_TIM_Base_Start_IT>

  // http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800822e:	2200      	movs	r2, #0
 8008230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008234:	480e      	ldr	r0, [pc, #56]	; (8008270 <main+0x9c>)
 8008236:	f004 fb39 	bl	800c8ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 800823a:	2200      	movs	r2, #0
 800823c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008240:	480b      	ldr	r0, [pc, #44]	; (8008270 <main+0x9c>)
 8008242:	f004 fb33 	bl	800c8ac <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8008246:	480b      	ldr	r0, [pc, #44]	; (8008274 <main+0xa0>)
 8008248:	f005 fc2a 	bl	800daa0 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 800824c:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <main+0xa4>)
 800824e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008252:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8008254:	4b08      	ldr	r3, [pc, #32]	; (8008278 <main+0xa4>)
 8008256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800825a:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 800825c:	f7f8 fd88 	bl	8000d70 <DM_Init>
  DM_PostInit();
 8008260:	f7f8 fd94 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8008264:	f7fd f99c 	bl	80055a0 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008268:	e7fe      	b.n	8008268 <main+0x94>
 800826a:	bf00      	nop
 800826c:	20002c48 	.word	0x20002c48
 8008270:	48000800 	.word	0x48000800
 8008274:	20002ce0 	.word	0x20002ce0
 8008278:	40001000 	.word	0x40001000

0800827c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b0a8      	sub	sp, #160	; 0xa0
 8008280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008282:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008286:	2238      	movs	r2, #56	; 0x38
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f009 fb8a 	bl	80119a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008290:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	605a      	str	r2, [r3, #4]
 800829a:	609a      	str	r2, [r3, #8]
 800829c:	60da      	str	r2, [r3, #12]
 800829e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082a0:	463b      	mov	r3, r7
 80082a2:	2254      	movs	r2, #84	; 0x54
 80082a4:	2100      	movs	r1, #0
 80082a6:	4618      	mov	r0, r3
 80082a8:	f009 fb7c 	bl	80119a4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80082ac:	2000      	movs	r0, #0
 80082ae:	f004 fb15 	bl	800c8dc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80082b2:	2322      	movs	r3, #34	; 0x22
 80082b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80082b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082ba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80082c6:	2302      	movs	r3, #2
 80082c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80082cc:	2302      	movs	r3, #2
 80082ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80082d2:	2302      	movs	r3, #2
 80082d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80082d8:	232a      	movs	r3, #42	; 0x2a
 80082da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80082de:	2302      	movs	r3, #2
 80082e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80082e4:	2304      	movs	r3, #4
 80082e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80082ea:	2302      	movs	r3, #2
 80082ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80082f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80082f4:	4618      	mov	r0, r3
 80082f6:	f004 fb95 	bl	800ca24 <HAL_RCC_OscConfig>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8008300:	f000 f82a 	bl	8008358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008304:	230f      	movs	r3, #15
 8008306:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008308:	2303      	movs	r3, #3
 800830a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800830c:	2300      	movs	r3, #0
 800830e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008310:	2300      	movs	r3, #0
 8008312:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008314:	2300      	movs	r3, #0
 8008316:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8008318:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800831c:	2108      	movs	r1, #8
 800831e:	4618      	mov	r0, r3
 8008320:	f004 fe98 	bl	800d054 <HAL_RCC_ClockConfig>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800832a:	f000 f815 	bl	8008358 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800832e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008332:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8008334:	2300      	movs	r3, #0
 8008336:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8008338:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800833c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800833e:	463b      	mov	r3, r7
 8008340:	4618      	mov	r0, r3
 8008342:	f005 f877 	bl	800d434 <HAL_RCCEx_PeriphCLKConfig>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800834c:	f000 f804 	bl	8008358 <Error_Handler>
  }
}
 8008350:	bf00      	nop
 8008352:	37a0      	adds	r7, #160	; 0xa0
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800835c:	bf00      	nop
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f043 0204 	orr.w	r2, r3, #4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	601a      	str	r2, [r3, #0]
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <LL_AHB2_GRP1_EnableClock>:
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008390:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008394:	4907      	ldr	r1, [pc, #28]	; (80083b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4313      	orrs	r3, r2
 800839a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800839e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4013      	ands	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80083a6:	68fb      	ldr	r3, [r7, #12]
}
 80083a8:	bf00      	nop
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	40021000 	.word	0x40021000

080083b8 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80083bc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80083c0:	f7ff ffe2 	bl	8008388 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80083c4:	4802      	ldr	r0, [pc, #8]	; (80083d0 <MX_RNG_Init+0x18>)
 80083c6:	f7ff ffce 	bl	8008366 <LL_RNG_Enable>

}
 80083ca:	bf00      	nop
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	50060800 	.word	0x50060800

080083d4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80083d8:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <MX_SPI3_Init+0x74>)
 80083da:	4a1c      	ldr	r2, [pc, #112]	; (800844c <MX_SPI3_Init+0x78>)
 80083dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80083de:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <MX_SPI3_Init+0x74>)
 80083e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80083e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80083e6:	4b18      	ldr	r3, [pc, #96]	; (8008448 <MX_SPI3_Init+0x74>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80083ec:	4b16      	ldr	r3, [pc, #88]	; (8008448 <MX_SPI3_Init+0x74>)
 80083ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80083f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80083f4:	4b14      	ldr	r3, [pc, #80]	; (8008448 <MX_SPI3_Init+0x74>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80083fa:	4b13      	ldr	r3, [pc, #76]	; (8008448 <MX_SPI3_Init+0x74>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008400:	4b11      	ldr	r3, [pc, #68]	; (8008448 <MX_SPI3_Init+0x74>)
 8008402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008406:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008408:	4b0f      	ldr	r3, [pc, #60]	; (8008448 <MX_SPI3_Init+0x74>)
 800840a:	2210      	movs	r2, #16
 800840c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800840e:	4b0e      	ldr	r3, [pc, #56]	; (8008448 <MX_SPI3_Init+0x74>)
 8008410:	2200      	movs	r2, #0
 8008412:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008414:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <MX_SPI3_Init+0x74>)
 8008416:	2200      	movs	r2, #0
 8008418:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <MX_SPI3_Init+0x74>)
 800841c:	2200      	movs	r2, #0
 800841e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008420:	4b09      	ldr	r3, [pc, #36]	; (8008448 <MX_SPI3_Init+0x74>)
 8008422:	2207      	movs	r2, #7
 8008424:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008426:	4b08      	ldr	r3, [pc, #32]	; (8008448 <MX_SPI3_Init+0x74>)
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800842c:	4b06      	ldr	r3, [pc, #24]	; (8008448 <MX_SPI3_Init+0x74>)
 800842e:	2208      	movs	r2, #8
 8008430:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008432:	4805      	ldr	r0, [pc, #20]	; (8008448 <MX_SPI3_Init+0x74>)
 8008434:	f005 fa4a 	bl	800d8cc <HAL_SPI_Init>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800843e:	f7ff ff8b 	bl	8008358 <Error_Handler>
  }

}
 8008442:	bf00      	nop
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20002aa0 	.word	0x20002aa0
 800844c:	40003c00 	.word	0x40003c00

08008450 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	; 0x28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008458:	f107 0314 	add.w	r3, r7, #20
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	605a      	str	r2, [r3, #4]
 8008462:	609a      	str	r2, [r3, #8]
 8008464:	60da      	str	r2, [r3, #12]
 8008466:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a17      	ldr	r2, [pc, #92]	; (80084cc <HAL_SPI_MspInit+0x7c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d128      	bne.n	80084c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008472:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <HAL_SPI_MspInit+0x80>)
 8008474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008476:	4a16      	ldr	r2, [pc, #88]	; (80084d0 <HAL_SPI_MspInit+0x80>)
 8008478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847c:	6593      	str	r3, [r2, #88]	; 0x58
 800847e:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <HAL_SPI_MspInit+0x80>)
 8008480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008486:	613b      	str	r3, [r7, #16]
 8008488:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800848a:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <HAL_SPI_MspInit+0x80>)
 800848c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848e:	4a10      	ldr	r2, [pc, #64]	; (80084d0 <HAL_SPI_MspInit+0x80>)
 8008490:	f043 0304 	orr.w	r3, r3, #4
 8008494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008496:	4b0e      	ldr	r3, [pc, #56]	; (80084d0 <HAL_SPI_MspInit+0x80>)
 8008498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80084a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084a8:	2302      	movs	r3, #2
 80084aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084b0:	2300      	movs	r3, #0
 80084b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80084b4:	2306      	movs	r3, #6
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084b8:	f107 0314 	add.w	r3, r7, #20
 80084bc:	4619      	mov	r1, r3
 80084be:	4805      	ldr	r0, [pc, #20]	; (80084d4 <HAL_SPI_MspInit+0x84>)
 80084c0:	f003 ff90 	bl	800c3e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80084c4:	bf00      	nop
 80084c6:	3728      	adds	r7, #40	; 0x28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40003c00 	.word	0x40003c00
 80084d0:	40021000 	.word	0x40021000
 80084d4:	48000800 	.word	0x48000800

080084d8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80084dc:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	4a04      	ldr	r2, [pc, #16]	; (80084f4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80084e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084e6:	6093      	str	r3, [r2, #8]
}
 80084e8:	bf00      	nop
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	40007000 	.word	0x40007000

080084f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084fe:	4b0f      	ldr	r3, [pc, #60]	; (800853c <HAL_MspInit+0x44>)
 8008500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008502:	4a0e      	ldr	r2, [pc, #56]	; (800853c <HAL_MspInit+0x44>)
 8008504:	f043 0301 	orr.w	r3, r3, #1
 8008508:	6613      	str	r3, [r2, #96]	; 0x60
 800850a:	4b0c      	ldr	r3, [pc, #48]	; (800853c <HAL_MspInit+0x44>)
 800850c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	607b      	str	r3, [r7, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008516:	4b09      	ldr	r3, [pc, #36]	; (800853c <HAL_MspInit+0x44>)
 8008518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851a:	4a08      	ldr	r2, [pc, #32]	; (800853c <HAL_MspInit+0x44>)
 800851c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008520:	6593      	str	r3, [r2, #88]	; 0x58
 8008522:	4b06      	ldr	r3, [pc, #24]	; (800853c <HAL_MspInit+0x44>)
 8008524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800852e:	f7ff ffd3 	bl	80084d8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40021000 	.word	0x40021000

08008540 <LL_EXTI_IsActiveFlag_0_31>:
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8008548:	4b07      	ldr	r3, [pc, #28]	; (8008568 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800854a:	695a      	ldr	r2, [r3, #20]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4013      	ands	r3, r2
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d101      	bne.n	800855a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	40010400 	.word	0x40010400

0800856c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8008574:	4a04      	ldr	r2, [pc, #16]	; (8008588 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6153      	str	r3, [r2, #20]
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40010400 	.word	0x40010400

0800858c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008590:	bf00      	nop
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 80085a0:	4801      	ldr	r0, [pc, #4]	; (80085a8 <HardFault_Handler+0xc>)
 80085a2:	f7f9 f9a3 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085a6:	e7fe      	b.n	80085a6 <HardFault_Handler+0xa>
 80085a8:	080169bc 	.word	0x080169bc

080085ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 80085b0:	4801      	ldr	r0, [pc, #4]	; (80085b8 <MemManage_Handler+0xc>)
 80085b2:	f7f9 f99b 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80085b6:	e7fe      	b.n	80085b6 <MemManage_Handler+0xa>
 80085b8:	080169c8 	.word	0x080169c8

080085bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 80085c0:	4801      	ldr	r0, [pc, #4]	; (80085c8 <BusFault_Handler+0xc>)
 80085c2:	f7f9 f993 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085c6:	e7fe      	b.n	80085c6 <BusFault_Handler+0xa>
 80085c8:	080169d8 	.word	0x080169d8

080085cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <UsageFault_Handler+0xc>)
 80085d2:	f7f9 f98b 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085d6:	e7fe      	b.n	80085d6 <UsageFault_Handler+0xa>
 80085d8:	080169e4 	.word	0x080169e4

080085dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085e0:	bf00      	nop
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085ea:	b480      	push	{r7}
 80085ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085ee:	bf00      	nop
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80085fc:	bf00      	nop
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800860a:	f000 fe23 	bl	8009254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800860e:	bf00      	nop
 8008610:	bd80      	pop	{r7, pc}

08008612 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8008616:	f7fd f87b 	bl	8005710 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800861a:	2001      	movs	r0, #1
 800861c:	f7ff ff90 	bl	8008540 <LL_EXTI_IsActiveFlag_0_31>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8008626:	2001      	movs	r0, #1
 8008628:	f7ff ffa0 	bl	800856c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800862c:	bf00      	nop
 800862e:	bd80      	pop	{r7, pc}

08008630 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8008634:	f7fd f892 	bl	800575c <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8008638:	2002      	movs	r0, #2
 800863a:	f7ff ff81 	bl	8008540 <LL_EXTI_IsActiveFlag_0_31>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8008644:	2002      	movs	r0, #2
 8008646:	f7ff ff91 	bl	800856c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800864a:	bf00      	nop
 800864c:	bd80      	pop	{r7, pc}

0800864e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8008652:	f7fd f8a9 	bl	80057a8 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8008656:	2004      	movs	r0, #4
 8008658:	f7ff ff72 	bl	8008540 <LL_EXTI_IsActiveFlag_0_31>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8008662:	2004      	movs	r0, #4
 8008664:	f7ff ff82 	bl	800856c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008668:	bf00      	nop
 800866a:	bd80      	pop	{r7, pc}

0800866c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008670:	4802      	ldr	r0, [pc, #8]	; (800867c <DMA1_Channel1_IRQHandler+0x10>)
 8008672:	f003 fd68 	bl	800c146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008676:	bf00      	nop
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20002994 	.word	0x20002994

08008680 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008684:	4802      	ldr	r0, [pc, #8]	; (8008690 <DMA1_Channel2_IRQHandler+0x10>)
 8008686:	f003 fd5e 	bl	800c146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800868a:	bf00      	nop
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20002274 	.word	0x20002274

08008694 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8008698:	4802      	ldr	r0, [pc, #8]	; (80086a4 <DMA1_Channel3_IRQHandler+0x10>)
 800869a:	f003 fd54 	bl	800c146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800869e:	bf00      	nop
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20002a40 	.word	0x20002a40

080086a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80086ac:	4802      	ldr	r0, [pc, #8]	; (80086b8 <DMA1_Channel4_IRQHandler+0x10>)
 80086ae:	f003 fd4a 	bl	800c146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80086b2:	bf00      	nop
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20002b04 	.word	0x20002b04

080086bc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 80086c0:	f7f8 fb7e 	bl	8000dc0 <DM_UpdateDisplay>


	IM_ENC_DIRF_Handler();
 80086c4:	f7fd f896 	bl	80057f4 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80086c8:	4803      	ldr	r0, [pc, #12]	; (80086d8 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80086ca:	f005 ffdd 	bl	800e688 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80086ce:	4803      	ldr	r0, [pc, #12]	; (80086dc <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80086d0:	f005 ffda 	bl	800e688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80086d4:	bf00      	nop
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20002ce0 	.word	0x20002ce0
 80086dc:	20002bfc 	.word	0x20002bfc

080086e0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 80086e4:	f7fb ff4a 	bl	800457c <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80086e8:	4803      	ldr	r0, [pc, #12]	; (80086f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80086ea:	f005 ffcd 	bl	800e688 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80086ee:	4803      	ldr	r0, [pc, #12]	; (80086fc <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80086f0:	f005 ffca 	bl	800e688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80086f4:	bf00      	nop
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	20002ce0 	.word	0x20002ce0
 80086fc:	20002c48 	.word	0x20002c48

08008700 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008704:	4802      	ldr	r0, [pc, #8]	; (8008710 <TIM3_IRQHandler+0x10>)
 8008706:	f005 ffbf 	bl	800e688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200022e0 	.word	0x200022e0

08008714 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	//IM_RECIP_COUNT_Handler();
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008718:	4802      	ldr	r0, [pc, #8]	; (8008724 <TIM4_IRQHandler+0x10>)
 800871a:	f005 ffb5 	bl	800e688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800871e:	bf00      	nop
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20002bb0 	.word	0x20002bb0

08008728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 800872c:	f7fc ffa0 	bl	8005670 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8008730:	f7fc ffc6 	bl	80056c0 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8008734:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008738:	f7ff ff02 	bl	8008540 <LL_EXTI_IsActiveFlag_0_31>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8008742:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008746:	f7ff ff11 	bl	800856c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800874a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800874e:	f7ff fef7 	bl	8008540 <LL_EXTI_IsActiveFlag_0_31>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8008758:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800875c:	f7ff ff06 	bl	800856c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008760:	bf00      	nop
 8008762:	bd80      	pop	{r7, pc}

08008764 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8008768:	f7fc ff2a 	bl	80055c0 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800876c:	4802      	ldr	r0, [pc, #8]	; (8008778 <TIM5_IRQHandler+0x14>)
 800876e:	f005 ff8b 	bl	800e688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8008772:	bf00      	nop
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20002c94 	.word	0x20002c94

0800877c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8008780:	4802      	ldr	r0, [pc, #8]	; (800878c <COMP1_2_3_IRQHandler+0x10>)
 8008782:	f002 fd1b 	bl	800b1bc <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8008786:	bf00      	nop
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	200029f4 	.word	0x200029f4

08008790 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	e00a      	b.n	80087b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80087a2:	f3af 8000 	nop.w
 80087a6:	4601      	mov	r1, r0
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	60ba      	str	r2, [r7, #8]
 80087ae:	b2ca      	uxtb	r2, r1
 80087b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	3301      	adds	r3, #1
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	429a      	cmp	r2, r3
 80087be:	dbf0      	blt.n	80087a2 <_read+0x12>
	}

return len;
 80087c0:	687b      	ldr	r3, [r7, #4]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
	return -1;
 80087d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80087f2:	605a      	str	r2, [r3, #4]
	return 0;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <_isatty>:

int _isatty(int file)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
	return 1;
 800880a:	2301      	movs	r3, #1
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
	return 0;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
	...

08008834 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800883c:	4b11      	ldr	r3, [pc, #68]	; (8008884 <_sbrk+0x50>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d102      	bne.n	800884a <_sbrk+0x16>
		heap_end = &end;
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <_sbrk+0x50>)
 8008846:	4a10      	ldr	r2, [pc, #64]	; (8008888 <_sbrk+0x54>)
 8008848:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800884a:	4b0e      	ldr	r3, [pc, #56]	; (8008884 <_sbrk+0x50>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008850:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <_sbrk+0x50>)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4413      	add	r3, r2
 8008858:	466a      	mov	r2, sp
 800885a:	4293      	cmp	r3, r2
 800885c:	d907      	bls.n	800886e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800885e:	f009 f877 	bl	8011950 <__errno>
 8008862:	4602      	mov	r2, r0
 8008864:	230c      	movs	r3, #12
 8008866:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800886c:	e006      	b.n	800887c <_sbrk+0x48>
	}

	heap_end += incr;
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <_sbrk+0x50>)
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	4a03      	ldr	r2, [pc, #12]	; (8008884 <_sbrk+0x50>)
 8008878:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800887a:	68fb      	ldr	r3, [r7, #12]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20002260 	.word	0x20002260
 8008888:	20002dd0 	.word	0x20002dd0

0800888c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008890:	4b08      	ldr	r3, [pc, #32]	; (80088b4 <SystemInit+0x28>)
 8008892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008896:	4a07      	ldr	r2, [pc, #28]	; (80088b4 <SystemInit+0x28>)
 8008898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800889c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80088a0:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <SystemInit+0x28>)
 80088a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088a6:	609a      	str	r2, [r3, #8]
#endif
}
 80088a8:	bf00      	nop
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	e000ed00 	.word	0xe000ed00

080088b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b09a      	sub	sp, #104	; 0x68
 80088bc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80088be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80088c2:	2224      	movs	r2, #36	; 0x24
 80088c4:	2100      	movs	r1, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f009 f86c 	bl	80119a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	605a      	str	r2, [r3, #4]
 80088d6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80088d8:	1d3b      	adds	r3, r7, #4
 80088da:	2234      	movs	r2, #52	; 0x34
 80088dc:	2100      	movs	r1, #0
 80088de:	4618      	mov	r0, r3
 80088e0:	f009 f860 	bl	80119a4 <memset>

  htim1.Instance = TIM1;
 80088e4:	4b2a      	ldr	r3, [pc, #168]	; (8008990 <MX_TIM1_Init+0xd8>)
 80088e6:	4a2b      	ldr	r2, [pc, #172]	; (8008994 <MX_TIM1_Init+0xdc>)
 80088e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80088ea:	4b29      	ldr	r3, [pc, #164]	; (8008990 <MX_TIM1_Init+0xd8>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80088f0:	4b27      	ldr	r3, [pc, #156]	; (8008990 <MX_TIM1_Init+0xd8>)
 80088f2:	2260      	movs	r2, #96	; 0x60
 80088f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80088f6:	4b26      	ldr	r3, [pc, #152]	; (8008990 <MX_TIM1_Init+0xd8>)
 80088f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088fe:	4b24      	ldr	r3, [pc, #144]	; (8008990 <MX_TIM1_Init+0xd8>)
 8008900:	2200      	movs	r2, #0
 8008902:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008904:	4b22      	ldr	r3, [pc, #136]	; (8008990 <MX_TIM1_Init+0xd8>)
 8008906:	2200      	movs	r2, #0
 8008908:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800890a:	4b21      	ldr	r3, [pc, #132]	; (8008990 <MX_TIM1_Init+0xd8>)
 800890c:	2280      	movs	r2, #128	; 0x80
 800890e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8008910:	2302      	movs	r3, #2
 8008912:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008914:	2300      	movs	r3, #0
 8008916:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008918:	2301      	movs	r3, #1
 800891a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800891c:	2300      	movs	r3, #0
 800891e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008924:	2300      	movs	r3, #0
 8008926:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008928:	2301      	movs	r3, #1
 800892a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800892c:	2300      	movs	r3, #0
 800892e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8008934:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008938:	4619      	mov	r1, r3
 800893a:	4815      	ldr	r0, [pc, #84]	; (8008990 <MX_TIM1_Init+0xd8>)
 800893c:	f005 fdfe 	bl	800e53c <HAL_TIM_Encoder_Init>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008946:	f7ff fd07 	bl	8008358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800894a:	2320      	movs	r3, #32
 800894c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008952:	2300      	movs	r3, #0
 8008954:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008956:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800895a:	4619      	mov	r1, r3
 800895c:	480c      	ldr	r0, [pc, #48]	; (8008990 <MX_TIM1_Init+0xd8>)
 800895e:	f007 fa81 	bl	800fe64 <HAL_TIMEx_MasterConfigSynchronization>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8008968:	f7ff fcf6 	bl	8008358 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800896c:	2300      	movs	r3, #0
 800896e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008970:	2300      	movs	r3, #0
 8008972:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008974:	1d3b      	adds	r3, r7, #4
 8008976:	4619      	mov	r1, r3
 8008978:	4805      	ldr	r0, [pc, #20]	; (8008990 <MX_TIM1_Init+0xd8>)
 800897a:	f007 fb09 	bl	800ff90 <HAL_TIMEx_ConfigBreakDeadTime>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8008984:	f7ff fce8 	bl	8008358 <Error_Handler>
  }

}
 8008988:	bf00      	nop
 800898a:	3768      	adds	r7, #104	; 0x68
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20002ce0 	.word	0x20002ce0
 8008994:	40012c00 	.word	0x40012c00

08008998 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08c      	sub	sp, #48	; 0x30
 800899c:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800899e:	f107 031c 	add.w	r3, r7, #28
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	605a      	str	r2, [r3, #4]
 80089a8:	609a      	str	r2, [r3, #8]
 80089aa:	60da      	str	r2, [r3, #12]
 80089ac:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089ae:	f107 0310 	add.w	r3, r7, #16
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	605a      	str	r2, [r3, #4]
 80089b8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80089ba:	463b      	mov	r3, r7
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	605a      	str	r2, [r3, #4]
 80089c2:	609a      	str	r2, [r3, #8]
 80089c4:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 80089c6:	4b2e      	ldr	r3, [pc, #184]	; (8008a80 <MX_TIM2_Init+0xe8>)
 80089c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80089cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 80089ce:	4b2c      	ldr	r3, [pc, #176]	; (8008a80 <MX_TIM2_Init+0xe8>)
 80089d0:	2280      	movs	r2, #128	; 0x80
 80089d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089d4:	4b2a      	ldr	r3, [pc, #168]	; (8008a80 <MX_TIM2_Init+0xe8>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80089da:	4b29      	ldr	r3, [pc, #164]	; (8008a80 <MX_TIM2_Init+0xe8>)
 80089dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089e2:	4b27      	ldr	r3, [pc, #156]	; (8008a80 <MX_TIM2_Init+0xe8>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80089e8:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <MX_TIM2_Init+0xe8>)
 80089ea:	2280      	movs	r2, #128	; 0x80
 80089ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80089ee:	4824      	ldr	r0, [pc, #144]	; (8008a80 <MX_TIM2_Init+0xe8>)
 80089f0:	f004 fffe 	bl	800d9f0 <HAL_TIM_Base_Init>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80089fa:	f7ff fcad 	bl	8008358 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80089fe:	4820      	ldr	r0, [pc, #128]	; (8008a80 <MX_TIM2_Init+0xe8>)
 8008a00:	f005 fae0 	bl	800dfc4 <HAL_TIM_IC_Init>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008a0a:	f7ff fca5 	bl	8008358 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8008a0e:	2304      	movs	r3, #4
 8008a10:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8008a12:	2350      	movs	r3, #80	; 0x50
 8008a14:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008a16:	2300      	movs	r3, #0
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8008a1e:	f107 031c 	add.w	r3, r7, #28
 8008a22:	4619      	mov	r1, r3
 8008a24:	4816      	ldr	r0, [pc, #88]	; (8008a80 <MX_TIM2_Init+0xe8>)
 8008a26:	f006 fa43 	bl	800eeb0 <HAL_TIM_SlaveConfigSynchro>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008a30:	f7ff fc92 	bl	8008358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008a34:	2320      	movs	r3, #32
 8008a36:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008a3c:	f107 0310 	add.w	r3, r7, #16
 8008a40:	4619      	mov	r1, r3
 8008a42:	480f      	ldr	r0, [pc, #60]	; (8008a80 <MX_TIM2_Init+0xe8>)
 8008a44:	f007 fa0e 	bl	800fe64 <HAL_TIMEx_MasterConfigSynchronization>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8008a4e:	f7ff fc83 	bl	8008358 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008a52:	2300      	movs	r3, #0
 8008a54:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008a56:	2301      	movs	r3, #1
 8008a58:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008a62:	463b      	mov	r3, r7
 8008a64:	2200      	movs	r2, #0
 8008a66:	4619      	mov	r1, r3
 8008a68:	4805      	ldr	r0, [pc, #20]	; (8008a80 <MX_TIM2_Init+0xe8>)
 8008a6a:	f005 ff8c 	bl	800e986 <HAL_TIM_IC_ConfigChannel>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8008a74:	f7ff fc70 	bl	8008358 <Error_Handler>
  }

}
 8008a78:	bf00      	nop
 8008a7a:	3730      	adds	r7, #48	; 0x30
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20002d2c 	.word	0x20002d2c

08008a84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a8a:	f107 0310 	add.w	r3, r7, #16
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	605a      	str	r2, [r3, #4]
 8008a94:	609a      	str	r2, [r3, #8]
 8008a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a98:	1d3b      	adds	r3, r7, #4
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	605a      	str	r2, [r3, #4]
 8008aa0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8008aa2:	4b1d      	ldr	r3, [pc, #116]	; (8008b18 <MX_TIM3_Init+0x94>)
 8008aa4:	4a1d      	ldr	r2, [pc, #116]	; (8008b1c <MX_TIM3_Init+0x98>)
 8008aa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008aa8:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <MX_TIM3_Init+0x94>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8008aae:	4b1a      	ldr	r3, [pc, #104]	; (8008b18 <MX_TIM3_Init+0x94>)
 8008ab0:	2210      	movs	r2, #16
 8008ab2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008ab4:	4b18      	ldr	r3, [pc, #96]	; (8008b18 <MX_TIM3_Init+0x94>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008aba:	4b17      	ldr	r3, [pc, #92]	; (8008b18 <MX_TIM3_Init+0x94>)
 8008abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ac0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008ac2:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <MX_TIM3_Init+0x94>)
 8008ac4:	2280      	movs	r2, #128	; 0x80
 8008ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008ac8:	4813      	ldr	r0, [pc, #76]	; (8008b18 <MX_TIM3_Init+0x94>)
 8008aca:	f004 ff91 	bl	800d9f0 <HAL_TIM_Base_Init>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008ad4:	f7ff fc40 	bl	8008358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008ade:	f107 0310 	add.w	r3, r7, #16
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	480c      	ldr	r0, [pc, #48]	; (8008b18 <MX_TIM3_Init+0x94>)
 8008ae6:	f006 f8f3 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8008af0:	f7ff fc32 	bl	8008358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008af4:	2320      	movs	r3, #32
 8008af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008afc:	1d3b      	adds	r3, r7, #4
 8008afe:	4619      	mov	r1, r3
 8008b00:	4805      	ldr	r0, [pc, #20]	; (8008b18 <MX_TIM3_Init+0x94>)
 8008b02:	f007 f9af 	bl	800fe64 <HAL_TIMEx_MasterConfigSynchronization>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008b0c:	f7ff fc24 	bl	8008358 <Error_Handler>
  }

}
 8008b10:	bf00      	nop
 8008b12:	3720      	adds	r7, #32
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	200022e0 	.word	0x200022e0
 8008b1c:	40000400 	.word	0x40000400

08008b20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b26:	f107 0310 	add.w	r3, r7, #16
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	605a      	str	r2, [r3, #4]
 8008b30:	609a      	str	r2, [r3, #8]
 8008b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b34:	1d3b      	adds	r3, r7, #4
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	605a      	str	r2, [r3, #4]
 8008b3c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8008b3e:	4b1d      	ldr	r3, [pc, #116]	; (8008bb4 <MX_TIM4_Init+0x94>)
 8008b40:	4a1d      	ldr	r2, [pc, #116]	; (8008bb8 <MX_TIM4_Init+0x98>)
 8008b42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8008b44:	4b1b      	ldr	r3, [pc, #108]	; (8008bb4 <MX_TIM4_Init+0x94>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b4a:	4b1a      	ldr	r3, [pc, #104]	; (8008bb4 <MX_TIM4_Init+0x94>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8008b50:	4b18      	ldr	r3, [pc, #96]	; (8008bb4 <MX_TIM4_Init+0x94>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b56:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <MX_TIM4_Init+0x94>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b5c:	4b15      	ldr	r3, [pc, #84]	; (8008bb4 <MX_TIM4_Init+0x94>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008b62:	4814      	ldr	r0, [pc, #80]	; (8008bb4 <MX_TIM4_Init+0x94>)
 8008b64:	f004 ff44 	bl	800d9f0 <HAL_TIM_Base_Init>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8008b6e:	f7ff fbf3 	bl	8008358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008b78:	f107 0310 	add.w	r3, r7, #16
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	480d      	ldr	r0, [pc, #52]	; (8008bb4 <MX_TIM4_Init+0x94>)
 8008b80:	f006 f8a6 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8008b8a:	f7ff fbe5 	bl	8008358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008b96:	1d3b      	adds	r3, r7, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4806      	ldr	r0, [pc, #24]	; (8008bb4 <MX_TIM4_Init+0x94>)
 8008b9c:	f007 f962 	bl	800fe64 <HAL_TIMEx_MasterConfigSynchronization>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8008ba6:	f7ff fbd7 	bl	8008358 <Error_Handler>
  }

}
 8008baa:	bf00      	nop
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20002bb0 	.word	0x20002bb0
 8008bb8:	40000800 	.word	0x40000800

08008bbc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008bc2:	f107 0310 	add.w	r3, r7, #16
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	605a      	str	r2, [r3, #4]
 8008bcc:	609a      	str	r2, [r3, #8]
 8008bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008bd0:	1d3b      	adds	r3, r7, #4
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	605a      	str	r2, [r3, #4]
 8008bd8:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8008bda:	4b1d      	ldr	r3, [pc, #116]	; (8008c50 <MX_TIM5_Init+0x94>)
 8008bdc:	4a1d      	ldr	r2, [pc, #116]	; (8008c54 <MX_TIM5_Init+0x98>)
 8008bde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008be0:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <MX_TIM5_Init+0x94>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008be6:	4b1a      	ldr	r3, [pc, #104]	; (8008c50 <MX_TIM5_Init+0x94>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008bec:	4b18      	ldr	r3, [pc, #96]	; (8008c50 <MX_TIM5_Init+0x94>)
 8008bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bf2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bf4:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <MX_TIM5_Init+0x94>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bfa:	4b15      	ldr	r3, [pc, #84]	; (8008c50 <MX_TIM5_Init+0x94>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008c00:	4813      	ldr	r0, [pc, #76]	; (8008c50 <MX_TIM5_Init+0x94>)
 8008c02:	f004 fef5 	bl	800d9f0 <HAL_TIM_Base_Init>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008c0c:	f7ff fba4 	bl	8008358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008c16:	f107 0310 	add.w	r3, r7, #16
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	480c      	ldr	r0, [pc, #48]	; (8008c50 <MX_TIM5_Init+0x94>)
 8008c1e:	f006 f857 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008c28:	f7ff fb96 	bl	8008358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008c34:	1d3b      	adds	r3, r7, #4
 8008c36:	4619      	mov	r1, r3
 8008c38:	4805      	ldr	r0, [pc, #20]	; (8008c50 <MX_TIM5_Init+0x94>)
 8008c3a:	f007 f913 	bl	800fe64 <HAL_TIMEx_MasterConfigSynchronization>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008c44:	f7ff fb88 	bl	8008358 <Error_Handler>
  }

}
 8008c48:	bf00      	nop
 8008c4a:	3720      	adds	r7, #32
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20002c94 	.word	0x20002c94
 8008c54:	40000c00 	.word	0x40000c00

08008c58 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b094      	sub	sp, #80	; 0x50
 8008c5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	605a      	str	r2, [r3, #4]
 8008c68:	609a      	str	r2, [r3, #8]
 8008c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	605a      	str	r2, [r3, #4]
 8008c76:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008c78:	463b      	mov	r3, r7
 8008c7a:	2234      	movs	r2, #52	; 0x34
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f008 fe90 	bl	80119a4 <memset>

  htim8.Instance = TIM8;
 8008c84:	4b26      	ldr	r3, [pc, #152]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008c86:	4a27      	ldr	r2, [pc, #156]	; (8008d24 <MX_TIM8_Init+0xcc>)
 8008c88:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008c8a:	4b25      	ldr	r3, [pc, #148]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c90:	4b23      	ldr	r3, [pc, #140]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008c96:	4b22      	ldr	r3, [pc, #136]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008c98:	2201      	movs	r2, #1
 8008c9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c9c:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008ca2:	4b1f      	ldr	r3, [pc, #124]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008ca8:	4b1d      	ldr	r3, [pc, #116]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008caa:	2280      	movs	r2, #128	; 0x80
 8008cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008cae:	481c      	ldr	r0, [pc, #112]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008cb0:	f004 fe9e 	bl	800d9f0 <HAL_TIM_Base_Init>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8008cba:	f7ff fb4d 	bl	8008358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cc2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4815      	ldr	r0, [pc, #84]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008ccc:	f006 f800 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008cd6:	f7ff fb3f 	bl	8008358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008cda:	2320      	movs	r3, #32
 8008cdc:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008ce6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008cea:	4619      	mov	r1, r3
 8008cec:	480c      	ldr	r0, [pc, #48]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008cee:	f007 f8b9 	bl	800fe64 <HAL_TIMEx_MasterConfigSynchronization>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008cf8:	f7ff fb2e 	bl	8008358 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008d00:	2300      	movs	r3, #0
 8008d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008d04:	463b      	mov	r3, r7
 8008d06:	4619      	mov	r1, r3
 8008d08:	4805      	ldr	r0, [pc, #20]	; (8008d20 <MX_TIM8_Init+0xc8>)
 8008d0a:	f007 f941 	bl	800ff90 <HAL_TIMEx_ConfigBreakDeadTime>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008d14:	f7ff fb20 	bl	8008358 <Error_Handler>
  }

}
 8008d18:	bf00      	nop
 8008d1a:	3750      	adds	r7, #80	; 0x50
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20002b64 	.word	0x20002b64
 8008d24:	40013400 	.word	0x40013400

08008d28 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d2e:	f107 0310 	add.w	r3, r7, #16
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	605a      	str	r2, [r3, #4]
 8008d38:	609a      	str	r2, [r3, #8]
 8008d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d3c:	1d3b      	adds	r3, r7, #4
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	605a      	str	r2, [r3, #4]
 8008d44:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008d46:	4b1f      	ldr	r3, [pc, #124]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008d48:	4a1f      	ldr	r2, [pc, #124]	; (8008dc8 <MX_TIM15_Init+0xa0>)
 8008d4a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008d4c:	4b1d      	ldr	r3, [pc, #116]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d52:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d54:	4b1b      	ldr	r3, [pc, #108]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8008d5a:	4b1a      	ldr	r3, [pc, #104]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d60:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d62:	4b18      	ldr	r3, [pc, #96]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008d68:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d6e:	4b15      	ldr	r3, [pc, #84]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008d74:	4813      	ldr	r0, [pc, #76]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008d76:	f004 fe3b 	bl	800d9f0 <HAL_TIM_Base_Init>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008d80:	f7ff faea 	bl	8008358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008d8a:	f107 0310 	add.w	r3, r7, #16
 8008d8e:	4619      	mov	r1, r3
 8008d90:	480c      	ldr	r0, [pc, #48]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008d92:	f005 ff9d 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008d9c:	f7ff fadc 	bl	8008358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008da0:	2300      	movs	r3, #0
 8008da2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008da8:	1d3b      	adds	r3, r7, #4
 8008daa:	4619      	mov	r1, r3
 8008dac:	4805      	ldr	r0, [pc, #20]	; (8008dc4 <MX_TIM15_Init+0x9c>)
 8008dae:	f007 f859 	bl	800fe64 <HAL_TIMEx_MasterConfigSynchronization>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008db8:	f7ff face 	bl	8008358 <Error_Handler>
  }

}
 8008dbc:	bf00      	nop
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	20002bfc 	.word	0x20002bfc
 8008dc8:	40014000 	.word	0x40014000

08008dcc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008dd0:	4b10      	ldr	r3, [pc, #64]	; (8008e14 <MX_TIM16_Init+0x48>)
 8008dd2:	4a11      	ldr	r2, [pc, #68]	; (8008e18 <MX_TIM16_Init+0x4c>)
 8008dd4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008dd6:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <MX_TIM16_Init+0x48>)
 8008dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ddc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dde:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <MX_TIM16_Init+0x48>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008de4:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <MX_TIM16_Init+0x48>)
 8008de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <MX_TIM16_Init+0x48>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008df2:	4b08      	ldr	r3, [pc, #32]	; (8008e14 <MX_TIM16_Init+0x48>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <MX_TIM16_Init+0x48>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008dfe:	4805      	ldr	r0, [pc, #20]	; (8008e14 <MX_TIM16_Init+0x48>)
 8008e00:	f004 fdf6 	bl	800d9f0 <HAL_TIM_Base_Init>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008e0a:	f7ff faa5 	bl	8008358 <Error_Handler>
  }

}
 8008e0e:	bf00      	nop
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20002d78 	.word	0x20002d78
 8008e18:	40014400 	.word	0x40014400

08008e1c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008e20:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <MX_TIM17_Init+0x48>)
 8008e22:	4a11      	ldr	r2, [pc, #68]	; (8008e68 <MX_TIM17_Init+0x4c>)
 8008e24:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8008e26:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <MX_TIM17_Init+0x48>)
 8008e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e2c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <MX_TIM17_Init+0x48>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008e34:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <MX_TIM17_Init+0x48>)
 8008e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e3a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e3c:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <MX_TIM17_Init+0x48>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8008e42:	4b08      	ldr	r3, [pc, #32]	; (8008e64 <MX_TIM17_Init+0x48>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e48:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <MX_TIM17_Init+0x48>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8008e4e:	4805      	ldr	r0, [pc, #20]	; (8008e64 <MX_TIM17_Init+0x48>)
 8008e50:	f004 fdce 	bl	800d9f0 <HAL_TIM_Base_Init>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8008e5a:	f7ff fa7d 	bl	8008358 <Error_Handler>
  }

}
 8008e5e:	bf00      	nop
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20002c48 	.word	0x20002c48
 8008e68:	40014800 	.word	0x40014800

08008e6c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08a      	sub	sp, #40	; 0x28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e74:	f107 0314 	add.w	r3, r7, #20
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	605a      	str	r2, [r3, #4]
 8008e7e:	609a      	str	r2, [r3, #8]
 8008e80:	60da      	str	r2, [r3, #12]
 8008e82:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1f      	ldr	r2, [pc, #124]	; (8008f08 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d137      	bne.n	8008efe <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008e8e:	4b1f      	ldr	r3, [pc, #124]	; (8008f0c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e92:	4a1e      	ldr	r2, [pc, #120]	; (8008f0c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e98:	6613      	str	r3, [r2, #96]	; 0x60
 8008e9a:	4b1c      	ldr	r3, [pc, #112]	; (8008f0c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ea6:	4b19      	ldr	r3, [pc, #100]	; (8008f0c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eaa:	4a18      	ldr	r2, [pc, #96]	; (8008f0c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008eac:	f043 0304 	orr.w	r3, r3, #4
 8008eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008eb2:	4b16      	ldr	r3, [pc, #88]	; (8008f0c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ed2:	f107 0314 	add.w	r3, r7, #20
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	480d      	ldr	r0, [pc, #52]	; (8008f10 <HAL_TIM_Encoder_MspInit+0xa4>)
 8008eda:	f003 fa83 	bl	800c3e4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	2018      	movs	r0, #24
 8008ee4:	f002 faeb 	bl	800b4be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008ee8:	2018      	movs	r0, #24
 8008eea:	f002 fb02 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	201a      	movs	r0, #26
 8008ef4:	f002 fae3 	bl	800b4be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008ef8:	201a      	movs	r0, #26
 8008efa:	f002 fafa 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008efe:	bf00      	nop
 8008f00:	3728      	adds	r7, #40	; 0x28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	40012c00 	.word	0x40012c00
 8008f0c:	40021000 	.word	0x40021000
 8008f10:	48000800 	.word	0x48000800

08008f14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b090      	sub	sp, #64	; 0x40
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f20:	2200      	movs	r2, #0
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	605a      	str	r2, [r3, #4]
 8008f26:	609a      	str	r2, [r3, #8]
 8008f28:	60da      	str	r2, [r3, #12]
 8008f2a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f34:	d154      	bne.n	8008fe0 <HAL_TIM_Base_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008f36:	4b7f      	ldr	r3, [pc, #508]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8008f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3a:	4a7e      	ldr	r2, [pc, #504]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8008f3c:	f043 0301 	orr.w	r3, r3, #1
 8008f40:	6593      	str	r3, [r2, #88]	; 0x58
 8008f42:	4b7c      	ldr	r3, [pc, #496]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8008f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f4e:	4b79      	ldr	r3, [pc, #484]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8008f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f52:	4a78      	ldr	r2, [pc, #480]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8008f54:	f043 0301 	orr.w	r3, r3, #1
 8008f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f5a:	4b76      	ldr	r3, [pc, #472]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8008f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008f66:	2301      	movs	r3, #1
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f72:	2300      	movs	r3, #0
 8008f74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008f76:	2301      	movs	r3, #1
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f7e:	4619      	mov	r1, r3
 8008f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f84:	f003 fa2e 	bl	800c3e4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8008f88:	4b6b      	ldr	r3, [pc, #428]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008f8a:	4a6c      	ldr	r2, [pc, #432]	; (800913c <HAL_TIM_Base_MspInit+0x228>)
 8008f8c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8008f8e:	4b6a      	ldr	r3, [pc, #424]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008f90:	2238      	movs	r2, #56	; 0x38
 8008f92:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f94:	4b68      	ldr	r3, [pc, #416]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f9a:	4b67      	ldr	r3, [pc, #412]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008fa0:	4b65      	ldr	r3, [pc, #404]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008fa2:	2280      	movs	r2, #128	; 0x80
 8008fa4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008fa6:	4b64      	ldr	r3, [pc, #400]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008fae:	4b62      	ldr	r3, [pc, #392]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fb4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8008fb6:	4b60      	ldr	r3, [pc, #384]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008fb8:	2220      	movs	r2, #32
 8008fba:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008fbc:	4b5e      	ldr	r3, [pc, #376]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8008fc2:	485d      	ldr	r0, [pc, #372]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008fc4:	f002 fedc 	bl	800bd80 <HAL_DMA_Init>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8008fce:	f7ff f9c3 	bl	8008358 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a58      	ldr	r2, [pc, #352]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008fd6:	625a      	str	r2, [r3, #36]	; 0x24
 8008fd8:	4a57      	ldr	r2, [pc, #348]	; (8009138 <HAL_TIM_Base_MspInit+0x224>)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8008fde:	e0a4      	b.n	800912a <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM3)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a56      	ldr	r2, [pc, #344]	; (8009140 <HAL_TIM_Base_MspInit+0x22c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d114      	bne.n	8009014 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008fea:	4b52      	ldr	r3, [pc, #328]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8008fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fee:	4a51      	ldr	r2, [pc, #324]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8008ff0:	f043 0302 	orr.w	r3, r3, #2
 8008ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ff6:	4b4f      	ldr	r3, [pc, #316]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8008ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	623b      	str	r3, [r7, #32]
 8009000:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009002:	2200      	movs	r2, #0
 8009004:	2100      	movs	r1, #0
 8009006:	201d      	movs	r0, #29
 8009008:	f002 fa59 	bl	800b4be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800900c:	201d      	movs	r0, #29
 800900e:	f002 fa70 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
}
 8009012:	e08a      	b.n	800912a <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM4)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a4a      	ldr	r2, [pc, #296]	; (8009144 <HAL_TIM_Base_MspInit+0x230>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d114      	bne.n	8009048 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800901e:	4b45      	ldr	r3, [pc, #276]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009022:	4a44      	ldr	r2, [pc, #272]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009024:	f043 0304 	orr.w	r3, r3, #4
 8009028:	6593      	str	r3, [r2, #88]	; 0x58
 800902a:	4b42      	ldr	r3, [pc, #264]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 800902c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	61fb      	str	r3, [r7, #28]
 8009034:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8009036:	2200      	movs	r2, #0
 8009038:	2102      	movs	r1, #2
 800903a:	201e      	movs	r0, #30
 800903c:	f002 fa3f 	bl	800b4be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009040:	201e      	movs	r0, #30
 8009042:	f002 fa56 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
}
 8009046:	e070      	b.n	800912a <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM5)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a3e      	ldr	r2, [pc, #248]	; (8009148 <HAL_TIM_Base_MspInit+0x234>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d114      	bne.n	800907c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009052:	4b38      	ldr	r3, [pc, #224]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009056:	4a37      	ldr	r2, [pc, #220]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009058:	f043 0308 	orr.w	r3, r3, #8
 800905c:	6593      	str	r3, [r2, #88]	; 0x58
 800905e:	4b35      	ldr	r3, [pc, #212]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009062:	f003 0308 	and.w	r3, r3, #8
 8009066:	61bb      	str	r3, [r7, #24]
 8009068:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 800906a:	2200      	movs	r2, #0
 800906c:	2102      	movs	r1, #2
 800906e:	2032      	movs	r0, #50	; 0x32
 8009070:	f002 fa25 	bl	800b4be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8009074:	2032      	movs	r0, #50	; 0x32
 8009076:	f002 fa3c 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
}
 800907a:	e056      	b.n	800912a <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM8)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a32      	ldr	r2, [pc, #200]	; (800914c <HAL_TIM_Base_MspInit+0x238>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d10c      	bne.n	80090a0 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009086:	4b2b      	ldr	r3, [pc, #172]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800908a:	4a2a      	ldr	r2, [pc, #168]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 800908c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009090:	6613      	str	r3, [r2, #96]	; 0x60
 8009092:	4b28      	ldr	r3, [pc, #160]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	697b      	ldr	r3, [r7, #20]
}
 800909e:	e044      	b.n	800912a <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM15)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a2a      	ldr	r2, [pc, #168]	; (8009150 <HAL_TIM_Base_MspInit+0x23c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d114      	bne.n	80090d4 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80090aa:	4b22      	ldr	r3, [pc, #136]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 80090ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ae:	4a21      	ldr	r2, [pc, #132]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 80090b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b4:	6613      	str	r3, [r2, #96]	; 0x60
 80090b6:	4b1f      	ldr	r3, [pc, #124]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 80090b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80090c2:	2200      	movs	r2, #0
 80090c4:	2100      	movs	r1, #0
 80090c6:	2018      	movs	r0, #24
 80090c8:	f002 f9f9 	bl	800b4be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80090cc:	2018      	movs	r0, #24
 80090ce:	f002 fa10 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
}
 80090d2:	e02a      	b.n	800912a <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM16)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a1e      	ldr	r2, [pc, #120]	; (8009154 <HAL_TIM_Base_MspInit+0x240>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d10c      	bne.n	80090f8 <HAL_TIM_Base_MspInit+0x1e4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80090de:	4b15      	ldr	r3, [pc, #84]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 80090e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090e2:	4a14      	ldr	r2, [pc, #80]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 80090e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090e8:	6613      	str	r3, [r2, #96]	; 0x60
 80090ea:	4b12      	ldr	r3, [pc, #72]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 80090ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
}
 80090f6:	e018      	b.n	800912a <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM17)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a16      	ldr	r2, [pc, #88]	; (8009158 <HAL_TIM_Base_MspInit+0x244>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d113      	bne.n	800912a <HAL_TIM_Base_MspInit+0x216>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8009102:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009106:	4a0b      	ldr	r2, [pc, #44]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800910c:	6613      	str	r3, [r2, #96]	; 0x60
 800910e:	4b09      	ldr	r3, [pc, #36]	; (8009134 <HAL_TIM_Base_MspInit+0x220>)
 8009110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009116:	60bb      	str	r3, [r7, #8]
 8009118:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800911a:	2200      	movs	r2, #0
 800911c:	2101      	movs	r1, #1
 800911e:	201a      	movs	r0, #26
 8009120:	f002 f9cd 	bl	800b4be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8009124:	201a      	movs	r0, #26
 8009126:	f002 f9e4 	bl	800b4f2 <HAL_NVIC_EnableIRQ>
}
 800912a:	bf00      	nop
 800912c:	3740      	adds	r7, #64	; 0x40
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	40021000 	.word	0x40021000
 8009138:	20002b04 	.word	0x20002b04
 800913c:	40020044 	.word	0x40020044
 8009140:	40000400 	.word	0x40000400
 8009144:	40000800 	.word	0x40000800
 8009148:	40000c00 	.word	0x40000c00
 800914c:	40013400 	.word	0x40013400
 8009150:	40014000 	.word	0x40014000
 8009154:	40014400 	.word	0x40014400
 8009158:	40014800 	.word	0x40014800

0800915c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800915c:	480d      	ldr	r0, [pc, #52]	; (8009194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800915e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009160:	480d      	ldr	r0, [pc, #52]	; (8009198 <LoopForever+0x6>)
  ldr r1, =_edata
 8009162:	490e      	ldr	r1, [pc, #56]	; (800919c <LoopForever+0xa>)
  ldr r2, =_sidata
 8009164:	4a0e      	ldr	r2, [pc, #56]	; (80091a0 <LoopForever+0xe>)
  movs r3, #0
 8009166:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009168:	e002      	b.n	8009170 <LoopCopyDataInit>

0800916a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800916a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800916c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800916e:	3304      	adds	r3, #4

08009170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009174:	d3f9      	bcc.n	800916a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009176:	4a0b      	ldr	r2, [pc, #44]	; (80091a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009178:	4c0b      	ldr	r4, [pc, #44]	; (80091a8 <LoopForever+0x16>)
  movs r3, #0
 800917a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800917c:	e001      	b.n	8009182 <LoopFillZerobss>

0800917e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800917e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009180:	3204      	adds	r2, #4

08009182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009184:	d3fb      	bcc.n	800917e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009186:	f7ff fb81 	bl	800888c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800918a:	f008 fbe7 	bl	801195c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800918e:	f7ff f821 	bl	80081d4 <main>

08009192 <LoopForever>:

LoopForever:
    b LoopForever
 8009192:	e7fe      	b.n	8009192 <LoopForever>
  ldr   r0, =_estack
 8009194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800919c:	20001e0c 	.word	0x20001e0c
  ldr r2, =_sidata
 80091a0:	08016f58 	.word	0x08016f58
  ldr r2, =_sbss
 80091a4:	20001e0c 	.word	0x20001e0c
  ldr r4, =_ebss
 80091a8:	20002dcc 	.word	0x20002dcc

080091ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80091ac:	e7fe      	b.n	80091ac <ADC1_2_IRQHandler>

080091ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80091b8:	2003      	movs	r0, #3
 80091ba:	f002 f975 	bl	800b4a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80091be:	2000      	movs	r0, #0
 80091c0:	f000 f80e 	bl	80091e0 <HAL_InitTick>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	71fb      	strb	r3, [r7, #7]
 80091ce:	e001      	b.n	80091d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80091d0:	f7ff f992 	bl	80084f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80091d4:	79fb      	ldrb	r3, [r7, #7]

}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80091ec:	4b16      	ldr	r3, [pc, #88]	; (8009248 <HAL_InitTick+0x68>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d022      	beq.n	800923a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80091f4:	4b15      	ldr	r3, [pc, #84]	; (800924c <HAL_InitTick+0x6c>)
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	4b13      	ldr	r3, [pc, #76]	; (8009248 <HAL_InitTick+0x68>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009200:	fbb1 f3f3 	udiv	r3, r1, r3
 8009204:	fbb2 f3f3 	udiv	r3, r2, r3
 8009208:	4618      	mov	r0, r3
 800920a:	f002 f98e 	bl	800b52a <HAL_SYSTICK_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10f      	bne.n	8009234 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d809      	bhi.n	800922e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800921a:	2200      	movs	r2, #0
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009222:	f002 f94c 	bl	800b4be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009226:	4a0a      	ldr	r2, [pc, #40]	; (8009250 <HAL_InitTick+0x70>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	e007      	b.n	800923e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	73fb      	strb	r3, [r7, #15]
 8009232:	e004      	b.n	800923e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	73fb      	strb	r3, [r7, #15]
 8009238:	e001      	b.n	800923e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	20000c3c 	.word	0x20000c3c
 800924c:	20000c34 	.word	0x20000c34
 8009250:	20000c38 	.word	0x20000c38

08009254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009254:	b480      	push	{r7}
 8009256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <HAL_IncTick+0x1c>)
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <HAL_IncTick+0x20>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4413      	add	r3, r2
 8009262:	4a03      	ldr	r2, [pc, #12]	; (8009270 <HAL_IncTick+0x1c>)
 8009264:	6013      	str	r3, [r2, #0]
}
 8009266:	bf00      	nop
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	20002dc4 	.word	0x20002dc4
 8009274:	20000c3c 	.word	0x20000c3c

08009278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  return uwTick;
 800927c:	4b03      	ldr	r3, [pc, #12]	; (800928c <HAL_GetTick+0x14>)
 800927e:	681b      	ldr	r3, [r3, #0]
}
 8009280:	4618      	mov	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20002dc4 	.word	0x20002dc4

08009290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009298:	f7ff ffee 	bl	8009278 <HAL_GetTick>
 800929c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092a8:	d004      	beq.n	80092b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80092aa:	4b09      	ldr	r3, [pc, #36]	; (80092d0 <HAL_Delay+0x40>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80092b4:	bf00      	nop
 80092b6:	f7ff ffdf 	bl	8009278 <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d8f7      	bhi.n	80092b6 <HAL_Delay+0x26>
  {
  }
}
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000c3c 	.word	0x20000c3c

080092d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	609a      	str	r2, [r3, #8]
}
 80092ee:	bf00      	nop
 80092f0:	370c      	adds	r7, #12
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b083      	sub	sp, #12
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	609a      	str	r2, [r3, #8]
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800933c:	b490      	push	{r4, r7}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3360      	adds	r3, #96	; 0x60
 800934e:	461a      	mov	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009358:	6822      	ldr	r2, [r4, #0]
 800935a:	4b08      	ldr	r3, [pc, #32]	; (800937c <LL_ADC_SetOffset+0x40>)
 800935c:	4013      	ands	r3, r2
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	4313      	orrs	r3, r2
 800936a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800936e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bc90      	pop	{r4, r7}
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	03fff000 	.word	0x03fff000

08009380 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009380:	b490      	push	{r4, r7}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3360      	adds	r3, #96	; 0x60
 800938e:	461a      	mov	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc90      	pop	{r4, r7}
 80093a6:	4770      	bx	lr

080093a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80093a8:	b490      	push	{r4, r7}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3360      	adds	r3, #96	; 0x60
 80093b8:	461a      	mov	r2, r3
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bc90      	pop	{r4, r7}
 80093d6:	4770      	bx	lr

080093d8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80093d8:	b490      	push	{r4, r7}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3360      	adds	r3, #96	; 0x60
 80093e8:	461a      	mov	r2, r3
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bc90      	pop	{r4, r7}
 8009406:	4770      	bx	lr

08009408 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009408:	b490      	push	{r4, r7}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3360      	adds	r3, #96	; 0x60
 8009418:	461a      	mov	r2, r3
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4313      	orrs	r3, r2
 800942c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bc90      	pop	{r4, r7}
 8009436:	4770      	bx	lr

08009438 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	431a      	orrs	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	615a      	str	r2, [r3, #20]
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009472:	2301      	movs	r3, #1
 8009474:	e000      	b.n	8009478 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009484:	b490      	push	{r4, r7}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3330      	adds	r3, #48	; 0x30
 8009494:	461a      	mov	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	0a1b      	lsrs	r3, r3, #8
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	f003 030c 	and.w	r3, r3, #12
 80094a0:	4413      	add	r3, r2
 80094a2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	f003 031f 	and.w	r3, r3, #31
 80094ac:	211f      	movs	r1, #31
 80094ae:	fa01 f303 	lsl.w	r3, r1, r3
 80094b2:	43db      	mvns	r3, r3
 80094b4:	401a      	ands	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	0e9b      	lsrs	r3, r3, #26
 80094ba:	f003 011f 	and.w	r1, r3, #31
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f003 031f 	and.w	r3, r3, #31
 80094c4:	fa01 f303 	lsl.w	r3, r1, r3
 80094c8:	4313      	orrs	r3, r2
 80094ca:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bc90      	pop	{r4, r7}
 80094d4:	4770      	bx	lr

080094d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80094d6:	b490      	push	{r4, r7}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3314      	adds	r3, #20
 80094e6:	461a      	mov	r2, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	0e5b      	lsrs	r3, r3, #25
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	f003 0304 	and.w	r3, r3, #4
 80094f2:	4413      	add	r3, r2
 80094f4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	0d1b      	lsrs	r3, r3, #20
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	2107      	movs	r1, #7
 8009502:	fa01 f303 	lsl.w	r3, r1, r3
 8009506:	43db      	mvns	r3, r3
 8009508:	401a      	ands	r2, r3
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	0d1b      	lsrs	r3, r3, #20
 800950e:	f003 031f 	and.w	r3, r3, #31
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	fa01 f303 	lsl.w	r3, r1, r3
 8009518:	4313      	orrs	r3, r2
 800951a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800951c:	bf00      	nop
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bc90      	pop	{r4, r7}
 8009524:	4770      	bx	lr
	...

08009528 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009540:	43db      	mvns	r3, r3
 8009542:	401a      	ands	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f003 0318 	and.w	r3, r3, #24
 800954a:	4908      	ldr	r1, [pc, #32]	; (800956c <LL_ADC_SetChannelSingleDiff+0x44>)
 800954c:	40d9      	lsrs	r1, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	400b      	ands	r3, r1
 8009552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009556:	431a      	orrs	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800955e:	bf00      	nop
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	0007ffff 	.word	0x0007ffff

08009570 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f003 031f 	and.w	r3, r3, #31
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800959c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6093      	str	r3, [r2, #8]
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c4:	d101      	bne.n	80095ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e000      	b.n	80095cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80095e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80095ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009614:	d101      	bne.n	800961a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009616:	2301      	movs	r3, #1
 8009618:	e000      	b.n	800961c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800963c:	f043 0201 	orr.w	r2, r3, #1
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009664:	f043 0202 	orr.w	r2, r3, #2
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <LL_ADC_IsEnabled+0x18>
 800968c:	2301      	movs	r3, #1
 800968e:	e000      	b.n	8009692 <LL_ADC_IsEnabled+0x1a>
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d101      	bne.n	80096b6 <LL_ADC_IsDisableOngoing+0x18>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e000      	b.n	80096b8 <LL_ADC_IsDisableOngoing+0x1a>
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80096d8:	f043 0204 	orr.w	r2, r3, #4
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009700:	f043 0210 	orr.w	r2, r3, #16
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 0304 	and.w	r3, r3, #4
 8009724:	2b04      	cmp	r3, #4
 8009726:	d101      	bne.n	800972c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800974a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800974e:	f043 0220 	orr.w	r2, r3, #32
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 0308 	and.w	r3, r3, #8
 8009772:	2b08      	cmp	r3, #8
 8009774:	d101      	bne.n	800977a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009776:	2301      	movs	r3, #1
 8009778:	e000      	b.n	800977c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009788:	b590      	push	{r4, r7, lr}
 800978a:	b089      	sub	sp, #36	; 0x24
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009794:	2300      	movs	r3, #0
 8009796:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e1ad      	b.n	8009afe <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d109      	bne.n	80097c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7fd ff5b 	bl	800766c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff fef1 	bl	80095b0 <LL_ADC_IsDeepPowerDownEnabled>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fed7 	bl	800958c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff ff0c 	bl	8009600 <LL_ADC_IsInternalRegulatorEnabled>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d113      	bne.n	8009816 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff fef0 	bl	80095d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80097f8:	4b9e      	ldr	r3, [pc, #632]	; (8009a74 <HAL_ADC_Init+0x2ec>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	099b      	lsrs	r3, r3, #6
 80097fe:	4a9e      	ldr	r2, [pc, #632]	; (8009a78 <HAL_ADC_Init+0x2f0>)
 8009800:	fba2 2303 	umull	r2, r3, r2, r3
 8009804:	099b      	lsrs	r3, r3, #6
 8009806:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009808:	e002      	b.n	8009810 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	3b01      	subs	r3, #1
 800980e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1f9      	bne.n	800980a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fef0 	bl	8009600 <LL_ADC_IsInternalRegulatorEnabled>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10d      	bne.n	8009842 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800982a:	f043 0210 	orr.w	r2, r3, #16
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009836:	f043 0201 	orr.w	r2, r3, #1
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff ff64 	bl	8009714 <LL_ADC_REG_IsConversionOngoing>
 800984c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009852:	f003 0310 	and.w	r3, r3, #16
 8009856:	2b00      	cmp	r3, #0
 8009858:	f040 8148 	bne.w	8009aec <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f040 8144 	bne.w	8009aec <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009868:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800986c:	f043 0202 	orr.w	r2, r3, #2
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fefd 	bl	8009678 <LL_ADC_IsEnabled>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d141      	bne.n	8009908 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800988c:	d004      	beq.n	8009898 <HAL_ADC_Init+0x110>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a7a      	ldr	r2, [pc, #488]	; (8009a7c <HAL_ADC_Init+0x2f4>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d10f      	bne.n	80098b8 <HAL_ADC_Init+0x130>
 8009898:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800989c:	f7ff feec 	bl	8009678 <LL_ADC_IsEnabled>
 80098a0:	4604      	mov	r4, r0
 80098a2:	4876      	ldr	r0, [pc, #472]	; (8009a7c <HAL_ADC_Init+0x2f4>)
 80098a4:	f7ff fee8 	bl	8009678 <LL_ADC_IsEnabled>
 80098a8:	4603      	mov	r3, r0
 80098aa:	4323      	orrs	r3, r4
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	bf0c      	ite	eq
 80098b0:	2301      	moveq	r3, #1
 80098b2:	2300      	movne	r3, #0
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	e012      	b.n	80098de <HAL_ADC_Init+0x156>
 80098b8:	4871      	ldr	r0, [pc, #452]	; (8009a80 <HAL_ADC_Init+0x2f8>)
 80098ba:	f7ff fedd 	bl	8009678 <LL_ADC_IsEnabled>
 80098be:	4604      	mov	r4, r0
 80098c0:	4870      	ldr	r0, [pc, #448]	; (8009a84 <HAL_ADC_Init+0x2fc>)
 80098c2:	f7ff fed9 	bl	8009678 <LL_ADC_IsEnabled>
 80098c6:	4603      	mov	r3, r0
 80098c8:	431c      	orrs	r4, r3
 80098ca:	486f      	ldr	r0, [pc, #444]	; (8009a88 <HAL_ADC_Init+0x300>)
 80098cc:	f7ff fed4 	bl	8009678 <LL_ADC_IsEnabled>
 80098d0:	4603      	mov	r3, r0
 80098d2:	4323      	orrs	r3, r4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	bf0c      	ite	eq
 80098d8:	2301      	moveq	r3, #1
 80098da:	2300      	movne	r3, #0
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d012      	beq.n	8009908 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098ea:	d004      	beq.n	80098f6 <HAL_ADC_Init+0x16e>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a62      	ldr	r2, [pc, #392]	; (8009a7c <HAL_ADC_Init+0x2f4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d101      	bne.n	80098fa <HAL_ADC_Init+0x172>
 80098f6:	4a65      	ldr	r2, [pc, #404]	; (8009a8c <HAL_ADC_Init+0x304>)
 80098f8:	e000      	b.n	80098fc <HAL_ADC_Init+0x174>
 80098fa:	4a65      	ldr	r2, [pc, #404]	; (8009a90 <HAL_ADC_Init+0x308>)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	4619      	mov	r1, r3
 8009902:	4610      	mov	r0, r2
 8009904:	f7ff fce6 	bl	80092d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	7f5b      	ldrb	r3, [r3, #29]
 800990c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009912:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8009918:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800991e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009926:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009928:	4313      	orrs	r3, r2
 800992a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009932:	2b01      	cmp	r3, #1
 8009934:	d106      	bne.n	8009944 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993a:	3b01      	subs	r3, #1
 800993c:	045b      	lsls	r3, r3, #17
 800993e:	69ba      	ldr	r2, [r7, #24]
 8009940:	4313      	orrs	r3, r2
 8009942:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	2b00      	cmp	r3, #0
 800994a:	d009      	beq.n	8009960 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009958:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	4313      	orrs	r3, r2
 800995e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68da      	ldr	r2, [r3, #12]
 8009966:	4b4b      	ldr	r3, [pc, #300]	; (8009a94 <HAL_ADC_Init+0x30c>)
 8009968:	4013      	ands	r3, r2
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	6812      	ldr	r2, [r2, #0]
 800996e:	69b9      	ldr	r1, [r7, #24]
 8009970:	430b      	orrs	r3, r1
 8009972:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	430a      	orrs	r2, r1
 8009988:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff fec0 	bl	8009714 <LL_ADC_REG_IsConversionOngoing>
 8009994:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff fee1 	bl	8009762 <LL_ADC_INJ_IsConversionOngoing>
 80099a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d17f      	bne.n	8009aa8 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d17c      	bne.n	8009aa8 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80099b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80099ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80099bc:	4313      	orrs	r3, r2
 80099be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099ca:	f023 0302 	bic.w	r3, r3, #2
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	6812      	ldr	r2, [r2, #0]
 80099d2:	69b9      	ldr	r1, [r7, #24]
 80099d4:	430b      	orrs	r3, r1
 80099d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d017      	beq.n	8009a10 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691a      	ldr	r2, [r3, #16]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80099ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80099f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80099fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6911      	ldr	r1, [r2, #16]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	6812      	ldr	r2, [r2, #0]
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8009a0e:	e013      	b.n	8009a38 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691a      	ldr	r2, [r3, #16]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	6812      	ldr	r2, [r2, #0]
 8009a2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009a30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009a34:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d12a      	bne.n	8009a98 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009a4c:	f023 0304 	bic.w	r3, r3, #4
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a58:	4311      	orrs	r1, r2
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009a5e:	4311      	orrs	r1, r2
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009a64:	430a      	orrs	r2, r1
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f042 0201 	orr.w	r2, r2, #1
 8009a70:	611a      	str	r2, [r3, #16]
 8009a72:	e019      	b.n	8009aa8 <HAL_ADC_Init+0x320>
 8009a74:	20000c34 	.word	0x20000c34
 8009a78:	053e2d63 	.word	0x053e2d63
 8009a7c:	50000100 	.word	0x50000100
 8009a80:	50000400 	.word	0x50000400
 8009a84:	50000500 	.word	0x50000500
 8009a88:	50000600 	.word	0x50000600
 8009a8c:	50000300 	.word	0x50000300
 8009a90:	50000700 	.word	0x50000700
 8009a94:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	691a      	ldr	r2, [r3, #16]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 0201 	bic.w	r2, r2, #1
 8009aa6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d10c      	bne.n	8009aca <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab6:	f023 010f 	bic.w	r1, r3, #15
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	1e5a      	subs	r2, r3, #1
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8009ac8:	e007      	b.n	8009ada <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 020f 	bic.w	r2, r2, #15
 8009ad8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ade:	f023 0303 	bic.w	r3, r3, #3
 8009ae2:	f043 0201 	orr.w	r2, r3, #1
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009aea:	e007      	b.n	8009afc <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af0:	f043 0210 	orr.w	r2, r3, #16
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3724      	adds	r7, #36	; 0x24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd90      	pop	{r4, r7, pc}
 8009b06:	bf00      	nop

08009b08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b1c:	d004      	beq.n	8009b28 <HAL_ADC_Start_DMA+0x20>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a58      	ldr	r2, [pc, #352]	; (8009c84 <HAL_ADC_Start_DMA+0x17c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d101      	bne.n	8009b2c <HAL_ADC_Start_DMA+0x24>
 8009b28:	4b57      	ldr	r3, [pc, #348]	; (8009c88 <HAL_ADC_Start_DMA+0x180>)
 8009b2a:	e000      	b.n	8009b2e <HAL_ADC_Start_DMA+0x26>
 8009b2c:	4b57      	ldr	r3, [pc, #348]	; (8009c8c <HAL_ADC_Start_DMA+0x184>)
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fd1e 	bl	8009570 <LL_ADC_GetMultimode>
 8009b34:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff fdea 	bl	8009714 <LL_ADC_REG_IsConversionOngoing>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f040 8096 	bne.w	8009c74 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d101      	bne.n	8009b56 <HAL_ADC_Start_DMA+0x4e>
 8009b52:	2302      	movs	r3, #2
 8009b54:	e091      	b.n	8009c7a <HAL_ADC_Start_DMA+0x172>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d005      	beq.n	8009b70 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d002      	beq.n	8009b70 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	d17a      	bne.n	8009c66 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 fd71 	bl	800a658 <ADC_Enable>
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d16d      	bne.n	8009c5c <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b88:	f023 0301 	bic.w	r3, r3, #1
 8009b8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a3a      	ldr	r2, [pc, #232]	; (8009c84 <HAL_ADC_Start_DMA+0x17c>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d009      	beq.n	8009bb2 <HAL_ADC_Start_DMA+0xaa>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a3b      	ldr	r2, [pc, #236]	; (8009c90 <HAL_ADC_Start_DMA+0x188>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d002      	beq.n	8009bae <HAL_ADC_Start_DMA+0xa6>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	e003      	b.n	8009bb6 <HAL_ADC_Start_DMA+0xae>
 8009bae:	4b39      	ldr	r3, [pc, #228]	; (8009c94 <HAL_ADC_Start_DMA+0x18c>)
 8009bb0:	e001      	b.n	8009bb6 <HAL_ADC_Start_DMA+0xae>
 8009bb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	6812      	ldr	r2, [r2, #0]
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d002      	beq.n	8009bc4 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d105      	bne.n	8009bd0 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bc8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d006      	beq.n	8009bea <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009be0:	f023 0206 	bic.w	r2, r3, #6
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	661a      	str	r2, [r3, #96]	; 0x60
 8009be8:	e002      	b.n	8009bf0 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf4:	4a28      	ldr	r2, [pc, #160]	; (8009c98 <HAL_ADC_Start_DMA+0x190>)
 8009bf6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfc:	4a27      	ldr	r2, [pc, #156]	; (8009c9c <HAL_ADC_Start_DMA+0x194>)
 8009bfe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c04:	4a26      	ldr	r2, [pc, #152]	; (8009ca0 <HAL_ADC_Start_DMA+0x198>)
 8009c06:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	221c      	movs	r2, #28
 8009c0e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0210 	orr.w	r2, r2, #16
 8009c26:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3340      	adds	r3, #64	; 0x40
 8009c42:	4619      	mov	r1, r3
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f002 f942 	bl	800bed0 <HAL_DMA_Start_IT>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff fd35 	bl	80096c4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009c5a:	e00d      	b.n	8009c78 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009c64:	e008      	b.n	8009c78 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009c72:	e001      	b.n	8009c78 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009c74:	2302      	movs	r3, #2
 8009c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	50000100 	.word	0x50000100
 8009c88:	50000300 	.word	0x50000300
 8009c8c:	50000700 	.word	0x50000700
 8009c90:	50000500 	.word	0x50000500
 8009c94:	50000400 	.word	0x50000400
 8009c98:	0800a7bd 	.word	0x0800a7bd
 8009c9c:	0800a895 	.word	0x0800a895
 8009ca0:	0800a8b1 	.word	0x0800a8b1

08009ca4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <HAL_ADC_Stop_DMA+0x16>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e051      	b.n	8009d5e <HAL_ADC_Stop_DMA+0xba>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009cc2:	2103      	movs	r1, #3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fc13 	bl	800a4f0 <ADC_ConversionStop>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d13f      	bne.n	8009d54 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68da      	ldr	r2, [r3, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 0201 	bic.w	r2, r2, #1
 8009ce2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d10f      	bne.n	8009d12 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f002 f965 	bl	800bfc6 <HAL_DMA_Abort>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d005      	beq.n	8009d12 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 0210 	bic.w	r2, r2, #16
 8009d20:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d105      	bne.n	8009d34 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fcef 	bl	800a70c <ADC_Disable>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]
 8009d32:	e002      	b.n	8009d3a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fce9 	bl	800a70c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d109      	bne.n	8009d54 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d48:	f023 0301 	bic.w	r3, r3, #1
 8009d4c:	f043 0201 	orr.w	r2, r3, #1
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009d82:	bf00      	nop
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
	...

08009d90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b0a6      	sub	sp, #152	; 0x98
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <HAL_ADC_ConfigChannel+0x22>
 8009dae:	2302      	movs	r3, #2
 8009db0:	e38e      	b.n	800a4d0 <HAL_ADC_ConfigChannel+0x740>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff fca8 	bl	8009714 <LL_ADC_REG_IsConversionOngoing>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f040 836f 	bne.w	800a4aa <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	6859      	ldr	r1, [r3, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	f7ff fb53 	bl	8009484 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff fc96 	bl	8009714 <LL_ADC_REG_IsConversionOngoing>
 8009de8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fcb6 	bl	8009762 <LL_ADC_INJ_IsConversionOngoing>
 8009df6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f040 817b 	bne.w	800a0fa <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f040 8176 	bne.w	800a0fa <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e16:	d10f      	bne.n	8009e38 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6818      	ldr	r0, [r3, #0]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2200      	movs	r2, #0
 8009e22:	4619      	mov	r1, r3
 8009e24:	f7ff fb57 	bl	80094d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff fb01 	bl	8009438 <LL_ADC_SetSamplingTimeCommonConfig>
 8009e36:	e00e      	b.n	8009e56 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6818      	ldr	r0, [r3, #0]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	6819      	ldr	r1, [r3, #0]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	461a      	mov	r2, r3
 8009e46:	f7ff fb46 	bl	80094d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2100      	movs	r1, #0
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7ff faf1 	bl	8009438 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	695a      	ldr	r2, [r3, #20]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	08db      	lsrs	r3, r3, #3
 8009e62:	f003 0303 	and.w	r3, r3, #3
 8009e66:	005b      	lsls	r3, r3, #1
 8009e68:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	d022      	beq.n	8009ebe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	6919      	ldr	r1, [r3, #16]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e88:	f7ff fa58 	bl	800933c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	6919      	ldr	r1, [r3, #16]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	f7ff fa9d 	bl	80093d8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	6919      	ldr	r1, [r3, #16]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	7f1b      	ldrb	r3, [r3, #28]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d102      	bne.n	8009eb4 <HAL_ADC_ConfigChannel+0x124>
 8009eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009eb2:	e000      	b.n	8009eb6 <HAL_ADC_ConfigChannel+0x126>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7ff faa6 	bl	8009408 <LL_ADC_SetOffsetSaturation>
 8009ebc:	e11d      	b.n	800a0fa <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff fa5b 	bl	8009380 <LL_ADC_GetOffsetChannel>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <HAL_ADC_ConfigChannel+0x15a>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7ff fa50 	bl	8009380 <LL_ADC_GetOffsetChannel>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	0e9b      	lsrs	r3, r3, #26
 8009ee4:	f003 021f 	and.w	r2, r3, #31
 8009ee8:	e012      	b.n	8009f10 <HAL_ADC_ConfigChannel+0x180>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2100      	movs	r1, #0
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7ff fa45 	bl	8009380 <LL_ADC_GetOffsetChannel>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f00:	fa93 f3a3 	rbit	r3, r3
 8009f04:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f08:	fab3 f383 	clz	r3, r3
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	461a      	mov	r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d105      	bne.n	8009f28 <HAL_ADC_ConfigChannel+0x198>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	0e9b      	lsrs	r3, r3, #26
 8009f22:	f003 031f 	and.w	r3, r3, #31
 8009f26:	e00a      	b.n	8009f3e <HAL_ADC_ConfigChannel+0x1ae>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f30:	fa93 f3a3 	rbit	r3, r3
 8009f34:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8009f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f38:	fab3 f383 	clz	r3, r3
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d106      	bne.n	8009f50 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2200      	movs	r2, #0
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff fa2c 	bl	80093a8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2101      	movs	r1, #1
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7ff fa12 	bl	8009380 <LL_ADC_GetOffsetChannel>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <HAL_ADC_ConfigChannel+0x1ec>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7ff fa07 	bl	8009380 <LL_ADC_GetOffsetChannel>
 8009f72:	4603      	mov	r3, r0
 8009f74:	0e9b      	lsrs	r3, r3, #26
 8009f76:	f003 021f 	and.w	r2, r3, #31
 8009f7a:	e010      	b.n	8009f9e <HAL_ADC_ConfigChannel+0x20e>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2101      	movs	r1, #1
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7ff f9fc 	bl	8009380 <LL_ADC_GetOffsetChannel>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f8e:	fa93 f3a3 	rbit	r3, r3
 8009f92:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f96:	fab3 f383 	clz	r3, r3
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <HAL_ADC_ConfigChannel+0x226>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	0e9b      	lsrs	r3, r3, #26
 8009fb0:	f003 031f 	and.w	r3, r3, #31
 8009fb4:	e00a      	b.n	8009fcc <HAL_ADC_ConfigChannel+0x23c>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fbe:	fa93 f3a3 	rbit	r3, r3
 8009fc2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fc6:	fab3 f383 	clz	r3, r3
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d106      	bne.n	8009fde <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff f9e5 	bl	80093a8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2102      	movs	r1, #2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7ff f9cb 	bl	8009380 <LL_ADC_GetOffsetChannel>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10a      	bne.n	800a00a <HAL_ADC_ConfigChannel+0x27a>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2102      	movs	r1, #2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff f9c0 	bl	8009380 <LL_ADC_GetOffsetChannel>
 800a000:	4603      	mov	r3, r0
 800a002:	0e9b      	lsrs	r3, r3, #26
 800a004:	f003 021f 	and.w	r2, r3, #31
 800a008:	e010      	b.n	800a02c <HAL_ADC_ConfigChannel+0x29c>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2102      	movs	r1, #2
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff f9b5 	bl	8009380 <LL_ADC_GetOffsetChannel>
 800a016:	4603      	mov	r3, r0
 800a018:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a01a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a01c:	fa93 f3a3 	rbit	r3, r3
 800a020:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800a022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a024:	fab3 f383 	clz	r3, r3
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	461a      	mov	r2, r3
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a034:	2b00      	cmp	r3, #0
 800a036:	d105      	bne.n	800a044 <HAL_ADC_ConfigChannel+0x2b4>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	0e9b      	lsrs	r3, r3, #26
 800a03e:	f003 031f 	and.w	r3, r3, #31
 800a042:	e00a      	b.n	800a05a <HAL_ADC_ConfigChannel+0x2ca>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a04a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a04c:	fa93 f3a3 	rbit	r3, r3
 800a050:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800a052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a054:	fab3 f383 	clz	r3, r3
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d106      	bne.n	800a06c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2200      	movs	r2, #0
 800a064:	2102      	movs	r1, #2
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff f99e 	bl	80093a8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2103      	movs	r1, #3
 800a072:	4618      	mov	r0, r3
 800a074:	f7ff f984 	bl	8009380 <LL_ADC_GetOffsetChannel>
 800a078:	4603      	mov	r3, r0
 800a07a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10a      	bne.n	800a098 <HAL_ADC_ConfigChannel+0x308>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2103      	movs	r1, #3
 800a088:	4618      	mov	r0, r3
 800a08a:	f7ff f979 	bl	8009380 <LL_ADC_GetOffsetChannel>
 800a08e:	4603      	mov	r3, r0
 800a090:	0e9b      	lsrs	r3, r3, #26
 800a092:	f003 021f 	and.w	r2, r3, #31
 800a096:	e010      	b.n	800a0ba <HAL_ADC_ConfigChannel+0x32a>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2103      	movs	r1, #3
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff f96e 	bl	8009380 <LL_ADC_GetOffsetChannel>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0aa:	fa93 f3a3 	rbit	r3, r3
 800a0ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b2:	fab3 f383 	clz	r3, r3
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d105      	bne.n	800a0d2 <HAL_ADC_ConfigChannel+0x342>
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	0e9b      	lsrs	r3, r3, #26
 800a0cc:	f003 031f 	and.w	r3, r3, #31
 800a0d0:	e00a      	b.n	800a0e8 <HAL_ADC_ConfigChannel+0x358>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0da:	fa93 f3a3 	rbit	r3, r3
 800a0de:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800a0e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0e2:	fab3 f383 	clz	r3, r3
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d106      	bne.n	800a0fa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2103      	movs	r1, #3
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff f957 	bl	80093a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff faba 	bl	8009678 <LL_ADC_IsEnabled>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	f040 810c 	bne.w	800a324 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	6819      	ldr	r1, [r3, #0]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	461a      	mov	r2, r3
 800a11a:	f7ff fa05 	bl	8009528 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	4aaf      	ldr	r2, [pc, #700]	; (800a3e0 <HAL_ADC_ConfigChannel+0x650>)
 800a124:	4293      	cmp	r3, r2
 800a126:	f040 80fd 	bne.w	800a324 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10b      	bne.n	800a152 <HAL_ADC_ConfigChannel+0x3c2>
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	0e9b      	lsrs	r3, r3, #26
 800a140:	3301      	adds	r3, #1
 800a142:	f003 031f 	and.w	r3, r3, #31
 800a146:	2b09      	cmp	r3, #9
 800a148:	bf94      	ite	ls
 800a14a:	2301      	movls	r3, #1
 800a14c:	2300      	movhi	r3, #0
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	e012      	b.n	800a178 <HAL_ADC_ConfigChannel+0x3e8>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a15a:	fa93 f3a3 	rbit	r3, r3
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800a160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a162:	fab3 f383 	clz	r3, r3
 800a166:	b2db      	uxtb	r3, r3
 800a168:	3301      	adds	r3, #1
 800a16a:	f003 031f 	and.w	r3, r3, #31
 800a16e:	2b09      	cmp	r3, #9
 800a170:	bf94      	ite	ls
 800a172:	2301      	movls	r3, #1
 800a174:	2300      	movhi	r3, #0
 800a176:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d064      	beq.n	800a246 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a184:	2b00      	cmp	r3, #0
 800a186:	d107      	bne.n	800a198 <HAL_ADC_ConfigChannel+0x408>
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	0e9b      	lsrs	r3, r3, #26
 800a18e:	3301      	adds	r3, #1
 800a190:	069b      	lsls	r3, r3, #26
 800a192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a196:	e00e      	b.n	800a1b6 <HAL_ADC_ConfigChannel+0x426>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	fa93 f3a3 	rbit	r3, r3
 800a1a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a8:	fab3 f383 	clz	r3, r3
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	069b      	lsls	r3, r3, #26
 800a1b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d109      	bne.n	800a1d6 <HAL_ADC_ConfigChannel+0x446>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	0e9b      	lsrs	r3, r3, #26
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	f003 031f 	and.w	r3, r3, #31
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d4:	e010      	b.n	800a1f8 <HAL_ADC_ConfigChannel+0x468>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	fa93 f3a3 	rbit	r3, r3
 800a1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	fab3 f383 	clz	r3, r3
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	f003 031f 	and.w	r3, r3, #31
 800a1f2:	2101      	movs	r1, #1
 800a1f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f8:	ea42 0103 	orr.w	r1, r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <HAL_ADC_ConfigChannel+0x48e>
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	0e9b      	lsrs	r3, r3, #26
 800a20e:	3301      	adds	r3, #1
 800a210:	f003 021f 	and.w	r2, r3, #31
 800a214:	4613      	mov	r3, r2
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	4413      	add	r3, r2
 800a21a:	051b      	lsls	r3, r3, #20
 800a21c:	e011      	b.n	800a242 <HAL_ADC_ConfigChannel+0x4b2>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	fa93 f3a3 	rbit	r3, r3
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	fab3 f383 	clz	r3, r3
 800a232:	b2db      	uxtb	r3, r3
 800a234:	3301      	adds	r3, #1
 800a236:	f003 021f 	and.w	r2, r3, #31
 800a23a:	4613      	mov	r3, r2
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	4413      	add	r3, r2
 800a240:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a242:	430b      	orrs	r3, r1
 800a244:	e069      	b.n	800a31a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d107      	bne.n	800a262 <HAL_ADC_ConfigChannel+0x4d2>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	0e9b      	lsrs	r3, r3, #26
 800a258:	3301      	adds	r3, #1
 800a25a:	069b      	lsls	r3, r3, #26
 800a25c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a260:	e00e      	b.n	800a280 <HAL_ADC_ConfigChannel+0x4f0>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	fa93 f3a3 	rbit	r3, r3
 800a26e:	61fb      	str	r3, [r7, #28]
  return result;
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	fab3 f383 	clz	r3, r3
 800a276:	b2db      	uxtb	r3, r3
 800a278:	3301      	adds	r3, #1
 800a27a:	069b      	lsls	r3, r3, #26
 800a27c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d109      	bne.n	800a2a0 <HAL_ADC_ConfigChannel+0x510>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	0e9b      	lsrs	r3, r3, #26
 800a292:	3301      	adds	r3, #1
 800a294:	f003 031f 	and.w	r3, r3, #31
 800a298:	2101      	movs	r1, #1
 800a29a:	fa01 f303 	lsl.w	r3, r1, r3
 800a29e:	e010      	b.n	800a2c2 <HAL_ADC_ConfigChannel+0x532>
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	fa93 f3a3 	rbit	r3, r3
 800a2ac:	617b      	str	r3, [r7, #20]
  return result;
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	fab3 f383 	clz	r3, r3
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	f003 031f 	and.w	r3, r3, #31
 800a2bc:	2101      	movs	r1, #1
 800a2be:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c2:	ea42 0103 	orr.w	r1, r2, r3
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10d      	bne.n	800a2ee <HAL_ADC_ConfigChannel+0x55e>
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	0e9b      	lsrs	r3, r3, #26
 800a2d8:	3301      	adds	r3, #1
 800a2da:	f003 021f 	and.w	r2, r3, #31
 800a2de:	4613      	mov	r3, r2
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	4413      	add	r3, r2
 800a2e4:	3b1e      	subs	r3, #30
 800a2e6:	051b      	lsls	r3, r3, #20
 800a2e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a2ec:	e014      	b.n	800a318 <HAL_ADC_ConfigChannel+0x588>
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	fa93 f3a3 	rbit	r3, r3
 800a2fa:	60fb      	str	r3, [r7, #12]
  return result;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	fab3 f383 	clz	r3, r3
 800a302:	b2db      	uxtb	r3, r3
 800a304:	3301      	adds	r3, #1
 800a306:	f003 021f 	and.w	r2, r3, #31
 800a30a:	4613      	mov	r3, r2
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	4413      	add	r3, r2
 800a310:	3b1e      	subs	r3, #30
 800a312:	051b      	lsls	r3, r3, #20
 800a314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a318:	430b      	orrs	r3, r1
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	6892      	ldr	r2, [r2, #8]
 800a31e:	4619      	mov	r1, r3
 800a320:	f7ff f8d9 	bl	80094d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	4b2e      	ldr	r3, [pc, #184]	; (800a3e4 <HAL_ADC_ConfigChannel+0x654>)
 800a32a:	4013      	ands	r3, r2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 80c9 	beq.w	800a4c4 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a33a:	d004      	beq.n	800a346 <HAL_ADC_ConfigChannel+0x5b6>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a29      	ldr	r2, [pc, #164]	; (800a3e8 <HAL_ADC_ConfigChannel+0x658>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d101      	bne.n	800a34a <HAL_ADC_ConfigChannel+0x5ba>
 800a346:	4b29      	ldr	r3, [pc, #164]	; (800a3ec <HAL_ADC_ConfigChannel+0x65c>)
 800a348:	e000      	b.n	800a34c <HAL_ADC_ConfigChannel+0x5bc>
 800a34a:	4b29      	ldr	r3, [pc, #164]	; (800a3f0 <HAL_ADC_ConfigChannel+0x660>)
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fe ffe7 	bl	8009320 <LL_ADC_GetCommonPathInternalCh>
 800a352:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a26      	ldr	r2, [pc, #152]	; (800a3f4 <HAL_ADC_ConfigChannel+0x664>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d004      	beq.n	800a36a <HAL_ADC_ConfigChannel+0x5da>
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a24      	ldr	r2, [pc, #144]	; (800a3f8 <HAL_ADC_ConfigChannel+0x668>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d14e      	bne.n	800a408 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a36a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a36e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d148      	bne.n	800a408 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a37e:	d005      	beq.n	800a38c <HAL_ADC_ConfigChannel+0x5fc>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a1d      	ldr	r2, [pc, #116]	; (800a3fc <HAL_ADC_ConfigChannel+0x66c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	f040 8099 	bne.w	800a4be <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a394:	d004      	beq.n	800a3a0 <HAL_ADC_ConfigChannel+0x610>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a13      	ldr	r2, [pc, #76]	; (800a3e8 <HAL_ADC_ConfigChannel+0x658>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d101      	bne.n	800a3a4 <HAL_ADC_ConfigChannel+0x614>
 800a3a0:	4a12      	ldr	r2, [pc, #72]	; (800a3ec <HAL_ADC_ConfigChannel+0x65c>)
 800a3a2:	e000      	b.n	800a3a6 <HAL_ADC_ConfigChannel+0x616>
 800a3a4:	4a12      	ldr	r2, [pc, #72]	; (800a3f0 <HAL_ADC_ConfigChannel+0x660>)
 800a3a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	f7fe ffa2 	bl	80092fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a3b6:	4b12      	ldr	r3, [pc, #72]	; (800a400 <HAL_ADC_ConfigChannel+0x670>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	099b      	lsrs	r3, r3, #6
 800a3bc:	4a11      	ldr	r2, [pc, #68]	; (800a404 <HAL_ADC_ConfigChannel+0x674>)
 800a3be:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c2:	099a      	lsrs	r2, r3, #6
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	005b      	lsls	r3, r3, #1
 800a3c8:	4413      	add	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a3ce:	e002      	b.n	800a3d6 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1f9      	bne.n	800a3d0 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a3dc:	e06f      	b.n	800a4be <HAL_ADC_ConfigChannel+0x72e>
 800a3de:	bf00      	nop
 800a3e0:	407f0000 	.word	0x407f0000
 800a3e4:	80080000 	.word	0x80080000
 800a3e8:	50000100 	.word	0x50000100
 800a3ec:	50000300 	.word	0x50000300
 800a3f0:	50000700 	.word	0x50000700
 800a3f4:	c3210000 	.word	0xc3210000
 800a3f8:	90c00010 	.word	0x90c00010
 800a3fc:	50000600 	.word	0x50000600
 800a400:	20000c34 	.word	0x20000c34
 800a404:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a32      	ldr	r2, [pc, #200]	; (800a4d8 <HAL_ADC_ConfigChannel+0x748>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d125      	bne.n	800a45e <HAL_ADC_ConfigChannel+0x6ce>
 800a412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d11f      	bne.n	800a45e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a2e      	ldr	r2, [pc, #184]	; (800a4dc <HAL_ADC_ConfigChannel+0x74c>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d104      	bne.n	800a432 <HAL_ADC_ConfigChannel+0x6a2>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a2c      	ldr	r2, [pc, #176]	; (800a4e0 <HAL_ADC_ConfigChannel+0x750>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d047      	beq.n	800a4c2 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a43a:	d004      	beq.n	800a446 <HAL_ADC_ConfigChannel+0x6b6>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a26      	ldr	r2, [pc, #152]	; (800a4dc <HAL_ADC_ConfigChannel+0x74c>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d101      	bne.n	800a44a <HAL_ADC_ConfigChannel+0x6ba>
 800a446:	4a27      	ldr	r2, [pc, #156]	; (800a4e4 <HAL_ADC_ConfigChannel+0x754>)
 800a448:	e000      	b.n	800a44c <HAL_ADC_ConfigChannel+0x6bc>
 800a44a:	4a27      	ldr	r2, [pc, #156]	; (800a4e8 <HAL_ADC_ConfigChannel+0x758>)
 800a44c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a454:	4619      	mov	r1, r3
 800a456:	4610      	mov	r0, r2
 800a458:	f7fe ff4f 	bl	80092fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a45c:	e031      	b.n	800a4c2 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a22      	ldr	r2, [pc, #136]	; (800a4ec <HAL_ADC_ConfigChannel+0x75c>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d12d      	bne.n	800a4c4 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a46c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d127      	bne.n	800a4c4 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a18      	ldr	r2, [pc, #96]	; (800a4dc <HAL_ADC_ConfigChannel+0x74c>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d022      	beq.n	800a4c4 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a486:	d004      	beq.n	800a492 <HAL_ADC_ConfigChannel+0x702>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a13      	ldr	r2, [pc, #76]	; (800a4dc <HAL_ADC_ConfigChannel+0x74c>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d101      	bne.n	800a496 <HAL_ADC_ConfigChannel+0x706>
 800a492:	4a14      	ldr	r2, [pc, #80]	; (800a4e4 <HAL_ADC_ConfigChannel+0x754>)
 800a494:	e000      	b.n	800a498 <HAL_ADC_ConfigChannel+0x708>
 800a496:	4a14      	ldr	r2, [pc, #80]	; (800a4e8 <HAL_ADC_ConfigChannel+0x758>)
 800a498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a49c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	f7fe ff29 	bl	80092fa <LL_ADC_SetCommonPathInternalCh>
 800a4a8:	e00c      	b.n	800a4c4 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ae:	f043 0220 	orr.w	r2, r3, #32
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a4bc:	e002      	b.n	800a4c4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a4be:	bf00      	nop
 800a4c0:	e000      	b.n	800a4c4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a4c2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a4cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3798      	adds	r7, #152	; 0x98
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	c7520000 	.word	0xc7520000
 800a4dc:	50000100 	.word	0x50000100
 800a4e0:	50000500 	.word	0x50000500
 800a4e4:	50000300 	.word	0x50000300
 800a4e8:	50000700 	.word	0x50000700
 800a4ec:	cb840000 	.word	0xcb840000

0800a4f0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4618      	mov	r0, r3
 800a508:	f7ff f904 	bl	8009714 <LL_ADC_REG_IsConversionOngoing>
 800a50c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff f925 	bl	8009762 <LL_ADC_INJ_IsConversionOngoing>
 800a518:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 8090 	beq.w	800a648 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d02a      	beq.n	800a58c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	7f5b      	ldrb	r3, [r3, #29]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d126      	bne.n	800a58c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7f1b      	ldrb	r3, [r3, #28]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d122      	bne.n	800a58c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a546:	2301      	movs	r3, #1
 800a548:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a54a:	e014      	b.n	800a576 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	4a41      	ldr	r2, [pc, #260]	; (800a654 <ADC_ConversionStop+0x164>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d90d      	bls.n	800a570 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a558:	f043 0210 	orr.w	r2, r3, #16
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a564:	f043 0201 	orr.w	r2, r3, #1
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e06c      	b.n	800a64a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	3301      	adds	r3, #1
 800a574:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a580:	2b40      	cmp	r3, #64	; 0x40
 800a582:	d1e3      	bne.n	800a54c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2240      	movs	r2, #64	; 0x40
 800a58a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d014      	beq.n	800a5bc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff f8bc 	bl	8009714 <LL_ADC_REG_IsConversionOngoing>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00c      	beq.n	800a5bc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff f879 	bl	800969e <LL_ADC_IsDisableOngoing>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d104      	bne.n	800a5bc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff f898 	bl	80096ec <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d014      	beq.n	800a5ec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff f8cb 	bl	8009762 <LL_ADC_INJ_IsConversionOngoing>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00c      	beq.n	800a5ec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff f861 	bl	800969e <LL_ADC_IsDisableOngoing>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d104      	bne.n	800a5ec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7ff f8a7 	bl	800973a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d004      	beq.n	800a5fc <ADC_ConversionStop+0x10c>
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	d105      	bne.n	800a602 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	617b      	str	r3, [r7, #20]
        break;
 800a5fa:	e005      	b.n	800a608 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a5fc:	2308      	movs	r3, #8
 800a5fe:	617b      	str	r3, [r7, #20]
        break;
 800a600:	e002      	b.n	800a608 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a602:	2304      	movs	r3, #4
 800a604:	617b      	str	r3, [r7, #20]
        break;
 800a606:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a608:	f7fe fe36 	bl	8009278 <HAL_GetTick>
 800a60c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a60e:	e014      	b.n	800a63a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a610:	f7fe fe32 	bl	8009278 <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b05      	cmp	r3, #5
 800a61c:	d90d      	bls.n	800a63a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a622:	f043 0210 	orr.w	r2, r3, #16
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a62e:	f043 0201 	orr.w	r2, r3, #1
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e007      	b.n	800a64a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689a      	ldr	r2, [r3, #8]
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	4013      	ands	r3, r2
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1e3      	bne.n	800a610 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	a33fffff 	.word	0xa33fffff

0800a658 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff f807 	bl	8009678 <LL_ADC_IsEnabled>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d146      	bne.n	800a6fe <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	689a      	ldr	r2, [r3, #8]
 800a676:	4b24      	ldr	r3, [pc, #144]	; (800a708 <ADC_Enable+0xb0>)
 800a678:	4013      	ands	r3, r2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00d      	beq.n	800a69a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a682:	f043 0210 	orr.w	r2, r3, #16
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a68e:	f043 0201 	orr.w	r2, r3, #1
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e032      	b.n	800a700 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe ffc2 	bl	8009628 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a6a4:	f7fe fde8 	bl	8009278 <HAL_GetTick>
 800a6a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a6aa:	e021      	b.n	800a6f0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fe ffe1 	bl	8009678 <LL_ADC_IsEnabled>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d104      	bne.n	800a6c6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe ffb1 	bl	8009628 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a6c6:	f7fe fdd7 	bl	8009278 <HAL_GetTick>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d90d      	bls.n	800a6f0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6d8:	f043 0210 	orr.w	r2, r3, #16
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6e4:	f043 0201 	orr.w	r2, r3, #1
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e007      	b.n	800a700 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d1d6      	bne.n	800a6ac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	8000003f 	.word	0x8000003f

0800a70c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fe ffc0 	bl	800969e <LL_ADC_IsDisableOngoing>
 800a71e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe ffa7 	bl	8009678 <LL_ADC_IsEnabled>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d040      	beq.n	800a7b2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d13d      	bne.n	800a7b2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f003 030d 	and.w	r3, r3, #13
 800a740:	2b01      	cmp	r3, #1
 800a742:	d10c      	bne.n	800a75e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe ff81 	bl	8009650 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2203      	movs	r2, #3
 800a754:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a756:	f7fe fd8f 	bl	8009278 <HAL_GetTick>
 800a75a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a75c:	e022      	b.n	800a7a4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a762:	f043 0210 	orr.w	r2, r3, #16
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a76e:	f043 0201 	orr.w	r2, r3, #1
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e01c      	b.n	800a7b4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a77a:	f7fe fd7d 	bl	8009278 <HAL_GetTick>
 800a77e:	4602      	mov	r2, r0
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	2b02      	cmp	r3, #2
 800a786:	d90d      	bls.n	800a7a4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a78c:	f043 0210 	orr.w	r2, r3, #16
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a798:	f043 0201 	orr.w	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e007      	b.n	800a7b4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e3      	bne.n	800a77a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d14b      	bne.n	800a86e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0308 	and.w	r3, r3, #8
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d021      	beq.n	800a834 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fe fe32 	bl	800945e <LL_ADC_REG_IsTriggerSourceSWStart>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d032      	beq.n	800a866 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d12b      	bne.n	800a866 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a81e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d11f      	bne.n	800a866 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a82a:	f043 0201 	orr.w	r2, r3, #1
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	65da      	str	r2, [r3, #92]	; 0x5c
 800a832:	e018      	b.n	800a866 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f003 0302 	and.w	r3, r3, #2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d111      	bne.n	800a866 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d105      	bne.n	800a866 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85e:	f043 0201 	orr.w	r2, r3, #1
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f7fb ffd0 	bl	800680c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a86c:	e00e      	b.n	800a88c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a872:	f003 0310 	and.w	r3, r3, #16
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f7ff fa7d 	bl	8009d7a <HAL_ADC_ErrorCallback>
}
 800a880:	e004      	b.n	800a88c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	4798      	blx	r3
}
 800a88c:	bf00      	nop
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f7ff fa5f 	bl	8009d66 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a8a8:	bf00      	nop
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8bc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8ce:	f043 0204 	orr.w	r2, r3, #4
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f7ff fa4f 	bl	8009d7a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a8dc:	bf00      	nop
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <LL_ADC_IsEnabled>:
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d101      	bne.n	800a8fc <LL_ADC_IsEnabled+0x18>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e000      	b.n	800a8fe <LL_ADC_IsEnabled+0x1a>
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <LL_ADC_REG_IsConversionOngoing>:
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f003 0304 	and.w	r3, r3, #4
 800a91a:	2b04      	cmp	r3, #4
 800a91c:	d101      	bne.n	800a922 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a91e:	2301      	movs	r3, #1
 800a920:	e000      	b.n	800a924 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a930:	b590      	push	{r4, r7, lr}
 800a932:	b0a1      	sub	sp, #132	; 0x84
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a94a:	2302      	movs	r3, #2
 800a94c:	e0e3      	b.n	800ab16 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a95e:	d102      	bne.n	800a966 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a960:	4b6f      	ldr	r3, [pc, #444]	; (800ab20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a962:	60bb      	str	r3, [r7, #8]
 800a964:	e009      	b.n	800a97a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a6e      	ldr	r2, [pc, #440]	; (800ab24 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d102      	bne.n	800a976 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a970:	4b6d      	ldr	r3, [pc, #436]	; (800ab28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a972:	60bb      	str	r3, [r7, #8]
 800a974:	e001      	b.n	800a97a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a976:	2300      	movs	r3, #0
 800a978:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10b      	bne.n	800a998 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a984:	f043 0220 	orr.w	r2, r3, #32
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	e0be      	b.n	800ab16 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7ff ffb5 	bl	800a90a <LL_ADC_REG_IsConversionOngoing>
 800a9a0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff ffaf 	bl	800a90a <LL_ADC_REG_IsConversionOngoing>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f040 80a0 	bne.w	800aaf4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a9b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f040 809c 	bne.w	800aaf4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9c4:	d004      	beq.n	800a9d0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a55      	ldr	r2, [pc, #340]	; (800ab20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d101      	bne.n	800a9d4 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a9d0:	4b56      	ldr	r3, [pc, #344]	; (800ab2c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a9d2:	e000      	b.n	800a9d6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a9d4:	4b56      	ldr	r3, [pc, #344]	; (800ab30 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a9d6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d04b      	beq.n	800aa78 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a9e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	6859      	ldr	r1, [r3, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9f2:	035b      	lsls	r3, r3, #13
 800a9f4:	430b      	orrs	r3, r1
 800a9f6:	431a      	orrs	r2, r3
 800a9f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa04:	d004      	beq.n	800aa10 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a45      	ldr	r2, [pc, #276]	; (800ab20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d10f      	bne.n	800aa30 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800aa10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800aa14:	f7ff ff66 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aa18:	4604      	mov	r4, r0
 800aa1a:	4841      	ldr	r0, [pc, #260]	; (800ab20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800aa1c:	f7ff ff62 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aa20:	4603      	mov	r3, r0
 800aa22:	4323      	orrs	r3, r4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	bf0c      	ite	eq
 800aa28:	2301      	moveq	r3, #1
 800aa2a:	2300      	movne	r3, #0
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	e012      	b.n	800aa56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800aa30:	483c      	ldr	r0, [pc, #240]	; (800ab24 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800aa32:	f7ff ff57 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aa36:	4604      	mov	r4, r0
 800aa38:	483b      	ldr	r0, [pc, #236]	; (800ab28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800aa3a:	f7ff ff53 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	431c      	orrs	r4, r3
 800aa42:	483c      	ldr	r0, [pc, #240]	; (800ab34 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800aa44:	f7ff ff4e 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	4323      	orrs	r3, r4
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bf0c      	ite	eq
 800aa50:	2301      	moveq	r3, #1
 800aa52:	2300      	movne	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d056      	beq.n	800ab08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800aa5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800aa62:	f023 030f 	bic.w	r3, r3, #15
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	6811      	ldr	r1, [r2, #0]
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	6892      	ldr	r2, [r2, #8]
 800aa6e:	430a      	orrs	r2, r1
 800aa70:	431a      	orrs	r2, r3
 800aa72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa74:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800aa76:	e047      	b.n	800ab08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800aa78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aa80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa82:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa8c:	d004      	beq.n	800aa98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a23      	ldr	r2, [pc, #140]	; (800ab20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d10f      	bne.n	800aab8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800aa98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800aa9c:	f7ff ff22 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	481f      	ldr	r0, [pc, #124]	; (800ab20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800aaa4:	f7ff ff1e 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	4323      	orrs	r3, r4
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bf0c      	ite	eq
 800aab0:	2301      	moveq	r3, #1
 800aab2:	2300      	movne	r3, #0
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	e012      	b.n	800aade <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800aab8:	481a      	ldr	r0, [pc, #104]	; (800ab24 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800aaba:	f7ff ff13 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aabe:	4604      	mov	r4, r0
 800aac0:	4819      	ldr	r0, [pc, #100]	; (800ab28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800aac2:	f7ff ff0f 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aac6:	4603      	mov	r3, r0
 800aac8:	431c      	orrs	r4, r3
 800aaca:	481a      	ldr	r0, [pc, #104]	; (800ab34 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800aacc:	f7ff ff0a 	bl	800a8e4 <LL_ADC_IsEnabled>
 800aad0:	4603      	mov	r3, r0
 800aad2:	4323      	orrs	r3, r4
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bf0c      	ite	eq
 800aad8:	2301      	moveq	r3, #1
 800aada:	2300      	movne	r3, #0
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d012      	beq.n	800ab08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800aae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800aaea:	f023 030f 	bic.w	r3, r3, #15
 800aaee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aaf0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800aaf2:	e009      	b.n	800ab08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaf8:	f043 0220 	orr.w	r2, r3, #32
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ab06:	e000      	b.n	800ab0a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800ab08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800ab12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3784      	adds	r7, #132	; 0x84
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd90      	pop	{r4, r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	50000100 	.word	0x50000100
 800ab24:	50000400 	.word	0x50000400
 800ab28:	50000500 	.word	0x50000500
 800ab2c:	50000300 	.word	0x50000300
 800ab30:	50000700 	.word	0x50000700
 800ab34:	50000600 	.word	0x50000600

0800ab38 <LL_EXTI_EnableIT_0_31>:
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ab40:	4b05      	ldr	r3, [pc, #20]	; (800ab58 <LL_EXTI_EnableIT_0_31+0x20>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	4904      	ldr	r1, [pc, #16]	; (800ab58 <LL_EXTI_EnableIT_0_31+0x20>)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	600b      	str	r3, [r1, #0]
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	40010400 	.word	0x40010400

0800ab5c <LL_EXTI_EnableIT_32_63>:
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <LL_EXTI_EnableIT_32_63+0x20>)
 800ab66:	6a1a      	ldr	r2, [r3, #32]
 800ab68:	4904      	ldr	r1, [pc, #16]	; (800ab7c <LL_EXTI_EnableIT_32_63+0x20>)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	620b      	str	r3, [r1, #32]
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	40010400 	.word	0x40010400

0800ab80 <LL_EXTI_DisableIT_0_31>:
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800ab88:	4b06      	ldr	r3, [pc, #24]	; (800aba4 <LL_EXTI_DisableIT_0_31+0x24>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	43db      	mvns	r3, r3
 800ab90:	4904      	ldr	r1, [pc, #16]	; (800aba4 <LL_EXTI_DisableIT_0_31+0x24>)
 800ab92:	4013      	ands	r3, r2
 800ab94:	600b      	str	r3, [r1, #0]
}
 800ab96:	bf00      	nop
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	40010400 	.word	0x40010400

0800aba8 <LL_EXTI_DisableIT_32_63>:
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800abb0:	4b06      	ldr	r3, [pc, #24]	; (800abcc <LL_EXTI_DisableIT_32_63+0x24>)
 800abb2:	6a1a      	ldr	r2, [r3, #32]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	43db      	mvns	r3, r3
 800abb8:	4904      	ldr	r1, [pc, #16]	; (800abcc <LL_EXTI_DisableIT_32_63+0x24>)
 800abba:	4013      	ands	r3, r2
 800abbc:	620b      	str	r3, [r1, #32]
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	40010400 	.word	0x40010400

0800abd0 <LL_EXTI_EnableEvent_0_31>:
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800abd8:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	4904      	ldr	r1, [pc, #16]	; (800abf0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	604b      	str	r3, [r1, #4]
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	40010400 	.word	0x40010400

0800abf4 <LL_EXTI_EnableEvent_32_63>:
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <LL_EXTI_EnableEvent_32_63+0x20>)
 800abfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac00:	4904      	ldr	r1, [pc, #16]	; (800ac14 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	40010400 	.word	0x40010400

0800ac18 <LL_EXTI_DisableEvent_0_31>:
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ac20:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <LL_EXTI_DisableEvent_0_31+0x24>)
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	43db      	mvns	r3, r3
 800ac28:	4904      	ldr	r1, [pc, #16]	; (800ac3c <LL_EXTI_DisableEvent_0_31+0x24>)
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	604b      	str	r3, [r1, #4]
}
 800ac2e:	bf00      	nop
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40010400 	.word	0x40010400

0800ac40 <LL_EXTI_DisableEvent_32_63>:
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800ac48:	4b06      	ldr	r3, [pc, #24]	; (800ac64 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ac4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	43db      	mvns	r3, r3
 800ac50:	4904      	ldr	r1, [pc, #16]	; (800ac64 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ac52:	4013      	ands	r3, r2
 800ac54:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ac56:	bf00      	nop
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	40010400 	.word	0x40010400

0800ac68 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800ac70:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ac72:	689a      	ldr	r2, [r3, #8]
 800ac74:	4904      	ldr	r1, [pc, #16]	; (800ac88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	608b      	str	r3, [r1, #8]
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	40010400 	.word	0x40010400

0800ac8c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ac96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac98:	4904      	ldr	r1, [pc, #16]	; (800acac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	628b      	str	r3, [r1, #40]	; 0x28
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	40010400 	.word	0x40010400

0800acb0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800acb8:	4b06      	ldr	r3, [pc, #24]	; (800acd4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800acba:	689a      	ldr	r2, [r3, #8]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	43db      	mvns	r3, r3
 800acc0:	4904      	ldr	r1, [pc, #16]	; (800acd4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800acc2:	4013      	ands	r3, r2
 800acc4:	608b      	str	r3, [r1, #8]
}
 800acc6:	bf00      	nop
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	40010400 	.word	0x40010400

0800acd8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800ace0:	4b06      	ldr	r3, [pc, #24]	; (800acfc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ace2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	43db      	mvns	r3, r3
 800ace8:	4904      	ldr	r1, [pc, #16]	; (800acfc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800acea:	4013      	ands	r3, r2
 800acec:	628b      	str	r3, [r1, #40]	; 0x28
}
 800acee:	bf00      	nop
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	40010400 	.word	0x40010400

0800ad00 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ad0a:	68da      	ldr	r2, [r3, #12]
 800ad0c:	4904      	ldr	r1, [pc, #16]	; (800ad20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60cb      	str	r3, [r1, #12]
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	40010400 	.word	0x40010400

0800ad24 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ad2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad30:	4904      	ldr	r1, [pc, #16]	; (800ad44 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	40010400 	.word	0x40010400

0800ad48 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800ad50:	4b06      	ldr	r3, [pc, #24]	; (800ad6c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ad52:	68da      	ldr	r2, [r3, #12]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	43db      	mvns	r3, r3
 800ad58:	4904      	ldr	r1, [pc, #16]	; (800ad6c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	60cb      	str	r3, [r1, #12]
}
 800ad5e:	bf00      	nop
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	40010400 	.word	0x40010400

0800ad70 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ad78:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ad7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	43db      	mvns	r3, r3
 800ad80:	4904      	ldr	r1, [pc, #16]	; (800ad94 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ad82:	4013      	ands	r3, r2
 800ad84:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	40010400 	.word	0x40010400

0800ad98 <LL_EXTI_IsActiveFlag_0_31>:
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800ada0:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800ada2:	695a      	ldr	r2, [r3, #20]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4013      	ands	r3, r2
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d101      	bne.n	800adb2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800adae:	2301      	movs	r3, #1
 800adb0:	e000      	b.n	800adb4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	40010400 	.word	0x40010400

0800adc4 <LL_EXTI_IsActiveFlag_32_63>:
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800adcc:	4b07      	ldr	r3, [pc, #28]	; (800adec <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800adce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4013      	ands	r3, r2
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	429a      	cmp	r2, r3
 800add8:	d101      	bne.n	800adde <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800adda:	2301      	movs	r3, #1
 800addc:	e000      	b.n	800ade0 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	40010400 	.word	0x40010400

0800adf0 <LL_EXTI_ClearFlag_0_31>:
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800adf8:	4a04      	ldr	r2, [pc, #16]	; (800ae0c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6153      	str	r3, [r2, #20]
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	40010400 	.word	0x40010400

0800ae10 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800ae18:	4a04      	ldr	r2, [pc, #16]	; (800ae2c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800ae1e:	bf00      	nop
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	40010400 	.word	0x40010400

0800ae30 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d102      	bne.n	800ae4c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	77fb      	strb	r3, [r7, #31]
 800ae4a:	e180      	b.n	800b14e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae5a:	d102      	bne.n	800ae62 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	77fb      	strb	r3, [r7, #31]
 800ae60:	e175      	b.n	800b14e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	7f5b      	ldrb	r3, [r3, #29]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d108      	bne.n	800ae7e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7fc fc8b 	bl	8007794 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae88:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800aea4:	4313      	orrs	r3, r2
 800aea6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	4b98      	ldr	r3, [pc, #608]	; (800b110 <HAL_COMP_Init+0x2e0>)
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	6812      	ldr	r2, [r2, #0]
 800aeb6:	6979      	ldr	r1, [r7, #20]
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d015      	beq.n	800aef6 <HAL_COMP_Init+0xc6>
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d112      	bne.n	800aef6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800aed0:	4b90      	ldr	r3, [pc, #576]	; (800b114 <HAL_COMP_Init+0x2e4>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	099b      	lsrs	r3, r3, #6
 800aed6:	4a90      	ldr	r2, [pc, #576]	; (800b118 <HAL_COMP_Init+0x2e8>)
 800aed8:	fba2 2303 	umull	r2, r3, r2, r3
 800aedc:	099a      	lsrs	r2, r3, #6
 800aede:	4613      	mov	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800aee8:	e002      	b.n	800aef0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1f9      	bne.n	800aeea <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a88      	ldr	r2, [pc, #544]	; (800b11c <HAL_COMP_Init+0x2ec>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d028      	beq.n	800af52 <HAL_COMP_Init+0x122>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a86      	ldr	r2, [pc, #536]	; (800b120 <HAL_COMP_Init+0x2f0>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d020      	beq.n	800af4c <HAL_COMP_Init+0x11c>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a85      	ldr	r2, [pc, #532]	; (800b124 <HAL_COMP_Init+0x2f4>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d018      	beq.n	800af46 <HAL_COMP_Init+0x116>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a83      	ldr	r2, [pc, #524]	; (800b128 <HAL_COMP_Init+0x2f8>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d010      	beq.n	800af40 <HAL_COMP_Init+0x110>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a82      	ldr	r2, [pc, #520]	; (800b12c <HAL_COMP_Init+0x2fc>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d008      	beq.n	800af3a <HAL_COMP_Init+0x10a>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a80      	ldr	r2, [pc, #512]	; (800b130 <HAL_COMP_Init+0x300>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d101      	bne.n	800af36 <HAL_COMP_Init+0x106>
 800af32:	2301      	movs	r3, #1
 800af34:	e00f      	b.n	800af56 <HAL_COMP_Init+0x126>
 800af36:	2302      	movs	r3, #2
 800af38:	e00d      	b.n	800af56 <HAL_COMP_Init+0x126>
 800af3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af3e:	e00a      	b.n	800af56 <HAL_COMP_Init+0x126>
 800af40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af44:	e007      	b.n	800af56 <HAL_COMP_Init+0x126>
 800af46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800af4a:	e004      	b.n	800af56 <HAL_COMP_Init+0x126>
 800af4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af50:	e001      	b.n	800af56 <HAL_COMP_Init+0x126>
 800af52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af56:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	f003 0303 	and.w	r3, r3, #3
 800af60:	2b00      	cmp	r3, #0
 800af62:	f000 80b6 	beq.w	800b0d2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	f003 0310 	and.w	r3, r3, #16
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d011      	beq.n	800af96 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a6e      	ldr	r2, [pc, #440]	; (800b130 <HAL_COMP_Init+0x300>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d004      	beq.n	800af86 <HAL_COMP_Init+0x156>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a6c      	ldr	r2, [pc, #432]	; (800b134 <HAL_COMP_Init+0x304>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d103      	bne.n	800af8e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800af86:	6938      	ldr	r0, [r7, #16]
 800af88:	f7ff fe80 	bl	800ac8c <LL_EXTI_EnableRisingTrig_32_63>
 800af8c:	e014      	b.n	800afb8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800af8e:	6938      	ldr	r0, [r7, #16]
 800af90:	f7ff fe6a 	bl	800ac68 <LL_EXTI_EnableRisingTrig_0_31>
 800af94:	e010      	b.n	800afb8 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a65      	ldr	r2, [pc, #404]	; (800b130 <HAL_COMP_Init+0x300>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d004      	beq.n	800afaa <HAL_COMP_Init+0x17a>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a63      	ldr	r2, [pc, #396]	; (800b134 <HAL_COMP_Init+0x304>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d103      	bne.n	800afb2 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800afaa:	6938      	ldr	r0, [r7, #16]
 800afac:	f7ff fe94 	bl	800acd8 <LL_EXTI_DisableRisingTrig_32_63>
 800afb0:	e002      	b.n	800afb8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800afb2:	6938      	ldr	r0, [r7, #16]
 800afb4:	f7ff fe7c 	bl	800acb0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	f003 0320 	and.w	r3, r3, #32
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d011      	beq.n	800afe8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a59      	ldr	r2, [pc, #356]	; (800b130 <HAL_COMP_Init+0x300>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d004      	beq.n	800afd8 <HAL_COMP_Init+0x1a8>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a58      	ldr	r2, [pc, #352]	; (800b134 <HAL_COMP_Init+0x304>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d103      	bne.n	800afe0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800afd8:	6938      	ldr	r0, [r7, #16]
 800afda:	f7ff fea3 	bl	800ad24 <LL_EXTI_EnableFallingTrig_32_63>
 800afde:	e014      	b.n	800b00a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800afe0:	6938      	ldr	r0, [r7, #16]
 800afe2:	f7ff fe8d 	bl	800ad00 <LL_EXTI_EnableFallingTrig_0_31>
 800afe6:	e010      	b.n	800b00a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a50      	ldr	r2, [pc, #320]	; (800b130 <HAL_COMP_Init+0x300>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d004      	beq.n	800affc <HAL_COMP_Init+0x1cc>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a4f      	ldr	r2, [pc, #316]	; (800b134 <HAL_COMP_Init+0x304>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d103      	bne.n	800b004 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800affc:	6938      	ldr	r0, [r7, #16]
 800affe:	f7ff feb7 	bl	800ad70 <LL_EXTI_DisableFallingTrig_32_63>
 800b002:	e002      	b.n	800b00a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800b004:	6938      	ldr	r0, [r7, #16]
 800b006:	f7ff fe9f 	bl	800ad48 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a48      	ldr	r2, [pc, #288]	; (800b130 <HAL_COMP_Init+0x300>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d004      	beq.n	800b01e <HAL_COMP_Init+0x1ee>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a46      	ldr	r2, [pc, #280]	; (800b134 <HAL_COMP_Init+0x304>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d103      	bne.n	800b026 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800b01e:	6938      	ldr	r0, [r7, #16]
 800b020:	f7ff fef6 	bl	800ae10 <LL_EXTI_ClearFlag_32_63>
 800b024:	e002      	b.n	800b02c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800b026:	6938      	ldr	r0, [r7, #16]
 800b028:	f7ff fee2 	bl	800adf0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	f003 0302 	and.w	r3, r3, #2
 800b034:	2b00      	cmp	r3, #0
 800b036:	d011      	beq.n	800b05c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a3c      	ldr	r2, [pc, #240]	; (800b130 <HAL_COMP_Init+0x300>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d004      	beq.n	800b04c <HAL_COMP_Init+0x21c>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a3b      	ldr	r2, [pc, #236]	; (800b134 <HAL_COMP_Init+0x304>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d103      	bne.n	800b054 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800b04c:	6938      	ldr	r0, [r7, #16]
 800b04e:	f7ff fdd1 	bl	800abf4 <LL_EXTI_EnableEvent_32_63>
 800b052:	e014      	b.n	800b07e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800b054:	6938      	ldr	r0, [r7, #16]
 800b056:	f7ff fdbb 	bl	800abd0 <LL_EXTI_EnableEvent_0_31>
 800b05a:	e010      	b.n	800b07e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a33      	ldr	r2, [pc, #204]	; (800b130 <HAL_COMP_Init+0x300>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d004      	beq.n	800b070 <HAL_COMP_Init+0x240>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a32      	ldr	r2, [pc, #200]	; (800b134 <HAL_COMP_Init+0x304>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d103      	bne.n	800b078 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800b070:	6938      	ldr	r0, [r7, #16]
 800b072:	f7ff fde5 	bl	800ac40 <LL_EXTI_DisableEvent_32_63>
 800b076:	e002      	b.n	800b07e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800b078:	6938      	ldr	r0, [r7, #16]
 800b07a:	f7ff fdcd 	bl	800ac18 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b00      	cmp	r3, #0
 800b088:	d011      	beq.n	800b0ae <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a28      	ldr	r2, [pc, #160]	; (800b130 <HAL_COMP_Init+0x300>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d004      	beq.n	800b09e <HAL_COMP_Init+0x26e>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a26      	ldr	r2, [pc, #152]	; (800b134 <HAL_COMP_Init+0x304>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d103      	bne.n	800b0a6 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800b09e:	6938      	ldr	r0, [r7, #16]
 800b0a0:	f7ff fd5c 	bl	800ab5c <LL_EXTI_EnableIT_32_63>
 800b0a4:	e04b      	b.n	800b13e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800b0a6:	6938      	ldr	r0, [r7, #16]
 800b0a8:	f7ff fd46 	bl	800ab38 <LL_EXTI_EnableIT_0_31>
 800b0ac:	e047      	b.n	800b13e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a1f      	ldr	r2, [pc, #124]	; (800b130 <HAL_COMP_Init+0x300>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d004      	beq.n	800b0c2 <HAL_COMP_Init+0x292>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a1d      	ldr	r2, [pc, #116]	; (800b134 <HAL_COMP_Init+0x304>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d103      	bne.n	800b0ca <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800b0c2:	6938      	ldr	r0, [r7, #16]
 800b0c4:	f7ff fd70 	bl	800aba8 <LL_EXTI_DisableIT_32_63>
 800b0c8:	e039      	b.n	800b13e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800b0ca:	6938      	ldr	r0, [r7, #16]
 800b0cc:	f7ff fd58 	bl	800ab80 <LL_EXTI_DisableIT_0_31>
 800b0d0:	e035      	b.n	800b13e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a16      	ldr	r2, [pc, #88]	; (800b130 <HAL_COMP_Init+0x300>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d004      	beq.n	800b0e6 <HAL_COMP_Init+0x2b6>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a14      	ldr	r2, [pc, #80]	; (800b134 <HAL_COMP_Init+0x304>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d103      	bne.n	800b0ee <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800b0e6:	6938      	ldr	r0, [r7, #16]
 800b0e8:	f7ff fdaa 	bl	800ac40 <LL_EXTI_DisableEvent_32_63>
 800b0ec:	e002      	b.n	800b0f4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800b0ee:	6938      	ldr	r0, [r7, #16]
 800b0f0:	f7ff fd92 	bl	800ac18 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a0d      	ldr	r2, [pc, #52]	; (800b130 <HAL_COMP_Init+0x300>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d004      	beq.n	800b108 <HAL_COMP_Init+0x2d8>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a0c      	ldr	r2, [pc, #48]	; (800b134 <HAL_COMP_Init+0x304>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d117      	bne.n	800b138 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800b108:	6938      	ldr	r0, [r7, #16]
 800b10a:	f7ff fd4d 	bl	800aba8 <LL_EXTI_DisableIT_32_63>
 800b10e:	e016      	b.n	800b13e <HAL_COMP_Init+0x30e>
 800b110:	ff007e0f 	.word	0xff007e0f
 800b114:	20000c34 	.word	0x20000c34
 800b118:	053e2d63 	.word	0x053e2d63
 800b11c:	40010200 	.word	0x40010200
 800b120:	40010204 	.word	0x40010204
 800b124:	40010208 	.word	0x40010208
 800b128:	4001020c 	.word	0x4001020c
 800b12c:	40010210 	.word	0x40010210
 800b130:	40010214 	.word	0x40010214
 800b134:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800b138:	6938      	ldr	r0, [r7, #16]
 800b13a:	f7ff fd21 	bl	800ab80 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	7f5b      	ldrb	r3, [r3, #29]
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	d102      	bne.n	800b14e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800b14e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3720      	adds	r7, #32
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d102      	bne.n	800b170 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	73fb      	strb	r3, [r7, #15]
 800b16e:	e01d      	b.n	800b1ac <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b17a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b17e:	d102      	bne.n	800b186 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	73fb      	strb	r3, [r7, #15]
 800b184:	e012      	b.n	800b1ac <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7f5b      	ldrb	r3, [r3, #29]
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00b      	beq.n	800b1a8 <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f022 0201 	bic.w	r2, r2, #1
 800b19e:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	775a      	strb	r2, [r3, #29]
 800b1a6:	e001      	b.n	800b1ac <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
	...

0800b1bc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a2f      	ldr	r2, [pc, #188]	; (800b288 <HAL_COMP_IRQHandler+0xcc>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d028      	beq.n	800b220 <HAL_COMP_IRQHandler+0x64>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a2e      	ldr	r2, [pc, #184]	; (800b28c <HAL_COMP_IRQHandler+0xd0>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d020      	beq.n	800b21a <HAL_COMP_IRQHandler+0x5e>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a2c      	ldr	r2, [pc, #176]	; (800b290 <HAL_COMP_IRQHandler+0xd4>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d018      	beq.n	800b214 <HAL_COMP_IRQHandler+0x58>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a2b      	ldr	r2, [pc, #172]	; (800b294 <HAL_COMP_IRQHandler+0xd8>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d010      	beq.n	800b20e <HAL_COMP_IRQHandler+0x52>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a29      	ldr	r2, [pc, #164]	; (800b298 <HAL_COMP_IRQHandler+0xdc>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d008      	beq.n	800b208 <HAL_COMP_IRQHandler+0x4c>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a28      	ldr	r2, [pc, #160]	; (800b29c <HAL_COMP_IRQHandler+0xe0>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d101      	bne.n	800b204 <HAL_COMP_IRQHandler+0x48>
 800b200:	2301      	movs	r3, #1
 800b202:	e00f      	b.n	800b224 <HAL_COMP_IRQHandler+0x68>
 800b204:	2302      	movs	r3, #2
 800b206:	e00d      	b.n	800b224 <HAL_COMP_IRQHandler+0x68>
 800b208:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b20c:	e00a      	b.n	800b224 <HAL_COMP_IRQHandler+0x68>
 800b20e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b212:	e007      	b.n	800b224 <HAL_COMP_IRQHandler+0x68>
 800b214:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b218:	e004      	b.n	800b224 <HAL_COMP_IRQHandler+0x68>
 800b21a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b21e:	e001      	b.n	800b224 <HAL_COMP_IRQHandler+0x68>
 800b220:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b224:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a1b      	ldr	r2, [pc, #108]	; (800b29c <HAL_COMP_IRQHandler+0xe0>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d004      	beq.n	800b23e <HAL_COMP_IRQHandler+0x82>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a19      	ldr	r2, [pc, #100]	; (800b2a0 <HAL_COMP_IRQHandler+0xe4>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d108      	bne.n	800b250 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800b23e:	68b8      	ldr	r0, [r7, #8]
 800b240:	f7ff fdc0 	bl	800adc4 <LL_EXTI_IsActiveFlag_32_63>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800b24a:	2302      	movs	r3, #2
 800b24c:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800b24e:	e007      	b.n	800b260 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800b250:	68b8      	ldr	r0, [r7, #8]
 800b252:	f7ff fda1 	bl	800ad98 <LL_EXTI_IsActiveFlag_0_31>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800b25c:	2301      	movs	r3, #1
 800b25e:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00c      	beq.n	800b280 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d103      	bne.n	800b274 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800b26c:	68b8      	ldr	r0, [r7, #8]
 800b26e:	f7ff fdcf 	bl	800ae10 <LL_EXTI_ClearFlag_32_63>
 800b272:	e002      	b.n	800b27a <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800b274:	68b8      	ldr	r0, [r7, #8]
 800b276:	f7ff fdbb 	bl	800adf0 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7fb faac 	bl	80067d8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	40010200 	.word	0x40010200
 800b28c:	40010204 	.word	0x40010204
 800b290:	40010208 	.word	0x40010208
 800b294:	4001020c 	.word	0x4001020c
 800b298:	40010210 	.word	0x40010210
 800b29c:	40010214 	.word	0x40010214
 800b2a0:	40010218 	.word	0x40010218

0800b2a4 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	0f9b      	lsrs	r3, r3, #30
 800b2b4:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <__NVIC_SetPriorityGrouping>:
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b2d4:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <__NVIC_SetPriorityGrouping+0x44>)
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b2ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b2f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b2f6:	4a04      	ldr	r2, [pc, #16]	; (800b308 <__NVIC_SetPriorityGrouping+0x44>)
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	60d3      	str	r3, [r2, #12]
}
 800b2fc:	bf00      	nop
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	e000ed00 	.word	0xe000ed00

0800b30c <__NVIC_GetPriorityGrouping>:
{
 800b30c:	b480      	push	{r7}
 800b30e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b310:	4b04      	ldr	r3, [pc, #16]	; (800b324 <__NVIC_GetPriorityGrouping+0x18>)
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	0a1b      	lsrs	r3, r3, #8
 800b316:	f003 0307 	and.w	r3, r3, #7
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	e000ed00 	.word	0xe000ed00

0800b328 <__NVIC_EnableIRQ>:
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b336:	2b00      	cmp	r3, #0
 800b338:	db0b      	blt.n	800b352 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b33a:	79fb      	ldrb	r3, [r7, #7]
 800b33c:	f003 021f 	and.w	r2, r3, #31
 800b340:	4907      	ldr	r1, [pc, #28]	; (800b360 <__NVIC_EnableIRQ+0x38>)
 800b342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b346:	095b      	lsrs	r3, r3, #5
 800b348:	2001      	movs	r0, #1
 800b34a:	fa00 f202 	lsl.w	r2, r0, r2
 800b34e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b352:	bf00      	nop
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	e000e100 	.word	0xe000e100

0800b364 <__NVIC_DisableIRQ>:
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b36e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b372:	2b00      	cmp	r3, #0
 800b374:	db10      	blt.n	800b398 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	f003 021f 	and.w	r2, r3, #31
 800b37c:	4909      	ldr	r1, [pc, #36]	; (800b3a4 <__NVIC_DisableIRQ+0x40>)
 800b37e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b382:	095b      	lsrs	r3, r3, #5
 800b384:	2001      	movs	r0, #1
 800b386:	fa00 f202 	lsl.w	r2, r0, r2
 800b38a:	3320      	adds	r3, #32
 800b38c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b390:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b394:	f3bf 8f6f 	isb	sy
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr
 800b3a4:	e000e100 	.word	0xe000e100

0800b3a8 <__NVIC_SetPriority>:
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	6039      	str	r1, [r7, #0]
 800b3b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	db0a      	blt.n	800b3d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	490c      	ldr	r1, [pc, #48]	; (800b3f4 <__NVIC_SetPriority+0x4c>)
 800b3c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3c6:	0112      	lsls	r2, r2, #4
 800b3c8:	b2d2      	uxtb	r2, r2
 800b3ca:	440b      	add	r3, r1
 800b3cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b3d0:	e00a      	b.n	800b3e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	4908      	ldr	r1, [pc, #32]	; (800b3f8 <__NVIC_SetPriority+0x50>)
 800b3d8:	79fb      	ldrb	r3, [r7, #7]
 800b3da:	f003 030f 	and.w	r3, r3, #15
 800b3de:	3b04      	subs	r3, #4
 800b3e0:	0112      	lsls	r2, r2, #4
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	440b      	add	r3, r1
 800b3e6:	761a      	strb	r2, [r3, #24]
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	e000e100 	.word	0xe000e100
 800b3f8:	e000ed00 	.word	0xe000ed00

0800b3fc <NVIC_EncodePriority>:
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b089      	sub	sp, #36	; 0x24
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f003 0307 	and.w	r3, r3, #7
 800b40e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	f1c3 0307 	rsb	r3, r3, #7
 800b416:	2b04      	cmp	r3, #4
 800b418:	bf28      	it	cs
 800b41a:	2304      	movcs	r3, #4
 800b41c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	3304      	adds	r3, #4
 800b422:	2b06      	cmp	r3, #6
 800b424:	d902      	bls.n	800b42c <NVIC_EncodePriority+0x30>
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	3b03      	subs	r3, #3
 800b42a:	e000      	b.n	800b42e <NVIC_EncodePriority+0x32>
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	fa02 f303 	lsl.w	r3, r2, r3
 800b43a:	43da      	mvns	r2, r3
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	401a      	ands	r2, r3
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b444:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	fa01 f303 	lsl.w	r3, r1, r3
 800b44e:	43d9      	mvns	r1, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b454:	4313      	orrs	r3, r2
}
 800b456:	4618      	mov	r0, r3
 800b458:	3724      	adds	r7, #36	; 0x24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
	...

0800b464 <SysTick_Config>:
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3b01      	subs	r3, #1
 800b470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b474:	d301      	bcc.n	800b47a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b476:	2301      	movs	r3, #1
 800b478:	e00f      	b.n	800b49a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b47a:	4a0a      	ldr	r2, [pc, #40]	; (800b4a4 <SysTick_Config+0x40>)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	3b01      	subs	r3, #1
 800b480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b482:	210f      	movs	r1, #15
 800b484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b488:	f7ff ff8e 	bl	800b3a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <SysTick_Config+0x40>)
 800b48e:	2200      	movs	r2, #0
 800b490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b492:	4b04      	ldr	r3, [pc, #16]	; (800b4a4 <SysTick_Config+0x40>)
 800b494:	2207      	movs	r2, #7
 800b496:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	e000e010 	.word	0xe000e010

0800b4a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff ff07 	bl	800b2c4 <__NVIC_SetPriorityGrouping>
}
 800b4b6:	bf00      	nop
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b086      	sub	sp, #24
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	60b9      	str	r1, [r7, #8]
 800b4c8:	607a      	str	r2, [r7, #4]
 800b4ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b4cc:	f7ff ff1e 	bl	800b30c <__NVIC_GetPriorityGrouping>
 800b4d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	68b9      	ldr	r1, [r7, #8]
 800b4d6:	6978      	ldr	r0, [r7, #20]
 800b4d8:	f7ff ff90 	bl	800b3fc <NVIC_EncodePriority>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7ff ff5f 	bl	800b3a8 <__NVIC_SetPriority>
}
 800b4ea:	bf00      	nop
 800b4ec:	3718      	adds	r7, #24
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b082      	sub	sp, #8
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b4fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff ff11 	bl	800b328 <__NVIC_EnableIRQ>
}
 800b506:	bf00      	nop
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b082      	sub	sp, #8
 800b512:	af00      	add	r7, sp, #0
 800b514:	4603      	mov	r3, r0
 800b516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7ff ff21 	bl	800b364 <__NVIC_DisableIRQ>
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b082      	sub	sp, #8
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7ff ff96 	bl	800b464 <SysTick_Config>
 800b538:	4603      	mov	r3, r0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d101      	bne.n	800b554 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	e014      	b.n	800b57e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	791b      	ldrb	r3, [r3, #4]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d105      	bne.n	800b56a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7fc f9d3 	bl	8007910 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2202      	movs	r2, #2
 800b56e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b082      	sub	sp, #8
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	795b      	ldrb	r3, [r3, #5]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <HAL_DAC_Start+0x16>
 800b598:	2302      	movs	r3, #2
 800b59a:	e043      	b.n	800b624 <HAL_DAC_Start+0x9e>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6819      	ldr	r1, [r3, #0]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	f003 0310 	and.w	r3, r3, #16
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	409a      	lsls	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	f7fd fe65 	bl	8009290 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10f      	bne.n	800b5ec <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d11d      	bne.n	800b616 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f042 0201 	orr.w	r2, r2, #1
 800b5e8:	605a      	str	r2, [r3, #4]
 800b5ea:	e014      	b.n	800b616 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	f003 0310 	and.w	r3, r3, #16
 800b5fc:	2102      	movs	r1, #2
 800b5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800b602:	429a      	cmp	r2, r3
 800b604:	d107      	bne.n	800b616 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f042 0202 	orr.w	r2, r2, #2
 800b614:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
 800b638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800b63a:	2300      	movs	r3, #0
 800b63c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	795b      	ldrb	r3, [r3, #5]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d101      	bne.n	800b64a <HAL_DAC_Start_DMA+0x1e>
 800b646:	2302      	movs	r3, #2
 800b648:	e0a1      	b.n	800b78e <HAL_DAC_Start_DMA+0x162>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2201      	movs	r2, #1
 800b64e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2202      	movs	r2, #2
 800b654:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d12a      	bne.n	800b6b2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	4a4d      	ldr	r2, [pc, #308]	; (800b798 <HAL_DAC_Start_DMA+0x16c>)
 800b662:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	4a4c      	ldr	r2, [pc, #304]	; (800b79c <HAL_DAC_Start_DMA+0x170>)
 800b66a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	4a4b      	ldr	r2, [pc, #300]	; (800b7a0 <HAL_DAC_Start_DMA+0x174>)
 800b672:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b682:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	2b04      	cmp	r3, #4
 800b688:	d009      	beq.n	800b69e <HAL_DAC_Start_DMA+0x72>
 800b68a:	2b08      	cmp	r3, #8
 800b68c:	d00c      	beq.n	800b6a8 <HAL_DAC_Start_DMA+0x7c>
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d000      	beq.n	800b694 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800b692:	e039      	b.n	800b708 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3308      	adds	r3, #8
 800b69a:	613b      	str	r3, [r7, #16]
        break;
 800b69c:	e034      	b.n	800b708 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	330c      	adds	r3, #12
 800b6a4:	613b      	str	r3, [r7, #16]
        break;
 800b6a6:	e02f      	b.n	800b708 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3310      	adds	r3, #16
 800b6ae:	613b      	str	r3, [r7, #16]
        break;
 800b6b0:	e02a      	b.n	800b708 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	4a3b      	ldr	r2, [pc, #236]	; (800b7a4 <HAL_DAC_Start_DMA+0x178>)
 800b6b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	4a3a      	ldr	r2, [pc, #232]	; (800b7a8 <HAL_DAC_Start_DMA+0x17c>)
 800b6c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	4a39      	ldr	r2, [pc, #228]	; (800b7ac <HAL_DAC_Start_DMA+0x180>)
 800b6c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b6d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	2b04      	cmp	r3, #4
 800b6de:	d009      	beq.n	800b6f4 <HAL_DAC_Start_DMA+0xc8>
 800b6e0:	2b08      	cmp	r3, #8
 800b6e2:	d00c      	beq.n	800b6fe <HAL_DAC_Start_DMA+0xd2>
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d000      	beq.n	800b6ea <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800b6e8:	e00e      	b.n	800b708 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3314      	adds	r3, #20
 800b6f0:	613b      	str	r3, [r7, #16]
        break;
 800b6f2:	e009      	b.n	800b708 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3318      	adds	r3, #24
 800b6fa:	613b      	str	r3, [r7, #16]
        break;
 800b6fc:	e004      	b.n	800b708 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	331c      	adds	r3, #28
 800b704:	613b      	str	r3, [r7, #16]
        break;
 800b706:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d111      	bne.n	800b732 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b71c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6898      	ldr	r0, [r3, #8]
 800b722:	6879      	ldr	r1, [r7, #4]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	f000 fbd2 	bl	800bed0 <HAL_DMA_Start_IT>
 800b72c:	4603      	mov	r3, r0
 800b72e:	75fb      	strb	r3, [r7, #23]
 800b730:	e010      	b.n	800b754 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b740:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	68d8      	ldr	r0, [r3, #12]
 800b746:	6879      	ldr	r1, [r7, #4]
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	f000 fbc0 	bl	800bed0 <HAL_DMA_Start_IT>
 800b750:	4603      	mov	r3, r0
 800b752:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10f      	bne.n	800b780 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6819      	ldr	r1, [r3, #0]
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	f003 0310 	and.w	r3, r3, #16
 800b76c:	2201      	movs	r2, #1
 800b76e:	409a      	lsls	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	430a      	orrs	r2, r1
 800b776:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b778:	2001      	movs	r0, #1
 800b77a:	f7fd fd89 	bl	8009290 <HAL_Delay>
 800b77e:	e005      	b.n	800b78c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	f043 0204 	orr.w	r2, r3, #4
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3718      	adds	r7, #24
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	0800bc6d 	.word	0x0800bc6d
 800b79c:	0800bc8f 	.word	0x0800bc8f
 800b7a0:	0800bcab 	.word	0x0800bcab
 800b7a4:	0800bd15 	.word	0x0800bd15
 800b7a8:	0800bd37 	.word	0x0800bd37
 800b7ac:	0800bd53 	.word	0x0800bd53

0800b7b0 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6819      	ldr	r1, [r3, #0]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	f003 0310 	and.w	r3, r3, #16
 800b7c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ce:	43da      	mvns	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	400a      	ands	r2, r1
 800b7d6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6819      	ldr	r1, [r3, #0]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	f003 0310 	and.w	r3, r3, #16
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ea:	43da      	mvns	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	400a      	ands	r2, r1
 800b7f2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	f7fd fd4b 	bl	8009290 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10f      	bne.n	800b820 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	4618      	mov	r0, r3
 800b806:	f000 fbde 	bl	800bfc6 <HAL_DMA_Abort>
 800b80a:	4603      	mov	r3, r0
 800b80c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	e00e      	b.n	800b83e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	4618      	mov	r0, r3
 800b826:	f000 fbce 	bl	800bfc6 <HAL_DMA_Abort>
 800b82a:	4603      	mov	r3, r0
 800b82c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b83c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b83e:	7bfb      	ldrb	r3, [r7, #15]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d003      	beq.n	800b84c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2204      	movs	r2, #4
 800b848:	711a      	strb	r2, [r3, #4]
 800b84a:	e002      	b.n	800b852 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b087      	sub	sp, #28
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d105      	bne.n	800b88c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4413      	add	r3, r2
 800b886:	3308      	adds	r3, #8
 800b888:	617b      	str	r3, [r7, #20]
 800b88a:	e004      	b.n	800b896 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4413      	add	r3, r2
 800b892:	3314      	adds	r3, #20
 800b894:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	461a      	mov	r2, r3
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	371c      	adds	r7, #28
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d103      	bne.n	800b900 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fe:	e002      	b.n	800b906 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b906:	4618      	mov	r0, r3
 800b908:	370c      	adds	r7, #12
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
	...

0800b914 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08a      	sub	sp, #40	; 0x28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b920:	2300      	movs	r3, #0
 800b922:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	795b      	ldrb	r3, [r3, #5]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d101      	bne.n	800b930 <HAL_DAC_ConfigChannel+0x1c>
 800b92c:	2302      	movs	r3, #2
 800b92e:	e194      	b.n	800bc5a <HAL_DAC_ConfigChannel+0x346>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2201      	movs	r2, #1
 800b934:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2202      	movs	r2, #2
 800b93a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	2b04      	cmp	r3, #4
 800b942:	d174      	bne.n	800ba2e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d137      	bne.n	800b9ba <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b94a:	f7fd fc95 	bl	8009278 <HAL_GetTick>
 800b94e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b950:	e011      	b.n	800b976 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b952:	f7fd fc91 	bl	8009278 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d90a      	bls.n	800b976 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	f043 0208 	orr.w	r2, r3, #8
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2203      	movs	r2, #3
 800b970:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b972:	2303      	movs	r3, #3
 800b974:	e171      	b.n	800bc5a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1e6      	bne.n	800b952 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b984:	2001      	movs	r0, #1
 800b986:	f7fd fc83 	bl	8009290 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b992:	641a      	str	r2, [r3, #64]	; 0x40
 800b994:	e01e      	b.n	800b9d4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b996:	f7fd fc6f 	bl	8009278 <HAL_GetTick>
 800b99a:	4602      	mov	r2, r0
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d90a      	bls.n	800b9ba <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	f043 0208 	orr.w	r2, r3, #8
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2203      	movs	r2, #3
 800b9b4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e14f      	b.n	800bc5a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dbe8      	blt.n	800b996 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	f7fd fc63 	bl	8009290 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b9d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f003 0310 	and.w	r3, r3, #16
 800b9e0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b9e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e8:	43db      	mvns	r3, r3
 800b9ea:	ea02 0103 	and.w	r1, r2, r3
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f003 0310 	and.w	r3, r3, #16
 800b9f8:	409a      	lsls	r2, r3
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	430a      	orrs	r2, r1
 800ba00:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f003 0310 	and.w	r3, r3, #16
 800ba0e:	21ff      	movs	r1, #255	; 0xff
 800ba10:	fa01 f303 	lsl.w	r3, r1, r3
 800ba14:	43db      	mvns	r3, r3
 800ba16:	ea02 0103 	and.w	r1, r2, r3
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f003 0310 	and.w	r3, r3, #16
 800ba24:	409a      	lsls	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d11d      	bne.n	800ba72 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f003 0310 	and.w	r3, r3, #16
 800ba44:	221f      	movs	r2, #31
 800ba46:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4a:	43db      	mvns	r3, r3
 800ba4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba4e:	4013      	ands	r3, r2
 800ba50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f003 0310 	and.w	r3, r3, #16
 800ba5e:	69ba      	ldr	r2, [r7, #24]
 800ba60:	fa02 f303 	lsl.w	r3, r2, r3
 800ba64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba66:	4313      	orrs	r3, r2
 800ba68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba70:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f003 0310 	and.w	r3, r3, #16
 800ba80:	2207      	movs	r2, #7
 800ba82:	fa02 f303 	lsl.w	r3, r2, r3
 800ba86:	43db      	mvns	r3, r3
 800ba88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d002      	beq.n	800baa0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	623b      	str	r3, [r7, #32]
 800ba9e:	e011      	b.n	800bac4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	f003 0302 	and.w	r3, r3, #2
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800baac:	2301      	movs	r3, #1
 800baae:	623b      	str	r3, [r7, #32]
 800bab0:	e008      	b.n	800bac4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d102      	bne.n	800bac0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800baba:	2301      	movs	r3, #1
 800babc:	623b      	str	r3, [r7, #32]
 800babe:	e001      	b.n	800bac4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800bac0:	2300      	movs	r3, #0
 800bac2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	689a      	ldr	r2, [r3, #8]
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	4313      	orrs	r3, r2
 800bace:	6a3a      	ldr	r2, [r7, #32]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f003 0310 	and.w	r3, r3, #16
 800bada:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bade:	fa02 f303 	lsl.w	r3, r2, r3
 800bae2:	43db      	mvns	r3, r3
 800bae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae6:	4013      	ands	r3, r2
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	791b      	ldrb	r3, [r3, #4]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d102      	bne.n	800baf8 <HAL_DAC_ConfigChannel+0x1e4>
 800baf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baf6:	e000      	b.n	800bafa <HAL_DAC_ConfigChannel+0x1e6>
 800baf8:	2300      	movs	r3, #0
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f003 0310 	and.w	r3, r3, #16
 800bb06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb0e:	43db      	mvns	r3, r3
 800bb10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb12:	4013      	ands	r3, r2
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	795b      	ldrb	r3, [r3, #5]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d102      	bne.n	800bb24 <HAL_DAC_ConfigChannel+0x210>
 800bb1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb22:	e000      	b.n	800bb26 <HAL_DAC_ConfigChannel+0x212>
 800bb24:	2300      	movs	r3, #0
 800bb26:	69ba      	ldr	r2, [r7, #24]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800bb32:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d114      	bne.n	800bb66 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800bb3c:	f001 fc28 	bl	800d390 <HAL_RCC_GetHCLKFreq>
 800bb40:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	4a47      	ldr	r2, [pc, #284]	; (800bc64 <HAL_DAC_ConfigChannel+0x350>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d904      	bls.n	800bb54 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb50:	627b      	str	r3, [r7, #36]	; 0x24
 800bb52:	e00d      	b.n	800bb70 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	4a44      	ldr	r2, [pc, #272]	; (800bc68 <HAL_DAC_ConfigChannel+0x354>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d909      	bls.n	800bb70 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
 800bb64:	e004      	b.n	800bb70 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f003 0310 	and.w	r3, r3, #16
 800bb76:	69ba      	ldr	r2, [r7, #24]
 800bb78:	fa02 f303 	lsl.w	r3, r2, r3
 800bb7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6819      	ldr	r1, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f003 0310 	and.w	r3, r3, #16
 800bb96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bb9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9e:	43da      	mvns	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	400a      	ands	r2, r1
 800bba6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f003 0310 	and.w	r3, r3, #16
 800bbb6:	f640 72fe 	movw	r2, #4094	; 0xffe
 800bbba:	fa02 f303 	lsl.w	r3, r2, r3
 800bbbe:	43db      	mvns	r3, r3
 800bbc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f003 0310 	and.w	r3, r3, #16
 800bbd2:	69ba      	ldr	r2, [r7, #24]
 800bbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	6819      	ldr	r1, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f003 0310 	and.w	r3, r3, #16
 800bbf2:	22c0      	movs	r2, #192	; 0xc0
 800bbf4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf8:	43da      	mvns	r2, r3
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	400a      	ands	r2, r1
 800bc00:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	089b      	lsrs	r3, r3, #2
 800bc08:	f003 030f 	and.w	r3, r3, #15
 800bc0c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	089b      	lsrs	r3, r3, #2
 800bc14:	021b      	lsls	r3, r3, #8
 800bc16:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bc1a:	69ba      	ldr	r2, [r7, #24]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f003 0310 	and.w	r3, r3, #16
 800bc2c:	f640 710f 	movw	r1, #3855	; 0xf0f
 800bc30:	fa01 f303 	lsl.w	r3, r1, r3
 800bc34:	43db      	mvns	r3, r3
 800bc36:	ea02 0103 	and.w	r1, r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f003 0310 	and.w	r3, r3, #16
 800bc40:	69ba      	ldr	r2, [r7, #24]
 800bc42:	409a      	lsls	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	430a      	orrs	r2, r1
 800bc4a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3728      	adds	r7, #40	; 0x28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	09896800 	.word	0x09896800
 800bc68:	04c4b400 	.word	0x04c4b400

0800bc6c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f7ff fe16 	bl	800b8ac <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2201      	movs	r2, #1
 800bc84:	711a      	strb	r2, [r3, #4]
}
 800bc86:	bf00      	nop
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b084      	sub	sp, #16
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc9a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f7ff fe0f 	bl	800b8c0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800bca2:	bf00      	nop
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	f043 0204 	orr.w	r2, r3, #4
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f7ff fe05 	bl	800b8d4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2201      	movs	r2, #1
 800bcce:	711a      	strb	r2, [r3, #4]
}
 800bcd0:	bf00      	nop
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f7ff ffd8 	bl	800bcd8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	711a      	strb	r2, [r3, #4]
}
 800bd2e:	bf00      	nop
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b084      	sub	sp, #16
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd42:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f7ff ffd1 	bl	800bcec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800bd4a:	bf00      	nop
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	f043 0204 	orr.w	r2, r3, #4
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f7ff ffc7 	bl	800bd00 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2201      	movs	r2, #1
 800bd76:	711a      	strb	r2, [r3, #4]
}
 800bd78:	bf00      	nop
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d101      	bne.n	800bd92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e08d      	b.n	800beae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	4b47      	ldr	r3, [pc, #284]	; (800beb8 <HAL_DMA_Init+0x138>)
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d80f      	bhi.n	800bdbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	4b45      	ldr	r3, [pc, #276]	; (800bebc <HAL_DMA_Init+0x13c>)
 800bda6:	4413      	add	r3, r2
 800bda8:	4a45      	ldr	r2, [pc, #276]	; (800bec0 <HAL_DMA_Init+0x140>)
 800bdaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bdae:	091b      	lsrs	r3, r3, #4
 800bdb0:	009a      	lsls	r2, r3, #2
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a42      	ldr	r2, [pc, #264]	; (800bec4 <HAL_DMA_Init+0x144>)
 800bdba:	641a      	str	r2, [r3, #64]	; 0x40
 800bdbc:	e00e      	b.n	800bddc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	4b40      	ldr	r3, [pc, #256]	; (800bec8 <HAL_DMA_Init+0x148>)
 800bdc6:	4413      	add	r3, r2
 800bdc8:	4a3d      	ldr	r2, [pc, #244]	; (800bec0 <HAL_DMA_Init+0x140>)
 800bdca:	fba2 2303 	umull	r2, r3, r2, r3
 800bdce:	091b      	lsrs	r3, r3, #4
 800bdd0:	009a      	lsls	r2, r3, #2
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a3c      	ldr	r2, [pc, #240]	; (800becc <HAL_DMA_Init+0x14c>)
 800bdda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2202      	movs	r2, #2
 800bde0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bdf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800be00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	699b      	ldr	r3, [r3, #24]
 800be12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	4313      	orrs	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fa76 	bl	800c320 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be3c:	d102      	bne.n	800be44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be4c:	b2d2      	uxtb	r2, r2
 800be4e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be58:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d010      	beq.n	800be84 <HAL_DMA_Init+0x104>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	2b04      	cmp	r3, #4
 800be68:	d80c      	bhi.n	800be84 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fa96 	bl	800c39c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be74:	2200      	movs	r2, #0
 800be76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800be80:	605a      	str	r2, [r3, #4]
 800be82:	e008      	b.n	800be96 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	40020407 	.word	0x40020407
 800bebc:	bffdfff8 	.word	0xbffdfff8
 800bec0:	cccccccd 	.word	0xcccccccd
 800bec4:	40020000 	.word	0x40020000
 800bec8:	bffdfbf8 	.word	0xbffdfbf8
 800becc:	40020400 	.word	0x40020400

0800bed0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bede:	2300      	movs	r3, #0
 800bee0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d101      	bne.n	800bef0 <HAL_DMA_Start_IT+0x20>
 800beec:	2302      	movs	r3, #2
 800beee:	e066      	b.n	800bfbe <HAL_DMA_Start_IT+0xee>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d155      	bne.n	800bfb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2202      	movs	r2, #2
 800bf08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f022 0201 	bic.w	r2, r2, #1
 800bf20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	68b9      	ldr	r1, [r7, #8]
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f000 f9bb 	bl	800c2a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d008      	beq.n	800bf48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f042 020e 	orr.w	r2, r2, #14
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	e00f      	b.n	800bf68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f022 0204 	bic.w	r2, r2, #4
 800bf56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f042 020a 	orr.w	r2, r2, #10
 800bf66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d007      	beq.n	800bf86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f042 0201 	orr.w	r2, r2, #1
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	e005      	b.n	800bfbc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bfb8:	2302      	movs	r3, #2
 800bfba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3718      	adds	r7, #24
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bfc6:	b480      	push	{r7}
 800bfc8:	b085      	sub	sp, #20
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d005      	beq.n	800bfea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2204      	movs	r2, #4
 800bfe2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	73fb      	strb	r3, [r7, #15]
 800bfe8:	e037      	b.n	800c05a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f022 020e 	bic.w	r2, r2, #14
 800bff8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c004:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c008:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f022 0201 	bic.w	r2, r2, #1
 800c018:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c01e:	f003 021f 	and.w	r2, r3, #31
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c026:	2101      	movs	r1, #1
 800c028:	fa01 f202 	lsl.w	r2, r1, r2
 800c02c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c036:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00c      	beq.n	800c05a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c04e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c058:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d00d      	beq.n	800c0ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2204      	movs	r2, #4
 800c094:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	73fb      	strb	r3, [r7, #15]
 800c0aa:	e047      	b.n	800c13c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f022 020e 	bic.w	r2, r2, #14
 800c0ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f022 0201 	bic.w	r2, r2, #1
 800c0ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e0:	f003 021f 	and.w	r2, r3, #31
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	fa01 f202 	lsl.w	r2, r1, r2
 800c0ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c0f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00c      	beq.n	800c11c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c10c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c110:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c11a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c130:	2b00      	cmp	r3, #0
 800c132:	d003      	beq.n	800c13c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	4798      	blx	r3
    }
  }
  return status;
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b084      	sub	sp, #16
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c162:	f003 031f 	and.w	r3, r3, #31
 800c166:	2204      	movs	r2, #4
 800c168:	409a      	lsls	r2, r3
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	4013      	ands	r3, r2
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d026      	beq.n	800c1c0 <HAL_DMA_IRQHandler+0x7a>
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	f003 0304 	and.w	r3, r3, #4
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d021      	beq.n	800c1c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 0320 	and.w	r3, r3, #32
 800c186:	2b00      	cmp	r3, #0
 800c188:	d107      	bne.n	800c19a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f022 0204 	bic.w	r2, r2, #4
 800c198:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c19e:	f003 021f 	and.w	r2, r3, #31
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a6:	2104      	movs	r1, #4
 800c1a8:	fa01 f202 	lsl.w	r2, r1, r2
 800c1ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d071      	beq.n	800c29a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c1be:	e06c      	b.n	800c29a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1c4:	f003 031f 	and.w	r3, r3, #31
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	409a      	lsls	r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d02e      	beq.n	800c232 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	f003 0302 	and.w	r3, r3, #2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d029      	beq.n	800c232 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 0320 	and.w	r3, r3, #32
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10b      	bne.n	800c204 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f022 020a 	bic.w	r2, r2, #10
 800c1fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c208:	f003 021f 	and.w	r2, r3, #31
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c210:	2102      	movs	r1, #2
 800c212:	fa01 f202 	lsl.w	r2, r1, r2
 800c216:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c224:	2b00      	cmp	r3, #0
 800c226:	d038      	beq.n	800c29a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c230:	e033      	b.n	800c29a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c236:	f003 031f 	and.w	r3, r3, #31
 800c23a:	2208      	movs	r2, #8
 800c23c:	409a      	lsls	r2, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	4013      	ands	r3, r2
 800c242:	2b00      	cmp	r3, #0
 800c244:	d02a      	beq.n	800c29c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	f003 0308 	and.w	r3, r3, #8
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d025      	beq.n	800c29c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f022 020e 	bic.w	r2, r2, #14
 800c25e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c264:	f003 021f 	and.w	r2, r3, #31
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26c:	2101      	movs	r1, #1
 800c26e:	fa01 f202 	lsl.w	r2, r1, r2
 800c272:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d004      	beq.n	800c29c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c29a:	bf00      	nop
 800c29c:	bf00      	nop
}
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c2ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d004      	beq.n	800c2ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c2cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d2:	f003 021f 	and.w	r2, r3, #31
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2da:	2101      	movs	r1, #1
 800c2dc:	fa01 f202 	lsl.w	r2, r1, r2
 800c2e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	2b10      	cmp	r3, #16
 800c2f0:	d108      	bne.n	800c304 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c302:	e007      	b.n	800c314 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	60da      	str	r2, [r3, #12]
}
 800c314:	bf00      	nop
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	461a      	mov	r2, r3
 800c32e:	4b16      	ldr	r3, [pc, #88]	; (800c388 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c330:	429a      	cmp	r2, r3
 800c332:	d802      	bhi.n	800c33a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c334:	4b15      	ldr	r3, [pc, #84]	; (800c38c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c336:	617b      	str	r3, [r7, #20]
 800c338:	e001      	b.n	800c33e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800c33a:	4b15      	ldr	r3, [pc, #84]	; (800c390 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c33c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	3b08      	subs	r3, #8
 800c34a:	4a12      	ldr	r2, [pc, #72]	; (800c394 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c34c:	fba2 2303 	umull	r2, r3, r2, r3
 800c350:	091b      	lsrs	r3, r3, #4
 800c352:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c358:	089b      	lsrs	r3, r3, #2
 800c35a:	009a      	lsls	r2, r3, #2
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	4413      	add	r3, r2
 800c360:	461a      	mov	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a0b      	ldr	r2, [pc, #44]	; (800c398 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c36a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f003 031f 	and.w	r3, r3, #31
 800c372:	2201      	movs	r2, #1
 800c374:	409a      	lsls	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c37a:	bf00      	nop
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	40020407 	.word	0x40020407
 800c38c:	40020800 	.word	0x40020800
 800c390:	40020820 	.word	0x40020820
 800c394:	cccccccd 	.word	0xcccccccd
 800c398:	40020880 	.word	0x40020880

0800c39c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	4b0b      	ldr	r3, [pc, #44]	; (800c3dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c3b0:	4413      	add	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a08      	ldr	r2, [pc, #32]	; (800c3e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c3be:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	f003 031f 	and.w	r3, r3, #31
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	409a      	lsls	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800c3d0:	bf00      	nop
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	1000823f 	.word	0x1000823f
 800c3e0:	40020940 	.word	0x40020940

0800c3e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c3f2:	e15a      	b.n	800c6aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c400:	4013      	ands	r3, r2
 800c402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 814c 	beq.w	800c6a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d00b      	beq.n	800c42c <HAL_GPIO_Init+0x48>
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d007      	beq.n	800c42c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c420:	2b11      	cmp	r3, #17
 800c422:	d003      	beq.n	800c42c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	2b12      	cmp	r3, #18
 800c42a:	d130      	bne.n	800c48e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	005b      	lsls	r3, r3, #1
 800c436:	2203      	movs	r2, #3
 800c438:	fa02 f303 	lsl.w	r3, r2, r3
 800c43c:	43db      	mvns	r3, r3
 800c43e:	693a      	ldr	r2, [r7, #16]
 800c440:	4013      	ands	r3, r2
 800c442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	68da      	ldr	r2, [r3, #12]
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	fa02 f303 	lsl.w	r3, r2, r3
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	4313      	orrs	r3, r2
 800c454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	693a      	ldr	r2, [r7, #16]
 800c45a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c462:	2201      	movs	r2, #1
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	fa02 f303 	lsl.w	r3, r2, r3
 800c46a:	43db      	mvns	r3, r3
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	4013      	ands	r3, r2
 800c470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	091b      	lsrs	r3, r3, #4
 800c478:	f003 0201 	and.w	r2, r3, #1
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	fa02 f303 	lsl.w	r3, r2, r3
 800c482:	693a      	ldr	r2, [r7, #16]
 800c484:	4313      	orrs	r3, r2
 800c486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	2203      	movs	r2, #3
 800c49a:	fa02 f303 	lsl.w	r3, r2, r3
 800c49e:	43db      	mvns	r3, r3
 800c4a0:	693a      	ldr	r2, [r7, #16]
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	689a      	ldr	r2, [r3, #8]
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c4b2:	693a      	ldr	r2, [r7, #16]
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d003      	beq.n	800c4ce <HAL_GPIO_Init+0xea>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	2b12      	cmp	r3, #18
 800c4cc:	d123      	bne.n	800c516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	08da      	lsrs	r2, r3, #3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	3208      	adds	r2, #8
 800c4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	f003 0307 	and.w	r3, r3, #7
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	220f      	movs	r2, #15
 800c4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ea:	43db      	mvns	r3, r3
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	4013      	ands	r3, r2
 800c4f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	691a      	ldr	r2, [r3, #16]
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f003 0307 	and.w	r3, r3, #7
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c502:	693a      	ldr	r2, [r7, #16]
 800c504:	4313      	orrs	r3, r2
 800c506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	08da      	lsrs	r2, r3, #3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	3208      	adds	r2, #8
 800c510:	6939      	ldr	r1, [r7, #16]
 800c512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	2203      	movs	r2, #3
 800c522:	fa02 f303 	lsl.w	r3, r2, r3
 800c526:	43db      	mvns	r3, r3
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	4013      	ands	r3, r2
 800c52c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	f003 0203 	and.w	r2, r3, #3
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	fa02 f303 	lsl.w	r3, r2, r3
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	4313      	orrs	r3, r2
 800c542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 80a6 	beq.w	800c6a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c558:	4b5b      	ldr	r3, [pc, #364]	; (800c6c8 <HAL_GPIO_Init+0x2e4>)
 800c55a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c55c:	4a5a      	ldr	r2, [pc, #360]	; (800c6c8 <HAL_GPIO_Init+0x2e4>)
 800c55e:	f043 0301 	orr.w	r3, r3, #1
 800c562:	6613      	str	r3, [r2, #96]	; 0x60
 800c564:	4b58      	ldr	r3, [pc, #352]	; (800c6c8 <HAL_GPIO_Init+0x2e4>)
 800c566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c568:	f003 0301 	and.w	r3, r3, #1
 800c56c:	60bb      	str	r3, [r7, #8]
 800c56e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c570:	4a56      	ldr	r2, [pc, #344]	; (800c6cc <HAL_GPIO_Init+0x2e8>)
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	089b      	lsrs	r3, r3, #2
 800c576:	3302      	adds	r3, #2
 800c578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c57c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f003 0303 	and.w	r3, r3, #3
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	220f      	movs	r2, #15
 800c588:	fa02 f303 	lsl.w	r3, r2, r3
 800c58c:	43db      	mvns	r3, r3
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	4013      	ands	r3, r2
 800c592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c59a:	d01f      	beq.n	800c5dc <HAL_GPIO_Init+0x1f8>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a4c      	ldr	r2, [pc, #304]	; (800c6d0 <HAL_GPIO_Init+0x2ec>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d019      	beq.n	800c5d8 <HAL_GPIO_Init+0x1f4>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a4b      	ldr	r2, [pc, #300]	; (800c6d4 <HAL_GPIO_Init+0x2f0>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d013      	beq.n	800c5d4 <HAL_GPIO_Init+0x1f0>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a4a      	ldr	r2, [pc, #296]	; (800c6d8 <HAL_GPIO_Init+0x2f4>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d00d      	beq.n	800c5d0 <HAL_GPIO_Init+0x1ec>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a49      	ldr	r2, [pc, #292]	; (800c6dc <HAL_GPIO_Init+0x2f8>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d007      	beq.n	800c5cc <HAL_GPIO_Init+0x1e8>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a48      	ldr	r2, [pc, #288]	; (800c6e0 <HAL_GPIO_Init+0x2fc>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d101      	bne.n	800c5c8 <HAL_GPIO_Init+0x1e4>
 800c5c4:	2305      	movs	r3, #5
 800c5c6:	e00a      	b.n	800c5de <HAL_GPIO_Init+0x1fa>
 800c5c8:	2306      	movs	r3, #6
 800c5ca:	e008      	b.n	800c5de <HAL_GPIO_Init+0x1fa>
 800c5cc:	2304      	movs	r3, #4
 800c5ce:	e006      	b.n	800c5de <HAL_GPIO_Init+0x1fa>
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e004      	b.n	800c5de <HAL_GPIO_Init+0x1fa>
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	e002      	b.n	800c5de <HAL_GPIO_Init+0x1fa>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e000      	b.n	800c5de <HAL_GPIO_Init+0x1fa>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	f002 0203 	and.w	r2, r2, #3
 800c5e4:	0092      	lsls	r2, r2, #2
 800c5e6:	4093      	lsls	r3, r2
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c5ee:	4937      	ldr	r1, [pc, #220]	; (800c6cc <HAL_GPIO_Init+0x2e8>)
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	089b      	lsrs	r3, r3, #2
 800c5f4:	3302      	adds	r3, #2
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c5fc:	4b39      	ldr	r3, [pc, #228]	; (800c6e4 <HAL_GPIO_Init+0x300>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	43db      	mvns	r3, r3
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	4013      	ands	r3, r2
 800c60a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c614:	2b00      	cmp	r3, #0
 800c616:	d003      	beq.n	800c620 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c620:	4a30      	ldr	r2, [pc, #192]	; (800c6e4 <HAL_GPIO_Init+0x300>)
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c626:	4b2f      	ldr	r3, [pc, #188]	; (800c6e4 <HAL_GPIO_Init+0x300>)
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	43db      	mvns	r3, r3
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	4013      	ands	r3, r2
 800c634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d003      	beq.n	800c64a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	4313      	orrs	r3, r2
 800c648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c64a:	4a26      	ldr	r2, [pc, #152]	; (800c6e4 <HAL_GPIO_Init+0x300>)
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c650:	4b24      	ldr	r3, [pc, #144]	; (800c6e4 <HAL_GPIO_Init+0x300>)
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	43db      	mvns	r3, r3
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	4013      	ands	r3, r2
 800c65e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d003      	beq.n	800c674 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	4313      	orrs	r3, r2
 800c672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c674:	4a1b      	ldr	r2, [pc, #108]	; (800c6e4 <HAL_GPIO_Init+0x300>)
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c67a:	4b1a      	ldr	r3, [pc, #104]	; (800c6e4 <HAL_GPIO_Init+0x300>)
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	43db      	mvns	r3, r3
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	4013      	ands	r3, r2
 800c688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c69e:	4a11      	ldr	r2, [pc, #68]	; (800c6e4 <HAL_GPIO_Init+0x300>)
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f47f ae9d 	bne.w	800c3f4 <HAL_GPIO_Init+0x10>
  }
}
 800c6ba:	bf00      	nop
 800c6bc:	371c      	adds	r7, #28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	40021000 	.word	0x40021000
 800c6cc:	40010000 	.word	0x40010000
 800c6d0:	48000400 	.word	0x48000400
 800c6d4:	48000800 	.word	0x48000800
 800c6d8:	48000c00 	.word	0x48000c00
 800c6dc:	48001000 	.word	0x48001000
 800c6e0:	48001400 	.word	0x48001400
 800c6e4:	40010400 	.word	0x40010400

0800c6e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b087      	sub	sp, #28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800c6f6:	e0bd      	b.n	800c874 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	4013      	ands	r3, r2
 800c704:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 80b0 	beq.w	800c86e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800c70e:	4a60      	ldr	r2, [pc, #384]	; (800c890 <HAL_GPIO_DeInit+0x1a8>)
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	089b      	lsrs	r3, r3, #2
 800c714:	3302      	adds	r3, #2
 800c716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c71a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	f003 0303 	and.w	r3, r3, #3
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	220f      	movs	r2, #15
 800c726:	fa02 f303 	lsl.w	r3, r2, r3
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	4013      	ands	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c736:	d01f      	beq.n	800c778 <HAL_GPIO_DeInit+0x90>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a56      	ldr	r2, [pc, #344]	; (800c894 <HAL_GPIO_DeInit+0x1ac>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d019      	beq.n	800c774 <HAL_GPIO_DeInit+0x8c>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a55      	ldr	r2, [pc, #340]	; (800c898 <HAL_GPIO_DeInit+0x1b0>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d013      	beq.n	800c770 <HAL_GPIO_DeInit+0x88>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a54      	ldr	r2, [pc, #336]	; (800c89c <HAL_GPIO_DeInit+0x1b4>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d00d      	beq.n	800c76c <HAL_GPIO_DeInit+0x84>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a53      	ldr	r2, [pc, #332]	; (800c8a0 <HAL_GPIO_DeInit+0x1b8>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d007      	beq.n	800c768 <HAL_GPIO_DeInit+0x80>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a52      	ldr	r2, [pc, #328]	; (800c8a4 <HAL_GPIO_DeInit+0x1bc>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d101      	bne.n	800c764 <HAL_GPIO_DeInit+0x7c>
 800c760:	2305      	movs	r3, #5
 800c762:	e00a      	b.n	800c77a <HAL_GPIO_DeInit+0x92>
 800c764:	2306      	movs	r3, #6
 800c766:	e008      	b.n	800c77a <HAL_GPIO_DeInit+0x92>
 800c768:	2304      	movs	r3, #4
 800c76a:	e006      	b.n	800c77a <HAL_GPIO_DeInit+0x92>
 800c76c:	2303      	movs	r3, #3
 800c76e:	e004      	b.n	800c77a <HAL_GPIO_DeInit+0x92>
 800c770:	2302      	movs	r3, #2
 800c772:	e002      	b.n	800c77a <HAL_GPIO_DeInit+0x92>
 800c774:	2301      	movs	r3, #1
 800c776:	e000      	b.n	800c77a <HAL_GPIO_DeInit+0x92>
 800c778:	2300      	movs	r3, #0
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	f002 0203 	and.w	r2, r2, #3
 800c780:	0092      	lsls	r2, r2, #2
 800c782:	4093      	lsls	r3, r2
 800c784:	68fa      	ldr	r2, [r7, #12]
 800c786:	429a      	cmp	r2, r3
 800c788:	d132      	bne.n	800c7f0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c78a:	4b47      	ldr	r3, [pc, #284]	; (800c8a8 <HAL_GPIO_DeInit+0x1c0>)
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	43db      	mvns	r3, r3
 800c792:	4945      	ldr	r1, [pc, #276]	; (800c8a8 <HAL_GPIO_DeInit+0x1c0>)
 800c794:	4013      	ands	r3, r2
 800c796:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c798:	4b43      	ldr	r3, [pc, #268]	; (800c8a8 <HAL_GPIO_DeInit+0x1c0>)
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	43db      	mvns	r3, r3
 800c7a0:	4941      	ldr	r1, [pc, #260]	; (800c8a8 <HAL_GPIO_DeInit+0x1c0>)
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c7a6:	4b40      	ldr	r3, [pc, #256]	; (800c8a8 <HAL_GPIO_DeInit+0x1c0>)
 800c7a8:	689a      	ldr	r2, [r3, #8]
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	43db      	mvns	r3, r3
 800c7ae:	493e      	ldr	r1, [pc, #248]	; (800c8a8 <HAL_GPIO_DeInit+0x1c0>)
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c7b4:	4b3c      	ldr	r3, [pc, #240]	; (800c8a8 <HAL_GPIO_DeInit+0x1c0>)
 800c7b6:	68da      	ldr	r2, [r3, #12]
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	43db      	mvns	r3, r3
 800c7bc:	493a      	ldr	r1, [pc, #232]	; (800c8a8 <HAL_GPIO_DeInit+0x1c0>)
 800c7be:	4013      	ands	r3, r2
 800c7c0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f003 0303 	and.w	r3, r3, #3
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	220f      	movs	r2, #15
 800c7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c7d2:	4a2f      	ldr	r2, [pc, #188]	; (800c890 <HAL_GPIO_DeInit+0x1a8>)
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	089b      	lsrs	r3, r3, #2
 800c7d8:	3302      	adds	r3, #2
 800c7da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	43da      	mvns	r2, r3
 800c7e2:	482b      	ldr	r0, [pc, #172]	; (800c890 <HAL_GPIO_DeInit+0x1a8>)
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	089b      	lsrs	r3, r3, #2
 800c7e8:	400a      	ands	r2, r1
 800c7ea:	3302      	adds	r3, #2
 800c7ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	2103      	movs	r1, #3
 800c7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c7fe:	431a      	orrs	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	08da      	lsrs	r2, r3, #3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3208      	adds	r2, #8
 800c80c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f003 0307 	and.w	r3, r3, #7
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	220f      	movs	r2, #15
 800c81a:	fa02 f303 	lsl.w	r3, r2, r3
 800c81e:	43db      	mvns	r3, r3
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	08d2      	lsrs	r2, r2, #3
 800c824:	4019      	ands	r1, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	3208      	adds	r2, #8
 800c82a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68da      	ldr	r2, [r3, #12]
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	005b      	lsls	r3, r3, #1
 800c836:	2103      	movs	r1, #3
 800c838:	fa01 f303 	lsl.w	r3, r1, r3
 800c83c:	43db      	mvns	r3, r3
 800c83e:	401a      	ands	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	2101      	movs	r1, #1
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	fa01 f303 	lsl.w	r3, r1, r3
 800c850:	43db      	mvns	r3, r3
 800c852:	401a      	ands	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	689a      	ldr	r2, [r3, #8]
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	2103      	movs	r1, #3
 800c862:	fa01 f303 	lsl.w	r3, r1, r3
 800c866:	43db      	mvns	r3, r3
 800c868:	401a      	ands	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	3301      	adds	r3, #1
 800c872:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	fa22 f303 	lsr.w	r3, r2, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f47f af3b 	bne.w	800c6f8 <HAL_GPIO_DeInit+0x10>
  }
}
 800c882:	bf00      	nop
 800c884:	371c      	adds	r7, #28
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	40010000 	.word	0x40010000
 800c894:	48000400 	.word	0x48000400
 800c898:	48000800 	.word	0x48000800
 800c89c:	48000c00 	.word	0x48000c00
 800c8a0:	48001000 	.word	0x48001000
 800c8a4:	48001400 	.word	0x48001400
 800c8a8:	40010400 	.word	0x40010400

0800c8ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	807b      	strh	r3, [r7, #2]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c8bc:	787b      	ldrb	r3, [r7, #1]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c8c2:	887a      	ldrh	r2, [r7, #2]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c8c8:	e002      	b.n	800c8d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c8ca:	887a      	ldrh	r2, [r7, #2]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d141      	bne.n	800c96e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c8ea:	4b4b      	ldr	r3, [pc, #300]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c8f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8f6:	d131      	bne.n	800c95c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c8f8:	4b47      	ldr	r3, [pc, #284]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8fe:	4a46      	ldr	r2, [pc, #280]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c904:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c908:	4b43      	ldr	r3, [pc, #268]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c910:	4a41      	ldr	r2, [pc, #260]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c916:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c918:	4b40      	ldr	r3, [pc, #256]	; (800ca1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2232      	movs	r2, #50	; 0x32
 800c91e:	fb02 f303 	mul.w	r3, r2, r3
 800c922:	4a3f      	ldr	r2, [pc, #252]	; (800ca20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c924:	fba2 2303 	umull	r2, r3, r2, r3
 800c928:	0c9b      	lsrs	r3, r3, #18
 800c92a:	3301      	adds	r3, #1
 800c92c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c92e:	e002      	b.n	800c936 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3b01      	subs	r3, #1
 800c934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c936:	4b38      	ldr	r3, [pc, #224]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c93e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c942:	d102      	bne.n	800c94a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1f2      	bne.n	800c930 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c94a:	4b33      	ldr	r3, [pc, #204]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c956:	d158      	bne.n	800ca0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	e057      	b.n	800ca0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c95c:	4b2e      	ldr	r3, [pc, #184]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c962:	4a2d      	ldr	r2, [pc, #180]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c968:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c96c:	e04d      	b.n	800ca0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c974:	d141      	bne.n	800c9fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c976:	4b28      	ldr	r3, [pc, #160]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c97e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c982:	d131      	bne.n	800c9e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c984:	4b24      	ldr	r3, [pc, #144]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c98a:	4a23      	ldr	r2, [pc, #140]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c98c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c990:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c994:	4b20      	ldr	r3, [pc, #128]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c99c:	4a1e      	ldr	r2, [pc, #120]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c99e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c9a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c9a4:	4b1d      	ldr	r3, [pc, #116]	; (800ca1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2232      	movs	r2, #50	; 0x32
 800c9aa:	fb02 f303 	mul.w	r3, r2, r3
 800c9ae:	4a1c      	ldr	r2, [pc, #112]	; (800ca20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c9b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b4:	0c9b      	lsrs	r3, r3, #18
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c9ba:	e002      	b.n	800c9c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c9c2:	4b15      	ldr	r3, [pc, #84]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9ce:	d102      	bne.n	800c9d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1f2      	bne.n	800c9bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c9d6:	4b10      	ldr	r3, [pc, #64]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9d8:	695b      	ldr	r3, [r3, #20]
 800c9da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9e2:	d112      	bne.n	800ca0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c9e4:	2303      	movs	r3, #3
 800c9e6:	e011      	b.n	800ca0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c9e8:	4b0b      	ldr	r3, [pc, #44]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9ee:	4a0a      	ldr	r2, [pc, #40]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c9f8:	e007      	b.n	800ca0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c9fa:	4b07      	ldr	r3, [pc, #28]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ca02:	4a05      	ldr	r2, [pc, #20]	; (800ca18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ca08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	40007000 	.word	0x40007000
 800ca1c:	20000c34 	.word	0x20000c34
 800ca20:	431bde83 	.word	0x431bde83

0800ca24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b088      	sub	sp, #32
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d101      	bne.n	800ca36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	e308      	b.n	800d048 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d075      	beq.n	800cb2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca42:	4ba3      	ldr	r3, [pc, #652]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	f003 030c 	and.w	r3, r3, #12
 800ca4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ca4c:	4ba0      	ldr	r3, [pc, #640]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	f003 0303 	and.w	r3, r3, #3
 800ca54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	2b0c      	cmp	r3, #12
 800ca5a:	d102      	bne.n	800ca62 <HAL_RCC_OscConfig+0x3e>
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d002      	beq.n	800ca68 <HAL_RCC_OscConfig+0x44>
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	2b08      	cmp	r3, #8
 800ca66:	d10b      	bne.n	800ca80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca68:	4b99      	ldr	r3, [pc, #612]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d05b      	beq.n	800cb2c <HAL_RCC_OscConfig+0x108>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d157      	bne.n	800cb2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e2e3      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca88:	d106      	bne.n	800ca98 <HAL_RCC_OscConfig+0x74>
 800ca8a:	4b91      	ldr	r3, [pc, #580]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a90      	ldr	r2, [pc, #576]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800ca90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca94:	6013      	str	r3, [r2, #0]
 800ca96:	e01d      	b.n	800cad4 <HAL_RCC_OscConfig+0xb0>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caa0:	d10c      	bne.n	800cabc <HAL_RCC_OscConfig+0x98>
 800caa2:	4b8b      	ldr	r3, [pc, #556]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a8a      	ldr	r2, [pc, #552]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800caa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800caac:	6013      	str	r3, [r2, #0]
 800caae:	4b88      	ldr	r3, [pc, #544]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a87      	ldr	r2, [pc, #540]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cab8:	6013      	str	r3, [r2, #0]
 800caba:	e00b      	b.n	800cad4 <HAL_RCC_OscConfig+0xb0>
 800cabc:	4b84      	ldr	r3, [pc, #528]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a83      	ldr	r2, [pc, #524]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	4b81      	ldr	r3, [pc, #516]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a80      	ldr	r2, [pc, #512]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d013      	beq.n	800cb04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cadc:	f7fc fbcc 	bl	8009278 <HAL_GetTick>
 800cae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cae2:	e008      	b.n	800caf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cae4:	f7fc fbc8 	bl	8009278 <HAL_GetTick>
 800cae8:	4602      	mov	r2, r0
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	2b64      	cmp	r3, #100	; 0x64
 800caf0:	d901      	bls.n	800caf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800caf2:	2303      	movs	r3, #3
 800caf4:	e2a8      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800caf6:	4b76      	ldr	r3, [pc, #472]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d0f0      	beq.n	800cae4 <HAL_RCC_OscConfig+0xc0>
 800cb02:	e014      	b.n	800cb2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb04:	f7fc fbb8 	bl	8009278 <HAL_GetTick>
 800cb08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cb0a:	e008      	b.n	800cb1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb0c:	f7fc fbb4 	bl	8009278 <HAL_GetTick>
 800cb10:	4602      	mov	r2, r0
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	2b64      	cmp	r3, #100	; 0x64
 800cb18:	d901      	bls.n	800cb1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cb1a:	2303      	movs	r3, #3
 800cb1c:	e294      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cb1e:	4b6c      	ldr	r3, [pc, #432]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1f0      	bne.n	800cb0c <HAL_RCC_OscConfig+0xe8>
 800cb2a:	e000      	b.n	800cb2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0302 	and.w	r3, r3, #2
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d075      	beq.n	800cc26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb3a:	4b65      	ldr	r3, [pc, #404]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	f003 030c 	and.w	r3, r3, #12
 800cb42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cb44:	4b62      	ldr	r3, [pc, #392]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	f003 0303 	and.w	r3, r3, #3
 800cb4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	2b0c      	cmp	r3, #12
 800cb52:	d102      	bne.n	800cb5a <HAL_RCC_OscConfig+0x136>
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d002      	beq.n	800cb60 <HAL_RCC_OscConfig+0x13c>
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	2b04      	cmp	r3, #4
 800cb5e:	d11f      	bne.n	800cba0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb60:	4b5b      	ldr	r3, [pc, #364]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d005      	beq.n	800cb78 <HAL_RCC_OscConfig+0x154>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e267      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb78:	4b55      	ldr	r3, [pc, #340]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	691b      	ldr	r3, [r3, #16]
 800cb84:	061b      	lsls	r3, r3, #24
 800cb86:	4952      	ldr	r1, [pc, #328]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cb8c:	4b51      	ldr	r3, [pc, #324]	; (800ccd4 <HAL_RCC_OscConfig+0x2b0>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fc fb25 	bl	80091e0 <HAL_InitTick>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d043      	beq.n	800cc24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e253      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d023      	beq.n	800cbf0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cba8:	4b49      	ldr	r3, [pc, #292]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a48      	ldr	r2, [pc, #288]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cbae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbb4:	f7fc fb60 	bl	8009278 <HAL_GetTick>
 800cbb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cbba:	e008      	b.n	800cbce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cbbc:	f7fc fb5c 	bl	8009278 <HAL_GetTick>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d901      	bls.n	800cbce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	e23c      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cbce:	4b40      	ldr	r3, [pc, #256]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d0f0      	beq.n	800cbbc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbda:	4b3d      	ldr	r3, [pc, #244]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	061b      	lsls	r3, r3, #24
 800cbe8:	4939      	ldr	r1, [pc, #228]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cbea:	4313      	orrs	r3, r2
 800cbec:	604b      	str	r3, [r1, #4]
 800cbee:	e01a      	b.n	800cc26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cbf0:	4b37      	ldr	r3, [pc, #220]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a36      	ldr	r2, [pc, #216]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cbf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbfc:	f7fc fb3c 	bl	8009278 <HAL_GetTick>
 800cc00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cc02:	e008      	b.n	800cc16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc04:	f7fc fb38 	bl	8009278 <HAL_GetTick>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d901      	bls.n	800cc16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800cc12:	2303      	movs	r3, #3
 800cc14:	e218      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cc16:	4b2e      	ldr	r3, [pc, #184]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1f0      	bne.n	800cc04 <HAL_RCC_OscConfig+0x1e0>
 800cc22:	e000      	b.n	800cc26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cc24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 0308 	and.w	r3, r3, #8
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d03c      	beq.n	800ccac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d01c      	beq.n	800cc74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc3a:	4b25      	ldr	r3, [pc, #148]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cc3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc40:	4a23      	ldr	r2, [pc, #140]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cc42:	f043 0301 	orr.w	r3, r3, #1
 800cc46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc4a:	f7fc fb15 	bl	8009278 <HAL_GetTick>
 800cc4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cc50:	e008      	b.n	800cc64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc52:	f7fc fb11 	bl	8009278 <HAL_GetTick>
 800cc56:	4602      	mov	r2, r0
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d901      	bls.n	800cc64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e1f1      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cc64:	4b1a      	ldr	r3, [pc, #104]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cc66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc6a:	f003 0302 	and.w	r3, r3, #2
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0ef      	beq.n	800cc52 <HAL_RCC_OscConfig+0x22e>
 800cc72:	e01b      	b.n	800ccac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc74:	4b16      	ldr	r3, [pc, #88]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cc76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc7a:	4a15      	ldr	r2, [pc, #84]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cc7c:	f023 0301 	bic.w	r3, r3, #1
 800cc80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc84:	f7fc faf8 	bl	8009278 <HAL_GetTick>
 800cc88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cc8a:	e008      	b.n	800cc9e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc8c:	f7fc faf4 	bl	8009278 <HAL_GetTick>
 800cc90:	4602      	mov	r2, r0
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d901      	bls.n	800cc9e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e1d4      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cc9e:	4b0c      	ldr	r3, [pc, #48]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800cca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cca4:	f003 0302 	and.w	r3, r3, #2
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1ef      	bne.n	800cc8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 80ab 	beq.w	800ce10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ccbe:	4b04      	ldr	r3, [pc, #16]	; (800ccd0 <HAL_RCC_OscConfig+0x2ac>)
 800ccc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d106      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x2b4>
 800ccca:	2301      	movs	r3, #1
 800cccc:	e005      	b.n	800ccda <HAL_RCC_OscConfig+0x2b6>
 800ccce:	bf00      	nop
 800ccd0:	40021000 	.word	0x40021000
 800ccd4:	20000c38 	.word	0x20000c38
 800ccd8:	2300      	movs	r3, #0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00d      	beq.n	800ccfa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ccde:	4baf      	ldr	r3, [pc, #700]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cce2:	4aae      	ldr	r2, [pc, #696]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cce8:	6593      	str	r3, [r2, #88]	; 0x58
 800ccea:	4bac      	ldr	r3, [pc, #688]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ccec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ccfa:	4ba9      	ldr	r3, [pc, #676]	; (800cfa0 <HAL_RCC_OscConfig+0x57c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d118      	bne.n	800cd38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd06:	4ba6      	ldr	r3, [pc, #664]	; (800cfa0 <HAL_RCC_OscConfig+0x57c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4aa5      	ldr	r2, [pc, #660]	; (800cfa0 <HAL_RCC_OscConfig+0x57c>)
 800cd0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd12:	f7fc fab1 	bl	8009278 <HAL_GetTick>
 800cd16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cd18:	e008      	b.n	800cd2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd1a:	f7fc faad 	bl	8009278 <HAL_GetTick>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d901      	bls.n	800cd2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	e18d      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cd2c:	4b9c      	ldr	r3, [pc, #624]	; (800cfa0 <HAL_RCC_OscConfig+0x57c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d0f0      	beq.n	800cd1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d108      	bne.n	800cd52 <HAL_RCC_OscConfig+0x32e>
 800cd40:	4b96      	ldr	r3, [pc, #600]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd46:	4a95      	ldr	r2, [pc, #596]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd48:	f043 0301 	orr.w	r3, r3, #1
 800cd4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd50:	e024      	b.n	800cd9c <HAL_RCC_OscConfig+0x378>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	2b05      	cmp	r3, #5
 800cd58:	d110      	bne.n	800cd7c <HAL_RCC_OscConfig+0x358>
 800cd5a:	4b90      	ldr	r3, [pc, #576]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd60:	4a8e      	ldr	r2, [pc, #568]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd62:	f043 0304 	orr.w	r3, r3, #4
 800cd66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd6a:	4b8c      	ldr	r3, [pc, #560]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd70:	4a8a      	ldr	r2, [pc, #552]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd72:	f043 0301 	orr.w	r3, r3, #1
 800cd76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd7a:	e00f      	b.n	800cd9c <HAL_RCC_OscConfig+0x378>
 800cd7c:	4b87      	ldr	r3, [pc, #540]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd82:	4a86      	ldr	r2, [pc, #536]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd84:	f023 0301 	bic.w	r3, r3, #1
 800cd88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd8c:	4b83      	ldr	r3, [pc, #524]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd92:	4a82      	ldr	r2, [pc, #520]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cd94:	f023 0304 	bic.w	r3, r3, #4
 800cd98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d016      	beq.n	800cdd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cda4:	f7fc fa68 	bl	8009278 <HAL_GetTick>
 800cda8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdaa:	e00a      	b.n	800cdc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdac:	f7fc fa64 	bl	8009278 <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d901      	bls.n	800cdc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cdbe:	2303      	movs	r3, #3
 800cdc0:	e142      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdc2:	4b76      	ldr	r3, [pc, #472]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdc8:	f003 0302 	and.w	r3, r3, #2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0ed      	beq.n	800cdac <HAL_RCC_OscConfig+0x388>
 800cdd0:	e015      	b.n	800cdfe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdd2:	f7fc fa51 	bl	8009278 <HAL_GetTick>
 800cdd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cdd8:	e00a      	b.n	800cdf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdda:	f7fc fa4d 	bl	8009278 <HAL_GetTick>
 800cdde:	4602      	mov	r2, r0
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d901      	bls.n	800cdf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cdec:	2303      	movs	r3, #3
 800cdee:	e12b      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cdf0:	4b6a      	ldr	r3, [pc, #424]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cdf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdf6:	f003 0302 	and.w	r3, r3, #2
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1ed      	bne.n	800cdda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cdfe:	7ffb      	ldrb	r3, [r7, #31]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d105      	bne.n	800ce10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce04:	4b65      	ldr	r3, [pc, #404]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ce06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce08:	4a64      	ldr	r2, [pc, #400]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ce0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 0320 	and.w	r3, r3, #32
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d03c      	beq.n	800ce96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d01c      	beq.n	800ce5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ce24:	4b5d      	ldr	r3, [pc, #372]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ce26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce2a:	4a5c      	ldr	r2, [pc, #368]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ce2c:	f043 0301 	orr.w	r3, r3, #1
 800ce30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce34:	f7fc fa20 	bl	8009278 <HAL_GetTick>
 800ce38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ce3a:	e008      	b.n	800ce4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce3c:	f7fc fa1c 	bl	8009278 <HAL_GetTick>
 800ce40:	4602      	mov	r2, r0
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	d901      	bls.n	800ce4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	e0fc      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ce4e:	4b53      	ldr	r3, [pc, #332]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ce50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce54:	f003 0302 	and.w	r3, r3, #2
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d0ef      	beq.n	800ce3c <HAL_RCC_OscConfig+0x418>
 800ce5c:	e01b      	b.n	800ce96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ce5e:	4b4f      	ldr	r3, [pc, #316]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ce60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce64:	4a4d      	ldr	r2, [pc, #308]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ce66:	f023 0301 	bic.w	r3, r3, #1
 800ce6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce6e:	f7fc fa03 	bl	8009278 <HAL_GetTick>
 800ce72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ce74:	e008      	b.n	800ce88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce76:	f7fc f9ff 	bl	8009278 <HAL_GetTick>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	d901      	bls.n	800ce88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ce84:	2303      	movs	r3, #3
 800ce86:	e0df      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ce88:	4b44      	ldr	r3, [pc, #272]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ce8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce8e:	f003 0302 	and.w	r3, r3, #2
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1ef      	bne.n	800ce76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	69db      	ldr	r3, [r3, #28]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 80d3 	beq.w	800d046 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cea0:	4b3e      	ldr	r3, [pc, #248]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	f003 030c 	and.w	r3, r3, #12
 800cea8:	2b0c      	cmp	r3, #12
 800ceaa:	f000 808d 	beq.w	800cfc8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	69db      	ldr	r3, [r3, #28]
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d15a      	bne.n	800cf6c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ceb6:	4b39      	ldr	r3, [pc, #228]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a38      	ldr	r2, [pc, #224]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cebc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cec2:	f7fc f9d9 	bl	8009278 <HAL_GetTick>
 800cec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cec8:	e008      	b.n	800cedc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ceca:	f7fc f9d5 	bl	8009278 <HAL_GetTick>
 800cece:	4602      	mov	r2, r0
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d901      	bls.n	800cedc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800ced8:	2303      	movs	r3, #3
 800ceda:	e0b5      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cedc:	4b2f      	ldr	r3, [pc, #188]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d1f0      	bne.n	800ceca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cee8:	4b2c      	ldr	r3, [pc, #176]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	4b2d      	ldr	r3, [pc, #180]	; (800cfa4 <HAL_RCC_OscConfig+0x580>)
 800ceee:	4013      	ands	r3, r2
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	6a11      	ldr	r1, [r2, #32]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cef8:	3a01      	subs	r2, #1
 800cefa:	0112      	lsls	r2, r2, #4
 800cefc:	4311      	orrs	r1, r2
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cf02:	0212      	lsls	r2, r2, #8
 800cf04:	4311      	orrs	r1, r2
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cf0a:	0852      	lsrs	r2, r2, #1
 800cf0c:	3a01      	subs	r2, #1
 800cf0e:	0552      	lsls	r2, r2, #21
 800cf10:	4311      	orrs	r1, r2
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cf16:	0852      	lsrs	r2, r2, #1
 800cf18:	3a01      	subs	r2, #1
 800cf1a:	0652      	lsls	r2, r2, #25
 800cf1c:	4311      	orrs	r1, r2
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cf22:	06d2      	lsls	r2, r2, #27
 800cf24:	430a      	orrs	r2, r1
 800cf26:	491d      	ldr	r1, [pc, #116]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cf2c:	4b1b      	ldr	r3, [pc, #108]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a1a      	ldr	r2, [pc, #104]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cf38:	4b18      	ldr	r3, [pc, #96]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	4a17      	ldr	r2, [pc, #92]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf44:	f7fc f998 	bl	8009278 <HAL_GetTick>
 800cf48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf4a:	e008      	b.n	800cf5e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf4c:	f7fc f994 	bl	8009278 <HAL_GetTick>
 800cf50:	4602      	mov	r2, r0
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d901      	bls.n	800cf5e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	e074      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf5e:	4b0f      	ldr	r3, [pc, #60]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0f0      	beq.n	800cf4c <HAL_RCC_OscConfig+0x528>
 800cf6a:	e06c      	b.n	800d046 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf6c:	4b0b      	ldr	r3, [pc, #44]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a0a      	ldr	r2, [pc, #40]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf76:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cf78:	4b08      	ldr	r3, [pc, #32]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	4a07      	ldr	r2, [pc, #28]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf7e:	f023 0303 	bic.w	r3, r3, #3
 800cf82:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cf84:	4b05      	ldr	r3, [pc, #20]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	4a04      	ldr	r2, [pc, #16]	; (800cf9c <HAL_RCC_OscConfig+0x578>)
 800cf8a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cf8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf94:	f7fc f970 	bl	8009278 <HAL_GetTick>
 800cf98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf9a:	e00e      	b.n	800cfba <HAL_RCC_OscConfig+0x596>
 800cf9c:	40021000 	.word	0x40021000
 800cfa0:	40007000 	.word	0x40007000
 800cfa4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cfa8:	f7fc f966 	bl	8009278 <HAL_GetTick>
 800cfac:	4602      	mov	r2, r0
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	d901      	bls.n	800cfba <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	e046      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cfba:	4b25      	ldr	r3, [pc, #148]	; (800d050 <HAL_RCC_OscConfig+0x62c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1f0      	bne.n	800cfa8 <HAL_RCC_OscConfig+0x584>
 800cfc6:	e03e      	b.n	800d046 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	69db      	ldr	r3, [r3, #28]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d101      	bne.n	800cfd4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e039      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800cfd4:	4b1e      	ldr	r3, [pc, #120]	; (800d050 <HAL_RCC_OscConfig+0x62c>)
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	f003 0203 	and.w	r2, r3, #3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a1b      	ldr	r3, [r3, #32]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d12c      	bne.n	800d042 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff2:	3b01      	subs	r3, #1
 800cff4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d123      	bne.n	800d042 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d004:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d006:	429a      	cmp	r2, r3
 800d008:	d11b      	bne.n	800d042 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d014:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d016:	429a      	cmp	r2, r3
 800d018:	d113      	bne.n	800d042 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d024:	085b      	lsrs	r3, r3, #1
 800d026:	3b01      	subs	r3, #1
 800d028:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d109      	bne.n	800d042 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d038:	085b      	lsrs	r3, r3, #1
 800d03a:	3b01      	subs	r3, #1
 800d03c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d03e:	429a      	cmp	r2, r3
 800d040:	d001      	beq.n	800d046 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e000      	b.n	800d048 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3720      	adds	r7, #32
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	40021000 	.word	0x40021000

0800d054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b086      	sub	sp, #24
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d05e:	2300      	movs	r3, #0
 800d060:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d101      	bne.n	800d06c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	e11e      	b.n	800d2aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d06c:	4b91      	ldr	r3, [pc, #580]	; (800d2b4 <HAL_RCC_ClockConfig+0x260>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f003 030f 	and.w	r3, r3, #15
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	429a      	cmp	r2, r3
 800d078:	d910      	bls.n	800d09c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d07a:	4b8e      	ldr	r3, [pc, #568]	; (800d2b4 <HAL_RCC_ClockConfig+0x260>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f023 020f 	bic.w	r2, r3, #15
 800d082:	498c      	ldr	r1, [pc, #560]	; (800d2b4 <HAL_RCC_ClockConfig+0x260>)
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	4313      	orrs	r3, r2
 800d088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d08a:	4b8a      	ldr	r3, [pc, #552]	; (800d2b4 <HAL_RCC_ClockConfig+0x260>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f003 030f 	and.w	r3, r3, #15
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	429a      	cmp	r2, r3
 800d096:	d001      	beq.n	800d09c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	e106      	b.n	800d2aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f003 0301 	and.w	r3, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d073      	beq.n	800d190 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	2b03      	cmp	r3, #3
 800d0ae:	d129      	bne.n	800d104 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0b0:	4b81      	ldr	r3, [pc, #516]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e0f4      	b.n	800d2aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d0c0:	f000 f972 	bl	800d3a8 <RCC_GetSysClockFreqFromPLLSource>
 800d0c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	4a7c      	ldr	r2, [pc, #496]	; (800d2bc <HAL_RCC_ClockConfig+0x268>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d93f      	bls.n	800d14e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d0ce:	4b7a      	ldr	r3, [pc, #488]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d009      	beq.n	800d0ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d033      	beq.n	800d14e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d12f      	bne.n	800d14e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d0ee:	4b72      	ldr	r3, [pc, #456]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d0f6:	4a70      	ldr	r2, [pc, #448]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d0fe:	2380      	movs	r3, #128	; 0x80
 800d100:	617b      	str	r3, [r7, #20]
 800d102:	e024      	b.n	800d14e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d107      	bne.n	800d11c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d10c:	4b6a      	ldr	r3, [pc, #424]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d114:	2b00      	cmp	r3, #0
 800d116:	d109      	bne.n	800d12c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e0c6      	b.n	800d2aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d11c:	4b66      	ldr	r3, [pc, #408]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d124:	2b00      	cmp	r3, #0
 800d126:	d101      	bne.n	800d12c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	e0be      	b.n	800d2aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d12c:	f000 f8ce 	bl	800d2cc <HAL_RCC_GetSysClockFreq>
 800d130:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	4a61      	ldr	r2, [pc, #388]	; (800d2bc <HAL_RCC_ClockConfig+0x268>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d909      	bls.n	800d14e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d13a:	4b5f      	ldr	r3, [pc, #380]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d142:	4a5d      	ldr	r2, [pc, #372]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d148:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d14a:	2380      	movs	r3, #128	; 0x80
 800d14c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d14e:	4b5a      	ldr	r3, [pc, #360]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	f023 0203 	bic.w	r2, r3, #3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	4957      	ldr	r1, [pc, #348]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d15c:	4313      	orrs	r3, r2
 800d15e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d160:	f7fc f88a 	bl	8009278 <HAL_GetTick>
 800d164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d166:	e00a      	b.n	800d17e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d168:	f7fc f886 	bl	8009278 <HAL_GetTick>
 800d16c:	4602      	mov	r2, r0
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	1ad3      	subs	r3, r2, r3
 800d172:	f241 3288 	movw	r2, #5000	; 0x1388
 800d176:	4293      	cmp	r3, r2
 800d178:	d901      	bls.n	800d17e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d17a:	2303      	movs	r3, #3
 800d17c:	e095      	b.n	800d2aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d17e:	4b4e      	ldr	r3, [pc, #312]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	f003 020c 	and.w	r2, r3, #12
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d1eb      	bne.n	800d168 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f003 0302 	and.w	r3, r3, #2
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d023      	beq.n	800d1e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 0304 	and.w	r3, r3, #4
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d005      	beq.n	800d1b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d1a8:	4b43      	ldr	r3, [pc, #268]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d1aa:	689b      	ldr	r3, [r3, #8]
 800d1ac:	4a42      	ldr	r2, [pc, #264]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d1ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d1b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f003 0308 	and.w	r3, r3, #8
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d007      	beq.n	800d1d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d1c0:	4b3d      	ldr	r3, [pc, #244]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d1c8:	4a3b      	ldr	r2, [pc, #236]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d1ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d1ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d1d0:	4b39      	ldr	r3, [pc, #228]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	4936      	ldr	r1, [pc, #216]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	608b      	str	r3, [r1, #8]
 800d1e2:	e008      	b.n	800d1f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2b80      	cmp	r3, #128	; 0x80
 800d1e8:	d105      	bne.n	800d1f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d1ea:	4b33      	ldr	r3, [pc, #204]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	4a32      	ldr	r2, [pc, #200]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d1f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d1f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d1f6:	4b2f      	ldr	r3, [pc, #188]	; (800d2b4 <HAL_RCC_ClockConfig+0x260>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 030f 	and.w	r3, r3, #15
 800d1fe:	683a      	ldr	r2, [r7, #0]
 800d200:	429a      	cmp	r2, r3
 800d202:	d21d      	bcs.n	800d240 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d204:	4b2b      	ldr	r3, [pc, #172]	; (800d2b4 <HAL_RCC_ClockConfig+0x260>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f023 020f 	bic.w	r2, r3, #15
 800d20c:	4929      	ldr	r1, [pc, #164]	; (800d2b4 <HAL_RCC_ClockConfig+0x260>)
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	4313      	orrs	r3, r2
 800d212:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d214:	f7fc f830 	bl	8009278 <HAL_GetTick>
 800d218:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d21a:	e00a      	b.n	800d232 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d21c:	f7fc f82c 	bl	8009278 <HAL_GetTick>
 800d220:	4602      	mov	r2, r0
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	1ad3      	subs	r3, r2, r3
 800d226:	f241 3288 	movw	r2, #5000	; 0x1388
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d901      	bls.n	800d232 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d22e:	2303      	movs	r3, #3
 800d230:	e03b      	b.n	800d2aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d232:	4b20      	ldr	r3, [pc, #128]	; (800d2b4 <HAL_RCC_ClockConfig+0x260>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 030f 	and.w	r3, r3, #15
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d1ed      	bne.n	800d21c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 0304 	and.w	r3, r3, #4
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d008      	beq.n	800d25e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d24c:	4b1a      	ldr	r3, [pc, #104]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	4917      	ldr	r1, [pc, #92]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 0308 	and.w	r3, r3, #8
 800d266:	2b00      	cmp	r3, #0
 800d268:	d009      	beq.n	800d27e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d26a:	4b13      	ldr	r3, [pc, #76]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	490f      	ldr	r1, [pc, #60]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d27a:	4313      	orrs	r3, r2
 800d27c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d27e:	f000 f825 	bl	800d2cc <HAL_RCC_GetSysClockFreq>
 800d282:	4601      	mov	r1, r0
 800d284:	4b0c      	ldr	r3, [pc, #48]	; (800d2b8 <HAL_RCC_ClockConfig+0x264>)
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	091b      	lsrs	r3, r3, #4
 800d28a:	f003 030f 	and.w	r3, r3, #15
 800d28e:	4a0c      	ldr	r2, [pc, #48]	; (800d2c0 <HAL_RCC_ClockConfig+0x26c>)
 800d290:	5cd3      	ldrb	r3, [r2, r3]
 800d292:	f003 031f 	and.w	r3, r3, #31
 800d296:	fa21 f303 	lsr.w	r3, r1, r3
 800d29a:	4a0a      	ldr	r2, [pc, #40]	; (800d2c4 <HAL_RCC_ClockConfig+0x270>)
 800d29c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d29e:	4b0a      	ldr	r3, [pc, #40]	; (800d2c8 <HAL_RCC_ClockConfig+0x274>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fb ff9c 	bl	80091e0 <HAL_InitTick>
 800d2a8:	4603      	mov	r3, r0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	40022000 	.word	0x40022000
 800d2b8:	40021000 	.word	0x40021000
 800d2bc:	04c4b400 	.word	0x04c4b400
 800d2c0:	080169f0 	.word	0x080169f0
 800d2c4:	20000c34 	.word	0x20000c34
 800d2c8:	20000c38 	.word	0x20000c38

0800d2cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b087      	sub	sp, #28
 800d2d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d2d2:	4b2c      	ldr	r3, [pc, #176]	; (800d384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	f003 030c 	and.w	r3, r3, #12
 800d2da:	2b04      	cmp	r3, #4
 800d2dc:	d102      	bne.n	800d2e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d2de:	4b2a      	ldr	r3, [pc, #168]	; (800d388 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d2e0:	613b      	str	r3, [r7, #16]
 800d2e2:	e047      	b.n	800d374 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d2e4:	4b27      	ldr	r3, [pc, #156]	; (800d384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	f003 030c 	and.w	r3, r3, #12
 800d2ec:	2b08      	cmp	r3, #8
 800d2ee:	d102      	bne.n	800d2f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d2f0:	4b26      	ldr	r3, [pc, #152]	; (800d38c <HAL_RCC_GetSysClockFreq+0xc0>)
 800d2f2:	613b      	str	r3, [r7, #16]
 800d2f4:	e03e      	b.n	800d374 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d2f6:	4b23      	ldr	r3, [pc, #140]	; (800d384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	f003 030c 	and.w	r3, r3, #12
 800d2fe:	2b0c      	cmp	r3, #12
 800d300:	d136      	bne.n	800d370 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d302:	4b20      	ldr	r3, [pc, #128]	; (800d384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	f003 0303 	and.w	r3, r3, #3
 800d30a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d30c:	4b1d      	ldr	r3, [pc, #116]	; (800d384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	091b      	lsrs	r3, r3, #4
 800d312:	f003 030f 	and.w	r3, r3, #15
 800d316:	3301      	adds	r3, #1
 800d318:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d10c      	bne.n	800d33a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d320:	4a1a      	ldr	r2, [pc, #104]	; (800d38c <HAL_RCC_GetSysClockFreq+0xc0>)
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	fbb2 f3f3 	udiv	r3, r2, r3
 800d328:	4a16      	ldr	r2, [pc, #88]	; (800d384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d32a:	68d2      	ldr	r2, [r2, #12]
 800d32c:	0a12      	lsrs	r2, r2, #8
 800d32e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d332:	fb02 f303 	mul.w	r3, r2, r3
 800d336:	617b      	str	r3, [r7, #20]
      break;
 800d338:	e00c      	b.n	800d354 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d33a:	4a13      	ldr	r2, [pc, #76]	; (800d388 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d342:	4a10      	ldr	r2, [pc, #64]	; (800d384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d344:	68d2      	ldr	r2, [r2, #12]
 800d346:	0a12      	lsrs	r2, r2, #8
 800d348:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d34c:	fb02 f303 	mul.w	r3, r2, r3
 800d350:	617b      	str	r3, [r7, #20]
      break;
 800d352:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d354:	4b0b      	ldr	r3, [pc, #44]	; (800d384 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	0e5b      	lsrs	r3, r3, #25
 800d35a:	f003 0303 	and.w	r3, r3, #3
 800d35e:	3301      	adds	r3, #1
 800d360:	005b      	lsls	r3, r3, #1
 800d362:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	fbb2 f3f3 	udiv	r3, r2, r3
 800d36c:	613b      	str	r3, [r7, #16]
 800d36e:	e001      	b.n	800d374 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d370:	2300      	movs	r3, #0
 800d372:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d374:	693b      	ldr	r3, [r7, #16]
}
 800d376:	4618      	mov	r0, r3
 800d378:	371c      	adds	r7, #28
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	40021000 	.word	0x40021000
 800d388:	00f42400 	.word	0x00f42400
 800d38c:	007a1200 	.word	0x007a1200

0800d390 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d390:	b480      	push	{r7}
 800d392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d394:	4b03      	ldr	r3, [pc, #12]	; (800d3a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800d396:	681b      	ldr	r3, [r3, #0]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	20000c34 	.word	0x20000c34

0800d3a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d3ae:	4b1e      	ldr	r3, [pc, #120]	; (800d428 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	f003 0303 	and.w	r3, r3, #3
 800d3b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d3b8:	4b1b      	ldr	r3, [pc, #108]	; (800d428 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	091b      	lsrs	r3, r3, #4
 800d3be:	f003 030f 	and.w	r3, r3, #15
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d10c      	bne.n	800d3e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d3cc:	4a17      	ldr	r2, [pc, #92]	; (800d42c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3d4:	4a14      	ldr	r2, [pc, #80]	; (800d428 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d3d6:	68d2      	ldr	r2, [r2, #12]
 800d3d8:	0a12      	lsrs	r2, r2, #8
 800d3da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d3de:	fb02 f303 	mul.w	r3, r2, r3
 800d3e2:	617b      	str	r3, [r7, #20]
    break;
 800d3e4:	e00c      	b.n	800d400 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d3e6:	4a12      	ldr	r2, [pc, #72]	; (800d430 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ee:	4a0e      	ldr	r2, [pc, #56]	; (800d428 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d3f0:	68d2      	ldr	r2, [r2, #12]
 800d3f2:	0a12      	lsrs	r2, r2, #8
 800d3f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d3f8:	fb02 f303 	mul.w	r3, r2, r3
 800d3fc:	617b      	str	r3, [r7, #20]
    break;
 800d3fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d400:	4b09      	ldr	r3, [pc, #36]	; (800d428 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	0e5b      	lsrs	r3, r3, #25
 800d406:	f003 0303 	and.w	r3, r3, #3
 800d40a:	3301      	adds	r3, #1
 800d40c:	005b      	lsls	r3, r3, #1
 800d40e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d410:	697a      	ldr	r2, [r7, #20]
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	fbb2 f3f3 	udiv	r3, r2, r3
 800d418:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d41a:	687b      	ldr	r3, [r7, #4]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	371c      	adds	r7, #28
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr
 800d428:	40021000 	.word	0x40021000
 800d42c:	007a1200 	.word	0x007a1200
 800d430:	00f42400 	.word	0x00f42400

0800d434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d43c:	2300      	movs	r3, #0
 800d43e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d440:	2300      	movs	r3, #0
 800d442:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 8098 	beq.w	800d582 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d452:	2300      	movs	r3, #0
 800d454:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d456:	4b43      	ldr	r3, [pc, #268]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d45a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10d      	bne.n	800d47e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d462:	4b40      	ldr	r3, [pc, #256]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d466:	4a3f      	ldr	r2, [pc, #252]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d46c:	6593      	str	r3, [r2, #88]	; 0x58
 800d46e:	4b3d      	ldr	r3, [pc, #244]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d476:	60bb      	str	r3, [r7, #8]
 800d478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d47a:	2301      	movs	r3, #1
 800d47c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d47e:	4b3a      	ldr	r3, [pc, #232]	; (800d568 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4a39      	ldr	r2, [pc, #228]	; (800d568 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d488:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d48a:	f7fb fef5 	bl	8009278 <HAL_GetTick>
 800d48e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d490:	e009      	b.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d492:	f7fb fef1 	bl	8009278 <HAL_GetTick>
 800d496:	4602      	mov	r2, r0
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d902      	bls.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	74fb      	strb	r3, [r7, #19]
        break;
 800d4a4:	e005      	b.n	800d4b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d4a6:	4b30      	ldr	r3, [pc, #192]	; (800d568 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d0ef      	beq.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d4b2:	7cfb      	ldrb	r3, [r7, #19]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d159      	bne.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d4b8:	4b2a      	ldr	r3, [pc, #168]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d01e      	beq.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d019      	beq.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d4d4:	4b23      	ldr	r3, [pc, #140]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d4e0:	4b20      	ldr	r3, [pc, #128]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4e6:	4a1f      	ldr	r2, [pc, #124]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d4e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d4f0:	4b1c      	ldr	r3, [pc, #112]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4f6:	4a1b      	ldr	r2, [pc, #108]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d4f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d500:	4a18      	ldr	r2, [pc, #96]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	f003 0301 	and.w	r3, r3, #1
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d016      	beq.n	800d540 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d512:	f7fb feb1 	bl	8009278 <HAL_GetTick>
 800d516:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d518:	e00b      	b.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d51a:	f7fb fead 	bl	8009278 <HAL_GetTick>
 800d51e:	4602      	mov	r2, r0
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	f241 3288 	movw	r2, #5000	; 0x1388
 800d528:	4293      	cmp	r3, r2
 800d52a:	d902      	bls.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	74fb      	strb	r3, [r7, #19]
            break;
 800d530:	e006      	b.n	800d540 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d532:	4b0c      	ldr	r3, [pc, #48]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d538:	f003 0302 	and.w	r3, r3, #2
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d0ec      	beq.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d540:	7cfb      	ldrb	r3, [r7, #19]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10b      	bne.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d546:	4b07      	ldr	r3, [pc, #28]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d54c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d554:	4903      	ldr	r1, [pc, #12]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d556:	4313      	orrs	r3, r2
 800d558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d55c:	e008      	b.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d55e:	7cfb      	ldrb	r3, [r7, #19]
 800d560:	74bb      	strb	r3, [r7, #18]
 800d562:	e005      	b.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d564:	40021000 	.word	0x40021000
 800d568:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d56c:	7cfb      	ldrb	r3, [r7, #19]
 800d56e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d570:	7c7b      	ldrb	r3, [r7, #17]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d105      	bne.n	800d582 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d576:	4baf      	ldr	r3, [pc, #700]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d57a:	4aae      	ldr	r2, [pc, #696]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d57c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d580:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00a      	beq.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d58e:	4ba9      	ldr	r3, [pc, #676]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d594:	f023 0203 	bic.w	r2, r3, #3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	49a5      	ldr	r1, [pc, #660]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f003 0302 	and.w	r3, r3, #2
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00a      	beq.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d5b0:	4ba0      	ldr	r3, [pc, #640]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5b6:	f023 020c 	bic.w	r2, r3, #12
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	499d      	ldr	r1, [pc, #628]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f003 0304 	and.w	r3, r3, #4
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00a      	beq.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d5d2:	4b98      	ldr	r3, [pc, #608]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	4994      	ldr	r1, [pc, #592]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f003 0308 	and.w	r3, r3, #8
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00a      	beq.n	800d60a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d5f4:	4b8f      	ldr	r3, [pc, #572]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	498c      	ldr	r1, [pc, #560]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d604:	4313      	orrs	r3, r2
 800d606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f003 0310 	and.w	r3, r3, #16
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00a      	beq.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d616:	4b87      	ldr	r3, [pc, #540]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d61c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	4983      	ldr	r1, [pc, #524]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d626:	4313      	orrs	r3, r2
 800d628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f003 0320 	and.w	r3, r3, #32
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00a      	beq.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d638:	4b7e      	ldr	r3, [pc, #504]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d63e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	699b      	ldr	r3, [r3, #24]
 800d646:	497b      	ldr	r1, [pc, #492]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d648:	4313      	orrs	r3, r2
 800d64a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00a      	beq.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d65a:	4b76      	ldr	r3, [pc, #472]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d660:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	69db      	ldr	r3, [r3, #28]
 800d668:	4972      	ldr	r1, [pc, #456]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00a      	beq.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d67c:	4b6d      	ldr	r3, [pc, #436]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d682:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	496a      	ldr	r1, [pc, #424]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d68c:	4313      	orrs	r3, r2
 800d68e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00a      	beq.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d69e:	4b65      	ldr	r3, [pc, #404]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ac:	4961      	ldr	r1, [pc, #388]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00a      	beq.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d6c0:	4b5c      	ldr	r3, [pc, #368]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d6c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d6c6:	f023 0203 	bic.w	r2, r3, #3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ce:	4959      	ldr	r1, [pc, #356]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00a      	beq.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d6e2:	4b54      	ldr	r3, [pc, #336]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f0:	4950      	ldr	r1, [pc, #320]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d700:	2b00      	cmp	r3, #0
 800d702:	d015      	beq.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d704:	4b4b      	ldr	r3, [pc, #300]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d70a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d712:	4948      	ldr	r1, [pc, #288]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d714:	4313      	orrs	r3, r2
 800d716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d722:	d105      	bne.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d724:	4b43      	ldr	r3, [pc, #268]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	4a42      	ldr	r2, [pc, #264]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d72a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d72e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d015      	beq.n	800d768 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d73c:	4b3d      	ldr	r3, [pc, #244]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d74a:	493a      	ldr	r1, [pc, #232]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d74c:	4313      	orrs	r3, r2
 800d74e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d75a:	d105      	bne.n	800d768 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d75c:	4b35      	ldr	r3, [pc, #212]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	4a34      	ldr	r2, [pc, #208]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d766:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d770:	2b00      	cmp	r3, #0
 800d772:	d015      	beq.n	800d7a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d774:	4b2f      	ldr	r3, [pc, #188]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d77a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	492c      	ldr	r1, [pc, #176]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d784:	4313      	orrs	r3, r2
 800d786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d792:	d105      	bne.n	800d7a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d794:	4b27      	ldr	r3, [pc, #156]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	4a26      	ldr	r2, [pc, #152]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d79a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d79e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d015      	beq.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d7ac:	4b21      	ldr	r3, [pc, #132]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7ba:	491e      	ldr	r1, [pc, #120]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7ca:	d105      	bne.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7cc:	4b19      	ldr	r3, [pc, #100]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	4a18      	ldr	r2, [pc, #96]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d7d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d015      	beq.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d7e4:	4b13      	ldr	r3, [pc, #76]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f2:	4910      	ldr	r1, [pc, #64]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d802:	d105      	bne.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d804:	4b0b      	ldr	r3, [pc, #44]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	4a0a      	ldr	r2, [pc, #40]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d80a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d80e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d018      	beq.n	800d84e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d81c:	4b05      	ldr	r3, [pc, #20]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d822:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d82a:	4902      	ldr	r1, [pc, #8]	; (800d834 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d82c:	4313      	orrs	r3, r2
 800d82e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d832:	e001      	b.n	800d838 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d834:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d83c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d840:	d105      	bne.n	800d84e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d842:	4b21      	ldr	r3, [pc, #132]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	4a20      	ldr	r2, [pc, #128]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d84c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d856:	2b00      	cmp	r3, #0
 800d858:	d015      	beq.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d85a:	4b1b      	ldr	r3, [pc, #108]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d860:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d868:	4917      	ldr	r1, [pc, #92]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d86a:	4313      	orrs	r3, r2
 800d86c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d878:	d105      	bne.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d87a:	4b13      	ldr	r3, [pc, #76]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	4a12      	ldr	r2, [pc, #72]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d884:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d015      	beq.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d892:	4b0d      	ldr	r3, [pc, #52]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d894:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8a0:	4909      	ldr	r1, [pc, #36]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d8b0:	d105      	bne.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d8b2:	4b05      	ldr	r3, [pc, #20]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	4a04      	ldr	r2, [pc, #16]	; (800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d8b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8bc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d8be:	7cbb      	ldrb	r3, [r7, #18]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3718      	adds	r7, #24
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	40021000 	.word	0x40021000

0800d8cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d101      	bne.n	800d8de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e084      	b.n	800d9e8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d106      	bne.n	800d8fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f7fa fda9 	bl	8008450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2202      	movs	r2, #2
 800d902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d914:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d91e:	d902      	bls.n	800d926 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d920:	2300      	movs	r3, #0
 800d922:	60fb      	str	r3, [r7, #12]
 800d924:	e002      	b.n	800d92c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d92a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d934:	d007      	beq.n	800d946 <HAL_SPI_Init+0x7a>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d93e:	d002      	beq.n	800d946 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10b      	bne.n	800d966 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d956:	d903      	bls.n	800d960 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2202      	movs	r2, #2
 800d95c:	631a      	str	r2, [r3, #48]	; 0x30
 800d95e:	e002      	b.n	800d966 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	685a      	ldr	r2, [r3, #4]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	431a      	orrs	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	431a      	orrs	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	695b      	ldr	r3, [r3, #20]
 800d97a:	431a      	orrs	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	699b      	ldr	r3, [r3, #24]
 800d980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d984:	431a      	orrs	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	431a      	orrs	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a1b      	ldr	r3, [r3, #32]
 800d990:	ea42 0103 	orr.w	r1, r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	430a      	orrs	r2, r1
 800d99e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	699b      	ldr	r3, [r3, #24]
 800d9a4:	0c1b      	lsrs	r3, r3, #16
 800d9a6:	f003 0204 	and.w	r2, r3, #4
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ae:	431a      	orrs	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b4:	431a      	orrs	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	ea42 0103 	orr.w	r1, r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	430a      	orrs	r2, r1
 800d9c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	69da      	ldr	r2, [r3, #28]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d9d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d101      	bne.n	800da02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9fe:	2301      	movs	r3, #1
 800da00:	e049      	b.n	800da96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7fb fa7c 	bl	8008f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2202      	movs	r2, #2
 800da20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	3304      	adds	r3, #4
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f001 fb9e 	bl	800f170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2201      	movs	r2, #1
 800da48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2201      	movs	r2, #1
 800da80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3708      	adds	r7, #8
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
	...

0800daa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d001      	beq.n	800dab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800dab4:	2301      	movs	r3, #1
 800dab6:	e019      	b.n	800daec <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2202      	movs	r2, #2
 800dabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	689a      	ldr	r2, [r3, #8]
 800dac6:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <HAL_TIM_Base_Start+0x58>)
 800dac8:	4013      	ands	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b06      	cmp	r3, #6
 800dad0:	d00b      	beq.n	800daea <HAL_TIM_Base_Start+0x4a>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dad8:	d007      	beq.n	800daea <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f042 0201 	orr.w	r2, r2, #1
 800dae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	00010007 	.word	0x00010007

0800dafc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	6a1a      	ldr	r2, [r3, #32]
 800db0a:	f241 1311 	movw	r3, #4369	; 0x1111
 800db0e:	4013      	ands	r3, r2
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10f      	bne.n	800db34 <HAL_TIM_Base_Stop+0x38>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	6a1a      	ldr	r2, [r3, #32]
 800db1a:	f244 4344 	movw	r3, #17476	; 0x4444
 800db1e:	4013      	ands	r3, r2
 800db20:	2b00      	cmp	r3, #0
 800db22:	d107      	bne.n	800db34 <HAL_TIM_Base_Stop+0x38>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f022 0201 	bic.w	r2, r2, #1
 800db32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
	...

0800db4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b085      	sub	sp, #20
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d001      	beq.n	800db64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	e021      	b.n	800dba8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2202      	movs	r2, #2
 800db68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68da      	ldr	r2, [r3, #12]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f042 0201 	orr.w	r2, r2, #1
 800db7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	689a      	ldr	r2, [r3, #8]
 800db82:	4b0c      	ldr	r3, [pc, #48]	; (800dbb4 <HAL_TIM_Base_Start_IT+0x68>)
 800db84:	4013      	ands	r3, r2
 800db86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b06      	cmp	r3, #6
 800db8c:	d00b      	beq.n	800dba6 <HAL_TIM_Base_Start_IT+0x5a>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db94:	d007      	beq.n	800dba6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f042 0201 	orr.w	r2, r2, #1
 800dba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3714      	adds	r7, #20
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr
 800dbb4:	00010007 	.word	0x00010007

0800dbb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f022 0201 	bic.w	r2, r2, #1
 800dbce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	6a1a      	ldr	r2, [r3, #32]
 800dbd6:	f241 1311 	movw	r3, #4369	; 0x1111
 800dbda:	4013      	ands	r3, r2
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10f      	bne.n	800dc00 <HAL_TIM_Base_Stop_IT+0x48>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6a1a      	ldr	r2, [r3, #32]
 800dbe6:	f244 4344 	movw	r3, #17476	; 0x4444
 800dbea:	4013      	ands	r3, r2
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d107      	bne.n	800dc00 <HAL_TIM_Base_Stop_IT+0x48>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f022 0201 	bic.w	r2, r2, #1
 800dbfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	370c      	adds	r7, #12
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b082      	sub	sp, #8
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e049      	b.n	800dcbc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d106      	bne.n	800dc42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 f841 	bl	800dcc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2202      	movs	r2, #2
 800dc46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	3304      	adds	r3, #4
 800dc52:	4619      	mov	r1, r3
 800dc54:	4610      	mov	r0, r2
 800dc56:	f001 fa8b 	bl	800f170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2201      	movs	r2, #1
 800dc66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2201      	movs	r2, #1
 800dc76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2201      	movs	r2, #1
 800dc86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2201      	movs	r2, #1
 800dc96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2201      	movs	r2, #1
 800dcae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dcba:	2300      	movs	r3, #0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d109      	bne.n	800dcfc <HAL_TIM_PWM_Start+0x24>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	bf14      	ite	ne
 800dcf4:	2301      	movne	r3, #1
 800dcf6:	2300      	moveq	r3, #0
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	e03c      	b.n	800dd76 <HAL_TIM_PWM_Start+0x9e>
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2b04      	cmp	r3, #4
 800dd00:	d109      	bne.n	800dd16 <HAL_TIM_PWM_Start+0x3e>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	bf14      	ite	ne
 800dd0e:	2301      	movne	r3, #1
 800dd10:	2300      	moveq	r3, #0
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	e02f      	b.n	800dd76 <HAL_TIM_PWM_Start+0x9e>
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	2b08      	cmp	r3, #8
 800dd1a:	d109      	bne.n	800dd30 <HAL_TIM_PWM_Start+0x58>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	bf14      	ite	ne
 800dd28:	2301      	movne	r3, #1
 800dd2a:	2300      	moveq	r3, #0
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	e022      	b.n	800dd76 <HAL_TIM_PWM_Start+0x9e>
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	2b0c      	cmp	r3, #12
 800dd34:	d109      	bne.n	800dd4a <HAL_TIM_PWM_Start+0x72>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	bf14      	ite	ne
 800dd42:	2301      	movne	r3, #1
 800dd44:	2300      	moveq	r3, #0
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	e015      	b.n	800dd76 <HAL_TIM_PWM_Start+0x9e>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b10      	cmp	r3, #16
 800dd4e:	d109      	bne.n	800dd64 <HAL_TIM_PWM_Start+0x8c>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	bf14      	ite	ne
 800dd5c:	2301      	movne	r3, #1
 800dd5e:	2300      	moveq	r3, #0
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	e008      	b.n	800dd76 <HAL_TIM_PWM_Start+0x9e>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	bf14      	ite	ne
 800dd70:	2301      	movne	r3, #1
 800dd72:	2300      	moveq	r3, #0
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e073      	b.n	800de66 <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d104      	bne.n	800dd8e <HAL_TIM_PWM_Start+0xb6>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2202      	movs	r2, #2
 800dd88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd8c:	e023      	b.n	800ddd6 <HAL_TIM_PWM_Start+0xfe>
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2b04      	cmp	r3, #4
 800dd92:	d104      	bne.n	800dd9e <HAL_TIM_PWM_Start+0xc6>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2202      	movs	r2, #2
 800dd98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd9c:	e01b      	b.n	800ddd6 <HAL_TIM_PWM_Start+0xfe>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b08      	cmp	r3, #8
 800dda2:	d104      	bne.n	800ddae <HAL_TIM_PWM_Start+0xd6>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2202      	movs	r2, #2
 800dda8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ddac:	e013      	b.n	800ddd6 <HAL_TIM_PWM_Start+0xfe>
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	2b0c      	cmp	r3, #12
 800ddb2:	d104      	bne.n	800ddbe <HAL_TIM_PWM_Start+0xe6>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2202      	movs	r2, #2
 800ddb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ddbc:	e00b      	b.n	800ddd6 <HAL_TIM_PWM_Start+0xfe>
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	2b10      	cmp	r3, #16
 800ddc2:	d104      	bne.n	800ddce <HAL_TIM_PWM_Start+0xf6>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2202      	movs	r2, #2
 800ddc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ddcc:	e003      	b.n	800ddd6 <HAL_TIM_PWM_Start+0xfe>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2201      	movs	r2, #1
 800dddc:	6839      	ldr	r1, [r7, #0]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f002 f81a 	bl	800fe18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a21      	ldr	r2, [pc, #132]	; (800de70 <HAL_TIM_PWM_Start+0x198>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d018      	beq.n	800de20 <HAL_TIM_PWM_Start+0x148>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a20      	ldr	r2, [pc, #128]	; (800de74 <HAL_TIM_PWM_Start+0x19c>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d013      	beq.n	800de20 <HAL_TIM_PWM_Start+0x148>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a1e      	ldr	r2, [pc, #120]	; (800de78 <HAL_TIM_PWM_Start+0x1a0>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d00e      	beq.n	800de20 <HAL_TIM_PWM_Start+0x148>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a1d      	ldr	r2, [pc, #116]	; (800de7c <HAL_TIM_PWM_Start+0x1a4>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d009      	beq.n	800de20 <HAL_TIM_PWM_Start+0x148>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a1b      	ldr	r2, [pc, #108]	; (800de80 <HAL_TIM_PWM_Start+0x1a8>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d004      	beq.n	800de20 <HAL_TIM_PWM_Start+0x148>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a1a      	ldr	r2, [pc, #104]	; (800de84 <HAL_TIM_PWM_Start+0x1ac>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d101      	bne.n	800de24 <HAL_TIM_PWM_Start+0x14c>
 800de20:	2301      	movs	r3, #1
 800de22:	e000      	b.n	800de26 <HAL_TIM_PWM_Start+0x14e>
 800de24:	2300      	movs	r3, #0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d007      	beq.n	800de3a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	689a      	ldr	r2, [r3, #8]
 800de40:	4b11      	ldr	r3, [pc, #68]	; (800de88 <HAL_TIM_PWM_Start+0x1b0>)
 800de42:	4013      	ands	r3, r2
 800de44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b06      	cmp	r3, #6
 800de4a:	d00b      	beq.n	800de64 <HAL_TIM_PWM_Start+0x18c>
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de52:	d007      	beq.n	800de64 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f042 0201 	orr.w	r2, r2, #1
 800de62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	40012c00 	.word	0x40012c00
 800de74:	40013400 	.word	0x40013400
 800de78:	40014000 	.word	0x40014000
 800de7c:	40014400 	.word	0x40014400
 800de80:	40014800 	.word	0x40014800
 800de84:	40015000 	.word	0x40015000
 800de88:	00010007 	.word	0x00010007

0800de8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2200      	movs	r2, #0
 800de9c:	6839      	ldr	r1, [r7, #0]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f001 ffba 	bl	800fe18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4a40      	ldr	r2, [pc, #256]	; (800dfac <HAL_TIM_PWM_Stop+0x120>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d018      	beq.n	800dee0 <HAL_TIM_PWM_Stop+0x54>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4a3f      	ldr	r2, [pc, #252]	; (800dfb0 <HAL_TIM_PWM_Stop+0x124>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d013      	beq.n	800dee0 <HAL_TIM_PWM_Stop+0x54>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4a3d      	ldr	r2, [pc, #244]	; (800dfb4 <HAL_TIM_PWM_Stop+0x128>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d00e      	beq.n	800dee0 <HAL_TIM_PWM_Stop+0x54>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a3c      	ldr	r2, [pc, #240]	; (800dfb8 <HAL_TIM_PWM_Stop+0x12c>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d009      	beq.n	800dee0 <HAL_TIM_PWM_Stop+0x54>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a3a      	ldr	r2, [pc, #232]	; (800dfbc <HAL_TIM_PWM_Stop+0x130>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d004      	beq.n	800dee0 <HAL_TIM_PWM_Stop+0x54>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a39      	ldr	r2, [pc, #228]	; (800dfc0 <HAL_TIM_PWM_Stop+0x134>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d101      	bne.n	800dee4 <HAL_TIM_PWM_Stop+0x58>
 800dee0:	2301      	movs	r3, #1
 800dee2:	e000      	b.n	800dee6 <HAL_TIM_PWM_Stop+0x5a>
 800dee4:	2300      	movs	r3, #0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d017      	beq.n	800df1a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	6a1a      	ldr	r2, [r3, #32]
 800def0:	f241 1311 	movw	r3, #4369	; 0x1111
 800def4:	4013      	ands	r3, r2
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10f      	bne.n	800df1a <HAL_TIM_PWM_Stop+0x8e>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	6a1a      	ldr	r2, [r3, #32]
 800df00:	f244 4344 	movw	r3, #17476	; 0x4444
 800df04:	4013      	ands	r3, r2
 800df06:	2b00      	cmp	r3, #0
 800df08:	d107      	bne.n	800df1a <HAL_TIM_PWM_Stop+0x8e>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800df18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	6a1a      	ldr	r2, [r3, #32]
 800df20:	f241 1311 	movw	r3, #4369	; 0x1111
 800df24:	4013      	ands	r3, r2
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10f      	bne.n	800df4a <HAL_TIM_PWM_Stop+0xbe>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	6a1a      	ldr	r2, [r3, #32]
 800df30:	f244 4344 	movw	r3, #17476	; 0x4444
 800df34:	4013      	ands	r3, r2
 800df36:	2b00      	cmp	r3, #0
 800df38:	d107      	bne.n	800df4a <HAL_TIM_PWM_Stop+0xbe>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f022 0201 	bic.w	r2, r2, #1
 800df48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d104      	bne.n	800df5a <HAL_TIM_PWM_Stop+0xce>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800df58:	e023      	b.n	800dfa2 <HAL_TIM_PWM_Stop+0x116>
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	2b04      	cmp	r3, #4
 800df5e:	d104      	bne.n	800df6a <HAL_TIM_PWM_Stop+0xde>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2201      	movs	r2, #1
 800df64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800df68:	e01b      	b.n	800dfa2 <HAL_TIM_PWM_Stop+0x116>
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	2b08      	cmp	r3, #8
 800df6e:	d104      	bne.n	800df7a <HAL_TIM_PWM_Stop+0xee>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2201      	movs	r2, #1
 800df74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800df78:	e013      	b.n	800dfa2 <HAL_TIM_PWM_Stop+0x116>
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	2b0c      	cmp	r3, #12
 800df7e:	d104      	bne.n	800df8a <HAL_TIM_PWM_Stop+0xfe>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800df88:	e00b      	b.n	800dfa2 <HAL_TIM_PWM_Stop+0x116>
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b10      	cmp	r3, #16
 800df8e:	d104      	bne.n	800df9a <HAL_TIM_PWM_Stop+0x10e>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2201      	movs	r2, #1
 800df94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800df98:	e003      	b.n	800dfa2 <HAL_TIM_PWM_Stop+0x116>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2201      	movs	r2, #1
 800df9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	40012c00 	.word	0x40012c00
 800dfb0:	40013400 	.word	0x40013400
 800dfb4:	40014000 	.word	0x40014000
 800dfb8:	40014400 	.word	0x40014400
 800dfbc:	40014800 	.word	0x40014800
 800dfc0:	40015000 	.word	0x40015000

0800dfc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d101      	bne.n	800dfd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e049      	b.n	800e06a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d106      	bne.n	800dff0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 f841 	bl	800e072 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2202      	movs	r2, #2
 800dff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	3304      	adds	r3, #4
 800e000:	4619      	mov	r1, r3
 800e002:	4610      	mov	r0, r2
 800e004:	f001 f8b4 	bl	800f170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800e072:	b480      	push	{r7}
 800e074:	b083      	sub	sp, #12
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800e07a:	bf00      	nop
 800e07c:	370c      	adds	r7, #12
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
	...

0800e088 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
 800e094:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d104      	bne.n	800e0a6 <HAL_TIM_IC_Start_DMA+0x1e>
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	e023      	b.n	800e0ee <HAL_TIM_IC_Start_DMA+0x66>
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b04      	cmp	r3, #4
 800e0aa:	d104      	bne.n	800e0b6 <HAL_TIM_IC_Start_DMA+0x2e>
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	e01b      	b.n	800e0ee <HAL_TIM_IC_Start_DMA+0x66>
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	2b08      	cmp	r3, #8
 800e0ba:	d104      	bne.n	800e0c6 <HAL_TIM_IC_Start_DMA+0x3e>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	e013      	b.n	800e0ee <HAL_TIM_IC_Start_DMA+0x66>
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2b0c      	cmp	r3, #12
 800e0ca:	d104      	bne.n	800e0d6 <HAL_TIM_IC_Start_DMA+0x4e>
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	e00b      	b.n	800e0ee <HAL_TIM_IC_Start_DMA+0x66>
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	2b10      	cmp	r3, #16
 800e0da:	d104      	bne.n	800e0e6 <HAL_TIM_IC_Start_DMA+0x5e>
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	e003      	b.n	800e0ee <HAL_TIM_IC_Start_DMA+0x66>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d104      	bne.n	800e100 <HAL_TIM_IC_Start_DMA+0x78>
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	e013      	b.n	800e128 <HAL_TIM_IC_Start_DMA+0xa0>
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2b04      	cmp	r3, #4
 800e104:	d104      	bne.n	800e110 <HAL_TIM_IC_Start_DMA+0x88>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	e00b      	b.n	800e128 <HAL_TIM_IC_Start_DMA+0xa0>
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	2b08      	cmp	r3, #8
 800e114:	d104      	bne.n	800e120 <HAL_TIM_IC_Start_DMA+0x98>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	e003      	b.n	800e128 <HAL_TIM_IC_Start_DMA+0xa0>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e126:	b2db      	uxtb	r3, r3
 800e128:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800e12a:	7dfb      	ldrb	r3, [r7, #23]
 800e12c:	2b02      	cmp	r3, #2
 800e12e:	d002      	beq.n	800e136 <HAL_TIM_IC_Start_DMA+0xae>
   || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800e130:	7dbb      	ldrb	r3, [r7, #22]
 800e132:	2b02      	cmp	r3, #2
 800e134:	d101      	bne.n	800e13a <HAL_TIM_IC_Start_DMA+0xb2>
  {
    return HAL_BUSY;
 800e136:	2302      	movs	r3, #2
 800e138:	e128      	b.n	800e38c <HAL_TIM_IC_Start_DMA+0x304>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800e13a:	7dfb      	ldrb	r3, [r7, #23]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d153      	bne.n	800e1e8 <HAL_TIM_IC_Start_DMA+0x160>
        && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800e140:	7dbb      	ldrb	r3, [r7, #22]
 800e142:	2b01      	cmp	r3, #1
 800e144:	d150      	bne.n	800e1e8 <HAL_TIM_IC_Start_DMA+0x160>
  {
    if ((pData == NULL) && (Length > 0U))
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d104      	bne.n	800e156 <HAL_TIM_IC_Start_DMA+0xce>
 800e14c:	887b      	ldrh	r3, [r7, #2]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d001      	beq.n	800e156 <HAL_TIM_IC_Start_DMA+0xce>
    {
      return HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	e11a      	b.n	800e38c <HAL_TIM_IC_Start_DMA+0x304>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d104      	bne.n	800e166 <HAL_TIM_IC_Start_DMA+0xde>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2202      	movs	r2, #2
 800e160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e164:	e023      	b.n	800e1ae <HAL_TIM_IC_Start_DMA+0x126>
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b04      	cmp	r3, #4
 800e16a:	d104      	bne.n	800e176 <HAL_TIM_IC_Start_DMA+0xee>
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2202      	movs	r2, #2
 800e170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e174:	e01b      	b.n	800e1ae <HAL_TIM_IC_Start_DMA+0x126>
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	2b08      	cmp	r3, #8
 800e17a:	d104      	bne.n	800e186 <HAL_TIM_IC_Start_DMA+0xfe>
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2202      	movs	r2, #2
 800e180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e184:	e013      	b.n	800e1ae <HAL_TIM_IC_Start_DMA+0x126>
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	2b0c      	cmp	r3, #12
 800e18a:	d104      	bne.n	800e196 <HAL_TIM_IC_Start_DMA+0x10e>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2202      	movs	r2, #2
 800e190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e194:	e00b      	b.n	800e1ae <HAL_TIM_IC_Start_DMA+0x126>
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b10      	cmp	r3, #16
 800e19a:	d104      	bne.n	800e1a6 <HAL_TIM_IC_Start_DMA+0x11e>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2202      	movs	r2, #2
 800e1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e1a4:	e003      	b.n	800e1ae <HAL_TIM_IC_Start_DMA+0x126>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d104      	bne.n	800e1be <HAL_TIM_IC_Start_DMA+0x136>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2202      	movs	r2, #2
 800e1b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800e1bc:	e016      	b.n	800e1ec <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	2b04      	cmp	r3, #4
 800e1c2:	d104      	bne.n	800e1ce <HAL_TIM_IC_Start_DMA+0x146>
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800e1cc:	e00e      	b.n	800e1ec <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2b08      	cmp	r3, #8
 800e1d2:	d104      	bne.n	800e1de <HAL_TIM_IC_Start_DMA+0x156>
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2202      	movs	r2, #2
 800e1d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800e1dc:	e006      	b.n	800e1ec <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 800e1e6:	e001      	b.n	800e1ec <HAL_TIM_IC_Start_DMA+0x164>
    }
  }
  else
  {
    return HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e0cf      	b.n	800e38c <HAL_TIM_IC_Start_DMA+0x304>
  }

  switch (Channel)
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2b0c      	cmp	r3, #12
 800e1f0:	f200 80ae 	bhi.w	800e350 <HAL_TIM_IC_Start_DMA+0x2c8>
 800e1f4:	a201      	add	r2, pc, #4	; (adr r2, 800e1fc <HAL_TIM_IC_Start_DMA+0x174>)
 800e1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fa:	bf00      	nop
 800e1fc:	0800e231 	.word	0x0800e231
 800e200:	0800e351 	.word	0x0800e351
 800e204:	0800e351 	.word	0x0800e351
 800e208:	0800e351 	.word	0x0800e351
 800e20c:	0800e279 	.word	0x0800e279
 800e210:	0800e351 	.word	0x0800e351
 800e214:	0800e351 	.word	0x0800e351
 800e218:	0800e351 	.word	0x0800e351
 800e21c:	0800e2c1 	.word	0x0800e2c1
 800e220:	0800e351 	.word	0x0800e351
 800e224:	0800e351 	.word	0x0800e351
 800e228:	0800e351 	.word	0x0800e351
 800e22c:	0800e309 	.word	0x0800e309
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e234:	4a57      	ldr	r2, [pc, #348]	; (800e394 <HAL_TIM_IC_Start_DMA+0x30c>)
 800e236:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23c:	4a56      	ldr	r2, [pc, #344]	; (800e398 <HAL_TIM_IC_Start_DMA+0x310>)
 800e23e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	4a55      	ldr	r2, [pc, #340]	; (800e39c <HAL_TIM_IC_Start_DMA+0x314>)
 800e246:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	3334      	adds	r3, #52	; 0x34
 800e252:	4619      	mov	r1, r3
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	887b      	ldrh	r3, [r7, #2]
 800e258:	f7fd fe3a 	bl	800bed0 <HAL_DMA_Start_IT>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d001      	beq.n	800e266 <HAL_TIM_IC_Start_DMA+0x1de>
      {
        return HAL_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	e092      	b.n	800e38c <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	68da      	ldr	r2, [r3, #12]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e274:	60da      	str	r2, [r3, #12]
      break;
 800e276:	e06c      	b.n	800e352 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e27c:	4a45      	ldr	r2, [pc, #276]	; (800e394 <HAL_TIM_IC_Start_DMA+0x30c>)
 800e27e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e284:	4a44      	ldr	r2, [pc, #272]	; (800e398 <HAL_TIM_IC_Start_DMA+0x310>)
 800e286:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e28c:	4a43      	ldr	r2, [pc, #268]	; (800e39c <HAL_TIM_IC_Start_DMA+0x314>)
 800e28e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3338      	adds	r3, #56	; 0x38
 800e29a:	4619      	mov	r1, r3
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	887b      	ldrh	r3, [r7, #2]
 800e2a0:	f7fd fe16 	bl	800bed0 <HAL_DMA_Start_IT>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d001      	beq.n	800e2ae <HAL_TIM_IC_Start_DMA+0x226>
      {
        return HAL_ERROR;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	e06e      	b.n	800e38c <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68da      	ldr	r2, [r3, #12]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2bc:	60da      	str	r2, [r3, #12]
      break;
 800e2be:	e048      	b.n	800e352 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c4:	4a33      	ldr	r2, [pc, #204]	; (800e394 <HAL_TIM_IC_Start_DMA+0x30c>)
 800e2c6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2cc:	4a32      	ldr	r2, [pc, #200]	; (800e398 <HAL_TIM_IC_Start_DMA+0x310>)
 800e2ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d4:	4a31      	ldr	r2, [pc, #196]	; (800e39c <HAL_TIM_IC_Start_DMA+0x314>)
 800e2d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	333c      	adds	r3, #60	; 0x3c
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	887b      	ldrh	r3, [r7, #2]
 800e2e8:	f7fd fdf2 	bl	800bed0 <HAL_DMA_Start_IT>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d001      	beq.n	800e2f6 <HAL_TIM_IC_Start_DMA+0x26e>
      {
        return HAL_ERROR;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e04a      	b.n	800e38c <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	68da      	ldr	r2, [r3, #12]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e304:	60da      	str	r2, [r3, #12]
      break;
 800e306:	e024      	b.n	800e352 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e30c:	4a21      	ldr	r2, [pc, #132]	; (800e394 <HAL_TIM_IC_Start_DMA+0x30c>)
 800e30e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e314:	4a20      	ldr	r2, [pc, #128]	; (800e398 <HAL_TIM_IC_Start_DMA+0x310>)
 800e316:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31c:	4a1f      	ldr	r2, [pc, #124]	; (800e39c <HAL_TIM_IC_Start_DMA+0x314>)
 800e31e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	3340      	adds	r3, #64	; 0x40
 800e32a:	4619      	mov	r1, r3
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	887b      	ldrh	r3, [r7, #2]
 800e330:	f7fd fdce 	bl	800bed0 <HAL_DMA_Start_IT>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <HAL_TIM_IC_Start_DMA+0x2b6>
      {
        return HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	e026      	b.n	800e38c <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	68da      	ldr	r2, [r3, #12]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e34c:	60da      	str	r2, [r3, #12]
      break;
 800e34e:	e000      	b.n	800e352 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    default:
      break;
 800e350:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2201      	movs	r2, #1
 800e358:	68b9      	ldr	r1, [r7, #8]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f001 fd5c 	bl	800fe18 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	689a      	ldr	r2, [r3, #8]
 800e366:	4b0e      	ldr	r3, [pc, #56]	; (800e3a0 <HAL_TIM_IC_Start_DMA+0x318>)
 800e368:	4013      	ands	r3, r2
 800e36a:	613b      	str	r3, [r7, #16]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	2b06      	cmp	r3, #6
 800e370:	d00b      	beq.n	800e38a <HAL_TIM_IC_Start_DMA+0x302>
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e378:	d007      	beq.n	800e38a <HAL_TIM_IC_Start_DMA+0x302>
  {
    __HAL_TIM_ENABLE(htim);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f042 0201 	orr.w	r2, r2, #1
 800e388:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3718      	adds	r7, #24
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	0800f03f 	.word	0x0800f03f
 800e398:	0800f107 	.word	0x0800f107
 800e39c:	0800efad 	.word	0x0800efad
 800e3a0:	00010007 	.word	0x00010007

0800e3a4 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2b0c      	cmp	r3, #12
 800e3b2:	d855      	bhi.n	800e460 <HAL_TIM_IC_Stop_DMA+0xbc>
 800e3b4:	a201      	add	r2, pc, #4	; (adr r2, 800e3bc <HAL_TIM_IC_Stop_DMA+0x18>)
 800e3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ba:	bf00      	nop
 800e3bc:	0800e3f1 	.word	0x0800e3f1
 800e3c0:	0800e461 	.word	0x0800e461
 800e3c4:	0800e461 	.word	0x0800e461
 800e3c8:	0800e461 	.word	0x0800e461
 800e3cc:	0800e40d 	.word	0x0800e40d
 800e3d0:	0800e461 	.word	0x0800e461
 800e3d4:	0800e461 	.word	0x0800e461
 800e3d8:	0800e461 	.word	0x0800e461
 800e3dc:	0800e429 	.word	0x0800e429
 800e3e0:	0800e461 	.word	0x0800e461
 800e3e4:	0800e461 	.word	0x0800e461
 800e3e8:	0800e461 	.word	0x0800e461
 800e3ec:	0800e445 	.word	0x0800e445
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	68da      	ldr	r2, [r3, #12]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e3fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e404:	4618      	mov	r0, r3
 800e406:	f7fd fe37 	bl	800c078 <HAL_DMA_Abort_IT>
      break;
 800e40a:	e02a      	b.n	800e462 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68da      	ldr	r2, [r3, #12]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e41a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e420:	4618      	mov	r0, r3
 800e422:	f7fd fe29 	bl	800c078 <HAL_DMA_Abort_IT>
      break;
 800e426:	e01c      	b.n	800e462 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68da      	ldr	r2, [r3, #12]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e436:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fd fe1b 	bl	800c078 <HAL_DMA_Abort_IT>
      break;
 800e442:	e00e      	b.n	800e462 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	68da      	ldr	r2, [r3, #12]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e452:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e458:	4618      	mov	r0, r3
 800e45a:	f7fd fe0d 	bl	800c078 <HAL_DMA_Abort_IT>
      break;
 800e45e:	e000      	b.n	800e462 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 800e460:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2200      	movs	r2, #0
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f001 fcd4 	bl	800fe18 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	6a1a      	ldr	r2, [r3, #32]
 800e476:	f241 1311 	movw	r3, #4369	; 0x1111
 800e47a:	4013      	ands	r3, r2
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10f      	bne.n	800e4a0 <HAL_TIM_IC_Stop_DMA+0xfc>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6a1a      	ldr	r2, [r3, #32]
 800e486:	f244 4344 	movw	r3, #17476	; 0x4444
 800e48a:	4013      	ands	r3, r2
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d107      	bne.n	800e4a0 <HAL_TIM_IC_Stop_DMA+0xfc>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f022 0201 	bic.w	r2, r2, #1
 800e49e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d104      	bne.n	800e4b0 <HAL_TIM_IC_Stop_DMA+0x10c>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4ae:	e023      	b.n	800e4f8 <HAL_TIM_IC_Stop_DMA+0x154>
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b04      	cmp	r3, #4
 800e4b4:	d104      	bne.n	800e4c0 <HAL_TIM_IC_Stop_DMA+0x11c>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4be:	e01b      	b.n	800e4f8 <HAL_TIM_IC_Stop_DMA+0x154>
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	2b08      	cmp	r3, #8
 800e4c4:	d104      	bne.n	800e4d0 <HAL_TIM_IC_Stop_DMA+0x12c>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4ce:	e013      	b.n	800e4f8 <HAL_TIM_IC_Stop_DMA+0x154>
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	2b0c      	cmp	r3, #12
 800e4d4:	d104      	bne.n	800e4e0 <HAL_TIM_IC_Stop_DMA+0x13c>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2201      	movs	r2, #1
 800e4da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e4de:	e00b      	b.n	800e4f8 <HAL_TIM_IC_Stop_DMA+0x154>
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	2b10      	cmp	r3, #16
 800e4e4:	d104      	bne.n	800e4f0 <HAL_TIM_IC_Stop_DMA+0x14c>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e4ee:	e003      	b.n	800e4f8 <HAL_TIM_IC_Stop_DMA+0x154>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d104      	bne.n	800e508 <HAL_TIM_IC_Stop_DMA+0x164>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2201      	movs	r2, #1
 800e502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e506:	e013      	b.n	800e530 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	2b04      	cmp	r3, #4
 800e50c:	d104      	bne.n	800e518 <HAL_TIM_IC_Stop_DMA+0x174>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2201      	movs	r2, #1
 800e512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e516:	e00b      	b.n	800e530 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	2b08      	cmp	r3, #8
 800e51c:	d104      	bne.n	800e528 <HAL_TIM_IC_Stop_DMA+0x184>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2201      	movs	r2, #1
 800e522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e526:	e003      	b.n	800e530 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop

0800e53c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b086      	sub	sp, #24
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d101      	bne.n	800e550 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e097      	b.n	800e680 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d106      	bne.n	800e56a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f7fa fc81 	bl	8008e6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2202      	movs	r2, #2
 800e56e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	6812      	ldr	r2, [r2, #0]
 800e57c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e580:	f023 0307 	bic.w	r3, r3, #7
 800e584:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	3304      	adds	r3, #4
 800e58e:	4619      	mov	r1, r3
 800e590:	4610      	mov	r0, r2
 800e592:	f000 fded 	bl	800f170 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	6a1b      	ldr	r3, [r3, #32]
 800e5ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	697a      	ldr	r2, [r7, #20]
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5be:	f023 0303 	bic.w	r3, r3, #3
 800e5c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	689a      	ldr	r2, [r3, #8]
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	699b      	ldr	r3, [r3, #24]
 800e5cc:	021b      	lsls	r3, r3, #8
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e5dc:	f023 030c 	bic.w	r3, r3, #12
 800e5e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e5e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e5ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	68da      	ldr	r2, [r3, #12]
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	69db      	ldr	r3, [r3, #28]
 800e5f6:	021b      	lsls	r3, r3, #8
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	693a      	ldr	r2, [r7, #16]
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	011a      	lsls	r2, r3, #4
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	6a1b      	ldr	r3, [r3, #32]
 800e60a:	031b      	lsls	r3, r3, #12
 800e60c:	4313      	orrs	r3, r2
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	4313      	orrs	r3, r2
 800e612:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e61a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e622:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	685a      	ldr	r2, [r3, #4]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	695b      	ldr	r3, [r3, #20]
 800e62c:	011b      	lsls	r3, r3, #4
 800e62e:	4313      	orrs	r3, r2
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	4313      	orrs	r3, r2
 800e634:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	697a      	ldr	r2, [r7, #20]
 800e63c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	693a      	ldr	r2, [r7, #16]
 800e644:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2201      	movs	r2, #1
 800e662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2201      	movs	r2, #1
 800e672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2201      	movs	r2, #1
 800e67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	691b      	ldr	r3, [r3, #16]
 800e696:	f003 0302 	and.w	r3, r3, #2
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	d122      	bne.n	800e6e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	f003 0302 	and.w	r3, r3, #2
 800e6a8:	2b02      	cmp	r3, #2
 800e6aa:	d11b      	bne.n	800e6e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f06f 0202 	mvn.w	r2, #2
 800e6b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	699b      	ldr	r3, [r3, #24]
 800e6c2:	f003 0303 	and.w	r3, r3, #3
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d003      	beq.n	800e6d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7f8 f8be 	bl	800684c <HAL_TIM_IC_CaptureCallback>
 800e6d0:	e005      	b.n	800e6de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fc38 	bl	800ef48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 fc49 	bl	800ef70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	691b      	ldr	r3, [r3, #16]
 800e6ea:	f003 0304 	and.w	r3, r3, #4
 800e6ee:	2b04      	cmp	r3, #4
 800e6f0:	d122      	bne.n	800e738 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	f003 0304 	and.w	r3, r3, #4
 800e6fc:	2b04      	cmp	r3, #4
 800e6fe:	d11b      	bne.n	800e738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f06f 0204 	mvn.w	r2, #4
 800e708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2202      	movs	r2, #2
 800e70e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	699b      	ldr	r3, [r3, #24]
 800e716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d003      	beq.n	800e726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7f8 f894 	bl	800684c <HAL_TIM_IC_CaptureCallback>
 800e724:	e005      	b.n	800e732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fc0e 	bl	800ef48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 fc1f 	bl	800ef70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	691b      	ldr	r3, [r3, #16]
 800e73e:	f003 0308 	and.w	r3, r3, #8
 800e742:	2b08      	cmp	r3, #8
 800e744:	d122      	bne.n	800e78c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	f003 0308 	and.w	r3, r3, #8
 800e750:	2b08      	cmp	r3, #8
 800e752:	d11b      	bne.n	800e78c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f06f 0208 	mvn.w	r2, #8
 800e75c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2204      	movs	r2, #4
 800e762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	69db      	ldr	r3, [r3, #28]
 800e76a:	f003 0303 	and.w	r3, r3, #3
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d003      	beq.n	800e77a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f7f8 f86a 	bl	800684c <HAL_TIM_IC_CaptureCallback>
 800e778:	e005      	b.n	800e786 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 fbe4 	bl	800ef48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 fbf5 	bl	800ef70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2200      	movs	r2, #0
 800e78a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	f003 0310 	and.w	r3, r3, #16
 800e796:	2b10      	cmp	r3, #16
 800e798:	d122      	bne.n	800e7e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	f003 0310 	and.w	r3, r3, #16
 800e7a4:	2b10      	cmp	r3, #16
 800e7a6:	d11b      	bne.n	800e7e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f06f 0210 	mvn.w	r2, #16
 800e7b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2208      	movs	r2, #8
 800e7b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d003      	beq.n	800e7ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7f8 f840 	bl	800684c <HAL_TIM_IC_CaptureCallback>
 800e7cc:	e005      	b.n	800e7da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 fbba 	bl	800ef48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 fbcb 	bl	800ef70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	691b      	ldr	r3, [r3, #16]
 800e7e6:	f003 0301 	and.w	r3, r3, #1
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d10e      	bne.n	800e80c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	f003 0301 	and.w	r3, r3, #1
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d107      	bne.n	800e80c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f06f 0201 	mvn.w	r2, #1
 800e804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 fb94 	bl	800ef34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	691b      	ldr	r3, [r3, #16]
 800e812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e816:	2b80      	cmp	r3, #128	; 0x80
 800e818:	d10e      	bne.n	800e838 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e824:	2b80      	cmp	r3, #128	; 0x80
 800e826:	d107      	bne.n	800e838 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f001 fc68 	bl	8010108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	691b      	ldr	r3, [r3, #16]
 800e83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e846:	d10e      	bne.n	800e866 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e852:	2b80      	cmp	r3, #128	; 0x80
 800e854:	d107      	bne.n	800e866 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f001 fc5b 	bl	801011c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e870:	2b40      	cmp	r3, #64	; 0x40
 800e872:	d10e      	bne.n	800e892 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e87e:	2b40      	cmp	r3, #64	; 0x40
 800e880:	d107      	bne.n	800e892 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 fb79 	bl	800ef84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	691b      	ldr	r3, [r3, #16]
 800e898:	f003 0320 	and.w	r3, r3, #32
 800e89c:	2b20      	cmp	r3, #32
 800e89e:	d10e      	bne.n	800e8be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	f003 0320 	and.w	r3, r3, #32
 800e8aa:	2b20      	cmp	r3, #32
 800e8ac:	d107      	bne.n	800e8be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f06f 0220 	mvn.w	r2, #32
 800e8b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f001 fc1b 	bl	80100f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	691b      	ldr	r3, [r3, #16]
 800e8c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8cc:	d10f      	bne.n	800e8ee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8dc:	d107      	bne.n	800e8ee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e8e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f001 fc21 	bl	8010130 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	691b      	ldr	r3, [r3, #16]
 800e8f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e8f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8fc:	d10f      	bne.n	800e91e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e90c:	d107      	bne.n	800e91e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f001 fc13 	bl	8010144 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e92c:	d10f      	bne.n	800e94e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e93c:	d107      	bne.n	800e94e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f001 fc05 	bl	8010158 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	691b      	ldr	r3, [r3, #16]
 800e954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e958:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e95c:	d10f      	bne.n	800e97e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e96c:	d107      	bne.n	800e97e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f001 fbf7 	bl	801016c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e97e:	bf00      	nop
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b084      	sub	sp, #16
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	60b9      	str	r1, [r7, #8]
 800e990:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d101      	bne.n	800e9a0 <HAL_TIM_IC_ConfigChannel+0x1a>
 800e99c:	2302      	movs	r3, #2
 800e99e:	e082      	b.n	800eaa6 <HAL_TIM_IC_ConfigChannel+0x120>
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d11b      	bne.n	800e9e6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6818      	ldr	r0, [r3, #0]
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	6819      	ldr	r1, [r3, #0]
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	685a      	ldr	r2, [r3, #4]
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	f001 f865 	bl	800fa8c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	699a      	ldr	r2, [r3, #24]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f022 020c 	bic.w	r2, r2, #12
 800e9d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	6999      	ldr	r1, [r3, #24]
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	689a      	ldr	r2, [r3, #8]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	430a      	orrs	r2, r1
 800e9e2:	619a      	str	r2, [r3, #24]
 800e9e4:	e05a      	b.n	800ea9c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2b04      	cmp	r3, #4
 800e9ea:	d11c      	bne.n	800ea26 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6818      	ldr	r0, [r3, #0]
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	6819      	ldr	r1, [r3, #0]
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	685a      	ldr	r2, [r3, #4]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	f001 f8e9 	bl	800fbd2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	699a      	ldr	r2, [r3, #24]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ea0e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	6999      	ldr	r1, [r3, #24]
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	689b      	ldr	r3, [r3, #8]
 800ea1a:	021a      	lsls	r2, r3, #8
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	430a      	orrs	r2, r1
 800ea22:	619a      	str	r2, [r3, #24]
 800ea24:	e03a      	b.n	800ea9c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b08      	cmp	r3, #8
 800ea2a:	d11b      	bne.n	800ea64 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6818      	ldr	r0, [r3, #0]
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	6819      	ldr	r1, [r3, #0]
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	f001 f936 	bl	800fcac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	69da      	ldr	r2, [r3, #28]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f022 020c 	bic.w	r2, r2, #12
 800ea4e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	69d9      	ldr	r1, [r3, #28]
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	689a      	ldr	r2, [r3, #8]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	430a      	orrs	r2, r1
 800ea60:	61da      	str	r2, [r3, #28]
 800ea62:	e01b      	b.n	800ea9c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6818      	ldr	r0, [r3, #0]
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	6819      	ldr	r1, [r3, #0]
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	685a      	ldr	r2, [r3, #4]
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	f001 f956 	bl	800fd24 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	69da      	ldr	r2, [r3, #28]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ea86:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	69d9      	ldr	r1, [r3, #28]
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	021a      	lsls	r2, r3, #8
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	430a      	orrs	r2, r1
 800ea9a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
	...

0800eab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d101      	bne.n	800eaca <HAL_TIM_PWM_ConfigChannel+0x1a>
 800eac6:	2302      	movs	r3, #2
 800eac8:	e0fd      	b.n	800ecc6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2201      	movs	r2, #1
 800eace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2b14      	cmp	r3, #20
 800ead6:	f200 80f0 	bhi.w	800ecba <HAL_TIM_PWM_ConfigChannel+0x20a>
 800eada:	a201      	add	r2, pc, #4	; (adr r2, 800eae0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800eadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae0:	0800eb35 	.word	0x0800eb35
 800eae4:	0800ecbb 	.word	0x0800ecbb
 800eae8:	0800ecbb 	.word	0x0800ecbb
 800eaec:	0800ecbb 	.word	0x0800ecbb
 800eaf0:	0800eb75 	.word	0x0800eb75
 800eaf4:	0800ecbb 	.word	0x0800ecbb
 800eaf8:	0800ecbb 	.word	0x0800ecbb
 800eafc:	0800ecbb 	.word	0x0800ecbb
 800eb00:	0800ebb7 	.word	0x0800ebb7
 800eb04:	0800ecbb 	.word	0x0800ecbb
 800eb08:	0800ecbb 	.word	0x0800ecbb
 800eb0c:	0800ecbb 	.word	0x0800ecbb
 800eb10:	0800ebf7 	.word	0x0800ebf7
 800eb14:	0800ecbb 	.word	0x0800ecbb
 800eb18:	0800ecbb 	.word	0x0800ecbb
 800eb1c:	0800ecbb 	.word	0x0800ecbb
 800eb20:	0800ec39 	.word	0x0800ec39
 800eb24:	0800ecbb 	.word	0x0800ecbb
 800eb28:	0800ecbb 	.word	0x0800ecbb
 800eb2c:	0800ecbb 	.word	0x0800ecbb
 800eb30:	0800ec79 	.word	0x0800ec79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68b9      	ldr	r1, [r7, #8]
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 fbc0 	bl	800f2c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	699a      	ldr	r2, [r3, #24]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f042 0208 	orr.w	r2, r2, #8
 800eb4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	699a      	ldr	r2, [r3, #24]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f022 0204 	bic.w	r2, r2, #4
 800eb5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	6999      	ldr	r1, [r3, #24]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	691a      	ldr	r2, [r3, #16]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	430a      	orrs	r2, r1
 800eb70:	619a      	str	r2, [r3, #24]
      break;
 800eb72:	e0a3      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	68b9      	ldr	r1, [r7, #8]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f000 fc3a 	bl	800f3f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	699a      	ldr	r2, [r3, #24]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	699a      	ldr	r2, [r3, #24]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	6999      	ldr	r1, [r3, #24]
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	021a      	lsls	r2, r3, #8
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	430a      	orrs	r2, r1
 800ebb2:	619a      	str	r2, [r3, #24]
      break;
 800ebb4:	e082      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68b9      	ldr	r1, [r7, #8]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f000 fcad 	bl	800f51c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	69da      	ldr	r2, [r3, #28]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f042 0208 	orr.w	r2, r2, #8
 800ebd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	69da      	ldr	r2, [r3, #28]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f022 0204 	bic.w	r2, r2, #4
 800ebe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	69d9      	ldr	r1, [r3, #28]
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	691a      	ldr	r2, [r3, #16]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	430a      	orrs	r2, r1
 800ebf2:	61da      	str	r2, [r3, #28]
      break;
 800ebf4:	e062      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68b9      	ldr	r1, [r7, #8]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f000 fd1f 	bl	800f640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	69da      	ldr	r2, [r3, #28]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	69da      	ldr	r2, [r3, #28]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	69d9      	ldr	r1, [r3, #28]
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	021a      	lsls	r2, r3, #8
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	430a      	orrs	r2, r1
 800ec34:	61da      	str	r2, [r3, #28]
      break;
 800ec36:	e041      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68b9      	ldr	r1, [r7, #8]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 fd92 	bl	800f768 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f042 0208 	orr.w	r2, r2, #8
 800ec52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f022 0204 	bic.w	r2, r2, #4
 800ec62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	691a      	ldr	r2, [r3, #16]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	430a      	orrs	r2, r1
 800ec74:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ec76:	e021      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	68b9      	ldr	r1, [r7, #8]
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f000 fddc 	bl	800f83c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eca2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	691b      	ldr	r3, [r3, #16]
 800ecae:	021a      	lsls	r2, r3, #8
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	430a      	orrs	r2, r1
 800ecb6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ecb8:	e000      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ecba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop

0800ecd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d101      	bne.n	800ece8 <HAL_TIM_ConfigClockSource+0x18>
 800ece4:	2302      	movs	r3, #2
 800ece6:	e0d2      	b.n	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2202      	movs	r2, #2
 800ecf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	689b      	ldr	r3, [r3, #8]
 800ecfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ed06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ed0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed24:	f000 80a9 	beq.w	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ed28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed2c:	d81a      	bhi.n	800ed64 <HAL_TIM_ConfigClockSource+0x94>
 800ed2e:	2b30      	cmp	r3, #48	; 0x30
 800ed30:	f000 809a 	beq.w	800ee68 <HAL_TIM_ConfigClockSource+0x198>
 800ed34:	2b30      	cmp	r3, #48	; 0x30
 800ed36:	d809      	bhi.n	800ed4c <HAL_TIM_ConfigClockSource+0x7c>
 800ed38:	2b10      	cmp	r3, #16
 800ed3a:	f000 8095 	beq.w	800ee68 <HAL_TIM_ConfigClockSource+0x198>
 800ed3e:	2b20      	cmp	r3, #32
 800ed40:	f000 8092 	beq.w	800ee68 <HAL_TIM_ConfigClockSource+0x198>
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f000 808f 	beq.w	800ee68 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ed4a:	e097      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ed4c:	2b50      	cmp	r3, #80	; 0x50
 800ed4e:	d05b      	beq.n	800ee08 <HAL_TIM_ConfigClockSource+0x138>
 800ed50:	2b50      	cmp	r3, #80	; 0x50
 800ed52:	d802      	bhi.n	800ed5a <HAL_TIM_ConfigClockSource+0x8a>
 800ed54:	2b40      	cmp	r3, #64	; 0x40
 800ed56:	d077      	beq.n	800ee48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ed58:	e090      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ed5a:	2b60      	cmp	r3, #96	; 0x60
 800ed5c:	d064      	beq.n	800ee28 <HAL_TIM_ConfigClockSource+0x158>
 800ed5e:	2b70      	cmp	r3, #112	; 0x70
 800ed60:	d028      	beq.n	800edb4 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800ed62:	e08b      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ed64:	4a4c      	ldr	r2, [pc, #304]	; (800ee98 <HAL_TIM_ConfigClockSource+0x1c8>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d07e      	beq.n	800ee68 <HAL_TIM_ConfigClockSource+0x198>
 800ed6a:	4a4b      	ldr	r2, [pc, #300]	; (800ee98 <HAL_TIM_ConfigClockSource+0x1c8>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d810      	bhi.n	800ed92 <HAL_TIM_ConfigClockSource+0xc2>
 800ed70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed74:	d078      	beq.n	800ee68 <HAL_TIM_ConfigClockSource+0x198>
 800ed76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed7a:	d803      	bhi.n	800ed84 <HAL_TIM_ConfigClockSource+0xb4>
 800ed7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed80:	d02f      	beq.n	800ede2 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ed82:	e07b      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ed84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ed88:	d06e      	beq.n	800ee68 <HAL_TIM_ConfigClockSource+0x198>
 800ed8a:	4a44      	ldr	r2, [pc, #272]	; (800ee9c <HAL_TIM_ConfigClockSource+0x1cc>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d06b      	beq.n	800ee68 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ed90:	e074      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ed92:	4a43      	ldr	r2, [pc, #268]	; (800eea0 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d067      	beq.n	800ee68 <HAL_TIM_ConfigClockSource+0x198>
 800ed98:	4a41      	ldr	r2, [pc, #260]	; (800eea0 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d803      	bhi.n	800eda6 <HAL_TIM_ConfigClockSource+0xd6>
 800ed9e:	4a41      	ldr	r2, [pc, #260]	; (800eea4 <HAL_TIM_ConfigClockSource+0x1d4>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d061      	beq.n	800ee68 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800eda4:	e06a      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eda6:	4a40      	ldr	r2, [pc, #256]	; (800eea8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d05d      	beq.n	800ee68 <HAL_TIM_ConfigClockSource+0x198>
 800edac:	4a3f      	ldr	r2, [pc, #252]	; (800eeac <HAL_TIM_ConfigClockSource+0x1dc>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d05a      	beq.n	800ee68 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800edb2:	e063      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6818      	ldr	r0, [r3, #0]
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	6899      	ldr	r1, [r3, #8]
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	685a      	ldr	r2, [r3, #4]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	f001 f808 	bl	800fdd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	689b      	ldr	r3, [r3, #8]
 800edce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800edd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	609a      	str	r2, [r3, #8]
      break;
 800ede0:	e04c      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6818      	ldr	r0, [r3, #0]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	6899      	ldr	r1, [r3, #8]
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	685a      	ldr	r2, [r3, #4]
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	f000 fff1 	bl	800fdd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	689a      	ldr	r2, [r3, #8]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee04:	609a      	str	r2, [r3, #8]
      break;
 800ee06:	e039      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6818      	ldr	r0, [r3, #0]
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	6859      	ldr	r1, [r3, #4]
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	461a      	mov	r2, r3
 800ee16:	f000 fead 	bl	800fb74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2150      	movs	r1, #80	; 0x50
 800ee20:	4618      	mov	r0, r3
 800ee22:	f000 ffbc 	bl	800fd9e <TIM_ITRx_SetConfig>
      break;
 800ee26:	e029      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6818      	ldr	r0, [r3, #0]
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	6859      	ldr	r1, [r3, #4]
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	461a      	mov	r2, r3
 800ee36:	f000 ff09 	bl	800fc4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2160      	movs	r1, #96	; 0x60
 800ee40:	4618      	mov	r0, r3
 800ee42:	f000 ffac 	bl	800fd9e <TIM_ITRx_SetConfig>
      break;
 800ee46:	e019      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6818      	ldr	r0, [r3, #0]
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	6859      	ldr	r1, [r3, #4]
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	461a      	mov	r2, r3
 800ee56:	f000 fe8d 	bl	800fb74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2140      	movs	r1, #64	; 0x40
 800ee60:	4618      	mov	r0, r3
 800ee62:	f000 ff9c 	bl	800fd9e <TIM_ITRx_SetConfig>
      break;
 800ee66:	e009      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681a      	ldr	r2, [r3, #0]
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4619      	mov	r1, r3
 800ee72:	4610      	mov	r0, r2
 800ee74:	f000 ff93 	bl	800fd9e <TIM_ITRx_SetConfig>
      break;
 800ee78:	e000      	b.n	800ee7c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800ee7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2201      	movs	r2, #1
 800ee80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee8c:	2300      	movs	r3, #0
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	00100030 	.word	0x00100030
 800ee9c:	00100020 	.word	0x00100020
 800eea0:	00100050 	.word	0x00100050
 800eea4:	00100040 	.word	0x00100040
 800eea8:	00100060 	.word	0x00100060
 800eeac:	00100070 	.word	0x00100070

0800eeb0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d101      	bne.n	800eec8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800eec4:	2302      	movs	r3, #2
 800eec6:	e031      	b.n	800ef2c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2202      	movs	r2, #2
 800eed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800eed8:	6839      	ldr	r1, [r7, #0]
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 fd1a 	bl	800f914 <TIM_SlaveTimer_SetConfig>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d009      	beq.n	800eefa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800eef6:	2301      	movs	r3, #1
 800eef8:	e018      	b.n	800ef2c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68da      	ldr	r2, [r3, #12]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef08:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ef18:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2200      	movs	r2, #0
 800ef26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ef2a:	2300      	movs	r3, #0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ef3c:	bf00      	nop
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ef50:	bf00      	nop
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ef64:	bf00      	nop
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ef78:	bf00      	nop
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ef8c:	bf00      	nop
 800ef8e:	370c      	adds	r7, #12
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800efa0:	bf00      	nop
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efb8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d107      	bne.n	800efd4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2201      	movs	r2, #1
 800efc8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2201      	movs	r2, #1
 800efce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800efd2:	e02a      	b.n	800f02a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d107      	bne.n	800efee <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2202      	movs	r2, #2
 800efe2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2201      	movs	r2, #1
 800efe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800efec:	e01d      	b.n	800f02a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d107      	bne.n	800f008 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2204      	movs	r2, #4
 800effc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2201      	movs	r2, #1
 800f002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f006:	e010      	b.n	800f02a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d107      	bne.n	800f022 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2208      	movs	r2, #8
 800f016:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f020:	e003      	b.n	800f02a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2201      	movs	r2, #1
 800f026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f7ff ffb4 	bl	800ef98 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	771a      	strb	r2, [r3, #28]
}
 800f036:	bf00      	nop
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800f03e:	b580      	push	{r7, lr}
 800f040:	b084      	sub	sp, #16
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f04a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	429a      	cmp	r2, r3
 800f054:	d10f      	bne.n	800f076 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2201      	movs	r2, #1
 800f05a:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	69db      	ldr	r3, [r3, #28]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d146      	bne.n	800f0f2 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2201      	movs	r2, #1
 800f070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f074:	e03d      	b.n	800f0f2 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d10f      	bne.n	800f0a0 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2202      	movs	r2, #2
 800f084:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	69db      	ldr	r3, [r3, #28]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d131      	bne.n	800f0f2 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2201      	movs	r2, #1
 800f092:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2201      	movs	r2, #1
 800f09a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f09e:	e028      	b.n	800f0f2 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d10f      	bne.n	800f0ca <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2204      	movs	r2, #4
 800f0ae:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	69db      	ldr	r3, [r3, #28]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d11c      	bne.n	800f0f2 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f0c8:	e013      	b.n	800f0f2 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d10e      	bne.n	800f0f2 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2208      	movs	r2, #8
 800f0d8:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	69db      	ldr	r3, [r3, #28]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d107      	bne.n	800f0f2 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	f7f7 fbaa 	bl	800684c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	771a      	strb	r2, [r3, #28]
}
 800f0fe:	bf00      	nop
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b084      	sub	sp, #16
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f112:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d103      	bne.n	800f126 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2201      	movs	r2, #1
 800f122:	771a      	strb	r2, [r3, #28]
 800f124:	e019      	b.n	800f15a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d103      	bne.n	800f138 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2202      	movs	r2, #2
 800f134:	771a      	strb	r2, [r3, #28]
 800f136:	e010      	b.n	800f15a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d103      	bne.n	800f14a <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2204      	movs	r2, #4
 800f146:	771a      	strb	r2, [r3, #28]
 800f148:	e007      	b.n	800f15a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	429a      	cmp	r2, r3
 800f152:	d102      	bne.n	800f15a <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2208      	movs	r2, #8
 800f158:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f7ff fefe 	bl	800ef5c <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2200      	movs	r2, #0
 800f164:	771a      	strb	r2, [r3, #28]
}
 800f166:	bf00      	nop
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
	...

0800f170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4a46      	ldr	r2, [pc, #280]	; (800f29c <TIM_Base_SetConfig+0x12c>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d017      	beq.n	800f1b8 <TIM_Base_SetConfig+0x48>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f18e:	d013      	beq.n	800f1b8 <TIM_Base_SetConfig+0x48>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a43      	ldr	r2, [pc, #268]	; (800f2a0 <TIM_Base_SetConfig+0x130>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d00f      	beq.n	800f1b8 <TIM_Base_SetConfig+0x48>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a42      	ldr	r2, [pc, #264]	; (800f2a4 <TIM_Base_SetConfig+0x134>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d00b      	beq.n	800f1b8 <TIM_Base_SetConfig+0x48>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a41      	ldr	r2, [pc, #260]	; (800f2a8 <TIM_Base_SetConfig+0x138>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d007      	beq.n	800f1b8 <TIM_Base_SetConfig+0x48>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a40      	ldr	r2, [pc, #256]	; (800f2ac <TIM_Base_SetConfig+0x13c>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d003      	beq.n	800f1b8 <TIM_Base_SetConfig+0x48>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a3f      	ldr	r2, [pc, #252]	; (800f2b0 <TIM_Base_SetConfig+0x140>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d108      	bne.n	800f1ca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	68fa      	ldr	r2, [r7, #12]
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	4a33      	ldr	r2, [pc, #204]	; (800f29c <TIM_Base_SetConfig+0x12c>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d023      	beq.n	800f21a <TIM_Base_SetConfig+0xaa>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1d8:	d01f      	beq.n	800f21a <TIM_Base_SetConfig+0xaa>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4a30      	ldr	r2, [pc, #192]	; (800f2a0 <TIM_Base_SetConfig+0x130>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d01b      	beq.n	800f21a <TIM_Base_SetConfig+0xaa>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4a2f      	ldr	r2, [pc, #188]	; (800f2a4 <TIM_Base_SetConfig+0x134>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d017      	beq.n	800f21a <TIM_Base_SetConfig+0xaa>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4a2e      	ldr	r2, [pc, #184]	; (800f2a8 <TIM_Base_SetConfig+0x138>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d013      	beq.n	800f21a <TIM_Base_SetConfig+0xaa>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a2d      	ldr	r2, [pc, #180]	; (800f2ac <TIM_Base_SetConfig+0x13c>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d00f      	beq.n	800f21a <TIM_Base_SetConfig+0xaa>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a2d      	ldr	r2, [pc, #180]	; (800f2b4 <TIM_Base_SetConfig+0x144>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d00b      	beq.n	800f21a <TIM_Base_SetConfig+0xaa>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	4a2c      	ldr	r2, [pc, #176]	; (800f2b8 <TIM_Base_SetConfig+0x148>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d007      	beq.n	800f21a <TIM_Base_SetConfig+0xaa>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4a2b      	ldr	r2, [pc, #172]	; (800f2bc <TIM_Base_SetConfig+0x14c>)
 800f20e:	4293      	cmp	r3, r2
 800f210:	d003      	beq.n	800f21a <TIM_Base_SetConfig+0xaa>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4a26      	ldr	r2, [pc, #152]	; (800f2b0 <TIM_Base_SetConfig+0x140>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d108      	bne.n	800f22c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	4313      	orrs	r3, r2
 800f22a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	695b      	ldr	r3, [r3, #20]
 800f236:	4313      	orrs	r3, r2
 800f238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	689a      	ldr	r2, [r3, #8]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	4a12      	ldr	r2, [pc, #72]	; (800f29c <TIM_Base_SetConfig+0x12c>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d013      	beq.n	800f280 <TIM_Base_SetConfig+0x110>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	4a14      	ldr	r2, [pc, #80]	; (800f2ac <TIM_Base_SetConfig+0x13c>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d00f      	beq.n	800f280 <TIM_Base_SetConfig+0x110>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4a14      	ldr	r2, [pc, #80]	; (800f2b4 <TIM_Base_SetConfig+0x144>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d00b      	beq.n	800f280 <TIM_Base_SetConfig+0x110>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4a13      	ldr	r2, [pc, #76]	; (800f2b8 <TIM_Base_SetConfig+0x148>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d007      	beq.n	800f280 <TIM_Base_SetConfig+0x110>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	4a12      	ldr	r2, [pc, #72]	; (800f2bc <TIM_Base_SetConfig+0x14c>)
 800f274:	4293      	cmp	r3, r2
 800f276:	d003      	beq.n	800f280 <TIM_Base_SetConfig+0x110>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4a0d      	ldr	r2, [pc, #52]	; (800f2b0 <TIM_Base_SetConfig+0x140>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d103      	bne.n	800f288 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	691a      	ldr	r2, [r3, #16]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2201      	movs	r2, #1
 800f28c:	615a      	str	r2, [r3, #20]
}
 800f28e:	bf00      	nop
 800f290:	3714      	adds	r7, #20
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	40012c00 	.word	0x40012c00
 800f2a0:	40000400 	.word	0x40000400
 800f2a4:	40000800 	.word	0x40000800
 800f2a8:	40000c00 	.word	0x40000c00
 800f2ac:	40013400 	.word	0x40013400
 800f2b0:	40015000 	.word	0x40015000
 800f2b4:	40014000 	.word	0x40014000
 800f2b8:	40014400 	.word	0x40014400
 800f2bc:	40014800 	.word	0x40014800

0800f2c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b087      	sub	sp, #28
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6a1b      	ldr	r3, [r3, #32]
 800f2ce:	f023 0201 	bic.w	r2, r3, #1
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	699b      	ldr	r3, [r3, #24]
 800f2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f023 0303 	bic.w	r3, r3, #3
 800f2fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	4313      	orrs	r3, r2
 800f304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	f023 0302 	bic.w	r3, r3, #2
 800f30c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	697a      	ldr	r2, [r7, #20]
 800f314:	4313      	orrs	r3, r2
 800f316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4a30      	ldr	r2, [pc, #192]	; (800f3dc <TIM_OC1_SetConfig+0x11c>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d013      	beq.n	800f348 <TIM_OC1_SetConfig+0x88>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4a2f      	ldr	r2, [pc, #188]	; (800f3e0 <TIM_OC1_SetConfig+0x120>)
 800f324:	4293      	cmp	r3, r2
 800f326:	d00f      	beq.n	800f348 <TIM_OC1_SetConfig+0x88>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4a2e      	ldr	r2, [pc, #184]	; (800f3e4 <TIM_OC1_SetConfig+0x124>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d00b      	beq.n	800f348 <TIM_OC1_SetConfig+0x88>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	4a2d      	ldr	r2, [pc, #180]	; (800f3e8 <TIM_OC1_SetConfig+0x128>)
 800f334:	4293      	cmp	r3, r2
 800f336:	d007      	beq.n	800f348 <TIM_OC1_SetConfig+0x88>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4a2c      	ldr	r2, [pc, #176]	; (800f3ec <TIM_OC1_SetConfig+0x12c>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d003      	beq.n	800f348 <TIM_OC1_SetConfig+0x88>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a2b      	ldr	r2, [pc, #172]	; (800f3f0 <TIM_OC1_SetConfig+0x130>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d10c      	bne.n	800f362 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	f023 0308 	bic.w	r3, r3, #8
 800f34e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	4313      	orrs	r3, r2
 800f358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	f023 0304 	bic.w	r3, r3, #4
 800f360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4a1d      	ldr	r2, [pc, #116]	; (800f3dc <TIM_OC1_SetConfig+0x11c>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d013      	beq.n	800f392 <TIM_OC1_SetConfig+0xd2>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4a1c      	ldr	r2, [pc, #112]	; (800f3e0 <TIM_OC1_SetConfig+0x120>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d00f      	beq.n	800f392 <TIM_OC1_SetConfig+0xd2>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4a1b      	ldr	r2, [pc, #108]	; (800f3e4 <TIM_OC1_SetConfig+0x124>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d00b      	beq.n	800f392 <TIM_OC1_SetConfig+0xd2>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4a1a      	ldr	r2, [pc, #104]	; (800f3e8 <TIM_OC1_SetConfig+0x128>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d007      	beq.n	800f392 <TIM_OC1_SetConfig+0xd2>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4a19      	ldr	r2, [pc, #100]	; (800f3ec <TIM_OC1_SetConfig+0x12c>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d003      	beq.n	800f392 <TIM_OC1_SetConfig+0xd2>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a18      	ldr	r2, [pc, #96]	; (800f3f0 <TIM_OC1_SetConfig+0x130>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d111      	bne.n	800f3b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f3a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	695b      	ldr	r3, [r3, #20]
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	699b      	ldr	r3, [r3, #24]
 800f3b0:	693a      	ldr	r2, [r7, #16]
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	693a      	ldr	r2, [r7, #16]
 800f3ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	685a      	ldr	r2, [r3, #4]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	697a      	ldr	r2, [r7, #20]
 800f3ce:	621a      	str	r2, [r3, #32]
}
 800f3d0:	bf00      	nop
 800f3d2:	371c      	adds	r7, #28
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr
 800f3dc:	40012c00 	.word	0x40012c00
 800f3e0:	40013400 	.word	0x40013400
 800f3e4:	40014000 	.word	0x40014000
 800f3e8:	40014400 	.word	0x40014400
 800f3ec:	40014800 	.word	0x40014800
 800f3f0:	40015000 	.word	0x40015000

0800f3f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b087      	sub	sp, #28
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6a1b      	ldr	r3, [r3, #32]
 800f402:	f023 0210 	bic.w	r2, r3, #16
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6a1b      	ldr	r3, [r3, #32]
 800f40e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	699b      	ldr	r3, [r3, #24]
 800f41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f42e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	021b      	lsls	r3, r3, #8
 800f436:	68fa      	ldr	r2, [r7, #12]
 800f438:	4313      	orrs	r3, r2
 800f43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	f023 0320 	bic.w	r3, r3, #32
 800f442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	011b      	lsls	r3, r3, #4
 800f44a:	697a      	ldr	r2, [r7, #20]
 800f44c:	4313      	orrs	r3, r2
 800f44e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4a2c      	ldr	r2, [pc, #176]	; (800f504 <TIM_OC2_SetConfig+0x110>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d007      	beq.n	800f468 <TIM_OC2_SetConfig+0x74>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4a2b      	ldr	r2, [pc, #172]	; (800f508 <TIM_OC2_SetConfig+0x114>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d003      	beq.n	800f468 <TIM_OC2_SetConfig+0x74>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	4a2a      	ldr	r2, [pc, #168]	; (800f50c <TIM_OC2_SetConfig+0x118>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d10d      	bne.n	800f484 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f46e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	011b      	lsls	r3, r3, #4
 800f476:	697a      	ldr	r2, [r7, #20]
 800f478:	4313      	orrs	r3, r2
 800f47a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a1f      	ldr	r2, [pc, #124]	; (800f504 <TIM_OC2_SetConfig+0x110>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d013      	beq.n	800f4b4 <TIM_OC2_SetConfig+0xc0>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a1e      	ldr	r2, [pc, #120]	; (800f508 <TIM_OC2_SetConfig+0x114>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d00f      	beq.n	800f4b4 <TIM_OC2_SetConfig+0xc0>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a1e      	ldr	r2, [pc, #120]	; (800f510 <TIM_OC2_SetConfig+0x11c>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d00b      	beq.n	800f4b4 <TIM_OC2_SetConfig+0xc0>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a1d      	ldr	r2, [pc, #116]	; (800f514 <TIM_OC2_SetConfig+0x120>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d007      	beq.n	800f4b4 <TIM_OC2_SetConfig+0xc0>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a1c      	ldr	r2, [pc, #112]	; (800f518 <TIM_OC2_SetConfig+0x124>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d003      	beq.n	800f4b4 <TIM_OC2_SetConfig+0xc0>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a17      	ldr	r2, [pc, #92]	; (800f50c <TIM_OC2_SetConfig+0x118>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d113      	bne.n	800f4dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f4ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	695b      	ldr	r3, [r3, #20]
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	693a      	ldr	r2, [r7, #16]
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	699b      	ldr	r3, [r3, #24]
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	693a      	ldr	r2, [r7, #16]
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	693a      	ldr	r2, [r7, #16]
 800f4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	697a      	ldr	r2, [r7, #20]
 800f4f4:	621a      	str	r2, [r3, #32]
}
 800f4f6:	bf00      	nop
 800f4f8:	371c      	adds	r7, #28
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	40012c00 	.word	0x40012c00
 800f508:	40013400 	.word	0x40013400
 800f50c:	40015000 	.word	0x40015000
 800f510:	40014000 	.word	0x40014000
 800f514:	40014400 	.word	0x40014400
 800f518:	40014800 	.word	0x40014800

0800f51c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b087      	sub	sp, #28
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6a1b      	ldr	r3, [r3, #32]
 800f52a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a1b      	ldr	r3, [r3, #32]
 800f536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	69db      	ldr	r3, [r3, #28]
 800f542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f54a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f54e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f023 0303 	bic.w	r3, r3, #3
 800f556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	68fa      	ldr	r2, [r7, #12]
 800f55e:	4313      	orrs	r3, r2
 800f560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	021b      	lsls	r3, r3, #8
 800f570:	697a      	ldr	r2, [r7, #20]
 800f572:	4313      	orrs	r3, r2
 800f574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4a2b      	ldr	r2, [pc, #172]	; (800f628 <TIM_OC3_SetConfig+0x10c>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d007      	beq.n	800f58e <TIM_OC3_SetConfig+0x72>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a2a      	ldr	r2, [pc, #168]	; (800f62c <TIM_OC3_SetConfig+0x110>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d003      	beq.n	800f58e <TIM_OC3_SetConfig+0x72>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a29      	ldr	r2, [pc, #164]	; (800f630 <TIM_OC3_SetConfig+0x114>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d10d      	bne.n	800f5aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	021b      	lsls	r3, r3, #8
 800f59c:	697a      	ldr	r2, [r7, #20]
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f5a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4a1e      	ldr	r2, [pc, #120]	; (800f628 <TIM_OC3_SetConfig+0x10c>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d013      	beq.n	800f5da <TIM_OC3_SetConfig+0xbe>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a1d      	ldr	r2, [pc, #116]	; (800f62c <TIM_OC3_SetConfig+0x110>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d00f      	beq.n	800f5da <TIM_OC3_SetConfig+0xbe>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4a1d      	ldr	r2, [pc, #116]	; (800f634 <TIM_OC3_SetConfig+0x118>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d00b      	beq.n	800f5da <TIM_OC3_SetConfig+0xbe>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a1c      	ldr	r2, [pc, #112]	; (800f638 <TIM_OC3_SetConfig+0x11c>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d007      	beq.n	800f5da <TIM_OC3_SetConfig+0xbe>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4a1b      	ldr	r2, [pc, #108]	; (800f63c <TIM_OC3_SetConfig+0x120>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d003      	beq.n	800f5da <TIM_OC3_SetConfig+0xbe>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4a16      	ldr	r2, [pc, #88]	; (800f630 <TIM_OC3_SetConfig+0x114>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d113      	bne.n	800f602 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f5e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f5e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	695b      	ldr	r3, [r3, #20]
 800f5ee:	011b      	lsls	r3, r3, #4
 800f5f0:	693a      	ldr	r2, [r7, #16]
 800f5f2:	4313      	orrs	r3, r2
 800f5f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	699b      	ldr	r3, [r3, #24]
 800f5fa:	011b      	lsls	r3, r3, #4
 800f5fc:	693a      	ldr	r2, [r7, #16]
 800f5fe:	4313      	orrs	r3, r2
 800f600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	693a      	ldr	r2, [r7, #16]
 800f606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	68fa      	ldr	r2, [r7, #12]
 800f60c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	685a      	ldr	r2, [r3, #4]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	697a      	ldr	r2, [r7, #20]
 800f61a:	621a      	str	r2, [r3, #32]
}
 800f61c:	bf00      	nop
 800f61e:	371c      	adds	r7, #28
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	40012c00 	.word	0x40012c00
 800f62c:	40013400 	.word	0x40013400
 800f630:	40015000 	.word	0x40015000
 800f634:	40014000 	.word	0x40014000
 800f638:	40014400 	.word	0x40014400
 800f63c:	40014800 	.word	0x40014800

0800f640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f640:	b480      	push	{r7}
 800f642:	b087      	sub	sp, #28
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6a1b      	ldr	r3, [r3, #32]
 800f64e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	69db      	ldr	r3, [r3, #28]
 800f666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f66e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f67a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	021b      	lsls	r3, r3, #8
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	4313      	orrs	r3, r2
 800f686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f68e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	031b      	lsls	r3, r3, #12
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	4313      	orrs	r3, r2
 800f69a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4a2c      	ldr	r2, [pc, #176]	; (800f750 <TIM_OC4_SetConfig+0x110>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d007      	beq.n	800f6b4 <TIM_OC4_SetConfig+0x74>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	4a2b      	ldr	r2, [pc, #172]	; (800f754 <TIM_OC4_SetConfig+0x114>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d003      	beq.n	800f6b4 <TIM_OC4_SetConfig+0x74>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4a2a      	ldr	r2, [pc, #168]	; (800f758 <TIM_OC4_SetConfig+0x118>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d10d      	bne.n	800f6d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f6ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	031b      	lsls	r3, r3, #12
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	4313      	orrs	r3, r2
 800f6c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f6ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4a1f      	ldr	r2, [pc, #124]	; (800f750 <TIM_OC4_SetConfig+0x110>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d013      	beq.n	800f700 <TIM_OC4_SetConfig+0xc0>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	4a1e      	ldr	r2, [pc, #120]	; (800f754 <TIM_OC4_SetConfig+0x114>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d00f      	beq.n	800f700 <TIM_OC4_SetConfig+0xc0>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	4a1e      	ldr	r2, [pc, #120]	; (800f75c <TIM_OC4_SetConfig+0x11c>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d00b      	beq.n	800f700 <TIM_OC4_SetConfig+0xc0>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	4a1d      	ldr	r2, [pc, #116]	; (800f760 <TIM_OC4_SetConfig+0x120>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d007      	beq.n	800f700 <TIM_OC4_SetConfig+0xc0>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	4a1c      	ldr	r2, [pc, #112]	; (800f764 <TIM_OC4_SetConfig+0x124>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d003      	beq.n	800f700 <TIM_OC4_SetConfig+0xc0>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4a17      	ldr	r2, [pc, #92]	; (800f758 <TIM_OC4_SetConfig+0x118>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d113      	bne.n	800f728 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f706:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f70e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	695b      	ldr	r3, [r3, #20]
 800f714:	019b      	lsls	r3, r3, #6
 800f716:	693a      	ldr	r2, [r7, #16]
 800f718:	4313      	orrs	r3, r2
 800f71a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	699b      	ldr	r3, [r3, #24]
 800f720:	019b      	lsls	r3, r3, #6
 800f722:	693a      	ldr	r2, [r7, #16]
 800f724:	4313      	orrs	r3, r2
 800f726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	693a      	ldr	r2, [r7, #16]
 800f72c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	685a      	ldr	r2, [r3, #4]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	621a      	str	r2, [r3, #32]
}
 800f742:	bf00      	nop
 800f744:	371c      	adds	r7, #28
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	40012c00 	.word	0x40012c00
 800f754:	40013400 	.word	0x40013400
 800f758:	40015000 	.word	0x40015000
 800f75c:	40014000 	.word	0x40014000
 800f760:	40014400 	.word	0x40014400
 800f764:	40014800 	.word	0x40014800

0800f768 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f768:	b480      	push	{r7}
 800f76a:	b087      	sub	sp, #28
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a1b      	ldr	r3, [r3, #32]
 800f776:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6a1b      	ldr	r3, [r3, #32]
 800f782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f79a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f7ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	689b      	ldr	r3, [r3, #8]
 800f7b2:	041b      	lsls	r3, r3, #16
 800f7b4:	693a      	ldr	r2, [r7, #16]
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4a19      	ldr	r2, [pc, #100]	; (800f824 <TIM_OC5_SetConfig+0xbc>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d013      	beq.n	800f7ea <TIM_OC5_SetConfig+0x82>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	4a18      	ldr	r2, [pc, #96]	; (800f828 <TIM_OC5_SetConfig+0xc0>)
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d00f      	beq.n	800f7ea <TIM_OC5_SetConfig+0x82>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	4a17      	ldr	r2, [pc, #92]	; (800f82c <TIM_OC5_SetConfig+0xc4>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d00b      	beq.n	800f7ea <TIM_OC5_SetConfig+0x82>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	4a16      	ldr	r2, [pc, #88]	; (800f830 <TIM_OC5_SetConfig+0xc8>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d007      	beq.n	800f7ea <TIM_OC5_SetConfig+0x82>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4a15      	ldr	r2, [pc, #84]	; (800f834 <TIM_OC5_SetConfig+0xcc>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d003      	beq.n	800f7ea <TIM_OC5_SetConfig+0x82>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4a14      	ldr	r2, [pc, #80]	; (800f838 <TIM_OC5_SetConfig+0xd0>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d109      	bne.n	800f7fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f7f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	695b      	ldr	r3, [r3, #20]
 800f7f6:	021b      	lsls	r3, r3, #8
 800f7f8:	697a      	ldr	r2, [r7, #20]
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	697a      	ldr	r2, [r7, #20]
 800f802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	68fa      	ldr	r2, [r7, #12]
 800f808:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	685a      	ldr	r2, [r3, #4]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	693a      	ldr	r2, [r7, #16]
 800f816:	621a      	str	r2, [r3, #32]
}
 800f818:	bf00      	nop
 800f81a:	371c      	adds	r7, #28
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	40012c00 	.word	0x40012c00
 800f828:	40013400 	.word	0x40013400
 800f82c:	40014000 	.word	0x40014000
 800f830:	40014400 	.word	0x40014400
 800f834:	40014800 	.word	0x40014800
 800f838:	40015000 	.word	0x40015000

0800f83c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b087      	sub	sp, #28
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6a1b      	ldr	r3, [r3, #32]
 800f84a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6a1b      	ldr	r3, [r3, #32]
 800f856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f86a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f86e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	021b      	lsls	r3, r3, #8
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	4313      	orrs	r3, r2
 800f87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	689b      	ldr	r3, [r3, #8]
 800f888:	051b      	lsls	r3, r3, #20
 800f88a:	693a      	ldr	r2, [r7, #16]
 800f88c:	4313      	orrs	r3, r2
 800f88e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a1a      	ldr	r2, [pc, #104]	; (800f8fc <TIM_OC6_SetConfig+0xc0>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d013      	beq.n	800f8c0 <TIM_OC6_SetConfig+0x84>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a19      	ldr	r2, [pc, #100]	; (800f900 <TIM_OC6_SetConfig+0xc4>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d00f      	beq.n	800f8c0 <TIM_OC6_SetConfig+0x84>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4a18      	ldr	r2, [pc, #96]	; (800f904 <TIM_OC6_SetConfig+0xc8>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d00b      	beq.n	800f8c0 <TIM_OC6_SetConfig+0x84>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	4a17      	ldr	r2, [pc, #92]	; (800f908 <TIM_OC6_SetConfig+0xcc>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d007      	beq.n	800f8c0 <TIM_OC6_SetConfig+0x84>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	4a16      	ldr	r2, [pc, #88]	; (800f90c <TIM_OC6_SetConfig+0xd0>)
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d003      	beq.n	800f8c0 <TIM_OC6_SetConfig+0x84>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	4a15      	ldr	r2, [pc, #84]	; (800f910 <TIM_OC6_SetConfig+0xd4>)
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	d109      	bne.n	800f8d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f8c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	695b      	ldr	r3, [r3, #20]
 800f8cc:	029b      	lsls	r3, r3, #10
 800f8ce:	697a      	ldr	r2, [r7, #20]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	697a      	ldr	r2, [r7, #20]
 800f8d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	685a      	ldr	r2, [r3, #4]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	693a      	ldr	r2, [r7, #16]
 800f8ec:	621a      	str	r2, [r3, #32]
}
 800f8ee:	bf00      	nop
 800f8f0:	371c      	adds	r7, #28
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr
 800f8fa:	bf00      	nop
 800f8fc:	40012c00 	.word	0x40012c00
 800f900:	40013400 	.word	0x40013400
 800f904:	40014000 	.word	0x40014000
 800f908:	40014400 	.word	0x40014400
 800f90c:	40014800 	.word	0x40014800
 800f910:	40015000 	.word	0x40015000

0800f914 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b086      	sub	sp, #24
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f92c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f930:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	697a      	ldr	r2, [r7, #20]
 800f938:	4313      	orrs	r3, r2
 800f93a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f942:	f023 0307 	bic.w	r3, r3, #7
 800f946:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	697a      	ldr	r2, [r7, #20]
 800f94e:	4313      	orrs	r3, r2
 800f950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	697a      	ldr	r2, [r7, #20]
 800f958:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	2b70      	cmp	r3, #112	; 0x70
 800f960:	d034      	beq.n	800f9cc <TIM_SlaveTimer_SetConfig+0xb8>
 800f962:	2b70      	cmp	r3, #112	; 0x70
 800f964:	d811      	bhi.n	800f98a <TIM_SlaveTimer_SetConfig+0x76>
 800f966:	2b30      	cmp	r3, #48	; 0x30
 800f968:	d07d      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
 800f96a:	2b30      	cmp	r3, #48	; 0x30
 800f96c:	d806      	bhi.n	800f97c <TIM_SlaveTimer_SetConfig+0x68>
 800f96e:	2b10      	cmp	r3, #16
 800f970:	d079      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
 800f972:	2b20      	cmp	r3, #32
 800f974:	d077      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
 800f976:	2b00      	cmp	r3, #0
 800f978:	d075      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800f97a:	e075      	b.n	800fa68 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f97c:	2b50      	cmp	r3, #80	; 0x50
 800f97e:	d05e      	beq.n	800fa3e <TIM_SlaveTimer_SetConfig+0x12a>
 800f980:	2b60      	cmp	r3, #96	; 0x60
 800f982:	d066      	beq.n	800fa52 <TIM_SlaveTimer_SetConfig+0x13e>
 800f984:	2b40      	cmp	r3, #64	; 0x40
 800f986:	d02c      	beq.n	800f9e2 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800f988:	e06e      	b.n	800fa68 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f98a:	4a3a      	ldr	r2, [pc, #232]	; (800fa74 <TIM_SlaveTimer_SetConfig+0x160>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d06a      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
 800f990:	4a38      	ldr	r2, [pc, #224]	; (800fa74 <TIM_SlaveTimer_SetConfig+0x160>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d809      	bhi.n	800f9aa <TIM_SlaveTimer_SetConfig+0x96>
 800f996:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f99a:	d064      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
 800f99c:	4a36      	ldr	r2, [pc, #216]	; (800fa78 <TIM_SlaveTimer_SetConfig+0x164>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d061      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
 800f9a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9a6:	d05e      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f9a8:	e05e      	b.n	800fa68 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f9aa:	4a34      	ldr	r2, [pc, #208]	; (800fa7c <TIM_SlaveTimer_SetConfig+0x168>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d05a      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
 800f9b0:	4a32      	ldr	r2, [pc, #200]	; (800fa7c <TIM_SlaveTimer_SetConfig+0x168>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d803      	bhi.n	800f9be <TIM_SlaveTimer_SetConfig+0xaa>
 800f9b6:	4a32      	ldr	r2, [pc, #200]	; (800fa80 <TIM_SlaveTimer_SetConfig+0x16c>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d054      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f9bc:	e054      	b.n	800fa68 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f9be:	4a31      	ldr	r2, [pc, #196]	; (800fa84 <TIM_SlaveTimer_SetConfig+0x170>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d050      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
 800f9c4:	4a30      	ldr	r2, [pc, #192]	; (800fa88 <TIM_SlaveTimer_SetConfig+0x174>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d04d      	beq.n	800fa66 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f9ca:	e04d      	b.n	800fa68 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6818      	ldr	r0, [r3, #0]
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	68d9      	ldr	r1, [r3, #12]
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	689a      	ldr	r2, [r3, #8]
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	f000 f9fc 	bl	800fdd8 <TIM_ETR_SetConfig>
      break;
 800f9e0:	e042      	b.n	800fa68 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b05      	cmp	r3, #5
 800f9e8:	d004      	beq.n	800f9f4 <TIM_SlaveTimer_SetConfig+0xe0>
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800f9f2:	d101      	bne.n	800f9f8 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e038      	b.n	800fa6a <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	6a1a      	ldr	r2, [r3, #32]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f022 0201 	bic.w	r2, r2, #1
 800fa0e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	699b      	ldr	r3, [r3, #24]
 800fa16:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa1e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	691b      	ldr	r3, [r3, #16]
 800fa24:	011b      	lsls	r3, r3, #4
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	693a      	ldr	r2, [r7, #16]
 800fa3a:	621a      	str	r2, [r3, #32]
      break;
 800fa3c:	e014      	b.n	800fa68 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6818      	ldr	r0, [r3, #0]
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	6899      	ldr	r1, [r3, #8]
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	691b      	ldr	r3, [r3, #16]
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	f000 f892 	bl	800fb74 <TIM_TI1_ConfigInputStage>
      break;
 800fa50:	e00a      	b.n	800fa68 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6818      	ldr	r0, [r3, #0]
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	6899      	ldr	r1, [r3, #8]
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	461a      	mov	r2, r3
 800fa60:	f000 f8f4 	bl	800fc4c <TIM_TI2_ConfigInputStage>
      break;
 800fa64:	e000      	b.n	800fa68 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800fa66:	bf00      	nop
  }
  return HAL_OK;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3718      	adds	r7, #24
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	00100030 	.word	0x00100030
 800fa78:	00100020 	.word	0x00100020
 800fa7c:	00100050 	.word	0x00100050
 800fa80:	00100040 	.word	0x00100040
 800fa84:	00100060 	.word	0x00100060
 800fa88:	00100070 	.word	0x00100070

0800fa8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b087      	sub	sp, #28
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	607a      	str	r2, [r7, #4]
 800fa98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	f023 0201 	bic.w	r2, r3, #1
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	699b      	ldr	r3, [r3, #24]
 800faaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6a1b      	ldr	r3, [r3, #32]
 800fab0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	4a28      	ldr	r2, [pc, #160]	; (800fb58 <TIM_TI1_SetConfig+0xcc>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d01b      	beq.n	800faf2 <TIM_TI1_SetConfig+0x66>
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fac0:	d017      	beq.n	800faf2 <TIM_TI1_SetConfig+0x66>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	4a25      	ldr	r2, [pc, #148]	; (800fb5c <TIM_TI1_SetConfig+0xd0>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d013      	beq.n	800faf2 <TIM_TI1_SetConfig+0x66>
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	4a24      	ldr	r2, [pc, #144]	; (800fb60 <TIM_TI1_SetConfig+0xd4>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d00f      	beq.n	800faf2 <TIM_TI1_SetConfig+0x66>
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	4a23      	ldr	r2, [pc, #140]	; (800fb64 <TIM_TI1_SetConfig+0xd8>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d00b      	beq.n	800faf2 <TIM_TI1_SetConfig+0x66>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	4a22      	ldr	r2, [pc, #136]	; (800fb68 <TIM_TI1_SetConfig+0xdc>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d007      	beq.n	800faf2 <TIM_TI1_SetConfig+0x66>
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	4a21      	ldr	r2, [pc, #132]	; (800fb6c <TIM_TI1_SetConfig+0xe0>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d003      	beq.n	800faf2 <TIM_TI1_SetConfig+0x66>
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	4a20      	ldr	r2, [pc, #128]	; (800fb70 <TIM_TI1_SetConfig+0xe4>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d101      	bne.n	800faf6 <TIM_TI1_SetConfig+0x6a>
 800faf2:	2301      	movs	r3, #1
 800faf4:	e000      	b.n	800faf8 <TIM_TI1_SetConfig+0x6c>
 800faf6:	2300      	movs	r3, #0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d008      	beq.n	800fb0e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	f023 0303 	bic.w	r3, r3, #3
 800fb02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	617b      	str	r3, [r7, #20]
 800fb0c:	e003      	b.n	800fb16 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	f043 0301 	orr.w	r3, r3, #1
 800fb14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	011b      	lsls	r3, r3, #4
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	697a      	ldr	r2, [r7, #20]
 800fb26:	4313      	orrs	r3, r2
 800fb28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	f023 030a 	bic.w	r3, r3, #10
 800fb30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	f003 030a 	and.w	r3, r3, #10
 800fb38:	693a      	ldr	r2, [r7, #16]
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	697a      	ldr	r2, [r7, #20]
 800fb42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	693a      	ldr	r2, [r7, #16]
 800fb48:	621a      	str	r2, [r3, #32]
}
 800fb4a:	bf00      	nop
 800fb4c:	371c      	adds	r7, #28
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr
 800fb56:	bf00      	nop
 800fb58:	40012c00 	.word	0x40012c00
 800fb5c:	40000400 	.word	0x40000400
 800fb60:	40000800 	.word	0x40000800
 800fb64:	40000c00 	.word	0x40000c00
 800fb68:	40013400 	.word	0x40013400
 800fb6c:	40014000 	.word	0x40014000
 800fb70:	40015000 	.word	0x40015000

0800fb74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b087      	sub	sp, #28
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	6a1b      	ldr	r3, [r3, #32]
 800fb84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	6a1b      	ldr	r3, [r3, #32]
 800fb8a:	f023 0201 	bic.w	r2, r3, #1
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	699b      	ldr	r3, [r3, #24]
 800fb96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	011b      	lsls	r3, r3, #4
 800fba4:	693a      	ldr	r2, [r7, #16]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	f023 030a 	bic.w	r3, r3, #10
 800fbb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	693a      	ldr	r2, [r7, #16]
 800fbbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	697a      	ldr	r2, [r7, #20]
 800fbc4:	621a      	str	r2, [r3, #32]
}
 800fbc6:	bf00      	nop
 800fbc8:	371c      	adds	r7, #28
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr

0800fbd2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fbd2:	b480      	push	{r7}
 800fbd4:	b087      	sub	sp, #28
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	60f8      	str	r0, [r7, #12]
 800fbda:	60b9      	str	r1, [r7, #8]
 800fbdc:	607a      	str	r2, [r7, #4]
 800fbde:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	6a1b      	ldr	r3, [r3, #32]
 800fbe4:	f023 0210 	bic.w	r2, r3, #16
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	699b      	ldr	r3, [r3, #24]
 800fbf0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	6a1b      	ldr	r3, [r3, #32]
 800fbf6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	021b      	lsls	r3, r3, #8
 800fc04:	697a      	ldr	r2, [r7, #20]
 800fc06:	4313      	orrs	r3, r2
 800fc08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	031b      	lsls	r3, r3, #12
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	697a      	ldr	r2, [r7, #20]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fc24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	011b      	lsls	r3, r3, #4
 800fc2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	4313      	orrs	r3, r2
 800fc32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	621a      	str	r2, [r3, #32]
}
 800fc40:	bf00      	nop
 800fc42:	371c      	adds	r7, #28
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b087      	sub	sp, #28
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6a1b      	ldr	r3, [r3, #32]
 800fc5c:	f023 0210 	bic.w	r2, r3, #16
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	699b      	ldr	r3, [r3, #24]
 800fc68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6a1b      	ldr	r3, [r3, #32]
 800fc6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	031b      	lsls	r3, r3, #12
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fc88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	011b      	lsls	r3, r3, #4
 800fc8e:	693a      	ldr	r2, [r7, #16]
 800fc90:	4313      	orrs	r3, r2
 800fc92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	697a      	ldr	r2, [r7, #20]
 800fc98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	693a      	ldr	r2, [r7, #16]
 800fc9e:	621a      	str	r2, [r3, #32]
}
 800fca0:	bf00      	nop
 800fca2:	371c      	adds	r7, #28
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b087      	sub	sp, #28
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
 800fcb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6a1b      	ldr	r3, [r3, #32]
 800fcbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	69db      	ldr	r3, [r3, #28]
 800fcca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6a1b      	ldr	r3, [r3, #32]
 800fcd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	f023 0303 	bic.w	r3, r3, #3
 800fcd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fcda:	697a      	ldr	r2, [r7, #20]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4313      	orrs	r3, r2
 800fce0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fce8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	011b      	lsls	r3, r3, #4
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	697a      	ldr	r2, [r7, #20]
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fcfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	021b      	lsls	r3, r3, #8
 800fd02:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fd06:	693a      	ldr	r2, [r7, #16]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	693a      	ldr	r2, [r7, #16]
 800fd16:	621a      	str	r2, [r3, #32]
}
 800fd18:	bf00      	nop
 800fd1a:	371c      	adds	r7, #28
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b087      	sub	sp, #28
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
 800fd30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	6a1b      	ldr	r3, [r3, #32]
 800fd36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	69db      	ldr	r3, [r3, #28]
 800fd42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6a1b      	ldr	r3, [r3, #32]
 800fd48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	021b      	lsls	r3, r3, #8
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	031b      	lsls	r3, r3, #12
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	697a      	ldr	r2, [r7, #20]
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fd76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	031b      	lsls	r3, r3, #12
 800fd7c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fd80:	693a      	ldr	r2, [r7, #16]
 800fd82:	4313      	orrs	r3, r2
 800fd84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	697a      	ldr	r2, [r7, #20]
 800fd8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	693a      	ldr	r2, [r7, #16]
 800fd90:	621a      	str	r2, [r3, #32]
}
 800fd92:	bf00      	nop
 800fd94:	371c      	adds	r7, #28
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr

0800fd9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fd9e:	b480      	push	{r7}
 800fda0:	b085      	sub	sp, #20
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
 800fda6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fdb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fdba:	683a      	ldr	r2, [r7, #0]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	f043 0307 	orr.w	r3, r3, #7
 800fdc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	609a      	str	r2, [r3, #8]
}
 800fdcc:	bf00      	nop
 800fdce:	3714      	adds	r7, #20
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b087      	sub	sp, #28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
 800fde4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fdf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	021a      	lsls	r2, r3, #8
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	431a      	orrs	r2, r3
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	697a      	ldr	r2, [r7, #20]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	697a      	ldr	r2, [r7, #20]
 800fe0a:	609a      	str	r2, [r3, #8]
}
 800fe0c:	bf00      	nop
 800fe0e:	371c      	adds	r7, #28
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr

0800fe18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b087      	sub	sp, #28
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	f003 031f 	and.w	r3, r3, #31
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	6a1a      	ldr	r2, [r3, #32]
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	43db      	mvns	r3, r3
 800fe3a:	401a      	ands	r2, r3
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	6a1a      	ldr	r2, [r3, #32]
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	f003 031f 	and.w	r3, r3, #31
 800fe4a:	6879      	ldr	r1, [r7, #4]
 800fe4c:	fa01 f303 	lsl.w	r3, r1, r3
 800fe50:	431a      	orrs	r2, r3
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	621a      	str	r2, [r3, #32]
}
 800fe56:	bf00      	nop
 800fe58:	371c      	adds	r7, #28
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe60:	4770      	bx	lr
	...

0800fe64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d101      	bne.n	800fe7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe78:	2302      	movs	r3, #2
 800fe7a:	e074      	b.n	800ff66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2202      	movs	r2, #2
 800fe88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	689b      	ldr	r3, [r3, #8]
 800fe9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a34      	ldr	r2, [pc, #208]	; (800ff74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d009      	beq.n	800feba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a33      	ldr	r2, [pc, #204]	; (800ff78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d004      	beq.n	800feba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4a31      	ldr	r2, [pc, #196]	; (800ff7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d108      	bne.n	800fecc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fec0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	68fa      	ldr	r2, [r7, #12]
 800fec8:	4313      	orrs	r3, r2
 800feca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	4313      	orrs	r3, r2
 800fee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4a21      	ldr	r2, [pc, #132]	; (800ff74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d022      	beq.n	800ff3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fefc:	d01d      	beq.n	800ff3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4a1f      	ldr	r2, [pc, #124]	; (800ff80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d018      	beq.n	800ff3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	4a1d      	ldr	r2, [pc, #116]	; (800ff84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d013      	beq.n	800ff3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	4a1c      	ldr	r2, [pc, #112]	; (800ff88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d00e      	beq.n	800ff3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	4a15      	ldr	r2, [pc, #84]	; (800ff78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d009      	beq.n	800ff3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	4a18      	ldr	r2, [pc, #96]	; (800ff8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d004      	beq.n	800ff3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4a11      	ldr	r2, [pc, #68]	; (800ff7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d10c      	bne.n	800ff54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	689b      	ldr	r3, [r3, #8]
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	68ba      	ldr	r2, [r7, #8]
 800ff52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2201      	movs	r2, #1
 800ff58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3714      	adds	r7, #20
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	40012c00 	.word	0x40012c00
 800ff78:	40013400 	.word	0x40013400
 800ff7c:	40015000 	.word	0x40015000
 800ff80:	40000400 	.word	0x40000400
 800ff84:	40000800 	.word	0x40000800
 800ff88:	40000c00 	.word	0x40000c00
 800ff8c:	40014000 	.word	0x40014000

0800ff90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b085      	sub	sp, #20
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d101      	bne.n	800ffac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ffa8:	2302      	movs	r3, #2
 800ffaa:	e096      	b.n	80100da <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	4313      	orrs	r3, r2
 800ffce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	691b      	ldr	r3, [r3, #16]
 800fff6:	4313      	orrs	r3, r2
 800fff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	695b      	ldr	r3, [r3, #20]
 8010004:	4313      	orrs	r3, r2
 8010006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010012:	4313      	orrs	r3, r2
 8010014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	699b      	ldr	r3, [r3, #24]
 8010020:	041b      	lsls	r3, r3, #16
 8010022:	4313      	orrs	r3, r2
 8010024:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a2f      	ldr	r2, [pc, #188]	; (80100e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d009      	beq.n	8010044 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4a2d      	ldr	r2, [pc, #180]	; (80100ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d004      	beq.n	8010044 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a2c      	ldr	r2, [pc, #176]	; (80100f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d106      	bne.n	8010052 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	69db      	ldr	r3, [r3, #28]
 801004e:	4313      	orrs	r3, r2
 8010050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a24      	ldr	r2, [pc, #144]	; (80100e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d009      	beq.n	8010070 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a22      	ldr	r2, [pc, #136]	; (80100ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d004      	beq.n	8010070 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4a21      	ldr	r2, [pc, #132]	; (80100f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d12b      	bne.n	80100c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801007a:	051b      	lsls	r3, r3, #20
 801007c:	4313      	orrs	r3, r2
 801007e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	4313      	orrs	r3, r2
 801008c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010098:	4313      	orrs	r3, r2
 801009a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a11      	ldr	r2, [pc, #68]	; (80100e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d009      	beq.n	80100ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4a10      	ldr	r2, [pc, #64]	; (80100ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d004      	beq.n	80100ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a0e      	ldr	r2, [pc, #56]	; (80100f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d106      	bne.n	80100c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c4:	4313      	orrs	r3, r2
 80100c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	68fa      	ldr	r2, [r7, #12]
 80100ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2200      	movs	r2, #0
 80100d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100d8:	2300      	movs	r3, #0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3714      	adds	r7, #20
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr
 80100e6:	bf00      	nop
 80100e8:	40012c00 	.word	0x40012c00
 80100ec:	40013400 	.word	0x40013400
 80100f0:	40015000 	.word	0x40015000

080100f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80100fc:	bf00      	nop
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010110:	bf00      	nop
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010124:	bf00      	nop
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8010138:	bf00      	nop
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801014c:	bf00      	nop
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8010158:	b480      	push	{r7}
 801015a:	b083      	sub	sp, #12
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010160:	bf00      	nop
 8010162:	370c      	adds	r7, #12
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8010174:	bf00      	nop
 8010176:	370c      	adds	r7, #12
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <LL_EXTI_EnableIT_0_31>:
{
 8010180:	b480      	push	{r7}
 8010182:	b083      	sub	sp, #12
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8010188:	4b05      	ldr	r3, [pc, #20]	; (80101a0 <LL_EXTI_EnableIT_0_31+0x20>)
 801018a:	681a      	ldr	r2, [r3, #0]
 801018c:	4904      	ldr	r1, [pc, #16]	; (80101a0 <LL_EXTI_EnableIT_0_31+0x20>)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4313      	orrs	r3, r2
 8010192:	600b      	str	r3, [r1, #0]
}
 8010194:	bf00      	nop
 8010196:	370c      	adds	r7, #12
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr
 80101a0:	40010400 	.word	0x40010400

080101a4 <LL_EXTI_EnableIT_32_63>:
{
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80101ac:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <LL_EXTI_EnableIT_32_63+0x20>)
 80101ae:	6a1a      	ldr	r2, [r3, #32]
 80101b0:	4904      	ldr	r1, [pc, #16]	; (80101c4 <LL_EXTI_EnableIT_32_63+0x20>)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	4313      	orrs	r3, r2
 80101b6:	620b      	str	r3, [r1, #32]
}
 80101b8:	bf00      	nop
 80101ba:	370c      	adds	r7, #12
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr
 80101c4:	40010400 	.word	0x40010400

080101c8 <LL_EXTI_DisableIT_0_31>:
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80101d0:	4b06      	ldr	r3, [pc, #24]	; (80101ec <LL_EXTI_DisableIT_0_31+0x24>)
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	43db      	mvns	r3, r3
 80101d8:	4904      	ldr	r1, [pc, #16]	; (80101ec <LL_EXTI_DisableIT_0_31+0x24>)
 80101da:	4013      	ands	r3, r2
 80101dc:	600b      	str	r3, [r1, #0]
}
 80101de:	bf00      	nop
 80101e0:	370c      	adds	r7, #12
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr
 80101ea:	bf00      	nop
 80101ec:	40010400 	.word	0x40010400

080101f0 <LL_EXTI_DisableIT_32_63>:
{
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80101f8:	4b06      	ldr	r3, [pc, #24]	; (8010214 <LL_EXTI_DisableIT_32_63+0x24>)
 80101fa:	6a1a      	ldr	r2, [r3, #32]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	43db      	mvns	r3, r3
 8010200:	4904      	ldr	r1, [pc, #16]	; (8010214 <LL_EXTI_DisableIT_32_63+0x24>)
 8010202:	4013      	ands	r3, r2
 8010204:	620b      	str	r3, [r1, #32]
}
 8010206:	bf00      	nop
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	40010400 	.word	0x40010400

08010218 <LL_EXTI_EnableEvent_0_31>:
{
 8010218:	b480      	push	{r7}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8010220:	4b05      	ldr	r3, [pc, #20]	; (8010238 <LL_EXTI_EnableEvent_0_31+0x20>)
 8010222:	685a      	ldr	r2, [r3, #4]
 8010224:	4904      	ldr	r1, [pc, #16]	; (8010238 <LL_EXTI_EnableEvent_0_31+0x20>)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4313      	orrs	r3, r2
 801022a:	604b      	str	r3, [r1, #4]
}
 801022c:	bf00      	nop
 801022e:	370c      	adds	r7, #12
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr
 8010238:	40010400 	.word	0x40010400

0801023c <LL_EXTI_EnableEvent_32_63>:
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8010244:	4b05      	ldr	r3, [pc, #20]	; (801025c <LL_EXTI_EnableEvent_32_63+0x20>)
 8010246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010248:	4904      	ldr	r1, [pc, #16]	; (801025c <LL_EXTI_EnableEvent_32_63+0x20>)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4313      	orrs	r3, r2
 801024e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8010250:	bf00      	nop
 8010252:	370c      	adds	r7, #12
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr
 801025c:	40010400 	.word	0x40010400

08010260 <LL_EXTI_DisableEvent_0_31>:
{
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8010268:	4b06      	ldr	r3, [pc, #24]	; (8010284 <LL_EXTI_DisableEvent_0_31+0x24>)
 801026a:	685a      	ldr	r2, [r3, #4]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	43db      	mvns	r3, r3
 8010270:	4904      	ldr	r1, [pc, #16]	; (8010284 <LL_EXTI_DisableEvent_0_31+0x24>)
 8010272:	4013      	ands	r3, r2
 8010274:	604b      	str	r3, [r1, #4]
}
 8010276:	bf00      	nop
 8010278:	370c      	adds	r7, #12
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	40010400 	.word	0x40010400

08010288 <LL_EXTI_DisableEvent_32_63>:
{
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8010290:	4b06      	ldr	r3, [pc, #24]	; (80102ac <LL_EXTI_DisableEvent_32_63+0x24>)
 8010292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	43db      	mvns	r3, r3
 8010298:	4904      	ldr	r1, [pc, #16]	; (80102ac <LL_EXTI_DisableEvent_32_63+0x24>)
 801029a:	4013      	ands	r3, r2
 801029c:	624b      	str	r3, [r1, #36]	; 0x24
}
 801029e:	bf00      	nop
 80102a0:	370c      	adds	r7, #12
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	40010400 	.word	0x40010400

080102b0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80102b8:	4b05      	ldr	r3, [pc, #20]	; (80102d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80102ba:	689a      	ldr	r2, [r3, #8]
 80102bc:	4904      	ldr	r1, [pc, #16]	; (80102d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4313      	orrs	r3, r2
 80102c2:	608b      	str	r3, [r1, #8]
}
 80102c4:	bf00      	nop
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr
 80102d0:	40010400 	.word	0x40010400

080102d4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80102dc:	4b05      	ldr	r3, [pc, #20]	; (80102f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80102de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80102e0:	4904      	ldr	r1, [pc, #16]	; (80102f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4313      	orrs	r3, r2
 80102e6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80102e8:	bf00      	nop
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr
 80102f4:	40010400 	.word	0x40010400

080102f8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8010300:	4b06      	ldr	r3, [pc, #24]	; (801031c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8010302:	689a      	ldr	r2, [r3, #8]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	43db      	mvns	r3, r3
 8010308:	4904      	ldr	r1, [pc, #16]	; (801031c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801030a:	4013      	ands	r3, r2
 801030c:	608b      	str	r3, [r1, #8]
}
 801030e:	bf00      	nop
 8010310:	370c      	adds	r7, #12
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	40010400 	.word	0x40010400

08010320 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8010328:	4b06      	ldr	r3, [pc, #24]	; (8010344 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 801032a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	43db      	mvns	r3, r3
 8010330:	4904      	ldr	r1, [pc, #16]	; (8010344 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8010332:	4013      	ands	r3, r2
 8010334:	628b      	str	r3, [r1, #40]	; 0x28
}
 8010336:	bf00      	nop
 8010338:	370c      	adds	r7, #12
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	40010400 	.word	0x40010400

08010348 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8010350:	4b05      	ldr	r3, [pc, #20]	; (8010368 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8010352:	68da      	ldr	r2, [r3, #12]
 8010354:	4904      	ldr	r1, [pc, #16]	; (8010368 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4313      	orrs	r3, r2
 801035a:	60cb      	str	r3, [r1, #12]
}
 801035c:	bf00      	nop
 801035e:	370c      	adds	r7, #12
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr
 8010368:	40010400 	.word	0x40010400

0801036c <LL_EXTI_EnableFallingTrig_32_63>:
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8010374:	4b05      	ldr	r3, [pc, #20]	; (801038c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8010376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010378:	4904      	ldr	r1, [pc, #16]	; (801038c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4313      	orrs	r3, r2
 801037e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8010380:	bf00      	nop
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr
 801038c:	40010400 	.word	0x40010400

08010390 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8010398:	4b06      	ldr	r3, [pc, #24]	; (80103b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 801039a:	68da      	ldr	r2, [r3, #12]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	43db      	mvns	r3, r3
 80103a0:	4904      	ldr	r1, [pc, #16]	; (80103b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80103a2:	4013      	ands	r3, r2
 80103a4:	60cb      	str	r3, [r1, #12]
}
 80103a6:	bf00      	nop
 80103a8:	370c      	adds	r7, #12
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr
 80103b2:	bf00      	nop
 80103b4:	40010400 	.word	0x40010400

080103b8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80103c0:	4b06      	ldr	r3, [pc, #24]	; (80103dc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80103c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	43db      	mvns	r3, r3
 80103c8:	4904      	ldr	r1, [pc, #16]	; (80103dc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80103ca:	4013      	ands	r3, r2
 80103cc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80103ce:	bf00      	nop
 80103d0:	370c      	adds	r7, #12
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	40010400 	.word	0x40010400

080103e0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80103e8:	2300      	movs	r3, #0
 80103ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	7a1b      	ldrb	r3, [r3, #8]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f000 80c8 	beq.w	8010586 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d05d      	beq.n	80104ba <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	7a5b      	ldrb	r3, [r3, #9]
 8010402:	2b01      	cmp	r3, #1
 8010404:	d00e      	beq.n	8010424 <LL_EXTI_Init+0x44>
 8010406:	2b02      	cmp	r3, #2
 8010408:	d017      	beq.n	801043a <LL_EXTI_Init+0x5a>
 801040a:	2b00      	cmp	r3, #0
 801040c:	d120      	bne.n	8010450 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	4618      	mov	r0, r3
 8010414:	f7ff ff24 	bl	8010260 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff feaf 	bl	8010180 <LL_EXTI_EnableIT_0_31>
          break;
 8010422:	e018      	b.n	8010456 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4618      	mov	r0, r3
 801042a:	f7ff fecd 	bl	80101c8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	4618      	mov	r0, r3
 8010434:	f7ff fef0 	bl	8010218 <LL_EXTI_EnableEvent_0_31>
          break;
 8010438:	e00d      	b.n	8010456 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff fe9e 	bl	8010180 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4618      	mov	r0, r3
 801044a:	f7ff fee5 	bl	8010218 <LL_EXTI_EnableEvent_0_31>
          break;
 801044e:	e002      	b.n	8010456 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8010450:	2301      	movs	r3, #1
 8010452:	60fb      	str	r3, [r7, #12]
          break;
 8010454:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	7a9b      	ldrb	r3, [r3, #10]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d02d      	beq.n	80104ba <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	7a9b      	ldrb	r3, [r3, #10]
 8010462:	2b02      	cmp	r3, #2
 8010464:	d00e      	beq.n	8010484 <LL_EXTI_Init+0xa4>
 8010466:	2b03      	cmp	r3, #3
 8010468:	d017      	beq.n	801049a <LL_EXTI_Init+0xba>
 801046a:	2b01      	cmp	r3, #1
 801046c:	d120      	bne.n	80104b0 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	4618      	mov	r0, r3
 8010474:	f7ff ff8c 	bl	8010390 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4618      	mov	r0, r3
 801047e:	f7ff ff17 	bl	80102b0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8010482:	e01b      	b.n	80104bc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff ff35 	bl	80102f8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4618      	mov	r0, r3
 8010494:	f7ff ff58 	bl	8010348 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8010498:	e010      	b.n	80104bc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4618      	mov	r0, r3
 80104a0:	f7ff ff06 	bl	80102b0 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7ff ff4d 	bl	8010348 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80104ae:	e005      	b.n	80104bc <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f043 0302 	orr.w	r3, r3, #2
 80104b6:	60fb      	str	r3, [r7, #12]
            break;
 80104b8:	e000      	b.n	80104bc <LL_EXTI_Init+0xdc>
        }
      }
 80104ba:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d075      	beq.n	80105b0 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	7a5b      	ldrb	r3, [r3, #9]
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d00e      	beq.n	80104ea <LL_EXTI_Init+0x10a>
 80104cc:	2b02      	cmp	r3, #2
 80104ce:	d017      	beq.n	8010500 <LL_EXTI_Init+0x120>
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d120      	bne.n	8010516 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	4618      	mov	r0, r3
 80104da:	f7ff fed5 	bl	8010288 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7ff fe5e 	bl	80101a4 <LL_EXTI_EnableIT_32_63>
          break;
 80104e8:	e01a      	b.n	8010520 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7ff fe7e 	bl	80101f0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7ff fe9f 	bl	801023c <LL_EXTI_EnableEvent_32_63>
          break;
 80104fe:	e00f      	b.n	8010520 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	4618      	mov	r0, r3
 8010506:	f7ff fe4d 	bl	80101a4 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	4618      	mov	r0, r3
 8010510:	f7ff fe94 	bl	801023c <LL_EXTI_EnableEvent_32_63>
          break;
 8010514:	e004      	b.n	8010520 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	f043 0304 	orr.w	r3, r3, #4
 801051c:	60fb      	str	r3, [r7, #12]
          break;
 801051e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	7a9b      	ldrb	r3, [r3, #10]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d043      	beq.n	80105b0 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	7a9b      	ldrb	r3, [r3, #10]
 801052c:	2b02      	cmp	r3, #2
 801052e:	d00e      	beq.n	801054e <LL_EXTI_Init+0x16e>
 8010530:	2b03      	cmp	r3, #3
 8010532:	d017      	beq.n	8010564 <LL_EXTI_Init+0x184>
 8010534:	2b01      	cmp	r3, #1
 8010536:	d120      	bne.n	801057a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	4618      	mov	r0, r3
 801053e:	f7ff ff3b 	bl	80103b8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	4618      	mov	r0, r3
 8010548:	f7ff fec4 	bl	80102d4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 801054c:	e031      	b.n	80105b2 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	4618      	mov	r0, r3
 8010554:	f7ff fee4 	bl	8010320 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff ff05 	bl	801036c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8010562:	e026      	b.n	80105b2 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff feb3 	bl	80102d4 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	4618      	mov	r0, r3
 8010574:	f7ff fefa 	bl	801036c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8010578:	e01b      	b.n	80105b2 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f043 0305 	orr.w	r3, r3, #5
 8010580:	60fb      	str	r3, [r7, #12]
            break;
 8010582:	bf00      	nop
 8010584:	e015      	b.n	80105b2 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	4618      	mov	r0, r3
 801058c:	f7ff fe1c 	bl	80101c8 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4618      	mov	r0, r3
 8010596:	f7ff fe63 	bl	8010260 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	4618      	mov	r0, r3
 80105a0:	f7ff fe26 	bl	80101f0 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7ff fe6d 	bl	8010288 <LL_EXTI_DisableEvent_32_63>
 80105ae:	e000      	b.n	80105b2 <LL_EXTI_Init+0x1d2>
      }
 80105b0:	bf00      	nop
  }

  return status;
 80105b2:	68fb      	ldr	r3, [r7, #12]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <LL_GPIO_SetPinMode>:
{
 80105bc:	b480      	push	{r7}
 80105be:	b089      	sub	sp, #36	; 0x24
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	fa93 f3a3 	rbit	r3, r3
 80105d6:	613b      	str	r3, [r7, #16]
  return result;
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	fab3 f383 	clz	r3, r3
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	005b      	lsls	r3, r3, #1
 80105e2:	2103      	movs	r1, #3
 80105e4:	fa01 f303 	lsl.w	r3, r1, r3
 80105e8:	43db      	mvns	r3, r3
 80105ea:	401a      	ands	r2, r3
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	fa93 f3a3 	rbit	r3, r3
 80105f6:	61bb      	str	r3, [r7, #24]
  return result;
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	fab3 f383 	clz	r3, r3
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	005b      	lsls	r3, r3, #1
 8010602:	6879      	ldr	r1, [r7, #4]
 8010604:	fa01 f303 	lsl.w	r3, r1, r3
 8010608:	431a      	orrs	r2, r3
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	601a      	str	r2, [r3, #0]
}
 801060e:	bf00      	nop
 8010610:	3724      	adds	r7, #36	; 0x24
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr

0801061a <LL_GPIO_SetPinOutputType>:
{
 801061a:	b480      	push	{r7}
 801061c:	b085      	sub	sp, #20
 801061e:	af00      	add	r7, sp, #0
 8010620:	60f8      	str	r0, [r7, #12]
 8010622:	60b9      	str	r1, [r7, #8]
 8010624:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	685a      	ldr	r2, [r3, #4]
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	43db      	mvns	r3, r3
 801062e:	401a      	ands	r2, r3
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	6879      	ldr	r1, [r7, #4]
 8010634:	fb01 f303 	mul.w	r3, r1, r3
 8010638:	431a      	orrs	r2, r3
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	605a      	str	r2, [r3, #4]
}
 801063e:	bf00      	nop
 8010640:	3714      	adds	r7, #20
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr

0801064a <LL_GPIO_SetPinSpeed>:
{
 801064a:	b480      	push	{r7}
 801064c:	b089      	sub	sp, #36	; 0x24
 801064e:	af00      	add	r7, sp, #0
 8010650:	60f8      	str	r0, [r7, #12]
 8010652:	60b9      	str	r1, [r7, #8]
 8010654:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	689a      	ldr	r2, [r3, #8]
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	fa93 f3a3 	rbit	r3, r3
 8010664:	613b      	str	r3, [r7, #16]
  return result;
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	fab3 f383 	clz	r3, r3
 801066c:	b2db      	uxtb	r3, r3
 801066e:	005b      	lsls	r3, r3, #1
 8010670:	2103      	movs	r1, #3
 8010672:	fa01 f303 	lsl.w	r3, r1, r3
 8010676:	43db      	mvns	r3, r3
 8010678:	401a      	ands	r2, r3
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	fa93 f3a3 	rbit	r3, r3
 8010684:	61bb      	str	r3, [r7, #24]
  return result;
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	fab3 f383 	clz	r3, r3
 801068c:	b2db      	uxtb	r3, r3
 801068e:	005b      	lsls	r3, r3, #1
 8010690:	6879      	ldr	r1, [r7, #4]
 8010692:	fa01 f303 	lsl.w	r3, r1, r3
 8010696:	431a      	orrs	r2, r3
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	609a      	str	r2, [r3, #8]
}
 801069c:	bf00      	nop
 801069e:	3724      	adds	r7, #36	; 0x24
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr

080106a8 <LL_GPIO_SetPinPull>:
{
 80106a8:	b480      	push	{r7}
 80106aa:	b089      	sub	sp, #36	; 0x24
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	68da      	ldr	r2, [r3, #12]
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	fa93 f3a3 	rbit	r3, r3
 80106c2:	613b      	str	r3, [r7, #16]
  return result;
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	fab3 f383 	clz	r3, r3
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	005b      	lsls	r3, r3, #1
 80106ce:	2103      	movs	r1, #3
 80106d0:	fa01 f303 	lsl.w	r3, r1, r3
 80106d4:	43db      	mvns	r3, r3
 80106d6:	401a      	ands	r2, r3
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	fa93 f3a3 	rbit	r3, r3
 80106e2:	61bb      	str	r3, [r7, #24]
  return result;
 80106e4:	69bb      	ldr	r3, [r7, #24]
 80106e6:	fab3 f383 	clz	r3, r3
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	005b      	lsls	r3, r3, #1
 80106ee:	6879      	ldr	r1, [r7, #4]
 80106f0:	fa01 f303 	lsl.w	r3, r1, r3
 80106f4:	431a      	orrs	r2, r3
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	60da      	str	r2, [r3, #12]
}
 80106fa:	bf00      	nop
 80106fc:	3724      	adds	r7, #36	; 0x24
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr

08010706 <LL_GPIO_SetAFPin_0_7>:
{
 8010706:	b480      	push	{r7}
 8010708:	b089      	sub	sp, #36	; 0x24
 801070a:	af00      	add	r7, sp, #0
 801070c:	60f8      	str	r0, [r7, #12]
 801070e:	60b9      	str	r1, [r7, #8]
 8010710:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	6a1a      	ldr	r2, [r3, #32]
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	fa93 f3a3 	rbit	r3, r3
 8010720:	613b      	str	r3, [r7, #16]
  return result;
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	fab3 f383 	clz	r3, r3
 8010728:	b2db      	uxtb	r3, r3
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	210f      	movs	r1, #15
 801072e:	fa01 f303 	lsl.w	r3, r1, r3
 8010732:	43db      	mvns	r3, r3
 8010734:	401a      	ands	r2, r3
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801073a:	69fb      	ldr	r3, [r7, #28]
 801073c:	fa93 f3a3 	rbit	r3, r3
 8010740:	61bb      	str	r3, [r7, #24]
  return result;
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	fab3 f383 	clz	r3, r3
 8010748:	b2db      	uxtb	r3, r3
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	6879      	ldr	r1, [r7, #4]
 801074e:	fa01 f303 	lsl.w	r3, r1, r3
 8010752:	431a      	orrs	r2, r3
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	621a      	str	r2, [r3, #32]
}
 8010758:	bf00      	nop
 801075a:	3724      	adds	r7, #36	; 0x24
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <LL_GPIO_SetAFPin_8_15>:
{
 8010764:	b480      	push	{r7}
 8010766:	b089      	sub	sp, #36	; 0x24
 8010768:	af00      	add	r7, sp, #0
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	0a1b      	lsrs	r3, r3, #8
 8010778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	fa93 f3a3 	rbit	r3, r3
 8010780:	613b      	str	r3, [r7, #16]
  return result;
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	fab3 f383 	clz	r3, r3
 8010788:	b2db      	uxtb	r3, r3
 801078a:	009b      	lsls	r3, r3, #2
 801078c:	210f      	movs	r1, #15
 801078e:	fa01 f303 	lsl.w	r3, r1, r3
 8010792:	43db      	mvns	r3, r3
 8010794:	401a      	ands	r2, r3
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	0a1b      	lsrs	r3, r3, #8
 801079a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801079c:	69fb      	ldr	r3, [r7, #28]
 801079e:	fa93 f3a3 	rbit	r3, r3
 80107a2:	61bb      	str	r3, [r7, #24]
  return result;
 80107a4:	69bb      	ldr	r3, [r7, #24]
 80107a6:	fab3 f383 	clz	r3, r3
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	6879      	ldr	r1, [r7, #4]
 80107b0:	fa01 f303 	lsl.w	r3, r1, r3
 80107b4:	431a      	orrs	r2, r3
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80107ba:	bf00      	nop
 80107bc:	3724      	adds	r7, #36	; 0x24
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr

080107c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80107c6:	b580      	push	{r7, lr}
 80107c8:	b086      	sub	sp, #24
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
 80107ce:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	fa93 f3a3 	rbit	r3, r3
 80107dc:	60bb      	str	r3, [r7, #8]
  return result;
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	fab3 f383 	clz	r3, r3
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80107e8:	e040      	b.n	801086c <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	2101      	movs	r1, #1
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	fa01 f303 	lsl.w	r3, r1, r3
 80107f6:	4013      	ands	r3, r2
 80107f8:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d032      	beq.n	8010866 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	461a      	mov	r2, r3
 8010806:	6939      	ldr	r1, [r7, #16]
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7ff fed7 	bl	80105bc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	2b01      	cmp	r3, #1
 8010814:	d003      	beq.n	801081e <LL_GPIO_Init+0x58>
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	2b02      	cmp	r3, #2
 801081c:	d106      	bne.n	801082c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	461a      	mov	r2, r3
 8010824:	6939      	ldr	r1, [r7, #16]
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f7ff ff0f 	bl	801064a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	691b      	ldr	r3, [r3, #16]
 8010830:	461a      	mov	r2, r3
 8010832:	6939      	ldr	r1, [r7, #16]
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f7ff ff37 	bl	80106a8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	2b02      	cmp	r3, #2
 8010840:	d111      	bne.n	8010866 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	2bff      	cmp	r3, #255	; 0xff
 8010846:	d807      	bhi.n	8010858 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	695b      	ldr	r3, [r3, #20]
 801084c:	461a      	mov	r2, r3
 801084e:	6939      	ldr	r1, [r7, #16]
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f7ff ff58 	bl	8010706 <LL_GPIO_SetAFPin_0_7>
 8010856:	e006      	b.n	8010866 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	695b      	ldr	r3, [r3, #20]
 801085c:	461a      	mov	r2, r3
 801085e:	6939      	ldr	r1, [r7, #16]
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7ff ff7f 	bl	8010764 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	3301      	adds	r3, #1
 801086a:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	fa22 f303 	lsr.w	r3, r2, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	d1b7      	bne.n	80107ea <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	2b01      	cmp	r3, #1
 8010880:	d003      	beq.n	801088a <LL_GPIO_Init+0xc4>
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	2b02      	cmp	r3, #2
 8010888:	d107      	bne.n	801089a <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	6819      	ldr	r1, [r3, #0]
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	461a      	mov	r2, r3
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f7ff fec0 	bl	801061a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3718      	adds	r7, #24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 80108a4:	b590      	push	{r4, r7, lr}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4604      	mov	r4, r0
 80108ac:	4608      	mov	r0, r1
 80108ae:	4611      	mov	r1, r2
 80108b0:	461a      	mov	r2, r3
 80108b2:	4623      	mov	r3, r4
 80108b4:	80fb      	strh	r3, [r7, #6]
 80108b6:	4603      	mov	r3, r0
 80108b8:	80bb      	strh	r3, [r7, #4]
 80108ba:	460b      	mov	r3, r1
 80108bc:	70fb      	strb	r3, [r7, #3]
 80108be:	4613      	mov	r3, r2
 80108c0:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 80108c2:	2300      	movs	r3, #0
 80108c4:	60fb      	str	r3, [r7, #12]
 80108c6:	e026      	b.n	8010916 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 80108c8:	2300      	movs	r3, #0
 80108ca:	60bb      	str	r3, [r7, #8]
 80108cc:	e01c      	b.n	8010908 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	b29a      	uxth	r2, r3
 80108d2:	88fb      	ldrh	r3, [r7, #6]
 80108d4:	4413      	add	r3, r2
 80108d6:	b298      	uxth	r0, r3
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	009b      	lsls	r3, r3, #2
 80108dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108de:	4413      	add	r3, r2
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80108e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	88bb      	ldrh	r3, [r7, #4]
 80108ee:	4413      	add	r3, r2
 80108f0:	b29a      	uxth	r2, r3
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	4413      	add	r3, r2
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	883a      	ldrh	r2, [r7, #0]
 80108fc:	4619      	mov	r1, r3
 80108fe:	f000 fc1f 	bl	8011140 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	3301      	adds	r3, #1
 8010906:	60bb      	str	r3, [r7, #8]
 8010908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801090a:	68ba      	ldr	r2, [r7, #8]
 801090c:	429a      	cmp	r2, r3
 801090e:	dbde      	blt.n	80108ce <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	3301      	adds	r3, #1
 8010914:	60fb      	str	r3, [r7, #12]
 8010916:	78fb      	ldrb	r3, [r7, #3]
 8010918:	68fa      	ldr	r2, [r7, #12]
 801091a:	429a      	cmp	r2, r3
 801091c:	dbd4      	blt.n	80108c8 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 801091e:	bf00      	nop
 8010920:	3714      	adds	r7, #20
 8010922:	46bd      	mov	sp, r7
 8010924:	bd90      	pop	{r4, r7, pc}

08010926 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 8010926:	b590      	push	{r4, r7, lr}
 8010928:	b087      	sub	sp, #28
 801092a:	af02      	add	r7, sp, #8
 801092c:	4604      	mov	r4, r0
 801092e:	4608      	mov	r0, r1
 8010930:	4611      	mov	r1, r2
 8010932:	461a      	mov	r2, r3
 8010934:	4623      	mov	r3, r4
 8010936:	80fb      	strh	r3, [r7, #6]
 8010938:	4603      	mov	r3, r0
 801093a:	80bb      	strh	r3, [r7, #4]
 801093c:	460b      	mov	r3, r1
 801093e:	807b      	strh	r3, [r7, #2]
 8010940:	4613      	mov	r3, r2
 8010942:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8010944:	2300      	movs	r3, #0
 8010946:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8010948:	7bfa      	ldrb	r2, [r7, #15]
 801094a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801094e:	429a      	cmp	r2, r3
 8010950:	d939      	bls.n	80109c6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8010952:	88ba      	ldrh	r2, [r7, #4]
 8010954:	7bfb      	ldrb	r3, [r7, #15]
 8010956:	441a      	add	r2, r3
 8010958:	88b9      	ldrh	r1, [r7, #4]
 801095a:	883b      	ldrh	r3, [r7, #0]
 801095c:	4419      	add	r1, r3
 801095e:	7bfb      	ldrb	r3, [r7, #15]
 8010960:	1acb      	subs	r3, r1, r3
 8010962:	429a      	cmp	r2, r3
 8010964:	f000 8089 	beq.w	8010a7a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 8010968:	88fa      	ldrh	r2, [r7, #6]
 801096a:	7bfb      	ldrb	r3, [r7, #15]
 801096c:	441a      	add	r2, r3
 801096e:	88f9      	ldrh	r1, [r7, #6]
 8010970:	887b      	ldrh	r3, [r7, #2]
 8010972:	4419      	add	r1, r3
 8010974:	7bfb      	ldrb	r3, [r7, #15]
 8010976:	1acb      	subs	r3, r1, r3
 8010978:	429a      	cmp	r2, r3
 801097a:	d07e      	beq.n	8010a7a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 801097c:	7bfb      	ldrb	r3, [r7, #15]
 801097e:	b29a      	uxth	r2, r3
 8010980:	88fb      	ldrh	r3, [r7, #6]
 8010982:	4413      	add	r3, r2
 8010984:	b298      	uxth	r0, r3
 8010986:	7bfb      	ldrb	r3, [r7, #15]
 8010988:	b29a      	uxth	r2, r3
 801098a:	88bb      	ldrh	r3, [r7, #4]
 801098c:	4413      	add	r3, r2
 801098e:	b299      	uxth	r1, r3
 8010990:	7bfb      	ldrb	r3, [r7, #15]
 8010992:	b29b      	uxth	r3, r3
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	b29b      	uxth	r3, r3
 8010998:	887a      	ldrh	r2, [r7, #2]
 801099a:	1ad3      	subs	r3, r2, r3
 801099c:	b29b      	uxth	r3, r3
 801099e:	3301      	adds	r3, #1
 80109a0:	b29c      	uxth	r4, r3
 80109a2:	7bfb      	ldrb	r3, [r7, #15]
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	005b      	lsls	r3, r3, #1
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	883a      	ldrh	r2, [r7, #0]
 80109ac:	1ad3      	subs	r3, r2, r3
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	3301      	adds	r3, #1
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	2304      	movs	r3, #4
 80109b6:	9301      	str	r3, [sp, #4]
 80109b8:	8c3b      	ldrh	r3, [r7, #32]
 80109ba:	9300      	str	r3, [sp, #0]
 80109bc:	4613      	mov	r3, r2
 80109be:	4622      	mov	r2, r4
 80109c0:	f000 fd18 	bl	80113f4 <ILI9341_Draw_Rectangle>
				goto finish;
 80109c4:	e05a      	b.n	8010a7c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	88fb      	ldrh	r3, [r7, #6]
 80109cc:	4413      	add	r3, r2
 80109ce:	b298      	uxth	r0, r3
 80109d0:	7bfb      	ldrb	r3, [r7, #15]
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	88bb      	ldrh	r3, [r7, #4]
 80109d6:	4413      	add	r3, r2
 80109d8:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 80109da:	7bfb      	ldrb	r3, [r7, #15]
 80109dc:	b29b      	uxth	r3, r3
 80109de:	887a      	ldrh	r2, [r7, #2]
 80109e0:	1ad3      	subs	r3, r2, r3
 80109e2:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80109e4:	3301      	adds	r3, #1
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80109ea:	f000 fa6b 	bl	8010ec4 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 80109ee:	7bfb      	ldrb	r3, [r7, #15]
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	88fb      	ldrh	r3, [r7, #6]
 80109f4:	4413      	add	r3, r2
 80109f6:	b298      	uxth	r0, r3
										(y + h) - b,
 80109f8:	88ba      	ldrh	r2, [r7, #4]
 80109fa:	883b      	ldrh	r3, [r7, #0]
 80109fc:	4413      	add	r3, r2
 80109fe:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010a00:	7bfb      	ldrb	r3, [r7, #15]
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	1ad3      	subs	r3, r2, r3
 8010a06:	b299      	uxth	r1, r3
										(w - b)+1,
 8010a08:	7bfb      	ldrb	r3, [r7, #15]
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	887a      	ldrh	r2, [r7, #2]
 8010a0e:	1ad3      	subs	r3, r2, r3
 8010a10:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010a12:	3301      	adds	r3, #1
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a18:	f000 fa54 	bl	8010ec4 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 8010a1c:	7bfb      	ldrb	r3, [r7, #15]
 8010a1e:	b29a      	uxth	r2, r3
 8010a20:	88fb      	ldrh	r3, [r7, #6]
 8010a22:	4413      	add	r3, r2
 8010a24:	b298      	uxth	r0, r3
 8010a26:	7bfb      	ldrb	r3, [r7, #15]
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	88bb      	ldrh	r3, [r7, #4]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	b299      	uxth	r1, r3
 8010a30:	7bfb      	ldrb	r3, [r7, #15]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	005b      	lsls	r3, r3, #1
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	883a      	ldrh	r2, [r7, #0]
 8010a3a:	1ad3      	subs	r3, r2, r3
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a40:	f000 faa4 	bl	8010f8c <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 8010a44:	88fa      	ldrh	r2, [r7, #6]
 8010a46:	887b      	ldrh	r3, [r7, #2]
 8010a48:	4413      	add	r3, r2
 8010a4a:	b29a      	uxth	r2, r3
 8010a4c:	7bfb      	ldrb	r3, [r7, #15]
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	1ad3      	subs	r3, r2, r3
 8010a52:	b298      	uxth	r0, r3
 8010a54:	7bfb      	ldrb	r3, [r7, #15]
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	88bb      	ldrh	r3, [r7, #4]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	b299      	uxth	r1, r3
 8010a5e:	7bfb      	ldrb	r3, [r7, #15]
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	005b      	lsls	r3, r3, #1
 8010a64:	b29b      	uxth	r3, r3
 8010a66:	883a      	ldrh	r2, [r7, #0]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a6e:	f000 fa8d 	bl	8010f8c <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8010a72:	7bfb      	ldrb	r3, [r7, #15]
 8010a74:	3301      	adds	r3, #1
 8010a76:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8010a78:	e766      	b.n	8010948 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8010a7a:	bf00      	nop
	// done
	return;
 8010a7c:	bf00      	nop
}
 8010a7e:	3714      	adds	r7, #20
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd90      	pop	{r4, r7, pc}

08010a84 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8010a84:	b590      	push	{r4, r7, lr}
 8010a86:	b089      	sub	sp, #36	; 0x24
 8010a88:	af02      	add	r7, sp, #8
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	4608      	mov	r0, r1
 8010a8e:	4611      	mov	r1, r2
 8010a90:	461a      	mov	r2, r3
 8010a92:	4623      	mov	r3, r4
 8010a94:	71fb      	strb	r3, [r7, #7]
 8010a96:	4603      	mov	r3, r0
 8010a98:	80bb      	strh	r3, [r7, #4]
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	807b      	strh	r3, [r7, #2]
 8010a9e:	4613      	mov	r3, r2
 8010aa0:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
 8010aa4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8010aa6:	7dfb      	ldrb	r3, [r7, #23]
 8010aa8:	2b1f      	cmp	r3, #31
 8010aaa:	d802      	bhi.n	8010ab2 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	71fb      	strb	r3, [r7, #7]
 8010ab0:	e002      	b.n	8010ab8 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8010ab2:	7dfb      	ldrb	r3, [r7, #23]
 8010ab4:	3b20      	subs	r3, #32
 8010ab6:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010ab8:	2300      	movs	r3, #0
 8010aba:	753b      	strb	r3, [r7, #20]
 8010abc:	e012      	b.n	8010ae4 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8010abe:	7dfa      	ldrb	r2, [r7, #23]
 8010ac0:	7d38      	ldrb	r0, [r7, #20]
 8010ac2:	7d39      	ldrb	r1, [r7, #20]
 8010ac4:	4c48      	ldr	r4, [pc, #288]	; (8010be8 <ILI9341_Draw_Char+0x164>)
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	005b      	lsls	r3, r3, #1
 8010aca:	4413      	add	r3, r2
 8010acc:	005b      	lsls	r3, r3, #1
 8010ace:	4423      	add	r3, r4
 8010ad0:	4403      	add	r3, r0
 8010ad2:	781a      	ldrb	r2, [r3, #0]
 8010ad4:	f107 0318 	add.w	r3, r7, #24
 8010ad8:	440b      	add	r3, r1
 8010ada:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010ade:	7d3b      	ldrb	r3, [r7, #20]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	753b      	strb	r3, [r7, #20]
 8010ae4:	7d3b      	ldrb	r3, [r7, #20]
 8010ae6:	2b05      	cmp	r3, #5
 8010ae8:	d9e9      	bls.n	8010abe <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8010aea:	2300      	movs	r3, #0
 8010aec:	757b      	strb	r3, [r7, #21]
 8010aee:	e074      	b.n	8010bda <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8010af0:	2300      	movs	r3, #0
 8010af2:	75bb      	strb	r3, [r7, #22]
 8010af4:	e06b      	b.n	8010bce <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 8010af6:	7d7b      	ldrb	r3, [r7, #21]
 8010af8:	f107 0218 	add.w	r2, r7, #24
 8010afc:	4413      	add	r3, r2
 8010afe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8010b02:	461a      	mov	r2, r3
 8010b04:	7dbb      	ldrb	r3, [r7, #22]
 8010b06:	fa42 f303 	asr.w	r3, r2, r3
 8010b0a:	f003 0301 	and.w	r3, r3, #1
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d02d      	beq.n	8010b6e <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8010b12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d10e      	bne.n	8010b36 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8010b18:	7d7b      	ldrb	r3, [r7, #21]
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	88bb      	ldrh	r3, [r7, #4]
 8010b1e:	4413      	add	r3, r2
 8010b20:	b298      	uxth	r0, r3
 8010b22:	7dbb      	ldrb	r3, [r7, #22]
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	887b      	ldrh	r3, [r7, #2]
 8010b28:	4413      	add	r3, r2
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	883a      	ldrh	r2, [r7, #0]
 8010b2e:	4619      	mov	r1, r3
 8010b30:	f000 fb06 	bl	8011140 <ILI9341_Draw_Pixel>
 8010b34:	e048      	b.n	8010bc8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8010b36:	7d7b      	ldrb	r3, [r7, #21]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010b3c:	fb12 f303 	smulbb	r3, r2, r3
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	88bb      	ldrh	r3, [r7, #4]
 8010b44:	4413      	add	r3, r2
 8010b46:	b298      	uxth	r0, r3
 8010b48:	7dbb      	ldrb	r3, [r7, #22]
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010b4e:	fb12 f303 	smulbb	r3, r2, r3
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	887b      	ldrh	r3, [r7, #2]
 8010b56:	4413      	add	r3, r2
 8010b58:	b299      	uxth	r1, r3
 8010b5a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8010b5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010b5e:	2301      	movs	r3, #1
 8010b60:	9301      	str	r3, [sp, #4]
 8010b62:	883b      	ldrh	r3, [r7, #0]
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	4623      	mov	r3, r4
 8010b68:	f000 fc44 	bl	80113f4 <ILI9341_Draw_Rectangle>
 8010b6c:	e02c      	b.n	8010bc8 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8010b6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d10e      	bne.n	8010b92 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8010b74:	7d7b      	ldrb	r3, [r7, #21]
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	88bb      	ldrh	r3, [r7, #4]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	b298      	uxth	r0, r3
 8010b7e:	7dbb      	ldrb	r3, [r7, #22]
 8010b80:	b29a      	uxth	r2, r3
 8010b82:	887b      	ldrh	r3, [r7, #2]
 8010b84:	4413      	add	r3, r2
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	f000 fad8 	bl	8011140 <ILI9341_Draw_Pixel>
 8010b90:	e01a      	b.n	8010bc8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8010b92:	7d7b      	ldrb	r3, [r7, #21]
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010b98:	fb12 f303 	smulbb	r3, r2, r3
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	88bb      	ldrh	r3, [r7, #4]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	b298      	uxth	r0, r3
 8010ba4:	7dbb      	ldrb	r3, [r7, #22]
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010baa:	fb12 f303 	smulbb	r3, r2, r3
 8010bae:	b29a      	uxth	r2, r3
 8010bb0:	887b      	ldrh	r3, [r7, #2]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	b299      	uxth	r1, r3
 8010bb6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8010bb8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010bba:	2301      	movs	r3, #1
 8010bbc:	9301      	str	r3, [sp, #4]
 8010bbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010bc0:	9300      	str	r3, [sp, #0]
 8010bc2:	4623      	mov	r3, r4
 8010bc4:	f000 fc16 	bl	80113f4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8010bc8:	7dbb      	ldrb	r3, [r7, #22]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	75bb      	strb	r3, [r7, #22]
 8010bce:	7dbb      	ldrb	r3, [r7, #22]
 8010bd0:	2b07      	cmp	r3, #7
 8010bd2:	d990      	bls.n	8010af6 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8010bd4:	7d7b      	ldrb	r3, [r7, #21]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	757b      	strb	r3, [r7, #21]
 8010bda:	7d7b      	ldrb	r3, [r7, #21]
 8010bdc:	2b05      	cmp	r3, #5
 8010bde:	d987      	bls.n	8010af0 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8010be0:	bf00      	nop
 8010be2:	371c      	adds	r7, #28
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd90      	pop	{r4, r7, pc}
 8010be8:	08016a00 	.word	0x08016a00

08010bec <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8010bec:	b590      	push	{r4, r7, lr}
 8010bee:	b087      	sub	sp, #28
 8010bf0:	af02      	add	r7, sp, #8
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	4608      	mov	r0, r1
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	817b      	strh	r3, [r7, #10]
 8010bfe:	460b      	mov	r3, r1
 8010c00:	813b      	strh	r3, [r7, #8]
 8010c02:	4613      	mov	r3, r2
 8010c04:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 8010c06:	897b      	ldrh	r3, [r7, #10]
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	b298      	uxth	r0, r3
 8010c0c:	8c3b      	ldrh	r3, [r7, #32]
 8010c0e:	00db      	lsls	r3, r3, #3
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c14:	8939      	ldrh	r1, [r7, #8]
 8010c16:	f000 f9b9 	bl	8010f8c <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 8010c1a:	897b      	ldrh	r3, [r7, #10]
 8010c1c:	3b02      	subs	r3, #2
 8010c1e:	b298      	uxth	r0, r3
 8010c20:	8c3b      	ldrh	r3, [r7, #32]
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c28:	8939      	ldrh	r1, [r7, #8]
 8010c2a:	f000 f9af 	bl	8010f8c <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8010c2e:	e016      	b.n	8010c5e <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	1c5a      	adds	r2, r3, #1
 8010c34:	60fa      	str	r2, [r7, #12]
 8010c36:	7818      	ldrb	r0, [r3, #0]
 8010c38:	88fc      	ldrh	r4, [r7, #6]
 8010c3a:	893a      	ldrh	r2, [r7, #8]
 8010c3c:	8979      	ldrh	r1, [r7, #10]
 8010c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c40:	9301      	str	r3, [sp, #4]
 8010c42:	8c3b      	ldrh	r3, [r7, #32]
 8010c44:	9300      	str	r3, [sp, #0]
 8010c46:	4623      	mov	r3, r4
 8010c48:	f7ff ff1c 	bl	8010a84 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8010c4c:	8c3b      	ldrh	r3, [r7, #32]
 8010c4e:	461a      	mov	r2, r3
 8010c50:	0052      	lsls	r2, r2, #1
 8010c52:	4413      	add	r3, r2
 8010c54:	005b      	lsls	r3, r3, #1
 8010c56:	b29a      	uxth	r2, r3
 8010c58:	897b      	ldrh	r3, [r7, #10]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1e4      	bne.n	8010c30 <ILI9341_Draw_Text+0x44>
    }


}
 8010c66:	bf00      	nop
 8010c68:	3714      	adds	r7, #20
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd90      	pop	{r4, r7, pc}

08010c6e <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	af00      	add	r7, sp, #0

	_LCD_Enable();
 8010c72:	f000 fca3 	bl	80115bc <_LCD_Enable>
	ILI9341_SPI_Init();
 8010c76:	f000 f907 	bl	8010e88 <ILI9341_SPI_Init>
	_LCD_Reset();
 8010c7a:	f000 fcaf 	bl	80115dc <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8010c7e:	2001      	movs	r0, #1
 8010c80:	f000 fd7a 	bl	8011778 <_LCD_SendCommand>
	HAL_Delay(2000);
 8010c84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010c88:	f7f8 fb02 	bl	8009290 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8010c8c:	20cb      	movs	r0, #203	; 0xcb
 8010c8e:	f000 fd73 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8010c92:	2039      	movs	r0, #57	; 0x39
 8010c94:	f000 fda2 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x2C);
 8010c98:	202c      	movs	r0, #44	; 0x2c
 8010c9a:	f000 fd9f 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x00);
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	f000 fd9c 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x34);
 8010ca4:	2034      	movs	r0, #52	; 0x34
 8010ca6:	f000 fd99 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x02);
 8010caa:	2002      	movs	r0, #2
 8010cac:	f000 fd96 	bl	80117dc <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8010cb0:	20cf      	movs	r0, #207	; 0xcf
 8010cb2:	f000 fd61 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010cb6:	2000      	movs	r0, #0
 8010cb8:	f000 fd90 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010cbc:	20c1      	movs	r0, #193	; 0xc1
 8010cbe:	f000 fd8d 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x30);
 8010cc2:	2030      	movs	r0, #48	; 0x30
 8010cc4:	f000 fd8a 	bl	80117dc <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8010cc8:	20e8      	movs	r0, #232	; 0xe8
 8010cca:	f000 fd55 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8010cce:	2085      	movs	r0, #133	; 0x85
 8010cd0:	f000 fd84 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x00);
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	f000 fd81 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x78);
 8010cda:	2078      	movs	r0, #120	; 0x78
 8010cdc:	f000 fd7e 	bl	80117dc <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8010ce0:	20ea      	movs	r0, #234	; 0xea
 8010ce2:	f000 fd49 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010ce6:	2000      	movs	r0, #0
 8010ce8:	f000 fd78 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x00);
 8010cec:	2000      	movs	r0, #0
 8010cee:	f000 fd75 	bl	80117dc <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8010cf2:	20ed      	movs	r0, #237	; 0xed
 8010cf4:	f000 fd40 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8010cf8:	2064      	movs	r0, #100	; 0x64
 8010cfa:	f000 fd6f 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x03);
 8010cfe:	2003      	movs	r0, #3
 8010d00:	f000 fd6c 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x12);
 8010d04:	2012      	movs	r0, #18
 8010d06:	f000 fd69 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x81);
 8010d0a:	2081      	movs	r0, #129	; 0x81
 8010d0c:	f000 fd66 	bl	80117dc <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8010d10:	20f7      	movs	r0, #247	; 0xf7
 8010d12:	f000 fd31 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8010d16:	2020      	movs	r0, #32
 8010d18:	f000 fd60 	bl	80117dc <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8010d1c:	20c0      	movs	r0, #192	; 0xc0
 8010d1e:	f000 fd2b 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8010d22:	2023      	movs	r0, #35	; 0x23
 8010d24:	f000 fd5a 	bl	80117dc <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8010d28:	20c1      	movs	r0, #193	; 0xc1
 8010d2a:	f000 fd25 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8010d2e:	2010      	movs	r0, #16
 8010d30:	f000 fd54 	bl	80117dc <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 8010d34:	20c5      	movs	r0, #197	; 0xc5
 8010d36:	f000 fd1f 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8010d3a:	203e      	movs	r0, #62	; 0x3e
 8010d3c:	f000 fd4e 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x28);
 8010d40:	2028      	movs	r0, #40	; 0x28
 8010d42:	f000 fd4b 	bl	80117dc <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8010d46:	20c7      	movs	r0, #199	; 0xc7
 8010d48:	f000 fd16 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8010d4c:	2086      	movs	r0, #134	; 0x86
 8010d4e:	f000 fd45 	bl	80117dc <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8010d52:	2036      	movs	r0, #54	; 0x36
 8010d54:	f000 fd10 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8010d58:	2048      	movs	r0, #72	; 0x48
 8010d5a:	f000 fd3f 	bl	80117dc <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8010d5e:	203a      	movs	r0, #58	; 0x3a
 8010d60:	f000 fd0a 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 8010d64:	2055      	movs	r0, #85	; 0x55
 8010d66:	f000 fd39 	bl	80117dc <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8010d6a:	20b1      	movs	r0, #177	; 0xb1
 8010d6c:	f000 fd04 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010d70:	2000      	movs	r0, #0
 8010d72:	f000 fd33 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x18);
 8010d76:	2018      	movs	r0, #24
 8010d78:	f000 fd30 	bl	80117dc <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8010d7c:	20b6      	movs	r0, #182	; 0xb6
 8010d7e:	f000 fcfb 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8010d82:	2008      	movs	r0, #8
 8010d84:	f000 fd2a 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x82);
 8010d88:	2082      	movs	r0, #130	; 0x82
 8010d8a:	f000 fd27 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x27);
 8010d8e:	2027      	movs	r0, #39	; 0x27
 8010d90:	f000 fd24 	bl	80117dc <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8010d94:	20f2      	movs	r0, #242	; 0xf2
 8010d96:	f000 fcef 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	f000 fd1e 	bl	80117dc <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8010da0:	2026      	movs	r0, #38	; 0x26
 8010da2:	f000 fce9 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8010da6:	2001      	movs	r0, #1
 8010da8:	f000 fd18 	bl	80117dc <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8010dac:	20e0      	movs	r0, #224	; 0xe0
 8010dae:	f000 fce3 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8010db2:	200f      	movs	r0, #15
 8010db4:	f000 fd12 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x31);
 8010db8:	2031      	movs	r0, #49	; 0x31
 8010dba:	f000 fd0f 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x2B);
 8010dbe:	202b      	movs	r0, #43	; 0x2b
 8010dc0:	f000 fd0c 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x0C);
 8010dc4:	200c      	movs	r0, #12
 8010dc6:	f000 fd09 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010dca:	200e      	movs	r0, #14
 8010dcc:	f000 fd06 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x08);
 8010dd0:	2008      	movs	r0, #8
 8010dd2:	f000 fd03 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x4E);
 8010dd6:	204e      	movs	r0, #78	; 0x4e
 8010dd8:	f000 fd00 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0xF1);
 8010ddc:	20f1      	movs	r0, #241	; 0xf1
 8010dde:	f000 fcfd 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x37);
 8010de2:	2037      	movs	r0, #55	; 0x37
 8010de4:	f000 fcfa 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x07);
 8010de8:	2007      	movs	r0, #7
 8010dea:	f000 fcf7 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x10);
 8010dee:	2010      	movs	r0, #16
 8010df0:	f000 fcf4 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x03);
 8010df4:	2003      	movs	r0, #3
 8010df6:	f000 fcf1 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010dfa:	200e      	movs	r0, #14
 8010dfc:	f000 fcee 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x09);
 8010e00:	2009      	movs	r0, #9
 8010e02:	f000 fceb 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x00);
 8010e06:	2000      	movs	r0, #0
 8010e08:	f000 fce8 	bl	80117dc <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8010e0c:	20e1      	movs	r0, #225	; 0xe1
 8010e0e:	f000 fcb3 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010e12:	2000      	movs	r0, #0
 8010e14:	f000 fce2 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010e18:	200e      	movs	r0, #14
 8010e1a:	f000 fcdf 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x14);
 8010e1e:	2014      	movs	r0, #20
 8010e20:	f000 fcdc 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x03);
 8010e24:	2003      	movs	r0, #3
 8010e26:	f000 fcd9 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x11);
 8010e2a:	2011      	movs	r0, #17
 8010e2c:	f000 fcd6 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x07);
 8010e30:	2007      	movs	r0, #7
 8010e32:	f000 fcd3 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x31);
 8010e36:	2031      	movs	r0, #49	; 0x31
 8010e38:	f000 fcd0 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010e3c:	20c1      	movs	r0, #193	; 0xc1
 8010e3e:	f000 fccd 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x48);
 8010e42:	2048      	movs	r0, #72	; 0x48
 8010e44:	f000 fcca 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x08);
 8010e48:	2008      	movs	r0, #8
 8010e4a:	f000 fcc7 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x0F);
 8010e4e:	200f      	movs	r0, #15
 8010e50:	f000 fcc4 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x0C);
 8010e54:	200c      	movs	r0, #12
 8010e56:	f000 fcc1 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x31);
 8010e5a:	2031      	movs	r0, #49	; 0x31
 8010e5c:	f000 fcbe 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x36);
 8010e60:	2036      	movs	r0, #54	; 0x36
 8010e62:	f000 fcbb 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(0x0F);
 8010e66:	200f      	movs	r0, #15
 8010e68:	f000 fcb8 	bl	80117dc <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8010e6c:	2011      	movs	r0, #17
 8010e6e:	f000 fc83 	bl	8011778 <_LCD_SendCommand>
	HAL_Delay(240);
 8010e72:	20f0      	movs	r0, #240	; 0xf0
 8010e74:	f7f8 fa0c 	bl	8009290 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8010e78:	2029      	movs	r0, #41	; 0x29
 8010e7a:	f000 fc7d 	bl	8011778 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8010e7e:	2000      	movs	r0, #0
 8010e80:	f000 fb4e 	bl	8011520 <ILI9341_Set_Rotation>
}
 8010e84:	bf00      	nop
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010e8c:	4b0b      	ldr	r3, [pc, #44]	; (8010ebc <ILI9341_SPI_Init+0x34>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e94:	2b40      	cmp	r3, #64	; 0x40
 8010e96:	d005      	beq.n	8010ea4 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8010e98:	4b08      	ldr	r3, [pc, #32]	; (8010ebc <ILI9341_SPI_Init+0x34>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a07      	ldr	r2, [pc, #28]	; (8010ebc <ILI9341_SPI_Init+0x34>)
 8010e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ea2:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ea4:	4b06      	ldr	r3, [pc, #24]	; (8010ec0 <ILI9341_SPI_Init+0x38>)
 8010ea6:	695b      	ldr	r3, [r3, #20]
 8010ea8:	4a05      	ldr	r2, [pc, #20]	; (8010ec0 <ILI9341_SPI_Init+0x38>)
 8010eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010eae:	6153      	str	r3, [r2, #20]
}
 8010eb0:	bf00      	nop
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr
 8010eba:	bf00      	nop
 8010ebc:	40003c00 	.word	0x40003c00
 8010ec0:	48000400 	.word	0x48000400

08010ec4 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8010ec4:	b590      	push	{r4, r7, lr}
 8010ec6:	b087      	sub	sp, #28
 8010ec8:	af02      	add	r7, sp, #8
 8010eca:	4604      	mov	r4, r0
 8010ecc:	4608      	mov	r0, r1
 8010ece:	4611      	mov	r1, r2
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	4623      	mov	r3, r4
 8010ed4:	80fb      	strh	r3, [r7, #6]
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	80bb      	strh	r3, [r7, #4]
 8010eda:	460b      	mov	r3, r1
 8010edc:	807b      	strh	r3, [r7, #2]
 8010ede:	4613      	mov	r3, r2
 8010ee0:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010ee2:	4b28      	ldr	r3, [pc, #160]	; (8010f84 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	88fa      	ldrh	r2, [r7, #6]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d246      	bcs.n	8010f7c <ILI9341_Draw_Horizontal_Line+0xb8>
 8010eee:	4b26      	ldr	r3, [pc, #152]	; (8010f88 <ILI9341_Draw_Horizontal_Line+0xc4>)
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	88ba      	ldrh	r2, [r7, #4]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d240      	bcs.n	8010f7c <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8010efa:	88fa      	ldrh	r2, [r7, #6]
 8010efc:	887b      	ldrh	r3, [r7, #2]
 8010efe:	4413      	add	r3, r2
 8010f00:	3b01      	subs	r3, #1
 8010f02:	4a20      	ldr	r2, [pc, #128]	; (8010f84 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010f04:	8812      	ldrh	r2, [r2, #0]
 8010f06:	b292      	uxth	r2, r2
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	db05      	blt.n	8010f18 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8010f0c:	4b1d      	ldr	r3, [pc, #116]	; (8010f84 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	88fb      	ldrh	r3, [r7, #6]
 8010f14:	1ad3      	subs	r3, r2, r3
 8010f16:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 8010f18:	88fa      	ldrh	r2, [r7, #6]
 8010f1a:	887b      	ldrh	r3, [r7, #2]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010f20:	3b01      	subs	r3, #1
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	88bb      	ldrh	r3, [r7, #4]
 8010f26:	88b9      	ldrh	r1, [r7, #4]
 8010f28:	88f8      	ldrh	r0, [r7, #6]
 8010f2a:	f000 f893 	bl	8011054 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 8010f32:	887b      	ldrh	r3, [r7, #2]
 8010f34:	f003 0301 	and.w	r3, r3, #1
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d009      	beq.n	8010f50 <ILI9341_Draw_Horizontal_Line+0x8c>
 8010f3c:	887b      	ldrh	r3, [r7, #2]
 8010f3e:	2b01      	cmp	r3, #1
 8010f40:	d906      	bls.n	8010f50 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 8010f42:	2301      	movs	r3, #1
 8010f44:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 8010f46:	887b      	ldrh	r3, [r7, #2]
 8010f48:	085b      	lsrs	r3, r3, #1
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 8010f50:	887c      	ldrh	r4, [r7, #2]
 8010f52:	883a      	ldrh	r2, [r7, #0]
 8010f54:	88b9      	ldrh	r1, [r7, #4]
 8010f56:	88f8      	ldrh	r0, [r7, #6]
 8010f58:	2303      	movs	r3, #3
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	4623      	mov	r3, r4
 8010f5e:	f000 fb5b 	bl	8011618 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 8010f62:	7bfb      	ldrb	r3, [r7, #15]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00a      	beq.n	8010f7e <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 8010f68:	88fa      	ldrh	r2, [r7, #6]
 8010f6a:	887b      	ldrh	r3, [r7, #2]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	883a      	ldrh	r2, [r7, #0]
 8010f72:	88b9      	ldrh	r1, [r7, #4]
 8010f74:	4618      	mov	r0, r3
 8010f76:	f000 f8e3 	bl	8011140 <ILI9341_Draw_Pixel>
 8010f7a:	e000      	b.n	8010f7e <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010f7c:	bf00      	nop
							(ypos),
							colour);
	}


}
 8010f7e:	3714      	adds	r7, #20
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd90      	pop	{r4, r7, pc}
 8010f84:	20000c42 	.word	0x20000c42
 8010f88:	20000c40 	.word	0x20000c40

08010f8c <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8010f8c:	b590      	push	{r4, r7, lr}
 8010f8e:	b087      	sub	sp, #28
 8010f90:	af02      	add	r7, sp, #8
 8010f92:	4604      	mov	r4, r0
 8010f94:	4608      	mov	r0, r1
 8010f96:	4611      	mov	r1, r2
 8010f98:	461a      	mov	r2, r3
 8010f9a:	4623      	mov	r3, r4
 8010f9c:	80fb      	strh	r3, [r7, #6]
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	80bb      	strh	r3, [r7, #4]
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	807b      	strh	r3, [r7, #2]
 8010fa6:	4613      	mov	r3, r2
 8010fa8:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010faa:	4b28      	ldr	r3, [pc, #160]	; (801104c <ILI9341_Draw_Vertical_Line+0xc0>)
 8010fac:	881b      	ldrh	r3, [r3, #0]
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	88fa      	ldrh	r2, [r7, #6]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d246      	bcs.n	8011044 <ILI9341_Draw_Vertical_Line+0xb8>
 8010fb6:	4b26      	ldr	r3, [pc, #152]	; (8011050 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010fb8:	881b      	ldrh	r3, [r3, #0]
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	88ba      	ldrh	r2, [r7, #4]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d240      	bcs.n	8011044 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8010fc2:	88ba      	ldrh	r2, [r7, #4]
 8010fc4:	887b      	ldrh	r3, [r7, #2]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	4a21      	ldr	r2, [pc, #132]	; (8011050 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010fcc:	8812      	ldrh	r2, [r2, #0]
 8010fce:	b292      	uxth	r2, r2
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	db05      	blt.n	8010fe0 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 8010fd4:	4b1e      	ldr	r3, [pc, #120]	; (8011050 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010fd6:	881b      	ldrh	r3, [r3, #0]
 8010fd8:	b29a      	uxth	r2, r3
 8010fda:	88bb      	ldrh	r3, [r7, #4]
 8010fdc:	1ad3      	subs	r3, r2, r3
 8010fde:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8010fe0:	88ba      	ldrh	r2, [r7, #4]
 8010fe2:	887b      	ldrh	r3, [r7, #2]
 8010fe4:	4413      	add	r3, r2
 8010fe6:	b29b      	uxth	r3, r3
 8010fe8:	3b01      	subs	r3, #1
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	88fa      	ldrh	r2, [r7, #6]
 8010fee:	88b9      	ldrh	r1, [r7, #4]
 8010ff0:	88f8      	ldrh	r0, [r7, #6]
 8010ff2:	f000 f82f 	bl	8011054 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8010ffa:	887b      	ldrh	r3, [r7, #2]
 8010ffc:	f003 0301 	and.w	r3, r3, #1
 8011000:	2b00      	cmp	r3, #0
 8011002:	d009      	beq.n	8011018 <ILI9341_Draw_Vertical_Line+0x8c>
 8011004:	887b      	ldrh	r3, [r7, #2]
 8011006:	2b01      	cmp	r3, #1
 8011008:	d906      	bls.n	8011018 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 801100a:	2301      	movs	r3, #1
 801100c:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 801100e:	887b      	ldrh	r3, [r7, #2]
 8011010:	085b      	lsrs	r3, r3, #1
 8011012:	b29b      	uxth	r3, r3
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 8011018:	7bfb      	ldrb	r3, [r7, #15]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d008      	beq.n	8011030 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 801101e:	88ba      	ldrh	r2, [r7, #4]
 8011020:	887b      	ldrh	r3, [r7, #2]
 8011022:	4413      	add	r3, r2
 8011024:	b299      	uxth	r1, r3
 8011026:	883a      	ldrh	r2, [r7, #0]
 8011028:	88fb      	ldrh	r3, [r7, #6]
 801102a:	4618      	mov	r0, r3
 801102c:	f000 f888 	bl	8011140 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8011030:	887c      	ldrh	r4, [r7, #2]
 8011032:	883a      	ldrh	r2, [r7, #0]
 8011034:	88b9      	ldrh	r1, [r7, #4]
 8011036:	88f8      	ldrh	r0, [r7, #6]
 8011038:	2303      	movs	r3, #3
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	4623      	mov	r3, r4
 801103e:	f000 faeb 	bl	8011618 <_LCD_Write_Frame>
 8011042:	e000      	b.n	8011046 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8011044:	bf00      	nop
}
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	bd90      	pop	{r4, r7, pc}
 801104c:	20000c42 	.word	0x20000c42
 8011050:	20000c40 	.word	0x20000c40

08011054 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8011054:	b590      	push	{r4, r7, lr}
 8011056:	b083      	sub	sp, #12
 8011058:	af00      	add	r7, sp, #0
 801105a:	4604      	mov	r4, r0
 801105c:	4608      	mov	r0, r1
 801105e:	4611      	mov	r1, r2
 8011060:	461a      	mov	r2, r3
 8011062:	4623      	mov	r3, r4
 8011064:	80fb      	strh	r3, [r7, #6]
 8011066:	4603      	mov	r3, r0
 8011068:	80bb      	strh	r3, [r7, #4]
 801106a:	460b      	mov	r3, r1
 801106c:	807b      	strh	r3, [r7, #2]
 801106e:	4613      	mov	r3, r2
 8011070:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8011072:	202a      	movs	r0, #42	; 0x2a
 8011074:	f000 fb80 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8011078:	88fb      	ldrh	r3, [r7, #6]
 801107a:	0a1b      	lsrs	r3, r3, #8
 801107c:	b29b      	uxth	r3, r3
 801107e:	b2db      	uxtb	r3, r3
 8011080:	4618      	mov	r0, r3
 8011082:	f000 fbab 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(sc);
 8011086:	88fb      	ldrh	r3, [r7, #6]
 8011088:	b2db      	uxtb	r3, r3
 801108a:	4618      	mov	r0, r3
 801108c:	f000 fba6 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8011090:	887b      	ldrh	r3, [r7, #2]
 8011092:	0a1b      	lsrs	r3, r3, #8
 8011094:	b29b      	uxth	r3, r3
 8011096:	b2db      	uxtb	r3, r3
 8011098:	4618      	mov	r0, r3
 801109a:	f000 fb9f 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(ec);
 801109e:	887b      	ldrh	r3, [r7, #2]
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	4618      	mov	r0, r3
 80110a4:	f000 fb9a 	bl	80117dc <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 80110a8:	202b      	movs	r0, #43	; 0x2b
 80110aa:	f000 fb65 	bl	8011778 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 80110ae:	88bb      	ldrh	r3, [r7, #4]
 80110b0:	0a1b      	lsrs	r3, r3, #8
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	4618      	mov	r0, r3
 80110b8:	f000 fb90 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(sp);
 80110bc:	88bb      	ldrh	r3, [r7, #4]
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	4618      	mov	r0, r3
 80110c2:	f000 fb8b 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 80110c6:	883b      	ldrh	r3, [r7, #0]
 80110c8:	0a1b      	lsrs	r3, r3, #8
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	4618      	mov	r0, r3
 80110d0:	f000 fb84 	bl	80117dc <_LCD_SendData>
	_LCD_SendData(ep);
 80110d4:	883b      	ldrh	r3, [r7, #0]
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	4618      	mov	r0, r3
 80110da:	f000 fb7f 	bl	80117dc <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 80110de:	202c      	movs	r0, #44	; 0x2c
 80110e0:	f000 fb4a 	bl	8011778 <_LCD_SendCommand>
}
 80110e4:	bf00      	nop
 80110e6:	370c      	adds	r7, #12
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd90      	pop	{r4, r7, pc}

080110ec <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af02      	add	r7, sp, #8
 80110f2:	4603      	mov	r3, r0
 80110f4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 80110f6:	4b10      	ldr	r3, [pc, #64]	; (8011138 <ILI9341_Fill_Screen+0x4c>)
 80110f8:	881b      	ldrh	r3, [r3, #0]
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	4b0f      	ldr	r3, [pc, #60]	; (801113c <ILI9341_Fill_Screen+0x50>)
 80110fe:	881b      	ldrh	r3, [r3, #0]
 8011100:	b29b      	uxth	r3, r3
 8011102:	2100      	movs	r1, #0
 8011104:	2000      	movs	r0, #0
 8011106:	f7ff ffa5 	bl	8011054 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 801110a:	4b0b      	ldr	r3, [pc, #44]	; (8011138 <ILI9341_Fill_Screen+0x4c>)
 801110c:	881b      	ldrh	r3, [r3, #0]
 801110e:	b29b      	uxth	r3, r3
 8011110:	461a      	mov	r2, r3
 8011112:	4b0a      	ldr	r3, [pc, #40]	; (801113c <ILI9341_Fill_Screen+0x50>)
 8011114:	881b      	ldrh	r3, [r3, #0]
 8011116:	b29b      	uxth	r3, r3
 8011118:	fb03 f302 	mul.w	r3, r3, r2
 801111c:	4619      	mov	r1, r3
 801111e:	88fa      	ldrh	r2, [r7, #6]
 8011120:	2304      	movs	r3, #4
 8011122:	9300      	str	r3, [sp, #0]
 8011124:	460b      	mov	r3, r1
 8011126:	2100      	movs	r1, #0
 8011128:	2000      	movs	r0, #0
 801112a:	f000 fa75 	bl	8011618 <_LCD_Write_Frame>
}
 801112e:	bf00      	nop
 8011130:	3708      	adds	r7, #8
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	20000c42 	.word	0x20000c42
 801113c:	20000c40 	.word	0x20000c40

08011140 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b08e      	sub	sp, #56	; 0x38
 8011144:	af00      	add	r7, sp, #0
 8011146:	4603      	mov	r3, r0
 8011148:	80fb      	strh	r3, [r7, #6]
 801114a:	460b      	mov	r3, r1
 801114c:	80bb      	strh	r3, [r7, #4]
 801114e:	4613      	mov	r3, r2
 8011150:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8011152:	4b98      	ldr	r3, [pc, #608]	; (80113b4 <ILI9341_Draw_Pixel+0x274>)
 8011154:	881b      	ldrh	r3, [r3, #0]
 8011156:	b29b      	uxth	r3, r3
 8011158:	88fa      	ldrh	r2, [r7, #6]
 801115a:	429a      	cmp	r2, r3
 801115c:	f080 8143 	bcs.w	80113e6 <ILI9341_Draw_Pixel+0x2a6>
 8011160:	4b95      	ldr	r3, [pc, #596]	; (80113b8 <ILI9341_Draw_Pixel+0x278>)
 8011162:	881b      	ldrh	r3, [r3, #0]
 8011164:	b29b      	uxth	r3, r3
 8011166:	88ba      	ldrh	r2, [r7, #4]
 8011168:	429a      	cmp	r2, r3
 801116a:	f080 813c 	bcs.w	80113e6 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 801116e:	4b93      	ldr	r3, [pc, #588]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011170:	695b      	ldr	r3, [r3, #20]
 8011172:	4a92      	ldr	r2, [pc, #584]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011178:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801117a:	4b90      	ldr	r3, [pc, #576]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801117c:	695b      	ldr	r3, [r3, #20]
 801117e:	4a8f      	ldr	r2, [pc, #572]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011184:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8011186:	220a      	movs	r2, #10
 8011188:	2100      	movs	r1, #0
 801118a:	202a      	movs	r0, #42	; 0x2a
 801118c:	f000 fb58 	bl	8011840 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011190:	2300      	movs	r3, #0
 8011192:	637b      	str	r3, [r7, #52]	; 0x34
 8011194:	e008      	b.n	80111a8 <ILI9341_Draw_Pixel+0x68>
 8011196:	4b89      	ldr	r3, [pc, #548]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011198:	695b      	ldr	r3, [r3, #20]
 801119a:	4a88      	ldr	r2, [pc, #544]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801119c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80111a0:	6153      	str	r3, [r2, #20]
 80111a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111a4:	3301      	adds	r3, #1
 80111a6:	637b      	str	r3, [r7, #52]	; 0x34
 80111a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	ddf3      	ble.n	8011196 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80111ae:	4b83      	ldr	r3, [pc, #524]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80111b0:	695b      	ldr	r3, [r3, #20]
 80111b2:	4a82      	ldr	r2, [pc, #520]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80111b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111b8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80111ba:	4b80      	ldr	r3, [pc, #512]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80111bc:	695b      	ldr	r3, [r3, #20]
 80111be:	4a7f      	ldr	r2, [pc, #508]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80111c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111c4:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80111c6:	4b7d      	ldr	r3, [pc, #500]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80111c8:	695b      	ldr	r3, [r3, #20]
 80111ca:	4a7c      	ldr	r2, [pc, #496]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80111cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80111d0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 80111d2:	88fb      	ldrh	r3, [r7, #6]
 80111d4:	0a1b      	lsrs	r3, r3, #8
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	753b      	strb	r3, [r7, #20]
 80111dc:	88fb      	ldrh	r3, [r7, #6]
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	757b      	strb	r3, [r7, #21]
 80111e2:	88fb      	ldrh	r3, [r7, #6]
 80111e4:	3301      	adds	r3, #1
 80111e6:	121b      	asrs	r3, r3, #8
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	75bb      	strb	r3, [r7, #22]
 80111ec:	88fb      	ldrh	r3, [r7, #6]
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	3301      	adds	r3, #1
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 80111f6:	f107 0014 	add.w	r0, r7, #20
 80111fa:	230a      	movs	r3, #10
 80111fc:	2200      	movs	r2, #0
 80111fe:	2104      	movs	r1, #4
 8011200:	f000 fb50 	bl	80118a4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011204:	2300      	movs	r3, #0
 8011206:	633b      	str	r3, [r7, #48]	; 0x30
 8011208:	e008      	b.n	801121c <ILI9341_Draw_Pixel+0xdc>
 801120a:	4b6c      	ldr	r3, [pc, #432]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801120c:	695b      	ldr	r3, [r3, #20]
 801120e:	4a6b      	ldr	r2, [pc, #428]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011214:	6153      	str	r3, [r2, #20]
 8011216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011218:	3301      	adds	r3, #1
 801121a:	633b      	str	r3, [r7, #48]	; 0x30
 801121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121e:	2b02      	cmp	r3, #2
 8011220:	ddf3      	ble.n	801120a <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8011222:	4b66      	ldr	r3, [pc, #408]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011224:	695b      	ldr	r3, [r3, #20]
 8011226:	4a65      	ldr	r2, [pc, #404]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801122c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 801122e:	4b63      	ldr	r3, [pc, #396]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011230:	695b      	ldr	r3, [r3, #20]
 8011232:	4a62      	ldr	r2, [pc, #392]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011238:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801123a:	4b60      	ldr	r3, [pc, #384]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801123c:	695b      	ldr	r3, [r3, #20]
 801123e:	4a5f      	ldr	r2, [pc, #380]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011244:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8011246:	220a      	movs	r2, #10
 8011248:	2100      	movs	r1, #0
 801124a:	202b      	movs	r0, #43	; 0x2b
 801124c:	f000 faf8 	bl	8011840 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011250:	2300      	movs	r3, #0
 8011252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011254:	e008      	b.n	8011268 <ILI9341_Draw_Pixel+0x128>
 8011256:	4b59      	ldr	r3, [pc, #356]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011258:	695b      	ldr	r3, [r3, #20]
 801125a:	4a58      	ldr	r2, [pc, #352]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801125c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011260:	6153      	str	r3, [r2, #20]
 8011262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011264:	3301      	adds	r3, #1
 8011266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801126a:	2b02      	cmp	r3, #2
 801126c:	ddf3      	ble.n	8011256 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801126e:	4b53      	ldr	r3, [pc, #332]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011270:	695b      	ldr	r3, [r3, #20]
 8011272:	4a52      	ldr	r2, [pc, #328]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011278:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801127a:	4b50      	ldr	r3, [pc, #320]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801127c:	695b      	ldr	r3, [r3, #20]
 801127e:	4a4f      	ldr	r2, [pc, #316]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011284:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011286:	4b4d      	ldr	r3, [pc, #308]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011288:	695b      	ldr	r3, [r3, #20]
 801128a:	4a4c      	ldr	r2, [pc, #304]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801128c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011290:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8011292:	88bb      	ldrh	r3, [r7, #4]
 8011294:	0a1b      	lsrs	r3, r3, #8
 8011296:	b29b      	uxth	r3, r3
 8011298:	b2db      	uxtb	r3, r3
 801129a:	743b      	strb	r3, [r7, #16]
 801129c:	88bb      	ldrh	r3, [r7, #4]
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	747b      	strb	r3, [r7, #17]
 80112a2:	88bb      	ldrh	r3, [r7, #4]
 80112a4:	3301      	adds	r3, #1
 80112a6:	121b      	asrs	r3, r3, #8
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	74bb      	strb	r3, [r7, #18]
 80112ac:	88bb      	ldrh	r3, [r7, #4]
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	3301      	adds	r3, #1
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 80112b6:	f107 0010 	add.w	r0, r7, #16
 80112ba:	230a      	movs	r3, #10
 80112bc:	2200      	movs	r2, #0
 80112be:	2104      	movs	r1, #4
 80112c0:	f000 faf0 	bl	80118a4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80112c4:	2300      	movs	r3, #0
 80112c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80112c8:	e008      	b.n	80112dc <ILI9341_Draw_Pixel+0x19c>
 80112ca:	4b3c      	ldr	r3, [pc, #240]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80112cc:	695b      	ldr	r3, [r3, #20]
 80112ce:	4a3b      	ldr	r2, [pc, #236]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80112d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80112d4:	6153      	str	r3, [r2, #20]
 80112d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d8:	3301      	adds	r3, #1
 80112da:	62bb      	str	r3, [r7, #40]	; 0x28
 80112dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112de:	2b02      	cmp	r3, #2
 80112e0:	ddf3      	ble.n	80112ca <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80112e2:	4b36      	ldr	r3, [pc, #216]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80112e4:	695b      	ldr	r3, [r3, #20]
 80112e6:	4a35      	ldr	r2, [pc, #212]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80112e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112ec:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80112ee:	4b33      	ldr	r3, [pc, #204]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80112f0:	695b      	ldr	r3, [r3, #20]
 80112f2:	4a32      	ldr	r2, [pc, #200]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80112f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112f8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80112fa:	4b30      	ldr	r3, [pc, #192]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 80112fc:	695b      	ldr	r3, [r3, #20]
 80112fe:	4a2f      	ldr	r2, [pc, #188]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011304:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8011306:	220a      	movs	r2, #10
 8011308:	2100      	movs	r1, #0
 801130a:	202c      	movs	r0, #44	; 0x2c
 801130c:	f000 fa98 	bl	8011840 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011310:	2300      	movs	r3, #0
 8011312:	627b      	str	r3, [r7, #36]	; 0x24
 8011314:	e008      	b.n	8011328 <ILI9341_Draw_Pixel+0x1e8>
 8011316:	4b29      	ldr	r3, [pc, #164]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011318:	695b      	ldr	r3, [r3, #20]
 801131a:	4a28      	ldr	r2, [pc, #160]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801131c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011320:	6153      	str	r3, [r2, #20]
 8011322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011324:	3301      	adds	r3, #1
 8011326:	627b      	str	r3, [r7, #36]	; 0x24
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	2b02      	cmp	r3, #2
 801132c:	ddf3      	ble.n	8011316 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801132e:	4b23      	ldr	r3, [pc, #140]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011330:	695b      	ldr	r3, [r3, #20]
 8011332:	4a22      	ldr	r2, [pc, #136]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011338:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801133a:	4b20      	ldr	r3, [pc, #128]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801133c:	695b      	ldr	r3, [r3, #20]
 801133e:	4a1f      	ldr	r2, [pc, #124]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011344:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011346:	4b1d      	ldr	r3, [pc, #116]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011348:	695b      	ldr	r3, [r3, #20]
 801134a:	4a1c      	ldr	r2, [pc, #112]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801134c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011350:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8011352:	887b      	ldrh	r3, [r7, #2]
 8011354:	0a1b      	lsrs	r3, r3, #8
 8011356:	b29b      	uxth	r3, r3
 8011358:	b2db      	uxtb	r3, r3
 801135a:	733b      	strb	r3, [r7, #12]
 801135c:	887b      	ldrh	r3, [r7, #2]
 801135e:	b2db      	uxtb	r3, r3
 8011360:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8011362:	f107 000c 	add.w	r0, r7, #12
 8011366:	2301      	movs	r3, #1
 8011368:	2200      	movs	r2, #0
 801136a:	2102      	movs	r1, #2
 801136c:	f000 fa9a 	bl	80118a4 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011370:	2300      	movs	r3, #0
 8011372:	623b      	str	r3, [r7, #32]
 8011374:	e008      	b.n	8011388 <ILI9341_Draw_Pixel+0x248>
 8011376:	4b11      	ldr	r3, [pc, #68]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011378:	695b      	ldr	r3, [r3, #20]
 801137a:	4a10      	ldr	r2, [pc, #64]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801137c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011380:	6153      	str	r3, [r2, #20]
 8011382:	6a3b      	ldr	r3, [r7, #32]
 8011384:	3301      	adds	r3, #1
 8011386:	623b      	str	r3, [r7, #32]
 8011388:	6a3b      	ldr	r3, [r7, #32]
 801138a:	2b02      	cmp	r3, #2
 801138c:	ddf3      	ble.n	8011376 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801138e:	2300      	movs	r3, #0
 8011390:	61fb      	str	r3, [r7, #28]
 8011392:	e008      	b.n	80113a6 <ILI9341_Draw_Pixel+0x266>
 8011394:	4b09      	ldr	r3, [pc, #36]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 8011396:	695b      	ldr	r3, [r3, #20]
 8011398:	4a08      	ldr	r2, [pc, #32]	; (80113bc <ILI9341_Draw_Pixel+0x27c>)
 801139a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801139e:	6153      	str	r3, [r2, #20]
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	3301      	adds	r3, #1
 80113a4:	61fb      	str	r3, [r7, #28]
 80113a6:	69fb      	ldr	r3, [r7, #28]
 80113a8:	2b02      	cmp	r3, #2
 80113aa:	ddf3      	ble.n	8011394 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80113ac:	2300      	movs	r3, #0
 80113ae:	61bb      	str	r3, [r7, #24]
 80113b0:	e00f      	b.n	80113d2 <ILI9341_Draw_Pixel+0x292>
 80113b2:	bf00      	nop
 80113b4:	20000c42 	.word	0x20000c42
 80113b8:	20000c40 	.word	0x20000c40
 80113bc:	48000400 	.word	0x48000400
 80113c0:	4b0b      	ldr	r3, [pc, #44]	; (80113f0 <ILI9341_Draw_Pixel+0x2b0>)
 80113c2:	695b      	ldr	r3, [r3, #20]
 80113c4:	4a0a      	ldr	r2, [pc, #40]	; (80113f0 <ILI9341_Draw_Pixel+0x2b0>)
 80113c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113ca:	6153      	str	r3, [r2, #20]
 80113cc:	69bb      	ldr	r3, [r7, #24]
 80113ce:	3301      	adds	r3, #1
 80113d0:	61bb      	str	r3, [r7, #24]
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	2b02      	cmp	r3, #2
 80113d6:	ddf3      	ble.n	80113c0 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80113d8:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <ILI9341_Draw_Pixel+0x2b0>)
 80113da:	695b      	ldr	r3, [r3, #20]
 80113dc:	4a04      	ldr	r2, [pc, #16]	; (80113f0 <ILI9341_Draw_Pixel+0x2b0>)
 80113de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113e2:	6153      	str	r3, [r2, #20]
 80113e4:	e000      	b.n	80113e8 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80113e6:	bf00      	nop


}
 80113e8:	3738      	adds	r7, #56	; 0x38
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	48000400 	.word	0x48000400

080113f4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 80113f4:	b590      	push	{r4, r7, lr}
 80113f6:	b087      	sub	sp, #28
 80113f8:	af02      	add	r7, sp, #8
 80113fa:	4604      	mov	r4, r0
 80113fc:	4608      	mov	r0, r1
 80113fe:	4611      	mov	r1, r2
 8011400:	461a      	mov	r2, r3
 8011402:	4623      	mov	r3, r4
 8011404:	80fb      	strh	r3, [r7, #6]
 8011406:	4603      	mov	r3, r0
 8011408:	80bb      	strh	r3, [r7, #4]
 801140a:	460b      	mov	r3, r1
 801140c:	807b      	strh	r3, [r7, #2]
 801140e:	4613      	mov	r3, r2
 8011410:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8011412:	4b41      	ldr	r3, [pc, #260]	; (8011518 <ILI9341_Draw_Rectangle+0x124>)
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	b29b      	uxth	r3, r3
 8011418:	88fa      	ldrh	r2, [r7, #6]
 801141a:	429a      	cmp	r2, r3
 801141c:	d278      	bcs.n	8011510 <ILI9341_Draw_Rectangle+0x11c>
 801141e:	4b3f      	ldr	r3, [pc, #252]	; (801151c <ILI9341_Draw_Rectangle+0x128>)
 8011420:	881b      	ldrh	r3, [r3, #0]
 8011422:	b29b      	uxth	r3, r3
 8011424:	88ba      	ldrh	r2, [r7, #4]
 8011426:	429a      	cmp	r2, r3
 8011428:	d272      	bcs.n	8011510 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 801142a:	88fa      	ldrh	r2, [r7, #6]
 801142c:	887b      	ldrh	r3, [r7, #2]
 801142e:	4413      	add	r3, r2
 8011430:	3b01      	subs	r3, #1
 8011432:	4a39      	ldr	r2, [pc, #228]	; (8011518 <ILI9341_Draw_Rectangle+0x124>)
 8011434:	8812      	ldrh	r2, [r2, #0]
 8011436:	b292      	uxth	r2, r2
 8011438:	4293      	cmp	r3, r2
 801143a:	db05      	blt.n	8011448 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 801143c:	4b36      	ldr	r3, [pc, #216]	; (8011518 <ILI9341_Draw_Rectangle+0x124>)
 801143e:	881b      	ldrh	r3, [r3, #0]
 8011440:	b29a      	uxth	r2, r3
 8011442:	88fb      	ldrh	r3, [r7, #6]
 8011444:	1ad3      	subs	r3, r2, r3
 8011446:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8011448:	88ba      	ldrh	r2, [r7, #4]
 801144a:	883b      	ldrh	r3, [r7, #0]
 801144c:	4413      	add	r3, r2
 801144e:	3b01      	subs	r3, #1
 8011450:	4a32      	ldr	r2, [pc, #200]	; (801151c <ILI9341_Draw_Rectangle+0x128>)
 8011452:	8812      	ldrh	r2, [r2, #0]
 8011454:	b292      	uxth	r2, r2
 8011456:	4293      	cmp	r3, r2
 8011458:	db05      	blt.n	8011466 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 801145a:	4b30      	ldr	r3, [pc, #192]	; (801151c <ILI9341_Draw_Rectangle+0x128>)
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	b29a      	uxth	r2, r3
 8011460:	88bb      	ldrh	r3, [r7, #4]
 8011462:	1ad3      	subs	r3, r2, r3
 8011464:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8011466:	88fa      	ldrh	r2, [r7, #6]
 8011468:	887b      	ldrh	r3, [r7, #2]
 801146a:	4413      	add	r3, r2
 801146c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 801146e:	3b01      	subs	r3, #1
 8011470:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8011472:	88ba      	ldrh	r2, [r7, #4]
 8011474:	883b      	ldrh	r3, [r7, #0]
 8011476:	4413      	add	r3, r2
 8011478:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 801147a:	3b01      	subs	r3, #1
 801147c:	b29b      	uxth	r3, r3
 801147e:	88b9      	ldrh	r1, [r7, #4]
 8011480:	88f8      	ldrh	r0, [r7, #6]
 8011482:	4622      	mov	r2, r4
 8011484:	f7ff fde6 	bl	8011054 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8011488:	883a      	ldrh	r2, [r7, #0]
 801148a:	887b      	ldrh	r3, [r7, #2]
 801148c:	fb12 f303 	smulbb	r3, r2, r3
 8011490:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8011492:	2300      	movs	r3, #0
 8011494:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8011496:	89fb      	ldrh	r3, [r7, #14]
 8011498:	f003 0301 	and.w	r3, r3, #1
 801149c:	2b00      	cmp	r3, #0
 801149e:	d009      	beq.n	80114b4 <ILI9341_Draw_Rectangle+0xc0>
 80114a0:	89fb      	ldrh	r3, [r7, #14]
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d906      	bls.n	80114b4 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80114a6:	2301      	movs	r3, #1
 80114a8:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80114aa:	89fb      	ldrh	r3, [r7, #14]
 80114ac:	085b      	lsrs	r3, r3, #1
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	005b      	lsls	r3, r3, #1
 80114b2:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 80114b4:	89fc      	ldrh	r4, [r7, #14]
 80114b6:	8c3a      	ldrh	r2, [r7, #32]
 80114b8:	88b9      	ldrh	r1, [r7, #4]
 80114ba:	88f8      	ldrh	r0, [r7, #6]
 80114bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	4623      	mov	r3, r4
 80114c4:	f000 f8a8 	bl	8011618 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 80114c8:	7b7b      	ldrb	r3, [r7, #13]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d021      	beq.n	8011512 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80114ce:	88fa      	ldrh	r2, [r7, #6]
 80114d0:	887b      	ldrh	r3, [r7, #2]
 80114d2:	4413      	add	r3, r2
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	3b02      	subs	r3, #2
 80114d8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80114da:	88ba      	ldrh	r2, [r7, #4]
 80114dc:	883b      	ldrh	r3, [r7, #0]
 80114de:	4413      	add	r3, r2
 80114e0:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80114e2:	3b01      	subs	r3, #1
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	8c3a      	ldrh	r2, [r7, #32]
 80114e8:	4619      	mov	r1, r3
 80114ea:	f7ff fe29 	bl	8011140 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80114ee:	88fa      	ldrh	r2, [r7, #6]
 80114f0:	887b      	ldrh	r3, [r7, #2]
 80114f2:	4413      	add	r3, r2
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	3b01      	subs	r3, #1
 80114f8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80114fa:	88ba      	ldrh	r2, [r7, #4]
 80114fc:	883b      	ldrh	r3, [r7, #0]
 80114fe:	4413      	add	r3, r2
 8011500:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8011502:	3b01      	subs	r3, #1
 8011504:	b29b      	uxth	r3, r3
 8011506:	8c3a      	ldrh	r2, [r7, #32]
 8011508:	4619      	mov	r1, r3
 801150a:	f7ff fe19 	bl	8011140 <ILI9341_Draw_Pixel>
 801150e:	e000      	b.n	8011512 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8011510:	bf00      	nop
							colour);
	}
}
 8011512:	3714      	adds	r7, #20
 8011514:	46bd      	mov	sp, r7
 8011516:	bd90      	pop	{r4, r7, pc}
 8011518:	20000c42 	.word	0x20000c42
 801151c:	20000c40 	.word	0x20000c40

08011520 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	4603      	mov	r3, r0
 8011528:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 801152a:	79fb      	ldrb	r3, [r7, #7]
 801152c:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 801152e:	2036      	movs	r0, #54	; 0x36
 8011530:	f000 f922 	bl	8011778 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8011534:	7bfb      	ldrb	r3, [r7, #15]
 8011536:	2b03      	cmp	r3, #3
 8011538:	d836      	bhi.n	80115a8 <ILI9341_Set_Rotation+0x88>
 801153a:	a201      	add	r2, pc, #4	; (adr r2, 8011540 <ILI9341_Set_Rotation+0x20>)
 801153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011540:	08011551 	.word	0x08011551
 8011544:	08011567 	.word	0x08011567
 8011548:	0801157d 	.word	0x0801157d
 801154c:	08011593 	.word	0x08011593
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 8011550:	2048      	movs	r0, #72	; 0x48
 8011552:	f000 f943 	bl	80117dc <_LCD_SendData>
			LCD_WIDTH = 240;
 8011556:	4b17      	ldr	r3, [pc, #92]	; (80115b4 <ILI9341_Set_Rotation+0x94>)
 8011558:	22f0      	movs	r2, #240	; 0xf0
 801155a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 801155c:	4b16      	ldr	r3, [pc, #88]	; (80115b8 <ILI9341_Set_Rotation+0x98>)
 801155e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011562:	801a      	strh	r2, [r3, #0]
			break;
 8011564:	e021      	b.n	80115aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 8011566:	2028      	movs	r0, #40	; 0x28
 8011568:	f000 f938 	bl	80117dc <_LCD_SendData>
			LCD_WIDTH  = 320;
 801156c:	4b11      	ldr	r3, [pc, #68]	; (80115b4 <ILI9341_Set_Rotation+0x94>)
 801156e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011572:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8011574:	4b10      	ldr	r3, [pc, #64]	; (80115b8 <ILI9341_Set_Rotation+0x98>)
 8011576:	22f0      	movs	r2, #240	; 0xf0
 8011578:	801a      	strh	r2, [r3, #0]
			break;
 801157a:	e016      	b.n	80115aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 801157c:	2088      	movs	r0, #136	; 0x88
 801157e:	f000 f92d 	bl	80117dc <_LCD_SendData>
			LCD_WIDTH  = 240;
 8011582:	4b0c      	ldr	r3, [pc, #48]	; (80115b4 <ILI9341_Set_Rotation+0x94>)
 8011584:	22f0      	movs	r2, #240	; 0xf0
 8011586:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8011588:	4b0b      	ldr	r3, [pc, #44]	; (80115b8 <ILI9341_Set_Rotation+0x98>)
 801158a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801158e:	801a      	strh	r2, [r3, #0]
			break;
 8011590:	e00b      	b.n	80115aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8011592:	20e8      	movs	r0, #232	; 0xe8
 8011594:	f000 f922 	bl	80117dc <_LCD_SendData>
			LCD_WIDTH  = 320;
 8011598:	4b06      	ldr	r3, [pc, #24]	; (80115b4 <ILI9341_Set_Rotation+0x94>)
 801159a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801159e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80115a0:	4b05      	ldr	r3, [pc, #20]	; (80115b8 <ILI9341_Set_Rotation+0x98>)
 80115a2:	22f0      	movs	r2, #240	; 0xf0
 80115a4:	801a      	strh	r2, [r3, #0]
			break;
 80115a6:	e000      	b.n	80115aa <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80115a8:	bf00      	nop
	}
}
 80115aa:	bf00      	nop
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20000c42 	.word	0x20000c42
 80115b8:	20000c40 	.word	0x20000c40

080115bc <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 80115bc:	b480      	push	{r7}
 80115be:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80115c0:	4b05      	ldr	r3, [pc, #20]	; (80115d8 <_LCD_Enable+0x1c>)
 80115c2:	695b      	ldr	r3, [r3, #20]
 80115c4:	4a04      	ldr	r2, [pc, #16]	; (80115d8 <_LCD_Enable+0x1c>)
 80115c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80115ca:	6153      	str	r3, [r2, #20]
}
 80115cc:	bf00      	nop
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop
 80115d8:	48000400 	.word	0x48000400

080115dc <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80115e0:	4b0c      	ldr	r3, [pc, #48]	; (8011614 <_LCD_Reset+0x38>)
 80115e2:	695b      	ldr	r3, [r3, #20]
 80115e4:	4a0b      	ldr	r2, [pc, #44]	; (8011614 <_LCD_Reset+0x38>)
 80115e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80115ea:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80115ec:	20c8      	movs	r0, #200	; 0xc8
 80115ee:	f7f7 fe4f 	bl	8009290 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80115f2:	4b08      	ldr	r3, [pc, #32]	; (8011614 <_LCD_Reset+0x38>)
 80115f4:	695b      	ldr	r3, [r3, #20]
 80115f6:	4a07      	ldr	r2, [pc, #28]	; (8011614 <_LCD_Reset+0x38>)
 80115f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115fc:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80115fe:	20c8      	movs	r0, #200	; 0xc8
 8011600:	f7f7 fe46 	bl	8009290 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8011604:	4b03      	ldr	r3, [pc, #12]	; (8011614 <_LCD_Reset+0x38>)
 8011606:	695b      	ldr	r3, [r3, #20]
 8011608:	4a02      	ldr	r2, [pc, #8]	; (8011614 <_LCD_Reset+0x38>)
 801160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801160e:	6153      	str	r3, [r2, #20]
}
 8011610:	bf00      	nop
 8011612:	bd80      	pop	{r7, pc}
 8011614:	48000400 	.word	0x48000400

08011618 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8011618:	b5b0      	push	{r4, r5, r7, lr}
 801161a:	b08e      	sub	sp, #56	; 0x38
 801161c:	af00      	add	r7, sp, #0
 801161e:	607b      	str	r3, [r7, #4]
 8011620:	4603      	mov	r3, r0
 8011622:	81fb      	strh	r3, [r7, #14]
 8011624:	460b      	mov	r3, r1
 8011626:	81bb      	strh	r3, [r7, #12]
 8011628:	4613      	mov	r3, r2
 801162a:	817b      	strh	r3, [r7, #10]
 801162c:	466b      	mov	r3, sp
 801162e:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 8011630:	2300      	movs	r3, #0
 8011632:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	005b      	lsls	r3, r3, #1
 8011638:	4a4d      	ldr	r2, [pc, #308]	; (8011770 <_LCD_Write_Frame+0x158>)
 801163a:	8812      	ldrh	r2, [r2, #0]
 801163c:	4293      	cmp	r3, r2
 801163e:	d202      	bcs.n	8011646 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011644:	e002      	b.n	801164c <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8011646:	4b4a      	ldr	r3, [pc, #296]	; (8011770 <_LCD_Write_Frame+0x158>)
 8011648:	881b      	ldrh	r3, [r3, #0]
 801164a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 801164c:	897b      	ldrh	r3, [r7, #10]
 801164e:	0a1b      	lsrs	r3, r3, #8
 8011650:	b29b      	uxth	r3, r3
 8011652:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 8011654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011656:	4603      	mov	r3, r0
 8011658:	3b01      	subs	r3, #1
 801165a:	61bb      	str	r3, [r7, #24]
 801165c:	4601      	mov	r1, r0
 801165e:	f04f 0200 	mov.w	r2, #0
 8011662:	f04f 0300 	mov.w	r3, #0
 8011666:	f04f 0400 	mov.w	r4, #0
 801166a:	00d4      	lsls	r4, r2, #3
 801166c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8011670:	00cb      	lsls	r3, r1, #3
 8011672:	4601      	mov	r1, r0
 8011674:	f04f 0200 	mov.w	r2, #0
 8011678:	f04f 0300 	mov.w	r3, #0
 801167c:	f04f 0400 	mov.w	r4, #0
 8011680:	00d4      	lsls	r4, r2, #3
 8011682:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8011686:	00cb      	lsls	r3, r1, #3
 8011688:	1dc3      	adds	r3, r0, #7
 801168a:	08db      	lsrs	r3, r3, #3
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	ebad 0d03 	sub.w	sp, sp, r3
 8011692:	466b      	mov	r3, sp
 8011694:	3300      	adds	r3, #0
 8011696:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8011698:	2300      	movs	r3, #0
 801169a:	633b      	str	r3, [r7, #48]	; 0x30
 801169c:	e00d      	b.n	80116ba <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 801169e:	697a      	ldr	r2, [r7, #20]
 80116a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a2:	4413      	add	r3, r2
 80116a4:	7ffa      	ldrb	r2, [r7, #31]
 80116a6:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80116a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116aa:	3301      	adds	r3, #1
 80116ac:	897a      	ldrh	r2, [r7, #10]
 80116ae:	b2d1      	uxtb	r1, r2
 80116b0:	697a      	ldr	r2, [r7, #20]
 80116b2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80116b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b6:	3302      	adds	r3, #2
 80116b8:	633b      	str	r3, [r7, #48]	; 0x30
 80116ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116be:	429a      	cmp	r2, r3
 80116c0:	d3ed      	bcc.n	801169e <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	005b      	lsls	r3, r3, #1
 80116c6:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80116c8:	2301      	movs	r3, #1
 80116ca:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 80116cc:	2300      	movs	r3, #0
 80116ce:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00d      	beq.n	80116f2 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80116d6:	693a      	ldr	r2, [r7, #16]
 80116d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116da:	fbb2 f3f3 	udiv	r3, r2, r3
 80116de:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80116e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116ea:	fb01 f202 	mul.w	r2, r1, r2
 80116ee:	1a9b      	subs	r3, r3, r2
 80116f0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80116f2:	4b20      	ldr	r3, [pc, #128]	; (8011774 <_LCD_Write_Frame+0x15c>)
 80116f4:	695b      	ldr	r3, [r3, #20]
 80116f6:	4a1f      	ldr	r2, [pc, #124]	; (8011774 <_LCD_Write_Frame+0x15c>)
 80116f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116fc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80116fe:	4b1d      	ldr	r3, [pc, #116]	; (8011774 <_LCD_Write_Frame+0x15c>)
 8011700:	695b      	ldr	r3, [r3, #20]
 8011702:	4a1c      	ldr	r2, [pc, #112]	; (8011774 <_LCD_Write_Frame+0x15c>)
 8011704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011708:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 801170a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801170c:	2b00      	cmp	r3, #0
 801170e:	d00f      	beq.n	8011730 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011710:	2300      	movs	r3, #0
 8011712:	627b      	str	r3, [r7, #36]	; 0x24
 8011714:	e008      	b.n	8011728 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 8011716:	6978      	ldr	r0, [r7, #20]
 8011718:	230a      	movs	r3, #10
 801171a:	2200      	movs	r2, #0
 801171c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801171e:	f000 f8c1 	bl	80118a4 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011724:	3301      	adds	r3, #1
 8011726:	627b      	str	r3, [r7, #36]	; 0x24
 8011728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801172c:	429a      	cmp	r2, r3
 801172e:	d3f2      	bcc.n	8011716 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8011730:	6978      	ldr	r0, [r7, #20]
 8011732:	230a      	movs	r3, #10
 8011734:	2200      	movs	r2, #0
 8011736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011738:	f000 f8b4 	bl	80118a4 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801173c:	2300      	movs	r3, #0
 801173e:	623b      	str	r3, [r7, #32]
 8011740:	e008      	b.n	8011754 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011742:	4b0c      	ldr	r3, [pc, #48]	; (8011774 <_LCD_Write_Frame+0x15c>)
 8011744:	695b      	ldr	r3, [r3, #20]
 8011746:	4a0b      	ldr	r2, [pc, #44]	; (8011774 <_LCD_Write_Frame+0x15c>)
 8011748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801174c:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801174e:	6a3b      	ldr	r3, [r7, #32]
 8011750:	3301      	adds	r3, #1
 8011752:	623b      	str	r3, [r7, #32]
 8011754:	6a3b      	ldr	r3, [r7, #32]
 8011756:	2b02      	cmp	r3, #2
 8011758:	ddf3      	ble.n	8011742 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801175a:	4b06      	ldr	r3, [pc, #24]	; (8011774 <_LCD_Write_Frame+0x15c>)
 801175c:	695b      	ldr	r3, [r3, #20]
 801175e:	4a05      	ldr	r2, [pc, #20]	; (8011774 <_LCD_Write_Frame+0x15c>)
 8011760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011764:	6153      	str	r3, [r2, #20]
 8011766:	46ad      	mov	sp, r5

}
 8011768:	bf00      	nop
 801176a:	3738      	adds	r7, #56	; 0x38
 801176c:	46bd      	mov	sp, r7
 801176e:	bdb0      	pop	{r4, r5, r7, pc}
 8011770:	20000c44 	.word	0x20000c44
 8011774:	48000400 	.word	0x48000400

08011778 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	4603      	mov	r3, r0
 8011780:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011782:	4b15      	ldr	r3, [pc, #84]	; (80117d8 <_LCD_SendCommand+0x60>)
 8011784:	695b      	ldr	r3, [r3, #20]
 8011786:	4a14      	ldr	r2, [pc, #80]	; (80117d8 <_LCD_SendCommand+0x60>)
 8011788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801178c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 801178e:	4b12      	ldr	r3, [pc, #72]	; (80117d8 <_LCD_SendCommand+0x60>)
 8011790:	695b      	ldr	r3, [r3, #20]
 8011792:	4a11      	ldr	r2, [pc, #68]	; (80117d8 <_LCD_SendCommand+0x60>)
 8011794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011798:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 801179a:	79fb      	ldrb	r3, [r7, #7]
 801179c:	2200      	movs	r2, #0
 801179e:	2100      	movs	r1, #0
 80117a0:	4618      	mov	r0, r3
 80117a2:	f000 f84d 	bl	8011840 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80117a6:	2300      	movs	r3, #0
 80117a8:	60fb      	str	r3, [r7, #12]
 80117aa:	e008      	b.n	80117be <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80117ac:	4b0a      	ldr	r3, [pc, #40]	; (80117d8 <_LCD_SendCommand+0x60>)
 80117ae:	695b      	ldr	r3, [r3, #20]
 80117b0:	4a09      	ldr	r2, [pc, #36]	; (80117d8 <_LCD_SendCommand+0x60>)
 80117b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80117b6:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	3301      	adds	r3, #1
 80117bc:	60fb      	str	r3, [r7, #12]
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2b02      	cmp	r3, #2
 80117c2:	ddf3      	ble.n	80117ac <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80117c4:	4b04      	ldr	r3, [pc, #16]	; (80117d8 <_LCD_SendCommand+0x60>)
 80117c6:	695b      	ldr	r3, [r3, #20]
 80117c8:	4a03      	ldr	r2, [pc, #12]	; (80117d8 <_LCD_SendCommand+0x60>)
 80117ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117ce:	6153      	str	r3, [r2, #20]
}
 80117d0:	bf00      	nop
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	48000400 	.word	0x48000400

080117dc <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	4603      	mov	r3, r0
 80117e4:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80117e6:	4b15      	ldr	r3, [pc, #84]	; (801183c <_LCD_SendData+0x60>)
 80117e8:	695b      	ldr	r3, [r3, #20]
 80117ea:	4a14      	ldr	r2, [pc, #80]	; (801183c <_LCD_SendData+0x60>)
 80117ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117f0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80117f2:	4b12      	ldr	r3, [pc, #72]	; (801183c <_LCD_SendData+0x60>)
 80117f4:	695b      	ldr	r3, [r3, #20]
 80117f6:	4a11      	ldr	r2, [pc, #68]	; (801183c <_LCD_SendData+0x60>)
 80117f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80117fc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 80117fe:	79fb      	ldrb	r3, [r7, #7]
 8011800:	2200      	movs	r2, #0
 8011802:	2100      	movs	r1, #0
 8011804:	4618      	mov	r0, r3
 8011806:	f000 f81b 	bl	8011840 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801180a:	2300      	movs	r3, #0
 801180c:	60fb      	str	r3, [r7, #12]
 801180e:	e008      	b.n	8011822 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011810:	4b0a      	ldr	r3, [pc, #40]	; (801183c <_LCD_SendData+0x60>)
 8011812:	695b      	ldr	r3, [r3, #20]
 8011814:	4a09      	ldr	r2, [pc, #36]	; (801183c <_LCD_SendData+0x60>)
 8011816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801181a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	3301      	adds	r3, #1
 8011820:	60fb      	str	r3, [r7, #12]
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	2b02      	cmp	r3, #2
 8011826:	ddf3      	ble.n	8011810 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011828:	4b04      	ldr	r3, [pc, #16]	; (801183c <_LCD_SendData+0x60>)
 801182a:	695b      	ldr	r3, [r3, #20]
 801182c:	4a03      	ldr	r2, [pc, #12]	; (801183c <_LCD_SendData+0x60>)
 801182e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011832:	6153      	str	r3, [r2, #20]
}
 8011834:	bf00      	nop
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	48000400 	.word	0x48000400

08011840 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8011840:	b480      	push	{r7}
 8011842:	b085      	sub	sp, #20
 8011844:	af00      	add	r7, sp, #0
 8011846:	4603      	mov	r3, r0
 8011848:	71fb      	strb	r3, [r7, #7]
 801184a:	460b      	mov	r3, r1
 801184c:	71bb      	strb	r3, [r7, #6]
 801184e:	4613      	mov	r3, r2
 8011850:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8011852:	2300      	movs	r3, #0
 8011854:	60fb      	str	r3, [r7, #12]
 8011856:	e003      	b.n	8011860 <_SPI_SendByte+0x20>
   		asm("nop");
 8011858:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	3301      	adds	r3, #1
 801185e:	60fb      	str	r3, [r7, #12]
 8011860:	79bb      	ldrb	r3, [r7, #6]
 8011862:	68fa      	ldr	r2, [r7, #12]
 8011864:	429a      	cmp	r2, r3
 8011866:	dbf7      	blt.n	8011858 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8011868:	4b0c      	ldr	r3, [pc, #48]	; (801189c <_SPI_SendByte+0x5c>)
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	f003 0302 	and.w	r3, r3, #2
 8011870:	2b02      	cmp	r3, #2
 8011872:	d102      	bne.n	801187a <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8011874:	4a0a      	ldr	r2, [pc, #40]	; (80118a0 <_SPI_SendByte+0x60>)
 8011876:	79fb      	ldrb	r3, [r7, #7]
 8011878:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 801187a:	2300      	movs	r3, #0
 801187c:	60bb      	str	r3, [r7, #8]
 801187e:	e003      	b.n	8011888 <_SPI_SendByte+0x48>
   		asm("nop");
 8011880:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	3301      	adds	r3, #1
 8011886:	60bb      	str	r3, [r7, #8]
 8011888:	797b      	ldrb	r3, [r7, #5]
 801188a:	68ba      	ldr	r2, [r7, #8]
 801188c:	429a      	cmp	r2, r3
 801188e:	dbf7      	blt.n	8011880 <_SPI_SendByte+0x40>

#endif

}
 8011890:	bf00      	nop
 8011892:	3714      	adds	r7, #20
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr
 801189c:	40003c00 	.word	0x40003c00
 80118a0:	40003c0c 	.word	0x40003c0c

080118a4 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b089      	sub	sp, #36	; 0x24
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	4611      	mov	r1, r2
 80118b0:	461a      	mov	r2, r3
 80118b2:	460b      	mov	r3, r1
 80118b4:	71fb      	strb	r3, [r7, #7]
 80118b6:	4613      	mov	r3, r2
 80118b8:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80118ba:	2300      	movs	r3, #0
 80118bc:	61fb      	str	r3, [r7, #28]
 80118be:	e003      	b.n	80118c8 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 80118c0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	3301      	adds	r3, #1
 80118c6:	61fb      	str	r3, [r7, #28]
 80118c8:	79fb      	ldrb	r3, [r7, #7]
 80118ca:	69fa      	ldr	r2, [r7, #28]
 80118cc:	429a      	cmp	r2, r3
 80118ce:	dbf7      	blt.n	80118c0 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 80118d4:	e01d      	b.n	8011912 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80118d6:	4b1c      	ldr	r3, [pc, #112]	; (8011948 <_SPI_SendByteMultiByte+0xa4>)
 80118d8:	689b      	ldr	r3, [r3, #8]
 80118da:	f003 0302 	and.w	r3, r3, #2
 80118de:	2b02      	cmp	r3, #2
 80118e0:	d117      	bne.n	8011912 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d90a      	bls.n	80118fe <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 80118e8:	69bb      	ldr	r3, [r7, #24]
 80118ea:	881a      	ldrh	r2, [r3, #0]
 80118ec:	4b16      	ldr	r3, [pc, #88]	; (8011948 <_SPI_SendByteMultiByte+0xa4>)
 80118ee:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	3302      	adds	r3, #2
 80118f4:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	3b02      	subs	r3, #2
 80118fa:	60bb      	str	r3, [r7, #8]
 80118fc:	e009      	b.n	8011912 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 80118fe:	4a13      	ldr	r2, [pc, #76]	; (801194c <_SPI_SendByteMultiByte+0xa8>)
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	3301      	adds	r3, #1
 801190a:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	3b01      	subs	r3, #1
 8011910:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1de      	bne.n	80118d6 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8011918:	4b0b      	ldr	r3, [pc, #44]	; (8011948 <_SPI_SendByteMultiByte+0xa4>)
 801191a:	689b      	ldr	r3, [r3, #8]
 801191c:	4a0a      	ldr	r2, [pc, #40]	; (8011948 <_SPI_SendByteMultiByte+0xa4>)
 801191e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011922:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8011924:	2300      	movs	r3, #0
 8011926:	617b      	str	r3, [r7, #20]
 8011928:	e003      	b.n	8011932 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 801192a:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	3301      	adds	r3, #1
 8011930:	617b      	str	r3, [r7, #20]
 8011932:	79bb      	ldrb	r3, [r7, #6]
 8011934:	697a      	ldr	r2, [r7, #20]
 8011936:	429a      	cmp	r2, r3
 8011938:	dbf7      	blt.n	801192a <_SPI_SendByteMultiByte+0x86>

#endif

}
 801193a:	bf00      	nop
 801193c:	3724      	adds	r7, #36	; 0x24
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr
 8011946:	bf00      	nop
 8011948:	40003c00 	.word	0x40003c00
 801194c:	40003c0c 	.word	0x40003c0c

08011950 <__errno>:
 8011950:	4b01      	ldr	r3, [pc, #4]	; (8011958 <__errno+0x8>)
 8011952:	6818      	ldr	r0, [r3, #0]
 8011954:	4770      	bx	lr
 8011956:	bf00      	nop
 8011958:	20001c38 	.word	0x20001c38

0801195c <__libc_init_array>:
 801195c:	b570      	push	{r4, r5, r6, lr}
 801195e:	4e0d      	ldr	r6, [pc, #52]	; (8011994 <__libc_init_array+0x38>)
 8011960:	4c0d      	ldr	r4, [pc, #52]	; (8011998 <__libc_init_array+0x3c>)
 8011962:	1ba4      	subs	r4, r4, r6
 8011964:	10a4      	asrs	r4, r4, #2
 8011966:	2500      	movs	r5, #0
 8011968:	42a5      	cmp	r5, r4
 801196a:	d109      	bne.n	8011980 <__libc_init_array+0x24>
 801196c:	4e0b      	ldr	r6, [pc, #44]	; (801199c <__libc_init_array+0x40>)
 801196e:	4c0c      	ldr	r4, [pc, #48]	; (80119a0 <__libc_init_array+0x44>)
 8011970:	f004 f8a0 	bl	8015ab4 <_init>
 8011974:	1ba4      	subs	r4, r4, r6
 8011976:	10a4      	asrs	r4, r4, #2
 8011978:	2500      	movs	r5, #0
 801197a:	42a5      	cmp	r5, r4
 801197c:	d105      	bne.n	801198a <__libc_init_array+0x2e>
 801197e:	bd70      	pop	{r4, r5, r6, pc}
 8011980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011984:	4798      	blx	r3
 8011986:	3501      	adds	r5, #1
 8011988:	e7ee      	b.n	8011968 <__libc_init_array+0xc>
 801198a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801198e:	4798      	blx	r3
 8011990:	3501      	adds	r5, #1
 8011992:	e7f2      	b.n	801197a <__libc_init_array+0x1e>
 8011994:	08016f50 	.word	0x08016f50
 8011998:	08016f50 	.word	0x08016f50
 801199c:	08016f50 	.word	0x08016f50
 80119a0:	08016f54 	.word	0x08016f54

080119a4 <memset>:
 80119a4:	4402      	add	r2, r0
 80119a6:	4603      	mov	r3, r0
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d100      	bne.n	80119ae <memset+0xa>
 80119ac:	4770      	bx	lr
 80119ae:	f803 1b01 	strb.w	r1, [r3], #1
 80119b2:	e7f9      	b.n	80119a8 <memset+0x4>

080119b4 <__cvt>:
 80119b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119b8:	ec55 4b10 	vmov	r4, r5, d0
 80119bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80119be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80119c2:	2d00      	cmp	r5, #0
 80119c4:	460e      	mov	r6, r1
 80119c6:	4691      	mov	r9, r2
 80119c8:	4619      	mov	r1, r3
 80119ca:	bfb8      	it	lt
 80119cc:	4622      	movlt	r2, r4
 80119ce:	462b      	mov	r3, r5
 80119d0:	f027 0720 	bic.w	r7, r7, #32
 80119d4:	bfbb      	ittet	lt
 80119d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80119da:	461d      	movlt	r5, r3
 80119dc:	2300      	movge	r3, #0
 80119de:	232d      	movlt	r3, #45	; 0x2d
 80119e0:	bfb8      	it	lt
 80119e2:	4614      	movlt	r4, r2
 80119e4:	2f46      	cmp	r7, #70	; 0x46
 80119e6:	700b      	strb	r3, [r1, #0]
 80119e8:	d004      	beq.n	80119f4 <__cvt+0x40>
 80119ea:	2f45      	cmp	r7, #69	; 0x45
 80119ec:	d100      	bne.n	80119f0 <__cvt+0x3c>
 80119ee:	3601      	adds	r6, #1
 80119f0:	2102      	movs	r1, #2
 80119f2:	e000      	b.n	80119f6 <__cvt+0x42>
 80119f4:	2103      	movs	r1, #3
 80119f6:	ab03      	add	r3, sp, #12
 80119f8:	9301      	str	r3, [sp, #4]
 80119fa:	ab02      	add	r3, sp, #8
 80119fc:	9300      	str	r3, [sp, #0]
 80119fe:	4632      	mov	r2, r6
 8011a00:	4653      	mov	r3, sl
 8011a02:	ec45 4b10 	vmov	d0, r4, r5
 8011a06:	f000 fe3f 	bl	8012688 <_dtoa_r>
 8011a0a:	2f47      	cmp	r7, #71	; 0x47
 8011a0c:	4680      	mov	r8, r0
 8011a0e:	d102      	bne.n	8011a16 <__cvt+0x62>
 8011a10:	f019 0f01 	tst.w	r9, #1
 8011a14:	d026      	beq.n	8011a64 <__cvt+0xb0>
 8011a16:	2f46      	cmp	r7, #70	; 0x46
 8011a18:	eb08 0906 	add.w	r9, r8, r6
 8011a1c:	d111      	bne.n	8011a42 <__cvt+0x8e>
 8011a1e:	f898 3000 	ldrb.w	r3, [r8]
 8011a22:	2b30      	cmp	r3, #48	; 0x30
 8011a24:	d10a      	bne.n	8011a3c <__cvt+0x88>
 8011a26:	2200      	movs	r2, #0
 8011a28:	2300      	movs	r3, #0
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	4629      	mov	r1, r5
 8011a2e:	f7ef f873 	bl	8000b18 <__aeabi_dcmpeq>
 8011a32:	b918      	cbnz	r0, 8011a3c <__cvt+0x88>
 8011a34:	f1c6 0601 	rsb	r6, r6, #1
 8011a38:	f8ca 6000 	str.w	r6, [sl]
 8011a3c:	f8da 3000 	ldr.w	r3, [sl]
 8011a40:	4499      	add	r9, r3
 8011a42:	2200      	movs	r2, #0
 8011a44:	2300      	movs	r3, #0
 8011a46:	4620      	mov	r0, r4
 8011a48:	4629      	mov	r1, r5
 8011a4a:	f7ef f865 	bl	8000b18 <__aeabi_dcmpeq>
 8011a4e:	b938      	cbnz	r0, 8011a60 <__cvt+0xac>
 8011a50:	2230      	movs	r2, #48	; 0x30
 8011a52:	9b03      	ldr	r3, [sp, #12]
 8011a54:	454b      	cmp	r3, r9
 8011a56:	d205      	bcs.n	8011a64 <__cvt+0xb0>
 8011a58:	1c59      	adds	r1, r3, #1
 8011a5a:	9103      	str	r1, [sp, #12]
 8011a5c:	701a      	strb	r2, [r3, #0]
 8011a5e:	e7f8      	b.n	8011a52 <__cvt+0x9e>
 8011a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8011a64:	9b03      	ldr	r3, [sp, #12]
 8011a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a68:	eba3 0308 	sub.w	r3, r3, r8
 8011a6c:	4640      	mov	r0, r8
 8011a6e:	6013      	str	r3, [r2, #0]
 8011a70:	b004      	add	sp, #16
 8011a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011a76 <__exponent>:
 8011a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a78:	2900      	cmp	r1, #0
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	bfba      	itte	lt
 8011a7e:	4249      	neglt	r1, r1
 8011a80:	232d      	movlt	r3, #45	; 0x2d
 8011a82:	232b      	movge	r3, #43	; 0x2b
 8011a84:	2909      	cmp	r1, #9
 8011a86:	f804 2b02 	strb.w	r2, [r4], #2
 8011a8a:	7043      	strb	r3, [r0, #1]
 8011a8c:	dd20      	ble.n	8011ad0 <__exponent+0x5a>
 8011a8e:	f10d 0307 	add.w	r3, sp, #7
 8011a92:	461f      	mov	r7, r3
 8011a94:	260a      	movs	r6, #10
 8011a96:	fb91 f5f6 	sdiv	r5, r1, r6
 8011a9a:	fb06 1115 	mls	r1, r6, r5, r1
 8011a9e:	3130      	adds	r1, #48	; 0x30
 8011aa0:	2d09      	cmp	r5, #9
 8011aa2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011aa6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8011aaa:	4629      	mov	r1, r5
 8011aac:	dc09      	bgt.n	8011ac2 <__exponent+0x4c>
 8011aae:	3130      	adds	r1, #48	; 0x30
 8011ab0:	3b02      	subs	r3, #2
 8011ab2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011ab6:	42bb      	cmp	r3, r7
 8011ab8:	4622      	mov	r2, r4
 8011aba:	d304      	bcc.n	8011ac6 <__exponent+0x50>
 8011abc:	1a10      	subs	r0, r2, r0
 8011abe:	b003      	add	sp, #12
 8011ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	e7e7      	b.n	8011a96 <__exponent+0x20>
 8011ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011aca:	f804 2b01 	strb.w	r2, [r4], #1
 8011ace:	e7f2      	b.n	8011ab6 <__exponent+0x40>
 8011ad0:	2330      	movs	r3, #48	; 0x30
 8011ad2:	4419      	add	r1, r3
 8011ad4:	7083      	strb	r3, [r0, #2]
 8011ad6:	1d02      	adds	r2, r0, #4
 8011ad8:	70c1      	strb	r1, [r0, #3]
 8011ada:	e7ef      	b.n	8011abc <__exponent+0x46>

08011adc <_printf_float>:
 8011adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae0:	b08d      	sub	sp, #52	; 0x34
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011ae8:	4616      	mov	r6, r2
 8011aea:	461f      	mov	r7, r3
 8011aec:	4605      	mov	r5, r0
 8011aee:	f001 fcfd 	bl	80134ec <_localeconv_r>
 8011af2:	6803      	ldr	r3, [r0, #0]
 8011af4:	9304      	str	r3, [sp, #16]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7ee fb92 	bl	8000220 <strlen>
 8011afc:	2300      	movs	r3, #0
 8011afe:	930a      	str	r3, [sp, #40]	; 0x28
 8011b00:	f8d8 3000 	ldr.w	r3, [r8]
 8011b04:	9005      	str	r0, [sp, #20]
 8011b06:	3307      	adds	r3, #7
 8011b08:	f023 0307 	bic.w	r3, r3, #7
 8011b0c:	f103 0208 	add.w	r2, r3, #8
 8011b10:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011b14:	f8d4 b000 	ldr.w	fp, [r4]
 8011b18:	f8c8 2000 	str.w	r2, [r8]
 8011b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011b24:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011b28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011b2c:	9307      	str	r3, [sp, #28]
 8011b2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b36:	4ba7      	ldr	r3, [pc, #668]	; (8011dd4 <_printf_float+0x2f8>)
 8011b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b3c:	f7ef f81e 	bl	8000b7c <__aeabi_dcmpun>
 8011b40:	bb70      	cbnz	r0, 8011ba0 <_printf_float+0xc4>
 8011b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b46:	4ba3      	ldr	r3, [pc, #652]	; (8011dd4 <_printf_float+0x2f8>)
 8011b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b4c:	f7ee fff8 	bl	8000b40 <__aeabi_dcmple>
 8011b50:	bb30      	cbnz	r0, 8011ba0 <_printf_float+0xc4>
 8011b52:	2200      	movs	r2, #0
 8011b54:	2300      	movs	r3, #0
 8011b56:	4640      	mov	r0, r8
 8011b58:	4649      	mov	r1, r9
 8011b5a:	f7ee ffe7 	bl	8000b2c <__aeabi_dcmplt>
 8011b5e:	b110      	cbz	r0, 8011b66 <_printf_float+0x8a>
 8011b60:	232d      	movs	r3, #45	; 0x2d
 8011b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b66:	4a9c      	ldr	r2, [pc, #624]	; (8011dd8 <_printf_float+0x2fc>)
 8011b68:	4b9c      	ldr	r3, [pc, #624]	; (8011ddc <_printf_float+0x300>)
 8011b6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011b6e:	bf8c      	ite	hi
 8011b70:	4690      	movhi	r8, r2
 8011b72:	4698      	movls	r8, r3
 8011b74:	2303      	movs	r3, #3
 8011b76:	f02b 0204 	bic.w	r2, fp, #4
 8011b7a:	6123      	str	r3, [r4, #16]
 8011b7c:	6022      	str	r2, [r4, #0]
 8011b7e:	f04f 0900 	mov.w	r9, #0
 8011b82:	9700      	str	r7, [sp, #0]
 8011b84:	4633      	mov	r3, r6
 8011b86:	aa0b      	add	r2, sp, #44	; 0x2c
 8011b88:	4621      	mov	r1, r4
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	f000 f9e6 	bl	8011f5c <_printf_common>
 8011b90:	3001      	adds	r0, #1
 8011b92:	f040 808d 	bne.w	8011cb0 <_printf_float+0x1d4>
 8011b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b9a:	b00d      	add	sp, #52	; 0x34
 8011b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba0:	4642      	mov	r2, r8
 8011ba2:	464b      	mov	r3, r9
 8011ba4:	4640      	mov	r0, r8
 8011ba6:	4649      	mov	r1, r9
 8011ba8:	f7ee ffe8 	bl	8000b7c <__aeabi_dcmpun>
 8011bac:	b110      	cbz	r0, 8011bb4 <_printf_float+0xd8>
 8011bae:	4a8c      	ldr	r2, [pc, #560]	; (8011de0 <_printf_float+0x304>)
 8011bb0:	4b8c      	ldr	r3, [pc, #560]	; (8011de4 <_printf_float+0x308>)
 8011bb2:	e7da      	b.n	8011b6a <_printf_float+0x8e>
 8011bb4:	6861      	ldr	r1, [r4, #4]
 8011bb6:	1c4b      	adds	r3, r1, #1
 8011bb8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011bbc:	a80a      	add	r0, sp, #40	; 0x28
 8011bbe:	d13e      	bne.n	8011c3e <_printf_float+0x162>
 8011bc0:	2306      	movs	r3, #6
 8011bc2:	6063      	str	r3, [r4, #4]
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011bca:	ab09      	add	r3, sp, #36	; 0x24
 8011bcc:	9300      	str	r3, [sp, #0]
 8011bce:	ec49 8b10 	vmov	d0, r8, r9
 8011bd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011bd6:	6022      	str	r2, [r4, #0]
 8011bd8:	f8cd a004 	str.w	sl, [sp, #4]
 8011bdc:	6861      	ldr	r1, [r4, #4]
 8011bde:	4628      	mov	r0, r5
 8011be0:	f7ff fee8 	bl	80119b4 <__cvt>
 8011be4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011be8:	2b47      	cmp	r3, #71	; 0x47
 8011bea:	4680      	mov	r8, r0
 8011bec:	d109      	bne.n	8011c02 <_printf_float+0x126>
 8011bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bf0:	1cd8      	adds	r0, r3, #3
 8011bf2:	db02      	blt.n	8011bfa <_printf_float+0x11e>
 8011bf4:	6862      	ldr	r2, [r4, #4]
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	dd47      	ble.n	8011c8a <_printf_float+0x1ae>
 8011bfa:	f1aa 0a02 	sub.w	sl, sl, #2
 8011bfe:	fa5f fa8a 	uxtb.w	sl, sl
 8011c02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011c06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c08:	d824      	bhi.n	8011c54 <_printf_float+0x178>
 8011c0a:	3901      	subs	r1, #1
 8011c0c:	4652      	mov	r2, sl
 8011c0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011c12:	9109      	str	r1, [sp, #36]	; 0x24
 8011c14:	f7ff ff2f 	bl	8011a76 <__exponent>
 8011c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c1a:	1813      	adds	r3, r2, r0
 8011c1c:	2a01      	cmp	r2, #1
 8011c1e:	4681      	mov	r9, r0
 8011c20:	6123      	str	r3, [r4, #16]
 8011c22:	dc02      	bgt.n	8011c2a <_printf_float+0x14e>
 8011c24:	6822      	ldr	r2, [r4, #0]
 8011c26:	07d1      	lsls	r1, r2, #31
 8011c28:	d501      	bpl.n	8011c2e <_printf_float+0x152>
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	6123      	str	r3, [r4, #16]
 8011c2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d0a5      	beq.n	8011b82 <_printf_float+0xa6>
 8011c36:	232d      	movs	r3, #45	; 0x2d
 8011c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c3c:	e7a1      	b.n	8011b82 <_printf_float+0xa6>
 8011c3e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011c42:	f000 8177 	beq.w	8011f34 <_printf_float+0x458>
 8011c46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011c4a:	d1bb      	bne.n	8011bc4 <_printf_float+0xe8>
 8011c4c:	2900      	cmp	r1, #0
 8011c4e:	d1b9      	bne.n	8011bc4 <_printf_float+0xe8>
 8011c50:	2301      	movs	r3, #1
 8011c52:	e7b6      	b.n	8011bc2 <_printf_float+0xe6>
 8011c54:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011c58:	d119      	bne.n	8011c8e <_printf_float+0x1b2>
 8011c5a:	2900      	cmp	r1, #0
 8011c5c:	6863      	ldr	r3, [r4, #4]
 8011c5e:	dd0c      	ble.n	8011c7a <_printf_float+0x19e>
 8011c60:	6121      	str	r1, [r4, #16]
 8011c62:	b913      	cbnz	r3, 8011c6a <_printf_float+0x18e>
 8011c64:	6822      	ldr	r2, [r4, #0]
 8011c66:	07d2      	lsls	r2, r2, #31
 8011c68:	d502      	bpl.n	8011c70 <_printf_float+0x194>
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	440b      	add	r3, r1
 8011c6e:	6123      	str	r3, [r4, #16]
 8011c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c72:	65a3      	str	r3, [r4, #88]	; 0x58
 8011c74:	f04f 0900 	mov.w	r9, #0
 8011c78:	e7d9      	b.n	8011c2e <_printf_float+0x152>
 8011c7a:	b913      	cbnz	r3, 8011c82 <_printf_float+0x1a6>
 8011c7c:	6822      	ldr	r2, [r4, #0]
 8011c7e:	07d0      	lsls	r0, r2, #31
 8011c80:	d501      	bpl.n	8011c86 <_printf_float+0x1aa>
 8011c82:	3302      	adds	r3, #2
 8011c84:	e7f3      	b.n	8011c6e <_printf_float+0x192>
 8011c86:	2301      	movs	r3, #1
 8011c88:	e7f1      	b.n	8011c6e <_printf_float+0x192>
 8011c8a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011c8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011c92:	4293      	cmp	r3, r2
 8011c94:	db05      	blt.n	8011ca2 <_printf_float+0x1c6>
 8011c96:	6822      	ldr	r2, [r4, #0]
 8011c98:	6123      	str	r3, [r4, #16]
 8011c9a:	07d1      	lsls	r1, r2, #31
 8011c9c:	d5e8      	bpl.n	8011c70 <_printf_float+0x194>
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	e7e5      	b.n	8011c6e <_printf_float+0x192>
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	bfd4      	ite	le
 8011ca6:	f1c3 0302 	rsble	r3, r3, #2
 8011caa:	2301      	movgt	r3, #1
 8011cac:	4413      	add	r3, r2
 8011cae:	e7de      	b.n	8011c6e <_printf_float+0x192>
 8011cb0:	6823      	ldr	r3, [r4, #0]
 8011cb2:	055a      	lsls	r2, r3, #21
 8011cb4:	d407      	bmi.n	8011cc6 <_printf_float+0x1ea>
 8011cb6:	6923      	ldr	r3, [r4, #16]
 8011cb8:	4642      	mov	r2, r8
 8011cba:	4631      	mov	r1, r6
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	47b8      	blx	r7
 8011cc0:	3001      	adds	r0, #1
 8011cc2:	d12b      	bne.n	8011d1c <_printf_float+0x240>
 8011cc4:	e767      	b.n	8011b96 <_printf_float+0xba>
 8011cc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011cca:	f240 80dc 	bls.w	8011e86 <_printf_float+0x3aa>
 8011cce:	2200      	movs	r2, #0
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011cd6:	f7ee ff1f 	bl	8000b18 <__aeabi_dcmpeq>
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	d033      	beq.n	8011d46 <_printf_float+0x26a>
 8011cde:	2301      	movs	r3, #1
 8011ce0:	4a41      	ldr	r2, [pc, #260]	; (8011de8 <_printf_float+0x30c>)
 8011ce2:	4631      	mov	r1, r6
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	47b8      	blx	r7
 8011ce8:	3001      	adds	r0, #1
 8011cea:	f43f af54 	beq.w	8011b96 <_printf_float+0xba>
 8011cee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	db02      	blt.n	8011cfc <_printf_float+0x220>
 8011cf6:	6823      	ldr	r3, [r4, #0]
 8011cf8:	07d8      	lsls	r0, r3, #31
 8011cfa:	d50f      	bpl.n	8011d1c <_printf_float+0x240>
 8011cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d00:	4631      	mov	r1, r6
 8011d02:	4628      	mov	r0, r5
 8011d04:	47b8      	blx	r7
 8011d06:	3001      	adds	r0, #1
 8011d08:	f43f af45 	beq.w	8011b96 <_printf_float+0xba>
 8011d0c:	f04f 0800 	mov.w	r8, #0
 8011d10:	f104 091a 	add.w	r9, r4, #26
 8011d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d16:	3b01      	subs	r3, #1
 8011d18:	4543      	cmp	r3, r8
 8011d1a:	dc09      	bgt.n	8011d30 <_printf_float+0x254>
 8011d1c:	6823      	ldr	r3, [r4, #0]
 8011d1e:	079b      	lsls	r3, r3, #30
 8011d20:	f100 8103 	bmi.w	8011f2a <_printf_float+0x44e>
 8011d24:	68e0      	ldr	r0, [r4, #12]
 8011d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d28:	4298      	cmp	r0, r3
 8011d2a:	bfb8      	it	lt
 8011d2c:	4618      	movlt	r0, r3
 8011d2e:	e734      	b.n	8011b9a <_printf_float+0xbe>
 8011d30:	2301      	movs	r3, #1
 8011d32:	464a      	mov	r2, r9
 8011d34:	4631      	mov	r1, r6
 8011d36:	4628      	mov	r0, r5
 8011d38:	47b8      	blx	r7
 8011d3a:	3001      	adds	r0, #1
 8011d3c:	f43f af2b 	beq.w	8011b96 <_printf_float+0xba>
 8011d40:	f108 0801 	add.w	r8, r8, #1
 8011d44:	e7e6      	b.n	8011d14 <_printf_float+0x238>
 8011d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	dc2b      	bgt.n	8011da4 <_printf_float+0x2c8>
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	4a26      	ldr	r2, [pc, #152]	; (8011de8 <_printf_float+0x30c>)
 8011d50:	4631      	mov	r1, r6
 8011d52:	4628      	mov	r0, r5
 8011d54:	47b8      	blx	r7
 8011d56:	3001      	adds	r0, #1
 8011d58:	f43f af1d 	beq.w	8011b96 <_printf_float+0xba>
 8011d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d5e:	b923      	cbnz	r3, 8011d6a <_printf_float+0x28e>
 8011d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d62:	b913      	cbnz	r3, 8011d6a <_printf_float+0x28e>
 8011d64:	6823      	ldr	r3, [r4, #0]
 8011d66:	07d9      	lsls	r1, r3, #31
 8011d68:	d5d8      	bpl.n	8011d1c <_printf_float+0x240>
 8011d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d6e:	4631      	mov	r1, r6
 8011d70:	4628      	mov	r0, r5
 8011d72:	47b8      	blx	r7
 8011d74:	3001      	adds	r0, #1
 8011d76:	f43f af0e 	beq.w	8011b96 <_printf_float+0xba>
 8011d7a:	f04f 0900 	mov.w	r9, #0
 8011d7e:	f104 0a1a 	add.w	sl, r4, #26
 8011d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d84:	425b      	negs	r3, r3
 8011d86:	454b      	cmp	r3, r9
 8011d88:	dc01      	bgt.n	8011d8e <_printf_float+0x2b2>
 8011d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d8c:	e794      	b.n	8011cb8 <_printf_float+0x1dc>
 8011d8e:	2301      	movs	r3, #1
 8011d90:	4652      	mov	r2, sl
 8011d92:	4631      	mov	r1, r6
 8011d94:	4628      	mov	r0, r5
 8011d96:	47b8      	blx	r7
 8011d98:	3001      	adds	r0, #1
 8011d9a:	f43f aefc 	beq.w	8011b96 <_printf_float+0xba>
 8011d9e:	f109 0901 	add.w	r9, r9, #1
 8011da2:	e7ee      	b.n	8011d82 <_printf_float+0x2a6>
 8011da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011da8:	429a      	cmp	r2, r3
 8011daa:	bfa8      	it	ge
 8011dac:	461a      	movge	r2, r3
 8011dae:	2a00      	cmp	r2, #0
 8011db0:	4691      	mov	r9, r2
 8011db2:	dd07      	ble.n	8011dc4 <_printf_float+0x2e8>
 8011db4:	4613      	mov	r3, r2
 8011db6:	4631      	mov	r1, r6
 8011db8:	4642      	mov	r2, r8
 8011dba:	4628      	mov	r0, r5
 8011dbc:	47b8      	blx	r7
 8011dbe:	3001      	adds	r0, #1
 8011dc0:	f43f aee9 	beq.w	8011b96 <_printf_float+0xba>
 8011dc4:	f104 031a 	add.w	r3, r4, #26
 8011dc8:	f04f 0b00 	mov.w	fp, #0
 8011dcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011dd0:	9306      	str	r3, [sp, #24]
 8011dd2:	e015      	b.n	8011e00 <_printf_float+0x324>
 8011dd4:	7fefffff 	.word	0x7fefffff
 8011dd8:	08016c48 	.word	0x08016c48
 8011ddc:	08016c44 	.word	0x08016c44
 8011de0:	08016c50 	.word	0x08016c50
 8011de4:	08016c4c 	.word	0x08016c4c
 8011de8:	08016f04 	.word	0x08016f04
 8011dec:	2301      	movs	r3, #1
 8011dee:	9a06      	ldr	r2, [sp, #24]
 8011df0:	4631      	mov	r1, r6
 8011df2:	4628      	mov	r0, r5
 8011df4:	47b8      	blx	r7
 8011df6:	3001      	adds	r0, #1
 8011df8:	f43f aecd 	beq.w	8011b96 <_printf_float+0xba>
 8011dfc:	f10b 0b01 	add.w	fp, fp, #1
 8011e00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011e04:	ebaa 0309 	sub.w	r3, sl, r9
 8011e08:	455b      	cmp	r3, fp
 8011e0a:	dcef      	bgt.n	8011dec <_printf_float+0x310>
 8011e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e10:	429a      	cmp	r2, r3
 8011e12:	44d0      	add	r8, sl
 8011e14:	db15      	blt.n	8011e42 <_printf_float+0x366>
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	07da      	lsls	r2, r3, #31
 8011e1a:	d412      	bmi.n	8011e42 <_printf_float+0x366>
 8011e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e20:	eba3 020a 	sub.w	r2, r3, sl
 8011e24:	eba3 0a01 	sub.w	sl, r3, r1
 8011e28:	4592      	cmp	sl, r2
 8011e2a:	bfa8      	it	ge
 8011e2c:	4692      	movge	sl, r2
 8011e2e:	f1ba 0f00 	cmp.w	sl, #0
 8011e32:	dc0e      	bgt.n	8011e52 <_printf_float+0x376>
 8011e34:	f04f 0800 	mov.w	r8, #0
 8011e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e3c:	f104 091a 	add.w	r9, r4, #26
 8011e40:	e019      	b.n	8011e76 <_printf_float+0x39a>
 8011e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e46:	4631      	mov	r1, r6
 8011e48:	4628      	mov	r0, r5
 8011e4a:	47b8      	blx	r7
 8011e4c:	3001      	adds	r0, #1
 8011e4e:	d1e5      	bne.n	8011e1c <_printf_float+0x340>
 8011e50:	e6a1      	b.n	8011b96 <_printf_float+0xba>
 8011e52:	4653      	mov	r3, sl
 8011e54:	4642      	mov	r2, r8
 8011e56:	4631      	mov	r1, r6
 8011e58:	4628      	mov	r0, r5
 8011e5a:	47b8      	blx	r7
 8011e5c:	3001      	adds	r0, #1
 8011e5e:	d1e9      	bne.n	8011e34 <_printf_float+0x358>
 8011e60:	e699      	b.n	8011b96 <_printf_float+0xba>
 8011e62:	2301      	movs	r3, #1
 8011e64:	464a      	mov	r2, r9
 8011e66:	4631      	mov	r1, r6
 8011e68:	4628      	mov	r0, r5
 8011e6a:	47b8      	blx	r7
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	f43f ae92 	beq.w	8011b96 <_printf_float+0xba>
 8011e72:	f108 0801 	add.w	r8, r8, #1
 8011e76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e7a:	1a9b      	subs	r3, r3, r2
 8011e7c:	eba3 030a 	sub.w	r3, r3, sl
 8011e80:	4543      	cmp	r3, r8
 8011e82:	dcee      	bgt.n	8011e62 <_printf_float+0x386>
 8011e84:	e74a      	b.n	8011d1c <_printf_float+0x240>
 8011e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e88:	2a01      	cmp	r2, #1
 8011e8a:	dc01      	bgt.n	8011e90 <_printf_float+0x3b4>
 8011e8c:	07db      	lsls	r3, r3, #31
 8011e8e:	d53a      	bpl.n	8011f06 <_printf_float+0x42a>
 8011e90:	2301      	movs	r3, #1
 8011e92:	4642      	mov	r2, r8
 8011e94:	4631      	mov	r1, r6
 8011e96:	4628      	mov	r0, r5
 8011e98:	47b8      	blx	r7
 8011e9a:	3001      	adds	r0, #1
 8011e9c:	f43f ae7b 	beq.w	8011b96 <_printf_float+0xba>
 8011ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ea4:	4631      	mov	r1, r6
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	47b8      	blx	r7
 8011eaa:	3001      	adds	r0, #1
 8011eac:	f108 0801 	add.w	r8, r8, #1
 8011eb0:	f43f ae71 	beq.w	8011b96 <_printf_float+0xba>
 8011eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8011ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	f7ee fe29 	bl	8000b18 <__aeabi_dcmpeq>
 8011ec6:	b9c8      	cbnz	r0, 8011efc <_printf_float+0x420>
 8011ec8:	4653      	mov	r3, sl
 8011eca:	4642      	mov	r2, r8
 8011ecc:	4631      	mov	r1, r6
 8011ece:	4628      	mov	r0, r5
 8011ed0:	47b8      	blx	r7
 8011ed2:	3001      	adds	r0, #1
 8011ed4:	d10e      	bne.n	8011ef4 <_printf_float+0x418>
 8011ed6:	e65e      	b.n	8011b96 <_printf_float+0xba>
 8011ed8:	2301      	movs	r3, #1
 8011eda:	4652      	mov	r2, sl
 8011edc:	4631      	mov	r1, r6
 8011ede:	4628      	mov	r0, r5
 8011ee0:	47b8      	blx	r7
 8011ee2:	3001      	adds	r0, #1
 8011ee4:	f43f ae57 	beq.w	8011b96 <_printf_float+0xba>
 8011ee8:	f108 0801 	add.w	r8, r8, #1
 8011eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eee:	3b01      	subs	r3, #1
 8011ef0:	4543      	cmp	r3, r8
 8011ef2:	dcf1      	bgt.n	8011ed8 <_printf_float+0x3fc>
 8011ef4:	464b      	mov	r3, r9
 8011ef6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011efa:	e6de      	b.n	8011cba <_printf_float+0x1de>
 8011efc:	f04f 0800 	mov.w	r8, #0
 8011f00:	f104 0a1a 	add.w	sl, r4, #26
 8011f04:	e7f2      	b.n	8011eec <_printf_float+0x410>
 8011f06:	2301      	movs	r3, #1
 8011f08:	e7df      	b.n	8011eca <_printf_float+0x3ee>
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	464a      	mov	r2, r9
 8011f0e:	4631      	mov	r1, r6
 8011f10:	4628      	mov	r0, r5
 8011f12:	47b8      	blx	r7
 8011f14:	3001      	adds	r0, #1
 8011f16:	f43f ae3e 	beq.w	8011b96 <_printf_float+0xba>
 8011f1a:	f108 0801 	add.w	r8, r8, #1
 8011f1e:	68e3      	ldr	r3, [r4, #12]
 8011f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f22:	1a9b      	subs	r3, r3, r2
 8011f24:	4543      	cmp	r3, r8
 8011f26:	dcf0      	bgt.n	8011f0a <_printf_float+0x42e>
 8011f28:	e6fc      	b.n	8011d24 <_printf_float+0x248>
 8011f2a:	f04f 0800 	mov.w	r8, #0
 8011f2e:	f104 0919 	add.w	r9, r4, #25
 8011f32:	e7f4      	b.n	8011f1e <_printf_float+0x442>
 8011f34:	2900      	cmp	r1, #0
 8011f36:	f43f ae8b 	beq.w	8011c50 <_printf_float+0x174>
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011f40:	ab09      	add	r3, sp, #36	; 0x24
 8011f42:	9300      	str	r3, [sp, #0]
 8011f44:	ec49 8b10 	vmov	d0, r8, r9
 8011f48:	6022      	str	r2, [r4, #0]
 8011f4a:	f8cd a004 	str.w	sl, [sp, #4]
 8011f4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011f52:	4628      	mov	r0, r5
 8011f54:	f7ff fd2e 	bl	80119b4 <__cvt>
 8011f58:	4680      	mov	r8, r0
 8011f5a:	e648      	b.n	8011bee <_printf_float+0x112>

08011f5c <_printf_common>:
 8011f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f60:	4691      	mov	r9, r2
 8011f62:	461f      	mov	r7, r3
 8011f64:	688a      	ldr	r2, [r1, #8]
 8011f66:	690b      	ldr	r3, [r1, #16]
 8011f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	bfb8      	it	lt
 8011f70:	4613      	movlt	r3, r2
 8011f72:	f8c9 3000 	str.w	r3, [r9]
 8011f76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	460c      	mov	r4, r1
 8011f7e:	b112      	cbz	r2, 8011f86 <_printf_common+0x2a>
 8011f80:	3301      	adds	r3, #1
 8011f82:	f8c9 3000 	str.w	r3, [r9]
 8011f86:	6823      	ldr	r3, [r4, #0]
 8011f88:	0699      	lsls	r1, r3, #26
 8011f8a:	bf42      	ittt	mi
 8011f8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011f90:	3302      	addmi	r3, #2
 8011f92:	f8c9 3000 	strmi.w	r3, [r9]
 8011f96:	6825      	ldr	r5, [r4, #0]
 8011f98:	f015 0506 	ands.w	r5, r5, #6
 8011f9c:	d107      	bne.n	8011fae <_printf_common+0x52>
 8011f9e:	f104 0a19 	add.w	sl, r4, #25
 8011fa2:	68e3      	ldr	r3, [r4, #12]
 8011fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8011fa8:	1a9b      	subs	r3, r3, r2
 8011faa:	42ab      	cmp	r3, r5
 8011fac:	dc28      	bgt.n	8012000 <_printf_common+0xa4>
 8011fae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011fb2:	6822      	ldr	r2, [r4, #0]
 8011fb4:	3300      	adds	r3, #0
 8011fb6:	bf18      	it	ne
 8011fb8:	2301      	movne	r3, #1
 8011fba:	0692      	lsls	r2, r2, #26
 8011fbc:	d42d      	bmi.n	801201a <_printf_common+0xbe>
 8011fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011fc2:	4639      	mov	r1, r7
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	47c0      	blx	r8
 8011fc8:	3001      	adds	r0, #1
 8011fca:	d020      	beq.n	801200e <_printf_common+0xb2>
 8011fcc:	6823      	ldr	r3, [r4, #0]
 8011fce:	68e5      	ldr	r5, [r4, #12]
 8011fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8011fd4:	f003 0306 	and.w	r3, r3, #6
 8011fd8:	2b04      	cmp	r3, #4
 8011fda:	bf08      	it	eq
 8011fdc:	1aad      	subeq	r5, r5, r2
 8011fde:	68a3      	ldr	r3, [r4, #8]
 8011fe0:	6922      	ldr	r2, [r4, #16]
 8011fe2:	bf0c      	ite	eq
 8011fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011fe8:	2500      	movne	r5, #0
 8011fea:	4293      	cmp	r3, r2
 8011fec:	bfc4      	itt	gt
 8011fee:	1a9b      	subgt	r3, r3, r2
 8011ff0:	18ed      	addgt	r5, r5, r3
 8011ff2:	f04f 0900 	mov.w	r9, #0
 8011ff6:	341a      	adds	r4, #26
 8011ff8:	454d      	cmp	r5, r9
 8011ffa:	d11a      	bne.n	8012032 <_printf_common+0xd6>
 8011ffc:	2000      	movs	r0, #0
 8011ffe:	e008      	b.n	8012012 <_printf_common+0xb6>
 8012000:	2301      	movs	r3, #1
 8012002:	4652      	mov	r2, sl
 8012004:	4639      	mov	r1, r7
 8012006:	4630      	mov	r0, r6
 8012008:	47c0      	blx	r8
 801200a:	3001      	adds	r0, #1
 801200c:	d103      	bne.n	8012016 <_printf_common+0xba>
 801200e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012016:	3501      	adds	r5, #1
 8012018:	e7c3      	b.n	8011fa2 <_printf_common+0x46>
 801201a:	18e1      	adds	r1, r4, r3
 801201c:	1c5a      	adds	r2, r3, #1
 801201e:	2030      	movs	r0, #48	; 0x30
 8012020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012024:	4422      	add	r2, r4
 8012026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801202a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801202e:	3302      	adds	r3, #2
 8012030:	e7c5      	b.n	8011fbe <_printf_common+0x62>
 8012032:	2301      	movs	r3, #1
 8012034:	4622      	mov	r2, r4
 8012036:	4639      	mov	r1, r7
 8012038:	4630      	mov	r0, r6
 801203a:	47c0      	blx	r8
 801203c:	3001      	adds	r0, #1
 801203e:	d0e6      	beq.n	801200e <_printf_common+0xb2>
 8012040:	f109 0901 	add.w	r9, r9, #1
 8012044:	e7d8      	b.n	8011ff8 <_printf_common+0x9c>
	...

08012048 <_printf_i>:
 8012048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801204c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012050:	460c      	mov	r4, r1
 8012052:	7e09      	ldrb	r1, [r1, #24]
 8012054:	b085      	sub	sp, #20
 8012056:	296e      	cmp	r1, #110	; 0x6e
 8012058:	4617      	mov	r7, r2
 801205a:	4606      	mov	r6, r0
 801205c:	4698      	mov	r8, r3
 801205e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012060:	f000 80b3 	beq.w	80121ca <_printf_i+0x182>
 8012064:	d822      	bhi.n	80120ac <_printf_i+0x64>
 8012066:	2963      	cmp	r1, #99	; 0x63
 8012068:	d036      	beq.n	80120d8 <_printf_i+0x90>
 801206a:	d80a      	bhi.n	8012082 <_printf_i+0x3a>
 801206c:	2900      	cmp	r1, #0
 801206e:	f000 80b9 	beq.w	80121e4 <_printf_i+0x19c>
 8012072:	2958      	cmp	r1, #88	; 0x58
 8012074:	f000 8083 	beq.w	801217e <_printf_i+0x136>
 8012078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801207c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012080:	e032      	b.n	80120e8 <_printf_i+0xa0>
 8012082:	2964      	cmp	r1, #100	; 0x64
 8012084:	d001      	beq.n	801208a <_printf_i+0x42>
 8012086:	2969      	cmp	r1, #105	; 0x69
 8012088:	d1f6      	bne.n	8012078 <_printf_i+0x30>
 801208a:	6820      	ldr	r0, [r4, #0]
 801208c:	6813      	ldr	r3, [r2, #0]
 801208e:	0605      	lsls	r5, r0, #24
 8012090:	f103 0104 	add.w	r1, r3, #4
 8012094:	d52a      	bpl.n	80120ec <_printf_i+0xa4>
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	6011      	str	r1, [r2, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	da03      	bge.n	80120a6 <_printf_i+0x5e>
 801209e:	222d      	movs	r2, #45	; 0x2d
 80120a0:	425b      	negs	r3, r3
 80120a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80120a6:	486f      	ldr	r0, [pc, #444]	; (8012264 <_printf_i+0x21c>)
 80120a8:	220a      	movs	r2, #10
 80120aa:	e039      	b.n	8012120 <_printf_i+0xd8>
 80120ac:	2973      	cmp	r1, #115	; 0x73
 80120ae:	f000 809d 	beq.w	80121ec <_printf_i+0x1a4>
 80120b2:	d808      	bhi.n	80120c6 <_printf_i+0x7e>
 80120b4:	296f      	cmp	r1, #111	; 0x6f
 80120b6:	d020      	beq.n	80120fa <_printf_i+0xb2>
 80120b8:	2970      	cmp	r1, #112	; 0x70
 80120ba:	d1dd      	bne.n	8012078 <_printf_i+0x30>
 80120bc:	6823      	ldr	r3, [r4, #0]
 80120be:	f043 0320 	orr.w	r3, r3, #32
 80120c2:	6023      	str	r3, [r4, #0]
 80120c4:	e003      	b.n	80120ce <_printf_i+0x86>
 80120c6:	2975      	cmp	r1, #117	; 0x75
 80120c8:	d017      	beq.n	80120fa <_printf_i+0xb2>
 80120ca:	2978      	cmp	r1, #120	; 0x78
 80120cc:	d1d4      	bne.n	8012078 <_printf_i+0x30>
 80120ce:	2378      	movs	r3, #120	; 0x78
 80120d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120d4:	4864      	ldr	r0, [pc, #400]	; (8012268 <_printf_i+0x220>)
 80120d6:	e055      	b.n	8012184 <_printf_i+0x13c>
 80120d8:	6813      	ldr	r3, [r2, #0]
 80120da:	1d19      	adds	r1, r3, #4
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	6011      	str	r1, [r2, #0]
 80120e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80120e8:	2301      	movs	r3, #1
 80120ea:	e08c      	b.n	8012206 <_printf_i+0x1be>
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	6011      	str	r1, [r2, #0]
 80120f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80120f4:	bf18      	it	ne
 80120f6:	b21b      	sxthne	r3, r3
 80120f8:	e7cf      	b.n	801209a <_printf_i+0x52>
 80120fa:	6813      	ldr	r3, [r2, #0]
 80120fc:	6825      	ldr	r5, [r4, #0]
 80120fe:	1d18      	adds	r0, r3, #4
 8012100:	6010      	str	r0, [r2, #0]
 8012102:	0628      	lsls	r0, r5, #24
 8012104:	d501      	bpl.n	801210a <_printf_i+0xc2>
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	e002      	b.n	8012110 <_printf_i+0xc8>
 801210a:	0668      	lsls	r0, r5, #25
 801210c:	d5fb      	bpl.n	8012106 <_printf_i+0xbe>
 801210e:	881b      	ldrh	r3, [r3, #0]
 8012110:	4854      	ldr	r0, [pc, #336]	; (8012264 <_printf_i+0x21c>)
 8012112:	296f      	cmp	r1, #111	; 0x6f
 8012114:	bf14      	ite	ne
 8012116:	220a      	movne	r2, #10
 8012118:	2208      	moveq	r2, #8
 801211a:	2100      	movs	r1, #0
 801211c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012120:	6865      	ldr	r5, [r4, #4]
 8012122:	60a5      	str	r5, [r4, #8]
 8012124:	2d00      	cmp	r5, #0
 8012126:	f2c0 8095 	blt.w	8012254 <_printf_i+0x20c>
 801212a:	6821      	ldr	r1, [r4, #0]
 801212c:	f021 0104 	bic.w	r1, r1, #4
 8012130:	6021      	str	r1, [r4, #0]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d13d      	bne.n	80121b2 <_printf_i+0x16a>
 8012136:	2d00      	cmp	r5, #0
 8012138:	f040 808e 	bne.w	8012258 <_printf_i+0x210>
 801213c:	4665      	mov	r5, ip
 801213e:	2a08      	cmp	r2, #8
 8012140:	d10b      	bne.n	801215a <_printf_i+0x112>
 8012142:	6823      	ldr	r3, [r4, #0]
 8012144:	07db      	lsls	r3, r3, #31
 8012146:	d508      	bpl.n	801215a <_printf_i+0x112>
 8012148:	6923      	ldr	r3, [r4, #16]
 801214a:	6862      	ldr	r2, [r4, #4]
 801214c:	429a      	cmp	r2, r3
 801214e:	bfde      	ittt	le
 8012150:	2330      	movle	r3, #48	; 0x30
 8012152:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012156:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801215a:	ebac 0305 	sub.w	r3, ip, r5
 801215e:	6123      	str	r3, [r4, #16]
 8012160:	f8cd 8000 	str.w	r8, [sp]
 8012164:	463b      	mov	r3, r7
 8012166:	aa03      	add	r2, sp, #12
 8012168:	4621      	mov	r1, r4
 801216a:	4630      	mov	r0, r6
 801216c:	f7ff fef6 	bl	8011f5c <_printf_common>
 8012170:	3001      	adds	r0, #1
 8012172:	d14d      	bne.n	8012210 <_printf_i+0x1c8>
 8012174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012178:	b005      	add	sp, #20
 801217a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801217e:	4839      	ldr	r0, [pc, #228]	; (8012264 <_printf_i+0x21c>)
 8012180:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012184:	6813      	ldr	r3, [r2, #0]
 8012186:	6821      	ldr	r1, [r4, #0]
 8012188:	1d1d      	adds	r5, r3, #4
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	6015      	str	r5, [r2, #0]
 801218e:	060a      	lsls	r2, r1, #24
 8012190:	d50b      	bpl.n	80121aa <_printf_i+0x162>
 8012192:	07ca      	lsls	r2, r1, #31
 8012194:	bf44      	itt	mi
 8012196:	f041 0120 	orrmi.w	r1, r1, #32
 801219a:	6021      	strmi	r1, [r4, #0]
 801219c:	b91b      	cbnz	r3, 80121a6 <_printf_i+0x15e>
 801219e:	6822      	ldr	r2, [r4, #0]
 80121a0:	f022 0220 	bic.w	r2, r2, #32
 80121a4:	6022      	str	r2, [r4, #0]
 80121a6:	2210      	movs	r2, #16
 80121a8:	e7b7      	b.n	801211a <_printf_i+0xd2>
 80121aa:	064d      	lsls	r5, r1, #25
 80121ac:	bf48      	it	mi
 80121ae:	b29b      	uxthmi	r3, r3
 80121b0:	e7ef      	b.n	8012192 <_printf_i+0x14a>
 80121b2:	4665      	mov	r5, ip
 80121b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80121b8:	fb02 3311 	mls	r3, r2, r1, r3
 80121bc:	5cc3      	ldrb	r3, [r0, r3]
 80121be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80121c2:	460b      	mov	r3, r1
 80121c4:	2900      	cmp	r1, #0
 80121c6:	d1f5      	bne.n	80121b4 <_printf_i+0x16c>
 80121c8:	e7b9      	b.n	801213e <_printf_i+0xf6>
 80121ca:	6813      	ldr	r3, [r2, #0]
 80121cc:	6825      	ldr	r5, [r4, #0]
 80121ce:	6961      	ldr	r1, [r4, #20]
 80121d0:	1d18      	adds	r0, r3, #4
 80121d2:	6010      	str	r0, [r2, #0]
 80121d4:	0628      	lsls	r0, r5, #24
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	d501      	bpl.n	80121de <_printf_i+0x196>
 80121da:	6019      	str	r1, [r3, #0]
 80121dc:	e002      	b.n	80121e4 <_printf_i+0x19c>
 80121de:	066a      	lsls	r2, r5, #25
 80121e0:	d5fb      	bpl.n	80121da <_printf_i+0x192>
 80121e2:	8019      	strh	r1, [r3, #0]
 80121e4:	2300      	movs	r3, #0
 80121e6:	6123      	str	r3, [r4, #16]
 80121e8:	4665      	mov	r5, ip
 80121ea:	e7b9      	b.n	8012160 <_printf_i+0x118>
 80121ec:	6813      	ldr	r3, [r2, #0]
 80121ee:	1d19      	adds	r1, r3, #4
 80121f0:	6011      	str	r1, [r2, #0]
 80121f2:	681d      	ldr	r5, [r3, #0]
 80121f4:	6862      	ldr	r2, [r4, #4]
 80121f6:	2100      	movs	r1, #0
 80121f8:	4628      	mov	r0, r5
 80121fa:	f7ee f819 	bl	8000230 <memchr>
 80121fe:	b108      	cbz	r0, 8012204 <_printf_i+0x1bc>
 8012200:	1b40      	subs	r0, r0, r5
 8012202:	6060      	str	r0, [r4, #4]
 8012204:	6863      	ldr	r3, [r4, #4]
 8012206:	6123      	str	r3, [r4, #16]
 8012208:	2300      	movs	r3, #0
 801220a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801220e:	e7a7      	b.n	8012160 <_printf_i+0x118>
 8012210:	6923      	ldr	r3, [r4, #16]
 8012212:	462a      	mov	r2, r5
 8012214:	4639      	mov	r1, r7
 8012216:	4630      	mov	r0, r6
 8012218:	47c0      	blx	r8
 801221a:	3001      	adds	r0, #1
 801221c:	d0aa      	beq.n	8012174 <_printf_i+0x12c>
 801221e:	6823      	ldr	r3, [r4, #0]
 8012220:	079b      	lsls	r3, r3, #30
 8012222:	d413      	bmi.n	801224c <_printf_i+0x204>
 8012224:	68e0      	ldr	r0, [r4, #12]
 8012226:	9b03      	ldr	r3, [sp, #12]
 8012228:	4298      	cmp	r0, r3
 801222a:	bfb8      	it	lt
 801222c:	4618      	movlt	r0, r3
 801222e:	e7a3      	b.n	8012178 <_printf_i+0x130>
 8012230:	2301      	movs	r3, #1
 8012232:	464a      	mov	r2, r9
 8012234:	4639      	mov	r1, r7
 8012236:	4630      	mov	r0, r6
 8012238:	47c0      	blx	r8
 801223a:	3001      	adds	r0, #1
 801223c:	d09a      	beq.n	8012174 <_printf_i+0x12c>
 801223e:	3501      	adds	r5, #1
 8012240:	68e3      	ldr	r3, [r4, #12]
 8012242:	9a03      	ldr	r2, [sp, #12]
 8012244:	1a9b      	subs	r3, r3, r2
 8012246:	42ab      	cmp	r3, r5
 8012248:	dcf2      	bgt.n	8012230 <_printf_i+0x1e8>
 801224a:	e7eb      	b.n	8012224 <_printf_i+0x1dc>
 801224c:	2500      	movs	r5, #0
 801224e:	f104 0919 	add.w	r9, r4, #25
 8012252:	e7f5      	b.n	8012240 <_printf_i+0x1f8>
 8012254:	2b00      	cmp	r3, #0
 8012256:	d1ac      	bne.n	80121b2 <_printf_i+0x16a>
 8012258:	7803      	ldrb	r3, [r0, #0]
 801225a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801225e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012262:	e76c      	b.n	801213e <_printf_i+0xf6>
 8012264:	08016c54 	.word	0x08016c54
 8012268:	08016c65 	.word	0x08016c65

0801226c <iprintf>:
 801226c:	b40f      	push	{r0, r1, r2, r3}
 801226e:	4b0a      	ldr	r3, [pc, #40]	; (8012298 <iprintf+0x2c>)
 8012270:	b513      	push	{r0, r1, r4, lr}
 8012272:	681c      	ldr	r4, [r3, #0]
 8012274:	b124      	cbz	r4, 8012280 <iprintf+0x14>
 8012276:	69a3      	ldr	r3, [r4, #24]
 8012278:	b913      	cbnz	r3, 8012280 <iprintf+0x14>
 801227a:	4620      	mov	r0, r4
 801227c:	f001 f8ac 	bl	80133d8 <__sinit>
 8012280:	ab05      	add	r3, sp, #20
 8012282:	9a04      	ldr	r2, [sp, #16]
 8012284:	68a1      	ldr	r1, [r4, #8]
 8012286:	9301      	str	r3, [sp, #4]
 8012288:	4620      	mov	r0, r4
 801228a:	f001 fec1 	bl	8014010 <_vfiprintf_r>
 801228e:	b002      	add	sp, #8
 8012290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012294:	b004      	add	sp, #16
 8012296:	4770      	bx	lr
 8012298:	20001c38 	.word	0x20001c38

0801229c <_puts_r>:
 801229c:	b570      	push	{r4, r5, r6, lr}
 801229e:	460e      	mov	r6, r1
 80122a0:	4605      	mov	r5, r0
 80122a2:	b118      	cbz	r0, 80122ac <_puts_r+0x10>
 80122a4:	6983      	ldr	r3, [r0, #24]
 80122a6:	b90b      	cbnz	r3, 80122ac <_puts_r+0x10>
 80122a8:	f001 f896 	bl	80133d8 <__sinit>
 80122ac:	69ab      	ldr	r3, [r5, #24]
 80122ae:	68ac      	ldr	r4, [r5, #8]
 80122b0:	b913      	cbnz	r3, 80122b8 <_puts_r+0x1c>
 80122b2:	4628      	mov	r0, r5
 80122b4:	f001 f890 	bl	80133d8 <__sinit>
 80122b8:	4b23      	ldr	r3, [pc, #140]	; (8012348 <_puts_r+0xac>)
 80122ba:	429c      	cmp	r4, r3
 80122bc:	d117      	bne.n	80122ee <_puts_r+0x52>
 80122be:	686c      	ldr	r4, [r5, #4]
 80122c0:	89a3      	ldrh	r3, [r4, #12]
 80122c2:	071b      	lsls	r3, r3, #28
 80122c4:	d51d      	bpl.n	8012302 <_puts_r+0x66>
 80122c6:	6923      	ldr	r3, [r4, #16]
 80122c8:	b1db      	cbz	r3, 8012302 <_puts_r+0x66>
 80122ca:	3e01      	subs	r6, #1
 80122cc:	68a3      	ldr	r3, [r4, #8]
 80122ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80122d2:	3b01      	subs	r3, #1
 80122d4:	60a3      	str	r3, [r4, #8]
 80122d6:	b9e9      	cbnz	r1, 8012314 <_puts_r+0x78>
 80122d8:	2b00      	cmp	r3, #0
 80122da:	da2e      	bge.n	801233a <_puts_r+0x9e>
 80122dc:	4622      	mov	r2, r4
 80122de:	210a      	movs	r1, #10
 80122e0:	4628      	mov	r0, r5
 80122e2:	f000 f883 	bl	80123ec <__swbuf_r>
 80122e6:	3001      	adds	r0, #1
 80122e8:	d011      	beq.n	801230e <_puts_r+0x72>
 80122ea:	200a      	movs	r0, #10
 80122ec:	e011      	b.n	8012312 <_puts_r+0x76>
 80122ee:	4b17      	ldr	r3, [pc, #92]	; (801234c <_puts_r+0xb0>)
 80122f0:	429c      	cmp	r4, r3
 80122f2:	d101      	bne.n	80122f8 <_puts_r+0x5c>
 80122f4:	68ac      	ldr	r4, [r5, #8]
 80122f6:	e7e3      	b.n	80122c0 <_puts_r+0x24>
 80122f8:	4b15      	ldr	r3, [pc, #84]	; (8012350 <_puts_r+0xb4>)
 80122fa:	429c      	cmp	r4, r3
 80122fc:	bf08      	it	eq
 80122fe:	68ec      	ldreq	r4, [r5, #12]
 8012300:	e7de      	b.n	80122c0 <_puts_r+0x24>
 8012302:	4621      	mov	r1, r4
 8012304:	4628      	mov	r0, r5
 8012306:	f000 f8c3 	bl	8012490 <__swsetup_r>
 801230a:	2800      	cmp	r0, #0
 801230c:	d0dd      	beq.n	80122ca <_puts_r+0x2e>
 801230e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012312:	bd70      	pop	{r4, r5, r6, pc}
 8012314:	2b00      	cmp	r3, #0
 8012316:	da04      	bge.n	8012322 <_puts_r+0x86>
 8012318:	69a2      	ldr	r2, [r4, #24]
 801231a:	429a      	cmp	r2, r3
 801231c:	dc06      	bgt.n	801232c <_puts_r+0x90>
 801231e:	290a      	cmp	r1, #10
 8012320:	d004      	beq.n	801232c <_puts_r+0x90>
 8012322:	6823      	ldr	r3, [r4, #0]
 8012324:	1c5a      	adds	r2, r3, #1
 8012326:	6022      	str	r2, [r4, #0]
 8012328:	7019      	strb	r1, [r3, #0]
 801232a:	e7cf      	b.n	80122cc <_puts_r+0x30>
 801232c:	4622      	mov	r2, r4
 801232e:	4628      	mov	r0, r5
 8012330:	f000 f85c 	bl	80123ec <__swbuf_r>
 8012334:	3001      	adds	r0, #1
 8012336:	d1c9      	bne.n	80122cc <_puts_r+0x30>
 8012338:	e7e9      	b.n	801230e <_puts_r+0x72>
 801233a:	6823      	ldr	r3, [r4, #0]
 801233c:	200a      	movs	r0, #10
 801233e:	1c5a      	adds	r2, r3, #1
 8012340:	6022      	str	r2, [r4, #0]
 8012342:	7018      	strb	r0, [r3, #0]
 8012344:	e7e5      	b.n	8012312 <_puts_r+0x76>
 8012346:	bf00      	nop
 8012348:	08016ca4 	.word	0x08016ca4
 801234c:	08016cc4 	.word	0x08016cc4
 8012350:	08016c84 	.word	0x08016c84

08012354 <puts>:
 8012354:	4b02      	ldr	r3, [pc, #8]	; (8012360 <puts+0xc>)
 8012356:	4601      	mov	r1, r0
 8012358:	6818      	ldr	r0, [r3, #0]
 801235a:	f7ff bf9f 	b.w	801229c <_puts_r>
 801235e:	bf00      	nop
 8012360:	20001c38 	.word	0x20001c38

08012364 <sniprintf>:
 8012364:	b40c      	push	{r2, r3}
 8012366:	b530      	push	{r4, r5, lr}
 8012368:	4b17      	ldr	r3, [pc, #92]	; (80123c8 <sniprintf+0x64>)
 801236a:	1e0c      	subs	r4, r1, #0
 801236c:	b09d      	sub	sp, #116	; 0x74
 801236e:	681d      	ldr	r5, [r3, #0]
 8012370:	da08      	bge.n	8012384 <sniprintf+0x20>
 8012372:	238b      	movs	r3, #139	; 0x8b
 8012374:	602b      	str	r3, [r5, #0]
 8012376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801237a:	b01d      	add	sp, #116	; 0x74
 801237c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012380:	b002      	add	sp, #8
 8012382:	4770      	bx	lr
 8012384:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012388:	f8ad 3014 	strh.w	r3, [sp, #20]
 801238c:	bf14      	ite	ne
 801238e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012392:	4623      	moveq	r3, r4
 8012394:	9304      	str	r3, [sp, #16]
 8012396:	9307      	str	r3, [sp, #28]
 8012398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801239c:	9002      	str	r0, [sp, #8]
 801239e:	9006      	str	r0, [sp, #24]
 80123a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80123a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80123a6:	ab21      	add	r3, sp, #132	; 0x84
 80123a8:	a902      	add	r1, sp, #8
 80123aa:	4628      	mov	r0, r5
 80123ac:	9301      	str	r3, [sp, #4]
 80123ae:	f001 fd0d 	bl	8013dcc <_svfiprintf_r>
 80123b2:	1c43      	adds	r3, r0, #1
 80123b4:	bfbc      	itt	lt
 80123b6:	238b      	movlt	r3, #139	; 0x8b
 80123b8:	602b      	strlt	r3, [r5, #0]
 80123ba:	2c00      	cmp	r4, #0
 80123bc:	d0dd      	beq.n	801237a <sniprintf+0x16>
 80123be:	9b02      	ldr	r3, [sp, #8]
 80123c0:	2200      	movs	r2, #0
 80123c2:	701a      	strb	r2, [r3, #0]
 80123c4:	e7d9      	b.n	801237a <sniprintf+0x16>
 80123c6:	bf00      	nop
 80123c8:	20001c38 	.word	0x20001c38

080123cc <strcat>:
 80123cc:	b510      	push	{r4, lr}
 80123ce:	4603      	mov	r3, r0
 80123d0:	781a      	ldrb	r2, [r3, #0]
 80123d2:	1c5c      	adds	r4, r3, #1
 80123d4:	b93a      	cbnz	r2, 80123e6 <strcat+0x1a>
 80123d6:	3b01      	subs	r3, #1
 80123d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123e0:	2a00      	cmp	r2, #0
 80123e2:	d1f9      	bne.n	80123d8 <strcat+0xc>
 80123e4:	bd10      	pop	{r4, pc}
 80123e6:	4623      	mov	r3, r4
 80123e8:	e7f2      	b.n	80123d0 <strcat+0x4>
	...

080123ec <__swbuf_r>:
 80123ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ee:	460e      	mov	r6, r1
 80123f0:	4614      	mov	r4, r2
 80123f2:	4605      	mov	r5, r0
 80123f4:	b118      	cbz	r0, 80123fe <__swbuf_r+0x12>
 80123f6:	6983      	ldr	r3, [r0, #24]
 80123f8:	b90b      	cbnz	r3, 80123fe <__swbuf_r+0x12>
 80123fa:	f000 ffed 	bl	80133d8 <__sinit>
 80123fe:	4b21      	ldr	r3, [pc, #132]	; (8012484 <__swbuf_r+0x98>)
 8012400:	429c      	cmp	r4, r3
 8012402:	d12a      	bne.n	801245a <__swbuf_r+0x6e>
 8012404:	686c      	ldr	r4, [r5, #4]
 8012406:	69a3      	ldr	r3, [r4, #24]
 8012408:	60a3      	str	r3, [r4, #8]
 801240a:	89a3      	ldrh	r3, [r4, #12]
 801240c:	071a      	lsls	r2, r3, #28
 801240e:	d52e      	bpl.n	801246e <__swbuf_r+0x82>
 8012410:	6923      	ldr	r3, [r4, #16]
 8012412:	b363      	cbz	r3, 801246e <__swbuf_r+0x82>
 8012414:	6923      	ldr	r3, [r4, #16]
 8012416:	6820      	ldr	r0, [r4, #0]
 8012418:	1ac0      	subs	r0, r0, r3
 801241a:	6963      	ldr	r3, [r4, #20]
 801241c:	b2f6      	uxtb	r6, r6
 801241e:	4283      	cmp	r3, r0
 8012420:	4637      	mov	r7, r6
 8012422:	dc04      	bgt.n	801242e <__swbuf_r+0x42>
 8012424:	4621      	mov	r1, r4
 8012426:	4628      	mov	r0, r5
 8012428:	f000 ff6c 	bl	8013304 <_fflush_r>
 801242c:	bb28      	cbnz	r0, 801247a <__swbuf_r+0x8e>
 801242e:	68a3      	ldr	r3, [r4, #8]
 8012430:	3b01      	subs	r3, #1
 8012432:	60a3      	str	r3, [r4, #8]
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	1c5a      	adds	r2, r3, #1
 8012438:	6022      	str	r2, [r4, #0]
 801243a:	701e      	strb	r6, [r3, #0]
 801243c:	6963      	ldr	r3, [r4, #20]
 801243e:	3001      	adds	r0, #1
 8012440:	4283      	cmp	r3, r0
 8012442:	d004      	beq.n	801244e <__swbuf_r+0x62>
 8012444:	89a3      	ldrh	r3, [r4, #12]
 8012446:	07db      	lsls	r3, r3, #31
 8012448:	d519      	bpl.n	801247e <__swbuf_r+0x92>
 801244a:	2e0a      	cmp	r6, #10
 801244c:	d117      	bne.n	801247e <__swbuf_r+0x92>
 801244e:	4621      	mov	r1, r4
 8012450:	4628      	mov	r0, r5
 8012452:	f000 ff57 	bl	8013304 <_fflush_r>
 8012456:	b190      	cbz	r0, 801247e <__swbuf_r+0x92>
 8012458:	e00f      	b.n	801247a <__swbuf_r+0x8e>
 801245a:	4b0b      	ldr	r3, [pc, #44]	; (8012488 <__swbuf_r+0x9c>)
 801245c:	429c      	cmp	r4, r3
 801245e:	d101      	bne.n	8012464 <__swbuf_r+0x78>
 8012460:	68ac      	ldr	r4, [r5, #8]
 8012462:	e7d0      	b.n	8012406 <__swbuf_r+0x1a>
 8012464:	4b09      	ldr	r3, [pc, #36]	; (801248c <__swbuf_r+0xa0>)
 8012466:	429c      	cmp	r4, r3
 8012468:	bf08      	it	eq
 801246a:	68ec      	ldreq	r4, [r5, #12]
 801246c:	e7cb      	b.n	8012406 <__swbuf_r+0x1a>
 801246e:	4621      	mov	r1, r4
 8012470:	4628      	mov	r0, r5
 8012472:	f000 f80d 	bl	8012490 <__swsetup_r>
 8012476:	2800      	cmp	r0, #0
 8012478:	d0cc      	beq.n	8012414 <__swbuf_r+0x28>
 801247a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801247e:	4638      	mov	r0, r7
 8012480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012482:	bf00      	nop
 8012484:	08016ca4 	.word	0x08016ca4
 8012488:	08016cc4 	.word	0x08016cc4
 801248c:	08016c84 	.word	0x08016c84

08012490 <__swsetup_r>:
 8012490:	4b32      	ldr	r3, [pc, #200]	; (801255c <__swsetup_r+0xcc>)
 8012492:	b570      	push	{r4, r5, r6, lr}
 8012494:	681d      	ldr	r5, [r3, #0]
 8012496:	4606      	mov	r6, r0
 8012498:	460c      	mov	r4, r1
 801249a:	b125      	cbz	r5, 80124a6 <__swsetup_r+0x16>
 801249c:	69ab      	ldr	r3, [r5, #24]
 801249e:	b913      	cbnz	r3, 80124a6 <__swsetup_r+0x16>
 80124a0:	4628      	mov	r0, r5
 80124a2:	f000 ff99 	bl	80133d8 <__sinit>
 80124a6:	4b2e      	ldr	r3, [pc, #184]	; (8012560 <__swsetup_r+0xd0>)
 80124a8:	429c      	cmp	r4, r3
 80124aa:	d10f      	bne.n	80124cc <__swsetup_r+0x3c>
 80124ac:	686c      	ldr	r4, [r5, #4]
 80124ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	0715      	lsls	r5, r2, #28
 80124b6:	d42c      	bmi.n	8012512 <__swsetup_r+0x82>
 80124b8:	06d0      	lsls	r0, r2, #27
 80124ba:	d411      	bmi.n	80124e0 <__swsetup_r+0x50>
 80124bc:	2209      	movs	r2, #9
 80124be:	6032      	str	r2, [r6, #0]
 80124c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124c4:	81a3      	strh	r3, [r4, #12]
 80124c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124ca:	e03e      	b.n	801254a <__swsetup_r+0xba>
 80124cc:	4b25      	ldr	r3, [pc, #148]	; (8012564 <__swsetup_r+0xd4>)
 80124ce:	429c      	cmp	r4, r3
 80124d0:	d101      	bne.n	80124d6 <__swsetup_r+0x46>
 80124d2:	68ac      	ldr	r4, [r5, #8]
 80124d4:	e7eb      	b.n	80124ae <__swsetup_r+0x1e>
 80124d6:	4b24      	ldr	r3, [pc, #144]	; (8012568 <__swsetup_r+0xd8>)
 80124d8:	429c      	cmp	r4, r3
 80124da:	bf08      	it	eq
 80124dc:	68ec      	ldreq	r4, [r5, #12]
 80124de:	e7e6      	b.n	80124ae <__swsetup_r+0x1e>
 80124e0:	0751      	lsls	r1, r2, #29
 80124e2:	d512      	bpl.n	801250a <__swsetup_r+0x7a>
 80124e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124e6:	b141      	cbz	r1, 80124fa <__swsetup_r+0x6a>
 80124e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124ec:	4299      	cmp	r1, r3
 80124ee:	d002      	beq.n	80124f6 <__swsetup_r+0x66>
 80124f0:	4630      	mov	r0, r6
 80124f2:	f001 fb69 	bl	8013bc8 <_free_r>
 80124f6:	2300      	movs	r3, #0
 80124f8:	6363      	str	r3, [r4, #52]	; 0x34
 80124fa:	89a3      	ldrh	r3, [r4, #12]
 80124fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012500:	81a3      	strh	r3, [r4, #12]
 8012502:	2300      	movs	r3, #0
 8012504:	6063      	str	r3, [r4, #4]
 8012506:	6923      	ldr	r3, [r4, #16]
 8012508:	6023      	str	r3, [r4, #0]
 801250a:	89a3      	ldrh	r3, [r4, #12]
 801250c:	f043 0308 	orr.w	r3, r3, #8
 8012510:	81a3      	strh	r3, [r4, #12]
 8012512:	6923      	ldr	r3, [r4, #16]
 8012514:	b94b      	cbnz	r3, 801252a <__swsetup_r+0x9a>
 8012516:	89a3      	ldrh	r3, [r4, #12]
 8012518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012520:	d003      	beq.n	801252a <__swsetup_r+0x9a>
 8012522:	4621      	mov	r1, r4
 8012524:	4630      	mov	r0, r6
 8012526:	f001 f813 	bl	8013550 <__smakebuf_r>
 801252a:	89a2      	ldrh	r2, [r4, #12]
 801252c:	f012 0301 	ands.w	r3, r2, #1
 8012530:	d00c      	beq.n	801254c <__swsetup_r+0xbc>
 8012532:	2300      	movs	r3, #0
 8012534:	60a3      	str	r3, [r4, #8]
 8012536:	6963      	ldr	r3, [r4, #20]
 8012538:	425b      	negs	r3, r3
 801253a:	61a3      	str	r3, [r4, #24]
 801253c:	6923      	ldr	r3, [r4, #16]
 801253e:	b953      	cbnz	r3, 8012556 <__swsetup_r+0xc6>
 8012540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012544:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012548:	d1ba      	bne.n	80124c0 <__swsetup_r+0x30>
 801254a:	bd70      	pop	{r4, r5, r6, pc}
 801254c:	0792      	lsls	r2, r2, #30
 801254e:	bf58      	it	pl
 8012550:	6963      	ldrpl	r3, [r4, #20]
 8012552:	60a3      	str	r3, [r4, #8]
 8012554:	e7f2      	b.n	801253c <__swsetup_r+0xac>
 8012556:	2000      	movs	r0, #0
 8012558:	e7f7      	b.n	801254a <__swsetup_r+0xba>
 801255a:	bf00      	nop
 801255c:	20001c38 	.word	0x20001c38
 8012560:	08016ca4 	.word	0x08016ca4
 8012564:	08016cc4 	.word	0x08016cc4
 8012568:	08016c84 	.word	0x08016c84

0801256c <quorem>:
 801256c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012570:	6903      	ldr	r3, [r0, #16]
 8012572:	690c      	ldr	r4, [r1, #16]
 8012574:	42a3      	cmp	r3, r4
 8012576:	4680      	mov	r8, r0
 8012578:	f2c0 8082 	blt.w	8012680 <quorem+0x114>
 801257c:	3c01      	subs	r4, #1
 801257e:	f101 0714 	add.w	r7, r1, #20
 8012582:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012586:	f100 0614 	add.w	r6, r0, #20
 801258a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801258e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012592:	eb06 030c 	add.w	r3, r6, ip
 8012596:	3501      	adds	r5, #1
 8012598:	eb07 090c 	add.w	r9, r7, ip
 801259c:	9301      	str	r3, [sp, #4]
 801259e:	fbb0 f5f5 	udiv	r5, r0, r5
 80125a2:	b395      	cbz	r5, 801260a <quorem+0x9e>
 80125a4:	f04f 0a00 	mov.w	sl, #0
 80125a8:	4638      	mov	r0, r7
 80125aa:	46b6      	mov	lr, r6
 80125ac:	46d3      	mov	fp, sl
 80125ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80125b2:	b293      	uxth	r3, r2
 80125b4:	fb05 a303 	mla	r3, r5, r3, sl
 80125b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80125bc:	b29b      	uxth	r3, r3
 80125be:	ebab 0303 	sub.w	r3, fp, r3
 80125c2:	0c12      	lsrs	r2, r2, #16
 80125c4:	f8de b000 	ldr.w	fp, [lr]
 80125c8:	fb05 a202 	mla	r2, r5, r2, sl
 80125cc:	fa13 f38b 	uxtah	r3, r3, fp
 80125d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80125d4:	fa1f fb82 	uxth.w	fp, r2
 80125d8:	f8de 2000 	ldr.w	r2, [lr]
 80125dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80125e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125ea:	4581      	cmp	r9, r0
 80125ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80125f0:	f84e 3b04 	str.w	r3, [lr], #4
 80125f4:	d2db      	bcs.n	80125ae <quorem+0x42>
 80125f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80125fa:	b933      	cbnz	r3, 801260a <quorem+0x9e>
 80125fc:	9b01      	ldr	r3, [sp, #4]
 80125fe:	3b04      	subs	r3, #4
 8012600:	429e      	cmp	r6, r3
 8012602:	461a      	mov	r2, r3
 8012604:	d330      	bcc.n	8012668 <quorem+0xfc>
 8012606:	f8c8 4010 	str.w	r4, [r8, #16]
 801260a:	4640      	mov	r0, r8
 801260c:	f001 fa08 	bl	8013a20 <__mcmp>
 8012610:	2800      	cmp	r0, #0
 8012612:	db25      	blt.n	8012660 <quorem+0xf4>
 8012614:	3501      	adds	r5, #1
 8012616:	4630      	mov	r0, r6
 8012618:	f04f 0c00 	mov.w	ip, #0
 801261c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012620:	f8d0 e000 	ldr.w	lr, [r0]
 8012624:	b293      	uxth	r3, r2
 8012626:	ebac 0303 	sub.w	r3, ip, r3
 801262a:	0c12      	lsrs	r2, r2, #16
 801262c:	fa13 f38e 	uxtah	r3, r3, lr
 8012630:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012634:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012638:	b29b      	uxth	r3, r3
 801263a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801263e:	45b9      	cmp	r9, r7
 8012640:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012644:	f840 3b04 	str.w	r3, [r0], #4
 8012648:	d2e8      	bcs.n	801261c <quorem+0xb0>
 801264a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801264e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012652:	b92a      	cbnz	r2, 8012660 <quorem+0xf4>
 8012654:	3b04      	subs	r3, #4
 8012656:	429e      	cmp	r6, r3
 8012658:	461a      	mov	r2, r3
 801265a:	d30b      	bcc.n	8012674 <quorem+0x108>
 801265c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012660:	4628      	mov	r0, r5
 8012662:	b003      	add	sp, #12
 8012664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012668:	6812      	ldr	r2, [r2, #0]
 801266a:	3b04      	subs	r3, #4
 801266c:	2a00      	cmp	r2, #0
 801266e:	d1ca      	bne.n	8012606 <quorem+0x9a>
 8012670:	3c01      	subs	r4, #1
 8012672:	e7c5      	b.n	8012600 <quorem+0x94>
 8012674:	6812      	ldr	r2, [r2, #0]
 8012676:	3b04      	subs	r3, #4
 8012678:	2a00      	cmp	r2, #0
 801267a:	d1ef      	bne.n	801265c <quorem+0xf0>
 801267c:	3c01      	subs	r4, #1
 801267e:	e7ea      	b.n	8012656 <quorem+0xea>
 8012680:	2000      	movs	r0, #0
 8012682:	e7ee      	b.n	8012662 <quorem+0xf6>
 8012684:	0000      	movs	r0, r0
	...

08012688 <_dtoa_r>:
 8012688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268c:	ec57 6b10 	vmov	r6, r7, d0
 8012690:	b097      	sub	sp, #92	; 0x5c
 8012692:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012694:	9106      	str	r1, [sp, #24]
 8012696:	4604      	mov	r4, r0
 8012698:	920b      	str	r2, [sp, #44]	; 0x2c
 801269a:	9312      	str	r3, [sp, #72]	; 0x48
 801269c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80126a0:	e9cd 6700 	strd	r6, r7, [sp]
 80126a4:	b93d      	cbnz	r5, 80126b6 <_dtoa_r+0x2e>
 80126a6:	2010      	movs	r0, #16
 80126a8:	f000 ff92 	bl	80135d0 <malloc>
 80126ac:	6260      	str	r0, [r4, #36]	; 0x24
 80126ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80126b2:	6005      	str	r5, [r0, #0]
 80126b4:	60c5      	str	r5, [r0, #12]
 80126b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126b8:	6819      	ldr	r1, [r3, #0]
 80126ba:	b151      	cbz	r1, 80126d2 <_dtoa_r+0x4a>
 80126bc:	685a      	ldr	r2, [r3, #4]
 80126be:	604a      	str	r2, [r1, #4]
 80126c0:	2301      	movs	r3, #1
 80126c2:	4093      	lsls	r3, r2
 80126c4:	608b      	str	r3, [r1, #8]
 80126c6:	4620      	mov	r0, r4
 80126c8:	f000 ffc9 	bl	801365e <_Bfree>
 80126cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126ce:	2200      	movs	r2, #0
 80126d0:	601a      	str	r2, [r3, #0]
 80126d2:	1e3b      	subs	r3, r7, #0
 80126d4:	bfbb      	ittet	lt
 80126d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80126da:	9301      	strlt	r3, [sp, #4]
 80126dc:	2300      	movge	r3, #0
 80126de:	2201      	movlt	r2, #1
 80126e0:	bfac      	ite	ge
 80126e2:	f8c8 3000 	strge.w	r3, [r8]
 80126e6:	f8c8 2000 	strlt.w	r2, [r8]
 80126ea:	4baf      	ldr	r3, [pc, #700]	; (80129a8 <_dtoa_r+0x320>)
 80126ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80126f0:	ea33 0308 	bics.w	r3, r3, r8
 80126f4:	d114      	bne.n	8012720 <_dtoa_r+0x98>
 80126f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80126f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80126fc:	6013      	str	r3, [r2, #0]
 80126fe:	9b00      	ldr	r3, [sp, #0]
 8012700:	b923      	cbnz	r3, 801270c <_dtoa_r+0x84>
 8012702:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012706:	2800      	cmp	r0, #0
 8012708:	f000 8542 	beq.w	8013190 <_dtoa_r+0xb08>
 801270c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801270e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80129bc <_dtoa_r+0x334>
 8012712:	2b00      	cmp	r3, #0
 8012714:	f000 8544 	beq.w	80131a0 <_dtoa_r+0xb18>
 8012718:	f10b 0303 	add.w	r3, fp, #3
 801271c:	f000 bd3e 	b.w	801319c <_dtoa_r+0xb14>
 8012720:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012724:	2200      	movs	r2, #0
 8012726:	2300      	movs	r3, #0
 8012728:	4630      	mov	r0, r6
 801272a:	4639      	mov	r1, r7
 801272c:	f7ee f9f4 	bl	8000b18 <__aeabi_dcmpeq>
 8012730:	4681      	mov	r9, r0
 8012732:	b168      	cbz	r0, 8012750 <_dtoa_r+0xc8>
 8012734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012736:	2301      	movs	r3, #1
 8012738:	6013      	str	r3, [r2, #0]
 801273a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801273c:	2b00      	cmp	r3, #0
 801273e:	f000 8524 	beq.w	801318a <_dtoa_r+0xb02>
 8012742:	4b9a      	ldr	r3, [pc, #616]	; (80129ac <_dtoa_r+0x324>)
 8012744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012746:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801274a:	6013      	str	r3, [r2, #0]
 801274c:	f000 bd28 	b.w	80131a0 <_dtoa_r+0xb18>
 8012750:	aa14      	add	r2, sp, #80	; 0x50
 8012752:	a915      	add	r1, sp, #84	; 0x54
 8012754:	ec47 6b10 	vmov	d0, r6, r7
 8012758:	4620      	mov	r0, r4
 801275a:	f001 f9d8 	bl	8013b0e <__d2b>
 801275e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012762:	9004      	str	r0, [sp, #16]
 8012764:	2d00      	cmp	r5, #0
 8012766:	d07c      	beq.n	8012862 <_dtoa_r+0x1da>
 8012768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801276c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012770:	46b2      	mov	sl, r6
 8012772:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012776:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801277a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801277e:	2200      	movs	r2, #0
 8012780:	4b8b      	ldr	r3, [pc, #556]	; (80129b0 <_dtoa_r+0x328>)
 8012782:	4650      	mov	r0, sl
 8012784:	4659      	mov	r1, fp
 8012786:	f7ed fda7 	bl	80002d8 <__aeabi_dsub>
 801278a:	a381      	add	r3, pc, #516	; (adr r3, 8012990 <_dtoa_r+0x308>)
 801278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012790:	f7ed ff5a 	bl	8000648 <__aeabi_dmul>
 8012794:	a380      	add	r3, pc, #512	; (adr r3, 8012998 <_dtoa_r+0x310>)
 8012796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279a:	f7ed fd9f 	bl	80002dc <__adddf3>
 801279e:	4606      	mov	r6, r0
 80127a0:	4628      	mov	r0, r5
 80127a2:	460f      	mov	r7, r1
 80127a4:	f7ed fee6 	bl	8000574 <__aeabi_i2d>
 80127a8:	a37d      	add	r3, pc, #500	; (adr r3, 80129a0 <_dtoa_r+0x318>)
 80127aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ae:	f7ed ff4b 	bl	8000648 <__aeabi_dmul>
 80127b2:	4602      	mov	r2, r0
 80127b4:	460b      	mov	r3, r1
 80127b6:	4630      	mov	r0, r6
 80127b8:	4639      	mov	r1, r7
 80127ba:	f7ed fd8f 	bl	80002dc <__adddf3>
 80127be:	4606      	mov	r6, r0
 80127c0:	460f      	mov	r7, r1
 80127c2:	f7ee f9f1 	bl	8000ba8 <__aeabi_d2iz>
 80127c6:	2200      	movs	r2, #0
 80127c8:	4682      	mov	sl, r0
 80127ca:	2300      	movs	r3, #0
 80127cc:	4630      	mov	r0, r6
 80127ce:	4639      	mov	r1, r7
 80127d0:	f7ee f9ac 	bl	8000b2c <__aeabi_dcmplt>
 80127d4:	b148      	cbz	r0, 80127ea <_dtoa_r+0x162>
 80127d6:	4650      	mov	r0, sl
 80127d8:	f7ed fecc 	bl	8000574 <__aeabi_i2d>
 80127dc:	4632      	mov	r2, r6
 80127de:	463b      	mov	r3, r7
 80127e0:	f7ee f99a 	bl	8000b18 <__aeabi_dcmpeq>
 80127e4:	b908      	cbnz	r0, 80127ea <_dtoa_r+0x162>
 80127e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80127ea:	f1ba 0f16 	cmp.w	sl, #22
 80127ee:	d859      	bhi.n	80128a4 <_dtoa_r+0x21c>
 80127f0:	4970      	ldr	r1, [pc, #448]	; (80129b4 <_dtoa_r+0x32c>)
 80127f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80127f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127fe:	f7ee f9b3 	bl	8000b68 <__aeabi_dcmpgt>
 8012802:	2800      	cmp	r0, #0
 8012804:	d050      	beq.n	80128a8 <_dtoa_r+0x220>
 8012806:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801280a:	2300      	movs	r3, #0
 801280c:	930f      	str	r3, [sp, #60]	; 0x3c
 801280e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012810:	1b5d      	subs	r5, r3, r5
 8012812:	f1b5 0801 	subs.w	r8, r5, #1
 8012816:	bf49      	itett	mi
 8012818:	f1c5 0301 	rsbmi	r3, r5, #1
 801281c:	2300      	movpl	r3, #0
 801281e:	9305      	strmi	r3, [sp, #20]
 8012820:	f04f 0800 	movmi.w	r8, #0
 8012824:	bf58      	it	pl
 8012826:	9305      	strpl	r3, [sp, #20]
 8012828:	f1ba 0f00 	cmp.w	sl, #0
 801282c:	db3e      	blt.n	80128ac <_dtoa_r+0x224>
 801282e:	2300      	movs	r3, #0
 8012830:	44d0      	add	r8, sl
 8012832:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012836:	9307      	str	r3, [sp, #28]
 8012838:	9b06      	ldr	r3, [sp, #24]
 801283a:	2b09      	cmp	r3, #9
 801283c:	f200 8090 	bhi.w	8012960 <_dtoa_r+0x2d8>
 8012840:	2b05      	cmp	r3, #5
 8012842:	bfc4      	itt	gt
 8012844:	3b04      	subgt	r3, #4
 8012846:	9306      	strgt	r3, [sp, #24]
 8012848:	9b06      	ldr	r3, [sp, #24]
 801284a:	f1a3 0302 	sub.w	r3, r3, #2
 801284e:	bfcc      	ite	gt
 8012850:	2500      	movgt	r5, #0
 8012852:	2501      	movle	r5, #1
 8012854:	2b03      	cmp	r3, #3
 8012856:	f200 808f 	bhi.w	8012978 <_dtoa_r+0x2f0>
 801285a:	e8df f003 	tbb	[pc, r3]
 801285e:	7f7d      	.short	0x7f7d
 8012860:	7131      	.short	0x7131
 8012862:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012866:	441d      	add	r5, r3
 8012868:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801286c:	2820      	cmp	r0, #32
 801286e:	dd13      	ble.n	8012898 <_dtoa_r+0x210>
 8012870:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012874:	9b00      	ldr	r3, [sp, #0]
 8012876:	fa08 f800 	lsl.w	r8, r8, r0
 801287a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801287e:	fa23 f000 	lsr.w	r0, r3, r0
 8012882:	ea48 0000 	orr.w	r0, r8, r0
 8012886:	f7ed fe65 	bl	8000554 <__aeabi_ui2d>
 801288a:	2301      	movs	r3, #1
 801288c:	4682      	mov	sl, r0
 801288e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012892:	3d01      	subs	r5, #1
 8012894:	9313      	str	r3, [sp, #76]	; 0x4c
 8012896:	e772      	b.n	801277e <_dtoa_r+0xf6>
 8012898:	9b00      	ldr	r3, [sp, #0]
 801289a:	f1c0 0020 	rsb	r0, r0, #32
 801289e:	fa03 f000 	lsl.w	r0, r3, r0
 80128a2:	e7f0      	b.n	8012886 <_dtoa_r+0x1fe>
 80128a4:	2301      	movs	r3, #1
 80128a6:	e7b1      	b.n	801280c <_dtoa_r+0x184>
 80128a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80128aa:	e7b0      	b.n	801280e <_dtoa_r+0x186>
 80128ac:	9b05      	ldr	r3, [sp, #20]
 80128ae:	eba3 030a 	sub.w	r3, r3, sl
 80128b2:	9305      	str	r3, [sp, #20]
 80128b4:	f1ca 0300 	rsb	r3, sl, #0
 80128b8:	9307      	str	r3, [sp, #28]
 80128ba:	2300      	movs	r3, #0
 80128bc:	930e      	str	r3, [sp, #56]	; 0x38
 80128be:	e7bb      	b.n	8012838 <_dtoa_r+0x1b0>
 80128c0:	2301      	movs	r3, #1
 80128c2:	930a      	str	r3, [sp, #40]	; 0x28
 80128c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	dd59      	ble.n	801297e <_dtoa_r+0x2f6>
 80128ca:	9302      	str	r3, [sp, #8]
 80128cc:	4699      	mov	r9, r3
 80128ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80128d0:	2200      	movs	r2, #0
 80128d2:	6072      	str	r2, [r6, #4]
 80128d4:	2204      	movs	r2, #4
 80128d6:	f102 0014 	add.w	r0, r2, #20
 80128da:	4298      	cmp	r0, r3
 80128dc:	6871      	ldr	r1, [r6, #4]
 80128de:	d953      	bls.n	8012988 <_dtoa_r+0x300>
 80128e0:	4620      	mov	r0, r4
 80128e2:	f000 fe88 	bl	80135f6 <_Balloc>
 80128e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128e8:	6030      	str	r0, [r6, #0]
 80128ea:	f1b9 0f0e 	cmp.w	r9, #14
 80128ee:	f8d3 b000 	ldr.w	fp, [r3]
 80128f2:	f200 80e6 	bhi.w	8012ac2 <_dtoa_r+0x43a>
 80128f6:	2d00      	cmp	r5, #0
 80128f8:	f000 80e3 	beq.w	8012ac2 <_dtoa_r+0x43a>
 80128fc:	ed9d 7b00 	vldr	d7, [sp]
 8012900:	f1ba 0f00 	cmp.w	sl, #0
 8012904:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012908:	dd74      	ble.n	80129f4 <_dtoa_r+0x36c>
 801290a:	4a2a      	ldr	r2, [pc, #168]	; (80129b4 <_dtoa_r+0x32c>)
 801290c:	f00a 030f 	and.w	r3, sl, #15
 8012910:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012914:	ed93 7b00 	vldr	d7, [r3]
 8012918:	ea4f 162a 	mov.w	r6, sl, asr #4
 801291c:	06f0      	lsls	r0, r6, #27
 801291e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012922:	d565      	bpl.n	80129f0 <_dtoa_r+0x368>
 8012924:	4b24      	ldr	r3, [pc, #144]	; (80129b8 <_dtoa_r+0x330>)
 8012926:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801292a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801292e:	f7ed ffb5 	bl	800089c <__aeabi_ddiv>
 8012932:	e9cd 0100 	strd	r0, r1, [sp]
 8012936:	f006 060f 	and.w	r6, r6, #15
 801293a:	2503      	movs	r5, #3
 801293c:	4f1e      	ldr	r7, [pc, #120]	; (80129b8 <_dtoa_r+0x330>)
 801293e:	e04c      	b.n	80129da <_dtoa_r+0x352>
 8012940:	2301      	movs	r3, #1
 8012942:	930a      	str	r3, [sp, #40]	; 0x28
 8012944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012946:	4453      	add	r3, sl
 8012948:	f103 0901 	add.w	r9, r3, #1
 801294c:	9302      	str	r3, [sp, #8]
 801294e:	464b      	mov	r3, r9
 8012950:	2b01      	cmp	r3, #1
 8012952:	bfb8      	it	lt
 8012954:	2301      	movlt	r3, #1
 8012956:	e7ba      	b.n	80128ce <_dtoa_r+0x246>
 8012958:	2300      	movs	r3, #0
 801295a:	e7b2      	b.n	80128c2 <_dtoa_r+0x23a>
 801295c:	2300      	movs	r3, #0
 801295e:	e7f0      	b.n	8012942 <_dtoa_r+0x2ba>
 8012960:	2501      	movs	r5, #1
 8012962:	2300      	movs	r3, #0
 8012964:	9306      	str	r3, [sp, #24]
 8012966:	950a      	str	r5, [sp, #40]	; 0x28
 8012968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801296c:	9302      	str	r3, [sp, #8]
 801296e:	4699      	mov	r9, r3
 8012970:	2200      	movs	r2, #0
 8012972:	2312      	movs	r3, #18
 8012974:	920b      	str	r2, [sp, #44]	; 0x2c
 8012976:	e7aa      	b.n	80128ce <_dtoa_r+0x246>
 8012978:	2301      	movs	r3, #1
 801297a:	930a      	str	r3, [sp, #40]	; 0x28
 801297c:	e7f4      	b.n	8012968 <_dtoa_r+0x2e0>
 801297e:	2301      	movs	r3, #1
 8012980:	9302      	str	r3, [sp, #8]
 8012982:	4699      	mov	r9, r3
 8012984:	461a      	mov	r2, r3
 8012986:	e7f5      	b.n	8012974 <_dtoa_r+0x2ec>
 8012988:	3101      	adds	r1, #1
 801298a:	6071      	str	r1, [r6, #4]
 801298c:	0052      	lsls	r2, r2, #1
 801298e:	e7a2      	b.n	80128d6 <_dtoa_r+0x24e>
 8012990:	636f4361 	.word	0x636f4361
 8012994:	3fd287a7 	.word	0x3fd287a7
 8012998:	8b60c8b3 	.word	0x8b60c8b3
 801299c:	3fc68a28 	.word	0x3fc68a28
 80129a0:	509f79fb 	.word	0x509f79fb
 80129a4:	3fd34413 	.word	0x3fd34413
 80129a8:	7ff00000 	.word	0x7ff00000
 80129ac:	08016f05 	.word	0x08016f05
 80129b0:	3ff80000 	.word	0x3ff80000
 80129b4:	08016d10 	.word	0x08016d10
 80129b8:	08016ce8 	.word	0x08016ce8
 80129bc:	08016c7f 	.word	0x08016c7f
 80129c0:	07f1      	lsls	r1, r6, #31
 80129c2:	d508      	bpl.n	80129d6 <_dtoa_r+0x34e>
 80129c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80129c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129cc:	f7ed fe3c 	bl	8000648 <__aeabi_dmul>
 80129d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80129d4:	3501      	adds	r5, #1
 80129d6:	1076      	asrs	r6, r6, #1
 80129d8:	3708      	adds	r7, #8
 80129da:	2e00      	cmp	r6, #0
 80129dc:	d1f0      	bne.n	80129c0 <_dtoa_r+0x338>
 80129de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80129e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129e6:	f7ed ff59 	bl	800089c <__aeabi_ddiv>
 80129ea:	e9cd 0100 	strd	r0, r1, [sp]
 80129ee:	e01a      	b.n	8012a26 <_dtoa_r+0x39e>
 80129f0:	2502      	movs	r5, #2
 80129f2:	e7a3      	b.n	801293c <_dtoa_r+0x2b4>
 80129f4:	f000 80a0 	beq.w	8012b38 <_dtoa_r+0x4b0>
 80129f8:	f1ca 0600 	rsb	r6, sl, #0
 80129fc:	4b9f      	ldr	r3, [pc, #636]	; (8012c7c <_dtoa_r+0x5f4>)
 80129fe:	4fa0      	ldr	r7, [pc, #640]	; (8012c80 <_dtoa_r+0x5f8>)
 8012a00:	f006 020f 	and.w	r2, r6, #15
 8012a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a10:	f7ed fe1a 	bl	8000648 <__aeabi_dmul>
 8012a14:	e9cd 0100 	strd	r0, r1, [sp]
 8012a18:	1136      	asrs	r6, r6, #4
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	2502      	movs	r5, #2
 8012a1e:	2e00      	cmp	r6, #0
 8012a20:	d17f      	bne.n	8012b22 <_dtoa_r+0x49a>
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d1e1      	bne.n	80129ea <_dtoa_r+0x362>
 8012a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f000 8087 	beq.w	8012b3c <_dtoa_r+0x4b4>
 8012a2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012a32:	2200      	movs	r2, #0
 8012a34:	4b93      	ldr	r3, [pc, #588]	; (8012c84 <_dtoa_r+0x5fc>)
 8012a36:	4630      	mov	r0, r6
 8012a38:	4639      	mov	r1, r7
 8012a3a:	f7ee f877 	bl	8000b2c <__aeabi_dcmplt>
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	d07c      	beq.n	8012b3c <_dtoa_r+0x4b4>
 8012a42:	f1b9 0f00 	cmp.w	r9, #0
 8012a46:	d079      	beq.n	8012b3c <_dtoa_r+0x4b4>
 8012a48:	9b02      	ldr	r3, [sp, #8]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	dd35      	ble.n	8012aba <_dtoa_r+0x432>
 8012a4e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8012a52:	9308      	str	r3, [sp, #32]
 8012a54:	4639      	mov	r1, r7
 8012a56:	2200      	movs	r2, #0
 8012a58:	4b8b      	ldr	r3, [pc, #556]	; (8012c88 <_dtoa_r+0x600>)
 8012a5a:	4630      	mov	r0, r6
 8012a5c:	f7ed fdf4 	bl	8000648 <__aeabi_dmul>
 8012a60:	e9cd 0100 	strd	r0, r1, [sp]
 8012a64:	9f02      	ldr	r7, [sp, #8]
 8012a66:	3501      	adds	r5, #1
 8012a68:	4628      	mov	r0, r5
 8012a6a:	f7ed fd83 	bl	8000574 <__aeabi_i2d>
 8012a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a72:	f7ed fde9 	bl	8000648 <__aeabi_dmul>
 8012a76:	2200      	movs	r2, #0
 8012a78:	4b84      	ldr	r3, [pc, #528]	; (8012c8c <_dtoa_r+0x604>)
 8012a7a:	f7ed fc2f 	bl	80002dc <__adddf3>
 8012a7e:	4605      	mov	r5, r0
 8012a80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012a84:	2f00      	cmp	r7, #0
 8012a86:	d15d      	bne.n	8012b44 <_dtoa_r+0x4bc>
 8012a88:	2200      	movs	r2, #0
 8012a8a:	4b81      	ldr	r3, [pc, #516]	; (8012c90 <_dtoa_r+0x608>)
 8012a8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a90:	f7ed fc22 	bl	80002d8 <__aeabi_dsub>
 8012a94:	462a      	mov	r2, r5
 8012a96:	4633      	mov	r3, r6
 8012a98:	e9cd 0100 	strd	r0, r1, [sp]
 8012a9c:	f7ee f864 	bl	8000b68 <__aeabi_dcmpgt>
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	f040 8288 	bne.w	8012fb6 <_dtoa_r+0x92e>
 8012aa6:	462a      	mov	r2, r5
 8012aa8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ab0:	f7ee f83c 	bl	8000b2c <__aeabi_dcmplt>
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	f040 827c 	bne.w	8012fb2 <_dtoa_r+0x92a>
 8012aba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012abe:	e9cd 2300 	strd	r2, r3, [sp]
 8012ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	f2c0 8150 	blt.w	8012d6a <_dtoa_r+0x6e2>
 8012aca:	f1ba 0f0e 	cmp.w	sl, #14
 8012ace:	f300 814c 	bgt.w	8012d6a <_dtoa_r+0x6e2>
 8012ad2:	4b6a      	ldr	r3, [pc, #424]	; (8012c7c <_dtoa_r+0x5f4>)
 8012ad4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012ad8:	ed93 7b00 	vldr	d7, [r3]
 8012adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012ae4:	f280 80d8 	bge.w	8012c98 <_dtoa_r+0x610>
 8012ae8:	f1b9 0f00 	cmp.w	r9, #0
 8012aec:	f300 80d4 	bgt.w	8012c98 <_dtoa_r+0x610>
 8012af0:	f040 825e 	bne.w	8012fb0 <_dtoa_r+0x928>
 8012af4:	2200      	movs	r2, #0
 8012af6:	4b66      	ldr	r3, [pc, #408]	; (8012c90 <_dtoa_r+0x608>)
 8012af8:	ec51 0b17 	vmov	r0, r1, d7
 8012afc:	f7ed fda4 	bl	8000648 <__aeabi_dmul>
 8012b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b04:	f7ee f826 	bl	8000b54 <__aeabi_dcmpge>
 8012b08:	464f      	mov	r7, r9
 8012b0a:	464e      	mov	r6, r9
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	f040 8234 	bne.w	8012f7a <_dtoa_r+0x8f2>
 8012b12:	2331      	movs	r3, #49	; 0x31
 8012b14:	f10b 0501 	add.w	r5, fp, #1
 8012b18:	f88b 3000 	strb.w	r3, [fp]
 8012b1c:	f10a 0a01 	add.w	sl, sl, #1
 8012b20:	e22f      	b.n	8012f82 <_dtoa_r+0x8fa>
 8012b22:	07f2      	lsls	r2, r6, #31
 8012b24:	d505      	bpl.n	8012b32 <_dtoa_r+0x4aa>
 8012b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b2a:	f7ed fd8d 	bl	8000648 <__aeabi_dmul>
 8012b2e:	3501      	adds	r5, #1
 8012b30:	2301      	movs	r3, #1
 8012b32:	1076      	asrs	r6, r6, #1
 8012b34:	3708      	adds	r7, #8
 8012b36:	e772      	b.n	8012a1e <_dtoa_r+0x396>
 8012b38:	2502      	movs	r5, #2
 8012b3a:	e774      	b.n	8012a26 <_dtoa_r+0x39e>
 8012b3c:	f8cd a020 	str.w	sl, [sp, #32]
 8012b40:	464f      	mov	r7, r9
 8012b42:	e791      	b.n	8012a68 <_dtoa_r+0x3e0>
 8012b44:	4b4d      	ldr	r3, [pc, #308]	; (8012c7c <_dtoa_r+0x5f4>)
 8012b46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012b4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d047      	beq.n	8012be4 <_dtoa_r+0x55c>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	2000      	movs	r0, #0
 8012b5a:	494e      	ldr	r1, [pc, #312]	; (8012c94 <_dtoa_r+0x60c>)
 8012b5c:	f7ed fe9e 	bl	800089c <__aeabi_ddiv>
 8012b60:	462a      	mov	r2, r5
 8012b62:	4633      	mov	r3, r6
 8012b64:	f7ed fbb8 	bl	80002d8 <__aeabi_dsub>
 8012b68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012b6c:	465d      	mov	r5, fp
 8012b6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b72:	f7ee f819 	bl	8000ba8 <__aeabi_d2iz>
 8012b76:	4606      	mov	r6, r0
 8012b78:	f7ed fcfc 	bl	8000574 <__aeabi_i2d>
 8012b7c:	4602      	mov	r2, r0
 8012b7e:	460b      	mov	r3, r1
 8012b80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b84:	f7ed fba8 	bl	80002d8 <__aeabi_dsub>
 8012b88:	3630      	adds	r6, #48	; 0x30
 8012b8a:	f805 6b01 	strb.w	r6, [r5], #1
 8012b8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012b92:	e9cd 0100 	strd	r0, r1, [sp]
 8012b96:	f7ed ffc9 	bl	8000b2c <__aeabi_dcmplt>
 8012b9a:	2800      	cmp	r0, #0
 8012b9c:	d163      	bne.n	8012c66 <_dtoa_r+0x5de>
 8012b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ba2:	2000      	movs	r0, #0
 8012ba4:	4937      	ldr	r1, [pc, #220]	; (8012c84 <_dtoa_r+0x5fc>)
 8012ba6:	f7ed fb97 	bl	80002d8 <__aeabi_dsub>
 8012baa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012bae:	f7ed ffbd 	bl	8000b2c <__aeabi_dcmplt>
 8012bb2:	2800      	cmp	r0, #0
 8012bb4:	f040 80b7 	bne.w	8012d26 <_dtoa_r+0x69e>
 8012bb8:	eba5 030b 	sub.w	r3, r5, fp
 8012bbc:	429f      	cmp	r7, r3
 8012bbe:	f77f af7c 	ble.w	8012aba <_dtoa_r+0x432>
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	4b30      	ldr	r3, [pc, #192]	; (8012c88 <_dtoa_r+0x600>)
 8012bc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012bca:	f7ed fd3d 	bl	8000648 <__aeabi_dmul>
 8012bce:	2200      	movs	r2, #0
 8012bd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012bd4:	4b2c      	ldr	r3, [pc, #176]	; (8012c88 <_dtoa_r+0x600>)
 8012bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bda:	f7ed fd35 	bl	8000648 <__aeabi_dmul>
 8012bde:	e9cd 0100 	strd	r0, r1, [sp]
 8012be2:	e7c4      	b.n	8012b6e <_dtoa_r+0x4e6>
 8012be4:	462a      	mov	r2, r5
 8012be6:	4633      	mov	r3, r6
 8012be8:	f7ed fd2e 	bl	8000648 <__aeabi_dmul>
 8012bec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012bf0:	eb0b 0507 	add.w	r5, fp, r7
 8012bf4:	465e      	mov	r6, fp
 8012bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bfa:	f7ed ffd5 	bl	8000ba8 <__aeabi_d2iz>
 8012bfe:	4607      	mov	r7, r0
 8012c00:	f7ed fcb8 	bl	8000574 <__aeabi_i2d>
 8012c04:	3730      	adds	r7, #48	; 0x30
 8012c06:	4602      	mov	r2, r0
 8012c08:	460b      	mov	r3, r1
 8012c0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c0e:	f7ed fb63 	bl	80002d8 <__aeabi_dsub>
 8012c12:	f806 7b01 	strb.w	r7, [r6], #1
 8012c16:	42ae      	cmp	r6, r5
 8012c18:	e9cd 0100 	strd	r0, r1, [sp]
 8012c1c:	f04f 0200 	mov.w	r2, #0
 8012c20:	d126      	bne.n	8012c70 <_dtoa_r+0x5e8>
 8012c22:	4b1c      	ldr	r3, [pc, #112]	; (8012c94 <_dtoa_r+0x60c>)
 8012c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012c28:	f7ed fb58 	bl	80002dc <__adddf3>
 8012c2c:	4602      	mov	r2, r0
 8012c2e:	460b      	mov	r3, r1
 8012c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c34:	f7ed ff98 	bl	8000b68 <__aeabi_dcmpgt>
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	d174      	bne.n	8012d26 <_dtoa_r+0x69e>
 8012c3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012c40:	2000      	movs	r0, #0
 8012c42:	4914      	ldr	r1, [pc, #80]	; (8012c94 <_dtoa_r+0x60c>)
 8012c44:	f7ed fb48 	bl	80002d8 <__aeabi_dsub>
 8012c48:	4602      	mov	r2, r0
 8012c4a:	460b      	mov	r3, r1
 8012c4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c50:	f7ed ff6c 	bl	8000b2c <__aeabi_dcmplt>
 8012c54:	2800      	cmp	r0, #0
 8012c56:	f43f af30 	beq.w	8012aba <_dtoa_r+0x432>
 8012c5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012c5e:	2b30      	cmp	r3, #48	; 0x30
 8012c60:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012c64:	d002      	beq.n	8012c6c <_dtoa_r+0x5e4>
 8012c66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012c6a:	e04a      	b.n	8012d02 <_dtoa_r+0x67a>
 8012c6c:	4615      	mov	r5, r2
 8012c6e:	e7f4      	b.n	8012c5a <_dtoa_r+0x5d2>
 8012c70:	4b05      	ldr	r3, [pc, #20]	; (8012c88 <_dtoa_r+0x600>)
 8012c72:	f7ed fce9 	bl	8000648 <__aeabi_dmul>
 8012c76:	e9cd 0100 	strd	r0, r1, [sp]
 8012c7a:	e7bc      	b.n	8012bf6 <_dtoa_r+0x56e>
 8012c7c:	08016d10 	.word	0x08016d10
 8012c80:	08016ce8 	.word	0x08016ce8
 8012c84:	3ff00000 	.word	0x3ff00000
 8012c88:	40240000 	.word	0x40240000
 8012c8c:	401c0000 	.word	0x401c0000
 8012c90:	40140000 	.word	0x40140000
 8012c94:	3fe00000 	.word	0x3fe00000
 8012c98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012c9c:	465d      	mov	r5, fp
 8012c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	4639      	mov	r1, r7
 8012ca6:	f7ed fdf9 	bl	800089c <__aeabi_ddiv>
 8012caa:	f7ed ff7d 	bl	8000ba8 <__aeabi_d2iz>
 8012cae:	4680      	mov	r8, r0
 8012cb0:	f7ed fc60 	bl	8000574 <__aeabi_i2d>
 8012cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cb8:	f7ed fcc6 	bl	8000648 <__aeabi_dmul>
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	460b      	mov	r3, r1
 8012cc0:	4630      	mov	r0, r6
 8012cc2:	4639      	mov	r1, r7
 8012cc4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012cc8:	f7ed fb06 	bl	80002d8 <__aeabi_dsub>
 8012ccc:	f805 6b01 	strb.w	r6, [r5], #1
 8012cd0:	eba5 060b 	sub.w	r6, r5, fp
 8012cd4:	45b1      	cmp	r9, r6
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	460b      	mov	r3, r1
 8012cda:	d139      	bne.n	8012d50 <_dtoa_r+0x6c8>
 8012cdc:	f7ed fafe 	bl	80002dc <__adddf3>
 8012ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ce4:	4606      	mov	r6, r0
 8012ce6:	460f      	mov	r7, r1
 8012ce8:	f7ed ff3e 	bl	8000b68 <__aeabi_dcmpgt>
 8012cec:	b9c8      	cbnz	r0, 8012d22 <_dtoa_r+0x69a>
 8012cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	4639      	mov	r1, r7
 8012cf6:	f7ed ff0f 	bl	8000b18 <__aeabi_dcmpeq>
 8012cfa:	b110      	cbz	r0, 8012d02 <_dtoa_r+0x67a>
 8012cfc:	f018 0f01 	tst.w	r8, #1
 8012d00:	d10f      	bne.n	8012d22 <_dtoa_r+0x69a>
 8012d02:	9904      	ldr	r1, [sp, #16]
 8012d04:	4620      	mov	r0, r4
 8012d06:	f000 fcaa 	bl	801365e <_Bfree>
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012d0e:	702b      	strb	r3, [r5, #0]
 8012d10:	f10a 0301 	add.w	r3, sl, #1
 8012d14:	6013      	str	r3, [r2, #0]
 8012d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	f000 8241 	beq.w	80131a0 <_dtoa_r+0xb18>
 8012d1e:	601d      	str	r5, [r3, #0]
 8012d20:	e23e      	b.n	80131a0 <_dtoa_r+0xb18>
 8012d22:	f8cd a020 	str.w	sl, [sp, #32]
 8012d26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012d2a:	2a39      	cmp	r2, #57	; 0x39
 8012d2c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8012d30:	d108      	bne.n	8012d44 <_dtoa_r+0x6bc>
 8012d32:	459b      	cmp	fp, r3
 8012d34:	d10a      	bne.n	8012d4c <_dtoa_r+0x6c4>
 8012d36:	9b08      	ldr	r3, [sp, #32]
 8012d38:	3301      	adds	r3, #1
 8012d3a:	9308      	str	r3, [sp, #32]
 8012d3c:	2330      	movs	r3, #48	; 0x30
 8012d3e:	f88b 3000 	strb.w	r3, [fp]
 8012d42:	465b      	mov	r3, fp
 8012d44:	781a      	ldrb	r2, [r3, #0]
 8012d46:	3201      	adds	r2, #1
 8012d48:	701a      	strb	r2, [r3, #0]
 8012d4a:	e78c      	b.n	8012c66 <_dtoa_r+0x5de>
 8012d4c:	461d      	mov	r5, r3
 8012d4e:	e7ea      	b.n	8012d26 <_dtoa_r+0x69e>
 8012d50:	2200      	movs	r2, #0
 8012d52:	4b9b      	ldr	r3, [pc, #620]	; (8012fc0 <_dtoa_r+0x938>)
 8012d54:	f7ed fc78 	bl	8000648 <__aeabi_dmul>
 8012d58:	2200      	movs	r2, #0
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	460f      	mov	r7, r1
 8012d60:	f7ed feda 	bl	8000b18 <__aeabi_dcmpeq>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d09a      	beq.n	8012c9e <_dtoa_r+0x616>
 8012d68:	e7cb      	b.n	8012d02 <_dtoa_r+0x67a>
 8012d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d6c:	2a00      	cmp	r2, #0
 8012d6e:	f000 808b 	beq.w	8012e88 <_dtoa_r+0x800>
 8012d72:	9a06      	ldr	r2, [sp, #24]
 8012d74:	2a01      	cmp	r2, #1
 8012d76:	dc6e      	bgt.n	8012e56 <_dtoa_r+0x7ce>
 8012d78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012d7a:	2a00      	cmp	r2, #0
 8012d7c:	d067      	beq.n	8012e4e <_dtoa_r+0x7c6>
 8012d7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012d82:	9f07      	ldr	r7, [sp, #28]
 8012d84:	9d05      	ldr	r5, [sp, #20]
 8012d86:	9a05      	ldr	r2, [sp, #20]
 8012d88:	2101      	movs	r1, #1
 8012d8a:	441a      	add	r2, r3
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	9205      	str	r2, [sp, #20]
 8012d90:	4498      	add	r8, r3
 8012d92:	f000 fd04 	bl	801379e <__i2b>
 8012d96:	4606      	mov	r6, r0
 8012d98:	2d00      	cmp	r5, #0
 8012d9a:	dd0c      	ble.n	8012db6 <_dtoa_r+0x72e>
 8012d9c:	f1b8 0f00 	cmp.w	r8, #0
 8012da0:	dd09      	ble.n	8012db6 <_dtoa_r+0x72e>
 8012da2:	4545      	cmp	r5, r8
 8012da4:	9a05      	ldr	r2, [sp, #20]
 8012da6:	462b      	mov	r3, r5
 8012da8:	bfa8      	it	ge
 8012daa:	4643      	movge	r3, r8
 8012dac:	1ad2      	subs	r2, r2, r3
 8012dae:	9205      	str	r2, [sp, #20]
 8012db0:	1aed      	subs	r5, r5, r3
 8012db2:	eba8 0803 	sub.w	r8, r8, r3
 8012db6:	9b07      	ldr	r3, [sp, #28]
 8012db8:	b1eb      	cbz	r3, 8012df6 <_dtoa_r+0x76e>
 8012dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d067      	beq.n	8012e90 <_dtoa_r+0x808>
 8012dc0:	b18f      	cbz	r7, 8012de6 <_dtoa_r+0x75e>
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	463a      	mov	r2, r7
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f000 fd88 	bl	80138dc <__pow5mult>
 8012dcc:	9a04      	ldr	r2, [sp, #16]
 8012dce:	4601      	mov	r1, r0
 8012dd0:	4606      	mov	r6, r0
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f000 fcec 	bl	80137b0 <__multiply>
 8012dd8:	9904      	ldr	r1, [sp, #16]
 8012dda:	9008      	str	r0, [sp, #32]
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f000 fc3e 	bl	801365e <_Bfree>
 8012de2:	9b08      	ldr	r3, [sp, #32]
 8012de4:	9304      	str	r3, [sp, #16]
 8012de6:	9b07      	ldr	r3, [sp, #28]
 8012de8:	1bda      	subs	r2, r3, r7
 8012dea:	d004      	beq.n	8012df6 <_dtoa_r+0x76e>
 8012dec:	9904      	ldr	r1, [sp, #16]
 8012dee:	4620      	mov	r0, r4
 8012df0:	f000 fd74 	bl	80138dc <__pow5mult>
 8012df4:	9004      	str	r0, [sp, #16]
 8012df6:	2101      	movs	r1, #1
 8012df8:	4620      	mov	r0, r4
 8012dfa:	f000 fcd0 	bl	801379e <__i2b>
 8012dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e00:	4607      	mov	r7, r0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f000 81d0 	beq.w	80131a8 <_dtoa_r+0xb20>
 8012e08:	461a      	mov	r2, r3
 8012e0a:	4601      	mov	r1, r0
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f000 fd65 	bl	80138dc <__pow5mult>
 8012e12:	9b06      	ldr	r3, [sp, #24]
 8012e14:	2b01      	cmp	r3, #1
 8012e16:	4607      	mov	r7, r0
 8012e18:	dc40      	bgt.n	8012e9c <_dtoa_r+0x814>
 8012e1a:	9b00      	ldr	r3, [sp, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d139      	bne.n	8012e94 <_dtoa_r+0x80c>
 8012e20:	9b01      	ldr	r3, [sp, #4]
 8012e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d136      	bne.n	8012e98 <_dtoa_r+0x810>
 8012e2a:	9b01      	ldr	r3, [sp, #4]
 8012e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e30:	0d1b      	lsrs	r3, r3, #20
 8012e32:	051b      	lsls	r3, r3, #20
 8012e34:	b12b      	cbz	r3, 8012e42 <_dtoa_r+0x7ba>
 8012e36:	9b05      	ldr	r3, [sp, #20]
 8012e38:	3301      	adds	r3, #1
 8012e3a:	9305      	str	r3, [sp, #20]
 8012e3c:	f108 0801 	add.w	r8, r8, #1
 8012e40:	2301      	movs	r3, #1
 8012e42:	9307      	str	r3, [sp, #28]
 8012e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d12a      	bne.n	8012ea0 <_dtoa_r+0x818>
 8012e4a:	2001      	movs	r0, #1
 8012e4c:	e030      	b.n	8012eb0 <_dtoa_r+0x828>
 8012e4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012e54:	e795      	b.n	8012d82 <_dtoa_r+0x6fa>
 8012e56:	9b07      	ldr	r3, [sp, #28]
 8012e58:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8012e5c:	42bb      	cmp	r3, r7
 8012e5e:	bfbf      	itttt	lt
 8012e60:	9b07      	ldrlt	r3, [sp, #28]
 8012e62:	9707      	strlt	r7, [sp, #28]
 8012e64:	1afa      	sublt	r2, r7, r3
 8012e66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012e68:	bfbb      	ittet	lt
 8012e6a:	189b      	addlt	r3, r3, r2
 8012e6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012e6e:	1bdf      	subge	r7, r3, r7
 8012e70:	2700      	movlt	r7, #0
 8012e72:	f1b9 0f00 	cmp.w	r9, #0
 8012e76:	bfb5      	itete	lt
 8012e78:	9b05      	ldrlt	r3, [sp, #20]
 8012e7a:	9d05      	ldrge	r5, [sp, #20]
 8012e7c:	eba3 0509 	sublt.w	r5, r3, r9
 8012e80:	464b      	movge	r3, r9
 8012e82:	bfb8      	it	lt
 8012e84:	2300      	movlt	r3, #0
 8012e86:	e77e      	b.n	8012d86 <_dtoa_r+0x6fe>
 8012e88:	9f07      	ldr	r7, [sp, #28]
 8012e8a:	9d05      	ldr	r5, [sp, #20]
 8012e8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012e8e:	e783      	b.n	8012d98 <_dtoa_r+0x710>
 8012e90:	9a07      	ldr	r2, [sp, #28]
 8012e92:	e7ab      	b.n	8012dec <_dtoa_r+0x764>
 8012e94:	2300      	movs	r3, #0
 8012e96:	e7d4      	b.n	8012e42 <_dtoa_r+0x7ba>
 8012e98:	9b00      	ldr	r3, [sp, #0]
 8012e9a:	e7d2      	b.n	8012e42 <_dtoa_r+0x7ba>
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	9307      	str	r3, [sp, #28]
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012ea6:	6918      	ldr	r0, [r3, #16]
 8012ea8:	f000 fc2b 	bl	8013702 <__hi0bits>
 8012eac:	f1c0 0020 	rsb	r0, r0, #32
 8012eb0:	4440      	add	r0, r8
 8012eb2:	f010 001f 	ands.w	r0, r0, #31
 8012eb6:	d047      	beq.n	8012f48 <_dtoa_r+0x8c0>
 8012eb8:	f1c0 0320 	rsb	r3, r0, #32
 8012ebc:	2b04      	cmp	r3, #4
 8012ebe:	dd3b      	ble.n	8012f38 <_dtoa_r+0x8b0>
 8012ec0:	9b05      	ldr	r3, [sp, #20]
 8012ec2:	f1c0 001c 	rsb	r0, r0, #28
 8012ec6:	4403      	add	r3, r0
 8012ec8:	9305      	str	r3, [sp, #20]
 8012eca:	4405      	add	r5, r0
 8012ecc:	4480      	add	r8, r0
 8012ece:	9b05      	ldr	r3, [sp, #20]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	dd05      	ble.n	8012ee0 <_dtoa_r+0x858>
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	9904      	ldr	r1, [sp, #16]
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f000 fd4d 	bl	8013978 <__lshift>
 8012ede:	9004      	str	r0, [sp, #16]
 8012ee0:	f1b8 0f00 	cmp.w	r8, #0
 8012ee4:	dd05      	ble.n	8012ef2 <_dtoa_r+0x86a>
 8012ee6:	4639      	mov	r1, r7
 8012ee8:	4642      	mov	r2, r8
 8012eea:	4620      	mov	r0, r4
 8012eec:	f000 fd44 	bl	8013978 <__lshift>
 8012ef0:	4607      	mov	r7, r0
 8012ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ef4:	b353      	cbz	r3, 8012f4c <_dtoa_r+0x8c4>
 8012ef6:	4639      	mov	r1, r7
 8012ef8:	9804      	ldr	r0, [sp, #16]
 8012efa:	f000 fd91 	bl	8013a20 <__mcmp>
 8012efe:	2800      	cmp	r0, #0
 8012f00:	da24      	bge.n	8012f4c <_dtoa_r+0x8c4>
 8012f02:	2300      	movs	r3, #0
 8012f04:	220a      	movs	r2, #10
 8012f06:	9904      	ldr	r1, [sp, #16]
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f000 fbbf 	bl	801368c <__multadd>
 8012f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f10:	9004      	str	r0, [sp, #16]
 8012f12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	f000 814d 	beq.w	80131b6 <_dtoa_r+0xb2e>
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	4631      	mov	r1, r6
 8012f20:	220a      	movs	r2, #10
 8012f22:	4620      	mov	r0, r4
 8012f24:	f000 fbb2 	bl	801368c <__multadd>
 8012f28:	9b02      	ldr	r3, [sp, #8]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	dc4f      	bgt.n	8012fd0 <_dtoa_r+0x948>
 8012f30:	9b06      	ldr	r3, [sp, #24]
 8012f32:	2b02      	cmp	r3, #2
 8012f34:	dd4c      	ble.n	8012fd0 <_dtoa_r+0x948>
 8012f36:	e011      	b.n	8012f5c <_dtoa_r+0x8d4>
 8012f38:	d0c9      	beq.n	8012ece <_dtoa_r+0x846>
 8012f3a:	9a05      	ldr	r2, [sp, #20]
 8012f3c:	331c      	adds	r3, #28
 8012f3e:	441a      	add	r2, r3
 8012f40:	9205      	str	r2, [sp, #20]
 8012f42:	441d      	add	r5, r3
 8012f44:	4498      	add	r8, r3
 8012f46:	e7c2      	b.n	8012ece <_dtoa_r+0x846>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	e7f6      	b.n	8012f3a <_dtoa_r+0x8b2>
 8012f4c:	f1b9 0f00 	cmp.w	r9, #0
 8012f50:	dc38      	bgt.n	8012fc4 <_dtoa_r+0x93c>
 8012f52:	9b06      	ldr	r3, [sp, #24]
 8012f54:	2b02      	cmp	r3, #2
 8012f56:	dd35      	ble.n	8012fc4 <_dtoa_r+0x93c>
 8012f58:	f8cd 9008 	str.w	r9, [sp, #8]
 8012f5c:	9b02      	ldr	r3, [sp, #8]
 8012f5e:	b963      	cbnz	r3, 8012f7a <_dtoa_r+0x8f2>
 8012f60:	4639      	mov	r1, r7
 8012f62:	2205      	movs	r2, #5
 8012f64:	4620      	mov	r0, r4
 8012f66:	f000 fb91 	bl	801368c <__multadd>
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	4607      	mov	r7, r0
 8012f6e:	9804      	ldr	r0, [sp, #16]
 8012f70:	f000 fd56 	bl	8013a20 <__mcmp>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	f73f adcc 	bgt.w	8012b12 <_dtoa_r+0x48a>
 8012f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f7c:	465d      	mov	r5, fp
 8012f7e:	ea6f 0a03 	mvn.w	sl, r3
 8012f82:	f04f 0900 	mov.w	r9, #0
 8012f86:	4639      	mov	r1, r7
 8012f88:	4620      	mov	r0, r4
 8012f8a:	f000 fb68 	bl	801365e <_Bfree>
 8012f8e:	2e00      	cmp	r6, #0
 8012f90:	f43f aeb7 	beq.w	8012d02 <_dtoa_r+0x67a>
 8012f94:	f1b9 0f00 	cmp.w	r9, #0
 8012f98:	d005      	beq.n	8012fa6 <_dtoa_r+0x91e>
 8012f9a:	45b1      	cmp	r9, r6
 8012f9c:	d003      	beq.n	8012fa6 <_dtoa_r+0x91e>
 8012f9e:	4649      	mov	r1, r9
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	f000 fb5c 	bl	801365e <_Bfree>
 8012fa6:	4631      	mov	r1, r6
 8012fa8:	4620      	mov	r0, r4
 8012faa:	f000 fb58 	bl	801365e <_Bfree>
 8012fae:	e6a8      	b.n	8012d02 <_dtoa_r+0x67a>
 8012fb0:	2700      	movs	r7, #0
 8012fb2:	463e      	mov	r6, r7
 8012fb4:	e7e1      	b.n	8012f7a <_dtoa_r+0x8f2>
 8012fb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012fba:	463e      	mov	r6, r7
 8012fbc:	e5a9      	b.n	8012b12 <_dtoa_r+0x48a>
 8012fbe:	bf00      	nop
 8012fc0:	40240000 	.word	0x40240000
 8012fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fc6:	f8cd 9008 	str.w	r9, [sp, #8]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	f000 80fa 	beq.w	80131c4 <_dtoa_r+0xb3c>
 8012fd0:	2d00      	cmp	r5, #0
 8012fd2:	dd05      	ble.n	8012fe0 <_dtoa_r+0x958>
 8012fd4:	4631      	mov	r1, r6
 8012fd6:	462a      	mov	r2, r5
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f000 fccd 	bl	8013978 <__lshift>
 8012fde:	4606      	mov	r6, r0
 8012fe0:	9b07      	ldr	r3, [sp, #28]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d04c      	beq.n	8013080 <_dtoa_r+0x9f8>
 8012fe6:	6871      	ldr	r1, [r6, #4]
 8012fe8:	4620      	mov	r0, r4
 8012fea:	f000 fb04 	bl	80135f6 <_Balloc>
 8012fee:	6932      	ldr	r2, [r6, #16]
 8012ff0:	3202      	adds	r2, #2
 8012ff2:	4605      	mov	r5, r0
 8012ff4:	0092      	lsls	r2, r2, #2
 8012ff6:	f106 010c 	add.w	r1, r6, #12
 8012ffa:	300c      	adds	r0, #12
 8012ffc:	f000 faf0 	bl	80135e0 <memcpy>
 8013000:	2201      	movs	r2, #1
 8013002:	4629      	mov	r1, r5
 8013004:	4620      	mov	r0, r4
 8013006:	f000 fcb7 	bl	8013978 <__lshift>
 801300a:	9b00      	ldr	r3, [sp, #0]
 801300c:	f8cd b014 	str.w	fp, [sp, #20]
 8013010:	f003 0301 	and.w	r3, r3, #1
 8013014:	46b1      	mov	r9, r6
 8013016:	9307      	str	r3, [sp, #28]
 8013018:	4606      	mov	r6, r0
 801301a:	4639      	mov	r1, r7
 801301c:	9804      	ldr	r0, [sp, #16]
 801301e:	f7ff faa5 	bl	801256c <quorem>
 8013022:	4649      	mov	r1, r9
 8013024:	4605      	mov	r5, r0
 8013026:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801302a:	9804      	ldr	r0, [sp, #16]
 801302c:	f000 fcf8 	bl	8013a20 <__mcmp>
 8013030:	4632      	mov	r2, r6
 8013032:	9000      	str	r0, [sp, #0]
 8013034:	4639      	mov	r1, r7
 8013036:	4620      	mov	r0, r4
 8013038:	f000 fd0c 	bl	8013a54 <__mdiff>
 801303c:	68c3      	ldr	r3, [r0, #12]
 801303e:	4602      	mov	r2, r0
 8013040:	bb03      	cbnz	r3, 8013084 <_dtoa_r+0x9fc>
 8013042:	4601      	mov	r1, r0
 8013044:	9008      	str	r0, [sp, #32]
 8013046:	9804      	ldr	r0, [sp, #16]
 8013048:	f000 fcea 	bl	8013a20 <__mcmp>
 801304c:	9a08      	ldr	r2, [sp, #32]
 801304e:	4603      	mov	r3, r0
 8013050:	4611      	mov	r1, r2
 8013052:	4620      	mov	r0, r4
 8013054:	9308      	str	r3, [sp, #32]
 8013056:	f000 fb02 	bl	801365e <_Bfree>
 801305a:	9b08      	ldr	r3, [sp, #32]
 801305c:	b9a3      	cbnz	r3, 8013088 <_dtoa_r+0xa00>
 801305e:	9a06      	ldr	r2, [sp, #24]
 8013060:	b992      	cbnz	r2, 8013088 <_dtoa_r+0xa00>
 8013062:	9a07      	ldr	r2, [sp, #28]
 8013064:	b982      	cbnz	r2, 8013088 <_dtoa_r+0xa00>
 8013066:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801306a:	d029      	beq.n	80130c0 <_dtoa_r+0xa38>
 801306c:	9b00      	ldr	r3, [sp, #0]
 801306e:	2b00      	cmp	r3, #0
 8013070:	dd01      	ble.n	8013076 <_dtoa_r+0x9ee>
 8013072:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013076:	9b05      	ldr	r3, [sp, #20]
 8013078:	1c5d      	adds	r5, r3, #1
 801307a:	f883 8000 	strb.w	r8, [r3]
 801307e:	e782      	b.n	8012f86 <_dtoa_r+0x8fe>
 8013080:	4630      	mov	r0, r6
 8013082:	e7c2      	b.n	801300a <_dtoa_r+0x982>
 8013084:	2301      	movs	r3, #1
 8013086:	e7e3      	b.n	8013050 <_dtoa_r+0x9c8>
 8013088:	9a00      	ldr	r2, [sp, #0]
 801308a:	2a00      	cmp	r2, #0
 801308c:	db04      	blt.n	8013098 <_dtoa_r+0xa10>
 801308e:	d125      	bne.n	80130dc <_dtoa_r+0xa54>
 8013090:	9a06      	ldr	r2, [sp, #24]
 8013092:	bb1a      	cbnz	r2, 80130dc <_dtoa_r+0xa54>
 8013094:	9a07      	ldr	r2, [sp, #28]
 8013096:	bb0a      	cbnz	r2, 80130dc <_dtoa_r+0xa54>
 8013098:	2b00      	cmp	r3, #0
 801309a:	ddec      	ble.n	8013076 <_dtoa_r+0x9ee>
 801309c:	2201      	movs	r2, #1
 801309e:	9904      	ldr	r1, [sp, #16]
 80130a0:	4620      	mov	r0, r4
 80130a2:	f000 fc69 	bl	8013978 <__lshift>
 80130a6:	4639      	mov	r1, r7
 80130a8:	9004      	str	r0, [sp, #16]
 80130aa:	f000 fcb9 	bl	8013a20 <__mcmp>
 80130ae:	2800      	cmp	r0, #0
 80130b0:	dc03      	bgt.n	80130ba <_dtoa_r+0xa32>
 80130b2:	d1e0      	bne.n	8013076 <_dtoa_r+0x9ee>
 80130b4:	f018 0f01 	tst.w	r8, #1
 80130b8:	d0dd      	beq.n	8013076 <_dtoa_r+0x9ee>
 80130ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80130be:	d1d8      	bne.n	8013072 <_dtoa_r+0x9ea>
 80130c0:	9b05      	ldr	r3, [sp, #20]
 80130c2:	9a05      	ldr	r2, [sp, #20]
 80130c4:	1c5d      	adds	r5, r3, #1
 80130c6:	2339      	movs	r3, #57	; 0x39
 80130c8:	7013      	strb	r3, [r2, #0]
 80130ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80130ce:	2b39      	cmp	r3, #57	; 0x39
 80130d0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80130d4:	d04f      	beq.n	8013176 <_dtoa_r+0xaee>
 80130d6:	3301      	adds	r3, #1
 80130d8:	7013      	strb	r3, [r2, #0]
 80130da:	e754      	b.n	8012f86 <_dtoa_r+0x8fe>
 80130dc:	9a05      	ldr	r2, [sp, #20]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	f102 0501 	add.w	r5, r2, #1
 80130e4:	dd06      	ble.n	80130f4 <_dtoa_r+0xa6c>
 80130e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80130ea:	d0e9      	beq.n	80130c0 <_dtoa_r+0xa38>
 80130ec:	f108 0801 	add.w	r8, r8, #1
 80130f0:	9b05      	ldr	r3, [sp, #20]
 80130f2:	e7c2      	b.n	801307a <_dtoa_r+0x9f2>
 80130f4:	9a02      	ldr	r2, [sp, #8]
 80130f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80130fa:	eba5 030b 	sub.w	r3, r5, fp
 80130fe:	4293      	cmp	r3, r2
 8013100:	d021      	beq.n	8013146 <_dtoa_r+0xabe>
 8013102:	2300      	movs	r3, #0
 8013104:	220a      	movs	r2, #10
 8013106:	9904      	ldr	r1, [sp, #16]
 8013108:	4620      	mov	r0, r4
 801310a:	f000 fabf 	bl	801368c <__multadd>
 801310e:	45b1      	cmp	r9, r6
 8013110:	9004      	str	r0, [sp, #16]
 8013112:	f04f 0300 	mov.w	r3, #0
 8013116:	f04f 020a 	mov.w	r2, #10
 801311a:	4649      	mov	r1, r9
 801311c:	4620      	mov	r0, r4
 801311e:	d105      	bne.n	801312c <_dtoa_r+0xaa4>
 8013120:	f000 fab4 	bl	801368c <__multadd>
 8013124:	4681      	mov	r9, r0
 8013126:	4606      	mov	r6, r0
 8013128:	9505      	str	r5, [sp, #20]
 801312a:	e776      	b.n	801301a <_dtoa_r+0x992>
 801312c:	f000 faae 	bl	801368c <__multadd>
 8013130:	4631      	mov	r1, r6
 8013132:	4681      	mov	r9, r0
 8013134:	2300      	movs	r3, #0
 8013136:	220a      	movs	r2, #10
 8013138:	4620      	mov	r0, r4
 801313a:	f000 faa7 	bl	801368c <__multadd>
 801313e:	4606      	mov	r6, r0
 8013140:	e7f2      	b.n	8013128 <_dtoa_r+0xaa0>
 8013142:	f04f 0900 	mov.w	r9, #0
 8013146:	2201      	movs	r2, #1
 8013148:	9904      	ldr	r1, [sp, #16]
 801314a:	4620      	mov	r0, r4
 801314c:	f000 fc14 	bl	8013978 <__lshift>
 8013150:	4639      	mov	r1, r7
 8013152:	9004      	str	r0, [sp, #16]
 8013154:	f000 fc64 	bl	8013a20 <__mcmp>
 8013158:	2800      	cmp	r0, #0
 801315a:	dcb6      	bgt.n	80130ca <_dtoa_r+0xa42>
 801315c:	d102      	bne.n	8013164 <_dtoa_r+0xadc>
 801315e:	f018 0f01 	tst.w	r8, #1
 8013162:	d1b2      	bne.n	80130ca <_dtoa_r+0xa42>
 8013164:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013168:	2b30      	cmp	r3, #48	; 0x30
 801316a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801316e:	f47f af0a 	bne.w	8012f86 <_dtoa_r+0x8fe>
 8013172:	4615      	mov	r5, r2
 8013174:	e7f6      	b.n	8013164 <_dtoa_r+0xadc>
 8013176:	4593      	cmp	fp, r2
 8013178:	d105      	bne.n	8013186 <_dtoa_r+0xafe>
 801317a:	2331      	movs	r3, #49	; 0x31
 801317c:	f10a 0a01 	add.w	sl, sl, #1
 8013180:	f88b 3000 	strb.w	r3, [fp]
 8013184:	e6ff      	b.n	8012f86 <_dtoa_r+0x8fe>
 8013186:	4615      	mov	r5, r2
 8013188:	e79f      	b.n	80130ca <_dtoa_r+0xa42>
 801318a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80131f0 <_dtoa_r+0xb68>
 801318e:	e007      	b.n	80131a0 <_dtoa_r+0xb18>
 8013190:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013192:	f8df b060 	ldr.w	fp, [pc, #96]	; 80131f4 <_dtoa_r+0xb6c>
 8013196:	b11b      	cbz	r3, 80131a0 <_dtoa_r+0xb18>
 8013198:	f10b 0308 	add.w	r3, fp, #8
 801319c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801319e:	6013      	str	r3, [r2, #0]
 80131a0:	4658      	mov	r0, fp
 80131a2:	b017      	add	sp, #92	; 0x5c
 80131a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a8:	9b06      	ldr	r3, [sp, #24]
 80131aa:	2b01      	cmp	r3, #1
 80131ac:	f77f ae35 	ble.w	8012e1a <_dtoa_r+0x792>
 80131b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131b2:	9307      	str	r3, [sp, #28]
 80131b4:	e649      	b.n	8012e4a <_dtoa_r+0x7c2>
 80131b6:	9b02      	ldr	r3, [sp, #8]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	dc03      	bgt.n	80131c4 <_dtoa_r+0xb3c>
 80131bc:	9b06      	ldr	r3, [sp, #24]
 80131be:	2b02      	cmp	r3, #2
 80131c0:	f73f aecc 	bgt.w	8012f5c <_dtoa_r+0x8d4>
 80131c4:	465d      	mov	r5, fp
 80131c6:	4639      	mov	r1, r7
 80131c8:	9804      	ldr	r0, [sp, #16]
 80131ca:	f7ff f9cf 	bl	801256c <quorem>
 80131ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80131d2:	f805 8b01 	strb.w	r8, [r5], #1
 80131d6:	9a02      	ldr	r2, [sp, #8]
 80131d8:	eba5 030b 	sub.w	r3, r5, fp
 80131dc:	429a      	cmp	r2, r3
 80131de:	ddb0      	ble.n	8013142 <_dtoa_r+0xaba>
 80131e0:	2300      	movs	r3, #0
 80131e2:	220a      	movs	r2, #10
 80131e4:	9904      	ldr	r1, [sp, #16]
 80131e6:	4620      	mov	r0, r4
 80131e8:	f000 fa50 	bl	801368c <__multadd>
 80131ec:	9004      	str	r0, [sp, #16]
 80131ee:	e7ea      	b.n	80131c6 <_dtoa_r+0xb3e>
 80131f0:	08016f04 	.word	0x08016f04
 80131f4:	08016c76 	.word	0x08016c76

080131f8 <__sflush_r>:
 80131f8:	898a      	ldrh	r2, [r1, #12]
 80131fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fe:	4605      	mov	r5, r0
 8013200:	0710      	lsls	r0, r2, #28
 8013202:	460c      	mov	r4, r1
 8013204:	d458      	bmi.n	80132b8 <__sflush_r+0xc0>
 8013206:	684b      	ldr	r3, [r1, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	dc05      	bgt.n	8013218 <__sflush_r+0x20>
 801320c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801320e:	2b00      	cmp	r3, #0
 8013210:	dc02      	bgt.n	8013218 <__sflush_r+0x20>
 8013212:	2000      	movs	r0, #0
 8013214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801321a:	2e00      	cmp	r6, #0
 801321c:	d0f9      	beq.n	8013212 <__sflush_r+0x1a>
 801321e:	2300      	movs	r3, #0
 8013220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013224:	682f      	ldr	r7, [r5, #0]
 8013226:	6a21      	ldr	r1, [r4, #32]
 8013228:	602b      	str	r3, [r5, #0]
 801322a:	d032      	beq.n	8013292 <__sflush_r+0x9a>
 801322c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801322e:	89a3      	ldrh	r3, [r4, #12]
 8013230:	075a      	lsls	r2, r3, #29
 8013232:	d505      	bpl.n	8013240 <__sflush_r+0x48>
 8013234:	6863      	ldr	r3, [r4, #4]
 8013236:	1ac0      	subs	r0, r0, r3
 8013238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801323a:	b10b      	cbz	r3, 8013240 <__sflush_r+0x48>
 801323c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801323e:	1ac0      	subs	r0, r0, r3
 8013240:	2300      	movs	r3, #0
 8013242:	4602      	mov	r2, r0
 8013244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013246:	6a21      	ldr	r1, [r4, #32]
 8013248:	4628      	mov	r0, r5
 801324a:	47b0      	blx	r6
 801324c:	1c43      	adds	r3, r0, #1
 801324e:	89a3      	ldrh	r3, [r4, #12]
 8013250:	d106      	bne.n	8013260 <__sflush_r+0x68>
 8013252:	6829      	ldr	r1, [r5, #0]
 8013254:	291d      	cmp	r1, #29
 8013256:	d848      	bhi.n	80132ea <__sflush_r+0xf2>
 8013258:	4a29      	ldr	r2, [pc, #164]	; (8013300 <__sflush_r+0x108>)
 801325a:	40ca      	lsrs	r2, r1
 801325c:	07d6      	lsls	r6, r2, #31
 801325e:	d544      	bpl.n	80132ea <__sflush_r+0xf2>
 8013260:	2200      	movs	r2, #0
 8013262:	6062      	str	r2, [r4, #4]
 8013264:	04d9      	lsls	r1, r3, #19
 8013266:	6922      	ldr	r2, [r4, #16]
 8013268:	6022      	str	r2, [r4, #0]
 801326a:	d504      	bpl.n	8013276 <__sflush_r+0x7e>
 801326c:	1c42      	adds	r2, r0, #1
 801326e:	d101      	bne.n	8013274 <__sflush_r+0x7c>
 8013270:	682b      	ldr	r3, [r5, #0]
 8013272:	b903      	cbnz	r3, 8013276 <__sflush_r+0x7e>
 8013274:	6560      	str	r0, [r4, #84]	; 0x54
 8013276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013278:	602f      	str	r7, [r5, #0]
 801327a:	2900      	cmp	r1, #0
 801327c:	d0c9      	beq.n	8013212 <__sflush_r+0x1a>
 801327e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013282:	4299      	cmp	r1, r3
 8013284:	d002      	beq.n	801328c <__sflush_r+0x94>
 8013286:	4628      	mov	r0, r5
 8013288:	f000 fc9e 	bl	8013bc8 <_free_r>
 801328c:	2000      	movs	r0, #0
 801328e:	6360      	str	r0, [r4, #52]	; 0x34
 8013290:	e7c0      	b.n	8013214 <__sflush_r+0x1c>
 8013292:	2301      	movs	r3, #1
 8013294:	4628      	mov	r0, r5
 8013296:	47b0      	blx	r6
 8013298:	1c41      	adds	r1, r0, #1
 801329a:	d1c8      	bne.n	801322e <__sflush_r+0x36>
 801329c:	682b      	ldr	r3, [r5, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d0c5      	beq.n	801322e <__sflush_r+0x36>
 80132a2:	2b1d      	cmp	r3, #29
 80132a4:	d001      	beq.n	80132aa <__sflush_r+0xb2>
 80132a6:	2b16      	cmp	r3, #22
 80132a8:	d101      	bne.n	80132ae <__sflush_r+0xb6>
 80132aa:	602f      	str	r7, [r5, #0]
 80132ac:	e7b1      	b.n	8013212 <__sflush_r+0x1a>
 80132ae:	89a3      	ldrh	r3, [r4, #12]
 80132b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132b4:	81a3      	strh	r3, [r4, #12]
 80132b6:	e7ad      	b.n	8013214 <__sflush_r+0x1c>
 80132b8:	690f      	ldr	r7, [r1, #16]
 80132ba:	2f00      	cmp	r7, #0
 80132bc:	d0a9      	beq.n	8013212 <__sflush_r+0x1a>
 80132be:	0793      	lsls	r3, r2, #30
 80132c0:	680e      	ldr	r6, [r1, #0]
 80132c2:	bf08      	it	eq
 80132c4:	694b      	ldreq	r3, [r1, #20]
 80132c6:	600f      	str	r7, [r1, #0]
 80132c8:	bf18      	it	ne
 80132ca:	2300      	movne	r3, #0
 80132cc:	eba6 0807 	sub.w	r8, r6, r7
 80132d0:	608b      	str	r3, [r1, #8]
 80132d2:	f1b8 0f00 	cmp.w	r8, #0
 80132d6:	dd9c      	ble.n	8013212 <__sflush_r+0x1a>
 80132d8:	4643      	mov	r3, r8
 80132da:	463a      	mov	r2, r7
 80132dc:	6a21      	ldr	r1, [r4, #32]
 80132de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132e0:	4628      	mov	r0, r5
 80132e2:	47b0      	blx	r6
 80132e4:	2800      	cmp	r0, #0
 80132e6:	dc06      	bgt.n	80132f6 <__sflush_r+0xfe>
 80132e8:	89a3      	ldrh	r3, [r4, #12]
 80132ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ee:	81a3      	strh	r3, [r4, #12]
 80132f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132f4:	e78e      	b.n	8013214 <__sflush_r+0x1c>
 80132f6:	4407      	add	r7, r0
 80132f8:	eba8 0800 	sub.w	r8, r8, r0
 80132fc:	e7e9      	b.n	80132d2 <__sflush_r+0xda>
 80132fe:	bf00      	nop
 8013300:	20400001 	.word	0x20400001

08013304 <_fflush_r>:
 8013304:	b538      	push	{r3, r4, r5, lr}
 8013306:	690b      	ldr	r3, [r1, #16]
 8013308:	4605      	mov	r5, r0
 801330a:	460c      	mov	r4, r1
 801330c:	b1db      	cbz	r3, 8013346 <_fflush_r+0x42>
 801330e:	b118      	cbz	r0, 8013318 <_fflush_r+0x14>
 8013310:	6983      	ldr	r3, [r0, #24]
 8013312:	b90b      	cbnz	r3, 8013318 <_fflush_r+0x14>
 8013314:	f000 f860 	bl	80133d8 <__sinit>
 8013318:	4b0c      	ldr	r3, [pc, #48]	; (801334c <_fflush_r+0x48>)
 801331a:	429c      	cmp	r4, r3
 801331c:	d109      	bne.n	8013332 <_fflush_r+0x2e>
 801331e:	686c      	ldr	r4, [r5, #4]
 8013320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013324:	b17b      	cbz	r3, 8013346 <_fflush_r+0x42>
 8013326:	4621      	mov	r1, r4
 8013328:	4628      	mov	r0, r5
 801332a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801332e:	f7ff bf63 	b.w	80131f8 <__sflush_r>
 8013332:	4b07      	ldr	r3, [pc, #28]	; (8013350 <_fflush_r+0x4c>)
 8013334:	429c      	cmp	r4, r3
 8013336:	d101      	bne.n	801333c <_fflush_r+0x38>
 8013338:	68ac      	ldr	r4, [r5, #8]
 801333a:	e7f1      	b.n	8013320 <_fflush_r+0x1c>
 801333c:	4b05      	ldr	r3, [pc, #20]	; (8013354 <_fflush_r+0x50>)
 801333e:	429c      	cmp	r4, r3
 8013340:	bf08      	it	eq
 8013342:	68ec      	ldreq	r4, [r5, #12]
 8013344:	e7ec      	b.n	8013320 <_fflush_r+0x1c>
 8013346:	2000      	movs	r0, #0
 8013348:	bd38      	pop	{r3, r4, r5, pc}
 801334a:	bf00      	nop
 801334c:	08016ca4 	.word	0x08016ca4
 8013350:	08016cc4 	.word	0x08016cc4
 8013354:	08016c84 	.word	0x08016c84

08013358 <std>:
 8013358:	2300      	movs	r3, #0
 801335a:	b510      	push	{r4, lr}
 801335c:	4604      	mov	r4, r0
 801335e:	e9c0 3300 	strd	r3, r3, [r0]
 8013362:	6083      	str	r3, [r0, #8]
 8013364:	8181      	strh	r1, [r0, #12]
 8013366:	6643      	str	r3, [r0, #100]	; 0x64
 8013368:	81c2      	strh	r2, [r0, #14]
 801336a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801336e:	6183      	str	r3, [r0, #24]
 8013370:	4619      	mov	r1, r3
 8013372:	2208      	movs	r2, #8
 8013374:	305c      	adds	r0, #92	; 0x5c
 8013376:	f7fe fb15 	bl	80119a4 <memset>
 801337a:	4b05      	ldr	r3, [pc, #20]	; (8013390 <std+0x38>)
 801337c:	6263      	str	r3, [r4, #36]	; 0x24
 801337e:	4b05      	ldr	r3, [pc, #20]	; (8013394 <std+0x3c>)
 8013380:	62a3      	str	r3, [r4, #40]	; 0x28
 8013382:	4b05      	ldr	r3, [pc, #20]	; (8013398 <std+0x40>)
 8013384:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013386:	4b05      	ldr	r3, [pc, #20]	; (801339c <std+0x44>)
 8013388:	6224      	str	r4, [r4, #32]
 801338a:	6323      	str	r3, [r4, #48]	; 0x30
 801338c:	bd10      	pop	{r4, pc}
 801338e:	bf00      	nop
 8013390:	0801425d 	.word	0x0801425d
 8013394:	0801427f 	.word	0x0801427f
 8013398:	080142b7 	.word	0x080142b7
 801339c:	080142db 	.word	0x080142db

080133a0 <_cleanup_r>:
 80133a0:	4901      	ldr	r1, [pc, #4]	; (80133a8 <_cleanup_r+0x8>)
 80133a2:	f000 b885 	b.w	80134b0 <_fwalk_reent>
 80133a6:	bf00      	nop
 80133a8:	08013305 	.word	0x08013305

080133ac <__sfmoreglue>:
 80133ac:	b570      	push	{r4, r5, r6, lr}
 80133ae:	1e4a      	subs	r2, r1, #1
 80133b0:	2568      	movs	r5, #104	; 0x68
 80133b2:	4355      	muls	r5, r2
 80133b4:	460e      	mov	r6, r1
 80133b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80133ba:	f000 fc53 	bl	8013c64 <_malloc_r>
 80133be:	4604      	mov	r4, r0
 80133c0:	b140      	cbz	r0, 80133d4 <__sfmoreglue+0x28>
 80133c2:	2100      	movs	r1, #0
 80133c4:	e9c0 1600 	strd	r1, r6, [r0]
 80133c8:	300c      	adds	r0, #12
 80133ca:	60a0      	str	r0, [r4, #8]
 80133cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80133d0:	f7fe fae8 	bl	80119a4 <memset>
 80133d4:	4620      	mov	r0, r4
 80133d6:	bd70      	pop	{r4, r5, r6, pc}

080133d8 <__sinit>:
 80133d8:	6983      	ldr	r3, [r0, #24]
 80133da:	b510      	push	{r4, lr}
 80133dc:	4604      	mov	r4, r0
 80133de:	bb33      	cbnz	r3, 801342e <__sinit+0x56>
 80133e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80133e4:	6503      	str	r3, [r0, #80]	; 0x50
 80133e6:	4b12      	ldr	r3, [pc, #72]	; (8013430 <__sinit+0x58>)
 80133e8:	4a12      	ldr	r2, [pc, #72]	; (8013434 <__sinit+0x5c>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	6282      	str	r2, [r0, #40]	; 0x28
 80133ee:	4298      	cmp	r0, r3
 80133f0:	bf04      	itt	eq
 80133f2:	2301      	moveq	r3, #1
 80133f4:	6183      	streq	r3, [r0, #24]
 80133f6:	f000 f81f 	bl	8013438 <__sfp>
 80133fa:	6060      	str	r0, [r4, #4]
 80133fc:	4620      	mov	r0, r4
 80133fe:	f000 f81b 	bl	8013438 <__sfp>
 8013402:	60a0      	str	r0, [r4, #8]
 8013404:	4620      	mov	r0, r4
 8013406:	f000 f817 	bl	8013438 <__sfp>
 801340a:	2200      	movs	r2, #0
 801340c:	60e0      	str	r0, [r4, #12]
 801340e:	2104      	movs	r1, #4
 8013410:	6860      	ldr	r0, [r4, #4]
 8013412:	f7ff ffa1 	bl	8013358 <std>
 8013416:	2201      	movs	r2, #1
 8013418:	2109      	movs	r1, #9
 801341a:	68a0      	ldr	r0, [r4, #8]
 801341c:	f7ff ff9c 	bl	8013358 <std>
 8013420:	2202      	movs	r2, #2
 8013422:	2112      	movs	r1, #18
 8013424:	68e0      	ldr	r0, [r4, #12]
 8013426:	f7ff ff97 	bl	8013358 <std>
 801342a:	2301      	movs	r3, #1
 801342c:	61a3      	str	r3, [r4, #24]
 801342e:	bd10      	pop	{r4, pc}
 8013430:	08016c40 	.word	0x08016c40
 8013434:	080133a1 	.word	0x080133a1

08013438 <__sfp>:
 8013438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801343a:	4b1b      	ldr	r3, [pc, #108]	; (80134a8 <__sfp+0x70>)
 801343c:	681e      	ldr	r6, [r3, #0]
 801343e:	69b3      	ldr	r3, [r6, #24]
 8013440:	4607      	mov	r7, r0
 8013442:	b913      	cbnz	r3, 801344a <__sfp+0x12>
 8013444:	4630      	mov	r0, r6
 8013446:	f7ff ffc7 	bl	80133d8 <__sinit>
 801344a:	3648      	adds	r6, #72	; 0x48
 801344c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013450:	3b01      	subs	r3, #1
 8013452:	d503      	bpl.n	801345c <__sfp+0x24>
 8013454:	6833      	ldr	r3, [r6, #0]
 8013456:	b133      	cbz	r3, 8013466 <__sfp+0x2e>
 8013458:	6836      	ldr	r6, [r6, #0]
 801345a:	e7f7      	b.n	801344c <__sfp+0x14>
 801345c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013460:	b16d      	cbz	r5, 801347e <__sfp+0x46>
 8013462:	3468      	adds	r4, #104	; 0x68
 8013464:	e7f4      	b.n	8013450 <__sfp+0x18>
 8013466:	2104      	movs	r1, #4
 8013468:	4638      	mov	r0, r7
 801346a:	f7ff ff9f 	bl	80133ac <__sfmoreglue>
 801346e:	6030      	str	r0, [r6, #0]
 8013470:	2800      	cmp	r0, #0
 8013472:	d1f1      	bne.n	8013458 <__sfp+0x20>
 8013474:	230c      	movs	r3, #12
 8013476:	603b      	str	r3, [r7, #0]
 8013478:	4604      	mov	r4, r0
 801347a:	4620      	mov	r0, r4
 801347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801347e:	4b0b      	ldr	r3, [pc, #44]	; (80134ac <__sfp+0x74>)
 8013480:	6665      	str	r5, [r4, #100]	; 0x64
 8013482:	e9c4 5500 	strd	r5, r5, [r4]
 8013486:	60a5      	str	r5, [r4, #8]
 8013488:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801348c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013490:	2208      	movs	r2, #8
 8013492:	4629      	mov	r1, r5
 8013494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013498:	f7fe fa84 	bl	80119a4 <memset>
 801349c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80134a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80134a4:	e7e9      	b.n	801347a <__sfp+0x42>
 80134a6:	bf00      	nop
 80134a8:	08016c40 	.word	0x08016c40
 80134ac:	ffff0001 	.word	0xffff0001

080134b0 <_fwalk_reent>:
 80134b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134b4:	4680      	mov	r8, r0
 80134b6:	4689      	mov	r9, r1
 80134b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80134bc:	2600      	movs	r6, #0
 80134be:	b914      	cbnz	r4, 80134c6 <_fwalk_reent+0x16>
 80134c0:	4630      	mov	r0, r6
 80134c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80134ca:	3f01      	subs	r7, #1
 80134cc:	d501      	bpl.n	80134d2 <_fwalk_reent+0x22>
 80134ce:	6824      	ldr	r4, [r4, #0]
 80134d0:	e7f5      	b.n	80134be <_fwalk_reent+0xe>
 80134d2:	89ab      	ldrh	r3, [r5, #12]
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	d907      	bls.n	80134e8 <_fwalk_reent+0x38>
 80134d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134dc:	3301      	adds	r3, #1
 80134de:	d003      	beq.n	80134e8 <_fwalk_reent+0x38>
 80134e0:	4629      	mov	r1, r5
 80134e2:	4640      	mov	r0, r8
 80134e4:	47c8      	blx	r9
 80134e6:	4306      	orrs	r6, r0
 80134e8:	3568      	adds	r5, #104	; 0x68
 80134ea:	e7ee      	b.n	80134ca <_fwalk_reent+0x1a>

080134ec <_localeconv_r>:
 80134ec:	4b04      	ldr	r3, [pc, #16]	; (8013500 <_localeconv_r+0x14>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	6a18      	ldr	r0, [r3, #32]
 80134f2:	4b04      	ldr	r3, [pc, #16]	; (8013504 <_localeconv_r+0x18>)
 80134f4:	2800      	cmp	r0, #0
 80134f6:	bf08      	it	eq
 80134f8:	4618      	moveq	r0, r3
 80134fa:	30f0      	adds	r0, #240	; 0xf0
 80134fc:	4770      	bx	lr
 80134fe:	bf00      	nop
 8013500:	20001c38 	.word	0x20001c38
 8013504:	20001c9c 	.word	0x20001c9c

08013508 <__swhatbuf_r>:
 8013508:	b570      	push	{r4, r5, r6, lr}
 801350a:	460e      	mov	r6, r1
 801350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013510:	2900      	cmp	r1, #0
 8013512:	b096      	sub	sp, #88	; 0x58
 8013514:	4614      	mov	r4, r2
 8013516:	461d      	mov	r5, r3
 8013518:	da07      	bge.n	801352a <__swhatbuf_r+0x22>
 801351a:	2300      	movs	r3, #0
 801351c:	602b      	str	r3, [r5, #0]
 801351e:	89b3      	ldrh	r3, [r6, #12]
 8013520:	061a      	lsls	r2, r3, #24
 8013522:	d410      	bmi.n	8013546 <__swhatbuf_r+0x3e>
 8013524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013528:	e00e      	b.n	8013548 <__swhatbuf_r+0x40>
 801352a:	466a      	mov	r2, sp
 801352c:	f000 fefc 	bl	8014328 <_fstat_r>
 8013530:	2800      	cmp	r0, #0
 8013532:	dbf2      	blt.n	801351a <__swhatbuf_r+0x12>
 8013534:	9a01      	ldr	r2, [sp, #4]
 8013536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801353a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801353e:	425a      	negs	r2, r3
 8013540:	415a      	adcs	r2, r3
 8013542:	602a      	str	r2, [r5, #0]
 8013544:	e7ee      	b.n	8013524 <__swhatbuf_r+0x1c>
 8013546:	2340      	movs	r3, #64	; 0x40
 8013548:	2000      	movs	r0, #0
 801354a:	6023      	str	r3, [r4, #0]
 801354c:	b016      	add	sp, #88	; 0x58
 801354e:	bd70      	pop	{r4, r5, r6, pc}

08013550 <__smakebuf_r>:
 8013550:	898b      	ldrh	r3, [r1, #12]
 8013552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013554:	079d      	lsls	r5, r3, #30
 8013556:	4606      	mov	r6, r0
 8013558:	460c      	mov	r4, r1
 801355a:	d507      	bpl.n	801356c <__smakebuf_r+0x1c>
 801355c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013560:	6023      	str	r3, [r4, #0]
 8013562:	6123      	str	r3, [r4, #16]
 8013564:	2301      	movs	r3, #1
 8013566:	6163      	str	r3, [r4, #20]
 8013568:	b002      	add	sp, #8
 801356a:	bd70      	pop	{r4, r5, r6, pc}
 801356c:	ab01      	add	r3, sp, #4
 801356e:	466a      	mov	r2, sp
 8013570:	f7ff ffca 	bl	8013508 <__swhatbuf_r>
 8013574:	9900      	ldr	r1, [sp, #0]
 8013576:	4605      	mov	r5, r0
 8013578:	4630      	mov	r0, r6
 801357a:	f000 fb73 	bl	8013c64 <_malloc_r>
 801357e:	b948      	cbnz	r0, 8013594 <__smakebuf_r+0x44>
 8013580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013584:	059a      	lsls	r2, r3, #22
 8013586:	d4ef      	bmi.n	8013568 <__smakebuf_r+0x18>
 8013588:	f023 0303 	bic.w	r3, r3, #3
 801358c:	f043 0302 	orr.w	r3, r3, #2
 8013590:	81a3      	strh	r3, [r4, #12]
 8013592:	e7e3      	b.n	801355c <__smakebuf_r+0xc>
 8013594:	4b0d      	ldr	r3, [pc, #52]	; (80135cc <__smakebuf_r+0x7c>)
 8013596:	62b3      	str	r3, [r6, #40]	; 0x28
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	6020      	str	r0, [r4, #0]
 801359c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135a0:	81a3      	strh	r3, [r4, #12]
 80135a2:	9b00      	ldr	r3, [sp, #0]
 80135a4:	6163      	str	r3, [r4, #20]
 80135a6:	9b01      	ldr	r3, [sp, #4]
 80135a8:	6120      	str	r0, [r4, #16]
 80135aa:	b15b      	cbz	r3, 80135c4 <__smakebuf_r+0x74>
 80135ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135b0:	4630      	mov	r0, r6
 80135b2:	f000 fecb 	bl	801434c <_isatty_r>
 80135b6:	b128      	cbz	r0, 80135c4 <__smakebuf_r+0x74>
 80135b8:	89a3      	ldrh	r3, [r4, #12]
 80135ba:	f023 0303 	bic.w	r3, r3, #3
 80135be:	f043 0301 	orr.w	r3, r3, #1
 80135c2:	81a3      	strh	r3, [r4, #12]
 80135c4:	89a3      	ldrh	r3, [r4, #12]
 80135c6:	431d      	orrs	r5, r3
 80135c8:	81a5      	strh	r5, [r4, #12]
 80135ca:	e7cd      	b.n	8013568 <__smakebuf_r+0x18>
 80135cc:	080133a1 	.word	0x080133a1

080135d0 <malloc>:
 80135d0:	4b02      	ldr	r3, [pc, #8]	; (80135dc <malloc+0xc>)
 80135d2:	4601      	mov	r1, r0
 80135d4:	6818      	ldr	r0, [r3, #0]
 80135d6:	f000 bb45 	b.w	8013c64 <_malloc_r>
 80135da:	bf00      	nop
 80135dc:	20001c38 	.word	0x20001c38

080135e0 <memcpy>:
 80135e0:	b510      	push	{r4, lr}
 80135e2:	1e43      	subs	r3, r0, #1
 80135e4:	440a      	add	r2, r1
 80135e6:	4291      	cmp	r1, r2
 80135e8:	d100      	bne.n	80135ec <memcpy+0xc>
 80135ea:	bd10      	pop	{r4, pc}
 80135ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80135f4:	e7f7      	b.n	80135e6 <memcpy+0x6>

080135f6 <_Balloc>:
 80135f6:	b570      	push	{r4, r5, r6, lr}
 80135f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80135fa:	4604      	mov	r4, r0
 80135fc:	460e      	mov	r6, r1
 80135fe:	b93d      	cbnz	r5, 8013610 <_Balloc+0x1a>
 8013600:	2010      	movs	r0, #16
 8013602:	f7ff ffe5 	bl	80135d0 <malloc>
 8013606:	6260      	str	r0, [r4, #36]	; 0x24
 8013608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801360c:	6005      	str	r5, [r0, #0]
 801360e:	60c5      	str	r5, [r0, #12]
 8013610:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013612:	68eb      	ldr	r3, [r5, #12]
 8013614:	b183      	cbz	r3, 8013638 <_Balloc+0x42>
 8013616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801361e:	b9b8      	cbnz	r0, 8013650 <_Balloc+0x5a>
 8013620:	2101      	movs	r1, #1
 8013622:	fa01 f506 	lsl.w	r5, r1, r6
 8013626:	1d6a      	adds	r2, r5, #5
 8013628:	0092      	lsls	r2, r2, #2
 801362a:	4620      	mov	r0, r4
 801362c:	f000 fabe 	bl	8013bac <_calloc_r>
 8013630:	b160      	cbz	r0, 801364c <_Balloc+0x56>
 8013632:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013636:	e00e      	b.n	8013656 <_Balloc+0x60>
 8013638:	2221      	movs	r2, #33	; 0x21
 801363a:	2104      	movs	r1, #4
 801363c:	4620      	mov	r0, r4
 801363e:	f000 fab5 	bl	8013bac <_calloc_r>
 8013642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013644:	60e8      	str	r0, [r5, #12]
 8013646:	68db      	ldr	r3, [r3, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d1e4      	bne.n	8013616 <_Balloc+0x20>
 801364c:	2000      	movs	r0, #0
 801364e:	bd70      	pop	{r4, r5, r6, pc}
 8013650:	6802      	ldr	r2, [r0, #0]
 8013652:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013656:	2300      	movs	r3, #0
 8013658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801365c:	e7f7      	b.n	801364e <_Balloc+0x58>

0801365e <_Bfree>:
 801365e:	b570      	push	{r4, r5, r6, lr}
 8013660:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013662:	4606      	mov	r6, r0
 8013664:	460d      	mov	r5, r1
 8013666:	b93c      	cbnz	r4, 8013678 <_Bfree+0x1a>
 8013668:	2010      	movs	r0, #16
 801366a:	f7ff ffb1 	bl	80135d0 <malloc>
 801366e:	6270      	str	r0, [r6, #36]	; 0x24
 8013670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013674:	6004      	str	r4, [r0, #0]
 8013676:	60c4      	str	r4, [r0, #12]
 8013678:	b13d      	cbz	r5, 801368a <_Bfree+0x2c>
 801367a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801367c:	686a      	ldr	r2, [r5, #4]
 801367e:	68db      	ldr	r3, [r3, #12]
 8013680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013684:	6029      	str	r1, [r5, #0]
 8013686:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801368a:	bd70      	pop	{r4, r5, r6, pc}

0801368c <__multadd>:
 801368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013690:	690d      	ldr	r5, [r1, #16]
 8013692:	461f      	mov	r7, r3
 8013694:	4606      	mov	r6, r0
 8013696:	460c      	mov	r4, r1
 8013698:	f101 0c14 	add.w	ip, r1, #20
 801369c:	2300      	movs	r3, #0
 801369e:	f8dc 0000 	ldr.w	r0, [ip]
 80136a2:	b281      	uxth	r1, r0
 80136a4:	fb02 7101 	mla	r1, r2, r1, r7
 80136a8:	0c0f      	lsrs	r7, r1, #16
 80136aa:	0c00      	lsrs	r0, r0, #16
 80136ac:	fb02 7000 	mla	r0, r2, r0, r7
 80136b0:	b289      	uxth	r1, r1
 80136b2:	3301      	adds	r3, #1
 80136b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80136b8:	429d      	cmp	r5, r3
 80136ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80136be:	f84c 1b04 	str.w	r1, [ip], #4
 80136c2:	dcec      	bgt.n	801369e <__multadd+0x12>
 80136c4:	b1d7      	cbz	r7, 80136fc <__multadd+0x70>
 80136c6:	68a3      	ldr	r3, [r4, #8]
 80136c8:	42ab      	cmp	r3, r5
 80136ca:	dc12      	bgt.n	80136f2 <__multadd+0x66>
 80136cc:	6861      	ldr	r1, [r4, #4]
 80136ce:	4630      	mov	r0, r6
 80136d0:	3101      	adds	r1, #1
 80136d2:	f7ff ff90 	bl	80135f6 <_Balloc>
 80136d6:	6922      	ldr	r2, [r4, #16]
 80136d8:	3202      	adds	r2, #2
 80136da:	f104 010c 	add.w	r1, r4, #12
 80136de:	4680      	mov	r8, r0
 80136e0:	0092      	lsls	r2, r2, #2
 80136e2:	300c      	adds	r0, #12
 80136e4:	f7ff ff7c 	bl	80135e0 <memcpy>
 80136e8:	4621      	mov	r1, r4
 80136ea:	4630      	mov	r0, r6
 80136ec:	f7ff ffb7 	bl	801365e <_Bfree>
 80136f0:	4644      	mov	r4, r8
 80136f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80136f6:	3501      	adds	r5, #1
 80136f8:	615f      	str	r7, [r3, #20]
 80136fa:	6125      	str	r5, [r4, #16]
 80136fc:	4620      	mov	r0, r4
 80136fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013702 <__hi0bits>:
 8013702:	0c02      	lsrs	r2, r0, #16
 8013704:	0412      	lsls	r2, r2, #16
 8013706:	4603      	mov	r3, r0
 8013708:	b9b2      	cbnz	r2, 8013738 <__hi0bits+0x36>
 801370a:	0403      	lsls	r3, r0, #16
 801370c:	2010      	movs	r0, #16
 801370e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013712:	bf04      	itt	eq
 8013714:	021b      	lsleq	r3, r3, #8
 8013716:	3008      	addeq	r0, #8
 8013718:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801371c:	bf04      	itt	eq
 801371e:	011b      	lsleq	r3, r3, #4
 8013720:	3004      	addeq	r0, #4
 8013722:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013726:	bf04      	itt	eq
 8013728:	009b      	lsleq	r3, r3, #2
 801372a:	3002      	addeq	r0, #2
 801372c:	2b00      	cmp	r3, #0
 801372e:	db06      	blt.n	801373e <__hi0bits+0x3c>
 8013730:	005b      	lsls	r3, r3, #1
 8013732:	d503      	bpl.n	801373c <__hi0bits+0x3a>
 8013734:	3001      	adds	r0, #1
 8013736:	4770      	bx	lr
 8013738:	2000      	movs	r0, #0
 801373a:	e7e8      	b.n	801370e <__hi0bits+0xc>
 801373c:	2020      	movs	r0, #32
 801373e:	4770      	bx	lr

08013740 <__lo0bits>:
 8013740:	6803      	ldr	r3, [r0, #0]
 8013742:	f013 0207 	ands.w	r2, r3, #7
 8013746:	4601      	mov	r1, r0
 8013748:	d00b      	beq.n	8013762 <__lo0bits+0x22>
 801374a:	07da      	lsls	r2, r3, #31
 801374c:	d423      	bmi.n	8013796 <__lo0bits+0x56>
 801374e:	0798      	lsls	r0, r3, #30
 8013750:	bf49      	itett	mi
 8013752:	085b      	lsrmi	r3, r3, #1
 8013754:	089b      	lsrpl	r3, r3, #2
 8013756:	2001      	movmi	r0, #1
 8013758:	600b      	strmi	r3, [r1, #0]
 801375a:	bf5c      	itt	pl
 801375c:	600b      	strpl	r3, [r1, #0]
 801375e:	2002      	movpl	r0, #2
 8013760:	4770      	bx	lr
 8013762:	b298      	uxth	r0, r3
 8013764:	b9a8      	cbnz	r0, 8013792 <__lo0bits+0x52>
 8013766:	0c1b      	lsrs	r3, r3, #16
 8013768:	2010      	movs	r0, #16
 801376a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801376e:	bf04      	itt	eq
 8013770:	0a1b      	lsreq	r3, r3, #8
 8013772:	3008      	addeq	r0, #8
 8013774:	071a      	lsls	r2, r3, #28
 8013776:	bf04      	itt	eq
 8013778:	091b      	lsreq	r3, r3, #4
 801377a:	3004      	addeq	r0, #4
 801377c:	079a      	lsls	r2, r3, #30
 801377e:	bf04      	itt	eq
 8013780:	089b      	lsreq	r3, r3, #2
 8013782:	3002      	addeq	r0, #2
 8013784:	07da      	lsls	r2, r3, #31
 8013786:	d402      	bmi.n	801378e <__lo0bits+0x4e>
 8013788:	085b      	lsrs	r3, r3, #1
 801378a:	d006      	beq.n	801379a <__lo0bits+0x5a>
 801378c:	3001      	adds	r0, #1
 801378e:	600b      	str	r3, [r1, #0]
 8013790:	4770      	bx	lr
 8013792:	4610      	mov	r0, r2
 8013794:	e7e9      	b.n	801376a <__lo0bits+0x2a>
 8013796:	2000      	movs	r0, #0
 8013798:	4770      	bx	lr
 801379a:	2020      	movs	r0, #32
 801379c:	4770      	bx	lr

0801379e <__i2b>:
 801379e:	b510      	push	{r4, lr}
 80137a0:	460c      	mov	r4, r1
 80137a2:	2101      	movs	r1, #1
 80137a4:	f7ff ff27 	bl	80135f6 <_Balloc>
 80137a8:	2201      	movs	r2, #1
 80137aa:	6144      	str	r4, [r0, #20]
 80137ac:	6102      	str	r2, [r0, #16]
 80137ae:	bd10      	pop	{r4, pc}

080137b0 <__multiply>:
 80137b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b4:	4614      	mov	r4, r2
 80137b6:	690a      	ldr	r2, [r1, #16]
 80137b8:	6923      	ldr	r3, [r4, #16]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	bfb8      	it	lt
 80137be:	460b      	movlt	r3, r1
 80137c0:	4688      	mov	r8, r1
 80137c2:	bfbc      	itt	lt
 80137c4:	46a0      	movlt	r8, r4
 80137c6:	461c      	movlt	r4, r3
 80137c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80137cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80137d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80137d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80137d8:	eb07 0609 	add.w	r6, r7, r9
 80137dc:	42b3      	cmp	r3, r6
 80137de:	bfb8      	it	lt
 80137e0:	3101      	addlt	r1, #1
 80137e2:	f7ff ff08 	bl	80135f6 <_Balloc>
 80137e6:	f100 0514 	add.w	r5, r0, #20
 80137ea:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80137ee:	462b      	mov	r3, r5
 80137f0:	2200      	movs	r2, #0
 80137f2:	4573      	cmp	r3, lr
 80137f4:	d316      	bcc.n	8013824 <__multiply+0x74>
 80137f6:	f104 0214 	add.w	r2, r4, #20
 80137fa:	f108 0114 	add.w	r1, r8, #20
 80137fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013802:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013806:	9300      	str	r3, [sp, #0]
 8013808:	9b00      	ldr	r3, [sp, #0]
 801380a:	9201      	str	r2, [sp, #4]
 801380c:	4293      	cmp	r3, r2
 801380e:	d80c      	bhi.n	801382a <__multiply+0x7a>
 8013810:	2e00      	cmp	r6, #0
 8013812:	dd03      	ble.n	801381c <__multiply+0x6c>
 8013814:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013818:	2b00      	cmp	r3, #0
 801381a:	d05d      	beq.n	80138d8 <__multiply+0x128>
 801381c:	6106      	str	r6, [r0, #16]
 801381e:	b003      	add	sp, #12
 8013820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013824:	f843 2b04 	str.w	r2, [r3], #4
 8013828:	e7e3      	b.n	80137f2 <__multiply+0x42>
 801382a:	f8b2 b000 	ldrh.w	fp, [r2]
 801382e:	f1bb 0f00 	cmp.w	fp, #0
 8013832:	d023      	beq.n	801387c <__multiply+0xcc>
 8013834:	4689      	mov	r9, r1
 8013836:	46ac      	mov	ip, r5
 8013838:	f04f 0800 	mov.w	r8, #0
 801383c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013840:	f8dc a000 	ldr.w	sl, [ip]
 8013844:	b2a3      	uxth	r3, r4
 8013846:	fa1f fa8a 	uxth.w	sl, sl
 801384a:	fb0b a303 	mla	r3, fp, r3, sl
 801384e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013852:	f8dc 4000 	ldr.w	r4, [ip]
 8013856:	4443      	add	r3, r8
 8013858:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801385c:	fb0b 840a 	mla	r4, fp, sl, r8
 8013860:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013864:	46e2      	mov	sl, ip
 8013866:	b29b      	uxth	r3, r3
 8013868:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801386c:	454f      	cmp	r7, r9
 801386e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013872:	f84a 3b04 	str.w	r3, [sl], #4
 8013876:	d82b      	bhi.n	80138d0 <__multiply+0x120>
 8013878:	f8cc 8004 	str.w	r8, [ip, #4]
 801387c:	9b01      	ldr	r3, [sp, #4]
 801387e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013882:	3204      	adds	r2, #4
 8013884:	f1ba 0f00 	cmp.w	sl, #0
 8013888:	d020      	beq.n	80138cc <__multiply+0x11c>
 801388a:	682b      	ldr	r3, [r5, #0]
 801388c:	4689      	mov	r9, r1
 801388e:	46a8      	mov	r8, r5
 8013890:	f04f 0b00 	mov.w	fp, #0
 8013894:	f8b9 c000 	ldrh.w	ip, [r9]
 8013898:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801389c:	fb0a 440c 	mla	r4, sl, ip, r4
 80138a0:	445c      	add	r4, fp
 80138a2:	46c4      	mov	ip, r8
 80138a4:	b29b      	uxth	r3, r3
 80138a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80138aa:	f84c 3b04 	str.w	r3, [ip], #4
 80138ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80138b2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80138b6:	0c1b      	lsrs	r3, r3, #16
 80138b8:	fb0a b303 	mla	r3, sl, r3, fp
 80138bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80138c0:	454f      	cmp	r7, r9
 80138c2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80138c6:	d805      	bhi.n	80138d4 <__multiply+0x124>
 80138c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80138cc:	3504      	adds	r5, #4
 80138ce:	e79b      	b.n	8013808 <__multiply+0x58>
 80138d0:	46d4      	mov	ip, sl
 80138d2:	e7b3      	b.n	801383c <__multiply+0x8c>
 80138d4:	46e0      	mov	r8, ip
 80138d6:	e7dd      	b.n	8013894 <__multiply+0xe4>
 80138d8:	3e01      	subs	r6, #1
 80138da:	e799      	b.n	8013810 <__multiply+0x60>

080138dc <__pow5mult>:
 80138dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138e0:	4615      	mov	r5, r2
 80138e2:	f012 0203 	ands.w	r2, r2, #3
 80138e6:	4606      	mov	r6, r0
 80138e8:	460f      	mov	r7, r1
 80138ea:	d007      	beq.n	80138fc <__pow5mult+0x20>
 80138ec:	3a01      	subs	r2, #1
 80138ee:	4c21      	ldr	r4, [pc, #132]	; (8013974 <__pow5mult+0x98>)
 80138f0:	2300      	movs	r3, #0
 80138f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80138f6:	f7ff fec9 	bl	801368c <__multadd>
 80138fa:	4607      	mov	r7, r0
 80138fc:	10ad      	asrs	r5, r5, #2
 80138fe:	d035      	beq.n	801396c <__pow5mult+0x90>
 8013900:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013902:	b93c      	cbnz	r4, 8013914 <__pow5mult+0x38>
 8013904:	2010      	movs	r0, #16
 8013906:	f7ff fe63 	bl	80135d0 <malloc>
 801390a:	6270      	str	r0, [r6, #36]	; 0x24
 801390c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013910:	6004      	str	r4, [r0, #0]
 8013912:	60c4      	str	r4, [r0, #12]
 8013914:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801391c:	b94c      	cbnz	r4, 8013932 <__pow5mult+0x56>
 801391e:	f240 2171 	movw	r1, #625	; 0x271
 8013922:	4630      	mov	r0, r6
 8013924:	f7ff ff3b 	bl	801379e <__i2b>
 8013928:	2300      	movs	r3, #0
 801392a:	f8c8 0008 	str.w	r0, [r8, #8]
 801392e:	4604      	mov	r4, r0
 8013930:	6003      	str	r3, [r0, #0]
 8013932:	f04f 0800 	mov.w	r8, #0
 8013936:	07eb      	lsls	r3, r5, #31
 8013938:	d50a      	bpl.n	8013950 <__pow5mult+0x74>
 801393a:	4639      	mov	r1, r7
 801393c:	4622      	mov	r2, r4
 801393e:	4630      	mov	r0, r6
 8013940:	f7ff ff36 	bl	80137b0 <__multiply>
 8013944:	4639      	mov	r1, r7
 8013946:	4681      	mov	r9, r0
 8013948:	4630      	mov	r0, r6
 801394a:	f7ff fe88 	bl	801365e <_Bfree>
 801394e:	464f      	mov	r7, r9
 8013950:	106d      	asrs	r5, r5, #1
 8013952:	d00b      	beq.n	801396c <__pow5mult+0x90>
 8013954:	6820      	ldr	r0, [r4, #0]
 8013956:	b938      	cbnz	r0, 8013968 <__pow5mult+0x8c>
 8013958:	4622      	mov	r2, r4
 801395a:	4621      	mov	r1, r4
 801395c:	4630      	mov	r0, r6
 801395e:	f7ff ff27 	bl	80137b0 <__multiply>
 8013962:	6020      	str	r0, [r4, #0]
 8013964:	f8c0 8000 	str.w	r8, [r0]
 8013968:	4604      	mov	r4, r0
 801396a:	e7e4      	b.n	8013936 <__pow5mult+0x5a>
 801396c:	4638      	mov	r0, r7
 801396e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013972:	bf00      	nop
 8013974:	08016dd8 	.word	0x08016dd8

08013978 <__lshift>:
 8013978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801397c:	460c      	mov	r4, r1
 801397e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013982:	6923      	ldr	r3, [r4, #16]
 8013984:	6849      	ldr	r1, [r1, #4]
 8013986:	eb0a 0903 	add.w	r9, sl, r3
 801398a:	68a3      	ldr	r3, [r4, #8]
 801398c:	4607      	mov	r7, r0
 801398e:	4616      	mov	r6, r2
 8013990:	f109 0501 	add.w	r5, r9, #1
 8013994:	42ab      	cmp	r3, r5
 8013996:	db32      	blt.n	80139fe <__lshift+0x86>
 8013998:	4638      	mov	r0, r7
 801399a:	f7ff fe2c 	bl	80135f6 <_Balloc>
 801399e:	2300      	movs	r3, #0
 80139a0:	4680      	mov	r8, r0
 80139a2:	f100 0114 	add.w	r1, r0, #20
 80139a6:	461a      	mov	r2, r3
 80139a8:	4553      	cmp	r3, sl
 80139aa:	db2b      	blt.n	8013a04 <__lshift+0x8c>
 80139ac:	6920      	ldr	r0, [r4, #16]
 80139ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80139b2:	f104 0314 	add.w	r3, r4, #20
 80139b6:	f016 021f 	ands.w	r2, r6, #31
 80139ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80139be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80139c2:	d025      	beq.n	8013a10 <__lshift+0x98>
 80139c4:	f1c2 0e20 	rsb	lr, r2, #32
 80139c8:	2000      	movs	r0, #0
 80139ca:	681e      	ldr	r6, [r3, #0]
 80139cc:	468a      	mov	sl, r1
 80139ce:	4096      	lsls	r6, r2
 80139d0:	4330      	orrs	r0, r6
 80139d2:	f84a 0b04 	str.w	r0, [sl], #4
 80139d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80139da:	459c      	cmp	ip, r3
 80139dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80139e0:	d814      	bhi.n	8013a0c <__lshift+0x94>
 80139e2:	6048      	str	r0, [r1, #4]
 80139e4:	b108      	cbz	r0, 80139ea <__lshift+0x72>
 80139e6:	f109 0502 	add.w	r5, r9, #2
 80139ea:	3d01      	subs	r5, #1
 80139ec:	4638      	mov	r0, r7
 80139ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80139f2:	4621      	mov	r1, r4
 80139f4:	f7ff fe33 	bl	801365e <_Bfree>
 80139f8:	4640      	mov	r0, r8
 80139fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139fe:	3101      	adds	r1, #1
 8013a00:	005b      	lsls	r3, r3, #1
 8013a02:	e7c7      	b.n	8013994 <__lshift+0x1c>
 8013a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013a08:	3301      	adds	r3, #1
 8013a0a:	e7cd      	b.n	80139a8 <__lshift+0x30>
 8013a0c:	4651      	mov	r1, sl
 8013a0e:	e7dc      	b.n	80139ca <__lshift+0x52>
 8013a10:	3904      	subs	r1, #4
 8013a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a16:	f841 2f04 	str.w	r2, [r1, #4]!
 8013a1a:	459c      	cmp	ip, r3
 8013a1c:	d8f9      	bhi.n	8013a12 <__lshift+0x9a>
 8013a1e:	e7e4      	b.n	80139ea <__lshift+0x72>

08013a20 <__mcmp>:
 8013a20:	6903      	ldr	r3, [r0, #16]
 8013a22:	690a      	ldr	r2, [r1, #16]
 8013a24:	1a9b      	subs	r3, r3, r2
 8013a26:	b530      	push	{r4, r5, lr}
 8013a28:	d10c      	bne.n	8013a44 <__mcmp+0x24>
 8013a2a:	0092      	lsls	r2, r2, #2
 8013a2c:	3014      	adds	r0, #20
 8013a2e:	3114      	adds	r1, #20
 8013a30:	1884      	adds	r4, r0, r2
 8013a32:	4411      	add	r1, r2
 8013a34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013a38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013a3c:	4295      	cmp	r5, r2
 8013a3e:	d003      	beq.n	8013a48 <__mcmp+0x28>
 8013a40:	d305      	bcc.n	8013a4e <__mcmp+0x2e>
 8013a42:	2301      	movs	r3, #1
 8013a44:	4618      	mov	r0, r3
 8013a46:	bd30      	pop	{r4, r5, pc}
 8013a48:	42a0      	cmp	r0, r4
 8013a4a:	d3f3      	bcc.n	8013a34 <__mcmp+0x14>
 8013a4c:	e7fa      	b.n	8013a44 <__mcmp+0x24>
 8013a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a52:	e7f7      	b.n	8013a44 <__mcmp+0x24>

08013a54 <__mdiff>:
 8013a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a58:	460d      	mov	r5, r1
 8013a5a:	4607      	mov	r7, r0
 8013a5c:	4611      	mov	r1, r2
 8013a5e:	4628      	mov	r0, r5
 8013a60:	4614      	mov	r4, r2
 8013a62:	f7ff ffdd 	bl	8013a20 <__mcmp>
 8013a66:	1e06      	subs	r6, r0, #0
 8013a68:	d108      	bne.n	8013a7c <__mdiff+0x28>
 8013a6a:	4631      	mov	r1, r6
 8013a6c:	4638      	mov	r0, r7
 8013a6e:	f7ff fdc2 	bl	80135f6 <_Balloc>
 8013a72:	2301      	movs	r3, #1
 8013a74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a7c:	bfa4      	itt	ge
 8013a7e:	4623      	movge	r3, r4
 8013a80:	462c      	movge	r4, r5
 8013a82:	4638      	mov	r0, r7
 8013a84:	6861      	ldr	r1, [r4, #4]
 8013a86:	bfa6      	itte	ge
 8013a88:	461d      	movge	r5, r3
 8013a8a:	2600      	movge	r6, #0
 8013a8c:	2601      	movlt	r6, #1
 8013a8e:	f7ff fdb2 	bl	80135f6 <_Balloc>
 8013a92:	692b      	ldr	r3, [r5, #16]
 8013a94:	60c6      	str	r6, [r0, #12]
 8013a96:	6926      	ldr	r6, [r4, #16]
 8013a98:	f105 0914 	add.w	r9, r5, #20
 8013a9c:	f104 0214 	add.w	r2, r4, #20
 8013aa0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013aa4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013aa8:	f100 0514 	add.w	r5, r0, #20
 8013aac:	f04f 0e00 	mov.w	lr, #0
 8013ab0:	f852 ab04 	ldr.w	sl, [r2], #4
 8013ab4:	f859 4b04 	ldr.w	r4, [r9], #4
 8013ab8:	fa1e f18a 	uxtah	r1, lr, sl
 8013abc:	b2a3      	uxth	r3, r4
 8013abe:	1ac9      	subs	r1, r1, r3
 8013ac0:	0c23      	lsrs	r3, r4, #16
 8013ac2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013ac6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013aca:	b289      	uxth	r1, r1
 8013acc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013ad0:	45c8      	cmp	r8, r9
 8013ad2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013ad6:	4694      	mov	ip, r2
 8013ad8:	f845 3b04 	str.w	r3, [r5], #4
 8013adc:	d8e8      	bhi.n	8013ab0 <__mdiff+0x5c>
 8013ade:	45bc      	cmp	ip, r7
 8013ae0:	d304      	bcc.n	8013aec <__mdiff+0x98>
 8013ae2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013ae6:	b183      	cbz	r3, 8013b0a <__mdiff+0xb6>
 8013ae8:	6106      	str	r6, [r0, #16]
 8013aea:	e7c5      	b.n	8013a78 <__mdiff+0x24>
 8013aec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013af0:	fa1e f381 	uxtah	r3, lr, r1
 8013af4:	141a      	asrs	r2, r3, #16
 8013af6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013b04:	f845 3b04 	str.w	r3, [r5], #4
 8013b08:	e7e9      	b.n	8013ade <__mdiff+0x8a>
 8013b0a:	3e01      	subs	r6, #1
 8013b0c:	e7e9      	b.n	8013ae2 <__mdiff+0x8e>

08013b0e <__d2b>:
 8013b0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013b12:	460e      	mov	r6, r1
 8013b14:	2101      	movs	r1, #1
 8013b16:	ec59 8b10 	vmov	r8, r9, d0
 8013b1a:	4615      	mov	r5, r2
 8013b1c:	f7ff fd6b 	bl	80135f6 <_Balloc>
 8013b20:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013b24:	4607      	mov	r7, r0
 8013b26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b2a:	bb34      	cbnz	r4, 8013b7a <__d2b+0x6c>
 8013b2c:	9301      	str	r3, [sp, #4]
 8013b2e:	f1b8 0300 	subs.w	r3, r8, #0
 8013b32:	d027      	beq.n	8013b84 <__d2b+0x76>
 8013b34:	a802      	add	r0, sp, #8
 8013b36:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013b3a:	f7ff fe01 	bl	8013740 <__lo0bits>
 8013b3e:	9900      	ldr	r1, [sp, #0]
 8013b40:	b1f0      	cbz	r0, 8013b80 <__d2b+0x72>
 8013b42:	9a01      	ldr	r2, [sp, #4]
 8013b44:	f1c0 0320 	rsb	r3, r0, #32
 8013b48:	fa02 f303 	lsl.w	r3, r2, r3
 8013b4c:	430b      	orrs	r3, r1
 8013b4e:	40c2      	lsrs	r2, r0
 8013b50:	617b      	str	r3, [r7, #20]
 8013b52:	9201      	str	r2, [sp, #4]
 8013b54:	9b01      	ldr	r3, [sp, #4]
 8013b56:	61bb      	str	r3, [r7, #24]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	bf14      	ite	ne
 8013b5c:	2102      	movne	r1, #2
 8013b5e:	2101      	moveq	r1, #1
 8013b60:	6139      	str	r1, [r7, #16]
 8013b62:	b1c4      	cbz	r4, 8013b96 <__d2b+0x88>
 8013b64:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013b68:	4404      	add	r4, r0
 8013b6a:	6034      	str	r4, [r6, #0]
 8013b6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013b70:	6028      	str	r0, [r5, #0]
 8013b72:	4638      	mov	r0, r7
 8013b74:	b003      	add	sp, #12
 8013b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013b7e:	e7d5      	b.n	8013b2c <__d2b+0x1e>
 8013b80:	6179      	str	r1, [r7, #20]
 8013b82:	e7e7      	b.n	8013b54 <__d2b+0x46>
 8013b84:	a801      	add	r0, sp, #4
 8013b86:	f7ff fddb 	bl	8013740 <__lo0bits>
 8013b8a:	9b01      	ldr	r3, [sp, #4]
 8013b8c:	617b      	str	r3, [r7, #20]
 8013b8e:	2101      	movs	r1, #1
 8013b90:	6139      	str	r1, [r7, #16]
 8013b92:	3020      	adds	r0, #32
 8013b94:	e7e5      	b.n	8013b62 <__d2b+0x54>
 8013b96:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013b9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013b9e:	6030      	str	r0, [r6, #0]
 8013ba0:	6918      	ldr	r0, [r3, #16]
 8013ba2:	f7ff fdae 	bl	8013702 <__hi0bits>
 8013ba6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013baa:	e7e1      	b.n	8013b70 <__d2b+0x62>

08013bac <_calloc_r>:
 8013bac:	b538      	push	{r3, r4, r5, lr}
 8013bae:	fb02 f401 	mul.w	r4, r2, r1
 8013bb2:	4621      	mov	r1, r4
 8013bb4:	f000 f856 	bl	8013c64 <_malloc_r>
 8013bb8:	4605      	mov	r5, r0
 8013bba:	b118      	cbz	r0, 8013bc4 <_calloc_r+0x18>
 8013bbc:	4622      	mov	r2, r4
 8013bbe:	2100      	movs	r1, #0
 8013bc0:	f7fd fef0 	bl	80119a4 <memset>
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	bd38      	pop	{r3, r4, r5, pc}

08013bc8 <_free_r>:
 8013bc8:	b538      	push	{r3, r4, r5, lr}
 8013bca:	4605      	mov	r5, r0
 8013bcc:	2900      	cmp	r1, #0
 8013bce:	d045      	beq.n	8013c5c <_free_r+0x94>
 8013bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bd4:	1f0c      	subs	r4, r1, #4
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	bfb8      	it	lt
 8013bda:	18e4      	addlt	r4, r4, r3
 8013bdc:	f000 fc03 	bl	80143e6 <__malloc_lock>
 8013be0:	4a1f      	ldr	r2, [pc, #124]	; (8013c60 <_free_r+0x98>)
 8013be2:	6813      	ldr	r3, [r2, #0]
 8013be4:	4610      	mov	r0, r2
 8013be6:	b933      	cbnz	r3, 8013bf6 <_free_r+0x2e>
 8013be8:	6063      	str	r3, [r4, #4]
 8013bea:	6014      	str	r4, [r2, #0]
 8013bec:	4628      	mov	r0, r5
 8013bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bf2:	f000 bbf9 	b.w	80143e8 <__malloc_unlock>
 8013bf6:	42a3      	cmp	r3, r4
 8013bf8:	d90c      	bls.n	8013c14 <_free_r+0x4c>
 8013bfa:	6821      	ldr	r1, [r4, #0]
 8013bfc:	1862      	adds	r2, r4, r1
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	bf04      	itt	eq
 8013c02:	681a      	ldreq	r2, [r3, #0]
 8013c04:	685b      	ldreq	r3, [r3, #4]
 8013c06:	6063      	str	r3, [r4, #4]
 8013c08:	bf04      	itt	eq
 8013c0a:	1852      	addeq	r2, r2, r1
 8013c0c:	6022      	streq	r2, [r4, #0]
 8013c0e:	6004      	str	r4, [r0, #0]
 8013c10:	e7ec      	b.n	8013bec <_free_r+0x24>
 8013c12:	4613      	mov	r3, r2
 8013c14:	685a      	ldr	r2, [r3, #4]
 8013c16:	b10a      	cbz	r2, 8013c1c <_free_r+0x54>
 8013c18:	42a2      	cmp	r2, r4
 8013c1a:	d9fa      	bls.n	8013c12 <_free_r+0x4a>
 8013c1c:	6819      	ldr	r1, [r3, #0]
 8013c1e:	1858      	adds	r0, r3, r1
 8013c20:	42a0      	cmp	r0, r4
 8013c22:	d10b      	bne.n	8013c3c <_free_r+0x74>
 8013c24:	6820      	ldr	r0, [r4, #0]
 8013c26:	4401      	add	r1, r0
 8013c28:	1858      	adds	r0, r3, r1
 8013c2a:	4282      	cmp	r2, r0
 8013c2c:	6019      	str	r1, [r3, #0]
 8013c2e:	d1dd      	bne.n	8013bec <_free_r+0x24>
 8013c30:	6810      	ldr	r0, [r2, #0]
 8013c32:	6852      	ldr	r2, [r2, #4]
 8013c34:	605a      	str	r2, [r3, #4]
 8013c36:	4401      	add	r1, r0
 8013c38:	6019      	str	r1, [r3, #0]
 8013c3a:	e7d7      	b.n	8013bec <_free_r+0x24>
 8013c3c:	d902      	bls.n	8013c44 <_free_r+0x7c>
 8013c3e:	230c      	movs	r3, #12
 8013c40:	602b      	str	r3, [r5, #0]
 8013c42:	e7d3      	b.n	8013bec <_free_r+0x24>
 8013c44:	6820      	ldr	r0, [r4, #0]
 8013c46:	1821      	adds	r1, r4, r0
 8013c48:	428a      	cmp	r2, r1
 8013c4a:	bf04      	itt	eq
 8013c4c:	6811      	ldreq	r1, [r2, #0]
 8013c4e:	6852      	ldreq	r2, [r2, #4]
 8013c50:	6062      	str	r2, [r4, #4]
 8013c52:	bf04      	itt	eq
 8013c54:	1809      	addeq	r1, r1, r0
 8013c56:	6021      	streq	r1, [r4, #0]
 8013c58:	605c      	str	r4, [r3, #4]
 8013c5a:	e7c7      	b.n	8013bec <_free_r+0x24>
 8013c5c:	bd38      	pop	{r3, r4, r5, pc}
 8013c5e:	bf00      	nop
 8013c60:	20002264 	.word	0x20002264

08013c64 <_malloc_r>:
 8013c64:	b570      	push	{r4, r5, r6, lr}
 8013c66:	1ccd      	adds	r5, r1, #3
 8013c68:	f025 0503 	bic.w	r5, r5, #3
 8013c6c:	3508      	adds	r5, #8
 8013c6e:	2d0c      	cmp	r5, #12
 8013c70:	bf38      	it	cc
 8013c72:	250c      	movcc	r5, #12
 8013c74:	2d00      	cmp	r5, #0
 8013c76:	4606      	mov	r6, r0
 8013c78:	db01      	blt.n	8013c7e <_malloc_r+0x1a>
 8013c7a:	42a9      	cmp	r1, r5
 8013c7c:	d903      	bls.n	8013c86 <_malloc_r+0x22>
 8013c7e:	230c      	movs	r3, #12
 8013c80:	6033      	str	r3, [r6, #0]
 8013c82:	2000      	movs	r0, #0
 8013c84:	bd70      	pop	{r4, r5, r6, pc}
 8013c86:	f000 fbae 	bl	80143e6 <__malloc_lock>
 8013c8a:	4a21      	ldr	r2, [pc, #132]	; (8013d10 <_malloc_r+0xac>)
 8013c8c:	6814      	ldr	r4, [r2, #0]
 8013c8e:	4621      	mov	r1, r4
 8013c90:	b991      	cbnz	r1, 8013cb8 <_malloc_r+0x54>
 8013c92:	4c20      	ldr	r4, [pc, #128]	; (8013d14 <_malloc_r+0xb0>)
 8013c94:	6823      	ldr	r3, [r4, #0]
 8013c96:	b91b      	cbnz	r3, 8013ca0 <_malloc_r+0x3c>
 8013c98:	4630      	mov	r0, r6
 8013c9a:	f000 facf 	bl	801423c <_sbrk_r>
 8013c9e:	6020      	str	r0, [r4, #0]
 8013ca0:	4629      	mov	r1, r5
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f000 faca 	bl	801423c <_sbrk_r>
 8013ca8:	1c43      	adds	r3, r0, #1
 8013caa:	d124      	bne.n	8013cf6 <_malloc_r+0x92>
 8013cac:	230c      	movs	r3, #12
 8013cae:	6033      	str	r3, [r6, #0]
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	f000 fb99 	bl	80143e8 <__malloc_unlock>
 8013cb6:	e7e4      	b.n	8013c82 <_malloc_r+0x1e>
 8013cb8:	680b      	ldr	r3, [r1, #0]
 8013cba:	1b5b      	subs	r3, r3, r5
 8013cbc:	d418      	bmi.n	8013cf0 <_malloc_r+0x8c>
 8013cbe:	2b0b      	cmp	r3, #11
 8013cc0:	d90f      	bls.n	8013ce2 <_malloc_r+0x7e>
 8013cc2:	600b      	str	r3, [r1, #0]
 8013cc4:	50cd      	str	r5, [r1, r3]
 8013cc6:	18cc      	adds	r4, r1, r3
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f000 fb8d 	bl	80143e8 <__malloc_unlock>
 8013cce:	f104 000b 	add.w	r0, r4, #11
 8013cd2:	1d23      	adds	r3, r4, #4
 8013cd4:	f020 0007 	bic.w	r0, r0, #7
 8013cd8:	1ac3      	subs	r3, r0, r3
 8013cda:	d0d3      	beq.n	8013c84 <_malloc_r+0x20>
 8013cdc:	425a      	negs	r2, r3
 8013cde:	50e2      	str	r2, [r4, r3]
 8013ce0:	e7d0      	b.n	8013c84 <_malloc_r+0x20>
 8013ce2:	428c      	cmp	r4, r1
 8013ce4:	684b      	ldr	r3, [r1, #4]
 8013ce6:	bf16      	itet	ne
 8013ce8:	6063      	strne	r3, [r4, #4]
 8013cea:	6013      	streq	r3, [r2, #0]
 8013cec:	460c      	movne	r4, r1
 8013cee:	e7eb      	b.n	8013cc8 <_malloc_r+0x64>
 8013cf0:	460c      	mov	r4, r1
 8013cf2:	6849      	ldr	r1, [r1, #4]
 8013cf4:	e7cc      	b.n	8013c90 <_malloc_r+0x2c>
 8013cf6:	1cc4      	adds	r4, r0, #3
 8013cf8:	f024 0403 	bic.w	r4, r4, #3
 8013cfc:	42a0      	cmp	r0, r4
 8013cfe:	d005      	beq.n	8013d0c <_malloc_r+0xa8>
 8013d00:	1a21      	subs	r1, r4, r0
 8013d02:	4630      	mov	r0, r6
 8013d04:	f000 fa9a 	bl	801423c <_sbrk_r>
 8013d08:	3001      	adds	r0, #1
 8013d0a:	d0cf      	beq.n	8013cac <_malloc_r+0x48>
 8013d0c:	6025      	str	r5, [r4, #0]
 8013d0e:	e7db      	b.n	8013cc8 <_malloc_r+0x64>
 8013d10:	20002264 	.word	0x20002264
 8013d14:	20002268 	.word	0x20002268

08013d18 <__ssputs_r>:
 8013d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d1c:	688e      	ldr	r6, [r1, #8]
 8013d1e:	429e      	cmp	r6, r3
 8013d20:	4682      	mov	sl, r0
 8013d22:	460c      	mov	r4, r1
 8013d24:	4690      	mov	r8, r2
 8013d26:	4699      	mov	r9, r3
 8013d28:	d837      	bhi.n	8013d9a <__ssputs_r+0x82>
 8013d2a:	898a      	ldrh	r2, [r1, #12]
 8013d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013d30:	d031      	beq.n	8013d96 <__ssputs_r+0x7e>
 8013d32:	6825      	ldr	r5, [r4, #0]
 8013d34:	6909      	ldr	r1, [r1, #16]
 8013d36:	1a6f      	subs	r7, r5, r1
 8013d38:	6965      	ldr	r5, [r4, #20]
 8013d3a:	2302      	movs	r3, #2
 8013d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d40:	fb95 f5f3 	sdiv	r5, r5, r3
 8013d44:	f109 0301 	add.w	r3, r9, #1
 8013d48:	443b      	add	r3, r7
 8013d4a:	429d      	cmp	r5, r3
 8013d4c:	bf38      	it	cc
 8013d4e:	461d      	movcc	r5, r3
 8013d50:	0553      	lsls	r3, r2, #21
 8013d52:	d530      	bpl.n	8013db6 <__ssputs_r+0x9e>
 8013d54:	4629      	mov	r1, r5
 8013d56:	f7ff ff85 	bl	8013c64 <_malloc_r>
 8013d5a:	4606      	mov	r6, r0
 8013d5c:	b950      	cbnz	r0, 8013d74 <__ssputs_r+0x5c>
 8013d5e:	230c      	movs	r3, #12
 8013d60:	f8ca 3000 	str.w	r3, [sl]
 8013d64:	89a3      	ldrh	r3, [r4, #12]
 8013d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d6a:	81a3      	strh	r3, [r4, #12]
 8013d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d74:	463a      	mov	r2, r7
 8013d76:	6921      	ldr	r1, [r4, #16]
 8013d78:	f7ff fc32 	bl	80135e0 <memcpy>
 8013d7c:	89a3      	ldrh	r3, [r4, #12]
 8013d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d86:	81a3      	strh	r3, [r4, #12]
 8013d88:	6126      	str	r6, [r4, #16]
 8013d8a:	6165      	str	r5, [r4, #20]
 8013d8c:	443e      	add	r6, r7
 8013d8e:	1bed      	subs	r5, r5, r7
 8013d90:	6026      	str	r6, [r4, #0]
 8013d92:	60a5      	str	r5, [r4, #8]
 8013d94:	464e      	mov	r6, r9
 8013d96:	454e      	cmp	r6, r9
 8013d98:	d900      	bls.n	8013d9c <__ssputs_r+0x84>
 8013d9a:	464e      	mov	r6, r9
 8013d9c:	4632      	mov	r2, r6
 8013d9e:	4641      	mov	r1, r8
 8013da0:	6820      	ldr	r0, [r4, #0]
 8013da2:	f000 fb07 	bl	80143b4 <memmove>
 8013da6:	68a3      	ldr	r3, [r4, #8]
 8013da8:	1b9b      	subs	r3, r3, r6
 8013daa:	60a3      	str	r3, [r4, #8]
 8013dac:	6823      	ldr	r3, [r4, #0]
 8013dae:	441e      	add	r6, r3
 8013db0:	6026      	str	r6, [r4, #0]
 8013db2:	2000      	movs	r0, #0
 8013db4:	e7dc      	b.n	8013d70 <__ssputs_r+0x58>
 8013db6:	462a      	mov	r2, r5
 8013db8:	f000 fb17 	bl	80143ea <_realloc_r>
 8013dbc:	4606      	mov	r6, r0
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	d1e2      	bne.n	8013d88 <__ssputs_r+0x70>
 8013dc2:	6921      	ldr	r1, [r4, #16]
 8013dc4:	4650      	mov	r0, sl
 8013dc6:	f7ff feff 	bl	8013bc8 <_free_r>
 8013dca:	e7c8      	b.n	8013d5e <__ssputs_r+0x46>

08013dcc <_svfiprintf_r>:
 8013dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd0:	461d      	mov	r5, r3
 8013dd2:	898b      	ldrh	r3, [r1, #12]
 8013dd4:	061f      	lsls	r7, r3, #24
 8013dd6:	b09d      	sub	sp, #116	; 0x74
 8013dd8:	4680      	mov	r8, r0
 8013dda:	460c      	mov	r4, r1
 8013ddc:	4616      	mov	r6, r2
 8013dde:	d50f      	bpl.n	8013e00 <_svfiprintf_r+0x34>
 8013de0:	690b      	ldr	r3, [r1, #16]
 8013de2:	b96b      	cbnz	r3, 8013e00 <_svfiprintf_r+0x34>
 8013de4:	2140      	movs	r1, #64	; 0x40
 8013de6:	f7ff ff3d 	bl	8013c64 <_malloc_r>
 8013dea:	6020      	str	r0, [r4, #0]
 8013dec:	6120      	str	r0, [r4, #16]
 8013dee:	b928      	cbnz	r0, 8013dfc <_svfiprintf_r+0x30>
 8013df0:	230c      	movs	r3, #12
 8013df2:	f8c8 3000 	str.w	r3, [r8]
 8013df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013dfa:	e0c8      	b.n	8013f8e <_svfiprintf_r+0x1c2>
 8013dfc:	2340      	movs	r3, #64	; 0x40
 8013dfe:	6163      	str	r3, [r4, #20]
 8013e00:	2300      	movs	r3, #0
 8013e02:	9309      	str	r3, [sp, #36]	; 0x24
 8013e04:	2320      	movs	r3, #32
 8013e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e0a:	2330      	movs	r3, #48	; 0x30
 8013e0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e10:	9503      	str	r5, [sp, #12]
 8013e12:	f04f 0b01 	mov.w	fp, #1
 8013e16:	4637      	mov	r7, r6
 8013e18:	463d      	mov	r5, r7
 8013e1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013e1e:	b10b      	cbz	r3, 8013e24 <_svfiprintf_r+0x58>
 8013e20:	2b25      	cmp	r3, #37	; 0x25
 8013e22:	d13e      	bne.n	8013ea2 <_svfiprintf_r+0xd6>
 8013e24:	ebb7 0a06 	subs.w	sl, r7, r6
 8013e28:	d00b      	beq.n	8013e42 <_svfiprintf_r+0x76>
 8013e2a:	4653      	mov	r3, sl
 8013e2c:	4632      	mov	r2, r6
 8013e2e:	4621      	mov	r1, r4
 8013e30:	4640      	mov	r0, r8
 8013e32:	f7ff ff71 	bl	8013d18 <__ssputs_r>
 8013e36:	3001      	adds	r0, #1
 8013e38:	f000 80a4 	beq.w	8013f84 <_svfiprintf_r+0x1b8>
 8013e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e3e:	4453      	add	r3, sl
 8013e40:	9309      	str	r3, [sp, #36]	; 0x24
 8013e42:	783b      	ldrb	r3, [r7, #0]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	f000 809d 	beq.w	8013f84 <_svfiprintf_r+0x1b8>
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e54:	9304      	str	r3, [sp, #16]
 8013e56:	9307      	str	r3, [sp, #28]
 8013e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8013e5e:	462f      	mov	r7, r5
 8013e60:	2205      	movs	r2, #5
 8013e62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013e66:	4850      	ldr	r0, [pc, #320]	; (8013fa8 <_svfiprintf_r+0x1dc>)
 8013e68:	f7ec f9e2 	bl	8000230 <memchr>
 8013e6c:	9b04      	ldr	r3, [sp, #16]
 8013e6e:	b9d0      	cbnz	r0, 8013ea6 <_svfiprintf_r+0xda>
 8013e70:	06d9      	lsls	r1, r3, #27
 8013e72:	bf44      	itt	mi
 8013e74:	2220      	movmi	r2, #32
 8013e76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e7a:	071a      	lsls	r2, r3, #28
 8013e7c:	bf44      	itt	mi
 8013e7e:	222b      	movmi	r2, #43	; 0x2b
 8013e80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e84:	782a      	ldrb	r2, [r5, #0]
 8013e86:	2a2a      	cmp	r2, #42	; 0x2a
 8013e88:	d015      	beq.n	8013eb6 <_svfiprintf_r+0xea>
 8013e8a:	9a07      	ldr	r2, [sp, #28]
 8013e8c:	462f      	mov	r7, r5
 8013e8e:	2000      	movs	r0, #0
 8013e90:	250a      	movs	r5, #10
 8013e92:	4639      	mov	r1, r7
 8013e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e98:	3b30      	subs	r3, #48	; 0x30
 8013e9a:	2b09      	cmp	r3, #9
 8013e9c:	d94d      	bls.n	8013f3a <_svfiprintf_r+0x16e>
 8013e9e:	b1b8      	cbz	r0, 8013ed0 <_svfiprintf_r+0x104>
 8013ea0:	e00f      	b.n	8013ec2 <_svfiprintf_r+0xf6>
 8013ea2:	462f      	mov	r7, r5
 8013ea4:	e7b8      	b.n	8013e18 <_svfiprintf_r+0x4c>
 8013ea6:	4a40      	ldr	r2, [pc, #256]	; (8013fa8 <_svfiprintf_r+0x1dc>)
 8013ea8:	1a80      	subs	r0, r0, r2
 8013eaa:	fa0b f000 	lsl.w	r0, fp, r0
 8013eae:	4318      	orrs	r0, r3
 8013eb0:	9004      	str	r0, [sp, #16]
 8013eb2:	463d      	mov	r5, r7
 8013eb4:	e7d3      	b.n	8013e5e <_svfiprintf_r+0x92>
 8013eb6:	9a03      	ldr	r2, [sp, #12]
 8013eb8:	1d11      	adds	r1, r2, #4
 8013eba:	6812      	ldr	r2, [r2, #0]
 8013ebc:	9103      	str	r1, [sp, #12]
 8013ebe:	2a00      	cmp	r2, #0
 8013ec0:	db01      	blt.n	8013ec6 <_svfiprintf_r+0xfa>
 8013ec2:	9207      	str	r2, [sp, #28]
 8013ec4:	e004      	b.n	8013ed0 <_svfiprintf_r+0x104>
 8013ec6:	4252      	negs	r2, r2
 8013ec8:	f043 0302 	orr.w	r3, r3, #2
 8013ecc:	9207      	str	r2, [sp, #28]
 8013ece:	9304      	str	r3, [sp, #16]
 8013ed0:	783b      	ldrb	r3, [r7, #0]
 8013ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8013ed4:	d10c      	bne.n	8013ef0 <_svfiprintf_r+0x124>
 8013ed6:	787b      	ldrb	r3, [r7, #1]
 8013ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8013eda:	d133      	bne.n	8013f44 <_svfiprintf_r+0x178>
 8013edc:	9b03      	ldr	r3, [sp, #12]
 8013ede:	1d1a      	adds	r2, r3, #4
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	9203      	str	r2, [sp, #12]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	bfb8      	it	lt
 8013ee8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013eec:	3702      	adds	r7, #2
 8013eee:	9305      	str	r3, [sp, #20]
 8013ef0:	4d2e      	ldr	r5, [pc, #184]	; (8013fac <_svfiprintf_r+0x1e0>)
 8013ef2:	7839      	ldrb	r1, [r7, #0]
 8013ef4:	2203      	movs	r2, #3
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	f7ec f99a 	bl	8000230 <memchr>
 8013efc:	b138      	cbz	r0, 8013f0e <_svfiprintf_r+0x142>
 8013efe:	2340      	movs	r3, #64	; 0x40
 8013f00:	1b40      	subs	r0, r0, r5
 8013f02:	fa03 f000 	lsl.w	r0, r3, r0
 8013f06:	9b04      	ldr	r3, [sp, #16]
 8013f08:	4303      	orrs	r3, r0
 8013f0a:	3701      	adds	r7, #1
 8013f0c:	9304      	str	r3, [sp, #16]
 8013f0e:	7839      	ldrb	r1, [r7, #0]
 8013f10:	4827      	ldr	r0, [pc, #156]	; (8013fb0 <_svfiprintf_r+0x1e4>)
 8013f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f16:	2206      	movs	r2, #6
 8013f18:	1c7e      	adds	r6, r7, #1
 8013f1a:	f7ec f989 	bl	8000230 <memchr>
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d038      	beq.n	8013f94 <_svfiprintf_r+0x1c8>
 8013f22:	4b24      	ldr	r3, [pc, #144]	; (8013fb4 <_svfiprintf_r+0x1e8>)
 8013f24:	bb13      	cbnz	r3, 8013f6c <_svfiprintf_r+0x1a0>
 8013f26:	9b03      	ldr	r3, [sp, #12]
 8013f28:	3307      	adds	r3, #7
 8013f2a:	f023 0307 	bic.w	r3, r3, #7
 8013f2e:	3308      	adds	r3, #8
 8013f30:	9303      	str	r3, [sp, #12]
 8013f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f34:	444b      	add	r3, r9
 8013f36:	9309      	str	r3, [sp, #36]	; 0x24
 8013f38:	e76d      	b.n	8013e16 <_svfiprintf_r+0x4a>
 8013f3a:	fb05 3202 	mla	r2, r5, r2, r3
 8013f3e:	2001      	movs	r0, #1
 8013f40:	460f      	mov	r7, r1
 8013f42:	e7a6      	b.n	8013e92 <_svfiprintf_r+0xc6>
 8013f44:	2300      	movs	r3, #0
 8013f46:	3701      	adds	r7, #1
 8013f48:	9305      	str	r3, [sp, #20]
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	250a      	movs	r5, #10
 8013f4e:	4638      	mov	r0, r7
 8013f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f54:	3a30      	subs	r2, #48	; 0x30
 8013f56:	2a09      	cmp	r2, #9
 8013f58:	d903      	bls.n	8013f62 <_svfiprintf_r+0x196>
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d0c8      	beq.n	8013ef0 <_svfiprintf_r+0x124>
 8013f5e:	9105      	str	r1, [sp, #20]
 8013f60:	e7c6      	b.n	8013ef0 <_svfiprintf_r+0x124>
 8013f62:	fb05 2101 	mla	r1, r5, r1, r2
 8013f66:	2301      	movs	r3, #1
 8013f68:	4607      	mov	r7, r0
 8013f6a:	e7f0      	b.n	8013f4e <_svfiprintf_r+0x182>
 8013f6c:	ab03      	add	r3, sp, #12
 8013f6e:	9300      	str	r3, [sp, #0]
 8013f70:	4622      	mov	r2, r4
 8013f72:	4b11      	ldr	r3, [pc, #68]	; (8013fb8 <_svfiprintf_r+0x1ec>)
 8013f74:	a904      	add	r1, sp, #16
 8013f76:	4640      	mov	r0, r8
 8013f78:	f7fd fdb0 	bl	8011adc <_printf_float>
 8013f7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013f80:	4681      	mov	r9, r0
 8013f82:	d1d6      	bne.n	8013f32 <_svfiprintf_r+0x166>
 8013f84:	89a3      	ldrh	r3, [r4, #12]
 8013f86:	065b      	lsls	r3, r3, #25
 8013f88:	f53f af35 	bmi.w	8013df6 <_svfiprintf_r+0x2a>
 8013f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f8e:	b01d      	add	sp, #116	; 0x74
 8013f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f94:	ab03      	add	r3, sp, #12
 8013f96:	9300      	str	r3, [sp, #0]
 8013f98:	4622      	mov	r2, r4
 8013f9a:	4b07      	ldr	r3, [pc, #28]	; (8013fb8 <_svfiprintf_r+0x1ec>)
 8013f9c:	a904      	add	r1, sp, #16
 8013f9e:	4640      	mov	r0, r8
 8013fa0:	f7fe f852 	bl	8012048 <_printf_i>
 8013fa4:	e7ea      	b.n	8013f7c <_svfiprintf_r+0x1b0>
 8013fa6:	bf00      	nop
 8013fa8:	08016de4 	.word	0x08016de4
 8013fac:	08016dea 	.word	0x08016dea
 8013fb0:	08016dee 	.word	0x08016dee
 8013fb4:	08011add 	.word	0x08011add
 8013fb8:	08013d19 	.word	0x08013d19

08013fbc <__sfputc_r>:
 8013fbc:	6893      	ldr	r3, [r2, #8]
 8013fbe:	3b01      	subs	r3, #1
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	b410      	push	{r4}
 8013fc4:	6093      	str	r3, [r2, #8]
 8013fc6:	da08      	bge.n	8013fda <__sfputc_r+0x1e>
 8013fc8:	6994      	ldr	r4, [r2, #24]
 8013fca:	42a3      	cmp	r3, r4
 8013fcc:	db01      	blt.n	8013fd2 <__sfputc_r+0x16>
 8013fce:	290a      	cmp	r1, #10
 8013fd0:	d103      	bne.n	8013fda <__sfputc_r+0x1e>
 8013fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fd6:	f7fe ba09 	b.w	80123ec <__swbuf_r>
 8013fda:	6813      	ldr	r3, [r2, #0]
 8013fdc:	1c58      	adds	r0, r3, #1
 8013fde:	6010      	str	r0, [r2, #0]
 8013fe0:	7019      	strb	r1, [r3, #0]
 8013fe2:	4608      	mov	r0, r1
 8013fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fe8:	4770      	bx	lr

08013fea <__sfputs_r>:
 8013fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fec:	4606      	mov	r6, r0
 8013fee:	460f      	mov	r7, r1
 8013ff0:	4614      	mov	r4, r2
 8013ff2:	18d5      	adds	r5, r2, r3
 8013ff4:	42ac      	cmp	r4, r5
 8013ff6:	d101      	bne.n	8013ffc <__sfputs_r+0x12>
 8013ff8:	2000      	movs	r0, #0
 8013ffa:	e007      	b.n	801400c <__sfputs_r+0x22>
 8013ffc:	463a      	mov	r2, r7
 8013ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014002:	4630      	mov	r0, r6
 8014004:	f7ff ffda 	bl	8013fbc <__sfputc_r>
 8014008:	1c43      	adds	r3, r0, #1
 801400a:	d1f3      	bne.n	8013ff4 <__sfputs_r+0xa>
 801400c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014010 <_vfiprintf_r>:
 8014010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014014:	460c      	mov	r4, r1
 8014016:	b09d      	sub	sp, #116	; 0x74
 8014018:	4617      	mov	r7, r2
 801401a:	461d      	mov	r5, r3
 801401c:	4606      	mov	r6, r0
 801401e:	b118      	cbz	r0, 8014028 <_vfiprintf_r+0x18>
 8014020:	6983      	ldr	r3, [r0, #24]
 8014022:	b90b      	cbnz	r3, 8014028 <_vfiprintf_r+0x18>
 8014024:	f7ff f9d8 	bl	80133d8 <__sinit>
 8014028:	4b7c      	ldr	r3, [pc, #496]	; (801421c <_vfiprintf_r+0x20c>)
 801402a:	429c      	cmp	r4, r3
 801402c:	d158      	bne.n	80140e0 <_vfiprintf_r+0xd0>
 801402e:	6874      	ldr	r4, [r6, #4]
 8014030:	89a3      	ldrh	r3, [r4, #12]
 8014032:	0718      	lsls	r0, r3, #28
 8014034:	d55e      	bpl.n	80140f4 <_vfiprintf_r+0xe4>
 8014036:	6923      	ldr	r3, [r4, #16]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d05b      	beq.n	80140f4 <_vfiprintf_r+0xe4>
 801403c:	2300      	movs	r3, #0
 801403e:	9309      	str	r3, [sp, #36]	; 0x24
 8014040:	2320      	movs	r3, #32
 8014042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014046:	2330      	movs	r3, #48	; 0x30
 8014048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801404c:	9503      	str	r5, [sp, #12]
 801404e:	f04f 0b01 	mov.w	fp, #1
 8014052:	46b8      	mov	r8, r7
 8014054:	4645      	mov	r5, r8
 8014056:	f815 3b01 	ldrb.w	r3, [r5], #1
 801405a:	b10b      	cbz	r3, 8014060 <_vfiprintf_r+0x50>
 801405c:	2b25      	cmp	r3, #37	; 0x25
 801405e:	d154      	bne.n	801410a <_vfiprintf_r+0xfa>
 8014060:	ebb8 0a07 	subs.w	sl, r8, r7
 8014064:	d00b      	beq.n	801407e <_vfiprintf_r+0x6e>
 8014066:	4653      	mov	r3, sl
 8014068:	463a      	mov	r2, r7
 801406a:	4621      	mov	r1, r4
 801406c:	4630      	mov	r0, r6
 801406e:	f7ff ffbc 	bl	8013fea <__sfputs_r>
 8014072:	3001      	adds	r0, #1
 8014074:	f000 80c2 	beq.w	80141fc <_vfiprintf_r+0x1ec>
 8014078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801407a:	4453      	add	r3, sl
 801407c:	9309      	str	r3, [sp, #36]	; 0x24
 801407e:	f898 3000 	ldrb.w	r3, [r8]
 8014082:	2b00      	cmp	r3, #0
 8014084:	f000 80ba 	beq.w	80141fc <_vfiprintf_r+0x1ec>
 8014088:	2300      	movs	r3, #0
 801408a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801408e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014092:	9304      	str	r3, [sp, #16]
 8014094:	9307      	str	r3, [sp, #28]
 8014096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801409a:	931a      	str	r3, [sp, #104]	; 0x68
 801409c:	46a8      	mov	r8, r5
 801409e:	2205      	movs	r2, #5
 80140a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80140a4:	485e      	ldr	r0, [pc, #376]	; (8014220 <_vfiprintf_r+0x210>)
 80140a6:	f7ec f8c3 	bl	8000230 <memchr>
 80140aa:	9b04      	ldr	r3, [sp, #16]
 80140ac:	bb78      	cbnz	r0, 801410e <_vfiprintf_r+0xfe>
 80140ae:	06d9      	lsls	r1, r3, #27
 80140b0:	bf44      	itt	mi
 80140b2:	2220      	movmi	r2, #32
 80140b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140b8:	071a      	lsls	r2, r3, #28
 80140ba:	bf44      	itt	mi
 80140bc:	222b      	movmi	r2, #43	; 0x2b
 80140be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140c2:	782a      	ldrb	r2, [r5, #0]
 80140c4:	2a2a      	cmp	r2, #42	; 0x2a
 80140c6:	d02a      	beq.n	801411e <_vfiprintf_r+0x10e>
 80140c8:	9a07      	ldr	r2, [sp, #28]
 80140ca:	46a8      	mov	r8, r5
 80140cc:	2000      	movs	r0, #0
 80140ce:	250a      	movs	r5, #10
 80140d0:	4641      	mov	r1, r8
 80140d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140d6:	3b30      	subs	r3, #48	; 0x30
 80140d8:	2b09      	cmp	r3, #9
 80140da:	d969      	bls.n	80141b0 <_vfiprintf_r+0x1a0>
 80140dc:	b360      	cbz	r0, 8014138 <_vfiprintf_r+0x128>
 80140de:	e024      	b.n	801412a <_vfiprintf_r+0x11a>
 80140e0:	4b50      	ldr	r3, [pc, #320]	; (8014224 <_vfiprintf_r+0x214>)
 80140e2:	429c      	cmp	r4, r3
 80140e4:	d101      	bne.n	80140ea <_vfiprintf_r+0xda>
 80140e6:	68b4      	ldr	r4, [r6, #8]
 80140e8:	e7a2      	b.n	8014030 <_vfiprintf_r+0x20>
 80140ea:	4b4f      	ldr	r3, [pc, #316]	; (8014228 <_vfiprintf_r+0x218>)
 80140ec:	429c      	cmp	r4, r3
 80140ee:	bf08      	it	eq
 80140f0:	68f4      	ldreq	r4, [r6, #12]
 80140f2:	e79d      	b.n	8014030 <_vfiprintf_r+0x20>
 80140f4:	4621      	mov	r1, r4
 80140f6:	4630      	mov	r0, r6
 80140f8:	f7fe f9ca 	bl	8012490 <__swsetup_r>
 80140fc:	2800      	cmp	r0, #0
 80140fe:	d09d      	beq.n	801403c <_vfiprintf_r+0x2c>
 8014100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014104:	b01d      	add	sp, #116	; 0x74
 8014106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801410a:	46a8      	mov	r8, r5
 801410c:	e7a2      	b.n	8014054 <_vfiprintf_r+0x44>
 801410e:	4a44      	ldr	r2, [pc, #272]	; (8014220 <_vfiprintf_r+0x210>)
 8014110:	1a80      	subs	r0, r0, r2
 8014112:	fa0b f000 	lsl.w	r0, fp, r0
 8014116:	4318      	orrs	r0, r3
 8014118:	9004      	str	r0, [sp, #16]
 801411a:	4645      	mov	r5, r8
 801411c:	e7be      	b.n	801409c <_vfiprintf_r+0x8c>
 801411e:	9a03      	ldr	r2, [sp, #12]
 8014120:	1d11      	adds	r1, r2, #4
 8014122:	6812      	ldr	r2, [r2, #0]
 8014124:	9103      	str	r1, [sp, #12]
 8014126:	2a00      	cmp	r2, #0
 8014128:	db01      	blt.n	801412e <_vfiprintf_r+0x11e>
 801412a:	9207      	str	r2, [sp, #28]
 801412c:	e004      	b.n	8014138 <_vfiprintf_r+0x128>
 801412e:	4252      	negs	r2, r2
 8014130:	f043 0302 	orr.w	r3, r3, #2
 8014134:	9207      	str	r2, [sp, #28]
 8014136:	9304      	str	r3, [sp, #16]
 8014138:	f898 3000 	ldrb.w	r3, [r8]
 801413c:	2b2e      	cmp	r3, #46	; 0x2e
 801413e:	d10e      	bne.n	801415e <_vfiprintf_r+0x14e>
 8014140:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014144:	2b2a      	cmp	r3, #42	; 0x2a
 8014146:	d138      	bne.n	80141ba <_vfiprintf_r+0x1aa>
 8014148:	9b03      	ldr	r3, [sp, #12]
 801414a:	1d1a      	adds	r2, r3, #4
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	9203      	str	r2, [sp, #12]
 8014150:	2b00      	cmp	r3, #0
 8014152:	bfb8      	it	lt
 8014154:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014158:	f108 0802 	add.w	r8, r8, #2
 801415c:	9305      	str	r3, [sp, #20]
 801415e:	4d33      	ldr	r5, [pc, #204]	; (801422c <_vfiprintf_r+0x21c>)
 8014160:	f898 1000 	ldrb.w	r1, [r8]
 8014164:	2203      	movs	r2, #3
 8014166:	4628      	mov	r0, r5
 8014168:	f7ec f862 	bl	8000230 <memchr>
 801416c:	b140      	cbz	r0, 8014180 <_vfiprintf_r+0x170>
 801416e:	2340      	movs	r3, #64	; 0x40
 8014170:	1b40      	subs	r0, r0, r5
 8014172:	fa03 f000 	lsl.w	r0, r3, r0
 8014176:	9b04      	ldr	r3, [sp, #16]
 8014178:	4303      	orrs	r3, r0
 801417a:	f108 0801 	add.w	r8, r8, #1
 801417e:	9304      	str	r3, [sp, #16]
 8014180:	f898 1000 	ldrb.w	r1, [r8]
 8014184:	482a      	ldr	r0, [pc, #168]	; (8014230 <_vfiprintf_r+0x220>)
 8014186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801418a:	2206      	movs	r2, #6
 801418c:	f108 0701 	add.w	r7, r8, #1
 8014190:	f7ec f84e 	bl	8000230 <memchr>
 8014194:	2800      	cmp	r0, #0
 8014196:	d037      	beq.n	8014208 <_vfiprintf_r+0x1f8>
 8014198:	4b26      	ldr	r3, [pc, #152]	; (8014234 <_vfiprintf_r+0x224>)
 801419a:	bb1b      	cbnz	r3, 80141e4 <_vfiprintf_r+0x1d4>
 801419c:	9b03      	ldr	r3, [sp, #12]
 801419e:	3307      	adds	r3, #7
 80141a0:	f023 0307 	bic.w	r3, r3, #7
 80141a4:	3308      	adds	r3, #8
 80141a6:	9303      	str	r3, [sp, #12]
 80141a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141aa:	444b      	add	r3, r9
 80141ac:	9309      	str	r3, [sp, #36]	; 0x24
 80141ae:	e750      	b.n	8014052 <_vfiprintf_r+0x42>
 80141b0:	fb05 3202 	mla	r2, r5, r2, r3
 80141b4:	2001      	movs	r0, #1
 80141b6:	4688      	mov	r8, r1
 80141b8:	e78a      	b.n	80140d0 <_vfiprintf_r+0xc0>
 80141ba:	2300      	movs	r3, #0
 80141bc:	f108 0801 	add.w	r8, r8, #1
 80141c0:	9305      	str	r3, [sp, #20]
 80141c2:	4619      	mov	r1, r3
 80141c4:	250a      	movs	r5, #10
 80141c6:	4640      	mov	r0, r8
 80141c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141cc:	3a30      	subs	r2, #48	; 0x30
 80141ce:	2a09      	cmp	r2, #9
 80141d0:	d903      	bls.n	80141da <_vfiprintf_r+0x1ca>
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d0c3      	beq.n	801415e <_vfiprintf_r+0x14e>
 80141d6:	9105      	str	r1, [sp, #20]
 80141d8:	e7c1      	b.n	801415e <_vfiprintf_r+0x14e>
 80141da:	fb05 2101 	mla	r1, r5, r1, r2
 80141de:	2301      	movs	r3, #1
 80141e0:	4680      	mov	r8, r0
 80141e2:	e7f0      	b.n	80141c6 <_vfiprintf_r+0x1b6>
 80141e4:	ab03      	add	r3, sp, #12
 80141e6:	9300      	str	r3, [sp, #0]
 80141e8:	4622      	mov	r2, r4
 80141ea:	4b13      	ldr	r3, [pc, #76]	; (8014238 <_vfiprintf_r+0x228>)
 80141ec:	a904      	add	r1, sp, #16
 80141ee:	4630      	mov	r0, r6
 80141f0:	f7fd fc74 	bl	8011adc <_printf_float>
 80141f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80141f8:	4681      	mov	r9, r0
 80141fa:	d1d5      	bne.n	80141a8 <_vfiprintf_r+0x198>
 80141fc:	89a3      	ldrh	r3, [r4, #12]
 80141fe:	065b      	lsls	r3, r3, #25
 8014200:	f53f af7e 	bmi.w	8014100 <_vfiprintf_r+0xf0>
 8014204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014206:	e77d      	b.n	8014104 <_vfiprintf_r+0xf4>
 8014208:	ab03      	add	r3, sp, #12
 801420a:	9300      	str	r3, [sp, #0]
 801420c:	4622      	mov	r2, r4
 801420e:	4b0a      	ldr	r3, [pc, #40]	; (8014238 <_vfiprintf_r+0x228>)
 8014210:	a904      	add	r1, sp, #16
 8014212:	4630      	mov	r0, r6
 8014214:	f7fd ff18 	bl	8012048 <_printf_i>
 8014218:	e7ec      	b.n	80141f4 <_vfiprintf_r+0x1e4>
 801421a:	bf00      	nop
 801421c:	08016ca4 	.word	0x08016ca4
 8014220:	08016de4 	.word	0x08016de4
 8014224:	08016cc4 	.word	0x08016cc4
 8014228:	08016c84 	.word	0x08016c84
 801422c:	08016dea 	.word	0x08016dea
 8014230:	08016dee 	.word	0x08016dee
 8014234:	08011add 	.word	0x08011add
 8014238:	08013feb 	.word	0x08013feb

0801423c <_sbrk_r>:
 801423c:	b538      	push	{r3, r4, r5, lr}
 801423e:	4c06      	ldr	r4, [pc, #24]	; (8014258 <_sbrk_r+0x1c>)
 8014240:	2300      	movs	r3, #0
 8014242:	4605      	mov	r5, r0
 8014244:	4608      	mov	r0, r1
 8014246:	6023      	str	r3, [r4, #0]
 8014248:	f7f4 faf4 	bl	8008834 <_sbrk>
 801424c:	1c43      	adds	r3, r0, #1
 801424e:	d102      	bne.n	8014256 <_sbrk_r+0x1a>
 8014250:	6823      	ldr	r3, [r4, #0]
 8014252:	b103      	cbz	r3, 8014256 <_sbrk_r+0x1a>
 8014254:	602b      	str	r3, [r5, #0]
 8014256:	bd38      	pop	{r3, r4, r5, pc}
 8014258:	20002dc8 	.word	0x20002dc8

0801425c <__sread>:
 801425c:	b510      	push	{r4, lr}
 801425e:	460c      	mov	r4, r1
 8014260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014264:	f000 f8e8 	bl	8014438 <_read_r>
 8014268:	2800      	cmp	r0, #0
 801426a:	bfab      	itete	ge
 801426c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801426e:	89a3      	ldrhlt	r3, [r4, #12]
 8014270:	181b      	addge	r3, r3, r0
 8014272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014276:	bfac      	ite	ge
 8014278:	6563      	strge	r3, [r4, #84]	; 0x54
 801427a:	81a3      	strhlt	r3, [r4, #12]
 801427c:	bd10      	pop	{r4, pc}

0801427e <__swrite>:
 801427e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014282:	461f      	mov	r7, r3
 8014284:	898b      	ldrh	r3, [r1, #12]
 8014286:	05db      	lsls	r3, r3, #23
 8014288:	4605      	mov	r5, r0
 801428a:	460c      	mov	r4, r1
 801428c:	4616      	mov	r6, r2
 801428e:	d505      	bpl.n	801429c <__swrite+0x1e>
 8014290:	2302      	movs	r3, #2
 8014292:	2200      	movs	r2, #0
 8014294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014298:	f000 f868 	bl	801436c <_lseek_r>
 801429c:	89a3      	ldrh	r3, [r4, #12]
 801429e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80142a6:	81a3      	strh	r3, [r4, #12]
 80142a8:	4632      	mov	r2, r6
 80142aa:	463b      	mov	r3, r7
 80142ac:	4628      	mov	r0, r5
 80142ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142b2:	f000 b817 	b.w	80142e4 <_write_r>

080142b6 <__sseek>:
 80142b6:	b510      	push	{r4, lr}
 80142b8:	460c      	mov	r4, r1
 80142ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142be:	f000 f855 	bl	801436c <_lseek_r>
 80142c2:	1c43      	adds	r3, r0, #1
 80142c4:	89a3      	ldrh	r3, [r4, #12]
 80142c6:	bf15      	itete	ne
 80142c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80142ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80142ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80142d2:	81a3      	strheq	r3, [r4, #12]
 80142d4:	bf18      	it	ne
 80142d6:	81a3      	strhne	r3, [r4, #12]
 80142d8:	bd10      	pop	{r4, pc}

080142da <__sclose>:
 80142da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142de:	f000 b813 	b.w	8014308 <_close_r>
	...

080142e4 <_write_r>:
 80142e4:	b538      	push	{r3, r4, r5, lr}
 80142e6:	4c07      	ldr	r4, [pc, #28]	; (8014304 <_write_r+0x20>)
 80142e8:	4605      	mov	r5, r0
 80142ea:	4608      	mov	r0, r1
 80142ec:	4611      	mov	r1, r2
 80142ee:	2200      	movs	r2, #0
 80142f0:	6022      	str	r2, [r4, #0]
 80142f2:	461a      	mov	r2, r3
 80142f4:	f7f3 ff4f 	bl	8008196 <_write>
 80142f8:	1c43      	adds	r3, r0, #1
 80142fa:	d102      	bne.n	8014302 <_write_r+0x1e>
 80142fc:	6823      	ldr	r3, [r4, #0]
 80142fe:	b103      	cbz	r3, 8014302 <_write_r+0x1e>
 8014300:	602b      	str	r3, [r5, #0]
 8014302:	bd38      	pop	{r3, r4, r5, pc}
 8014304:	20002dc8 	.word	0x20002dc8

08014308 <_close_r>:
 8014308:	b538      	push	{r3, r4, r5, lr}
 801430a:	4c06      	ldr	r4, [pc, #24]	; (8014324 <_close_r+0x1c>)
 801430c:	2300      	movs	r3, #0
 801430e:	4605      	mov	r5, r0
 8014310:	4608      	mov	r0, r1
 8014312:	6023      	str	r3, [r4, #0]
 8014314:	f7f4 fa59 	bl	80087ca <_close>
 8014318:	1c43      	adds	r3, r0, #1
 801431a:	d102      	bne.n	8014322 <_close_r+0x1a>
 801431c:	6823      	ldr	r3, [r4, #0]
 801431e:	b103      	cbz	r3, 8014322 <_close_r+0x1a>
 8014320:	602b      	str	r3, [r5, #0]
 8014322:	bd38      	pop	{r3, r4, r5, pc}
 8014324:	20002dc8 	.word	0x20002dc8

08014328 <_fstat_r>:
 8014328:	b538      	push	{r3, r4, r5, lr}
 801432a:	4c07      	ldr	r4, [pc, #28]	; (8014348 <_fstat_r+0x20>)
 801432c:	2300      	movs	r3, #0
 801432e:	4605      	mov	r5, r0
 8014330:	4608      	mov	r0, r1
 8014332:	4611      	mov	r1, r2
 8014334:	6023      	str	r3, [r4, #0]
 8014336:	f7f4 fa54 	bl	80087e2 <_fstat>
 801433a:	1c43      	adds	r3, r0, #1
 801433c:	d102      	bne.n	8014344 <_fstat_r+0x1c>
 801433e:	6823      	ldr	r3, [r4, #0]
 8014340:	b103      	cbz	r3, 8014344 <_fstat_r+0x1c>
 8014342:	602b      	str	r3, [r5, #0]
 8014344:	bd38      	pop	{r3, r4, r5, pc}
 8014346:	bf00      	nop
 8014348:	20002dc8 	.word	0x20002dc8

0801434c <_isatty_r>:
 801434c:	b538      	push	{r3, r4, r5, lr}
 801434e:	4c06      	ldr	r4, [pc, #24]	; (8014368 <_isatty_r+0x1c>)
 8014350:	2300      	movs	r3, #0
 8014352:	4605      	mov	r5, r0
 8014354:	4608      	mov	r0, r1
 8014356:	6023      	str	r3, [r4, #0]
 8014358:	f7f4 fa53 	bl	8008802 <_isatty>
 801435c:	1c43      	adds	r3, r0, #1
 801435e:	d102      	bne.n	8014366 <_isatty_r+0x1a>
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	b103      	cbz	r3, 8014366 <_isatty_r+0x1a>
 8014364:	602b      	str	r3, [r5, #0]
 8014366:	bd38      	pop	{r3, r4, r5, pc}
 8014368:	20002dc8 	.word	0x20002dc8

0801436c <_lseek_r>:
 801436c:	b538      	push	{r3, r4, r5, lr}
 801436e:	4c07      	ldr	r4, [pc, #28]	; (801438c <_lseek_r+0x20>)
 8014370:	4605      	mov	r5, r0
 8014372:	4608      	mov	r0, r1
 8014374:	4611      	mov	r1, r2
 8014376:	2200      	movs	r2, #0
 8014378:	6022      	str	r2, [r4, #0]
 801437a:	461a      	mov	r2, r3
 801437c:	f7f4 fa4c 	bl	8008818 <_lseek>
 8014380:	1c43      	adds	r3, r0, #1
 8014382:	d102      	bne.n	801438a <_lseek_r+0x1e>
 8014384:	6823      	ldr	r3, [r4, #0]
 8014386:	b103      	cbz	r3, 801438a <_lseek_r+0x1e>
 8014388:	602b      	str	r3, [r5, #0]
 801438a:	bd38      	pop	{r3, r4, r5, pc}
 801438c:	20002dc8 	.word	0x20002dc8

08014390 <__ascii_mbtowc>:
 8014390:	b082      	sub	sp, #8
 8014392:	b901      	cbnz	r1, 8014396 <__ascii_mbtowc+0x6>
 8014394:	a901      	add	r1, sp, #4
 8014396:	b142      	cbz	r2, 80143aa <__ascii_mbtowc+0x1a>
 8014398:	b14b      	cbz	r3, 80143ae <__ascii_mbtowc+0x1e>
 801439a:	7813      	ldrb	r3, [r2, #0]
 801439c:	600b      	str	r3, [r1, #0]
 801439e:	7812      	ldrb	r2, [r2, #0]
 80143a0:	1c10      	adds	r0, r2, #0
 80143a2:	bf18      	it	ne
 80143a4:	2001      	movne	r0, #1
 80143a6:	b002      	add	sp, #8
 80143a8:	4770      	bx	lr
 80143aa:	4610      	mov	r0, r2
 80143ac:	e7fb      	b.n	80143a6 <__ascii_mbtowc+0x16>
 80143ae:	f06f 0001 	mvn.w	r0, #1
 80143b2:	e7f8      	b.n	80143a6 <__ascii_mbtowc+0x16>

080143b4 <memmove>:
 80143b4:	4288      	cmp	r0, r1
 80143b6:	b510      	push	{r4, lr}
 80143b8:	eb01 0302 	add.w	r3, r1, r2
 80143bc:	d807      	bhi.n	80143ce <memmove+0x1a>
 80143be:	1e42      	subs	r2, r0, #1
 80143c0:	4299      	cmp	r1, r3
 80143c2:	d00a      	beq.n	80143da <memmove+0x26>
 80143c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80143cc:	e7f8      	b.n	80143c0 <memmove+0xc>
 80143ce:	4283      	cmp	r3, r0
 80143d0:	d9f5      	bls.n	80143be <memmove+0xa>
 80143d2:	1881      	adds	r1, r0, r2
 80143d4:	1ad2      	subs	r2, r2, r3
 80143d6:	42d3      	cmn	r3, r2
 80143d8:	d100      	bne.n	80143dc <memmove+0x28>
 80143da:	bd10      	pop	{r4, pc}
 80143dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80143e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80143e4:	e7f7      	b.n	80143d6 <memmove+0x22>

080143e6 <__malloc_lock>:
 80143e6:	4770      	bx	lr

080143e8 <__malloc_unlock>:
 80143e8:	4770      	bx	lr

080143ea <_realloc_r>:
 80143ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ec:	4607      	mov	r7, r0
 80143ee:	4614      	mov	r4, r2
 80143f0:	460e      	mov	r6, r1
 80143f2:	b921      	cbnz	r1, 80143fe <_realloc_r+0x14>
 80143f4:	4611      	mov	r1, r2
 80143f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80143fa:	f7ff bc33 	b.w	8013c64 <_malloc_r>
 80143fe:	b922      	cbnz	r2, 801440a <_realloc_r+0x20>
 8014400:	f7ff fbe2 	bl	8013bc8 <_free_r>
 8014404:	4625      	mov	r5, r4
 8014406:	4628      	mov	r0, r5
 8014408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801440a:	f000 f834 	bl	8014476 <_malloc_usable_size_r>
 801440e:	42a0      	cmp	r0, r4
 8014410:	d20f      	bcs.n	8014432 <_realloc_r+0x48>
 8014412:	4621      	mov	r1, r4
 8014414:	4638      	mov	r0, r7
 8014416:	f7ff fc25 	bl	8013c64 <_malloc_r>
 801441a:	4605      	mov	r5, r0
 801441c:	2800      	cmp	r0, #0
 801441e:	d0f2      	beq.n	8014406 <_realloc_r+0x1c>
 8014420:	4631      	mov	r1, r6
 8014422:	4622      	mov	r2, r4
 8014424:	f7ff f8dc 	bl	80135e0 <memcpy>
 8014428:	4631      	mov	r1, r6
 801442a:	4638      	mov	r0, r7
 801442c:	f7ff fbcc 	bl	8013bc8 <_free_r>
 8014430:	e7e9      	b.n	8014406 <_realloc_r+0x1c>
 8014432:	4635      	mov	r5, r6
 8014434:	e7e7      	b.n	8014406 <_realloc_r+0x1c>
	...

08014438 <_read_r>:
 8014438:	b538      	push	{r3, r4, r5, lr}
 801443a:	4c07      	ldr	r4, [pc, #28]	; (8014458 <_read_r+0x20>)
 801443c:	4605      	mov	r5, r0
 801443e:	4608      	mov	r0, r1
 8014440:	4611      	mov	r1, r2
 8014442:	2200      	movs	r2, #0
 8014444:	6022      	str	r2, [r4, #0]
 8014446:	461a      	mov	r2, r3
 8014448:	f7f4 f9a2 	bl	8008790 <_read>
 801444c:	1c43      	adds	r3, r0, #1
 801444e:	d102      	bne.n	8014456 <_read_r+0x1e>
 8014450:	6823      	ldr	r3, [r4, #0]
 8014452:	b103      	cbz	r3, 8014456 <_read_r+0x1e>
 8014454:	602b      	str	r3, [r5, #0]
 8014456:	bd38      	pop	{r3, r4, r5, pc}
 8014458:	20002dc8 	.word	0x20002dc8

0801445c <__ascii_wctomb>:
 801445c:	b149      	cbz	r1, 8014472 <__ascii_wctomb+0x16>
 801445e:	2aff      	cmp	r2, #255	; 0xff
 8014460:	bf85      	ittet	hi
 8014462:	238a      	movhi	r3, #138	; 0x8a
 8014464:	6003      	strhi	r3, [r0, #0]
 8014466:	700a      	strbls	r2, [r1, #0]
 8014468:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801446c:	bf98      	it	ls
 801446e:	2001      	movls	r0, #1
 8014470:	4770      	bx	lr
 8014472:	4608      	mov	r0, r1
 8014474:	4770      	bx	lr

08014476 <_malloc_usable_size_r>:
 8014476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801447a:	1f18      	subs	r0, r3, #4
 801447c:	2b00      	cmp	r3, #0
 801447e:	bfbc      	itt	lt
 8014480:	580b      	ldrlt	r3, [r1, r0]
 8014482:	18c0      	addlt	r0, r0, r3
 8014484:	4770      	bx	lr
	...

08014488 <log10>:
 8014488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801448a:	ed2d 8b02 	vpush	{d8}
 801448e:	b08b      	sub	sp, #44	; 0x2c
 8014490:	ec55 4b10 	vmov	r4, r5, d0
 8014494:	f000 f9e8 	bl	8014868 <__ieee754_log10>
 8014498:	4b36      	ldr	r3, [pc, #216]	; (8014574 <log10+0xec>)
 801449a:	eeb0 8a40 	vmov.f32	s16, s0
 801449e:	eef0 8a60 	vmov.f32	s17, s1
 80144a2:	f993 6000 	ldrsb.w	r6, [r3]
 80144a6:	1c73      	adds	r3, r6, #1
 80144a8:	d05c      	beq.n	8014564 <log10+0xdc>
 80144aa:	4622      	mov	r2, r4
 80144ac:	462b      	mov	r3, r5
 80144ae:	4620      	mov	r0, r4
 80144b0:	4629      	mov	r1, r5
 80144b2:	f7ec fb63 	bl	8000b7c <__aeabi_dcmpun>
 80144b6:	4607      	mov	r7, r0
 80144b8:	2800      	cmp	r0, #0
 80144ba:	d153      	bne.n	8014564 <log10+0xdc>
 80144bc:	2200      	movs	r2, #0
 80144be:	2300      	movs	r3, #0
 80144c0:	4620      	mov	r0, r4
 80144c2:	4629      	mov	r1, r5
 80144c4:	f7ec fb3c 	bl	8000b40 <__aeabi_dcmple>
 80144c8:	2800      	cmp	r0, #0
 80144ca:	d04b      	beq.n	8014564 <log10+0xdc>
 80144cc:	4b2a      	ldr	r3, [pc, #168]	; (8014578 <log10+0xf0>)
 80144ce:	9301      	str	r3, [sp, #4]
 80144d0:	9708      	str	r7, [sp, #32]
 80144d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80144d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80144da:	b9a6      	cbnz	r6, 8014506 <log10+0x7e>
 80144dc:	4b27      	ldr	r3, [pc, #156]	; (801457c <log10+0xf4>)
 80144de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80144e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80144e6:	4620      	mov	r0, r4
 80144e8:	2200      	movs	r2, #0
 80144ea:	2300      	movs	r3, #0
 80144ec:	4629      	mov	r1, r5
 80144ee:	f7ec fb13 	bl	8000b18 <__aeabi_dcmpeq>
 80144f2:	bb40      	cbnz	r0, 8014546 <log10+0xbe>
 80144f4:	2301      	movs	r3, #1
 80144f6:	2e02      	cmp	r6, #2
 80144f8:	9300      	str	r3, [sp, #0]
 80144fa:	d119      	bne.n	8014530 <log10+0xa8>
 80144fc:	f7fd fa28 	bl	8011950 <__errno>
 8014500:	2321      	movs	r3, #33	; 0x21
 8014502:	6003      	str	r3, [r0, #0]
 8014504:	e019      	b.n	801453a <log10+0xb2>
 8014506:	4b1e      	ldr	r3, [pc, #120]	; (8014580 <log10+0xf8>)
 8014508:	2200      	movs	r2, #0
 801450a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801450e:	4620      	mov	r0, r4
 8014510:	2200      	movs	r2, #0
 8014512:	2300      	movs	r3, #0
 8014514:	4629      	mov	r1, r5
 8014516:	f7ec faff 	bl	8000b18 <__aeabi_dcmpeq>
 801451a:	2800      	cmp	r0, #0
 801451c:	d0ea      	beq.n	80144f4 <log10+0x6c>
 801451e:	2302      	movs	r3, #2
 8014520:	429e      	cmp	r6, r3
 8014522:	9300      	str	r3, [sp, #0]
 8014524:	d111      	bne.n	801454a <log10+0xc2>
 8014526:	f7fd fa13 	bl	8011950 <__errno>
 801452a:	2322      	movs	r3, #34	; 0x22
 801452c:	6003      	str	r3, [r0, #0]
 801452e:	e011      	b.n	8014554 <log10+0xcc>
 8014530:	4668      	mov	r0, sp
 8014532:	f000 fff4 	bl	801551e <matherr>
 8014536:	2800      	cmp	r0, #0
 8014538:	d0e0      	beq.n	80144fc <log10+0x74>
 801453a:	4812      	ldr	r0, [pc, #72]	; (8014584 <log10+0xfc>)
 801453c:	f000 fff4 	bl	8015528 <nan>
 8014540:	ed8d 0b06 	vstr	d0, [sp, #24]
 8014544:	e006      	b.n	8014554 <log10+0xcc>
 8014546:	2302      	movs	r3, #2
 8014548:	9300      	str	r3, [sp, #0]
 801454a:	4668      	mov	r0, sp
 801454c:	f000 ffe7 	bl	801551e <matherr>
 8014550:	2800      	cmp	r0, #0
 8014552:	d0e8      	beq.n	8014526 <log10+0x9e>
 8014554:	9b08      	ldr	r3, [sp, #32]
 8014556:	b11b      	cbz	r3, 8014560 <log10+0xd8>
 8014558:	f7fd f9fa 	bl	8011950 <__errno>
 801455c:	9b08      	ldr	r3, [sp, #32]
 801455e:	6003      	str	r3, [r0, #0]
 8014560:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014564:	eeb0 0a48 	vmov.f32	s0, s16
 8014568:	eef0 0a68 	vmov.f32	s1, s17
 801456c:	b00b      	add	sp, #44	; 0x2c
 801456e:	ecbd 8b02 	vpop	{d8}
 8014572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014574:	20001e08 	.word	0x20001e08
 8014578:	08016f00 	.word	0x08016f00
 801457c:	c7efffff 	.word	0xc7efffff
 8014580:	fff00000 	.word	0xfff00000
 8014584:	08016de9 	.word	0x08016de9

08014588 <pow>:
 8014588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801458c:	ed2d 8b04 	vpush	{d8-d9}
 8014590:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8014864 <pow+0x2dc>
 8014594:	b08d      	sub	sp, #52	; 0x34
 8014596:	ec57 6b10 	vmov	r6, r7, d0
 801459a:	ec55 4b11 	vmov	r4, r5, d1
 801459e:	f000 f9ef 	bl	8014980 <__ieee754_pow>
 80145a2:	f999 3000 	ldrsb.w	r3, [r9]
 80145a6:	9300      	str	r3, [sp, #0]
 80145a8:	3301      	adds	r3, #1
 80145aa:	eeb0 8a40 	vmov.f32	s16, s0
 80145ae:	eef0 8a60 	vmov.f32	s17, s1
 80145b2:	46c8      	mov	r8, r9
 80145b4:	d05f      	beq.n	8014676 <pow+0xee>
 80145b6:	4622      	mov	r2, r4
 80145b8:	462b      	mov	r3, r5
 80145ba:	4620      	mov	r0, r4
 80145bc:	4629      	mov	r1, r5
 80145be:	f7ec fadd 	bl	8000b7c <__aeabi_dcmpun>
 80145c2:	4683      	mov	fp, r0
 80145c4:	2800      	cmp	r0, #0
 80145c6:	d156      	bne.n	8014676 <pow+0xee>
 80145c8:	4632      	mov	r2, r6
 80145ca:	463b      	mov	r3, r7
 80145cc:	4630      	mov	r0, r6
 80145ce:	4639      	mov	r1, r7
 80145d0:	f7ec fad4 	bl	8000b7c <__aeabi_dcmpun>
 80145d4:	9001      	str	r0, [sp, #4]
 80145d6:	b1e8      	cbz	r0, 8014614 <pow+0x8c>
 80145d8:	2200      	movs	r2, #0
 80145da:	2300      	movs	r3, #0
 80145dc:	4620      	mov	r0, r4
 80145de:	4629      	mov	r1, r5
 80145e0:	f7ec fa9a 	bl	8000b18 <__aeabi_dcmpeq>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	d046      	beq.n	8014676 <pow+0xee>
 80145e8:	2301      	movs	r3, #1
 80145ea:	9302      	str	r3, [sp, #8]
 80145ec:	4b96      	ldr	r3, [pc, #600]	; (8014848 <pow+0x2c0>)
 80145ee:	9303      	str	r3, [sp, #12]
 80145f0:	4b96      	ldr	r3, [pc, #600]	; (801484c <pow+0x2c4>)
 80145f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80145f6:	2200      	movs	r2, #0
 80145f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80145fc:	9b00      	ldr	r3, [sp, #0]
 80145fe:	2b02      	cmp	r3, #2
 8014600:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014604:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014608:	d033      	beq.n	8014672 <pow+0xea>
 801460a:	a802      	add	r0, sp, #8
 801460c:	f000 ff87 	bl	801551e <matherr>
 8014610:	bb48      	cbnz	r0, 8014666 <pow+0xde>
 8014612:	e05d      	b.n	80146d0 <pow+0x148>
 8014614:	f04f 0a00 	mov.w	sl, #0
 8014618:	f04f 0b00 	mov.w	fp, #0
 801461c:	4652      	mov	r2, sl
 801461e:	465b      	mov	r3, fp
 8014620:	4630      	mov	r0, r6
 8014622:	4639      	mov	r1, r7
 8014624:	f7ec fa78 	bl	8000b18 <__aeabi_dcmpeq>
 8014628:	ec4b ab19 	vmov	d9, sl, fp
 801462c:	2800      	cmp	r0, #0
 801462e:	d054      	beq.n	80146da <pow+0x152>
 8014630:	4652      	mov	r2, sl
 8014632:	465b      	mov	r3, fp
 8014634:	4620      	mov	r0, r4
 8014636:	4629      	mov	r1, r5
 8014638:	f7ec fa6e 	bl	8000b18 <__aeabi_dcmpeq>
 801463c:	4680      	mov	r8, r0
 801463e:	b318      	cbz	r0, 8014688 <pow+0x100>
 8014640:	2301      	movs	r3, #1
 8014642:	9302      	str	r3, [sp, #8]
 8014644:	4b80      	ldr	r3, [pc, #512]	; (8014848 <pow+0x2c0>)
 8014646:	9303      	str	r3, [sp, #12]
 8014648:	9b01      	ldr	r3, [sp, #4]
 801464a:	930a      	str	r3, [sp, #40]	; 0x28
 801464c:	9b00      	ldr	r3, [sp, #0]
 801464e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014652:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014656:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d0d5      	beq.n	801460a <pow+0x82>
 801465e:	4b7b      	ldr	r3, [pc, #492]	; (801484c <pow+0x2c4>)
 8014660:	2200      	movs	r2, #0
 8014662:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014668:	b11b      	cbz	r3, 8014672 <pow+0xea>
 801466a:	f7fd f971 	bl	8011950 <__errno>
 801466e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014670:	6003      	str	r3, [r0, #0]
 8014672:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014676:	eeb0 0a48 	vmov.f32	s0, s16
 801467a:	eef0 0a68 	vmov.f32	s1, s17
 801467e:	b00d      	add	sp, #52	; 0x34
 8014680:	ecbd 8b04 	vpop	{d8-d9}
 8014684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014688:	ec45 4b10 	vmov	d0, r4, r5
 801468c:	f000 ff3f 	bl	801550e <finite>
 8014690:	2800      	cmp	r0, #0
 8014692:	d0f0      	beq.n	8014676 <pow+0xee>
 8014694:	4652      	mov	r2, sl
 8014696:	465b      	mov	r3, fp
 8014698:	4620      	mov	r0, r4
 801469a:	4629      	mov	r1, r5
 801469c:	f7ec fa46 	bl	8000b2c <__aeabi_dcmplt>
 80146a0:	2800      	cmp	r0, #0
 80146a2:	d0e8      	beq.n	8014676 <pow+0xee>
 80146a4:	2301      	movs	r3, #1
 80146a6:	9302      	str	r3, [sp, #8]
 80146a8:	4b67      	ldr	r3, [pc, #412]	; (8014848 <pow+0x2c0>)
 80146aa:	9303      	str	r3, [sp, #12]
 80146ac:	f999 3000 	ldrsb.w	r3, [r9]
 80146b0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80146b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80146b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80146bc:	b913      	cbnz	r3, 80146c4 <pow+0x13c>
 80146be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80146c2:	e7a2      	b.n	801460a <pow+0x82>
 80146c4:	4962      	ldr	r1, [pc, #392]	; (8014850 <pow+0x2c8>)
 80146c6:	2000      	movs	r0, #0
 80146c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80146cc:	2b02      	cmp	r3, #2
 80146ce:	d19c      	bne.n	801460a <pow+0x82>
 80146d0:	f7fd f93e 	bl	8011950 <__errno>
 80146d4:	2321      	movs	r3, #33	; 0x21
 80146d6:	6003      	str	r3, [r0, #0]
 80146d8:	e7c5      	b.n	8014666 <pow+0xde>
 80146da:	eeb0 0a48 	vmov.f32	s0, s16
 80146de:	eef0 0a68 	vmov.f32	s1, s17
 80146e2:	f000 ff14 	bl	801550e <finite>
 80146e6:	9000      	str	r0, [sp, #0]
 80146e8:	2800      	cmp	r0, #0
 80146ea:	f040 8081 	bne.w	80147f0 <pow+0x268>
 80146ee:	ec47 6b10 	vmov	d0, r6, r7
 80146f2:	f000 ff0c 	bl	801550e <finite>
 80146f6:	2800      	cmp	r0, #0
 80146f8:	d07a      	beq.n	80147f0 <pow+0x268>
 80146fa:	ec45 4b10 	vmov	d0, r4, r5
 80146fe:	f000 ff06 	bl	801550e <finite>
 8014702:	2800      	cmp	r0, #0
 8014704:	d074      	beq.n	80147f0 <pow+0x268>
 8014706:	ec53 2b18 	vmov	r2, r3, d8
 801470a:	ee18 0a10 	vmov	r0, s16
 801470e:	4619      	mov	r1, r3
 8014710:	f7ec fa34 	bl	8000b7c <__aeabi_dcmpun>
 8014714:	f999 9000 	ldrsb.w	r9, [r9]
 8014718:	4b4b      	ldr	r3, [pc, #300]	; (8014848 <pow+0x2c0>)
 801471a:	b1b0      	cbz	r0, 801474a <pow+0x1c2>
 801471c:	2201      	movs	r2, #1
 801471e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014722:	9b00      	ldr	r3, [sp, #0]
 8014724:	930a      	str	r3, [sp, #40]	; 0x28
 8014726:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801472a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801472e:	f1b9 0f00 	cmp.w	r9, #0
 8014732:	d0c4      	beq.n	80146be <pow+0x136>
 8014734:	4652      	mov	r2, sl
 8014736:	465b      	mov	r3, fp
 8014738:	4650      	mov	r0, sl
 801473a:	4659      	mov	r1, fp
 801473c:	f7ec f8ae 	bl	800089c <__aeabi_ddiv>
 8014740:	f1b9 0f02 	cmp.w	r9, #2
 8014744:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014748:	e7c1      	b.n	80146ce <pow+0x146>
 801474a:	2203      	movs	r2, #3
 801474c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014750:	900a      	str	r0, [sp, #40]	; 0x28
 8014752:	4629      	mov	r1, r5
 8014754:	4620      	mov	r0, r4
 8014756:	2200      	movs	r2, #0
 8014758:	4b3e      	ldr	r3, [pc, #248]	; (8014854 <pow+0x2cc>)
 801475a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801475e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014762:	f7eb ff71 	bl	8000648 <__aeabi_dmul>
 8014766:	4604      	mov	r4, r0
 8014768:	460d      	mov	r5, r1
 801476a:	f1b9 0f00 	cmp.w	r9, #0
 801476e:	d124      	bne.n	80147ba <pow+0x232>
 8014770:	4b39      	ldr	r3, [pc, #228]	; (8014858 <pow+0x2d0>)
 8014772:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014776:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801477a:	4630      	mov	r0, r6
 801477c:	4652      	mov	r2, sl
 801477e:	465b      	mov	r3, fp
 8014780:	4639      	mov	r1, r7
 8014782:	f7ec f9d3 	bl	8000b2c <__aeabi_dcmplt>
 8014786:	2800      	cmp	r0, #0
 8014788:	d056      	beq.n	8014838 <pow+0x2b0>
 801478a:	ec45 4b10 	vmov	d0, r4, r5
 801478e:	f000 fed3 	bl	8015538 <rint>
 8014792:	4622      	mov	r2, r4
 8014794:	462b      	mov	r3, r5
 8014796:	ec51 0b10 	vmov	r0, r1, d0
 801479a:	f7ec f9bd 	bl	8000b18 <__aeabi_dcmpeq>
 801479e:	b920      	cbnz	r0, 80147aa <pow+0x222>
 80147a0:	4b2e      	ldr	r3, [pc, #184]	; (801485c <pow+0x2d4>)
 80147a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80147a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80147aa:	f998 3000 	ldrsb.w	r3, [r8]
 80147ae:	2b02      	cmp	r3, #2
 80147b0:	d142      	bne.n	8014838 <pow+0x2b0>
 80147b2:	f7fd f8cd 	bl	8011950 <__errno>
 80147b6:	2322      	movs	r3, #34	; 0x22
 80147b8:	e78d      	b.n	80146d6 <pow+0x14e>
 80147ba:	4b29      	ldr	r3, [pc, #164]	; (8014860 <pow+0x2d8>)
 80147bc:	2200      	movs	r2, #0
 80147be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80147c2:	4630      	mov	r0, r6
 80147c4:	4652      	mov	r2, sl
 80147c6:	465b      	mov	r3, fp
 80147c8:	4639      	mov	r1, r7
 80147ca:	f7ec f9af 	bl	8000b2c <__aeabi_dcmplt>
 80147ce:	2800      	cmp	r0, #0
 80147d0:	d0eb      	beq.n	80147aa <pow+0x222>
 80147d2:	ec45 4b10 	vmov	d0, r4, r5
 80147d6:	f000 feaf 	bl	8015538 <rint>
 80147da:	4622      	mov	r2, r4
 80147dc:	462b      	mov	r3, r5
 80147de:	ec51 0b10 	vmov	r0, r1, d0
 80147e2:	f7ec f999 	bl	8000b18 <__aeabi_dcmpeq>
 80147e6:	2800      	cmp	r0, #0
 80147e8:	d1df      	bne.n	80147aa <pow+0x222>
 80147ea:	2200      	movs	r2, #0
 80147ec:	4b18      	ldr	r3, [pc, #96]	; (8014850 <pow+0x2c8>)
 80147ee:	e7da      	b.n	80147a6 <pow+0x21e>
 80147f0:	2200      	movs	r2, #0
 80147f2:	2300      	movs	r3, #0
 80147f4:	ec51 0b18 	vmov	r0, r1, d8
 80147f8:	f7ec f98e 	bl	8000b18 <__aeabi_dcmpeq>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	f43f af3a 	beq.w	8014676 <pow+0xee>
 8014802:	ec47 6b10 	vmov	d0, r6, r7
 8014806:	f000 fe82 	bl	801550e <finite>
 801480a:	2800      	cmp	r0, #0
 801480c:	f43f af33 	beq.w	8014676 <pow+0xee>
 8014810:	ec45 4b10 	vmov	d0, r4, r5
 8014814:	f000 fe7b 	bl	801550e <finite>
 8014818:	2800      	cmp	r0, #0
 801481a:	f43f af2c 	beq.w	8014676 <pow+0xee>
 801481e:	2304      	movs	r3, #4
 8014820:	9302      	str	r3, [sp, #8]
 8014822:	4b09      	ldr	r3, [pc, #36]	; (8014848 <pow+0x2c0>)
 8014824:	9303      	str	r3, [sp, #12]
 8014826:	2300      	movs	r3, #0
 8014828:	930a      	str	r3, [sp, #40]	; 0x28
 801482a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801482e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014832:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014836:	e7b8      	b.n	80147aa <pow+0x222>
 8014838:	a802      	add	r0, sp, #8
 801483a:	f000 fe70 	bl	801551e <matherr>
 801483e:	2800      	cmp	r0, #0
 8014840:	f47f af11 	bne.w	8014666 <pow+0xde>
 8014844:	e7b5      	b.n	80147b2 <pow+0x22a>
 8014846:	bf00      	nop
 8014848:	08016f06 	.word	0x08016f06
 801484c:	3ff00000 	.word	0x3ff00000
 8014850:	fff00000 	.word	0xfff00000
 8014854:	3fe00000 	.word	0x3fe00000
 8014858:	47efffff 	.word	0x47efffff
 801485c:	c7efffff 	.word	0xc7efffff
 8014860:	7ff00000 	.word	0x7ff00000
 8014864:	20001e08 	.word	0x20001e08

08014868 <__ieee754_log10>:
 8014868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801486c:	ec55 4b10 	vmov	r4, r5, d0
 8014870:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014874:	462b      	mov	r3, r5
 8014876:	da2f      	bge.n	80148d8 <__ieee754_log10+0x70>
 8014878:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801487c:	4322      	orrs	r2, r4
 801487e:	d10a      	bne.n	8014896 <__ieee754_log10+0x2e>
 8014880:	493b      	ldr	r1, [pc, #236]	; (8014970 <__ieee754_log10+0x108>)
 8014882:	2200      	movs	r2, #0
 8014884:	2300      	movs	r3, #0
 8014886:	2000      	movs	r0, #0
 8014888:	f7ec f808 	bl	800089c <__aeabi_ddiv>
 801488c:	ec41 0b10 	vmov	d0, r0, r1
 8014890:	b003      	add	sp, #12
 8014892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014896:	2d00      	cmp	r5, #0
 8014898:	da08      	bge.n	80148ac <__ieee754_log10+0x44>
 801489a:	ee10 2a10 	vmov	r2, s0
 801489e:	4620      	mov	r0, r4
 80148a0:	4629      	mov	r1, r5
 80148a2:	f7eb fd19 	bl	80002d8 <__aeabi_dsub>
 80148a6:	2200      	movs	r2, #0
 80148a8:	2300      	movs	r3, #0
 80148aa:	e7ed      	b.n	8014888 <__ieee754_log10+0x20>
 80148ac:	2200      	movs	r2, #0
 80148ae:	4b31      	ldr	r3, [pc, #196]	; (8014974 <__ieee754_log10+0x10c>)
 80148b0:	4629      	mov	r1, r5
 80148b2:	ee10 0a10 	vmov	r0, s0
 80148b6:	f7eb fec7 	bl	8000648 <__aeabi_dmul>
 80148ba:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80148be:	4604      	mov	r4, r0
 80148c0:	460d      	mov	r5, r1
 80148c2:	460b      	mov	r3, r1
 80148c4:	492c      	ldr	r1, [pc, #176]	; (8014978 <__ieee754_log10+0x110>)
 80148c6:	428b      	cmp	r3, r1
 80148c8:	dd08      	ble.n	80148dc <__ieee754_log10+0x74>
 80148ca:	4622      	mov	r2, r4
 80148cc:	462b      	mov	r3, r5
 80148ce:	4620      	mov	r0, r4
 80148d0:	4629      	mov	r1, r5
 80148d2:	f7eb fd03 	bl	80002dc <__adddf3>
 80148d6:	e7d9      	b.n	801488c <__ieee754_log10+0x24>
 80148d8:	2200      	movs	r2, #0
 80148da:	e7f3      	b.n	80148c4 <__ieee754_log10+0x5c>
 80148dc:	1518      	asrs	r0, r3, #20
 80148de:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80148e2:	4410      	add	r0, r2
 80148e4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80148e8:	4448      	add	r0, r9
 80148ea:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80148ee:	f7eb fe41 	bl	8000574 <__aeabi_i2d>
 80148f2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80148f6:	3303      	adds	r3, #3
 80148f8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80148fc:	ec45 4b10 	vmov	d0, r4, r5
 8014900:	4606      	mov	r6, r0
 8014902:	460f      	mov	r7, r1
 8014904:	f000 ff14 	bl	8015730 <__ieee754_log>
 8014908:	a313      	add	r3, pc, #76	; (adr r3, 8014958 <__ieee754_log10+0xf0>)
 801490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490e:	4630      	mov	r0, r6
 8014910:	4639      	mov	r1, r7
 8014912:	ed8d 0b00 	vstr	d0, [sp]
 8014916:	f7eb fe97 	bl	8000648 <__aeabi_dmul>
 801491a:	ed9d 0b00 	vldr	d0, [sp]
 801491e:	4604      	mov	r4, r0
 8014920:	460d      	mov	r5, r1
 8014922:	a30f      	add	r3, pc, #60	; (adr r3, 8014960 <__ieee754_log10+0xf8>)
 8014924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014928:	ec51 0b10 	vmov	r0, r1, d0
 801492c:	f7eb fe8c 	bl	8000648 <__aeabi_dmul>
 8014930:	4602      	mov	r2, r0
 8014932:	460b      	mov	r3, r1
 8014934:	4620      	mov	r0, r4
 8014936:	4629      	mov	r1, r5
 8014938:	f7eb fcd0 	bl	80002dc <__adddf3>
 801493c:	a30a      	add	r3, pc, #40	; (adr r3, 8014968 <__ieee754_log10+0x100>)
 801493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014942:	4604      	mov	r4, r0
 8014944:	460d      	mov	r5, r1
 8014946:	4630      	mov	r0, r6
 8014948:	4639      	mov	r1, r7
 801494a:	f7eb fe7d 	bl	8000648 <__aeabi_dmul>
 801494e:	4602      	mov	r2, r0
 8014950:	460b      	mov	r3, r1
 8014952:	4620      	mov	r0, r4
 8014954:	4629      	mov	r1, r5
 8014956:	e7bc      	b.n	80148d2 <__ieee754_log10+0x6a>
 8014958:	11f12b36 	.word	0x11f12b36
 801495c:	3d59fef3 	.word	0x3d59fef3
 8014960:	1526e50e 	.word	0x1526e50e
 8014964:	3fdbcb7b 	.word	0x3fdbcb7b
 8014968:	509f6000 	.word	0x509f6000
 801496c:	3fd34413 	.word	0x3fd34413
 8014970:	c3500000 	.word	0xc3500000
 8014974:	43500000 	.word	0x43500000
 8014978:	7fefffff 	.word	0x7fefffff
 801497c:	00000000 	.word	0x00000000

08014980 <__ieee754_pow>:
 8014980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014984:	b091      	sub	sp, #68	; 0x44
 8014986:	ed8d 1b00 	vstr	d1, [sp]
 801498a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801498e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014992:	ea58 0302 	orrs.w	r3, r8, r2
 8014996:	ec57 6b10 	vmov	r6, r7, d0
 801499a:	f000 84be 	beq.w	801531a <__ieee754_pow+0x99a>
 801499e:	4b7a      	ldr	r3, [pc, #488]	; (8014b88 <__ieee754_pow+0x208>)
 80149a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80149a4:	429c      	cmp	r4, r3
 80149a6:	463d      	mov	r5, r7
 80149a8:	ee10 aa10 	vmov	sl, s0
 80149ac:	dc09      	bgt.n	80149c2 <__ieee754_pow+0x42>
 80149ae:	d103      	bne.n	80149b8 <__ieee754_pow+0x38>
 80149b0:	b93e      	cbnz	r6, 80149c2 <__ieee754_pow+0x42>
 80149b2:	45a0      	cmp	r8, r4
 80149b4:	dc0d      	bgt.n	80149d2 <__ieee754_pow+0x52>
 80149b6:	e001      	b.n	80149bc <__ieee754_pow+0x3c>
 80149b8:	4598      	cmp	r8, r3
 80149ba:	dc02      	bgt.n	80149c2 <__ieee754_pow+0x42>
 80149bc:	4598      	cmp	r8, r3
 80149be:	d10e      	bne.n	80149de <__ieee754_pow+0x5e>
 80149c0:	b16a      	cbz	r2, 80149de <__ieee754_pow+0x5e>
 80149c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80149c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80149ca:	ea54 030a 	orrs.w	r3, r4, sl
 80149ce:	f000 84a4 	beq.w	801531a <__ieee754_pow+0x99a>
 80149d2:	486e      	ldr	r0, [pc, #440]	; (8014b8c <__ieee754_pow+0x20c>)
 80149d4:	b011      	add	sp, #68	; 0x44
 80149d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149da:	f000 bda5 	b.w	8015528 <nan>
 80149de:	2d00      	cmp	r5, #0
 80149e0:	da53      	bge.n	8014a8a <__ieee754_pow+0x10a>
 80149e2:	4b6b      	ldr	r3, [pc, #428]	; (8014b90 <__ieee754_pow+0x210>)
 80149e4:	4598      	cmp	r8, r3
 80149e6:	dc4d      	bgt.n	8014a84 <__ieee754_pow+0x104>
 80149e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80149ec:	4598      	cmp	r8, r3
 80149ee:	dd4c      	ble.n	8014a8a <__ieee754_pow+0x10a>
 80149f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80149f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80149f8:	2b14      	cmp	r3, #20
 80149fa:	dd26      	ble.n	8014a4a <__ieee754_pow+0xca>
 80149fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014a00:	fa22 f103 	lsr.w	r1, r2, r3
 8014a04:	fa01 f303 	lsl.w	r3, r1, r3
 8014a08:	4293      	cmp	r3, r2
 8014a0a:	d13e      	bne.n	8014a8a <__ieee754_pow+0x10a>
 8014a0c:	f001 0101 	and.w	r1, r1, #1
 8014a10:	f1c1 0b02 	rsb	fp, r1, #2
 8014a14:	2a00      	cmp	r2, #0
 8014a16:	d15b      	bne.n	8014ad0 <__ieee754_pow+0x150>
 8014a18:	4b5b      	ldr	r3, [pc, #364]	; (8014b88 <__ieee754_pow+0x208>)
 8014a1a:	4598      	cmp	r8, r3
 8014a1c:	d124      	bne.n	8014a68 <__ieee754_pow+0xe8>
 8014a1e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014a22:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014a26:	ea53 030a 	orrs.w	r3, r3, sl
 8014a2a:	f000 8476 	beq.w	801531a <__ieee754_pow+0x99a>
 8014a2e:	4b59      	ldr	r3, [pc, #356]	; (8014b94 <__ieee754_pow+0x214>)
 8014a30:	429c      	cmp	r4, r3
 8014a32:	dd2d      	ble.n	8014a90 <__ieee754_pow+0x110>
 8014a34:	f1b9 0f00 	cmp.w	r9, #0
 8014a38:	f280 8473 	bge.w	8015322 <__ieee754_pow+0x9a2>
 8014a3c:	2000      	movs	r0, #0
 8014a3e:	2100      	movs	r1, #0
 8014a40:	ec41 0b10 	vmov	d0, r0, r1
 8014a44:	b011      	add	sp, #68	; 0x44
 8014a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a4a:	2a00      	cmp	r2, #0
 8014a4c:	d13e      	bne.n	8014acc <__ieee754_pow+0x14c>
 8014a4e:	f1c3 0314 	rsb	r3, r3, #20
 8014a52:	fa48 f103 	asr.w	r1, r8, r3
 8014a56:	fa01 f303 	lsl.w	r3, r1, r3
 8014a5a:	4543      	cmp	r3, r8
 8014a5c:	f040 8469 	bne.w	8015332 <__ieee754_pow+0x9b2>
 8014a60:	f001 0101 	and.w	r1, r1, #1
 8014a64:	f1c1 0b02 	rsb	fp, r1, #2
 8014a68:	4b4b      	ldr	r3, [pc, #300]	; (8014b98 <__ieee754_pow+0x218>)
 8014a6a:	4598      	cmp	r8, r3
 8014a6c:	d118      	bne.n	8014aa0 <__ieee754_pow+0x120>
 8014a6e:	f1b9 0f00 	cmp.w	r9, #0
 8014a72:	f280 845a 	bge.w	801532a <__ieee754_pow+0x9aa>
 8014a76:	4948      	ldr	r1, [pc, #288]	; (8014b98 <__ieee754_pow+0x218>)
 8014a78:	4632      	mov	r2, r6
 8014a7a:	463b      	mov	r3, r7
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	f7eb ff0d 	bl	800089c <__aeabi_ddiv>
 8014a82:	e7dd      	b.n	8014a40 <__ieee754_pow+0xc0>
 8014a84:	f04f 0b02 	mov.w	fp, #2
 8014a88:	e7c4      	b.n	8014a14 <__ieee754_pow+0x94>
 8014a8a:	f04f 0b00 	mov.w	fp, #0
 8014a8e:	e7c1      	b.n	8014a14 <__ieee754_pow+0x94>
 8014a90:	f1b9 0f00 	cmp.w	r9, #0
 8014a94:	dad2      	bge.n	8014a3c <__ieee754_pow+0xbc>
 8014a96:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014a9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014a9e:	e7cf      	b.n	8014a40 <__ieee754_pow+0xc0>
 8014aa0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014aa4:	d106      	bne.n	8014ab4 <__ieee754_pow+0x134>
 8014aa6:	4632      	mov	r2, r6
 8014aa8:	463b      	mov	r3, r7
 8014aaa:	4610      	mov	r0, r2
 8014aac:	4619      	mov	r1, r3
 8014aae:	f7eb fdcb 	bl	8000648 <__aeabi_dmul>
 8014ab2:	e7c5      	b.n	8014a40 <__ieee754_pow+0xc0>
 8014ab4:	4b39      	ldr	r3, [pc, #228]	; (8014b9c <__ieee754_pow+0x21c>)
 8014ab6:	4599      	cmp	r9, r3
 8014ab8:	d10a      	bne.n	8014ad0 <__ieee754_pow+0x150>
 8014aba:	2d00      	cmp	r5, #0
 8014abc:	db08      	blt.n	8014ad0 <__ieee754_pow+0x150>
 8014abe:	ec47 6b10 	vmov	d0, r6, r7
 8014ac2:	b011      	add	sp, #68	; 0x44
 8014ac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac8:	f000 bc68 	b.w	801539c <__ieee754_sqrt>
 8014acc:	f04f 0b00 	mov.w	fp, #0
 8014ad0:	ec47 6b10 	vmov	d0, r6, r7
 8014ad4:	f000 fd12 	bl	80154fc <fabs>
 8014ad8:	ec51 0b10 	vmov	r0, r1, d0
 8014adc:	f1ba 0f00 	cmp.w	sl, #0
 8014ae0:	d127      	bne.n	8014b32 <__ieee754_pow+0x1b2>
 8014ae2:	b124      	cbz	r4, 8014aee <__ieee754_pow+0x16e>
 8014ae4:	4b2c      	ldr	r3, [pc, #176]	; (8014b98 <__ieee754_pow+0x218>)
 8014ae6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014aea:	429a      	cmp	r2, r3
 8014aec:	d121      	bne.n	8014b32 <__ieee754_pow+0x1b2>
 8014aee:	f1b9 0f00 	cmp.w	r9, #0
 8014af2:	da05      	bge.n	8014b00 <__ieee754_pow+0x180>
 8014af4:	4602      	mov	r2, r0
 8014af6:	460b      	mov	r3, r1
 8014af8:	2000      	movs	r0, #0
 8014afa:	4927      	ldr	r1, [pc, #156]	; (8014b98 <__ieee754_pow+0x218>)
 8014afc:	f7eb fece 	bl	800089c <__aeabi_ddiv>
 8014b00:	2d00      	cmp	r5, #0
 8014b02:	da9d      	bge.n	8014a40 <__ieee754_pow+0xc0>
 8014b04:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014b08:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014b0c:	ea54 030b 	orrs.w	r3, r4, fp
 8014b10:	d108      	bne.n	8014b24 <__ieee754_pow+0x1a4>
 8014b12:	4602      	mov	r2, r0
 8014b14:	460b      	mov	r3, r1
 8014b16:	4610      	mov	r0, r2
 8014b18:	4619      	mov	r1, r3
 8014b1a:	f7eb fbdd 	bl	80002d8 <__aeabi_dsub>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	460b      	mov	r3, r1
 8014b22:	e7ac      	b.n	8014a7e <__ieee754_pow+0xfe>
 8014b24:	f1bb 0f01 	cmp.w	fp, #1
 8014b28:	d18a      	bne.n	8014a40 <__ieee754_pow+0xc0>
 8014b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b2e:	4619      	mov	r1, r3
 8014b30:	e786      	b.n	8014a40 <__ieee754_pow+0xc0>
 8014b32:	0fed      	lsrs	r5, r5, #31
 8014b34:	1e6b      	subs	r3, r5, #1
 8014b36:	930d      	str	r3, [sp, #52]	; 0x34
 8014b38:	ea5b 0303 	orrs.w	r3, fp, r3
 8014b3c:	d102      	bne.n	8014b44 <__ieee754_pow+0x1c4>
 8014b3e:	4632      	mov	r2, r6
 8014b40:	463b      	mov	r3, r7
 8014b42:	e7e8      	b.n	8014b16 <__ieee754_pow+0x196>
 8014b44:	4b16      	ldr	r3, [pc, #88]	; (8014ba0 <__ieee754_pow+0x220>)
 8014b46:	4598      	cmp	r8, r3
 8014b48:	f340 80fe 	ble.w	8014d48 <__ieee754_pow+0x3c8>
 8014b4c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014b50:	4598      	cmp	r8, r3
 8014b52:	dd0a      	ble.n	8014b6a <__ieee754_pow+0x1ea>
 8014b54:	4b0f      	ldr	r3, [pc, #60]	; (8014b94 <__ieee754_pow+0x214>)
 8014b56:	429c      	cmp	r4, r3
 8014b58:	dc0d      	bgt.n	8014b76 <__ieee754_pow+0x1f6>
 8014b5a:	f1b9 0f00 	cmp.w	r9, #0
 8014b5e:	f6bf af6d 	bge.w	8014a3c <__ieee754_pow+0xbc>
 8014b62:	a307      	add	r3, pc, #28	; (adr r3, 8014b80 <__ieee754_pow+0x200>)
 8014b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b68:	e79f      	b.n	8014aaa <__ieee754_pow+0x12a>
 8014b6a:	4b0e      	ldr	r3, [pc, #56]	; (8014ba4 <__ieee754_pow+0x224>)
 8014b6c:	429c      	cmp	r4, r3
 8014b6e:	ddf4      	ble.n	8014b5a <__ieee754_pow+0x1da>
 8014b70:	4b09      	ldr	r3, [pc, #36]	; (8014b98 <__ieee754_pow+0x218>)
 8014b72:	429c      	cmp	r4, r3
 8014b74:	dd18      	ble.n	8014ba8 <__ieee754_pow+0x228>
 8014b76:	f1b9 0f00 	cmp.w	r9, #0
 8014b7a:	dcf2      	bgt.n	8014b62 <__ieee754_pow+0x1e2>
 8014b7c:	e75e      	b.n	8014a3c <__ieee754_pow+0xbc>
 8014b7e:	bf00      	nop
 8014b80:	8800759c 	.word	0x8800759c
 8014b84:	7e37e43c 	.word	0x7e37e43c
 8014b88:	7ff00000 	.word	0x7ff00000
 8014b8c:	08016de9 	.word	0x08016de9
 8014b90:	433fffff 	.word	0x433fffff
 8014b94:	3fefffff 	.word	0x3fefffff
 8014b98:	3ff00000 	.word	0x3ff00000
 8014b9c:	3fe00000 	.word	0x3fe00000
 8014ba0:	41e00000 	.word	0x41e00000
 8014ba4:	3feffffe 	.word	0x3feffffe
 8014ba8:	2200      	movs	r2, #0
 8014baa:	4b63      	ldr	r3, [pc, #396]	; (8014d38 <__ieee754_pow+0x3b8>)
 8014bac:	f7eb fb94 	bl	80002d8 <__aeabi_dsub>
 8014bb0:	a355      	add	r3, pc, #340	; (adr r3, 8014d08 <__ieee754_pow+0x388>)
 8014bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	460d      	mov	r5, r1
 8014bba:	f7eb fd45 	bl	8000648 <__aeabi_dmul>
 8014bbe:	a354      	add	r3, pc, #336	; (adr r3, 8014d10 <__ieee754_pow+0x390>)
 8014bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc4:	4606      	mov	r6, r0
 8014bc6:	460f      	mov	r7, r1
 8014bc8:	4620      	mov	r0, r4
 8014bca:	4629      	mov	r1, r5
 8014bcc:	f7eb fd3c 	bl	8000648 <__aeabi_dmul>
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014bd6:	4b59      	ldr	r3, [pc, #356]	; (8014d3c <__ieee754_pow+0x3bc>)
 8014bd8:	4620      	mov	r0, r4
 8014bda:	4629      	mov	r1, r5
 8014bdc:	f7eb fd34 	bl	8000648 <__aeabi_dmul>
 8014be0:	4602      	mov	r2, r0
 8014be2:	460b      	mov	r3, r1
 8014be4:	a14c      	add	r1, pc, #304	; (adr r1, 8014d18 <__ieee754_pow+0x398>)
 8014be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bea:	f7eb fb75 	bl	80002d8 <__aeabi_dsub>
 8014bee:	4622      	mov	r2, r4
 8014bf0:	462b      	mov	r3, r5
 8014bf2:	f7eb fd29 	bl	8000648 <__aeabi_dmul>
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	2000      	movs	r0, #0
 8014bfc:	4950      	ldr	r1, [pc, #320]	; (8014d40 <__ieee754_pow+0x3c0>)
 8014bfe:	f7eb fb6b 	bl	80002d8 <__aeabi_dsub>
 8014c02:	4622      	mov	r2, r4
 8014c04:	462b      	mov	r3, r5
 8014c06:	4680      	mov	r8, r0
 8014c08:	4689      	mov	r9, r1
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	4629      	mov	r1, r5
 8014c0e:	f7eb fd1b 	bl	8000648 <__aeabi_dmul>
 8014c12:	4602      	mov	r2, r0
 8014c14:	460b      	mov	r3, r1
 8014c16:	4640      	mov	r0, r8
 8014c18:	4649      	mov	r1, r9
 8014c1a:	f7eb fd15 	bl	8000648 <__aeabi_dmul>
 8014c1e:	a340      	add	r3, pc, #256	; (adr r3, 8014d20 <__ieee754_pow+0x3a0>)
 8014c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c24:	f7eb fd10 	bl	8000648 <__aeabi_dmul>
 8014c28:	4602      	mov	r2, r0
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c30:	f7eb fb52 	bl	80002d8 <__aeabi_dsub>
 8014c34:	4602      	mov	r2, r0
 8014c36:	460b      	mov	r3, r1
 8014c38:	4604      	mov	r4, r0
 8014c3a:	460d      	mov	r5, r1
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	4639      	mov	r1, r7
 8014c40:	f7eb fb4c 	bl	80002dc <__adddf3>
 8014c44:	2000      	movs	r0, #0
 8014c46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c4a:	4632      	mov	r2, r6
 8014c4c:	463b      	mov	r3, r7
 8014c4e:	f7eb fb43 	bl	80002d8 <__aeabi_dsub>
 8014c52:	4602      	mov	r2, r0
 8014c54:	460b      	mov	r3, r1
 8014c56:	4620      	mov	r0, r4
 8014c58:	4629      	mov	r1, r5
 8014c5a:	f7eb fb3d 	bl	80002d8 <__aeabi_dsub>
 8014c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c60:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8014c64:	4313      	orrs	r3, r2
 8014c66:	4606      	mov	r6, r0
 8014c68:	460f      	mov	r7, r1
 8014c6a:	f040 81eb 	bne.w	8015044 <__ieee754_pow+0x6c4>
 8014c6e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014d28 <__ieee754_pow+0x3a8>
 8014c72:	e9dd 4500 	ldrd	r4, r5, [sp]
 8014c76:	2400      	movs	r4, #0
 8014c78:	4622      	mov	r2, r4
 8014c7a:	462b      	mov	r3, r5
 8014c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014c84:	f7eb fb28 	bl	80002d8 <__aeabi_dsub>
 8014c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c8c:	f7eb fcdc 	bl	8000648 <__aeabi_dmul>
 8014c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c94:	4680      	mov	r8, r0
 8014c96:	4689      	mov	r9, r1
 8014c98:	4630      	mov	r0, r6
 8014c9a:	4639      	mov	r1, r7
 8014c9c:	f7eb fcd4 	bl	8000648 <__aeabi_dmul>
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	4640      	mov	r0, r8
 8014ca6:	4649      	mov	r1, r9
 8014ca8:	f7eb fb18 	bl	80002dc <__adddf3>
 8014cac:	4622      	mov	r2, r4
 8014cae:	462b      	mov	r3, r5
 8014cb0:	4680      	mov	r8, r0
 8014cb2:	4689      	mov	r9, r1
 8014cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014cb8:	f7eb fcc6 	bl	8000648 <__aeabi_dmul>
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	4604      	mov	r4, r0
 8014cc0:	460d      	mov	r5, r1
 8014cc2:	4602      	mov	r2, r0
 8014cc4:	4649      	mov	r1, r9
 8014cc6:	4640      	mov	r0, r8
 8014cc8:	e9cd 4500 	strd	r4, r5, [sp]
 8014ccc:	f7eb fb06 	bl	80002dc <__adddf3>
 8014cd0:	4b1c      	ldr	r3, [pc, #112]	; (8014d44 <__ieee754_pow+0x3c4>)
 8014cd2:	4299      	cmp	r1, r3
 8014cd4:	4606      	mov	r6, r0
 8014cd6:	460f      	mov	r7, r1
 8014cd8:	468b      	mov	fp, r1
 8014cda:	f340 82f7 	ble.w	80152cc <__ieee754_pow+0x94c>
 8014cde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014ce2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014ce6:	4303      	orrs	r3, r0
 8014ce8:	f000 81ea 	beq.w	80150c0 <__ieee754_pow+0x740>
 8014cec:	a310      	add	r3, pc, #64	; (adr r3, 8014d30 <__ieee754_pow+0x3b0>)
 8014cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cf6:	f7eb fca7 	bl	8000648 <__aeabi_dmul>
 8014cfa:	a30d      	add	r3, pc, #52	; (adr r3, 8014d30 <__ieee754_pow+0x3b0>)
 8014cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d00:	e6d5      	b.n	8014aae <__ieee754_pow+0x12e>
 8014d02:	bf00      	nop
 8014d04:	f3af 8000 	nop.w
 8014d08:	60000000 	.word	0x60000000
 8014d0c:	3ff71547 	.word	0x3ff71547
 8014d10:	f85ddf44 	.word	0xf85ddf44
 8014d14:	3e54ae0b 	.word	0x3e54ae0b
 8014d18:	55555555 	.word	0x55555555
 8014d1c:	3fd55555 	.word	0x3fd55555
 8014d20:	652b82fe 	.word	0x652b82fe
 8014d24:	3ff71547 	.word	0x3ff71547
 8014d28:	00000000 	.word	0x00000000
 8014d2c:	bff00000 	.word	0xbff00000
 8014d30:	8800759c 	.word	0x8800759c
 8014d34:	7e37e43c 	.word	0x7e37e43c
 8014d38:	3ff00000 	.word	0x3ff00000
 8014d3c:	3fd00000 	.word	0x3fd00000
 8014d40:	3fe00000 	.word	0x3fe00000
 8014d44:	408fffff 	.word	0x408fffff
 8014d48:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014d4c:	f04f 0200 	mov.w	r2, #0
 8014d50:	da05      	bge.n	8014d5e <__ieee754_pow+0x3de>
 8014d52:	4bd3      	ldr	r3, [pc, #844]	; (80150a0 <__ieee754_pow+0x720>)
 8014d54:	f7eb fc78 	bl	8000648 <__aeabi_dmul>
 8014d58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014d5c:	460c      	mov	r4, r1
 8014d5e:	1523      	asrs	r3, r4, #20
 8014d60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014d64:	4413      	add	r3, r2
 8014d66:	9309      	str	r3, [sp, #36]	; 0x24
 8014d68:	4bce      	ldr	r3, [pc, #824]	; (80150a4 <__ieee754_pow+0x724>)
 8014d6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014d6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014d72:	429c      	cmp	r4, r3
 8014d74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014d78:	dd08      	ble.n	8014d8c <__ieee754_pow+0x40c>
 8014d7a:	4bcb      	ldr	r3, [pc, #812]	; (80150a8 <__ieee754_pow+0x728>)
 8014d7c:	429c      	cmp	r4, r3
 8014d7e:	f340 815e 	ble.w	801503e <__ieee754_pow+0x6be>
 8014d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d84:	3301      	adds	r3, #1
 8014d86:	9309      	str	r3, [sp, #36]	; 0x24
 8014d88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014d8c:	f04f 0a00 	mov.w	sl, #0
 8014d90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014d94:	930c      	str	r3, [sp, #48]	; 0x30
 8014d96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d98:	4bc4      	ldr	r3, [pc, #784]	; (80150ac <__ieee754_pow+0x72c>)
 8014d9a:	4413      	add	r3, r2
 8014d9c:	ed93 7b00 	vldr	d7, [r3]
 8014da0:	4629      	mov	r1, r5
 8014da2:	ec53 2b17 	vmov	r2, r3, d7
 8014da6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014daa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014dae:	f7eb fa93 	bl	80002d8 <__aeabi_dsub>
 8014db2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014db6:	4606      	mov	r6, r0
 8014db8:	460f      	mov	r7, r1
 8014dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014dbe:	f7eb fa8d 	bl	80002dc <__adddf3>
 8014dc2:	4602      	mov	r2, r0
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	2000      	movs	r0, #0
 8014dc8:	49b9      	ldr	r1, [pc, #740]	; (80150b0 <__ieee754_pow+0x730>)
 8014dca:	f7eb fd67 	bl	800089c <__aeabi_ddiv>
 8014dce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014dd2:	4602      	mov	r2, r0
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	4630      	mov	r0, r6
 8014dd8:	4639      	mov	r1, r7
 8014dda:	f7eb fc35 	bl	8000648 <__aeabi_dmul>
 8014dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014de2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014de6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014dea:	2300      	movs	r3, #0
 8014dec:	9302      	str	r3, [sp, #8]
 8014dee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014df2:	106d      	asrs	r5, r5, #1
 8014df4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014df8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014e02:	4640      	mov	r0, r8
 8014e04:	4649      	mov	r1, r9
 8014e06:	4614      	mov	r4, r2
 8014e08:	461d      	mov	r5, r3
 8014e0a:	f7eb fc1d 	bl	8000648 <__aeabi_dmul>
 8014e0e:	4602      	mov	r2, r0
 8014e10:	460b      	mov	r3, r1
 8014e12:	4630      	mov	r0, r6
 8014e14:	4639      	mov	r1, r7
 8014e16:	f7eb fa5f 	bl	80002d8 <__aeabi_dsub>
 8014e1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014e1e:	4606      	mov	r6, r0
 8014e20:	460f      	mov	r7, r1
 8014e22:	4620      	mov	r0, r4
 8014e24:	4629      	mov	r1, r5
 8014e26:	f7eb fa57 	bl	80002d8 <__aeabi_dsub>
 8014e2a:	4602      	mov	r2, r0
 8014e2c:	460b      	mov	r3, r1
 8014e2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014e32:	f7eb fa51 	bl	80002d8 <__aeabi_dsub>
 8014e36:	4642      	mov	r2, r8
 8014e38:	464b      	mov	r3, r9
 8014e3a:	f7eb fc05 	bl	8000648 <__aeabi_dmul>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	460b      	mov	r3, r1
 8014e42:	4630      	mov	r0, r6
 8014e44:	4639      	mov	r1, r7
 8014e46:	f7eb fa47 	bl	80002d8 <__aeabi_dsub>
 8014e4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014e4e:	f7eb fbfb 	bl	8000648 <__aeabi_dmul>
 8014e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014e5a:	4610      	mov	r0, r2
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	f7eb fbf3 	bl	8000648 <__aeabi_dmul>
 8014e62:	a37b      	add	r3, pc, #492	; (adr r3, 8015050 <__ieee754_pow+0x6d0>)
 8014e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e68:	4604      	mov	r4, r0
 8014e6a:	460d      	mov	r5, r1
 8014e6c:	f7eb fbec 	bl	8000648 <__aeabi_dmul>
 8014e70:	a379      	add	r3, pc, #484	; (adr r3, 8015058 <__ieee754_pow+0x6d8>)
 8014e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e76:	f7eb fa31 	bl	80002dc <__adddf3>
 8014e7a:	4622      	mov	r2, r4
 8014e7c:	462b      	mov	r3, r5
 8014e7e:	f7eb fbe3 	bl	8000648 <__aeabi_dmul>
 8014e82:	a377      	add	r3, pc, #476	; (adr r3, 8015060 <__ieee754_pow+0x6e0>)
 8014e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e88:	f7eb fa28 	bl	80002dc <__adddf3>
 8014e8c:	4622      	mov	r2, r4
 8014e8e:	462b      	mov	r3, r5
 8014e90:	f7eb fbda 	bl	8000648 <__aeabi_dmul>
 8014e94:	a374      	add	r3, pc, #464	; (adr r3, 8015068 <__ieee754_pow+0x6e8>)
 8014e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9a:	f7eb fa1f 	bl	80002dc <__adddf3>
 8014e9e:	4622      	mov	r2, r4
 8014ea0:	462b      	mov	r3, r5
 8014ea2:	f7eb fbd1 	bl	8000648 <__aeabi_dmul>
 8014ea6:	a372      	add	r3, pc, #456	; (adr r3, 8015070 <__ieee754_pow+0x6f0>)
 8014ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eac:	f7eb fa16 	bl	80002dc <__adddf3>
 8014eb0:	4622      	mov	r2, r4
 8014eb2:	462b      	mov	r3, r5
 8014eb4:	f7eb fbc8 	bl	8000648 <__aeabi_dmul>
 8014eb8:	a36f      	add	r3, pc, #444	; (adr r3, 8015078 <__ieee754_pow+0x6f8>)
 8014eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ebe:	f7eb fa0d 	bl	80002dc <__adddf3>
 8014ec2:	4622      	mov	r2, r4
 8014ec4:	4606      	mov	r6, r0
 8014ec6:	460f      	mov	r7, r1
 8014ec8:	462b      	mov	r3, r5
 8014eca:	4620      	mov	r0, r4
 8014ecc:	4629      	mov	r1, r5
 8014ece:	f7eb fbbb 	bl	8000648 <__aeabi_dmul>
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	4630      	mov	r0, r6
 8014ed8:	4639      	mov	r1, r7
 8014eda:	f7eb fbb5 	bl	8000648 <__aeabi_dmul>
 8014ede:	4642      	mov	r2, r8
 8014ee0:	4604      	mov	r4, r0
 8014ee2:	460d      	mov	r5, r1
 8014ee4:	464b      	mov	r3, r9
 8014ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014eea:	f7eb f9f7 	bl	80002dc <__adddf3>
 8014eee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ef2:	f7eb fba9 	bl	8000648 <__aeabi_dmul>
 8014ef6:	4622      	mov	r2, r4
 8014ef8:	462b      	mov	r3, r5
 8014efa:	f7eb f9ef 	bl	80002dc <__adddf3>
 8014efe:	4642      	mov	r2, r8
 8014f00:	4606      	mov	r6, r0
 8014f02:	460f      	mov	r7, r1
 8014f04:	464b      	mov	r3, r9
 8014f06:	4640      	mov	r0, r8
 8014f08:	4649      	mov	r1, r9
 8014f0a:	f7eb fb9d 	bl	8000648 <__aeabi_dmul>
 8014f0e:	2200      	movs	r2, #0
 8014f10:	4b68      	ldr	r3, [pc, #416]	; (80150b4 <__ieee754_pow+0x734>)
 8014f12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014f16:	f7eb f9e1 	bl	80002dc <__adddf3>
 8014f1a:	4632      	mov	r2, r6
 8014f1c:	463b      	mov	r3, r7
 8014f1e:	f7eb f9dd 	bl	80002dc <__adddf3>
 8014f22:	9802      	ldr	r0, [sp, #8]
 8014f24:	460d      	mov	r5, r1
 8014f26:	4604      	mov	r4, r0
 8014f28:	4602      	mov	r2, r0
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	4640      	mov	r0, r8
 8014f2e:	4649      	mov	r1, r9
 8014f30:	f7eb fb8a 	bl	8000648 <__aeabi_dmul>
 8014f34:	2200      	movs	r2, #0
 8014f36:	4680      	mov	r8, r0
 8014f38:	4689      	mov	r9, r1
 8014f3a:	4b5e      	ldr	r3, [pc, #376]	; (80150b4 <__ieee754_pow+0x734>)
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	4629      	mov	r1, r5
 8014f40:	f7eb f9ca 	bl	80002d8 <__aeabi_dsub>
 8014f44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014f48:	f7eb f9c6 	bl	80002d8 <__aeabi_dsub>
 8014f4c:	4602      	mov	r2, r0
 8014f4e:	460b      	mov	r3, r1
 8014f50:	4630      	mov	r0, r6
 8014f52:	4639      	mov	r1, r7
 8014f54:	f7eb f9c0 	bl	80002d8 <__aeabi_dsub>
 8014f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f5c:	f7eb fb74 	bl	8000648 <__aeabi_dmul>
 8014f60:	4622      	mov	r2, r4
 8014f62:	4606      	mov	r6, r0
 8014f64:	460f      	mov	r7, r1
 8014f66:	462b      	mov	r3, r5
 8014f68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f6c:	f7eb fb6c 	bl	8000648 <__aeabi_dmul>
 8014f70:	4602      	mov	r2, r0
 8014f72:	460b      	mov	r3, r1
 8014f74:	4630      	mov	r0, r6
 8014f76:	4639      	mov	r1, r7
 8014f78:	f7eb f9b0 	bl	80002dc <__adddf3>
 8014f7c:	4606      	mov	r6, r0
 8014f7e:	460f      	mov	r7, r1
 8014f80:	4602      	mov	r2, r0
 8014f82:	460b      	mov	r3, r1
 8014f84:	4640      	mov	r0, r8
 8014f86:	4649      	mov	r1, r9
 8014f88:	f7eb f9a8 	bl	80002dc <__adddf3>
 8014f8c:	9802      	ldr	r0, [sp, #8]
 8014f8e:	a33c      	add	r3, pc, #240	; (adr r3, 8015080 <__ieee754_pow+0x700>)
 8014f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f94:	4604      	mov	r4, r0
 8014f96:	460d      	mov	r5, r1
 8014f98:	f7eb fb56 	bl	8000648 <__aeabi_dmul>
 8014f9c:	4642      	mov	r2, r8
 8014f9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014fa2:	464b      	mov	r3, r9
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	4629      	mov	r1, r5
 8014fa8:	f7eb f996 	bl	80002d8 <__aeabi_dsub>
 8014fac:	4602      	mov	r2, r0
 8014fae:	460b      	mov	r3, r1
 8014fb0:	4630      	mov	r0, r6
 8014fb2:	4639      	mov	r1, r7
 8014fb4:	f7eb f990 	bl	80002d8 <__aeabi_dsub>
 8014fb8:	a333      	add	r3, pc, #204	; (adr r3, 8015088 <__ieee754_pow+0x708>)
 8014fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fbe:	f7eb fb43 	bl	8000648 <__aeabi_dmul>
 8014fc2:	a333      	add	r3, pc, #204	; (adr r3, 8015090 <__ieee754_pow+0x710>)
 8014fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc8:	4606      	mov	r6, r0
 8014fca:	460f      	mov	r7, r1
 8014fcc:	4620      	mov	r0, r4
 8014fce:	4629      	mov	r1, r5
 8014fd0:	f7eb fb3a 	bl	8000648 <__aeabi_dmul>
 8014fd4:	4602      	mov	r2, r0
 8014fd6:	460b      	mov	r3, r1
 8014fd8:	4630      	mov	r0, r6
 8014fda:	4639      	mov	r1, r7
 8014fdc:	f7eb f97e 	bl	80002dc <__adddf3>
 8014fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fe2:	4b35      	ldr	r3, [pc, #212]	; (80150b8 <__ieee754_pow+0x738>)
 8014fe4:	4413      	add	r3, r2
 8014fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fea:	f7eb f977 	bl	80002dc <__adddf3>
 8014fee:	4604      	mov	r4, r0
 8014ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ff2:	460d      	mov	r5, r1
 8014ff4:	f7eb fabe 	bl	8000574 <__aeabi_i2d>
 8014ff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ffa:	4b30      	ldr	r3, [pc, #192]	; (80150bc <__ieee754_pow+0x73c>)
 8014ffc:	4413      	add	r3, r2
 8014ffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015002:	4606      	mov	r6, r0
 8015004:	460f      	mov	r7, r1
 8015006:	4622      	mov	r2, r4
 8015008:	462b      	mov	r3, r5
 801500a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801500e:	f7eb f965 	bl	80002dc <__adddf3>
 8015012:	4642      	mov	r2, r8
 8015014:	464b      	mov	r3, r9
 8015016:	f7eb f961 	bl	80002dc <__adddf3>
 801501a:	4632      	mov	r2, r6
 801501c:	463b      	mov	r3, r7
 801501e:	f7eb f95d 	bl	80002dc <__adddf3>
 8015022:	9802      	ldr	r0, [sp, #8]
 8015024:	4632      	mov	r2, r6
 8015026:	463b      	mov	r3, r7
 8015028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801502c:	f7eb f954 	bl	80002d8 <__aeabi_dsub>
 8015030:	4642      	mov	r2, r8
 8015032:	464b      	mov	r3, r9
 8015034:	f7eb f950 	bl	80002d8 <__aeabi_dsub>
 8015038:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801503c:	e607      	b.n	8014c4e <__ieee754_pow+0x2ce>
 801503e:	f04f 0a01 	mov.w	sl, #1
 8015042:	e6a5      	b.n	8014d90 <__ieee754_pow+0x410>
 8015044:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015098 <__ieee754_pow+0x718>
 8015048:	e613      	b.n	8014c72 <__ieee754_pow+0x2f2>
 801504a:	bf00      	nop
 801504c:	f3af 8000 	nop.w
 8015050:	4a454eef 	.word	0x4a454eef
 8015054:	3fca7e28 	.word	0x3fca7e28
 8015058:	93c9db65 	.word	0x93c9db65
 801505c:	3fcd864a 	.word	0x3fcd864a
 8015060:	a91d4101 	.word	0xa91d4101
 8015064:	3fd17460 	.word	0x3fd17460
 8015068:	518f264d 	.word	0x518f264d
 801506c:	3fd55555 	.word	0x3fd55555
 8015070:	db6fabff 	.word	0xdb6fabff
 8015074:	3fdb6db6 	.word	0x3fdb6db6
 8015078:	33333303 	.word	0x33333303
 801507c:	3fe33333 	.word	0x3fe33333
 8015080:	e0000000 	.word	0xe0000000
 8015084:	3feec709 	.word	0x3feec709
 8015088:	dc3a03fd 	.word	0xdc3a03fd
 801508c:	3feec709 	.word	0x3feec709
 8015090:	145b01f5 	.word	0x145b01f5
 8015094:	be3e2fe0 	.word	0xbe3e2fe0
 8015098:	00000000 	.word	0x00000000
 801509c:	3ff00000 	.word	0x3ff00000
 80150a0:	43400000 	.word	0x43400000
 80150a4:	0003988e 	.word	0x0003988e
 80150a8:	000bb679 	.word	0x000bb679
 80150ac:	08016f10 	.word	0x08016f10
 80150b0:	3ff00000 	.word	0x3ff00000
 80150b4:	40080000 	.word	0x40080000
 80150b8:	08016f30 	.word	0x08016f30
 80150bc:	08016f20 	.word	0x08016f20
 80150c0:	a3b4      	add	r3, pc, #720	; (adr r3, 8015394 <__ieee754_pow+0xa14>)
 80150c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c6:	4640      	mov	r0, r8
 80150c8:	4649      	mov	r1, r9
 80150ca:	f7eb f907 	bl	80002dc <__adddf3>
 80150ce:	4622      	mov	r2, r4
 80150d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150d4:	462b      	mov	r3, r5
 80150d6:	4630      	mov	r0, r6
 80150d8:	4639      	mov	r1, r7
 80150da:	f7eb f8fd 	bl	80002d8 <__aeabi_dsub>
 80150de:	4602      	mov	r2, r0
 80150e0:	460b      	mov	r3, r1
 80150e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150e6:	f7eb fd3f 	bl	8000b68 <__aeabi_dcmpgt>
 80150ea:	2800      	cmp	r0, #0
 80150ec:	f47f adfe 	bne.w	8014cec <__ieee754_pow+0x36c>
 80150f0:	4aa3      	ldr	r2, [pc, #652]	; (8015380 <__ieee754_pow+0xa00>)
 80150f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80150f6:	4293      	cmp	r3, r2
 80150f8:	f340 810a 	ble.w	8015310 <__ieee754_pow+0x990>
 80150fc:	151b      	asrs	r3, r3, #20
 80150fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015102:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015106:	fa4a f303 	asr.w	r3, sl, r3
 801510a:	445b      	add	r3, fp
 801510c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015110:	4e9c      	ldr	r6, [pc, #624]	; (8015384 <__ieee754_pow+0xa04>)
 8015112:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015116:	4116      	asrs	r6, r2
 8015118:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801511c:	2000      	movs	r0, #0
 801511e:	ea23 0106 	bic.w	r1, r3, r6
 8015122:	f1c2 0214 	rsb	r2, r2, #20
 8015126:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801512a:	fa4a fa02 	asr.w	sl, sl, r2
 801512e:	f1bb 0f00 	cmp.w	fp, #0
 8015132:	4602      	mov	r2, r0
 8015134:	460b      	mov	r3, r1
 8015136:	4620      	mov	r0, r4
 8015138:	4629      	mov	r1, r5
 801513a:	bfb8      	it	lt
 801513c:	f1ca 0a00 	rsblt	sl, sl, #0
 8015140:	f7eb f8ca 	bl	80002d8 <__aeabi_dsub>
 8015144:	e9cd 0100 	strd	r0, r1, [sp]
 8015148:	4642      	mov	r2, r8
 801514a:	464b      	mov	r3, r9
 801514c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015150:	f7eb f8c4 	bl	80002dc <__adddf3>
 8015154:	2000      	movs	r0, #0
 8015156:	a378      	add	r3, pc, #480	; (adr r3, 8015338 <__ieee754_pow+0x9b8>)
 8015158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801515c:	4604      	mov	r4, r0
 801515e:	460d      	mov	r5, r1
 8015160:	f7eb fa72 	bl	8000648 <__aeabi_dmul>
 8015164:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015168:	4606      	mov	r6, r0
 801516a:	460f      	mov	r7, r1
 801516c:	4620      	mov	r0, r4
 801516e:	4629      	mov	r1, r5
 8015170:	f7eb f8b2 	bl	80002d8 <__aeabi_dsub>
 8015174:	4602      	mov	r2, r0
 8015176:	460b      	mov	r3, r1
 8015178:	4640      	mov	r0, r8
 801517a:	4649      	mov	r1, r9
 801517c:	f7eb f8ac 	bl	80002d8 <__aeabi_dsub>
 8015180:	a36f      	add	r3, pc, #444	; (adr r3, 8015340 <__ieee754_pow+0x9c0>)
 8015182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015186:	f7eb fa5f 	bl	8000648 <__aeabi_dmul>
 801518a:	a36f      	add	r3, pc, #444	; (adr r3, 8015348 <__ieee754_pow+0x9c8>)
 801518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015190:	4680      	mov	r8, r0
 8015192:	4689      	mov	r9, r1
 8015194:	4620      	mov	r0, r4
 8015196:	4629      	mov	r1, r5
 8015198:	f7eb fa56 	bl	8000648 <__aeabi_dmul>
 801519c:	4602      	mov	r2, r0
 801519e:	460b      	mov	r3, r1
 80151a0:	4640      	mov	r0, r8
 80151a2:	4649      	mov	r1, r9
 80151a4:	f7eb f89a 	bl	80002dc <__adddf3>
 80151a8:	4604      	mov	r4, r0
 80151aa:	460d      	mov	r5, r1
 80151ac:	4602      	mov	r2, r0
 80151ae:	460b      	mov	r3, r1
 80151b0:	4630      	mov	r0, r6
 80151b2:	4639      	mov	r1, r7
 80151b4:	f7eb f892 	bl	80002dc <__adddf3>
 80151b8:	4632      	mov	r2, r6
 80151ba:	463b      	mov	r3, r7
 80151bc:	4680      	mov	r8, r0
 80151be:	4689      	mov	r9, r1
 80151c0:	f7eb f88a 	bl	80002d8 <__aeabi_dsub>
 80151c4:	4602      	mov	r2, r0
 80151c6:	460b      	mov	r3, r1
 80151c8:	4620      	mov	r0, r4
 80151ca:	4629      	mov	r1, r5
 80151cc:	f7eb f884 	bl	80002d8 <__aeabi_dsub>
 80151d0:	4642      	mov	r2, r8
 80151d2:	4606      	mov	r6, r0
 80151d4:	460f      	mov	r7, r1
 80151d6:	464b      	mov	r3, r9
 80151d8:	4640      	mov	r0, r8
 80151da:	4649      	mov	r1, r9
 80151dc:	f7eb fa34 	bl	8000648 <__aeabi_dmul>
 80151e0:	a35b      	add	r3, pc, #364	; (adr r3, 8015350 <__ieee754_pow+0x9d0>)
 80151e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e6:	4604      	mov	r4, r0
 80151e8:	460d      	mov	r5, r1
 80151ea:	f7eb fa2d 	bl	8000648 <__aeabi_dmul>
 80151ee:	a35a      	add	r3, pc, #360	; (adr r3, 8015358 <__ieee754_pow+0x9d8>)
 80151f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f4:	f7eb f870 	bl	80002d8 <__aeabi_dsub>
 80151f8:	4622      	mov	r2, r4
 80151fa:	462b      	mov	r3, r5
 80151fc:	f7eb fa24 	bl	8000648 <__aeabi_dmul>
 8015200:	a357      	add	r3, pc, #348	; (adr r3, 8015360 <__ieee754_pow+0x9e0>)
 8015202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015206:	f7eb f869 	bl	80002dc <__adddf3>
 801520a:	4622      	mov	r2, r4
 801520c:	462b      	mov	r3, r5
 801520e:	f7eb fa1b 	bl	8000648 <__aeabi_dmul>
 8015212:	a355      	add	r3, pc, #340	; (adr r3, 8015368 <__ieee754_pow+0x9e8>)
 8015214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015218:	f7eb f85e 	bl	80002d8 <__aeabi_dsub>
 801521c:	4622      	mov	r2, r4
 801521e:	462b      	mov	r3, r5
 8015220:	f7eb fa12 	bl	8000648 <__aeabi_dmul>
 8015224:	a352      	add	r3, pc, #328	; (adr r3, 8015370 <__ieee754_pow+0x9f0>)
 8015226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801522a:	f7eb f857 	bl	80002dc <__adddf3>
 801522e:	4622      	mov	r2, r4
 8015230:	462b      	mov	r3, r5
 8015232:	f7eb fa09 	bl	8000648 <__aeabi_dmul>
 8015236:	4602      	mov	r2, r0
 8015238:	460b      	mov	r3, r1
 801523a:	4640      	mov	r0, r8
 801523c:	4649      	mov	r1, r9
 801523e:	f7eb f84b 	bl	80002d8 <__aeabi_dsub>
 8015242:	4604      	mov	r4, r0
 8015244:	460d      	mov	r5, r1
 8015246:	4602      	mov	r2, r0
 8015248:	460b      	mov	r3, r1
 801524a:	4640      	mov	r0, r8
 801524c:	4649      	mov	r1, r9
 801524e:	f7eb f9fb 	bl	8000648 <__aeabi_dmul>
 8015252:	2200      	movs	r2, #0
 8015254:	e9cd 0100 	strd	r0, r1, [sp]
 8015258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801525c:	4620      	mov	r0, r4
 801525e:	4629      	mov	r1, r5
 8015260:	f7eb f83a 	bl	80002d8 <__aeabi_dsub>
 8015264:	4602      	mov	r2, r0
 8015266:	460b      	mov	r3, r1
 8015268:	e9dd 0100 	ldrd	r0, r1, [sp]
 801526c:	f7eb fb16 	bl	800089c <__aeabi_ddiv>
 8015270:	4632      	mov	r2, r6
 8015272:	4604      	mov	r4, r0
 8015274:	460d      	mov	r5, r1
 8015276:	463b      	mov	r3, r7
 8015278:	4640      	mov	r0, r8
 801527a:	4649      	mov	r1, r9
 801527c:	f7eb f9e4 	bl	8000648 <__aeabi_dmul>
 8015280:	4632      	mov	r2, r6
 8015282:	463b      	mov	r3, r7
 8015284:	f7eb f82a 	bl	80002dc <__adddf3>
 8015288:	4602      	mov	r2, r0
 801528a:	460b      	mov	r3, r1
 801528c:	4620      	mov	r0, r4
 801528e:	4629      	mov	r1, r5
 8015290:	f7eb f822 	bl	80002d8 <__aeabi_dsub>
 8015294:	4642      	mov	r2, r8
 8015296:	464b      	mov	r3, r9
 8015298:	f7eb f81e 	bl	80002d8 <__aeabi_dsub>
 801529c:	4602      	mov	r2, r0
 801529e:	460b      	mov	r3, r1
 80152a0:	2000      	movs	r0, #0
 80152a2:	4939      	ldr	r1, [pc, #228]	; (8015388 <__ieee754_pow+0xa08>)
 80152a4:	f7eb f818 	bl	80002d8 <__aeabi_dsub>
 80152a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80152ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80152b0:	4602      	mov	r2, r0
 80152b2:	460b      	mov	r3, r1
 80152b4:	da2f      	bge.n	8015316 <__ieee754_pow+0x996>
 80152b6:	4650      	mov	r0, sl
 80152b8:	ec43 2b10 	vmov	d0, r2, r3
 80152bc:	f000 f9c0 	bl	8015640 <scalbn>
 80152c0:	ec51 0b10 	vmov	r0, r1, d0
 80152c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152c8:	f7ff bbf1 	b.w	8014aae <__ieee754_pow+0x12e>
 80152cc:	4b2f      	ldr	r3, [pc, #188]	; (801538c <__ieee754_pow+0xa0c>)
 80152ce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80152d2:	429e      	cmp	r6, r3
 80152d4:	f77f af0c 	ble.w	80150f0 <__ieee754_pow+0x770>
 80152d8:	4b2d      	ldr	r3, [pc, #180]	; (8015390 <__ieee754_pow+0xa10>)
 80152da:	440b      	add	r3, r1
 80152dc:	4303      	orrs	r3, r0
 80152de:	d00b      	beq.n	80152f8 <__ieee754_pow+0x978>
 80152e0:	a325      	add	r3, pc, #148	; (adr r3, 8015378 <__ieee754_pow+0x9f8>)
 80152e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152ea:	f7eb f9ad 	bl	8000648 <__aeabi_dmul>
 80152ee:	a322      	add	r3, pc, #136	; (adr r3, 8015378 <__ieee754_pow+0x9f8>)
 80152f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152f4:	f7ff bbdb 	b.w	8014aae <__ieee754_pow+0x12e>
 80152f8:	4622      	mov	r2, r4
 80152fa:	462b      	mov	r3, r5
 80152fc:	f7ea ffec 	bl	80002d8 <__aeabi_dsub>
 8015300:	4642      	mov	r2, r8
 8015302:	464b      	mov	r3, r9
 8015304:	f7eb fc26 	bl	8000b54 <__aeabi_dcmpge>
 8015308:	2800      	cmp	r0, #0
 801530a:	f43f aef1 	beq.w	80150f0 <__ieee754_pow+0x770>
 801530e:	e7e7      	b.n	80152e0 <__ieee754_pow+0x960>
 8015310:	f04f 0a00 	mov.w	sl, #0
 8015314:	e718      	b.n	8015148 <__ieee754_pow+0x7c8>
 8015316:	4621      	mov	r1, r4
 8015318:	e7d4      	b.n	80152c4 <__ieee754_pow+0x944>
 801531a:	2000      	movs	r0, #0
 801531c:	491a      	ldr	r1, [pc, #104]	; (8015388 <__ieee754_pow+0xa08>)
 801531e:	f7ff bb8f 	b.w	8014a40 <__ieee754_pow+0xc0>
 8015322:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015326:	f7ff bb8b 	b.w	8014a40 <__ieee754_pow+0xc0>
 801532a:	4630      	mov	r0, r6
 801532c:	4639      	mov	r1, r7
 801532e:	f7ff bb87 	b.w	8014a40 <__ieee754_pow+0xc0>
 8015332:	4693      	mov	fp, r2
 8015334:	f7ff bb98 	b.w	8014a68 <__ieee754_pow+0xe8>
 8015338:	00000000 	.word	0x00000000
 801533c:	3fe62e43 	.word	0x3fe62e43
 8015340:	fefa39ef 	.word	0xfefa39ef
 8015344:	3fe62e42 	.word	0x3fe62e42
 8015348:	0ca86c39 	.word	0x0ca86c39
 801534c:	be205c61 	.word	0xbe205c61
 8015350:	72bea4d0 	.word	0x72bea4d0
 8015354:	3e663769 	.word	0x3e663769
 8015358:	c5d26bf1 	.word	0xc5d26bf1
 801535c:	3ebbbd41 	.word	0x3ebbbd41
 8015360:	af25de2c 	.word	0xaf25de2c
 8015364:	3f11566a 	.word	0x3f11566a
 8015368:	16bebd93 	.word	0x16bebd93
 801536c:	3f66c16c 	.word	0x3f66c16c
 8015370:	5555553e 	.word	0x5555553e
 8015374:	3fc55555 	.word	0x3fc55555
 8015378:	c2f8f359 	.word	0xc2f8f359
 801537c:	01a56e1f 	.word	0x01a56e1f
 8015380:	3fe00000 	.word	0x3fe00000
 8015384:	000fffff 	.word	0x000fffff
 8015388:	3ff00000 	.word	0x3ff00000
 801538c:	4090cbff 	.word	0x4090cbff
 8015390:	3f6f3400 	.word	0x3f6f3400
 8015394:	652b82fe 	.word	0x652b82fe
 8015398:	3c971547 	.word	0x3c971547

0801539c <__ieee754_sqrt>:
 801539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a0:	4955      	ldr	r1, [pc, #340]	; (80154f8 <__ieee754_sqrt+0x15c>)
 80153a2:	ec55 4b10 	vmov	r4, r5, d0
 80153a6:	43a9      	bics	r1, r5
 80153a8:	462b      	mov	r3, r5
 80153aa:	462a      	mov	r2, r5
 80153ac:	d112      	bne.n	80153d4 <__ieee754_sqrt+0x38>
 80153ae:	ee10 2a10 	vmov	r2, s0
 80153b2:	ee10 0a10 	vmov	r0, s0
 80153b6:	4629      	mov	r1, r5
 80153b8:	f7eb f946 	bl	8000648 <__aeabi_dmul>
 80153bc:	4602      	mov	r2, r0
 80153be:	460b      	mov	r3, r1
 80153c0:	4620      	mov	r0, r4
 80153c2:	4629      	mov	r1, r5
 80153c4:	f7ea ff8a 	bl	80002dc <__adddf3>
 80153c8:	4604      	mov	r4, r0
 80153ca:	460d      	mov	r5, r1
 80153cc:	ec45 4b10 	vmov	d0, r4, r5
 80153d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153d4:	2d00      	cmp	r5, #0
 80153d6:	ee10 0a10 	vmov	r0, s0
 80153da:	4621      	mov	r1, r4
 80153dc:	dc0f      	bgt.n	80153fe <__ieee754_sqrt+0x62>
 80153de:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80153e2:	4330      	orrs	r0, r6
 80153e4:	d0f2      	beq.n	80153cc <__ieee754_sqrt+0x30>
 80153e6:	b155      	cbz	r5, 80153fe <__ieee754_sqrt+0x62>
 80153e8:	ee10 2a10 	vmov	r2, s0
 80153ec:	4620      	mov	r0, r4
 80153ee:	4629      	mov	r1, r5
 80153f0:	f7ea ff72 	bl	80002d8 <__aeabi_dsub>
 80153f4:	4602      	mov	r2, r0
 80153f6:	460b      	mov	r3, r1
 80153f8:	f7eb fa50 	bl	800089c <__aeabi_ddiv>
 80153fc:	e7e4      	b.n	80153c8 <__ieee754_sqrt+0x2c>
 80153fe:	151b      	asrs	r3, r3, #20
 8015400:	d073      	beq.n	80154ea <__ieee754_sqrt+0x14e>
 8015402:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015406:	07dd      	lsls	r5, r3, #31
 8015408:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801540c:	bf48      	it	mi
 801540e:	0fc8      	lsrmi	r0, r1, #31
 8015410:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015414:	bf44      	itt	mi
 8015416:	0049      	lslmi	r1, r1, #1
 8015418:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801541c:	2500      	movs	r5, #0
 801541e:	1058      	asrs	r0, r3, #1
 8015420:	0fcb      	lsrs	r3, r1, #31
 8015422:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015426:	0049      	lsls	r1, r1, #1
 8015428:	2316      	movs	r3, #22
 801542a:	462c      	mov	r4, r5
 801542c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015430:	19a7      	adds	r7, r4, r6
 8015432:	4297      	cmp	r7, r2
 8015434:	bfde      	ittt	le
 8015436:	19bc      	addle	r4, r7, r6
 8015438:	1bd2      	suble	r2, r2, r7
 801543a:	19ad      	addle	r5, r5, r6
 801543c:	0fcf      	lsrs	r7, r1, #31
 801543e:	3b01      	subs	r3, #1
 8015440:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8015444:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015448:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801544c:	d1f0      	bne.n	8015430 <__ieee754_sqrt+0x94>
 801544e:	f04f 0c20 	mov.w	ip, #32
 8015452:	469e      	mov	lr, r3
 8015454:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015458:	42a2      	cmp	r2, r4
 801545a:	eb06 070e 	add.w	r7, r6, lr
 801545e:	dc02      	bgt.n	8015466 <__ieee754_sqrt+0xca>
 8015460:	d112      	bne.n	8015488 <__ieee754_sqrt+0xec>
 8015462:	428f      	cmp	r7, r1
 8015464:	d810      	bhi.n	8015488 <__ieee754_sqrt+0xec>
 8015466:	2f00      	cmp	r7, #0
 8015468:	eb07 0e06 	add.w	lr, r7, r6
 801546c:	da42      	bge.n	80154f4 <__ieee754_sqrt+0x158>
 801546e:	f1be 0f00 	cmp.w	lr, #0
 8015472:	db3f      	blt.n	80154f4 <__ieee754_sqrt+0x158>
 8015474:	f104 0801 	add.w	r8, r4, #1
 8015478:	1b12      	subs	r2, r2, r4
 801547a:	428f      	cmp	r7, r1
 801547c:	bf88      	it	hi
 801547e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8015482:	1bc9      	subs	r1, r1, r7
 8015484:	4433      	add	r3, r6
 8015486:	4644      	mov	r4, r8
 8015488:	0052      	lsls	r2, r2, #1
 801548a:	f1bc 0c01 	subs.w	ip, ip, #1
 801548e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8015492:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015496:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801549a:	d1dd      	bne.n	8015458 <__ieee754_sqrt+0xbc>
 801549c:	430a      	orrs	r2, r1
 801549e:	d006      	beq.n	80154ae <__ieee754_sqrt+0x112>
 80154a0:	1c5c      	adds	r4, r3, #1
 80154a2:	bf13      	iteet	ne
 80154a4:	3301      	addne	r3, #1
 80154a6:	3501      	addeq	r5, #1
 80154a8:	4663      	moveq	r3, ip
 80154aa:	f023 0301 	bicne.w	r3, r3, #1
 80154ae:	106a      	asrs	r2, r5, #1
 80154b0:	085b      	lsrs	r3, r3, #1
 80154b2:	07e9      	lsls	r1, r5, #31
 80154b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80154b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80154bc:	bf48      	it	mi
 80154be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80154c2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80154c6:	461c      	mov	r4, r3
 80154c8:	e780      	b.n	80153cc <__ieee754_sqrt+0x30>
 80154ca:	0aca      	lsrs	r2, r1, #11
 80154cc:	3815      	subs	r0, #21
 80154ce:	0549      	lsls	r1, r1, #21
 80154d0:	2a00      	cmp	r2, #0
 80154d2:	d0fa      	beq.n	80154ca <__ieee754_sqrt+0x12e>
 80154d4:	02d6      	lsls	r6, r2, #11
 80154d6:	d50a      	bpl.n	80154ee <__ieee754_sqrt+0x152>
 80154d8:	f1c3 0420 	rsb	r4, r3, #32
 80154dc:	fa21 f404 	lsr.w	r4, r1, r4
 80154e0:	1e5d      	subs	r5, r3, #1
 80154e2:	4099      	lsls	r1, r3
 80154e4:	4322      	orrs	r2, r4
 80154e6:	1b43      	subs	r3, r0, r5
 80154e8:	e78b      	b.n	8015402 <__ieee754_sqrt+0x66>
 80154ea:	4618      	mov	r0, r3
 80154ec:	e7f0      	b.n	80154d0 <__ieee754_sqrt+0x134>
 80154ee:	0052      	lsls	r2, r2, #1
 80154f0:	3301      	adds	r3, #1
 80154f2:	e7ef      	b.n	80154d4 <__ieee754_sqrt+0x138>
 80154f4:	46a0      	mov	r8, r4
 80154f6:	e7bf      	b.n	8015478 <__ieee754_sqrt+0xdc>
 80154f8:	7ff00000 	.word	0x7ff00000

080154fc <fabs>:
 80154fc:	ec51 0b10 	vmov	r0, r1, d0
 8015500:	ee10 2a10 	vmov	r2, s0
 8015504:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015508:	ec43 2b10 	vmov	d0, r2, r3
 801550c:	4770      	bx	lr

0801550e <finite>:
 801550e:	ee10 3a90 	vmov	r3, s1
 8015512:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8015516:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801551a:	0fc0      	lsrs	r0, r0, #31
 801551c:	4770      	bx	lr

0801551e <matherr>:
 801551e:	2000      	movs	r0, #0
 8015520:	4770      	bx	lr
 8015522:	0000      	movs	r0, r0
 8015524:	0000      	movs	r0, r0
	...

08015528 <nan>:
 8015528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015530 <nan+0x8>
 801552c:	4770      	bx	lr
 801552e:	bf00      	nop
 8015530:	00000000 	.word	0x00000000
 8015534:	7ff80000 	.word	0x7ff80000

08015538 <rint>:
 8015538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801553a:	ec51 0b10 	vmov	r0, r1, d0
 801553e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015542:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015546:	2e13      	cmp	r6, #19
 8015548:	460b      	mov	r3, r1
 801554a:	ee10 4a10 	vmov	r4, s0
 801554e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015552:	dc56      	bgt.n	8015602 <rint+0xca>
 8015554:	2e00      	cmp	r6, #0
 8015556:	da2b      	bge.n	80155b0 <rint+0x78>
 8015558:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801555c:	4302      	orrs	r2, r0
 801555e:	d023      	beq.n	80155a8 <rint+0x70>
 8015560:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015564:	4302      	orrs	r2, r0
 8015566:	4254      	negs	r4, r2
 8015568:	4314      	orrs	r4, r2
 801556a:	0c4b      	lsrs	r3, r1, #17
 801556c:	0b24      	lsrs	r4, r4, #12
 801556e:	045b      	lsls	r3, r3, #17
 8015570:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015574:	ea44 0103 	orr.w	r1, r4, r3
 8015578:	460b      	mov	r3, r1
 801557a:	492f      	ldr	r1, [pc, #188]	; (8015638 <rint+0x100>)
 801557c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015580:	e9d1 6700 	ldrd	r6, r7, [r1]
 8015584:	4602      	mov	r2, r0
 8015586:	4639      	mov	r1, r7
 8015588:	4630      	mov	r0, r6
 801558a:	f7ea fea7 	bl	80002dc <__adddf3>
 801558e:	e9cd 0100 	strd	r0, r1, [sp]
 8015592:	463b      	mov	r3, r7
 8015594:	4632      	mov	r2, r6
 8015596:	e9dd 0100 	ldrd	r0, r1, [sp]
 801559a:	f7ea fe9d 	bl	80002d8 <__aeabi_dsub>
 801559e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80155a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80155a6:	4639      	mov	r1, r7
 80155a8:	ec41 0b10 	vmov	d0, r0, r1
 80155ac:	b003      	add	sp, #12
 80155ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155b0:	4a22      	ldr	r2, [pc, #136]	; (801563c <rint+0x104>)
 80155b2:	4132      	asrs	r2, r6
 80155b4:	ea01 0702 	and.w	r7, r1, r2
 80155b8:	4307      	orrs	r7, r0
 80155ba:	d0f5      	beq.n	80155a8 <rint+0x70>
 80155bc:	0852      	lsrs	r2, r2, #1
 80155be:	4011      	ands	r1, r2
 80155c0:	430c      	orrs	r4, r1
 80155c2:	d00b      	beq.n	80155dc <rint+0xa4>
 80155c4:	ea23 0202 	bic.w	r2, r3, r2
 80155c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80155cc:	2e13      	cmp	r6, #19
 80155ce:	fa43 f306 	asr.w	r3, r3, r6
 80155d2:	bf0c      	ite	eq
 80155d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80155d8:	2400      	movne	r4, #0
 80155da:	4313      	orrs	r3, r2
 80155dc:	4916      	ldr	r1, [pc, #88]	; (8015638 <rint+0x100>)
 80155de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80155e2:	4622      	mov	r2, r4
 80155e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80155e8:	4620      	mov	r0, r4
 80155ea:	4629      	mov	r1, r5
 80155ec:	f7ea fe76 	bl	80002dc <__adddf3>
 80155f0:	e9cd 0100 	strd	r0, r1, [sp]
 80155f4:	4622      	mov	r2, r4
 80155f6:	462b      	mov	r3, r5
 80155f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155fc:	f7ea fe6c 	bl	80002d8 <__aeabi_dsub>
 8015600:	e7d2      	b.n	80155a8 <rint+0x70>
 8015602:	2e33      	cmp	r6, #51	; 0x33
 8015604:	dd07      	ble.n	8015616 <rint+0xde>
 8015606:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801560a:	d1cd      	bne.n	80155a8 <rint+0x70>
 801560c:	ee10 2a10 	vmov	r2, s0
 8015610:	f7ea fe64 	bl	80002dc <__adddf3>
 8015614:	e7c8      	b.n	80155a8 <rint+0x70>
 8015616:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801561a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801561e:	40f2      	lsrs	r2, r6
 8015620:	4210      	tst	r0, r2
 8015622:	d0c1      	beq.n	80155a8 <rint+0x70>
 8015624:	0852      	lsrs	r2, r2, #1
 8015626:	4210      	tst	r0, r2
 8015628:	bf1f      	itttt	ne
 801562a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801562e:	ea20 0202 	bicne.w	r2, r0, r2
 8015632:	4134      	asrne	r4, r6
 8015634:	4314      	orrne	r4, r2
 8015636:	e7d1      	b.n	80155dc <rint+0xa4>
 8015638:	08016f40 	.word	0x08016f40
 801563c:	000fffff 	.word	0x000fffff

08015640 <scalbn>:
 8015640:	b570      	push	{r4, r5, r6, lr}
 8015642:	ec55 4b10 	vmov	r4, r5, d0
 8015646:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801564a:	4606      	mov	r6, r0
 801564c:	462b      	mov	r3, r5
 801564e:	b9aa      	cbnz	r2, 801567c <scalbn+0x3c>
 8015650:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015654:	4323      	orrs	r3, r4
 8015656:	d03b      	beq.n	80156d0 <scalbn+0x90>
 8015658:	4b31      	ldr	r3, [pc, #196]	; (8015720 <scalbn+0xe0>)
 801565a:	4629      	mov	r1, r5
 801565c:	2200      	movs	r2, #0
 801565e:	ee10 0a10 	vmov	r0, s0
 8015662:	f7ea fff1 	bl	8000648 <__aeabi_dmul>
 8015666:	4b2f      	ldr	r3, [pc, #188]	; (8015724 <scalbn+0xe4>)
 8015668:	429e      	cmp	r6, r3
 801566a:	4604      	mov	r4, r0
 801566c:	460d      	mov	r5, r1
 801566e:	da12      	bge.n	8015696 <scalbn+0x56>
 8015670:	a327      	add	r3, pc, #156	; (adr r3, 8015710 <scalbn+0xd0>)
 8015672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015676:	f7ea ffe7 	bl	8000648 <__aeabi_dmul>
 801567a:	e009      	b.n	8015690 <scalbn+0x50>
 801567c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015680:	428a      	cmp	r2, r1
 8015682:	d10c      	bne.n	801569e <scalbn+0x5e>
 8015684:	ee10 2a10 	vmov	r2, s0
 8015688:	4620      	mov	r0, r4
 801568a:	4629      	mov	r1, r5
 801568c:	f7ea fe26 	bl	80002dc <__adddf3>
 8015690:	4604      	mov	r4, r0
 8015692:	460d      	mov	r5, r1
 8015694:	e01c      	b.n	80156d0 <scalbn+0x90>
 8015696:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801569a:	460b      	mov	r3, r1
 801569c:	3a36      	subs	r2, #54	; 0x36
 801569e:	4432      	add	r2, r6
 80156a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80156a4:	428a      	cmp	r2, r1
 80156a6:	dd0b      	ble.n	80156c0 <scalbn+0x80>
 80156a8:	ec45 4b11 	vmov	d1, r4, r5
 80156ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015718 <scalbn+0xd8>
 80156b0:	f000 f9f0 	bl	8015a94 <copysign>
 80156b4:	a318      	add	r3, pc, #96	; (adr r3, 8015718 <scalbn+0xd8>)
 80156b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ba:	ec51 0b10 	vmov	r0, r1, d0
 80156be:	e7da      	b.n	8015676 <scalbn+0x36>
 80156c0:	2a00      	cmp	r2, #0
 80156c2:	dd08      	ble.n	80156d6 <scalbn+0x96>
 80156c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80156c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80156cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80156d0:	ec45 4b10 	vmov	d0, r4, r5
 80156d4:	bd70      	pop	{r4, r5, r6, pc}
 80156d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80156da:	da0d      	bge.n	80156f8 <scalbn+0xb8>
 80156dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80156e0:	429e      	cmp	r6, r3
 80156e2:	ec45 4b11 	vmov	d1, r4, r5
 80156e6:	dce1      	bgt.n	80156ac <scalbn+0x6c>
 80156e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015710 <scalbn+0xd0>
 80156ec:	f000 f9d2 	bl	8015a94 <copysign>
 80156f0:	a307      	add	r3, pc, #28	; (adr r3, 8015710 <scalbn+0xd0>)
 80156f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f6:	e7e0      	b.n	80156ba <scalbn+0x7a>
 80156f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80156fc:	3236      	adds	r2, #54	; 0x36
 80156fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015702:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015706:	4620      	mov	r0, r4
 8015708:	4629      	mov	r1, r5
 801570a:	2200      	movs	r2, #0
 801570c:	4b06      	ldr	r3, [pc, #24]	; (8015728 <scalbn+0xe8>)
 801570e:	e7b2      	b.n	8015676 <scalbn+0x36>
 8015710:	c2f8f359 	.word	0xc2f8f359
 8015714:	01a56e1f 	.word	0x01a56e1f
 8015718:	8800759c 	.word	0x8800759c
 801571c:	7e37e43c 	.word	0x7e37e43c
 8015720:	43500000 	.word	0x43500000
 8015724:	ffff3cb0 	.word	0xffff3cb0
 8015728:	3c900000 	.word	0x3c900000
 801572c:	00000000 	.word	0x00000000

08015730 <__ieee754_log>:
 8015730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015734:	ec51 0b10 	vmov	r0, r1, d0
 8015738:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801573c:	b087      	sub	sp, #28
 801573e:	460d      	mov	r5, r1
 8015740:	da27      	bge.n	8015792 <__ieee754_log+0x62>
 8015742:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015746:	4303      	orrs	r3, r0
 8015748:	ee10 2a10 	vmov	r2, s0
 801574c:	d10a      	bne.n	8015764 <__ieee754_log+0x34>
 801574e:	49cc      	ldr	r1, [pc, #816]	; (8015a80 <__ieee754_log+0x350>)
 8015750:	2200      	movs	r2, #0
 8015752:	2300      	movs	r3, #0
 8015754:	2000      	movs	r0, #0
 8015756:	f7eb f8a1 	bl	800089c <__aeabi_ddiv>
 801575a:	ec41 0b10 	vmov	d0, r0, r1
 801575e:	b007      	add	sp, #28
 8015760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015764:	2900      	cmp	r1, #0
 8015766:	da05      	bge.n	8015774 <__ieee754_log+0x44>
 8015768:	460b      	mov	r3, r1
 801576a:	f7ea fdb5 	bl	80002d8 <__aeabi_dsub>
 801576e:	2200      	movs	r2, #0
 8015770:	2300      	movs	r3, #0
 8015772:	e7f0      	b.n	8015756 <__ieee754_log+0x26>
 8015774:	4bc3      	ldr	r3, [pc, #780]	; (8015a84 <__ieee754_log+0x354>)
 8015776:	2200      	movs	r2, #0
 8015778:	f7ea ff66 	bl	8000648 <__aeabi_dmul>
 801577c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8015780:	460d      	mov	r5, r1
 8015782:	4ac1      	ldr	r2, [pc, #772]	; (8015a88 <__ieee754_log+0x358>)
 8015784:	4295      	cmp	r5, r2
 8015786:	dd06      	ble.n	8015796 <__ieee754_log+0x66>
 8015788:	4602      	mov	r2, r0
 801578a:	460b      	mov	r3, r1
 801578c:	f7ea fda6 	bl	80002dc <__adddf3>
 8015790:	e7e3      	b.n	801575a <__ieee754_log+0x2a>
 8015792:	2300      	movs	r3, #0
 8015794:	e7f5      	b.n	8015782 <__ieee754_log+0x52>
 8015796:	152c      	asrs	r4, r5, #20
 8015798:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801579c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80157a0:	441c      	add	r4, r3
 80157a2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80157a6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80157aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80157ae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80157b2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80157b6:	ea42 0105 	orr.w	r1, r2, r5
 80157ba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80157be:	2200      	movs	r2, #0
 80157c0:	4bb2      	ldr	r3, [pc, #712]	; (8015a8c <__ieee754_log+0x35c>)
 80157c2:	f7ea fd89 	bl	80002d8 <__aeabi_dsub>
 80157c6:	1cab      	adds	r3, r5, #2
 80157c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157cc:	2b02      	cmp	r3, #2
 80157ce:	4682      	mov	sl, r0
 80157d0:	468b      	mov	fp, r1
 80157d2:	f04f 0200 	mov.w	r2, #0
 80157d6:	dc53      	bgt.n	8015880 <__ieee754_log+0x150>
 80157d8:	2300      	movs	r3, #0
 80157da:	f7eb f99d 	bl	8000b18 <__aeabi_dcmpeq>
 80157de:	b1d0      	cbz	r0, 8015816 <__ieee754_log+0xe6>
 80157e0:	2c00      	cmp	r4, #0
 80157e2:	f000 8120 	beq.w	8015a26 <__ieee754_log+0x2f6>
 80157e6:	4620      	mov	r0, r4
 80157e8:	f7ea fec4 	bl	8000574 <__aeabi_i2d>
 80157ec:	a390      	add	r3, pc, #576	; (adr r3, 8015a30 <__ieee754_log+0x300>)
 80157ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f2:	4606      	mov	r6, r0
 80157f4:	460f      	mov	r7, r1
 80157f6:	f7ea ff27 	bl	8000648 <__aeabi_dmul>
 80157fa:	a38f      	add	r3, pc, #572	; (adr r3, 8015a38 <__ieee754_log+0x308>)
 80157fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015800:	4604      	mov	r4, r0
 8015802:	460d      	mov	r5, r1
 8015804:	4630      	mov	r0, r6
 8015806:	4639      	mov	r1, r7
 8015808:	f7ea ff1e 	bl	8000648 <__aeabi_dmul>
 801580c:	4602      	mov	r2, r0
 801580e:	460b      	mov	r3, r1
 8015810:	4620      	mov	r0, r4
 8015812:	4629      	mov	r1, r5
 8015814:	e7ba      	b.n	801578c <__ieee754_log+0x5c>
 8015816:	a38a      	add	r3, pc, #552	; (adr r3, 8015a40 <__ieee754_log+0x310>)
 8015818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801581c:	4650      	mov	r0, sl
 801581e:	4659      	mov	r1, fp
 8015820:	f7ea ff12 	bl	8000648 <__aeabi_dmul>
 8015824:	4602      	mov	r2, r0
 8015826:	460b      	mov	r3, r1
 8015828:	2000      	movs	r0, #0
 801582a:	4999      	ldr	r1, [pc, #612]	; (8015a90 <__ieee754_log+0x360>)
 801582c:	f7ea fd54 	bl	80002d8 <__aeabi_dsub>
 8015830:	4652      	mov	r2, sl
 8015832:	4606      	mov	r6, r0
 8015834:	460f      	mov	r7, r1
 8015836:	465b      	mov	r3, fp
 8015838:	4650      	mov	r0, sl
 801583a:	4659      	mov	r1, fp
 801583c:	f7ea ff04 	bl	8000648 <__aeabi_dmul>
 8015840:	4602      	mov	r2, r0
 8015842:	460b      	mov	r3, r1
 8015844:	4630      	mov	r0, r6
 8015846:	4639      	mov	r1, r7
 8015848:	f7ea fefe 	bl	8000648 <__aeabi_dmul>
 801584c:	4606      	mov	r6, r0
 801584e:	460f      	mov	r7, r1
 8015850:	b914      	cbnz	r4, 8015858 <__ieee754_log+0x128>
 8015852:	4632      	mov	r2, r6
 8015854:	463b      	mov	r3, r7
 8015856:	e0a0      	b.n	801599a <__ieee754_log+0x26a>
 8015858:	4620      	mov	r0, r4
 801585a:	f7ea fe8b 	bl	8000574 <__aeabi_i2d>
 801585e:	a374      	add	r3, pc, #464	; (adr r3, 8015a30 <__ieee754_log+0x300>)
 8015860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015864:	4680      	mov	r8, r0
 8015866:	4689      	mov	r9, r1
 8015868:	f7ea feee 	bl	8000648 <__aeabi_dmul>
 801586c:	a372      	add	r3, pc, #456	; (adr r3, 8015a38 <__ieee754_log+0x308>)
 801586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015872:	4604      	mov	r4, r0
 8015874:	460d      	mov	r5, r1
 8015876:	4640      	mov	r0, r8
 8015878:	4649      	mov	r1, r9
 801587a:	f7ea fee5 	bl	8000648 <__aeabi_dmul>
 801587e:	e0a5      	b.n	80159cc <__ieee754_log+0x29c>
 8015880:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015884:	f7ea fd2a 	bl	80002dc <__adddf3>
 8015888:	4602      	mov	r2, r0
 801588a:	460b      	mov	r3, r1
 801588c:	4650      	mov	r0, sl
 801588e:	4659      	mov	r1, fp
 8015890:	f7eb f804 	bl	800089c <__aeabi_ddiv>
 8015894:	e9cd 0100 	strd	r0, r1, [sp]
 8015898:	4620      	mov	r0, r4
 801589a:	f7ea fe6b 	bl	8000574 <__aeabi_i2d>
 801589e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80158a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158a6:	4610      	mov	r0, r2
 80158a8:	4619      	mov	r1, r3
 80158aa:	f7ea fecd 	bl	8000648 <__aeabi_dmul>
 80158ae:	4602      	mov	r2, r0
 80158b0:	460b      	mov	r3, r1
 80158b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158b6:	f7ea fec7 	bl	8000648 <__aeabi_dmul>
 80158ba:	a363      	add	r3, pc, #396	; (adr r3, 8015a48 <__ieee754_log+0x318>)
 80158bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c0:	4680      	mov	r8, r0
 80158c2:	4689      	mov	r9, r1
 80158c4:	f7ea fec0 	bl	8000648 <__aeabi_dmul>
 80158c8:	a361      	add	r3, pc, #388	; (adr r3, 8015a50 <__ieee754_log+0x320>)
 80158ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ce:	f7ea fd05 	bl	80002dc <__adddf3>
 80158d2:	4642      	mov	r2, r8
 80158d4:	464b      	mov	r3, r9
 80158d6:	f7ea feb7 	bl	8000648 <__aeabi_dmul>
 80158da:	a35f      	add	r3, pc, #380	; (adr r3, 8015a58 <__ieee754_log+0x328>)
 80158dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e0:	f7ea fcfc 	bl	80002dc <__adddf3>
 80158e4:	4642      	mov	r2, r8
 80158e6:	464b      	mov	r3, r9
 80158e8:	f7ea feae 	bl	8000648 <__aeabi_dmul>
 80158ec:	a35c      	add	r3, pc, #368	; (adr r3, 8015a60 <__ieee754_log+0x330>)
 80158ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f2:	f7ea fcf3 	bl	80002dc <__adddf3>
 80158f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158fa:	f7ea fea5 	bl	8000648 <__aeabi_dmul>
 80158fe:	a35a      	add	r3, pc, #360	; (adr r3, 8015a68 <__ieee754_log+0x338>)
 8015900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015908:	4640      	mov	r0, r8
 801590a:	4649      	mov	r1, r9
 801590c:	f7ea fe9c 	bl	8000648 <__aeabi_dmul>
 8015910:	a357      	add	r3, pc, #348	; (adr r3, 8015a70 <__ieee754_log+0x340>)
 8015912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015916:	f7ea fce1 	bl	80002dc <__adddf3>
 801591a:	4642      	mov	r2, r8
 801591c:	464b      	mov	r3, r9
 801591e:	f7ea fe93 	bl	8000648 <__aeabi_dmul>
 8015922:	a355      	add	r3, pc, #340	; (adr r3, 8015a78 <__ieee754_log+0x348>)
 8015924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015928:	f7ea fcd8 	bl	80002dc <__adddf3>
 801592c:	4642      	mov	r2, r8
 801592e:	464b      	mov	r3, r9
 8015930:	f7ea fe8a 	bl	8000648 <__aeabi_dmul>
 8015934:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8015938:	4602      	mov	r2, r0
 801593a:	460b      	mov	r3, r1
 801593c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8015940:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015944:	f7ea fcca 	bl	80002dc <__adddf3>
 8015948:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801594c:	3551      	adds	r5, #81	; 0x51
 801594e:	4335      	orrs	r5, r6
 8015950:	2d00      	cmp	r5, #0
 8015952:	4680      	mov	r8, r0
 8015954:	4689      	mov	r9, r1
 8015956:	dd48      	ble.n	80159ea <__ieee754_log+0x2ba>
 8015958:	2200      	movs	r2, #0
 801595a:	4b4d      	ldr	r3, [pc, #308]	; (8015a90 <__ieee754_log+0x360>)
 801595c:	4650      	mov	r0, sl
 801595e:	4659      	mov	r1, fp
 8015960:	f7ea fe72 	bl	8000648 <__aeabi_dmul>
 8015964:	4652      	mov	r2, sl
 8015966:	465b      	mov	r3, fp
 8015968:	f7ea fe6e 	bl	8000648 <__aeabi_dmul>
 801596c:	4602      	mov	r2, r0
 801596e:	460b      	mov	r3, r1
 8015970:	4606      	mov	r6, r0
 8015972:	460f      	mov	r7, r1
 8015974:	4640      	mov	r0, r8
 8015976:	4649      	mov	r1, r9
 8015978:	f7ea fcb0 	bl	80002dc <__adddf3>
 801597c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015980:	f7ea fe62 	bl	8000648 <__aeabi_dmul>
 8015984:	4680      	mov	r8, r0
 8015986:	4689      	mov	r9, r1
 8015988:	b964      	cbnz	r4, 80159a4 <__ieee754_log+0x274>
 801598a:	4602      	mov	r2, r0
 801598c:	460b      	mov	r3, r1
 801598e:	4630      	mov	r0, r6
 8015990:	4639      	mov	r1, r7
 8015992:	f7ea fca1 	bl	80002d8 <__aeabi_dsub>
 8015996:	4602      	mov	r2, r0
 8015998:	460b      	mov	r3, r1
 801599a:	4650      	mov	r0, sl
 801599c:	4659      	mov	r1, fp
 801599e:	f7ea fc9b 	bl	80002d8 <__aeabi_dsub>
 80159a2:	e6da      	b.n	801575a <__ieee754_log+0x2a>
 80159a4:	a322      	add	r3, pc, #136	; (adr r3, 8015a30 <__ieee754_log+0x300>)
 80159a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159ae:	f7ea fe4b 	bl	8000648 <__aeabi_dmul>
 80159b2:	a321      	add	r3, pc, #132	; (adr r3, 8015a38 <__ieee754_log+0x308>)
 80159b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b8:	4604      	mov	r4, r0
 80159ba:	460d      	mov	r5, r1
 80159bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159c0:	f7ea fe42 	bl	8000648 <__aeabi_dmul>
 80159c4:	4642      	mov	r2, r8
 80159c6:	464b      	mov	r3, r9
 80159c8:	f7ea fc88 	bl	80002dc <__adddf3>
 80159cc:	4602      	mov	r2, r0
 80159ce:	460b      	mov	r3, r1
 80159d0:	4630      	mov	r0, r6
 80159d2:	4639      	mov	r1, r7
 80159d4:	f7ea fc80 	bl	80002d8 <__aeabi_dsub>
 80159d8:	4652      	mov	r2, sl
 80159da:	465b      	mov	r3, fp
 80159dc:	f7ea fc7c 	bl	80002d8 <__aeabi_dsub>
 80159e0:	4602      	mov	r2, r0
 80159e2:	460b      	mov	r3, r1
 80159e4:	4620      	mov	r0, r4
 80159e6:	4629      	mov	r1, r5
 80159e8:	e7d9      	b.n	801599e <__ieee754_log+0x26e>
 80159ea:	4602      	mov	r2, r0
 80159ec:	460b      	mov	r3, r1
 80159ee:	4650      	mov	r0, sl
 80159f0:	4659      	mov	r1, fp
 80159f2:	f7ea fc71 	bl	80002d8 <__aeabi_dsub>
 80159f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159fa:	f7ea fe25 	bl	8000648 <__aeabi_dmul>
 80159fe:	4606      	mov	r6, r0
 8015a00:	460f      	mov	r7, r1
 8015a02:	2c00      	cmp	r4, #0
 8015a04:	f43f af25 	beq.w	8015852 <__ieee754_log+0x122>
 8015a08:	a309      	add	r3, pc, #36	; (adr r3, 8015a30 <__ieee754_log+0x300>)
 8015a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a12:	f7ea fe19 	bl	8000648 <__aeabi_dmul>
 8015a16:	a308      	add	r3, pc, #32	; (adr r3, 8015a38 <__ieee754_log+0x308>)
 8015a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a1c:	4604      	mov	r4, r0
 8015a1e:	460d      	mov	r5, r1
 8015a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a24:	e729      	b.n	801587a <__ieee754_log+0x14a>
 8015a26:	2000      	movs	r0, #0
 8015a28:	2100      	movs	r1, #0
 8015a2a:	e696      	b.n	801575a <__ieee754_log+0x2a>
 8015a2c:	f3af 8000 	nop.w
 8015a30:	fee00000 	.word	0xfee00000
 8015a34:	3fe62e42 	.word	0x3fe62e42
 8015a38:	35793c76 	.word	0x35793c76
 8015a3c:	3dea39ef 	.word	0x3dea39ef
 8015a40:	55555555 	.word	0x55555555
 8015a44:	3fd55555 	.word	0x3fd55555
 8015a48:	df3e5244 	.word	0xdf3e5244
 8015a4c:	3fc2f112 	.word	0x3fc2f112
 8015a50:	96cb03de 	.word	0x96cb03de
 8015a54:	3fc74664 	.word	0x3fc74664
 8015a58:	94229359 	.word	0x94229359
 8015a5c:	3fd24924 	.word	0x3fd24924
 8015a60:	55555593 	.word	0x55555593
 8015a64:	3fe55555 	.word	0x3fe55555
 8015a68:	d078c69f 	.word	0xd078c69f
 8015a6c:	3fc39a09 	.word	0x3fc39a09
 8015a70:	1d8e78af 	.word	0x1d8e78af
 8015a74:	3fcc71c5 	.word	0x3fcc71c5
 8015a78:	9997fa04 	.word	0x9997fa04
 8015a7c:	3fd99999 	.word	0x3fd99999
 8015a80:	c3500000 	.word	0xc3500000
 8015a84:	43500000 	.word	0x43500000
 8015a88:	7fefffff 	.word	0x7fefffff
 8015a8c:	3ff00000 	.word	0x3ff00000
 8015a90:	3fe00000 	.word	0x3fe00000

08015a94 <copysign>:
 8015a94:	ec51 0b10 	vmov	r0, r1, d0
 8015a98:	ee11 0a90 	vmov	r0, s3
 8015a9c:	ee10 2a10 	vmov	r2, s0
 8015aa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015aa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015aa8:	ea41 0300 	orr.w	r3, r1, r0
 8015aac:	ec43 2b10 	vmov	d0, r2, r3
 8015ab0:	4770      	bx	lr
	...

08015ab4 <_init>:
 8015ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ab6:	bf00      	nop
 8015ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015aba:	bc08      	pop	{r3}
 8015abc:	469e      	mov	lr, r3
 8015abe:	4770      	bx	lr

08015ac0 <_fini>:
 8015ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ac2:	bf00      	nop
 8015ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ac6:	bc08      	pop	{r3}
 8015ac8:	469e      	mov	lr, r3
 8015aca:	4770      	bx	lr
