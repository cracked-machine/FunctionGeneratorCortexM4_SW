
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d58  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018b0  08010f38  08010f38  00020f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127e8  080127e8  00031ecc  2**0
                  CONTENTS
  4 .ARM          00000000  080127e8  080127e8  00031ecc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080127e8  080127e8  00031ecc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127e8  080127e8  000227e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127ec  080127ec  000227ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ecc  20000000  080127f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  20001ecc  080146bc  00031ecc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002968  080146bc  00032968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ecc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ff14  00000000  00000000  00031efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007293  00000000  00000000  00071e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002140  00000000  00000000  000790a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d58  00000000  00000000  0007b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034064  00000000  00000000  0007cf40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002bf74  00000000  00000000  000b0fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125d24  00000000  00000000  000dcf18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00202c3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090cc  00000000  00000000  00202cb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001ecc 	.word	0x20001ecc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010f20 	.word	0x08010f20

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001ed0 	.word	0x20001ed0
 800021c:	08010f20 	.word	0x08010f20

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d000      	beq.n	8000c0a <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000c08:	e002      	b.n	8000c10 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000c0a:	f000 f805 	bl	8000c18 <BiasMenu_DrawMainMenu>
			break;
 8000c0e:	bf00      	nop

	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, WHITE, 2, BLACK);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2302      	movs	r3, #2
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	210a      	movs	r1, #10
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <BiasMenu_DrawMainMenu+0x28>)
 8000c30:	f00c fed8 	bl	800d9e4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000c34:	f000 f936 	bl	8000ea4 <DM_DisplayFormattedOutput>

}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08010f38 	.word	0x08010f38

08000c44 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c48:	f00c ff1e 	bl	800da88 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f00d fb0b 	bl	800e268 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c56:	f00d f91f 	bl	800de98 <ILI9341_Fill_Screen>

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2300      	movs	r3, #0
 8000c72:	220a      	movs	r2, #10
 8000c74:	210a      	movs	r1, #10
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <DM_PostInit+0x34>)
 8000c78:	f00c feb4 	bl	800d9e4 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c80:	f007 fd08 	bl	8008694 <HAL_Delay>

	  DM_RefreshScreen();
 8000c84:	f000 fa80 	bl	8001188 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <DM_PostInit+0x38>)
 8000c8a:	f00e f9ef 	bl	800f06c <puts>
#endif


}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	08010f44 	.word	0x08010f44
 8000c98:	08010f54 	.word	0x08010f54

08000c9c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09c      	sub	sp, #112	; 0x70
 8000ca0:	af02      	add	r7, sp, #8

	if(ToplevelMenu_getStatus())
 8000ca2:	f003 fd03 	bl	80046ac <ToplevelMenu_getStatus>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d018      	beq.n	8000cde <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000cac:	4872      	ldr	r0, [pc, #456]	; (8000e78 <DM_UpdateDisplay+0x1dc>)
 8000cae:	f00e f9dd 	bl	800f06c <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000cb2:	f003 fcfb 	bl	80046ac <ToplevelMenu_getStatus>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d008      	beq.n	8000cce <DM_UpdateDisplay+0x32>
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d00a      	beq.n	8000cd6 <DM_UpdateDisplay+0x3a>
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d000      	beq.n	8000cc6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000cc4:	e089      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f002 fca4 	bl	8003614 <ToplevelMenu_DrawMenu>
				break;
 8000ccc:	e085      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f002 fca0 	bl	8003614 <ToplevelMenu_DrawMenu>
				break;
 8000cd4:	e081      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f002 fc9c 	bl	8003614 <ToplevelMenu_DrawMenu>
				break;
 8000cdc:	e07d      	b.n	8000dda <DM_UpdateDisplay+0x13e>
		}
	}

	// Function menus
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000cde:	f003 fae5 	bl	80042ac <FuncMenu_getStatus>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d018      	beq.n	8000d1a <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000ce8:	4863      	ldr	r0, [pc, #396]	; (8000e78 <DM_UpdateDisplay+0x1dc>)
 8000cea:	f00e f9bf 	bl	800f06c <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000cee:	f003 fadd 	bl	80042ac <FuncMenu_getStatus>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d008      	beq.n	8000d0a <DM_UpdateDisplay+0x6e>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d00a      	beq.n	8000d12 <DM_UpdateDisplay+0x76>
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d000      	beq.n	8000d02 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000d00:	e06b      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f001 ffd6 	bl	8002cb4 <FuncMenu_DrawMenu>
				break;
 8000d08:	e067      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f001 ffd2 	bl	8002cb4 <FuncMenu_DrawMenu>
				break;
 8000d10:	e063      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000d12:	2003      	movs	r0, #3
 8000d14:	f001 ffce 	bl	8002cb4 <FuncMenu_DrawMenu>
				break;
 8000d18:	e05f      	b.n	8000dda <DM_UpdateDisplay+0x13e>
		}

	}
	// Gain menus
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000d1a:	f003 fbc9 	bl	80044b0 <GainMenu_getStatus>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d018      	beq.n	8000d56 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000d24:	4855      	ldr	r0, [pc, #340]	; (8000e7c <DM_UpdateDisplay+0x1e0>)
 8000d26:	f00e f9a1 	bl	800f06c <puts>
		#endif

		switch(GainMenu_getStatus())
 8000d2a:	f003 fbc1 	bl	80044b0 <GainMenu_getStatus>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d008      	beq.n	8000d46 <DM_UpdateDisplay+0xaa>
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d00a      	beq.n	8000d4e <DM_UpdateDisplay+0xb2>
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d000      	beq.n	8000d3e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000d3c:	e04d      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f002 fbda 	bl	80034f8 <GainMenu_DrawMenu>
				break;
 8000d44:	e049      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000d46:	2002      	movs	r0, #2
 8000d48:	f002 fbd6 	bl	80034f8 <GainMenu_DrawMenu>
				break;
 8000d4c:	e045      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f002 fbd2 	bl	80034f8 <GainMenu_DrawMenu>
				break;
 8000d54:	e041      	b.n	8000dda <DM_UpdateDisplay+0x13e>
		}

	}

	// Frequency menus
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000d56:	f002 ffcf 	bl	8003cf8 <FreqMenu_getStatus>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000d60:	4847      	ldr	r0, [pc, #284]	; (8000e80 <DM_UpdateDisplay+0x1e4>)
 8000d62:	f00e f983 	bl	800f06c <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000d66:	f002 ffc7 	bl	8003cf8 <FreqMenu_getStatus>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d832      	bhi.n	8000dd8 <DM_UpdateDisplay+0x13c>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <DM_UpdateDisplay+0xdc>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000d91 	.word	0x08000d91
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000da1 	.word	0x08000da1
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fa59 	bl	8001240 <FreqMenu_DrawMenu>

				break;
 8000d8e:	e024      	b.n	8000dda <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000d90:	2002      	movs	r0, #2
 8000d92:	f000 fa55 	bl	8001240 <FreqMenu_DrawMenu>
				break;
 8000d96:	e020      	b.n	8000dda <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 fa51 	bl	8001240 <FreqMenu_DrawMenu>

				break;
 8000d9e:	e01c      	b.n	8000dda <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000da0:	2004      	movs	r0, #4
 8000da2:	f000 fa4d 	bl	8001240 <FreqMenu_DrawMenu>
				break;
 8000da6:	e018      	b.n	8000dda <DM_UpdateDisplay+0x13e>
		}

	}

	// Bias menu
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000da8:	f002 fcee 	bl	8003788 <BiasMenu_getStatus>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000db2:	4834      	ldr	r0, [pc, #208]	; (8000e84 <DM_UpdateDisplay+0x1e8>)
 8000db4:	f00e f95a 	bl	800f06c <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff ff1d 	bl	8000bf8 <BiasMenu_DrawMenu>
 8000dbe:	e00c      	b.n	8000dda <DM_UpdateDisplay+0x13e>
	}
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, BLACK, 1, RED);
 8000dc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2232      	movs	r2, #50	; 0x32
 8000dce:	210a      	movs	r1, #10
 8000dd0:	482d      	ldr	r0, [pc, #180]	; (8000e88 <DM_UpdateDisplay+0x1ec>)
 8000dd2:	f00c fe07 	bl	800d9e4 <ILI9341_Draw_Text>
 8000dd6:	e000      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				break;
 8000dd8:	bf00      	nop
	}

	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000dda:	2300      	movs	r3, #0
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8000dde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000de2:	222e      	movs	r2, #46	; 0x2e
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00d fc80 	bl	800e6ec <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OUTPUT_TIMER->ARR: %5lu", OUTPUT_TIMER->ARR);
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <DM_UpdateDisplay+0x1f0>)
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000df4:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <DM_UpdateDisplay+0x1f4>)
 8000df6:	2132      	movs	r1, #50	; 0x32
 8000df8:	f00e f940 	bl	800f07c <sniprintf>
		//if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
			ILI9341_Draw_Text(tim5_text, 10, 180, BLACK, 1, RED);
 8000dfc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000e00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	22b4      	movs	r2, #180	; 0xb4
 8000e0e:	210a      	movs	r1, #10
 8000e10:	f00c fde8 	bl	800d9e4 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	222e      	movs	r2, #46	; 0x2e
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f00d fc64 	bl	800e6ec <memset>
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <DM_UpdateDisplay+0x1f8>)
 8000e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <DM_UpdateDisplay+0x1fc>)
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	4613      	mov	r3, r2
 8000e32:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <DM_UpdateDisplay+0x200>)
 8000e34:	2132      	movs	r1, #50	; 0x32
 8000e36:	f00e f921 	bl	800f07c <sniprintf>
		//if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
			ILI9341_Draw_Text(encoder_value, 10, 190, BLACK, 1, RED);
 8000e3a:	4638      	mov	r0, r7
 8000e3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	2301      	movs	r3, #1
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2300      	movs	r3, #0
 8000e48:	22be      	movs	r2, #190	; 0xbe
 8000e4a:	210a      	movs	r1, #10
 8000e4c:	f00c fdca 	bl	800d9e4 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <DM_UpdateDisplay+0x204>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00a      	beq.n	8000e6e <DM_UpdateDisplay+0x1d2>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 8000e58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	22be      	movs	r2, #190	; 0xbe
 8000e66:	210a      	movs	r1, #10
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <DM_UpdateDisplay+0x204>)
 8000e6a:	f00c fdbb 	bl	800d9e4 <ILI9341_Draw_Text>

}
 8000e6e:	bf00      	nop
 8000e70:	3768      	adds	r7, #104	; 0x68
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	08010f64 	.word	0x08010f64
 8000e7c:	08010f78 	.word	0x08010f78
 8000e80:	08010f8c 	.word	0x08010f8c
 8000e84:	08010fa0 	.word	0x08010fa0
 8000e88:	08010fb4 	.word	0x08010fb4
 8000e8c:	40013400 	.word	0x40013400
 8000e90:	08010fd8 	.word	0x08010fd8
 8000e94:	40000c00 	.word	0x40000c00
 8000e98:	40012c00 	.word	0x40012c00
 8000e9c:	08010ff0 	.word	0x08010ff0
 8000ea0:	20001ee8 	.word	0x20001ee8

08000ea4 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b09b      	sub	sp, #108	; 0x6c
 8000ea8:	af02      	add	r7, sp, #8
	uint8_t text_size = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	char out_hertz[15] = "";
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000eb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 150;
 8000ec2:	2396      	movs	r3, #150	; 0x96
 8000ec4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	uint8_t out_hertz_y = 40;
 8000ec8:	2328      	movs	r3, #40	; 0x28
 8000eca:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	char out_vpp[18] = "";
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 150;
 8000ee0:	2396      	movs	r3, #150	; 0x96
 8000ee2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	uint8_t out_vpp_y = 70;
 8000ee6:	2346      	movs	r3, #70	; 0x46
 8000ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char out_decibels[13] = "";
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	721a      	strb	r2, [r3, #8]
	uint8_t out_decibels_x = 150;
 8000efc:	2396      	movs	r3, #150	; 0x96
 8000efe:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t out_decibels_y = 100;
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55


	float volts_per_thou = 0.00075;
 8000f08:	4b94      	ldr	r3, [pc, #592]	; (800115c <DM_DisplayFormattedOutput+0x2b8>)
 8000f0a:	653b      	str	r3, [r7, #80]	; 0x50
	char out_dcvolts[12] = "";
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 150;
 8000f1a:	2396      	movs	r3, #150	; 0x96
 8000f1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_dcvolts_y = 130;
 8000f20:	2382      	movs	r3, #130	; 0x82
 8000f22:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	ILI9341_Draw_Text(" FREQ:", 10, out_hertz_y , BLACK, text_size, WHITE);
 8000f26:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f36:	9201      	str	r2, [sp, #4]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	210a      	movs	r1, #10
 8000f40:	4887      	ldr	r0, [pc, #540]	; (8001160 <DM_DisplayFormattedOutput+0x2bc>)
 8000f42:	f00c fd4f 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP:", 10, out_vpp_y, BLACK, text_size, WHITE);
 8000f46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f56:	9201      	str	r2, [sp, #4]
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	210a      	movs	r1, #10
 8000f60:	4880      	ldr	r0, [pc, #512]	; (8001164 <DM_DisplayFormattedOutput+0x2c0>)
 8000f62:	f00c fd3f 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN:", 10, out_decibels_y, BLACK, text_size, WHITE);
 8000f66:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f76:	9201      	str	r2, [sp, #4]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	210a      	movs	r1, #10
 8000f80:	4879      	ldr	r0, [pc, #484]	; (8001168 <DM_DisplayFormattedOutput+0x2c4>)
 8000f82:	f00c fd2f 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET:", 10, out_dcvolts_y, BLACK, text_size, WHITE);
 8000f86:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f96:	9201      	str	r2, [sp, #4]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	210a      	movs	r1, #10
 8000fa0:	4872      	ldr	r0, [pc, #456]	; (800116c <DM_DisplayFormattedOutput+0x2c8>)
 8000fa2:	f00c fd1f 	bl	800d9e4 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f Hz ", SM_GetOutputInHertz());
 8000fa6:	f004 fb19 	bl	80055dc <SM_GetOutputInHertz>
 8000faa:	ee10 3a10 	vmov	r3, s0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff faf2 	bl	8000598 <__aeabi_f2d>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000fbc:	e9cd 3400 	strd	r3, r4, [sp]
 8000fc0:	4a6b      	ldr	r2, [pc, #428]	; (8001170 <DM_DisplayFormattedOutput+0x2cc>)
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f00e f85a 	bl	800f07c <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, text_size, WHITE);
 8000fc8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000fcc:	b299      	uxth	r1, r3
 8000fce:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000fd2:	b29c      	uxth	r4, r3
 8000fd4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe2:	9201      	str	r2, [sp, #4]
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	4622      	mov	r2, r4
 8000fea:	f00c fcfb 	bl	800d9e4 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f004 fac2 	bl	8005578 <SM_GetOutputChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8000ffa:	64bb      	str	r3, [r7, #72]	; 0x48

	if(pTmpVppPreset)
 8000ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d016      	beq.n	8001030 <DM_DisplayFormattedOutput+0x18c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f V ", pTmpVppPreset->amp_value);
 8001002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fac6 	bl	8000598 <__aeabi_f2d>
 800100c:	4603      	mov	r3, r0
 800100e:	460c      	mov	r4, r1
 8001010:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001014:	e9cd 3400 	strd	r3, r4, [sp]
 8001018:	4a56      	ldr	r2, [pc, #344]	; (8001174 <DM_DisplayFormattedOutput+0x2d0>)
 800101a:	2112      	movs	r1, #18
 800101c:	f00e f82e 	bl	800f07c <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %s ", pTmpVppPreset->gain_decibels);
 8001020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f107 0014 	add.w	r0, r7, #20
 8001028:	4a53      	ldr	r2, [pc, #332]	; (8001178 <DM_DisplayFormattedOutput+0x2d4>)
 800102a:	210d      	movs	r1, #13
 800102c:	f00e f826 	bl	800f07c <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, BLACK, text_size, WHITE);
 8001030:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001034:	b299      	uxth	r1, r3
 8001036:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800103a:	b29c      	uxth	r4, r3
 800103c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001040:	b29b      	uxth	r3, r3
 8001042:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104a:	9201      	str	r2, [sp, #4]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2300      	movs	r3, #0
 8001050:	4622      	mov	r2, r4
 8001052:	f00c fcc7 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, text_size, WHITE);
 8001056:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800105a:	b299      	uxth	r1, r3
 800105c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001060:	b29c      	uxth	r4, r3
 8001062:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001066:	b29b      	uxth	r3, r3
 8001068:	f107 0014 	add.w	r0, r7, #20
 800106c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001070:	9201      	str	r2, [sp, #4]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2300      	movs	r3, #0
 8001076:	4622      	mov	r2, r4
 8001078:	f00c fcb4 	bl	800d9e4 <ILI9341_Draw_Text>



	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 800107c:	f003 fd46 	bl	8004b0c <BO_GetOutputBias>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d103      	bne.n	800108e <DM_DisplayFormattedOutput+0x1ea>
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800108c:	e00b      	b.n	80010a6 <DM_DisplayFormattedOutput+0x202>
 800108e:	f003 fd3d 	bl	8004b0c <BO_GetOutputBias>
 8001092:	ee07 0a90 	vmov	s15, r0
 8001096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800109e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	snprintf(out_dcvolts, sizeof(out_dcvolts), " %1.4f v ", dc_volts);
 80010a6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80010a8:	f7ff fa76 	bl	8000598 <__aeabi_f2d>
 80010ac:	4603      	mov	r3, r0
 80010ae:	460c      	mov	r4, r1
 80010b0:	f107 0008 	add.w	r0, r7, #8
 80010b4:	e9cd 3400 	strd	r3, r4, [sp]
 80010b8:	4a30      	ldr	r2, [pc, #192]	; (800117c <DM_DisplayFormattedOutput+0x2d8>)
 80010ba:	210c      	movs	r1, #12
 80010bc:	f00d ffde 	bl	800f07c <sniprintf>
	if(BO_GetBiasPolarity())
 80010c0:	f003 fcc4 	bl	8004a4c <BO_GetBiasPolarity>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d022      	beq.n	8001110 <DM_DisplayFormattedOutput+0x26c>
	{
		char symbol[3] = " +\0";
 80010ca:	4a2d      	ldr	r2, [pc, #180]	; (8001180 <DM_DisplayFormattedOutput+0x2dc>)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	8019      	strh	r1, [r3, #0]
 80010d4:	3302      	adds	r3, #2
 80010d6:	0c12      	lsrs	r2, r2, #16
 80010d8:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, text_size, WHITE);
 80010da:	f107 0208 	add.w	r2, r7, #8
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00d fffe 	bl	800f0e4 <strcat>
 80010e8:	4604      	mov	r4, r0
 80010ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010ee:	b299      	uxth	r1, r3
 80010f0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010f4:	b298      	uxth	r0, r3
 80010f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001100:	9201      	str	r2, [sp, #4]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2300      	movs	r3, #0
 8001106:	4602      	mov	r2, r0
 8001108:	4620      	mov	r0, r4
 800110a:	f00c fc6b 	bl	800d9e4 <ILI9341_Draw_Text>
	{
		char symbol[3] = " -\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, text_size, WHITE);
	}

}
 800110e:	e021      	b.n	8001154 <DM_DisplayFormattedOutput+0x2b0>
		char symbol[3] = " -\0";
 8001110:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <DM_DisplayFormattedOutput+0x2e0>)
 8001112:	463b      	mov	r3, r7
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	4611      	mov	r1, r2
 8001118:	8019      	strh	r1, [r3, #0]
 800111a:	3302      	adds	r3, #2
 800111c:	0c12      	lsrs	r2, r2, #16
 800111e:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, text_size, WHITE);
 8001120:	f107 0208 	add.w	r2, r7, #8
 8001124:	463b      	mov	r3, r7
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f00d ffdb 	bl	800f0e4 <strcat>
 800112e:	4604      	mov	r4, r0
 8001130:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001134:	b299      	uxth	r1, r3
 8001136:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800113a:	b298      	uxth	r0, r3
 800113c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001140:	b29b      	uxth	r3, r3
 8001142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001146:	9201      	str	r2, [sp, #4]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	4602      	mov	r2, r0
 800114e:	4620      	mov	r0, r4
 8001150:	f00c fc48 	bl	800d9e4 <ILI9341_Draw_Text>
}
 8001154:	bf00      	nop
 8001156:	3764      	adds	r7, #100	; 0x64
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	3a449ba6 	.word	0x3a449ba6
 8001160:	08011018 	.word	0x08011018
 8001164:	08011020 	.word	0x08011020
 8001168:	08011028 	.word	0x08011028
 800116c:	08011030 	.word	0x08011030
 8001170:	0801103c 	.word	0x0801103c
 8001174:	08011048 	.word	0x08011048
 8001178:	08011054 	.word	0x08011054
 800117c:	0801105c 	.word	0x0801105c
 8001180:	08011068 	.word	0x08011068
 8001184:	0801106c 	.word	0x0801106c

08001188 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af04      	add	r7, sp, #16
	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 800118e:	4821      	ldr	r0, [pc, #132]	; (8001214 <DM_RefreshScreen+0x8c>)
 8001190:	f00b f8e4 	bl	800c35c <HAL_TIM_Base_Stop_IT>


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 8001194:	f00c fc54 	bl	800da40 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <DM_RefreshScreen+0x90>)
 800119a:	8818      	ldrh	r0, [r3, #0]
 800119c:	2300      	movs	r3, #0
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2302      	movs	r3, #2
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2332      	movs	r3, #50	; 0x32
 80011ac:	2250      	movs	r2, #80	; 0x50
 80011ae:	21c8      	movs	r1, #200	; 0xc8
 80011b0:	f00c faae 	bl	800d710 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <DM_RefreshScreen+0x90>)
 80011b6:	8858      	ldrh	r0, [r3, #2]
 80011b8:	2300      	movs	r3, #0
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2302      	movs	r3, #2
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2332      	movs	r3, #50	; 0x32
 80011c8:	2250      	movs	r2, #80	; 0x50
 80011ca:	21c8      	movs	r1, #200	; 0xc8
 80011cc:	f00c faa0 	bl	800d710 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <DM_RefreshScreen+0x90>)
 80011d2:	8898      	ldrh	r0, [r3, #4]
 80011d4:	2300      	movs	r3, #0
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2302      	movs	r3, #2
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2332      	movs	r3, #50	; 0x32
 80011e4:	2250      	movs	r2, #80	; 0x50
 80011e6:	21c8      	movs	r1, #200	; 0xc8
 80011e8:	f00c fa92 	bl	800d710 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <DM_RefreshScreen+0x90>)
 80011ee:	88d8      	ldrh	r0, [r3, #6]
 80011f0:	2300      	movs	r3, #0
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2302      	movs	r3, #2
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2332      	movs	r3, #50	; 0x32
 8001200:	2250      	movs	r2, #80	; 0x50
 8001202:	21c8      	movs	r1, #200	; 0xc8
 8001204:	f00c fa84 	bl	800d710 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <DM_RefreshScreen+0x8c>)
 800120a:	f00b f871 	bl	800c2f0 <HAL_TIM_Base_Start_IT>
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20002798 	.word	0x20002798
 8001218:	20000000 	.word	0x20000000

0800121c <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <DM_SetErrorDebugMsg+0x1c>)
 8001228:	212d      	movs	r1, #45	; 0x2d
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <DM_SetErrorDebugMsg+0x20>)
 800122c:	f00d ff26 	bl	800f07c <sniprintf>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	080110ec 	.word	0x080110ec
 800123c:	20001ee8 	.word	0x20001ee8

08001240 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	3b01      	subs	r3, #1
 800124e:	2b03      	cmp	r3, #3
 8001250:	d816      	bhi.n	8001280 <FreqMenu_DrawMenu+0x40>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <FreqMenu_DrawMenu+0x18>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	0800126f 	.word	0x0800126f
 8001260:	08001275 	.word	0x08001275
 8001264:	0800127b 	.word	0x0800127b
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001268:	f000 f810 	bl	800128c <FreqMenu_DrawMainMenu>
			break;
 800126c:	e009      	b.n	8001282 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 800126e:	f000 f849 	bl	8001304 <FreqMenu_DrawPresetMenu>
			break;
 8001272:	e006      	b.n	8001282 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001274:	f001 faf4 	bl	8002860 <FreqMenu_DrawAdjustMenu>
			break;
 8001278:	e003      	b.n	8001282 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 800127a:	f001 fb07 	bl	800288c <FreqMenu_DrawSweepMenu>
			break;
 800127e:	e000      	b.n	8001282 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 8001280:	bf00      	nop

	}
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop

0800128c <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	10, 10, WHITE, 2, BLACK);
 8001292:	2300      	movs	r3, #0
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2302      	movs	r3, #2
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129e:	220a      	movs	r2, #10
 80012a0:	210a      	movs	r1, #10
 80012a2:	4814      	ldr	r0, [pc, #80]	; (80012f4 <FreqMenu_DrawMainMenu+0x68>)
 80012a4:	f00c fb9e 	bl	800d9e4 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80012a8:	f7ff fdfc 	bl	8000ea4 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80012ac:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	2302      	movs	r3, #2
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	22d2      	movs	r2, #210	; 0xd2
 80012ba:	2105      	movs	r1, #5
 80012bc:	480e      	ldr	r0, [pc, #56]	; (80012f8 <FreqMenu_DrawMainMenu+0x6c>)
 80012be:	f00c fb91 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 80012c2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2302      	movs	r3, #2
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	22d2      	movs	r2, #210	; 0xd2
 80012d0:	2157      	movs	r1, #87	; 0x57
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <FreqMenu_DrawMainMenu+0x70>)
 80012d4:	f00c fb86 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 80012d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	2302      	movs	r3, #2
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2300      	movs	r3, #0
 80012e4:	22d2      	movs	r2, #210	; 0xd2
 80012e6:	21ae      	movs	r1, #174	; 0xae
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <FreqMenu_DrawMainMenu+0x74>)
 80012ea:	f00c fb7b 	bl	800d9e4 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	080110f0 	.word	0x080110f0
 80012f8:	080110fc 	.word	0x080110fc
 80012fc:	08011104 	.word	0x08011104
 8001300:	0801110c 	.word	0x0801110c

08001304 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	10, 10, WHITE, 2, BLACK);
 800130a:	2300      	movs	r3, #0
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	2302      	movs	r3, #2
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001316:	220a      	movs	r2, #10
 8001318:	210a      	movs	r1, #10
 800131a:	4886      	ldr	r0, [pc, #536]	; (8001534 <FreqMenu_DrawPresetMenu+0x230>)
 800131c:	f00c fb62 	bl	800d9e4 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 50;
 8001320:	2332      	movs	r3, #50	; 0x32
 8001322:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 8001324:	2346      	movs	r3, #70	; 0x46
 8001326:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 8001328:	235a      	movs	r3, #90	; 0x5a
 800132a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 800132c:	236e      	movs	r3, #110	; 0x6e
 800132e:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 8001330:	2382      	movs	r3, #130	; 0x82
 8001332:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 8001334:	2396      	movs	r3, #150	; 0x96
 8001336:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 8001338:	23aa      	movs	r3, #170	; 0xaa
 800133a:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800133c:	f003 fd9c 	bl	8004e78 <FreqO_GetFPresetObject>
 8001340:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f001 825d 	beq.w	8002804 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001352:	4293      	cmp	r3, r2
 8001354:	f000 849a 	beq.w	8001c8c <FreqMenu_DrawPresetMenu+0x988>
 8001358:	f240 22ee 	movw	r2, #750	; 0x2ee
 800135c:	4293      	cmp	r3, r2
 800135e:	d817      	bhi.n	8001390 <FreqMenu_DrawPresetMenu+0x8c>
 8001360:	2b32      	cmp	r3, #50	; 0x32
 8001362:	f000 81b3 	beq.w	80016cc <FreqMenu_DrawPresetMenu+0x3c8>
 8001366:	2b32      	cmp	r3, #50	; 0x32
 8001368:	d806      	bhi.n	8001378 <FreqMenu_DrawPresetMenu+0x74>
 800136a:	2b01      	cmp	r3, #1
 800136c:	d038      	beq.n	80013e0 <FreqMenu_DrawPresetMenu+0xdc>
 800136e:	2b0a      	cmp	r3, #10
 8001370:	f000 8102 	beq.w	8001578 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 8001374:	f001 ba52 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001378:	2bfa      	cmp	r3, #250	; 0xfa
 800137a:	f000 8317 	beq.w	80019ac <FreqMenu_DrawPresetMenu+0x6a8>
 800137e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001382:	f000 83d9 	beq.w	8001b38 <FreqMenu_DrawPresetMenu+0x834>
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	f000 8266 	beq.w	8001858 <FreqMenu_DrawPresetMenu+0x554>
}
 800138c:	f001 ba46 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001390:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001394:	4293      	cmp	r3, r2
 8001396:	f000 8758 	beq.w	800224a <FreqMenu_DrawPresetMenu+0xf46>
 800139a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800139e:	4293      	cmp	r3, r2
 80013a0:	d80f      	bhi.n	80013c2 <FreqMenu_DrawPresetMenu+0xbe>
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	f000 85e0 	beq.w	8001f6c <FreqMenu_DrawPresetMenu+0xc68>
 80013ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80013b0:	4293      	cmp	r3, r2
 80013b2:	f000 86a1 	beq.w	80020f8 <FreqMenu_DrawPresetMenu+0xdf4>
 80013b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ba:	f000 852d 	beq.w	8001e18 <FreqMenu_DrawPresetMenu+0xb14>
}
 80013be:	f001 ba2d 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80013c2:	4a5d      	ldr	r2, [pc, #372]	; (8001538 <FreqMenu_DrawPresetMenu+0x234>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	f001 80ae 	beq.w	8002526 <FreqMenu_DrawPresetMenu+0x1222>
 80013ca:	4a5c      	ldr	r2, [pc, #368]	; (800153c <FreqMenu_DrawPresetMenu+0x238>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f001 816f 	beq.w	80026b0 <FreqMenu_DrawPresetMenu+0x13ac>
 80013d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013d6:	4293      	cmp	r3, r2
 80013d8:	f000 87fc 	beq.w	80023d4 <FreqMenu_DrawPresetMenu+0x10d0>
}
 80013dc:	f001 ba1e 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	2300      	movs	r3, #0
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	2302      	movs	r3, #2
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f0:	210a      	movs	r1, #10
 80013f2:	4853      	ldr	r0, [pc, #332]	; (8001540 <FreqMenu_DrawPresetMenu+0x23c>)
 80013f4:	f00c faf6 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2302      	movs	r3, #2
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	210a      	movs	r1, #10
 800140a:	484e      	ldr	r0, [pc, #312]	; (8001544 <FreqMenu_DrawPresetMenu+0x240>)
 800140c:	f00c faea 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001410:	7b7b      	ldrb	r3, [r7, #13]
 8001412:	b29a      	uxth	r2, r3
 8001414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2302      	movs	r3, #2
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	210a      	movs	r1, #10
 8001422:	4849      	ldr	r0, [pc, #292]	; (8001548 <FreqMenu_DrawPresetMenu+0x244>)
 8001424:	f00c fade 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001428:	7b3b      	ldrb	r3, [r7, #12]
 800142a:	b29a      	uxth	r2, r3
 800142c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	2302      	movs	r3, #2
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2300      	movs	r3, #0
 8001438:	210a      	movs	r1, #10
 800143a:	4844      	ldr	r0, [pc, #272]	; (800154c <FreqMenu_DrawPresetMenu+0x248>)
 800143c:	f00c fad2 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001440:	7afb      	ldrb	r3, [r7, #11]
 8001442:	b29a      	uxth	r2, r3
 8001444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2302      	movs	r3, #2
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	210a      	movs	r1, #10
 8001452:	483f      	ldr	r0, [pc, #252]	; (8001550 <FreqMenu_DrawPresetMenu+0x24c>)
 8001454:	f00c fac6 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001458:	7abb      	ldrb	r3, [r7, #10]
 800145a:	b29a      	uxth	r2, r3
 800145c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	2302      	movs	r3, #2
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	210a      	movs	r1, #10
 800146a:	483a      	ldr	r0, [pc, #232]	; (8001554 <FreqMenu_DrawPresetMenu+0x250>)
 800146c:	f00c faba 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001470:	7a7b      	ldrb	r3, [r7, #9]
 8001472:	b29a      	uxth	r2, r3
 8001474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2302      	movs	r3, #2
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	210a      	movs	r1, #10
 8001482:	4835      	ldr	r0, [pc, #212]	; (8001558 <FreqMenu_DrawPresetMenu+0x254>)
 8001484:	f00c faae 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	b29a      	uxth	r2, r3
 800148c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	2302      	movs	r3, #2
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2300      	movs	r3, #0
 8001498:	2178      	movs	r1, #120	; 0x78
 800149a:	4830      	ldr	r0, [pc, #192]	; (800155c <FreqMenu_DrawPresetMenu+0x258>)
 800149c:	f00c faa2 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	2302      	movs	r3, #2
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2300      	movs	r3, #0
 80014b0:	2178      	movs	r1, #120	; 0x78
 80014b2:	482b      	ldr	r0, [pc, #172]	; (8001560 <FreqMenu_DrawPresetMenu+0x25c>)
 80014b4:	f00c fa96 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	2302      	movs	r3, #2
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	2178      	movs	r1, #120	; 0x78
 80014ca:	4826      	ldr	r0, [pc, #152]	; (8001564 <FreqMenu_DrawPresetMenu+0x260>)
 80014cc:	f00c fa8a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80014d0:	7b3b      	ldrb	r3, [r7, #12]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	2302      	movs	r3, #2
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2300      	movs	r3, #0
 80014e0:	2178      	movs	r1, #120	; 0x78
 80014e2:	4821      	ldr	r0, [pc, #132]	; (8001568 <FreqMenu_DrawPresetMenu+0x264>)
 80014e4:	f00c fa7e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2302      	movs	r3, #2
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	2178      	movs	r1, #120	; 0x78
 80014fa:	481c      	ldr	r0, [pc, #112]	; (800156c <FreqMenu_DrawPresetMenu+0x268>)
 80014fc:	f00c fa72 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001500:	7abb      	ldrb	r3, [r7, #10]
 8001502:	b29a      	uxth	r2, r3
 8001504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	2302      	movs	r3, #2
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	2178      	movs	r1, #120	; 0x78
 8001512:	4817      	ldr	r0, [pc, #92]	; (8001570 <FreqMenu_DrawPresetMenu+0x26c>)
 8001514:	f00c fa66 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001518:	7a7b      	ldrb	r3, [r7, #9]
 800151a:	b29a      	uxth	r2, r3
 800151c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	2302      	movs	r3, #2
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2300      	movs	r3, #0
 8001528:	2178      	movs	r1, #120	; 0x78
 800152a:	4812      	ldr	r0, [pc, #72]	; (8001574 <FreqMenu_DrawPresetMenu+0x270>)
 800152c:	f00c fa5a 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8001530:	f001 b974 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
 8001534:	08011114 	.word	0x08011114
 8001538:	000124f8 	.word	0x000124f8
 800153c:	000186a0 	.word	0x000186a0
 8001540:	08011128 	.word	0x08011128
 8001544:	08011130 	.word	0x08011130
 8001548:	08011138 	.word	0x08011138
 800154c:	08011140 	.word	0x08011140
 8001550:	08011148 	.word	0x08011148
 8001554:	08011150 	.word	0x08011150
 8001558:	08011158 	.word	0x08011158
 800155c:	08011160 	.word	0x08011160
 8001560:	08011168 	.word	0x08011168
 8001564:	08011170 	.word	0x08011170
 8001568:	08011178 	.word	0x08011178
 800156c:	08011180 	.word	0x08011180
 8001570:	08011188 	.word	0x08011188
 8001574:	08011190 	.word	0x08011190
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	b29a      	uxth	r2, r3
 800157c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	2302      	movs	r3, #2
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	210a      	movs	r1, #10
 800158a:	48a5      	ldr	r0, [pc, #660]	; (8001820 <FreqMenu_DrawPresetMenu+0x51c>)
 800158c:	f00c fa2a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	b29a      	uxth	r2, r3
 8001594:	2300      	movs	r3, #0
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2302      	movs	r3, #2
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a0:	210a      	movs	r1, #10
 80015a2:	48a0      	ldr	r0, [pc, #640]	; (8001824 <FreqMenu_DrawPresetMenu+0x520>)
 80015a4:	f00c fa1e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80015a8:	7b7b      	ldrb	r3, [r7, #13]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	2302      	movs	r3, #2
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2300      	movs	r3, #0
 80015b8:	210a      	movs	r1, #10
 80015ba:	489b      	ldr	r0, [pc, #620]	; (8001828 <FreqMenu_DrawPresetMenu+0x524>)
 80015bc:	f00c fa12 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80015c0:	7b3b      	ldrb	r3, [r7, #12]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	2302      	movs	r3, #2
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	210a      	movs	r1, #10
 80015d2:	4896      	ldr	r0, [pc, #600]	; (800182c <FreqMenu_DrawPresetMenu+0x528>)
 80015d4:	f00c fa06 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80015d8:	7afb      	ldrb	r3, [r7, #11]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2302      	movs	r3, #2
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	210a      	movs	r1, #10
 80015ea:	4891      	ldr	r0, [pc, #580]	; (8001830 <FreqMenu_DrawPresetMenu+0x52c>)
 80015ec:	f00c f9fa 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80015f0:	7abb      	ldrb	r3, [r7, #10]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2302      	movs	r3, #2
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	210a      	movs	r1, #10
 8001602:	488c      	ldr	r0, [pc, #560]	; (8001834 <FreqMenu_DrawPresetMenu+0x530>)
 8001604:	f00c f9ee 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001608:	7a7b      	ldrb	r3, [r7, #9]
 800160a:	b29a      	uxth	r2, r3
 800160c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	2302      	movs	r3, #2
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	210a      	movs	r1, #10
 800161a:	4887      	ldr	r0, [pc, #540]	; (8001838 <FreqMenu_DrawPresetMenu+0x534>)
 800161c:	f00c f9e2 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	b29a      	uxth	r2, r3
 8001624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	2302      	movs	r3, #2
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2300      	movs	r3, #0
 8001630:	2178      	movs	r1, #120	; 0x78
 8001632:	4882      	ldr	r0, [pc, #520]	; (800183c <FreqMenu_DrawPresetMenu+0x538>)
 8001634:	f00c f9d6 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001638:	7bbb      	ldrb	r3, [r7, #14]
 800163a:	b29a      	uxth	r2, r3
 800163c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	2302      	movs	r3, #2
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	2178      	movs	r1, #120	; 0x78
 800164a:	487d      	ldr	r0, [pc, #500]	; (8001840 <FreqMenu_DrawPresetMenu+0x53c>)
 800164c:	f00c f9ca 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001650:	7b7b      	ldrb	r3, [r7, #13]
 8001652:	b29a      	uxth	r2, r3
 8001654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	2302      	movs	r3, #2
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2300      	movs	r3, #0
 8001660:	2178      	movs	r1, #120	; 0x78
 8001662:	4878      	ldr	r0, [pc, #480]	; (8001844 <FreqMenu_DrawPresetMenu+0x540>)
 8001664:	f00c f9be 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001668:	7b3b      	ldrb	r3, [r7, #12]
 800166a:	b29a      	uxth	r2, r3
 800166c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	2302      	movs	r3, #2
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	2178      	movs	r1, #120	; 0x78
 800167a:	4873      	ldr	r0, [pc, #460]	; (8001848 <FreqMenu_DrawPresetMenu+0x544>)
 800167c:	f00c f9b2 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	b29a      	uxth	r2, r3
 8001684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	2302      	movs	r3, #2
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2300      	movs	r3, #0
 8001690:	2178      	movs	r1, #120	; 0x78
 8001692:	486e      	ldr	r0, [pc, #440]	; (800184c <FreqMenu_DrawPresetMenu+0x548>)
 8001694:	f00c f9a6 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001698:	7abb      	ldrb	r3, [r7, #10]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	2302      	movs	r3, #2
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2300      	movs	r3, #0
 80016a8:	2178      	movs	r1, #120	; 0x78
 80016aa:	4869      	ldr	r0, [pc, #420]	; (8001850 <FreqMenu_DrawPresetMenu+0x54c>)
 80016ac:	f00c f99a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80016b0:	7a7b      	ldrb	r3, [r7, #9]
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	2302      	movs	r3, #2
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2300      	movs	r3, #0
 80016c0:	2178      	movs	r1, #120	; 0x78
 80016c2:	4864      	ldr	r0, [pc, #400]	; (8001854 <FreqMenu_DrawPresetMenu+0x550>)
 80016c4:	f00c f98e 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 80016c8:	f001 b8a8 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	2302      	movs	r3, #2
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	210a      	movs	r1, #10
 80016de:	4850      	ldr	r0, [pc, #320]	; (8001820 <FreqMenu_DrawPresetMenu+0x51c>)
 80016e0:	f00c f980 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	2302      	movs	r3, #2
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	210a      	movs	r1, #10
 80016f6:	484b      	ldr	r0, [pc, #300]	; (8001824 <FreqMenu_DrawPresetMenu+0x520>)
 80016f8:	f00c f974 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 80016fc:	7b7b      	ldrb	r3, [r7, #13]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	2300      	movs	r3, #0
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2302      	movs	r3, #2
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800170c:	210a      	movs	r1, #10
 800170e:	4846      	ldr	r0, [pc, #280]	; (8001828 <FreqMenu_DrawPresetMenu+0x524>)
 8001710:	f00c f968 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001714:	7b3b      	ldrb	r3, [r7, #12]
 8001716:	b29a      	uxth	r2, r3
 8001718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	2302      	movs	r3, #2
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	210a      	movs	r1, #10
 8001726:	4841      	ldr	r0, [pc, #260]	; (800182c <FreqMenu_DrawPresetMenu+0x528>)
 8001728:	f00c f95c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	b29a      	uxth	r2, r3
 8001730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	2302      	movs	r3, #2
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	210a      	movs	r1, #10
 800173e:	483c      	ldr	r0, [pc, #240]	; (8001830 <FreqMenu_DrawPresetMenu+0x52c>)
 8001740:	f00c f950 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001744:	7abb      	ldrb	r3, [r7, #10]
 8001746:	b29a      	uxth	r2, r3
 8001748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2302      	movs	r3, #2
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	210a      	movs	r1, #10
 8001756:	4837      	ldr	r0, [pc, #220]	; (8001834 <FreqMenu_DrawPresetMenu+0x530>)
 8001758:	f00c f944 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800175c:	7a7b      	ldrb	r3, [r7, #9]
 800175e:	b29a      	uxth	r2, r3
 8001760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	2302      	movs	r3, #2
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2300      	movs	r3, #0
 800176c:	210a      	movs	r1, #10
 800176e:	4832      	ldr	r0, [pc, #200]	; (8001838 <FreqMenu_DrawPresetMenu+0x534>)
 8001770:	f00c f938 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	b29a      	uxth	r2, r3
 8001778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	2302      	movs	r3, #2
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2300      	movs	r3, #0
 8001784:	2178      	movs	r1, #120	; 0x78
 8001786:	482d      	ldr	r0, [pc, #180]	; (800183c <FreqMenu_DrawPresetMenu+0x538>)
 8001788:	f00c f92c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	b29a      	uxth	r2, r3
 8001790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	2302      	movs	r3, #2
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2300      	movs	r3, #0
 800179c:	2178      	movs	r1, #120	; 0x78
 800179e:	4828      	ldr	r0, [pc, #160]	; (8001840 <FreqMenu_DrawPresetMenu+0x53c>)
 80017a0:	f00c f920 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80017a4:	7b7b      	ldrb	r3, [r7, #13]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2302      	movs	r3, #2
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2300      	movs	r3, #0
 80017b4:	2178      	movs	r1, #120	; 0x78
 80017b6:	4823      	ldr	r0, [pc, #140]	; (8001844 <FreqMenu_DrawPresetMenu+0x540>)
 80017b8:	f00c f914 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80017bc:	7b3b      	ldrb	r3, [r7, #12]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	2302      	movs	r3, #2
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2300      	movs	r3, #0
 80017cc:	2178      	movs	r1, #120	; 0x78
 80017ce:	481e      	ldr	r0, [pc, #120]	; (8001848 <FreqMenu_DrawPresetMenu+0x544>)
 80017d0:	f00c f908 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	2302      	movs	r3, #2
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	2178      	movs	r1, #120	; 0x78
 80017e6:	4819      	ldr	r0, [pc, #100]	; (800184c <FreqMenu_DrawPresetMenu+0x548>)
 80017e8:	f00c f8fc 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80017ec:	7abb      	ldrb	r3, [r7, #10]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	2302      	movs	r3, #2
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2300      	movs	r3, #0
 80017fc:	2178      	movs	r1, #120	; 0x78
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <FreqMenu_DrawPresetMenu+0x54c>)
 8001800:	f00c f8f0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001804:	7a7b      	ldrb	r3, [r7, #9]
 8001806:	b29a      	uxth	r2, r3
 8001808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	2302      	movs	r3, #2
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	2178      	movs	r1, #120	; 0x78
 8001816:	480f      	ldr	r0, [pc, #60]	; (8001854 <FreqMenu_DrawPresetMenu+0x550>)
 8001818:	f00c f8e4 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 800181c:	f000 bffe 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
 8001820:	08011128 	.word	0x08011128
 8001824:	08011130 	.word	0x08011130
 8001828:	08011138 	.word	0x08011138
 800182c:	08011140 	.word	0x08011140
 8001830:	08011148 	.word	0x08011148
 8001834:	08011150 	.word	0x08011150
 8001838:	08011158 	.word	0x08011158
 800183c:	08011160 	.word	0x08011160
 8001840:	08011168 	.word	0x08011168
 8001844:	08011170 	.word	0x08011170
 8001848:	08011178 	.word	0x08011178
 800184c:	08011180 	.word	0x08011180
 8001850:	08011188 	.word	0x08011188
 8001854:	08011190 	.word	0x08011190
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	b29a      	uxth	r2, r3
 800185c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	2302      	movs	r3, #2
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	210a      	movs	r1, #10
 800186a:	48a5      	ldr	r0, [pc, #660]	; (8001b00 <FreqMenu_DrawPresetMenu+0x7fc>)
 800186c:	f00c f8ba 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001870:	7bbb      	ldrb	r3, [r7, #14]
 8001872:	b29a      	uxth	r2, r3
 8001874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	2302      	movs	r3, #2
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	210a      	movs	r1, #10
 8001882:	48a0      	ldr	r0, [pc, #640]	; (8001b04 <FreqMenu_DrawPresetMenu+0x800>)
 8001884:	f00c f8ae 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001888:	7b7b      	ldrb	r3, [r7, #13]
 800188a:	b29a      	uxth	r2, r3
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	2302      	movs	r3, #2
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2300      	movs	r3, #0
 8001898:	210a      	movs	r1, #10
 800189a:	489b      	ldr	r0, [pc, #620]	; (8001b08 <FreqMenu_DrawPresetMenu+0x804>)
 800189c:	f00c f8a2 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 80018a0:	7b3b      	ldrb	r3, [r7, #12]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	2300      	movs	r3, #0
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	2302      	movs	r3, #2
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b0:	210a      	movs	r1, #10
 80018b2:	4896      	ldr	r0, [pc, #600]	; (8001b0c <FreqMenu_DrawPresetMenu+0x808>)
 80018b4:	f00c f896 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2302      	movs	r3, #2
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	210a      	movs	r1, #10
 80018ca:	4891      	ldr	r0, [pc, #580]	; (8001b10 <FreqMenu_DrawPresetMenu+0x80c>)
 80018cc:	f00c f88a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80018d0:	7abb      	ldrb	r3, [r7, #10]
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	2302      	movs	r3, #2
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	210a      	movs	r1, #10
 80018e2:	488c      	ldr	r0, [pc, #560]	; (8001b14 <FreqMenu_DrawPresetMenu+0x810>)
 80018e4:	f00c f87e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80018e8:	7a7b      	ldrb	r3, [r7, #9]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2302      	movs	r3, #2
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	210a      	movs	r1, #10
 80018fa:	4887      	ldr	r0, [pc, #540]	; (8001b18 <FreqMenu_DrawPresetMenu+0x814>)
 80018fc:	f00c f872 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	b29a      	uxth	r2, r3
 8001904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	2302      	movs	r3, #2
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	2178      	movs	r1, #120	; 0x78
 8001912:	4882      	ldr	r0, [pc, #520]	; (8001b1c <FreqMenu_DrawPresetMenu+0x818>)
 8001914:	f00c f866 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	b29a      	uxth	r2, r3
 800191c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	2302      	movs	r3, #2
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2300      	movs	r3, #0
 8001928:	2178      	movs	r1, #120	; 0x78
 800192a:	487d      	ldr	r0, [pc, #500]	; (8001b20 <FreqMenu_DrawPresetMenu+0x81c>)
 800192c:	f00c f85a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001930:	7b7b      	ldrb	r3, [r7, #13]
 8001932:	b29a      	uxth	r2, r3
 8001934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	2302      	movs	r3, #2
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	2178      	movs	r1, #120	; 0x78
 8001942:	4878      	ldr	r0, [pc, #480]	; (8001b24 <FreqMenu_DrawPresetMenu+0x820>)
 8001944:	f00c f84e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001948:	7b3b      	ldrb	r3, [r7, #12]
 800194a:	b29a      	uxth	r2, r3
 800194c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	2302      	movs	r3, #2
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	2178      	movs	r1, #120	; 0x78
 800195a:	4873      	ldr	r0, [pc, #460]	; (8001b28 <FreqMenu_DrawPresetMenu+0x824>)
 800195c:	f00c f842 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	b29a      	uxth	r2, r3
 8001964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2302      	movs	r3, #2
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	2178      	movs	r1, #120	; 0x78
 8001972:	486e      	ldr	r0, [pc, #440]	; (8001b2c <FreqMenu_DrawPresetMenu+0x828>)
 8001974:	f00c f836 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001978:	7abb      	ldrb	r3, [r7, #10]
 800197a:	b29a      	uxth	r2, r3
 800197c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	2302      	movs	r3, #2
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	2178      	movs	r1, #120	; 0x78
 800198a:	4869      	ldr	r0, [pc, #420]	; (8001b30 <FreqMenu_DrawPresetMenu+0x82c>)
 800198c:	f00c f82a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001990:	7a7b      	ldrb	r3, [r7, #9]
 8001992:	b29a      	uxth	r2, r3
 8001994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	2302      	movs	r3, #2
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2300      	movs	r3, #0
 80019a0:	2178      	movs	r1, #120	; 0x78
 80019a2:	4864      	ldr	r0, [pc, #400]	; (8001b34 <FreqMenu_DrawPresetMenu+0x830>)
 80019a4:	f00c f81e 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 80019a8:	f000 bf38 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	210a      	movs	r1, #10
 80019be:	4850      	ldr	r0, [pc, #320]	; (8001b00 <FreqMenu_DrawPresetMenu+0x7fc>)
 80019c0:	f00c f810 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	210a      	movs	r1, #10
 80019d6:	484b      	ldr	r0, [pc, #300]	; (8001b04 <FreqMenu_DrawPresetMenu+0x800>)
 80019d8:	f00c f804 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80019dc:	7b7b      	ldrb	r3, [r7, #13]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	2302      	movs	r3, #2
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	210a      	movs	r1, #10
 80019ee:	4846      	ldr	r0, [pc, #280]	; (8001b08 <FreqMenu_DrawPresetMenu+0x804>)
 80019f0:	f00b fff8 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80019f4:	7b3b      	ldrb	r3, [r7, #12]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	2302      	movs	r3, #2
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	210a      	movs	r1, #10
 8001a06:	4841      	ldr	r0, [pc, #260]	; (8001b0c <FreqMenu_DrawPresetMenu+0x808>)
 8001a08:	f00b ffec 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	2302      	movs	r3, #2
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1c:	210a      	movs	r1, #10
 8001a1e:	483c      	ldr	r0, [pc, #240]	; (8001b10 <FreqMenu_DrawPresetMenu+0x80c>)
 8001a20:	f00b ffe0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001a24:	7abb      	ldrb	r3, [r7, #10]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2302      	movs	r3, #2
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	210a      	movs	r1, #10
 8001a36:	4837      	ldr	r0, [pc, #220]	; (8001b14 <FreqMenu_DrawPresetMenu+0x810>)
 8001a38:	f00b ffd4 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001a3c:	7a7b      	ldrb	r3, [r7, #9]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2302      	movs	r3, #2
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	210a      	movs	r1, #10
 8001a4e:	4832      	ldr	r0, [pc, #200]	; (8001b18 <FreqMenu_DrawPresetMenu+0x814>)
 8001a50:	f00b ffc8 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	2178      	movs	r1, #120	; 0x78
 8001a66:	482d      	ldr	r0, [pc, #180]	; (8001b1c <FreqMenu_DrawPresetMenu+0x818>)
 8001a68:	f00b ffbc 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001a6c:	7bbb      	ldrb	r3, [r7, #14]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	2302      	movs	r3, #2
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2178      	movs	r1, #120	; 0x78
 8001a7e:	4828      	ldr	r0, [pc, #160]	; (8001b20 <FreqMenu_DrawPresetMenu+0x81c>)
 8001a80:	f00b ffb0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	2178      	movs	r1, #120	; 0x78
 8001a96:	4823      	ldr	r0, [pc, #140]	; (8001b24 <FreqMenu_DrawPresetMenu+0x820>)
 8001a98:	f00b ffa4 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001a9c:	7b3b      	ldrb	r3, [r7, #12]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2178      	movs	r1, #120	; 0x78
 8001aae:	481e      	ldr	r0, [pc, #120]	; (8001b28 <FreqMenu_DrawPresetMenu+0x824>)
 8001ab0:	f00b ff98 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	2302      	movs	r3, #2
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2178      	movs	r1, #120	; 0x78
 8001ac6:	4819      	ldr	r0, [pc, #100]	; (8001b2c <FreqMenu_DrawPresetMenu+0x828>)
 8001ac8:	f00b ff8c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001acc:	7abb      	ldrb	r3, [r7, #10]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2300      	movs	r3, #0
 8001adc:	2178      	movs	r1, #120	; 0x78
 8001ade:	4814      	ldr	r0, [pc, #80]	; (8001b30 <FreqMenu_DrawPresetMenu+0x82c>)
 8001ae0:	f00b ff80 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001ae4:	7a7b      	ldrb	r3, [r7, #9]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	2302      	movs	r3, #2
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	2178      	movs	r1, #120	; 0x78
 8001af6:	480f      	ldr	r0, [pc, #60]	; (8001b34 <FreqMenu_DrawPresetMenu+0x830>)
 8001af8:	f00b ff74 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8001afc:	f000 be8e 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
 8001b00:	08011128 	.word	0x08011128
 8001b04:	08011130 	.word	0x08011130
 8001b08:	08011138 	.word	0x08011138
 8001b0c:	08011140 	.word	0x08011140
 8001b10:	08011148 	.word	0x08011148
 8001b14:	08011150 	.word	0x08011150
 8001b18:	08011158 	.word	0x08011158
 8001b1c:	08011160 	.word	0x08011160
 8001b20:	08011168 	.word	0x08011168
 8001b24:	08011170 	.word	0x08011170
 8001b28:	08011178 	.word	0x08011178
 8001b2c:	08011180 	.word	0x08011180
 8001b30:	08011188 	.word	0x08011188
 8001b34:	08011190 	.word	0x08011190
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2302      	movs	r3, #2
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	210a      	movs	r1, #10
 8001b4a:	48a5      	ldr	r0, [pc, #660]	; (8001de0 <FreqMenu_DrawPresetMenu+0xadc>)
 8001b4c:	f00b ff4a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	210a      	movs	r1, #10
 8001b62:	48a0      	ldr	r0, [pc, #640]	; (8001de4 <FreqMenu_DrawPresetMenu+0xae0>)
 8001b64:	f00b ff3e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001b68:	7b7b      	ldrb	r3, [r7, #13]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2302      	movs	r3, #2
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	210a      	movs	r1, #10
 8001b7a:	489b      	ldr	r0, [pc, #620]	; (8001de8 <FreqMenu_DrawPresetMenu+0xae4>)
 8001b7c:	f00b ff32 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001b80:	7b3b      	ldrb	r3, [r7, #12]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	210a      	movs	r1, #10
 8001b92:	4896      	ldr	r0, [pc, #600]	; (8001dec <FreqMenu_DrawPresetMenu+0xae8>)
 8001b94:	f00b ff26 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	210a      	movs	r1, #10
 8001baa:	4891      	ldr	r0, [pc, #580]	; (8001df0 <FreqMenu_DrawPresetMenu+0xaec>)
 8001bac:	f00b ff1a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001bb0:	7abb      	ldrb	r3, [r7, #10]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bc0:	210a      	movs	r1, #10
 8001bc2:	488c      	ldr	r0, [pc, #560]	; (8001df4 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001bc4:	f00b ff0e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001bc8:	7a7b      	ldrb	r3, [r7, #9]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	210a      	movs	r1, #10
 8001bda:	4887      	ldr	r0, [pc, #540]	; (8001df8 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001bdc:	f00b ff02 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	2302      	movs	r3, #2
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2178      	movs	r1, #120	; 0x78
 8001bf2:	4882      	ldr	r0, [pc, #520]	; (8001dfc <FreqMenu_DrawPresetMenu+0xaf8>)
 8001bf4:	f00b fef6 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2302      	movs	r3, #2
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	2178      	movs	r1, #120	; 0x78
 8001c0a:	487d      	ldr	r0, [pc, #500]	; (8001e00 <FreqMenu_DrawPresetMenu+0xafc>)
 8001c0c:	f00b feea 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001c10:	7b7b      	ldrb	r3, [r7, #13]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2178      	movs	r1, #120	; 0x78
 8001c22:	4878      	ldr	r0, [pc, #480]	; (8001e04 <FreqMenu_DrawPresetMenu+0xb00>)
 8001c24:	f00b fede 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c28:	7b3b      	ldrb	r3, [r7, #12]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2302      	movs	r3, #2
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2300      	movs	r3, #0
 8001c38:	2178      	movs	r1, #120	; 0x78
 8001c3a:	4873      	ldr	r0, [pc, #460]	; (8001e08 <FreqMenu_DrawPresetMenu+0xb04>)
 8001c3c:	f00b fed2 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001c40:	7afb      	ldrb	r3, [r7, #11]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2178      	movs	r1, #120	; 0x78
 8001c52:	486e      	ldr	r0, [pc, #440]	; (8001e0c <FreqMenu_DrawPresetMenu+0xb08>)
 8001c54:	f00b fec6 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001c58:	7abb      	ldrb	r3, [r7, #10]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	2302      	movs	r3, #2
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	2178      	movs	r1, #120	; 0x78
 8001c6a:	4869      	ldr	r0, [pc, #420]	; (8001e10 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001c6c:	f00b feba 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001c70:	7a7b      	ldrb	r3, [r7, #9]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2178      	movs	r1, #120	; 0x78
 8001c82:	4864      	ldr	r0, [pc, #400]	; (8001e14 <FreqMenu_DrawPresetMenu+0xb10>)
 8001c84:	f00b feae 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8001c88:	f000 bdc8 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	210a      	movs	r1, #10
 8001c9e:	4850      	ldr	r0, [pc, #320]	; (8001de0 <FreqMenu_DrawPresetMenu+0xadc>)
 8001ca0:	f00b fea0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001ca4:	7bbb      	ldrb	r3, [r7, #14]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	2302      	movs	r3, #2
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	210a      	movs	r1, #10
 8001cb6:	484b      	ldr	r0, [pc, #300]	; (8001de4 <FreqMenu_DrawPresetMenu+0xae0>)
 8001cb8:	f00b fe94 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001cbc:	7b7b      	ldrb	r3, [r7, #13]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	210a      	movs	r1, #10
 8001cce:	4846      	ldr	r0, [pc, #280]	; (8001de8 <FreqMenu_DrawPresetMenu+0xae4>)
 8001cd0:	f00b fe88 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001cd4:	7b3b      	ldrb	r3, [r7, #12]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	210a      	movs	r1, #10
 8001ce6:	4841      	ldr	r0, [pc, #260]	; (8001dec <FreqMenu_DrawPresetMenu+0xae8>)
 8001ce8:	f00b fe7c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	210a      	movs	r1, #10
 8001cfe:	483c      	ldr	r0, [pc, #240]	; (8001df0 <FreqMenu_DrawPresetMenu+0xaec>)
 8001d00:	f00b fe70 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001d04:	7abb      	ldrb	r3, [r7, #10]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	210a      	movs	r1, #10
 8001d16:	4837      	ldr	r0, [pc, #220]	; (8001df4 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001d18:	f00b fe64 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8001d1c:	7a7b      	ldrb	r3, [r7, #9]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2302      	movs	r3, #2
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2c:	210a      	movs	r1, #10
 8001d2e:	4832      	ldr	r0, [pc, #200]	; (8001df8 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001d30:	f00b fe58 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	2302      	movs	r3, #2
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2300      	movs	r3, #0
 8001d44:	2178      	movs	r1, #120	; 0x78
 8001d46:	482d      	ldr	r0, [pc, #180]	; (8001dfc <FreqMenu_DrawPresetMenu+0xaf8>)
 8001d48:	f00b fe4c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	2302      	movs	r3, #2
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2178      	movs	r1, #120	; 0x78
 8001d5e:	4828      	ldr	r0, [pc, #160]	; (8001e00 <FreqMenu_DrawPresetMenu+0xafc>)
 8001d60:	f00b fe40 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2302      	movs	r3, #2
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2300      	movs	r3, #0
 8001d74:	2178      	movs	r1, #120	; 0x78
 8001d76:	4823      	ldr	r0, [pc, #140]	; (8001e04 <FreqMenu_DrawPresetMenu+0xb00>)
 8001d78:	f00b fe34 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001d7c:	7b3b      	ldrb	r3, [r7, #12]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2302      	movs	r3, #2
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2178      	movs	r1, #120	; 0x78
 8001d8e:	481e      	ldr	r0, [pc, #120]	; (8001e08 <FreqMenu_DrawPresetMenu+0xb04>)
 8001d90:	f00b fe28 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	2302      	movs	r3, #2
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2300      	movs	r3, #0
 8001da4:	2178      	movs	r1, #120	; 0x78
 8001da6:	4819      	ldr	r0, [pc, #100]	; (8001e0c <FreqMenu_DrawPresetMenu+0xb08>)
 8001da8:	f00b fe1c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001dac:	7abb      	ldrb	r3, [r7, #10]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	2302      	movs	r3, #2
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2178      	movs	r1, #120	; 0x78
 8001dbe:	4814      	ldr	r0, [pc, #80]	; (8001e10 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001dc0:	f00b fe10 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001dc4:	7a7b      	ldrb	r3, [r7, #9]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	2302      	movs	r3, #2
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2178      	movs	r1, #120	; 0x78
 8001dd6:	480f      	ldr	r0, [pc, #60]	; (8001e14 <FreqMenu_DrawPresetMenu+0xb10>)
 8001dd8:	f00b fe04 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8001ddc:	f000 bd1e 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
 8001de0:	08011128 	.word	0x08011128
 8001de4:	08011130 	.word	0x08011130
 8001de8:	08011138 	.word	0x08011138
 8001dec:	08011140 	.word	0x08011140
 8001df0:	08011148 	.word	0x08011148
 8001df4:	08011150 	.word	0x08011150
 8001df8:	08011158 	.word	0x08011158
 8001dfc:	08011160 	.word	0x08011160
 8001e00:	08011168 	.word	0x08011168
 8001e04:	08011170 	.word	0x08011170
 8001e08:	08011178 	.word	0x08011178
 8001e0c:	08011180 	.word	0x08011180
 8001e10:	08011188 	.word	0x08011188
 8001e14:	08011190 	.word	0x08011190
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2302      	movs	r3, #2
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	210a      	movs	r1, #10
 8001e2a:	48a5      	ldr	r0, [pc, #660]	; (80020c0 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001e2c:	f00b fdda 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e30:	7bbb      	ldrb	r3, [r7, #14]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	210a      	movs	r1, #10
 8001e42:	48a0      	ldr	r0, [pc, #640]	; (80020c4 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001e44:	f00b fdce 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001e48:	7b7b      	ldrb	r3, [r7, #13]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2302      	movs	r3, #2
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	210a      	movs	r1, #10
 8001e5a:	489b      	ldr	r0, [pc, #620]	; (80020c8 <FreqMenu_DrawPresetMenu+0xdc4>)
 8001e5c:	f00b fdc2 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001e60:	7b3b      	ldrb	r3, [r7, #12]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	210a      	movs	r1, #10
 8001e72:	4896      	ldr	r0, [pc, #600]	; (80020cc <FreqMenu_DrawPresetMenu+0xdc8>)
 8001e74:	f00b fdb6 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	2302      	movs	r3, #2
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2300      	movs	r3, #0
 8001e88:	210a      	movs	r1, #10
 8001e8a:	4891      	ldr	r0, [pc, #580]	; (80020d0 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001e8c:	f00b fdaa 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001e90:	7abb      	ldrb	r3, [r7, #10]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	210a      	movs	r1, #10
 8001ea2:	488c      	ldr	r0, [pc, #560]	; (80020d4 <FreqMenu_DrawPresetMenu+0xdd0>)
 8001ea4:	f00b fd9e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001ea8:	7a7b      	ldrb	r3, [r7, #9]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	210a      	movs	r1, #10
 8001eba:	4887      	ldr	r0, [pc, #540]	; (80020d8 <FreqMenu_DrawPresetMenu+0xdd4>)
 8001ebc:	f00b fd92 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	2302      	movs	r3, #2
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed0:	2178      	movs	r1, #120	; 0x78
 8001ed2:	4882      	ldr	r0, [pc, #520]	; (80020dc <FreqMenu_DrawPresetMenu+0xdd8>)
 8001ed4:	f00b fd86 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2178      	movs	r1, #120	; 0x78
 8001eea:	487d      	ldr	r0, [pc, #500]	; (80020e0 <FreqMenu_DrawPresetMenu+0xddc>)
 8001eec:	f00b fd7a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001ef0:	7b7b      	ldrb	r3, [r7, #13]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	2302      	movs	r3, #2
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2300      	movs	r3, #0
 8001f00:	2178      	movs	r1, #120	; 0x78
 8001f02:	4878      	ldr	r0, [pc, #480]	; (80020e4 <FreqMenu_DrawPresetMenu+0xde0>)
 8001f04:	f00b fd6e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001f08:	7b3b      	ldrb	r3, [r7, #12]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	2302      	movs	r3, #2
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	2178      	movs	r1, #120	; 0x78
 8001f1a:	4873      	ldr	r0, [pc, #460]	; (80020e8 <FreqMenu_DrawPresetMenu+0xde4>)
 8001f1c:	f00b fd62 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2178      	movs	r1, #120	; 0x78
 8001f32:	486e      	ldr	r0, [pc, #440]	; (80020ec <FreqMenu_DrawPresetMenu+0xde8>)
 8001f34:	f00b fd56 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f38:	7abb      	ldrb	r3, [r7, #10]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	2302      	movs	r3, #2
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2300      	movs	r3, #0
 8001f48:	2178      	movs	r1, #120	; 0x78
 8001f4a:	4869      	ldr	r0, [pc, #420]	; (80020f0 <FreqMenu_DrawPresetMenu+0xdec>)
 8001f4c:	f00b fd4a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001f50:	7a7b      	ldrb	r3, [r7, #9]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2178      	movs	r1, #120	; 0x78
 8001f62:	4864      	ldr	r0, [pc, #400]	; (80020f4 <FreqMenu_DrawPresetMenu+0xdf0>)
 8001f64:	f00b fd3e 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8001f68:	f000 bc58 	b.w	800281c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	2302      	movs	r3, #2
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	210a      	movs	r1, #10
 8001f7e:	4850      	ldr	r0, [pc, #320]	; (80020c0 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001f80:	f00b fd30 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	210a      	movs	r1, #10
 8001f96:	484b      	ldr	r0, [pc, #300]	; (80020c4 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001f98:	f00b fd24 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001f9c:	7b7b      	ldrb	r3, [r7, #13]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2300      	movs	r3, #0
 8001fac:	210a      	movs	r1, #10
 8001fae:	4846      	ldr	r0, [pc, #280]	; (80020c8 <FreqMenu_DrawPresetMenu+0xdc4>)
 8001fb0:	f00b fd18 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001fb4:	7b3b      	ldrb	r3, [r7, #12]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	210a      	movs	r1, #10
 8001fc6:	4841      	ldr	r0, [pc, #260]	; (80020cc <FreqMenu_DrawPresetMenu+0xdc8>)
 8001fc8:	f00b fd0c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	210a      	movs	r1, #10
 8001fde:	483c      	ldr	r0, [pc, #240]	; (80020d0 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001fe0:	f00b fd00 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001fe4:	7abb      	ldrb	r3, [r7, #10]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	210a      	movs	r1, #10
 8001ff6:	4837      	ldr	r0, [pc, #220]	; (80020d4 <FreqMenu_DrawPresetMenu+0xdd0>)
 8001ff8:	f00b fcf4 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001ffc:	7a7b      	ldrb	r3, [r7, #9]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2302      	movs	r3, #2
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2300      	movs	r3, #0
 800200c:	210a      	movs	r1, #10
 800200e:	4832      	ldr	r0, [pc, #200]	; (80020d8 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002010:	f00b fce8 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	b29a      	uxth	r2, r3
 8002018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	2302      	movs	r3, #2
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	2178      	movs	r1, #120	; 0x78
 8002026:	482d      	ldr	r0, [pc, #180]	; (80020dc <FreqMenu_DrawPresetMenu+0xdd8>)
 8002028:	f00b fcdc 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	b29a      	uxth	r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2302      	movs	r3, #2
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800203c:	2178      	movs	r1, #120	; 0x78
 800203e:	4828      	ldr	r0, [pc, #160]	; (80020e0 <FreqMenu_DrawPresetMenu+0xddc>)
 8002040:	f00b fcd0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002044:	7b7b      	ldrb	r3, [r7, #13]
 8002046:	b29a      	uxth	r2, r3
 8002048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	2302      	movs	r3, #2
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2300      	movs	r3, #0
 8002054:	2178      	movs	r1, #120	; 0x78
 8002056:	4823      	ldr	r0, [pc, #140]	; (80020e4 <FreqMenu_DrawPresetMenu+0xde0>)
 8002058:	f00b fcc4 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800205c:	7b3b      	ldrb	r3, [r7, #12]
 800205e:	b29a      	uxth	r2, r3
 8002060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2302      	movs	r3, #2
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	2178      	movs	r1, #120	; 0x78
 800206e:	481e      	ldr	r0, [pc, #120]	; (80020e8 <FreqMenu_DrawPresetMenu+0xde4>)
 8002070:	f00b fcb8 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	b29a      	uxth	r2, r3
 8002078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	2302      	movs	r3, #2
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	2178      	movs	r1, #120	; 0x78
 8002086:	4819      	ldr	r0, [pc, #100]	; (80020ec <FreqMenu_DrawPresetMenu+0xde8>)
 8002088:	f00b fcac 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800208c:	7abb      	ldrb	r3, [r7, #10]
 800208e:	b29a      	uxth	r2, r3
 8002090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	2302      	movs	r3, #2
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2300      	movs	r3, #0
 800209c:	2178      	movs	r1, #120	; 0x78
 800209e:	4814      	ldr	r0, [pc, #80]	; (80020f0 <FreqMenu_DrawPresetMenu+0xdec>)
 80020a0:	f00b fca0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80020a4:	7a7b      	ldrb	r3, [r7, #9]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	2302      	movs	r3, #2
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2300      	movs	r3, #0
 80020b4:	2178      	movs	r1, #120	; 0x78
 80020b6:	480f      	ldr	r0, [pc, #60]	; (80020f4 <FreqMenu_DrawPresetMenu+0xdf0>)
 80020b8:	f00b fc94 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 80020bc:	e3ae      	b.n	800281c <FreqMenu_DrawPresetMenu+0x1518>
 80020be:	bf00      	nop
 80020c0:	08011128 	.word	0x08011128
 80020c4:	08011130 	.word	0x08011130
 80020c8:	08011138 	.word	0x08011138
 80020cc:	08011140 	.word	0x08011140
 80020d0:	08011148 	.word	0x08011148
 80020d4:	08011150 	.word	0x08011150
 80020d8:	08011158 	.word	0x08011158
 80020dc:	08011160 	.word	0x08011160
 80020e0:	08011168 	.word	0x08011168
 80020e4:	08011170 	.word	0x08011170
 80020e8:	08011178 	.word	0x08011178
 80020ec:	08011180 	.word	0x08011180
 80020f0:	08011188 	.word	0x08011188
 80020f4:	08011190 	.word	0x08011190
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2302      	movs	r3, #2
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	210a      	movs	r1, #10
 800210a:	48a4      	ldr	r0, [pc, #656]	; (800239c <FreqMenu_DrawPresetMenu+0x1098>)
 800210c:	f00b fc6a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	b29a      	uxth	r2, r3
 8002114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	2302      	movs	r3, #2
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	210a      	movs	r1, #10
 8002122:	489f      	ldr	r0, [pc, #636]	; (80023a0 <FreqMenu_DrawPresetMenu+0x109c>)
 8002124:	f00b fc5e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002128:	7b7b      	ldrb	r3, [r7, #13]
 800212a:	b29a      	uxth	r2, r3
 800212c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	2302      	movs	r3, #2
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2300      	movs	r3, #0
 8002138:	210a      	movs	r1, #10
 800213a:	489a      	ldr	r0, [pc, #616]	; (80023a4 <FreqMenu_DrawPresetMenu+0x10a0>)
 800213c:	f00b fc52 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002140:	7b3b      	ldrb	r3, [r7, #12]
 8002142:	b29a      	uxth	r2, r3
 8002144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2302      	movs	r3, #2
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	210a      	movs	r1, #10
 8002152:	4895      	ldr	r0, [pc, #596]	; (80023a8 <FreqMenu_DrawPresetMenu+0x10a4>)
 8002154:	f00b fc46 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002158:	7afb      	ldrb	r3, [r7, #11]
 800215a:	b29a      	uxth	r2, r3
 800215c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	2302      	movs	r3, #2
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2300      	movs	r3, #0
 8002168:	210a      	movs	r1, #10
 800216a:	4890      	ldr	r0, [pc, #576]	; (80023ac <FreqMenu_DrawPresetMenu+0x10a8>)
 800216c:	f00b fc3a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002170:	7abb      	ldrb	r3, [r7, #10]
 8002172:	b29a      	uxth	r2, r3
 8002174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	2302      	movs	r3, #2
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2300      	movs	r3, #0
 8002180:	210a      	movs	r1, #10
 8002182:	488b      	ldr	r0, [pc, #556]	; (80023b0 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002184:	f00b fc2e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002188:	7a7b      	ldrb	r3, [r7, #9]
 800218a:	b29a      	uxth	r2, r3
 800218c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	2302      	movs	r3, #2
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2300      	movs	r3, #0
 8002198:	210a      	movs	r1, #10
 800219a:	4886      	ldr	r0, [pc, #536]	; (80023b4 <FreqMenu_DrawPresetMenu+0x10b0>)
 800219c:	f00b fc22 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	2302      	movs	r3, #2
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2300      	movs	r3, #0
 80021b0:	2178      	movs	r1, #120	; 0x78
 80021b2:	4881      	ldr	r0, [pc, #516]	; (80023b8 <FreqMenu_DrawPresetMenu+0x10b4>)
 80021b4:	f00b fc16 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	2302      	movs	r3, #2
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2300      	movs	r3, #0
 80021c8:	2178      	movs	r1, #120	; 0x78
 80021ca:	487c      	ldr	r0, [pc, #496]	; (80023bc <FreqMenu_DrawPresetMenu+0x10b8>)
 80021cc:	f00b fc0a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 80021d0:	7b7b      	ldrb	r3, [r7, #13]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	2300      	movs	r3, #0
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	2302      	movs	r3, #2
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e0:	2178      	movs	r1, #120	; 0x78
 80021e2:	4877      	ldr	r0, [pc, #476]	; (80023c0 <FreqMenu_DrawPresetMenu+0x10bc>)
 80021e4:	f00b fbfe 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80021e8:	7b3b      	ldrb	r3, [r7, #12]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2302      	movs	r3, #2
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2300      	movs	r3, #0
 80021f8:	2178      	movs	r1, #120	; 0x78
 80021fa:	4872      	ldr	r0, [pc, #456]	; (80023c4 <FreqMenu_DrawPresetMenu+0x10c0>)
 80021fc:	f00b fbf2 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	b29a      	uxth	r2, r3
 8002204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2302      	movs	r3, #2
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2300      	movs	r3, #0
 8002210:	2178      	movs	r1, #120	; 0x78
 8002212:	486d      	ldr	r0, [pc, #436]	; (80023c8 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002214:	f00b fbe6 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002218:	7abb      	ldrb	r3, [r7, #10]
 800221a:	b29a      	uxth	r2, r3
 800221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	2302      	movs	r3, #2
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2300      	movs	r3, #0
 8002228:	2178      	movs	r1, #120	; 0x78
 800222a:	4868      	ldr	r0, [pc, #416]	; (80023cc <FreqMenu_DrawPresetMenu+0x10c8>)
 800222c:	f00b fbda 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002230:	7a7b      	ldrb	r3, [r7, #9]
 8002232:	b29a      	uxth	r2, r3
 8002234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2302      	movs	r3, #2
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	2178      	movs	r1, #120	; 0x78
 8002242:	4863      	ldr	r0, [pc, #396]	; (80023d0 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002244:	f00b fbce 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8002248:	e2e8      	b.n	800281c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	b29a      	uxth	r2, r3
 800224e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2300      	movs	r3, #0
 800225a:	210a      	movs	r1, #10
 800225c:	484f      	ldr	r0, [pc, #316]	; (800239c <FreqMenu_DrawPresetMenu+0x1098>)
 800225e:	f00b fbc1 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002262:	7bbb      	ldrb	r3, [r7, #14]
 8002264:	b29a      	uxth	r2, r3
 8002266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	210a      	movs	r1, #10
 8002274:	484a      	ldr	r0, [pc, #296]	; (80023a0 <FreqMenu_DrawPresetMenu+0x109c>)
 8002276:	f00b fbb5 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800227a:	7b7b      	ldrb	r3, [r7, #13]
 800227c:	b29a      	uxth	r2, r3
 800227e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2302      	movs	r3, #2
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2300      	movs	r3, #0
 800228a:	210a      	movs	r1, #10
 800228c:	4845      	ldr	r0, [pc, #276]	; (80023a4 <FreqMenu_DrawPresetMenu+0x10a0>)
 800228e:	f00b fba9 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002292:	7b3b      	ldrb	r3, [r7, #12]
 8002294:	b29a      	uxth	r2, r3
 8002296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2302      	movs	r3, #2
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2300      	movs	r3, #0
 80022a2:	210a      	movs	r1, #10
 80022a4:	4840      	ldr	r0, [pc, #256]	; (80023a8 <FreqMenu_DrawPresetMenu+0x10a4>)
 80022a6:	f00b fb9d 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2302      	movs	r3, #2
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2300      	movs	r3, #0
 80022ba:	210a      	movs	r1, #10
 80022bc:	483b      	ldr	r0, [pc, #236]	; (80023ac <FreqMenu_DrawPresetMenu+0x10a8>)
 80022be:	f00b fb91 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80022c2:	7abb      	ldrb	r3, [r7, #10]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	2302      	movs	r3, #2
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2300      	movs	r3, #0
 80022d2:	210a      	movs	r1, #10
 80022d4:	4836      	ldr	r0, [pc, #216]	; (80023b0 <FreqMenu_DrawPresetMenu+0x10ac>)
 80022d6:	f00b fb85 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80022da:	7a7b      	ldrb	r3, [r7, #9]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	2302      	movs	r3, #2
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2300      	movs	r3, #0
 80022ea:	210a      	movs	r1, #10
 80022ec:	4831      	ldr	r0, [pc, #196]	; (80023b4 <FreqMenu_DrawPresetMenu+0x10b0>)
 80022ee:	f00b fb79 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2302      	movs	r3, #2
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2300      	movs	r3, #0
 8002302:	2178      	movs	r1, #120	; 0x78
 8002304:	482c      	ldr	r0, [pc, #176]	; (80023b8 <FreqMenu_DrawPresetMenu+0x10b4>)
 8002306:	f00b fb6d 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	b29a      	uxth	r2, r3
 800230e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2302      	movs	r3, #2
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2300      	movs	r3, #0
 800231a:	2178      	movs	r1, #120	; 0x78
 800231c:	4827      	ldr	r0, [pc, #156]	; (80023bc <FreqMenu_DrawPresetMenu+0x10b8>)
 800231e:	f00b fb61 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002322:	7b7b      	ldrb	r3, [r7, #13]
 8002324:	b29a      	uxth	r2, r3
 8002326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2302      	movs	r3, #2
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2300      	movs	r3, #0
 8002332:	2178      	movs	r1, #120	; 0x78
 8002334:	4822      	ldr	r0, [pc, #136]	; (80023c0 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002336:	f00b fb55 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 800233a:	7b3b      	ldrb	r3, [r7, #12]
 800233c:	b29a      	uxth	r2, r3
 800233e:	2300      	movs	r3, #0
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	2302      	movs	r3, #2
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234a:	2178      	movs	r1, #120	; 0x78
 800234c:	481d      	ldr	r0, [pc, #116]	; (80023c4 <FreqMenu_DrawPresetMenu+0x10c0>)
 800234e:	f00b fb49 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002352:	7afb      	ldrb	r3, [r7, #11]
 8002354:	b29a      	uxth	r2, r3
 8002356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2302      	movs	r3, #2
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	2178      	movs	r1, #120	; 0x78
 8002364:	4818      	ldr	r0, [pc, #96]	; (80023c8 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002366:	f00b fb3d 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800236a:	7abb      	ldrb	r3, [r7, #10]
 800236c:	b29a      	uxth	r2, r3
 800236e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2302      	movs	r3, #2
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2300      	movs	r3, #0
 800237a:	2178      	movs	r1, #120	; 0x78
 800237c:	4813      	ldr	r0, [pc, #76]	; (80023cc <FreqMenu_DrawPresetMenu+0x10c8>)
 800237e:	f00b fb31 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002382:	7a7b      	ldrb	r3, [r7, #9]
 8002384:	b29a      	uxth	r2, r3
 8002386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	2302      	movs	r3, #2
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2300      	movs	r3, #0
 8002392:	2178      	movs	r1, #120	; 0x78
 8002394:	480e      	ldr	r0, [pc, #56]	; (80023d0 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002396:	f00b fb25 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 800239a:	e23f      	b.n	800281c <FreqMenu_DrawPresetMenu+0x1518>
 800239c:	08011128 	.word	0x08011128
 80023a0:	08011130 	.word	0x08011130
 80023a4:	08011138 	.word	0x08011138
 80023a8:	08011140 	.word	0x08011140
 80023ac:	08011148 	.word	0x08011148
 80023b0:	08011150 	.word	0x08011150
 80023b4:	08011158 	.word	0x08011158
 80023b8:	08011160 	.word	0x08011160
 80023bc:	08011168 	.word	0x08011168
 80023c0:	08011170 	.word	0x08011170
 80023c4:	08011178 	.word	0x08011178
 80023c8:	08011180 	.word	0x08011180
 80023cc:	08011188 	.word	0x08011188
 80023d0:	08011190 	.word	0x08011190
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2302      	movs	r3, #2
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	210a      	movs	r1, #10
 80023e6:	48a4      	ldr	r0, [pc, #656]	; (8002678 <FreqMenu_DrawPresetMenu+0x1374>)
 80023e8:	f00b fafc 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	2302      	movs	r3, #2
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2300      	movs	r3, #0
 80023fc:	210a      	movs	r1, #10
 80023fe:	489f      	ldr	r0, [pc, #636]	; (800267c <FreqMenu_DrawPresetMenu+0x1378>)
 8002400:	f00b faf0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	b29a      	uxth	r2, r3
 8002408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	2302      	movs	r3, #2
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2300      	movs	r3, #0
 8002414:	210a      	movs	r1, #10
 8002416:	489a      	ldr	r0, [pc, #616]	; (8002680 <FreqMenu_DrawPresetMenu+0x137c>)
 8002418:	f00b fae4 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800241c:	7b3b      	ldrb	r3, [r7, #12]
 800241e:	b29a      	uxth	r2, r3
 8002420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2302      	movs	r3, #2
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	210a      	movs	r1, #10
 800242e:	4895      	ldr	r0, [pc, #596]	; (8002684 <FreqMenu_DrawPresetMenu+0x1380>)
 8002430:	f00b fad8 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002434:	7afb      	ldrb	r3, [r7, #11]
 8002436:	b29a      	uxth	r2, r3
 8002438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	2302      	movs	r3, #2
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	210a      	movs	r1, #10
 8002446:	4890      	ldr	r0, [pc, #576]	; (8002688 <FreqMenu_DrawPresetMenu+0x1384>)
 8002448:	f00b facc 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800244c:	7abb      	ldrb	r3, [r7, #10]
 800244e:	b29a      	uxth	r2, r3
 8002450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	2302      	movs	r3, #2
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2300      	movs	r3, #0
 800245c:	210a      	movs	r1, #10
 800245e:	488b      	ldr	r0, [pc, #556]	; (800268c <FreqMenu_DrawPresetMenu+0x1388>)
 8002460:	f00b fac0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002464:	7a7b      	ldrb	r3, [r7, #9]
 8002466:	b29a      	uxth	r2, r3
 8002468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	2302      	movs	r3, #2
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	210a      	movs	r1, #10
 8002476:	4886      	ldr	r0, [pc, #536]	; (8002690 <FreqMenu_DrawPresetMenu+0x138c>)
 8002478:	f00b fab4 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	b29a      	uxth	r2, r3
 8002480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	2302      	movs	r3, #2
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2300      	movs	r3, #0
 800248c:	2178      	movs	r1, #120	; 0x78
 800248e:	4881      	ldr	r0, [pc, #516]	; (8002694 <FreqMenu_DrawPresetMenu+0x1390>)
 8002490:	f00b faa8 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002494:	7bbb      	ldrb	r3, [r7, #14]
 8002496:	b29a      	uxth	r2, r3
 8002498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	2302      	movs	r3, #2
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2300      	movs	r3, #0
 80024a4:	2178      	movs	r1, #120	; 0x78
 80024a6:	487c      	ldr	r0, [pc, #496]	; (8002698 <FreqMenu_DrawPresetMenu+0x1394>)
 80024a8:	f00b fa9c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80024ac:	7b7b      	ldrb	r3, [r7, #13]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	2302      	movs	r3, #2
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2300      	movs	r3, #0
 80024bc:	2178      	movs	r1, #120	; 0x78
 80024be:	4877      	ldr	r0, [pc, #476]	; (800269c <FreqMenu_DrawPresetMenu+0x1398>)
 80024c0:	f00b fa90 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80024c4:	7b3b      	ldrb	r3, [r7, #12]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	2302      	movs	r3, #2
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2300      	movs	r3, #0
 80024d4:	2178      	movs	r1, #120	; 0x78
 80024d6:	4872      	ldr	r0, [pc, #456]	; (80026a0 <FreqMenu_DrawPresetMenu+0x139c>)
 80024d8:	f00b fa84 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ec:	2178      	movs	r1, #120	; 0x78
 80024ee:	486d      	ldr	r0, [pc, #436]	; (80026a4 <FreqMenu_DrawPresetMenu+0x13a0>)
 80024f0:	f00b fa78 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80024f4:	7abb      	ldrb	r3, [r7, #10]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	2302      	movs	r3, #2
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2178      	movs	r1, #120	; 0x78
 8002506:	4868      	ldr	r0, [pc, #416]	; (80026a8 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002508:	f00b fa6c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800250c:	7a7b      	ldrb	r3, [r7, #9]
 800250e:	b29a      	uxth	r2, r3
 8002510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	2302      	movs	r3, #2
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2300      	movs	r3, #0
 800251c:	2178      	movs	r1, #120	; 0x78
 800251e:	4863      	ldr	r0, [pc, #396]	; (80026ac <FreqMenu_DrawPresetMenu+0x13a8>)
 8002520:	f00b fa60 	bl	800d9e4 <ILI9341_Draw_Text>
			break;
 8002524:	e17a      	b.n	800281c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	b29a      	uxth	r2, r3
 800252a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2300      	movs	r3, #0
 8002536:	210a      	movs	r1, #10
 8002538:	484f      	ldr	r0, [pc, #316]	; (8002678 <FreqMenu_DrawPresetMenu+0x1374>)
 800253a:	f00b fa53 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	b29a      	uxth	r2, r3
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	210a      	movs	r1, #10
 8002550:	484a      	ldr	r0, [pc, #296]	; (800267c <FreqMenu_DrawPresetMenu+0x1378>)
 8002552:	f00b fa47 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002556:	7b7b      	ldrb	r3, [r7, #13]
 8002558:	b29a      	uxth	r2, r3
 800255a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2300      	movs	r3, #0
 8002566:	210a      	movs	r1, #10
 8002568:	4845      	ldr	r0, [pc, #276]	; (8002680 <FreqMenu_DrawPresetMenu+0x137c>)
 800256a:	f00b fa3b 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800256e:	7b3b      	ldrb	r3, [r7, #12]
 8002570:	b29a      	uxth	r2, r3
 8002572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2300      	movs	r3, #0
 800257e:	210a      	movs	r1, #10
 8002580:	4840      	ldr	r0, [pc, #256]	; (8002684 <FreqMenu_DrawPresetMenu+0x1380>)
 8002582:	f00b fa2f 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	b29a      	uxth	r2, r3
 800258a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2300      	movs	r3, #0
 8002596:	210a      	movs	r1, #10
 8002598:	483b      	ldr	r0, [pc, #236]	; (8002688 <FreqMenu_DrawPresetMenu+0x1384>)
 800259a:	f00b fa23 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800259e:	7abb      	ldrb	r3, [r7, #10]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2302      	movs	r3, #2
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2300      	movs	r3, #0
 80025ae:	210a      	movs	r1, #10
 80025b0:	4836      	ldr	r0, [pc, #216]	; (800268c <FreqMenu_DrawPresetMenu+0x1388>)
 80025b2:	f00b fa17 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80025b6:	7a7b      	ldrb	r3, [r7, #9]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2302      	movs	r3, #2
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2300      	movs	r3, #0
 80025c6:	210a      	movs	r1, #10
 80025c8:	4831      	ldr	r0, [pc, #196]	; (8002690 <FreqMenu_DrawPresetMenu+0x138c>)
 80025ca:	f00b fa0b 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2302      	movs	r3, #2
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2300      	movs	r3, #0
 80025de:	2178      	movs	r1, #120	; 0x78
 80025e0:	482c      	ldr	r0, [pc, #176]	; (8002694 <FreqMenu_DrawPresetMenu+0x1390>)
 80025e2:	f00b f9ff 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80025e6:	7bbb      	ldrb	r3, [r7, #14]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	2302      	movs	r3, #2
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	2178      	movs	r1, #120	; 0x78
 80025f8:	4827      	ldr	r0, [pc, #156]	; (8002698 <FreqMenu_DrawPresetMenu+0x1394>)
 80025fa:	f00b f9f3 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80025fe:	7b7b      	ldrb	r3, [r7, #13]
 8002600:	b29a      	uxth	r2, r3
 8002602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	2302      	movs	r3, #2
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2300      	movs	r3, #0
 800260e:	2178      	movs	r1, #120	; 0x78
 8002610:	4822      	ldr	r0, [pc, #136]	; (800269c <FreqMenu_DrawPresetMenu+0x1398>)
 8002612:	f00b f9e7 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002616:	7b3b      	ldrb	r3, [r7, #12]
 8002618:	b29a      	uxth	r2, r3
 800261a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	2302      	movs	r3, #2
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2300      	movs	r3, #0
 8002626:	2178      	movs	r1, #120	; 0x78
 8002628:	481d      	ldr	r0, [pc, #116]	; (80026a0 <FreqMenu_DrawPresetMenu+0x139c>)
 800262a:	f00b f9db 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	b29a      	uxth	r2, r3
 8002632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	2302      	movs	r3, #2
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2300      	movs	r3, #0
 800263e:	2178      	movs	r1, #120	; 0x78
 8002640:	4818      	ldr	r0, [pc, #96]	; (80026a4 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002642:	f00b f9cf 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 8002646:	7abb      	ldrb	r3, [r7, #10]
 8002648:	b29a      	uxth	r2, r3
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2302      	movs	r3, #2
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002656:	2178      	movs	r1, #120	; 0x78
 8002658:	4813      	ldr	r0, [pc, #76]	; (80026a8 <FreqMenu_DrawPresetMenu+0x13a4>)
 800265a:	f00b f9c3 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800265e:	7a7b      	ldrb	r3, [r7, #9]
 8002660:	b29a      	uxth	r2, r3
 8002662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	2178      	movs	r1, #120	; 0x78
 8002670:	480e      	ldr	r0, [pc, #56]	; (80026ac <FreqMenu_DrawPresetMenu+0x13a8>)
 8002672:	f00b f9b7 	bl	800d9e4 <ILI9341_Draw_Text>
			break;
 8002676:	e0d1      	b.n	800281c <FreqMenu_DrawPresetMenu+0x1518>
 8002678:	08011128 	.word	0x08011128
 800267c:	08011130 	.word	0x08011130
 8002680:	08011138 	.word	0x08011138
 8002684:	08011140 	.word	0x08011140
 8002688:	08011148 	.word	0x08011148
 800268c:	08011150 	.word	0x08011150
 8002690:	08011158 	.word	0x08011158
 8002694:	08011160 	.word	0x08011160
 8002698:	08011168 	.word	0x08011168
 800269c:	08011170 	.word	0x08011170
 80026a0:	08011178 	.word	0x08011178
 80026a4:	08011180 	.word	0x08011180
 80026a8:	08011188 	.word	0x08011188
 80026ac:	08011190 	.word	0x08011190
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2302      	movs	r3, #2
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2300      	movs	r3, #0
 80026c0:	210a      	movs	r1, #10
 80026c2:	4858      	ldr	r0, [pc, #352]	; (8002824 <FreqMenu_DrawPresetMenu+0x1520>)
 80026c4:	f00b f98e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80026c8:	7bbb      	ldrb	r3, [r7, #14]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2302      	movs	r3, #2
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	210a      	movs	r1, #10
 80026da:	4853      	ldr	r0, [pc, #332]	; (8002828 <FreqMenu_DrawPresetMenu+0x1524>)
 80026dc:	f00b f982 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80026e0:	7b7b      	ldrb	r3, [r7, #13]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	2302      	movs	r3, #2
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2300      	movs	r3, #0
 80026f0:	210a      	movs	r1, #10
 80026f2:	484e      	ldr	r0, [pc, #312]	; (800282c <FreqMenu_DrawPresetMenu+0x1528>)
 80026f4:	f00b f976 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80026f8:	7b3b      	ldrb	r3, [r7, #12]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	2302      	movs	r3, #2
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2300      	movs	r3, #0
 8002708:	210a      	movs	r1, #10
 800270a:	4849      	ldr	r0, [pc, #292]	; (8002830 <FreqMenu_DrawPresetMenu+0x152c>)
 800270c:	f00b f96a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	b29a      	uxth	r2, r3
 8002714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2302      	movs	r3, #2
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2300      	movs	r3, #0
 8002720:	210a      	movs	r1, #10
 8002722:	4844      	ldr	r0, [pc, #272]	; (8002834 <FreqMenu_DrawPresetMenu+0x1530>)
 8002724:	f00b f95e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002728:	7abb      	ldrb	r3, [r7, #10]
 800272a:	b29a      	uxth	r2, r3
 800272c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	2302      	movs	r3, #2
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2300      	movs	r3, #0
 8002738:	210a      	movs	r1, #10
 800273a:	483f      	ldr	r0, [pc, #252]	; (8002838 <FreqMenu_DrawPresetMenu+0x1534>)
 800273c:	f00b f952 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002740:	7a7b      	ldrb	r3, [r7, #9]
 8002742:	b29a      	uxth	r2, r3
 8002744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	2302      	movs	r3, #2
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	210a      	movs	r1, #10
 8002752:	483a      	ldr	r0, [pc, #232]	; (800283c <FreqMenu_DrawPresetMenu+0x1538>)
 8002754:	f00b f946 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	b29a      	uxth	r2, r3
 800275c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	2302      	movs	r3, #2
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2300      	movs	r3, #0
 8002768:	2178      	movs	r1, #120	; 0x78
 800276a:	4835      	ldr	r0, [pc, #212]	; (8002840 <FreqMenu_DrawPresetMenu+0x153c>)
 800276c:	f00b f93a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	b29a      	uxth	r2, r3
 8002774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	2302      	movs	r3, #2
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2300      	movs	r3, #0
 8002780:	2178      	movs	r1, #120	; 0x78
 8002782:	4830      	ldr	r0, [pc, #192]	; (8002844 <FreqMenu_DrawPresetMenu+0x1540>)
 8002784:	f00b f92e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002788:	7b7b      	ldrb	r3, [r7, #13]
 800278a:	b29a      	uxth	r2, r3
 800278c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	2302      	movs	r3, #2
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2300      	movs	r3, #0
 8002798:	2178      	movs	r1, #120	; 0x78
 800279a:	482b      	ldr	r0, [pc, #172]	; (8002848 <FreqMenu_DrawPresetMenu+0x1544>)
 800279c:	f00b f922 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80027a0:	7b3b      	ldrb	r3, [r7, #12]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	2302      	movs	r3, #2
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2300      	movs	r3, #0
 80027b0:	2178      	movs	r1, #120	; 0x78
 80027b2:	4826      	ldr	r0, [pc, #152]	; (800284c <FreqMenu_DrawPresetMenu+0x1548>)
 80027b4:	f00b f916 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80027b8:	7afb      	ldrb	r3, [r7, #11]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	2302      	movs	r3, #2
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2300      	movs	r3, #0
 80027c8:	2178      	movs	r1, #120	; 0x78
 80027ca:	4821      	ldr	r0, [pc, #132]	; (8002850 <FreqMenu_DrawPresetMenu+0x154c>)
 80027cc:	f00b f90a 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80027d0:	7abb      	ldrb	r3, [r7, #10]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	2302      	movs	r3, #2
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2300      	movs	r3, #0
 80027e0:	2178      	movs	r1, #120	; 0x78
 80027e2:	481c      	ldr	r0, [pc, #112]	; (8002854 <FreqMenu_DrawPresetMenu+0x1550>)
 80027e4:	f00b f8fe 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 80027e8:	7a7b      	ldrb	r3, [r7, #9]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	2302      	movs	r3, #2
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f8:	2178      	movs	r1, #120	; 0x78
 80027fa:	4817      	ldr	r0, [pc, #92]	; (8002858 <FreqMenu_DrawPresetMenu+0x1554>)
 80027fc:	f00b f8f2 	bl	800d9e4 <ILI9341_Draw_Text>
			break;
 8002800:	bf00      	nop
 8002802:	e00b      	b.n	800281c <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002804:	2300      	movs	r3, #0
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	2301      	movs	r3, #1
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002810:	22b4      	movs	r2, #180	; 0xb4
 8002812:	210a      	movs	r1, #10
 8002814:	4811      	ldr	r0, [pc, #68]	; (800285c <FreqMenu_DrawPresetMenu+0x1558>)
 8002816:	f00b f8e5 	bl	800d9e4 <ILI9341_Draw_Text>
}
 800281a:	e7ff      	b.n	800281c <FreqMenu_DrawPresetMenu+0x1518>
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	08011128 	.word	0x08011128
 8002828:	08011130 	.word	0x08011130
 800282c:	08011138 	.word	0x08011138
 8002830:	08011140 	.word	0x08011140
 8002834:	08011148 	.word	0x08011148
 8002838:	08011150 	.word	0x08011150
 800283c:	08011158 	.word	0x08011158
 8002840:	08011160 	.word	0x08011160
 8002844:	08011168 	.word	0x08011168
 8002848:	08011170 	.word	0x08011170
 800284c:	08011178 	.word	0x08011178
 8002850:	08011180 	.word	0x08011180
 8002854:	08011188 	.word	0x08011188
 8002858:	08011190 	.word	0x08011190
 800285c:	0801119c 	.word	0x0801119c

08002860 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 10, 10, WHITE, 2, BLACK);
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2302      	movs	r3, #2
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002872:	220a      	movs	r2, #10
 8002874:	210a      	movs	r1, #10
 8002876:	4804      	ldr	r0, [pc, #16]	; (8002888 <FreqMenu_DrawAdjustMenu+0x28>)
 8002878:	f00b f8b4 	bl	800d9e4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800287c:	f7fe fb12 	bl	8000ea4 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	080111cc 	.word	0x080111cc

0800288c <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 800288c:	b5b0      	push	{r4, r5, r7, lr}
 800288e:	b0a4      	sub	sp, #144	; 0x90
 8002890:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	10, 10, WHITE, 2, BLACK);
 8002892:	2300      	movs	r3, #0
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	2302      	movs	r3, #2
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800289e:	220a      	movs	r2, #10
 80028a0:	210a      	movs	r1, #10
 80028a2:	48a0      	ldr	r0, [pc, #640]	; (8002b24 <FreqMenu_DrawSweepMenu+0x298>)
 80028a4:	f00b f89e 	bl	800d9e4 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 80028a8:	2300      	movs	r3, #0
 80028aa:	677b      	str	r3, [r7, #116]	; 0x74
 80028ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 80028ba:	4b9b      	ldr	r3, [pc, #620]	; (8002b28 <FreqMenu_DrawSweepMenu+0x29c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d109      	bne.n	80028da <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 80028c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028ca:	4a98      	ldr	r2, [pc, #608]	; (8002b2c <FreqMenu_DrawSweepMenu+0x2a0>)
 80028cc:	461c      	mov	r4, r3
 80028ce:	4615      	mov	r5, r2
 80028d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d4:	682b      	ldr	r3, [r5, #0]
 80028d6:	7023      	strb	r3, [r4, #0]
 80028d8:	e008      	b.n	80028ec <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 80028da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028de:	4a94      	ldr	r2, [pc, #592]	; (8002b30 <FreqMenu_DrawSweepMenu+0x2a4>)
 80028e0:	461c      	mov	r4, r3
 80028e2:	4615      	mov	r5, r2
 80028e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 10, 40, BLACK, 2, WHITE);
 80028ec:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80028f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	2302      	movs	r3, #2
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2300      	movs	r3, #0
 80028fc:	2228      	movs	r2, #40	; 0x28
 80028fe:	210a      	movs	r1, #10
 8002900:	f00b f870 	bl	800d9e4 <ILI9341_Draw_Text>



	// draw mode (direction) status
	char mode_text[16] = "";
 8002904:	2300      	movs	r3, #0
 8002906:	667b      	str	r3, [r7, #100]	; 0x64
 8002908:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]

	if((SWEEP_TIMER->CR1 & TIM_CR1_CMS_0) == TIM_CR1_CMS_0)
 8002914:	4b84      	ldr	r3, [pc, #528]	; (8002b28 <FreqMenu_DrawSweepMenu+0x29c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b20      	cmp	r3, #32
 800291e:	d109      	bne.n	8002934 <FreqMenu_DrawSweepMenu+0xa8>
	{
		// direction not relevant in center-alligned mode (bi-directional)
		snprintf(mode_text, sizeof(mode_text), "MODE: BOTH");
 8002920:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002924:	4a83      	ldr	r2, [pc, #524]	; (8002b34 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002926:	ca07      	ldmia	r2, {r0, r1, r2}
 8002928:	c303      	stmia	r3!, {r0, r1}
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	3302      	adds	r3, #2
 800292e:	0c12      	lsrs	r2, r2, #16
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e018      	b.n	8002966 <FreqMenu_DrawSweepMenu+0xda>
	{
		// center-alligned mode disabled (uni-directional)


		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002934:	4b7c      	ldr	r3, [pc, #496]	; (8002b28 <FreqMenu_DrawSweepMenu+0x29c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b10      	cmp	r3, #16
 800293e:	d109      	bne.n	8002954 <FreqMenu_DrawSweepMenu+0xc8>
			snprintf(mode_text, sizeof(mode_text), "MODE: DOWN");
 8002940:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002944:	4a7c      	ldr	r2, [pc, #496]	; (8002b38 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002946:	ca07      	ldmia	r2, {r0, r1, r2}
 8002948:	c303      	stmia	r3!, {r0, r1}
 800294a:	801a      	strh	r2, [r3, #0]
 800294c:	3302      	adds	r3, #2
 800294e:	0c12      	lsrs	r2, r2, #16
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e008      	b.n	8002966 <FreqMenu_DrawSweepMenu+0xda>
		else
			snprintf(mode_text, sizeof(mode_text), "MODE:   UP");
 8002954:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002958:	4a78      	ldr	r2, [pc, #480]	; (8002b3c <FreqMenu_DrawSweepMenu+0x2b0>)
 800295a:	ca07      	ldmia	r2, {r0, r1, r2}
 800295c:	c303      	stmia	r3!, {r0, r1}
 800295e:	801a      	strh	r2, [r3, #0]
 8002960:	3302      	adds	r3, #2
 8002962:	0c12      	lsrs	r2, r2, #16
 8002964:	701a      	strb	r2, [r3, #0]

	}

	ILI9341_Draw_Text(mode_text, 10, 60, BLACK, 2, WHITE);
 8002966:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800296a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	2302      	movs	r3, #2
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2300      	movs	r3, #0
 8002976:	223c      	movs	r2, #60	; 0x3c
 8002978:	210a      	movs	r1, #10
 800297a:	f00b f833 	bl	800d9e4 <ILI9341_Draw_Text>

	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 800297e:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <FreqMenu_DrawSweepMenu+0x112>
	{
		ILI9341_Draw_Text("SWEEP", 10, 80, WHITE, 2, BLACK);
 8002986:	2300      	movs	r3, #0
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2302      	movs	r3, #2
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002992:	2250      	movs	r2, #80	; 0x50
 8002994:	210a      	movs	r1, #10
 8002996:	486b      	ldr	r0, [pc, #428]	; (8002b44 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002998:	f00b f824 	bl	800d9e4 <ILI9341_Draw_Text>
 800299c:	e00a      	b.n	80029b4 <FreqMenu_DrawSweepMenu+0x128>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP", 10, 80, BLACK, 2, WHITE);
 800299e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	2302      	movs	r3, #2
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2300      	movs	r3, #0
 80029aa:	2250      	movs	r2, #80	; 0x50
 80029ac:	210a      	movs	r1, #10
 80029ae:	4865      	ldr	r0, [pc, #404]	; (8002b44 <FreqMenu_DrawSweepMenu+0x2b8>)
 80029b0:	f00b f818 	bl	800d9e4 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 80029b4:	2300      	movs	r3, #0
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
 80029c8:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "   %1.2f Hz", calculated_sweep_in_hertz);
 80029ca:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <FreqMenu_DrawSweepMenu+0x2bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fde2 	bl	8000598 <__aeabi_f2d>
 80029d4:	4603      	mov	r3, r0
 80029d6:	460c      	mov	r4, r1
 80029d8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80029dc:	e9cd 3400 	strd	r3, r4, [sp]
 80029e0:	4a5a      	ldr	r2, [pc, #360]	; (8002b4c <FreqMenu_DrawSweepMenu+0x2c0>)
 80029e2:	2119      	movs	r1, #25
 80029e4:	f00c fb4a 	bl	800f07c <sniprintf>
	ILI9341_Draw_Text(arr_text, 70, 80, BLACK, 2, WHITE);
 80029e8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80029ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2302      	movs	r3, #2
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	2250      	movs	r2, #80	; 0x50
 80029fa:	2146      	movs	r1, #70	; 0x46
 80029fc:	f00a fff2 	bl	800d9e4 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002a00:	2300      	movs	r3, #0
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002a16:	f002 fde1 	bl	80055dc <SM_GetOutputInHertz>
 8002a1a:	ee10 3a10 	vmov	r3, s0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fdba 	bl	8000598 <__aeabi_f2d>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002a2c:	e9cd 3400 	strd	r3, r4, [sp]
 8002a30:	4a47      	ldr	r2, [pc, #284]	; (8002b50 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002a32:	2119      	movs	r1, #25
 8002a34:	f00c fb22 	bl	800f07c <sniprintf>
	ILI9341_Draw_Text(out_hertz, 10, 100, BLACK, 2, WHITE);
 8002a38:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	2302      	movs	r3, #2
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2300      	movs	r3, #0
 8002a48:	2264      	movs	r2, #100	; 0x64
 8002a4a:	210a      	movs	r1, #10
 8002a4c:	f00a ffca 	bl	800d9e4 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002a50:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10f      	bne.n	8002a78 <FreqMenu_DrawSweepMenu+0x1ec>
 8002a58:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10b      	bne.n	8002a78 <FreqMenu_DrawSweepMenu+0x1ec>
	{
		ILI9341_Draw_Text("UPPER", 10, 120, WHITE, 2, BLACK);
 8002a60:	2300      	movs	r3, #0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	2302      	movs	r3, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a6c:	2278      	movs	r2, #120	; 0x78
 8002a6e:	210a      	movs	r1, #10
 8002a70:	4839      	ldr	r0, [pc, #228]	; (8002b58 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002a72:	f00a ffb7 	bl	800d9e4 <ILI9341_Draw_Text>
 8002a76:	e00a      	b.n	8002a8e <FreqMenu_DrawSweepMenu+0x202>
	}
	else
	{
		ILI9341_Draw_Text("UPPER", 10, 120, BLACK, 2, WHITE);
 8002a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	2302      	movs	r3, #2
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2300      	movs	r3, #0
 8002a84:	2278      	movs	r2, #120	; 0x78
 8002a86:	210a      	movs	r1, #10
 8002a88:	4833      	ldr	r0, [pc, #204]	; (8002b58 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002a8a:	f00a ffab 	bl	800d9e4 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "   %7.2f Hz", SM_ConvertPeriodToHertz(sweep_lower_arr_bounds, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002aa0:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <FreqMenu_DrawSweepMenu+0x2d0>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	ee17 0a90 	vmov	r0, s15
 8002ab6:	f002 fdd5 	bl	8005664 <SM_ConvertPeriodToHertz>
 8002aba:	eeb0 7a40 	vmov.f32	s14, s0
 8002abe:	eddf 7a29 	vldr	s15, [pc, #164]	; 8002b64 <FreqMenu_DrawSweepMenu+0x2d8>
 8002ac2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ac6:	ee16 0a90 	vmov	r0, s13
 8002aca:	f7fd fd65 	bl	8000598 <__aeabi_f2d>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	f107 0018 	add.w	r0, r7, #24
 8002ad6:	e9cd 3400 	strd	r3, r4, [sp]
 8002ada:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <FreqMenu_DrawSweepMenu+0x2dc>)
 8002adc:	2114      	movs	r1, #20
 8002ade:	f00c facd 	bl	800f07c <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 70, 120, BLACK, 2, WHITE);
 8002ae2:	f107 0018 	add.w	r0, r7, #24
 8002ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2300      	movs	r3, #0
 8002af2:	2278      	movs	r2, #120	; 0x78
 8002af4:	2146      	movs	r1, #70	; 0x46
 8002af6:	f00a ff75 	bl	800d9e4 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d136      	bne.n	8002b70 <FreqMenu_DrawSweepMenu+0x2e4>
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d132      	bne.n	8002b70 <FreqMenu_DrawSweepMenu+0x2e4>
	{
		ILI9341_Draw_Text("LOWER", 10, 140, WHITE, 2, BLACK);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	2302      	movs	r3, #2
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b16:	228c      	movs	r2, #140	; 0x8c
 8002b18:	210a      	movs	r1, #10
 8002b1a:	4814      	ldr	r0, [pc, #80]	; (8002b6c <FreqMenu_DrawSweepMenu+0x2e0>)
 8002b1c:	f00a ff62 	bl	800d9e4 <ILI9341_Draw_Text>
 8002b20:	e031      	b.n	8002b86 <FreqMenu_DrawSweepMenu+0x2fa>
 8002b22:	bf00      	nop
 8002b24:	080111e0 	.word	0x080111e0
 8002b28:	40000c00 	.word	0x40000c00
 8002b2c:	080111f4 	.word	0x080111f4
 8002b30:	08011208 	.word	0x08011208
 8002b34:	0801121c 	.word	0x0801121c
 8002b38:	08011228 	.word	0x08011228
 8002b3c:	08011234 	.word	0x08011234
 8002b40:	20001f19 	.word	0x20001f19
 8002b44:	0801110c 	.word	0x0801110c
 8002b48:	20001f34 	.word	0x20001f34
 8002b4c:	08011240 	.word	0x08011240
 8002b50:	0801124c 	.word	0x0801124c
 8002b54:	20001f18 	.word	0x20001f18
 8002b58:	08011260 	.word	0x08011260
 8002b5c:	20000008 	.word	0x20000008
 8002b60:	40013400 	.word	0x40013400
 8002b64:	42f00000 	.word	0x42f00000
 8002b68:	08011268 	.word	0x08011268
 8002b6c:	08011274 	.word	0x08011274
	}
	else
	{
		ILI9341_Draw_Text("LOWER", 10, 140, BLACK, 2, WHITE);
 8002b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	2302      	movs	r3, #2
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	228c      	movs	r2, #140	; 0x8c
 8002b7e:	210a      	movs	r1, #10
 8002b80:	4841      	ldr	r0, [pc, #260]	; (8002c88 <FreqMenu_DrawSweepMenu+0x3fc>)
 8002b82:	f00a ff2f 	bl	800d9e4 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "   %7.2f Hz", SM_ConvertPeriodToHertz(sweep_upper_arr_bounds, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002b98:	4b3c      	ldr	r3, [pc, #240]	; (8002c8c <FreqMenu_DrawSweepMenu+0x400>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <FreqMenu_DrawSweepMenu+0x404>)
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4619      	mov	r1, r3
 8002baa:	ee17 0a90 	vmov	r0, s15
 8002bae:	f002 fd59 	bl	8005664 <SM_ConvertPeriodToHertz>
 8002bb2:	eeb0 7a40 	vmov.f32	s14, s0
 8002bb6:	eddf 7a37 	vldr	s15, [pc, #220]	; 8002c94 <FreqMenu_DrawSweepMenu+0x408>
 8002bba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bbe:	ee16 0a90 	vmov	r0, s13
 8002bc2:	f7fd fce9 	bl	8000598 <__aeabi_f2d>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460c      	mov	r4, r1
 8002bca:	1d38      	adds	r0, r7, #4
 8002bcc:	e9cd 3400 	strd	r3, r4, [sp]
 8002bd0:	4a31      	ldr	r2, [pc, #196]	; (8002c98 <FreqMenu_DrawSweepMenu+0x40c>)
 8002bd2:	2114      	movs	r1, #20
 8002bd4:	f00c fa52 	bl	800f07c <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 70, 140, BLACK, 2, WHITE);
 8002bd8:	1d38      	adds	r0, r7, #4
 8002bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2302      	movs	r3, #2
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	228c      	movs	r2, #140	; 0x8c
 8002be8:	2146      	movs	r1, #70	; 0x46
 8002bea:	f00a fefb 	bl	800d9e4 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002bee:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <FreqMenu_DrawSweepMenu+0x410>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10b      	bne.n	8002c12 <FreqMenu_DrawSweepMenu+0x386>
		ILI9341_Draw_Text("PAUSE ", 6, 210, BLACK, 2, DARKCYAN);
 8002bfa:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	2302      	movs	r3, #2
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2300      	movs	r3, #0
 8002c06:	22d2      	movs	r2, #210	; 0xd2
 8002c08:	2106      	movs	r1, #6
 8002c0a:	4825      	ldr	r0, [pc, #148]	; (8002ca0 <FreqMenu_DrawSweepMenu+0x414>)
 8002c0c:	f00a feea 	bl	800d9e4 <ILI9341_Draw_Text>
 8002c10:	e00a      	b.n	8002c28 <FreqMenu_DrawSweepMenu+0x39c>
	else
		ILI9341_Draw_Text("RESUME", 5, 210, BLACK, 2, DARKCYAN);
 8002c12:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	22d2      	movs	r2, #210	; 0xd2
 8002c20:	2105      	movs	r1, #5
 8002c22:	4820      	ldr	r0, [pc, #128]	; (8002ca4 <FreqMenu_DrawSweepMenu+0x418>)
 8002c24:	f00a fede 	bl	800d9e4 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("MODE", 95, 210, BLACK, 2, DARKGREEN);
 8002c28:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	2302      	movs	r3, #2
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2300      	movs	r3, #0
 8002c34:	22d2      	movs	r2, #210	; 0xd2
 8002c36:	215f      	movs	r1, #95	; 0x5f
 8002c38:	481b      	ldr	r0, [pc, #108]	; (8002ca8 <FreqMenu_DrawSweepMenu+0x41c>)
 8002c3a:	f00a fed3 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 173, 210, BLACK, 2, YELLOW);
 8002c3e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	2302      	movs	r3, #2
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	22d2      	movs	r2, #210	; 0xd2
 8002c4c:	21ad      	movs	r1, #173	; 0xad
 8002c4e:	4817      	ldr	r0, [pc, #92]	; (8002cac <FreqMenu_DrawSweepMenu+0x420>)
 8002c50:	f00a fec8 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("UPPER", 250, 204, BLACK, 2, RED);
 8002c54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	22cc      	movs	r2, #204	; 0xcc
 8002c62:	21fa      	movs	r1, #250	; 0xfa
 8002c64:	4812      	ldr	r0, [pc, #72]	; (8002cb0 <FreqMenu_DrawSweepMenu+0x424>)
 8002c66:	f00a febd 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LOWER", 250, 221, BLACK, 2, RED);
 8002c6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	2302      	movs	r3, #2
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	22dd      	movs	r2, #221	; 0xdd
 8002c78:	21fa      	movs	r1, #250	; 0xfa
 8002c7a:	4803      	ldr	r0, [pc, #12]	; (8002c88 <FreqMenu_DrawSweepMenu+0x3fc>)
 8002c7c:	f00a feb2 	bl	800d9e4 <ILI9341_Draw_Text>
}
 8002c80:	bf00      	nop
 8002c82:	3788      	adds	r7, #136	; 0x88
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bdb0      	pop	{r4, r5, r7, pc}
 8002c88:	08011274 	.word	0x08011274
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	40013400 	.word	0x40013400
 8002c94:	42f00000 	.word	0x42f00000
 8002c98:	08011268 	.word	0x08011268
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	0801127c 	.word	0x0801127c
 8002ca4:	08011284 	.word	0x08011284
 8002ca8:	0801128c 	.word	0x0801128c
 8002cac:	0801110c 	.word	0x0801110c
 8002cb0:	08011260 	.word	0x08011260

08002cb4 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d007      	beq.n	8002cd4 <FuncMenu_DrawMenu+0x20>
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d008      	beq.n	8002cda <FuncMenu_DrawMenu+0x26>
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d000      	beq.n	8002cce <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawSyncMenu();
			break;

		default:
			break;
 8002ccc:	e008      	b.n	8002ce0 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawMainMenu();
 8002cce:	f000 f80b 	bl	8002ce8 <FuncMenu_DrawMainMenu>
			break;
 8002cd2:	e005      	b.n	8002ce0 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSignalMenu();
 8002cd4:	f000 f850 	bl	8002d78 <FuncMenu_DrawSignalMenu>
			break;
 8002cd8:	e002      	b.n	8002ce0 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSyncMenu();
 8002cda:	f000 fa2d 	bl	8003138 <FuncMenu_DrawSyncMenu>
			break;
 8002cde:	bf00      	nop

	}
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, WHITE, 2, BLACK);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cfa:	220a      	movs	r2, #10
 8002cfc:	210a      	movs	r1, #10
 8002cfe:	481a      	ldr	r0, [pc, #104]	; (8002d68 <FuncMenu_DrawMainMenu+0x80>)
 8002d00:	f00a fe70 	bl	800d9e4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002d04:	f7fe f8ce 	bl	8000ea4 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 210, BLACK, 2, DARKCYAN);
 8002d08:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	2302      	movs	r3, #2
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	22d2      	movs	r2, #210	; 0xd2
 8002d16:	2105      	movs	r1, #5
 8002d18:	4814      	ldr	r0, [pc, #80]	; (8002d6c <FuncMenu_DrawMainMenu+0x84>)
 8002d1a:	f00a fe63 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 97, 210, BLACK, 2, DARKGREEN);
 8002d1e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	2302      	movs	r3, #2
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	22d2      	movs	r2, #210	; 0xd2
 8002d2c:	2161      	movs	r1, #97	; 0x61
 8002d2e:	4810      	ldr	r0, [pc, #64]	; (8002d70 <FuncMenu_DrawMainMenu+0x88>)
 8002d30:	f00a fe58 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8002d34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	22d2      	movs	r2, #210	; 0xd2
 8002d42:	21af      	movs	r1, #175	; 0xaf
 8002d44:	480b      	ldr	r0, [pc, #44]	; (8002d74 <FuncMenu_DrawMainMenu+0x8c>)
 8002d46:	f00a fe4d 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 8002d4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	2302      	movs	r3, #2
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2300      	movs	r3, #0
 8002d56:	22d2      	movs	r2, #210	; 0xd2
 8002d58:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002d5c:	4805      	ldr	r0, [pc, #20]	; (8002d74 <FuncMenu_DrawMainMenu+0x8c>)
 8002d5e:	f00a fe41 	bl	800d9e4 <ILI9341_Draw_Text>
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	08011294 	.word	0x08011294
 8002d6c:	080112a0 	.word	0x080112a0
 8002d70:	080112a8 	.word	0x080112a8
 8002d74:	080112b0 	.word	0x080112b0

08002d78 <FuncMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSignalMenu()
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, WHITE, 2, BLACK);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2302      	movs	r3, #2
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d8a:	220a      	movs	r2, #10
 8002d8c:	210a      	movs	r1, #10
 8002d8e:	48b9      	ldr	r0, [pc, #740]	; (8003074 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002d90:	f00a fe28 	bl	800d9e4 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8002d94:	2000      	movs	r0, #0
 8002d96:	f002 fbef 	bl	8005578 <SM_GetOutputChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002da0:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 81b6 	beq.w	8003116 <FuncMenu_DrawSignalMenu+0x39e>
	{
		switch(func_profileTmp->func)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	f200 81b1 	bhi.w	8003116 <FuncMenu_DrawSignalMenu+0x39e>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <FuncMenu_DrawSignalMenu+0x44>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002dd5 	.word	0x08002dd5
 8002dc0:	08002e5b 	.word	0x08002e5b
 8002dc4:	08002ee1 	.word	0x08002ee1
 8002dc8:	08002f67 	.word	0x08002f67
 8002dcc:	08002fed 	.word	0x08002fed
 8002dd0:	08003091 	.word	0x08003091
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	2302      	movs	r3, #2
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002de0:	2232      	movs	r2, #50	; 0x32
 8002de2:	210a      	movs	r1, #10
 8002de4:	48a4      	ldr	r0, [pc, #656]	; (8003078 <FuncMenu_DrawSignalMenu+0x300>)
 8002de6:	f00a fdfd 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	2302      	movs	r3, #2
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2300      	movs	r3, #0
 8002df6:	2246      	movs	r2, #70	; 0x46
 8002df8:	210a      	movs	r1, #10
 8002dfa:	48a0      	ldr	r0, [pc, #640]	; (800307c <FuncMenu_DrawSignalMenu+0x304>)
 8002dfc:	f00a fdf2 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	2302      	movs	r3, #2
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	225a      	movs	r2, #90	; 0x5a
 8002e0e:	210a      	movs	r1, #10
 8002e10:	489b      	ldr	r0, [pc, #620]	; (8003080 <FuncMenu_DrawSignalMenu+0x308>)
 8002e12:	f00a fde7 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2300      	movs	r3, #0
 8002e22:	226e      	movs	r2, #110	; 0x6e
 8002e24:	210a      	movs	r1, #10
 8002e26:	4897      	ldr	r0, [pc, #604]	; (8003084 <FuncMenu_DrawSignalMenu+0x30c>)
 8002e28:	f00a fddc 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	2302      	movs	r3, #2
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	2300      	movs	r3, #0
 8002e38:	2282      	movs	r2, #130	; 0x82
 8002e3a:	210a      	movs	r1, #10
 8002e3c:	4892      	ldr	r0, [pc, #584]	; (8003088 <FuncMenu_DrawSignalMenu+0x310>)
 8002e3e:	f00a fdd1 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	2302      	movs	r3, #2
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2296      	movs	r2, #150	; 0x96
 8002e50:	210a      	movs	r1, #10
 8002e52:	488e      	ldr	r0, [pc, #568]	; (800308c <FuncMenu_DrawSignalMenu+0x314>)
 8002e54:	f00a fdc6 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8002e58:	e15d      	b.n	8003116 <FuncMenu_DrawSignalMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2302      	movs	r3, #2
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2300      	movs	r3, #0
 8002e66:	2232      	movs	r2, #50	; 0x32
 8002e68:	210a      	movs	r1, #10
 8002e6a:	4883      	ldr	r0, [pc, #524]	; (8003078 <FuncMenu_DrawSignalMenu+0x300>)
 8002e6c:	f00a fdba 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002e70:	2300      	movs	r3, #0
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	2302      	movs	r3, #2
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e7c:	2246      	movs	r2, #70	; 0x46
 8002e7e:	210a      	movs	r1, #10
 8002e80:	487e      	ldr	r0, [pc, #504]	; (800307c <FuncMenu_DrawSignalMenu+0x304>)
 8002e82:	f00a fdaf 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2300      	movs	r3, #0
 8002e92:	225a      	movs	r2, #90	; 0x5a
 8002e94:	210a      	movs	r1, #10
 8002e96:	487a      	ldr	r0, [pc, #488]	; (8003080 <FuncMenu_DrawSignalMenu+0x308>)
 8002e98:	f00a fda4 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	226e      	movs	r2, #110	; 0x6e
 8002eaa:	210a      	movs	r1, #10
 8002eac:	4875      	ldr	r0, [pc, #468]	; (8003084 <FuncMenu_DrawSignalMenu+0x30c>)
 8002eae:	f00a fd99 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2302      	movs	r3, #2
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2282      	movs	r2, #130	; 0x82
 8002ec0:	210a      	movs	r1, #10
 8002ec2:	4871      	ldr	r0, [pc, #452]	; (8003088 <FuncMenu_DrawSignalMenu+0x310>)
 8002ec4:	f00a fd8e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	2302      	movs	r3, #2
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2296      	movs	r2, #150	; 0x96
 8002ed6:	210a      	movs	r1, #10
 8002ed8:	486c      	ldr	r0, [pc, #432]	; (800308c <FuncMenu_DrawSignalMenu+0x314>)
 8002eda:	f00a fd83 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8002ede:	e11a      	b.n	8003116 <FuncMenu_DrawSignalMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	2232      	movs	r2, #50	; 0x32
 8002eee:	210a      	movs	r1, #10
 8002ef0:	4861      	ldr	r0, [pc, #388]	; (8003078 <FuncMenu_DrawSignalMenu+0x300>)
 8002ef2:	f00a fd77 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	2302      	movs	r3, #2
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2300      	movs	r3, #0
 8002f02:	2246      	movs	r2, #70	; 0x46
 8002f04:	210a      	movs	r1, #10
 8002f06:	485d      	ldr	r0, [pc, #372]	; (800307c <FuncMenu_DrawSignalMenu+0x304>)
 8002f08:	f00a fd6c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	2302      	movs	r3, #2
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f18:	225a      	movs	r2, #90	; 0x5a
 8002f1a:	210a      	movs	r1, #10
 8002f1c:	4858      	ldr	r0, [pc, #352]	; (8003080 <FuncMenu_DrawSignalMenu+0x308>)
 8002f1e:	f00a fd61 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	2302      	movs	r3, #2
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	226e      	movs	r2, #110	; 0x6e
 8002f30:	210a      	movs	r1, #10
 8002f32:	4854      	ldr	r0, [pc, #336]	; (8003084 <FuncMenu_DrawSignalMenu+0x30c>)
 8002f34:	f00a fd56 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	2302      	movs	r3, #2
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2300      	movs	r3, #0
 8002f44:	2282      	movs	r2, #130	; 0x82
 8002f46:	210a      	movs	r1, #10
 8002f48:	484f      	ldr	r0, [pc, #316]	; (8003088 <FuncMenu_DrawSignalMenu+0x310>)
 8002f4a:	f00a fd4b 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	2302      	movs	r3, #2
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2296      	movs	r2, #150	; 0x96
 8002f5c:	210a      	movs	r1, #10
 8002f5e:	484b      	ldr	r0, [pc, #300]	; (800308c <FuncMenu_DrawSignalMenu+0x314>)
 8002f60:	f00a fd40 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8002f64:	e0d7      	b.n	8003116 <FuncMenu_DrawSignalMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2300      	movs	r3, #0
 8002f72:	2232      	movs	r2, #50	; 0x32
 8002f74:	210a      	movs	r1, #10
 8002f76:	4840      	ldr	r0, [pc, #256]	; (8003078 <FuncMenu_DrawSignalMenu+0x300>)
 8002f78:	f00a fd34 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2302      	movs	r3, #2
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2300      	movs	r3, #0
 8002f88:	2246      	movs	r2, #70	; 0x46
 8002f8a:	210a      	movs	r1, #10
 8002f8c:	483b      	ldr	r0, [pc, #236]	; (800307c <FuncMenu_DrawSignalMenu+0x304>)
 8002f8e:	f00a fd29 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2302      	movs	r3, #2
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	225a      	movs	r2, #90	; 0x5a
 8002fa0:	210a      	movs	r1, #10
 8002fa2:	4837      	ldr	r0, [pc, #220]	; (8003080 <FuncMenu_DrawSignalMenu+0x308>)
 8002fa4:	f00a fd1e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8002fa8:	2300      	movs	r3, #0
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	2302      	movs	r3, #2
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb4:	226e      	movs	r2, #110	; 0x6e
 8002fb6:	210a      	movs	r1, #10
 8002fb8:	4832      	ldr	r0, [pc, #200]	; (8003084 <FuncMenu_DrawSignalMenu+0x30c>)
 8002fba:	f00a fd13 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2282      	movs	r2, #130	; 0x82
 8002fcc:	210a      	movs	r1, #10
 8002fce:	482e      	ldr	r0, [pc, #184]	; (8003088 <FuncMenu_DrawSignalMenu+0x310>)
 8002fd0:	f00a fd08 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	2302      	movs	r3, #2
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2296      	movs	r2, #150	; 0x96
 8002fe2:	210a      	movs	r1, #10
 8002fe4:	4829      	ldr	r0, [pc, #164]	; (800308c <FuncMenu_DrawSignalMenu+0x314>)
 8002fe6:	f00a fcfd 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8002fea:	e094      	b.n	8003116 <FuncMenu_DrawSignalMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2232      	movs	r2, #50	; 0x32
 8002ffa:	210a      	movs	r1, #10
 8002ffc:	481e      	ldr	r0, [pc, #120]	; (8003078 <FuncMenu_DrawSignalMenu+0x300>)
 8002ffe:	f00a fcf1 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8003002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	2302      	movs	r3, #2
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2300      	movs	r3, #0
 800300e:	2246      	movs	r2, #70	; 0x46
 8003010:	210a      	movs	r1, #10
 8003012:	481a      	ldr	r0, [pc, #104]	; (800307c <FuncMenu_DrawSignalMenu+0x304>)
 8003014:	f00a fce6 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8003018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	2302      	movs	r3, #2
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2300      	movs	r3, #0
 8003024:	225a      	movs	r2, #90	; 0x5a
 8003026:	210a      	movs	r1, #10
 8003028:	4815      	ldr	r0, [pc, #84]	; (8003080 <FuncMenu_DrawSignalMenu+0x308>)
 800302a:	f00a fcdb 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800302e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	2302      	movs	r3, #2
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2300      	movs	r3, #0
 800303a:	226e      	movs	r2, #110	; 0x6e
 800303c:	210a      	movs	r1, #10
 800303e:	4811      	ldr	r0, [pc, #68]	; (8003084 <FuncMenu_DrawSignalMenu+0x30c>)
 8003040:	f00a fcd0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8003044:	2300      	movs	r3, #0
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2302      	movs	r3, #2
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003050:	2282      	movs	r2, #130	; 0x82
 8003052:	210a      	movs	r1, #10
 8003054:	480c      	ldr	r0, [pc, #48]	; (8003088 <FuncMenu_DrawSignalMenu+0x310>)
 8003056:	f00a fcc5 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800305a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	2302      	movs	r3, #2
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	2296      	movs	r2, #150	; 0x96
 8003068:	210a      	movs	r1, #10
 800306a:	4808      	ldr	r0, [pc, #32]	; (800308c <FuncMenu_DrawSignalMenu+0x314>)
 800306c:	f00a fcba 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8003070:	e051      	b.n	8003116 <FuncMenu_DrawSignalMenu+0x39e>
 8003072:	bf00      	nop
 8003074:	080112b8 	.word	0x080112b8
 8003078:	080112c8 	.word	0x080112c8
 800307c:	080112d0 	.word	0x080112d0
 8003080:	080112dc 	.word	0x080112dc
 8003084:	080112e4 	.word	0x080112e4
 8003088:	080112f0 	.word	0x080112f0
 800308c:	080112fc 	.word	0x080112fc
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2302      	movs	r3, #2
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	2232      	movs	r2, #50	; 0x32
 800309e:	210a      	movs	r1, #10
 80030a0:	481f      	ldr	r0, [pc, #124]	; (8003120 <FuncMenu_DrawSignalMenu+0x3a8>)
 80030a2:	f00a fc9f 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80030a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	2246      	movs	r2, #70	; 0x46
 80030b4:	210a      	movs	r1, #10
 80030b6:	481b      	ldr	r0, [pc, #108]	; (8003124 <FuncMenu_DrawSignalMenu+0x3ac>)
 80030b8:	f00a fc94 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80030bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	2302      	movs	r3, #2
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2300      	movs	r3, #0
 80030c8:	225a      	movs	r2, #90	; 0x5a
 80030ca:	210a      	movs	r1, #10
 80030cc:	4816      	ldr	r0, [pc, #88]	; (8003128 <FuncMenu_DrawSignalMenu+0x3b0>)
 80030ce:	f00a fc89 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80030d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	2302      	movs	r3, #2
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	226e      	movs	r2, #110	; 0x6e
 80030e0:	210a      	movs	r1, #10
 80030e2:	4812      	ldr	r0, [pc, #72]	; (800312c <FuncMenu_DrawSignalMenu+0x3b4>)
 80030e4:	f00a fc7e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80030e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	2302      	movs	r3, #2
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2300      	movs	r3, #0
 80030f4:	2282      	movs	r2, #130	; 0x82
 80030f6:	210a      	movs	r1, #10
 80030f8:	480d      	ldr	r0, [pc, #52]	; (8003130 <FuncMenu_DrawSignalMenu+0x3b8>)
 80030fa:	f00a fc73 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 80030fe:	2300      	movs	r3, #0
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2302      	movs	r3, #2
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800310a:	2296      	movs	r2, #150	; 0x96
 800310c:	210a      	movs	r1, #10
 800310e:	4809      	ldr	r0, [pc, #36]	; (8003134 <FuncMenu_DrawSignalMenu+0x3bc>)
 8003110:	f00a fc68 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8003114:	bf00      	nop

		}
	}


}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	080112c8 	.word	0x080112c8
 8003124:	080112d0 	.word	0x080112d0
 8003128:	080112dc 	.word	0x080112dc
 800312c:	080112e4 	.word	0x080112e4
 8003130:	080112f0 	.word	0x080112f0
 8003134:	080112fc 	.word	0x080112fc

08003138 <FuncMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSyncMenu()
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, WHITE, 2, BLACK);
 800313e:	2300      	movs	r3, #0
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	2302      	movs	r3, #2
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800314a:	220a      	movs	r2, #10
 800314c:	210a      	movs	r1, #10
 800314e:	48b9      	ldr	r0, [pc, #740]	; (8003434 <FuncMenu_DrawSyncMenu+0x2fc>)
 8003150:	f00a fc48 	bl	800d9e4 <ILI9341_Draw_Text>
	//FunctionProfile_t *func_profileTmp = FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8003154:	2001      	movs	r0, #1
 8003156:	f002 fa0f 	bl	8005578 <SM_GetOutputChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003160:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 81b6 	beq.w	80034d6 <FuncMenu_DrawSyncMenu+0x39e>
	{
		switch(func_profileTmp->func)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b05      	cmp	r3, #5
 8003170:	f200 81b1 	bhi.w	80034d6 <FuncMenu_DrawSyncMenu+0x39e>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <FuncMenu_DrawSyncMenu+0x44>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	08003195 	.word	0x08003195
 8003180:	0800321b 	.word	0x0800321b
 8003184:	080032a1 	.word	0x080032a1
 8003188:	08003327 	.word	0x08003327
 800318c:	080033ad 	.word	0x080033ad
 8003190:	08003451 	.word	0x08003451
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8003194:	2300      	movs	r3, #0
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	2302      	movs	r3, #2
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a0:	2232      	movs	r2, #50	; 0x32
 80031a2:	210a      	movs	r1, #10
 80031a4:	48a4      	ldr	r0, [pc, #656]	; (8003438 <FuncMenu_DrawSyncMenu+0x300>)
 80031a6:	f00a fc1d 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80031aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	2302      	movs	r3, #2
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2300      	movs	r3, #0
 80031b6:	2246      	movs	r2, #70	; 0x46
 80031b8:	210a      	movs	r1, #10
 80031ba:	48a0      	ldr	r0, [pc, #640]	; (800343c <FuncMenu_DrawSyncMenu+0x304>)
 80031bc:	f00a fc12 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80031c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	2302      	movs	r3, #2
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2300      	movs	r3, #0
 80031cc:	225a      	movs	r2, #90	; 0x5a
 80031ce:	210a      	movs	r1, #10
 80031d0:	489b      	ldr	r0, [pc, #620]	; (8003440 <FuncMenu_DrawSyncMenu+0x308>)
 80031d2:	f00a fc07 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80031d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	2302      	movs	r3, #2
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2300      	movs	r3, #0
 80031e2:	226e      	movs	r2, #110	; 0x6e
 80031e4:	210a      	movs	r1, #10
 80031e6:	4897      	ldr	r0, [pc, #604]	; (8003444 <FuncMenu_DrawSyncMenu+0x30c>)
 80031e8:	f00a fbfc 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80031ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	2302      	movs	r3, #2
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	2282      	movs	r2, #130	; 0x82
 80031fa:	210a      	movs	r1, #10
 80031fc:	4892      	ldr	r0, [pc, #584]	; (8003448 <FuncMenu_DrawSyncMenu+0x310>)
 80031fe:	f00a fbf1 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	2302      	movs	r3, #2
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	2296      	movs	r2, #150	; 0x96
 8003210:	210a      	movs	r1, #10
 8003212:	488e      	ldr	r0, [pc, #568]	; (800344c <FuncMenu_DrawSyncMenu+0x314>)
 8003214:	f00a fbe6 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8003218:	e15d      	b.n	80034d6 <FuncMenu_DrawSyncMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800321a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	2302      	movs	r3, #2
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	2232      	movs	r2, #50	; 0x32
 8003228:	210a      	movs	r1, #10
 800322a:	4883      	ldr	r0, [pc, #524]	; (8003438 <FuncMenu_DrawSyncMenu+0x300>)
 800322c:	f00a fbda 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8003230:	2300      	movs	r3, #0
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	2302      	movs	r3, #2
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800323c:	2246      	movs	r2, #70	; 0x46
 800323e:	210a      	movs	r1, #10
 8003240:	487e      	ldr	r0, [pc, #504]	; (800343c <FuncMenu_DrawSyncMenu+0x304>)
 8003242:	f00a fbcf 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8003246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	2302      	movs	r3, #2
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	225a      	movs	r2, #90	; 0x5a
 8003254:	210a      	movs	r1, #10
 8003256:	487a      	ldr	r0, [pc, #488]	; (8003440 <FuncMenu_DrawSyncMenu+0x308>)
 8003258:	f00a fbc4 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800325c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	2302      	movs	r3, #2
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2300      	movs	r3, #0
 8003268:	226e      	movs	r2, #110	; 0x6e
 800326a:	210a      	movs	r1, #10
 800326c:	4875      	ldr	r0, [pc, #468]	; (8003444 <FuncMenu_DrawSyncMenu+0x30c>)
 800326e:	f00a fbb9 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8003272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	2302      	movs	r3, #2
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2300      	movs	r3, #0
 800327e:	2282      	movs	r2, #130	; 0x82
 8003280:	210a      	movs	r1, #10
 8003282:	4871      	ldr	r0, [pc, #452]	; (8003448 <FuncMenu_DrawSyncMenu+0x310>)
 8003284:	f00a fbae 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	2302      	movs	r3, #2
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2300      	movs	r3, #0
 8003294:	2296      	movs	r2, #150	; 0x96
 8003296:	210a      	movs	r1, #10
 8003298:	486c      	ldr	r0, [pc, #432]	; (800344c <FuncMenu_DrawSyncMenu+0x314>)
 800329a:	f00a fba3 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 800329e:	e11a      	b.n	80034d6 <FuncMenu_DrawSyncMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80032a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	2302      	movs	r3, #2
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	2232      	movs	r2, #50	; 0x32
 80032ae:	210a      	movs	r1, #10
 80032b0:	4861      	ldr	r0, [pc, #388]	; (8003438 <FuncMenu_DrawSyncMenu+0x300>)
 80032b2:	f00a fb97 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80032b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	2302      	movs	r3, #2
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2300      	movs	r3, #0
 80032c2:	2246      	movs	r2, #70	; 0x46
 80032c4:	210a      	movs	r1, #10
 80032c6:	485d      	ldr	r0, [pc, #372]	; (800343c <FuncMenu_DrawSyncMenu+0x304>)
 80032c8:	f00a fb8c 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 80032cc:	2300      	movs	r3, #0
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	2302      	movs	r3, #2
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d8:	225a      	movs	r2, #90	; 0x5a
 80032da:	210a      	movs	r1, #10
 80032dc:	4858      	ldr	r0, [pc, #352]	; (8003440 <FuncMenu_DrawSyncMenu+0x308>)
 80032de:	f00a fb81 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80032e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2302      	movs	r3, #2
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	226e      	movs	r2, #110	; 0x6e
 80032f0:	210a      	movs	r1, #10
 80032f2:	4854      	ldr	r0, [pc, #336]	; (8003444 <FuncMenu_DrawSyncMenu+0x30c>)
 80032f4:	f00a fb76 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80032f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2302      	movs	r3, #2
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	2282      	movs	r2, #130	; 0x82
 8003306:	210a      	movs	r1, #10
 8003308:	484f      	ldr	r0, [pc, #316]	; (8003448 <FuncMenu_DrawSyncMenu+0x310>)
 800330a:	f00a fb6b 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800330e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2302      	movs	r3, #2
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	2296      	movs	r2, #150	; 0x96
 800331c:	210a      	movs	r1, #10
 800331e:	484b      	ldr	r0, [pc, #300]	; (800344c <FuncMenu_DrawSyncMenu+0x314>)
 8003320:	f00a fb60 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8003324:	e0d7      	b.n	80034d6 <FuncMenu_DrawSyncMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	2302      	movs	r3, #2
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	2232      	movs	r2, #50	; 0x32
 8003334:	210a      	movs	r1, #10
 8003336:	4840      	ldr	r0, [pc, #256]	; (8003438 <FuncMenu_DrawSyncMenu+0x300>)
 8003338:	f00a fb54 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800333c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2302      	movs	r3, #2
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2300      	movs	r3, #0
 8003348:	2246      	movs	r2, #70	; 0x46
 800334a:	210a      	movs	r1, #10
 800334c:	483b      	ldr	r0, [pc, #236]	; (800343c <FuncMenu_DrawSyncMenu+0x304>)
 800334e:	f00a fb49 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8003352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	2302      	movs	r3, #2
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2300      	movs	r3, #0
 800335e:	225a      	movs	r2, #90	; 0x5a
 8003360:	210a      	movs	r1, #10
 8003362:	4837      	ldr	r0, [pc, #220]	; (8003440 <FuncMenu_DrawSyncMenu+0x308>)
 8003364:	f00a fb3e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8003368:	2300      	movs	r3, #0
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003374:	226e      	movs	r2, #110	; 0x6e
 8003376:	210a      	movs	r1, #10
 8003378:	4832      	ldr	r0, [pc, #200]	; (8003444 <FuncMenu_DrawSyncMenu+0x30c>)
 800337a:	f00a fb33 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800337e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	2302      	movs	r3, #2
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	2282      	movs	r2, #130	; 0x82
 800338c:	210a      	movs	r1, #10
 800338e:	482e      	ldr	r0, [pc, #184]	; (8003448 <FuncMenu_DrawSyncMenu+0x310>)
 8003390:	f00a fb28 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	2302      	movs	r3, #2
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	2300      	movs	r3, #0
 80033a0:	2296      	movs	r2, #150	; 0x96
 80033a2:	210a      	movs	r1, #10
 80033a4:	4829      	ldr	r0, [pc, #164]	; (800344c <FuncMenu_DrawSyncMenu+0x314>)
 80033a6:	f00a fb1d 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 80033aa:	e094      	b.n	80034d6 <FuncMenu_DrawSyncMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80033ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	2302      	movs	r3, #2
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	2300      	movs	r3, #0
 80033b8:	2232      	movs	r2, #50	; 0x32
 80033ba:	210a      	movs	r1, #10
 80033bc:	481e      	ldr	r0, [pc, #120]	; (8003438 <FuncMenu_DrawSyncMenu+0x300>)
 80033be:	f00a fb11 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80033c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2302      	movs	r3, #2
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2300      	movs	r3, #0
 80033ce:	2246      	movs	r2, #70	; 0x46
 80033d0:	210a      	movs	r1, #10
 80033d2:	481a      	ldr	r0, [pc, #104]	; (800343c <FuncMenu_DrawSyncMenu+0x304>)
 80033d4:	f00a fb06 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80033d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	2302      	movs	r3, #2
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	2300      	movs	r3, #0
 80033e4:	225a      	movs	r2, #90	; 0x5a
 80033e6:	210a      	movs	r1, #10
 80033e8:	4815      	ldr	r0, [pc, #84]	; (8003440 <FuncMenu_DrawSyncMenu+0x308>)
 80033ea:	f00a fafb 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80033ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	2302      	movs	r3, #2
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	226e      	movs	r2, #110	; 0x6e
 80033fc:	210a      	movs	r1, #10
 80033fe:	4811      	ldr	r0, [pc, #68]	; (8003444 <FuncMenu_DrawSyncMenu+0x30c>)
 8003400:	f00a faf0 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8003404:	2300      	movs	r3, #0
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	2302      	movs	r3, #2
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003410:	2282      	movs	r2, #130	; 0x82
 8003412:	210a      	movs	r1, #10
 8003414:	480c      	ldr	r0, [pc, #48]	; (8003448 <FuncMenu_DrawSyncMenu+0x310>)
 8003416:	f00a fae5 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800341a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2302      	movs	r3, #2
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	2296      	movs	r2, #150	; 0x96
 8003428:	210a      	movs	r1, #10
 800342a:	4808      	ldr	r0, [pc, #32]	; (800344c <FuncMenu_DrawSyncMenu+0x314>)
 800342c:	f00a fada 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 8003430:	e051      	b.n	80034d6 <FuncMenu_DrawSyncMenu+0x39e>
 8003432:	bf00      	nop
 8003434:	08011304 	.word	0x08011304
 8003438:	080112c8 	.word	0x080112c8
 800343c:	080112d0 	.word	0x080112d0
 8003440:	080112dc 	.word	0x080112dc
 8003444:	080112e4 	.word	0x080112e4
 8003448:	080112f0 	.word	0x080112f0
 800344c:	080112fc 	.word	0x080112fc
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	2302      	movs	r3, #2
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	2232      	movs	r2, #50	; 0x32
 800345e:	210a      	movs	r1, #10
 8003460:	481f      	ldr	r0, [pc, #124]	; (80034e0 <FuncMenu_DrawSyncMenu+0x3a8>)
 8003462:	f00a fabf 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8003466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	2302      	movs	r3, #2
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2300      	movs	r3, #0
 8003472:	2246      	movs	r2, #70	; 0x46
 8003474:	210a      	movs	r1, #10
 8003476:	481b      	ldr	r0, [pc, #108]	; (80034e4 <FuncMenu_DrawSyncMenu+0x3ac>)
 8003478:	f00a fab4 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800347c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	2302      	movs	r3, #2
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	225a      	movs	r2, #90	; 0x5a
 800348a:	210a      	movs	r1, #10
 800348c:	4816      	ldr	r0, [pc, #88]	; (80034e8 <FuncMenu_DrawSyncMenu+0x3b0>)
 800348e:	f00a faa9 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	2302      	movs	r3, #2
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2300      	movs	r3, #0
 800349e:	226e      	movs	r2, #110	; 0x6e
 80034a0:	210a      	movs	r1, #10
 80034a2:	4812      	ldr	r0, [pc, #72]	; (80034ec <FuncMenu_DrawSyncMenu+0x3b4>)
 80034a4:	f00a fa9e 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80034a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2302      	movs	r3, #2
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2300      	movs	r3, #0
 80034b4:	2282      	movs	r2, #130	; 0x82
 80034b6:	210a      	movs	r1, #10
 80034b8:	480d      	ldr	r0, [pc, #52]	; (80034f0 <FuncMenu_DrawSyncMenu+0x3b8>)
 80034ba:	f00a fa93 	bl	800d9e4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 80034be:	2300      	movs	r3, #0
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	2302      	movs	r3, #2
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ca:	2296      	movs	r2, #150	; 0x96
 80034cc:	210a      	movs	r1, #10
 80034ce:	4809      	ldr	r0, [pc, #36]	; (80034f4 <FuncMenu_DrawSyncMenu+0x3bc>)
 80034d0:	f00a fa88 	bl	800d9e4 <ILI9341_Draw_Text>
				break;
 80034d4:	bf00      	nop

		}
	}

}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	080112c8 	.word	0x080112c8
 80034e4:	080112d0 	.word	0x080112d0
 80034e8:	080112dc 	.word	0x080112dc
 80034ec:	080112e4 	.word	0x080112e4
 80034f0:	080112f0 	.word	0x080112f0
 80034f4:	080112fc 	.word	0x080112fc

080034f8 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d007      	beq.n	8003518 <GainMenu_DrawMenu+0x20>
 8003508:	2b03      	cmp	r3, #3
 800350a:	d008      	beq.n	800351e <GainMenu_DrawMenu+0x26>
 800350c:	2b01      	cmp	r3, #1
 800350e:	d000      	beq.n	8003512 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003510:	e008      	b.n	8003524 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003512:	f000 f80b 	bl	800352c <GainMenu_DrawMainMenu>
			break;
 8003516:	e005      	b.n	8003524 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003518:	f000 f850 	bl	80035bc <GainMenu_DrawSignalMenu>
			break;
 800351c:	e002      	b.n	8003524 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 800351e:	f000 f863 	bl	80035e8 <GainMenu_DrawSyncMenu>
			break;
 8003522:	bf00      	nop

	}
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, WHITE, 2, BLACK);
 8003532:	2300      	movs	r3, #0
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	2302      	movs	r3, #2
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800353e:	220a      	movs	r2, #10
 8003540:	210a      	movs	r1, #10
 8003542:	481a      	ldr	r0, [pc, #104]	; (80035ac <GainMenu_DrawMainMenu+0x80>)
 8003544:	f00a fa4e 	bl	800d9e4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003548:	f7fd fcac 	bl	8000ea4 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 210, BLACK, 2, DARKCYAN);
 800354c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	2302      	movs	r3, #2
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2300      	movs	r3, #0
 8003558:	22d2      	movs	r2, #210	; 0xd2
 800355a:	2105      	movs	r1, #5
 800355c:	4814      	ldr	r0, [pc, #80]	; (80035b0 <GainMenu_DrawMainMenu+0x84>)
 800355e:	f00a fa41 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",97, 210, BLACK, 2, DARKGREEN);
 8003562:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	2302      	movs	r3, #2
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2300      	movs	r3, #0
 800356e:	22d2      	movs	r2, #210	; 0xd2
 8003570:	2161      	movs	r1, #97	; 0x61
 8003572:	4810      	ldr	r0, [pc, #64]	; (80035b4 <GainMenu_DrawMainMenu+0x88>)
 8003574:	f00a fa36 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8003578:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	2302      	movs	r3, #2
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	22d2      	movs	r2, #210	; 0xd2
 8003586:	21af      	movs	r1, #175	; 0xaf
 8003588:	480b      	ldr	r0, [pc, #44]	; (80035b8 <GainMenu_DrawMainMenu+0x8c>)
 800358a:	f00a fa2b 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 800358e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	2302      	movs	r3, #2
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2300      	movs	r3, #0
 800359a:	22d2      	movs	r2, #210	; 0xd2
 800359c:	f44f 7182 	mov.w	r1, #260	; 0x104
 80035a0:	4805      	ldr	r0, [pc, #20]	; (80035b8 <GainMenu_DrawMainMenu+0x8c>)
 80035a2:	f00a fa1f 	bl	800d9e4 <ILI9341_Draw_Text>
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	08011314 	.word	0x08011314
 80035b0:	08011320 	.word	0x08011320
 80035b4:	08011328 	.word	0x08011328
 80035b8:	08011330 	.word	0x08011330

080035bc <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, WHITE, 2, BLACK);
 80035c2:	2300      	movs	r3, #0
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	2302      	movs	r3, #2
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ce:	220a      	movs	r2, #10
 80035d0:	210a      	movs	r1, #10
 80035d2:	4804      	ldr	r0, [pc, #16]	; (80035e4 <GainMenu_DrawSignalMenu+0x28>)
 80035d4:	f00a fa06 	bl	800d9e4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80035d8:	f7fd fc64 	bl	8000ea4 <DM_DisplayFormattedOutput>
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	08011338 	.word	0x08011338

080035e8 <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, WHITE, 2, BLACK);
 80035ee:	2300      	movs	r3, #0
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	2302      	movs	r3, #2
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035fa:	220a      	movs	r2, #10
 80035fc:	210a      	movs	r1, #10
 80035fe:	4804      	ldr	r0, [pc, #16]	; (8003610 <GainMenu_DrawSyncMenu+0x28>)
 8003600:	f00a f9f0 	bl	800d9e4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003604:	f7fd fc4e 	bl	8000ea4 <DM_DisplayFormattedOutput>
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	08011348 	.word	0x08011348

08003614 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d007      	beq.n	8003634 <ToplevelMenu_DrawMenu+0x20>
 8003624:	2b03      	cmp	r3, #3
 8003626:	d008      	beq.n	800363a <ToplevelMenu_DrawMenu+0x26>
 8003628:	2b01      	cmp	r3, #1
 800362a:	d000      	beq.n	800362e <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 800362c:	e008      	b.n	8003640 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 800362e:	f000 f80b 	bl	8003648 <ToplevelMenu_DrawMainMenu>
			break;
 8003632:	e005      	b.n	8003640 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003634:	f000 f848 	bl	80036c8 <ToplevelMenu_DrawOutputMenu>
			break;
 8003638:	e002      	b.n	8003640 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 800363a:	f000 f88f 	bl	800375c <ToplevelMenu_DrawInputMenu>
			break;
 800363e:	bf00      	nop

	}
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 800364e:	481a      	ldr	r0, [pc, #104]	; (80036b8 <ToplevelMenu_DrawMainMenu+0x70>)
 8003650:	f00b fd0c 	bl	800f06c <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003654:	f7fd fc26 	bl	8000ea4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BLACK, 2, DARKCYAN);
 8003658:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	2302      	movs	r3, #2
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2300      	movs	r3, #0
 8003664:	22d2      	movs	r2, #210	; 0xd2
 8003666:	2106      	movs	r1, #6
 8003668:	4814      	ldr	r0, [pc, #80]	; (80036bc <ToplevelMenu_DrawMainMenu+0x74>)
 800366a:	f00a f9bb 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 95, 210, BLACK, 2, DARKGREEN);
 800366e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	2302      	movs	r3, #2
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2300      	movs	r3, #0
 800367a:	22d2      	movs	r2, #210	; 0xd2
 800367c:	215f      	movs	r1, #95	; 0x5f
 800367e:	4810      	ldr	r0, [pc, #64]	; (80036c0 <ToplevelMenu_DrawMainMenu+0x78>)
 8003680:	f00a f9b0 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8003684:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	2302      	movs	r3, #2
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2300      	movs	r3, #0
 8003690:	22d2      	movs	r2, #210	; 0xd2
 8003692:	21af      	movs	r1, #175	; 0xaf
 8003694:	480b      	ldr	r0, [pc, #44]	; (80036c4 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003696:	f00a f9a5 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 800369a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	2302      	movs	r3, #2
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2300      	movs	r3, #0
 80036a6:	22d2      	movs	r2, #210	; 0xd2
 80036a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80036ac:	4805      	ldr	r0, [pc, #20]	; (80036c4 <ToplevelMenu_DrawMainMenu+0x7c>)
 80036ae:	f00a f999 	bl	800d9e4 <ILI9341_Draw_Text>


}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	08011358 	.word	0x08011358
 80036bc:	0801136c 	.word	0x0801136c
 80036c0:	08011374 	.word	0x08011374
 80036c4:	0801137c 	.word	0x0801137c

080036c8 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, WHITE, 2, BLACK);
 80036ce:	2300      	movs	r3, #0
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	2302      	movs	r3, #2
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036da:	220a      	movs	r2, #10
 80036dc:	210a      	movs	r1, #10
 80036de:	481a      	ldr	r0, [pc, #104]	; (8003748 <ToplevelMenu_DrawOutputMenu+0x80>)
 80036e0:	f00a f980 	bl	800d9e4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80036e4:	f7fd fbde 	bl	8000ea4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13, 210, BLACK, 2, DARKCYAN);
 80036e8:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	2302      	movs	r3, #2
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2300      	movs	r3, #0
 80036f4:	22d2      	movs	r2, #210	; 0xd2
 80036f6:	210d      	movs	r1, #13
 80036f8:	4814      	ldr	r0, [pc, #80]	; (800374c <ToplevelMenu_DrawOutputMenu+0x84>)
 80036fa:	f00a f973 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99, 210, BLACK, 2, DARKGREEN);
 80036fe:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	2302      	movs	r3, #2
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	22d2      	movs	r2, #210	; 0xd2
 800370c:	2163      	movs	r1, #99	; 0x63
 800370e:	4810      	ldr	r0, [pc, #64]	; (8003750 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003710:	f00a f968 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BLACK, 2, YELLOW);
 8003714:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	2302      	movs	r3, #2
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	22d2      	movs	r2, #210	; 0xd2
 8003722:	21b0      	movs	r1, #176	; 0xb0
 8003724:	480b      	ldr	r0, [pc, #44]	; (8003754 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003726:	f00a f95d 	bl	800d9e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 259, 210, BLACK, 2, RED);
 800372a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2302      	movs	r3, #2
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	22d2      	movs	r2, #210	; 0xd2
 8003738:	f240 1103 	movw	r1, #259	; 0x103
 800373c:	4806      	ldr	r0, [pc, #24]	; (8003758 <ToplevelMenu_DrawOutputMenu+0x90>)
 800373e:	f00a f951 	bl	800d9e4 <ILI9341_Draw_Text>
}
 8003742:	bf00      	nop
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	08011384 	.word	0x08011384
 800374c:	0801138c 	.word	0x0801138c
 8003750:	08011394 	.word	0x08011394
 8003754:	0801139c 	.word	0x0801139c
 8003758:	080113a4 	.word	0x080113a4

0800375c <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, WHITE, 2, BLACK);
 8003762:	2300      	movs	r3, #0
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	2302      	movs	r3, #2
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800376e:	220a      	movs	r2, #10
 8003770:	210a      	movs	r1, #10
 8003772:	4804      	ldr	r0, [pc, #16]	; (8003784 <ToplevelMenu_DrawInputMenu+0x28>)
 8003774:	f00a f936 	bl	800d9e4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003778:	f7fd fb94 	bl	8000ea4 <DM_DisplayFormattedOutput>
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	080113ac 	.word	0x080113ac

08003788 <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <BiasMenu_getStatus+0x14>)
 800378e:	781b      	ldrb	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20001f15 	.word	0x20001f15

080037a0 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 80037a4:	480b      	ldr	r0, [pc, #44]	; (80037d4 <BiasMenuEntryHandler+0x34>)
 80037a6:	f00b fc61 	bl	800f06c <puts>
#endif

	DM_RefreshScreen();
 80037aa:	f7fd fced 	bl	8001188 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <BiasMenuEntryHandler+0x38>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <BiasMenuEntryHandler+0x3c>)
 80037b6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80037bc:	f001 f952 	bl	8004a64 <BO_GetDcBiasEncoderValue>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <BiasMenuEntryHandler+0x3c>)
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <BiasMenuEntryHandler+0x40>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80037ce:	230e      	movs	r3, #14
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	080113b4 	.word	0x080113b4
 80037d8:	20001f15 	.word	0x20001f15
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	20001f17 	.word	0x20001f17

080037e4 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 80037e8:	4807      	ldr	r0, [pc, #28]	; (8003808 <BiasMenuInputHandler+0x24>)
 80037ea:	f00b fc3f 	bl	800f06c <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80037ee:	2001      	movs	r0, #1
 80037f0:	f001 fed8 	bl	80055a4 <SM_GetEncoderValue>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 f940 	bl	8004a7c <BO_ModifyOutput>

	eNewEvent = evIdle;
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <BiasMenuInputHandler+0x28>)
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003802:	230e      	movs	r3, #14
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	080113d8 	.word	0x080113d8
 800380c:	20001f17 	.word	0x20001f17

08003810 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 8003814:	4808      	ldr	r0, [pc, #32]	; (8003838 <BiasMenuExitHandler+0x28>)
 8003816:	f00b fc29 	bl	800f06c <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <BiasMenuExitHandler+0x2c>)
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003820:	f7fd fcb2 	bl	8001188 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003824:	4806      	ldr	r0, [pc, #24]	; (8003840 <BiasMenuExitHandler+0x30>)
 8003826:	f00b fc21 	bl	800f06c <puts>
#endif

	eNewEvent = evIdle;
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <BiasMenuExitHandler+0x34>)
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003830:	2301      	movs	r3, #1
}
 8003832:	4618      	mov	r0, r3
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	080113fc 	.word	0x080113fc
 800383c:	20001f15 	.word	0x20001f15
 8003840:	08011420 	.word	0x08011420
 8003844:	20001f17 	.word	0x20001f17

08003848 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0

	switch(eNextState)
 800384c:	4bb8      	ldr	r3, [pc, #736]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b0e      	cmp	r3, #14
 8003852:	f200 8216 	bhi.w	8003c82 <EM_ProcessEvent+0x43a>
 8003856:	a201      	add	r2, pc, #4	; (adr r2, 800385c <EM_ProcessEvent+0x14>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	08003899 	.word	0x08003899
 8003860:	080038cb 	.word	0x080038cb
 8003864:	08003951 	.word	0x08003951
 8003868:	0800396f 	.word	0x0800396f
 800386c:	080039bb 	.word	0x080039bb
 8003870:	080039ed 	.word	0x080039ed
 8003874:	08003a1f 	.word	0x08003a1f
 8003878:	08003a6b 	.word	0x08003a6b
 800387c:	08003a9d 	.word	0x08003a9d
 8003880:	08003c83 	.word	0x08003c83
 8003884:	08003acf 	.word	0x08003acf
 8003888:	08003b61 	.word	0x08003b61
 800388c:	08003b93 	.word	0x08003b93
 8003890:	08003bc3 	.word	0x08003bc3
 8003894:	08003c4d 	.word	0x08003c4d
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003898:	48a6      	ldr	r0, [pc, #664]	; (8003b34 <EM_ProcessEvent+0x2ec>)
 800389a:	f00b fbe7 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 800389e:	4ba6      	ldr	r3, [pc, #664]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 80038a6:	f000 ff1d 	bl	80046e4 <ToplevelOutputMenuEntryHandler>
 80038aa:	4603      	mov	r3, r0
 80038ac:	461a      	mov	r2, r3
 80038ae:	4ba0      	ldr	r3, [pc, #640]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 80038b0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80038b2:	4ba1      	ldr	r3, [pc, #644]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	f040 81e5 	bne.w	8003c86 <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 80038bc:	f000 ff3e 	bl	800473c <ToplevelInputMenuEntryHandler>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b9a      	ldr	r3, [pc, #616]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 80038c6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 80038c8:	e1dd      	b.n	8003c86 <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 80038ca:	489c      	ldr	r0, [pc, #624]	; (8003b3c <EM_ProcessEvent+0x2f4>)
 80038cc:	f00b fbce 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80038d0:	4b99      	ldr	r3, [pc, #612]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b06      	cmp	r3, #6
 80038d6:	d105      	bne.n	80038e4 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 80038d8:	f000 ff1a 	bl	8004710 <ToplevelOutputMenuExitHandler>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	4b93      	ldr	r3, [pc, #588]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 80038e2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 80038e4:	4b94      	ldr	r3, [pc, #592]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d108      	bne.n	80038fe <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f000 fee9 	bl	80046c4 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 80038f2:	f000 fce7 	bl	80042c4 <FuncMainMenuEntryHandler>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b8d      	ldr	r3, [pc, #564]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 80038fc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80038fe:	4b8e      	ldr	r3, [pc, #568]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d108      	bne.n	8003918 <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003906:	2000      	movs	r0, #0
 8003908:	f000 fedc 	bl	80046c4 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 800390c:	f000 fa00 	bl	8003d10 <FreqMainMenuEntryHandler>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	4b86      	ldr	r3, [pc, #536]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003916:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003918:	4b87      	ldr	r3, [pc, #540]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d108      	bne.n	8003932 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003920:	2000      	movs	r0, #0
 8003922:	f000 fecf 	bl	80046c4 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003926:	f000 fdcf 	bl	80044c8 <GainMainMenuEntryHandler>
 800392a:	4603      	mov	r3, r0
 800392c:	461a      	mov	r2, r3
 800392e:	4b80      	ldr	r3, [pc, #512]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003930:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003932:	4b81      	ldr	r3, [pc, #516]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b04      	cmp	r3, #4
 8003938:	f040 81a7 	bne.w	8003c8a <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800393c:	2000      	movs	r0, #0
 800393e:	f000 fec1 	bl	80046c4 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003942:	f7ff ff2d 	bl	80037a0 <BiasMenuEntryHandler>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	4b79      	ldr	r3, [pc, #484]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 800394c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800394e:	e19c      	b.n	8003c8a <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003950:	487b      	ldr	r0, [pc, #492]	; (8003b40 <EM_ProcessEvent+0x2f8>)
 8003952:	f00b fb8b 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003956:	4b78      	ldr	r3, [pc, #480]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b06      	cmp	r3, #6
 800395c:	f040 8197 	bne.w	8003c8e <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003960:	f000 ff02 	bl	8004768 <ToplevelInputMenuExitHandler>
 8003964:	4603      	mov	r3, r0
 8003966:	461a      	mov	r2, r3
 8003968:	4b71      	ldr	r3, [pc, #452]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 800396a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 800396c:	e18f      	b.n	8003c8e <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 800396e:	4875      	ldr	r0, [pc, #468]	; (8003b44 <EM_ProcessEvent+0x2fc>)
 8003970:	f00b fb7c 	bl	800f06c <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003974:	4b70      	ldr	r3, [pc, #448]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b06      	cmp	r3, #6
 800397a:	d108      	bne.n	800398e <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 800397c:	f000 fcb8 	bl	80042f0 <FuncMainMenuExitHandler>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003986:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003988:	2002      	movs	r0, #2
 800398a:	f000 fe9b 	bl	80046c4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 800398e:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003996:	f000 fcc7 	bl	8004328 <FuncSignalMenuEntryHandler>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	4b64      	ldr	r3, [pc, #400]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 80039a0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	f040 8173 	bne.w	8003c92 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 80039ac:	f000 fd1e 	bl	80043ec <FuncSyncMenuEntryHandler>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b5e      	ldr	r3, [pc, #376]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 80039b6:	701a      	strb	r2, [r3, #0]
			}

			break;
 80039b8:	e16b      	b.n	8003c92 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 80039ba:	4863      	ldr	r0, [pc, #396]	; (8003b48 <EM_ProcessEvent+0x300>)
 80039bc:	f00b fb56 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80039c0:	4b5d      	ldr	r3, [pc, #372]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d105      	bne.n	80039d4 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 80039c8:	f000 fce4 	bl	8004394 <FuncSignalMenuInputHandler>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b57      	ldr	r3, [pc, #348]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 80039d2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80039d4:	4b58      	ldr	r3, [pc, #352]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b06      	cmp	r3, #6
 80039da:	f040 815c 	bne.w	8003c96 <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 80039de:	f000 fcef 	bl	80043c0 <FuncSignalMenuExitHandler>
 80039e2:	4603      	mov	r3, r0
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b52      	ldr	r3, [pc, #328]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 80039e8:	701a      	strb	r2, [r3, #0]

			}

			break;
 80039ea:	e154      	b.n	8003c96 <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 80039ec:	4857      	ldr	r0, [pc, #348]	; (8003b4c <EM_ProcessEvent+0x304>)
 80039ee:	f00b fb3d 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80039f2:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d105      	bne.n	8003a06 <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 80039fa:	f000 fd2d 	bl	8004458 <FuncSyncMenuInputHandler>
 80039fe:	4603      	mov	r3, r0
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003a04:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003a06:	4b4c      	ldr	r3, [pc, #304]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	f040 8145 	bne.w	8003c9a <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003a10:	f000 fd38 	bl	8004484 <FuncSyncMenuExitHandler>
 8003a14:	4603      	mov	r3, r0
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b45      	ldr	r3, [pc, #276]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003a1a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003a1c:	e13d      	b.n	8003c9a <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003a1e:	484c      	ldr	r0, [pc, #304]	; (8003b50 <EM_ProcessEvent+0x308>)
 8003a20:	f00b fb24 	bl	800f06c <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003a24:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d108      	bne.n	8003a3e <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 8003a2c:	f000 fd62 	bl	80044f4 <GainMainMenuExitHandler>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003a36:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003a38:	2002      	movs	r0, #2
 8003a3a:	f000 fe43 	bl	80046c4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003a3e:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003a46:	f000 fd71 	bl	800452c <GainSignalMenuEntryHandler>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003a50:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003a52:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	f040 8121 	bne.w	8003c9e <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003a5c:	f000 fdc6 	bl	80045ec <GainSyncMenuEntryHandler>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b32      	ldr	r3, [pc, #200]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003a66:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003a68:	e119      	b.n	8003c9e <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 8003a6a:	483a      	ldr	r0, [pc, #232]	; (8003b54 <EM_ProcessEvent+0x30c>)
 8003a6c:	f00b fafe 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d105      	bne.n	8003a84 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 8003a78:	f000 fd8c 	bl	8004594 <GainSignalMenuInputHandler>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003a82:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	f040 810a 	bne.w	8003ca2 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 8003a8e:	f000 fd97 	bl	80045c0 <GainSignalMenuExitHandler>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461a      	mov	r2, r3
 8003a96:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003a98:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003a9a:	e102      	b.n	8003ca2 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 8003a9c:	482e      	ldr	r0, [pc, #184]	; (8003b58 <EM_ProcessEvent+0x310>)
 8003a9e:	f00b fae5 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003aa2:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d105      	bne.n	8003ab6 <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 8003aaa:	f000 fdd3 	bl	8004654 <GainSyncMenuInputHandler>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003ab4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	f040 80f3 	bne.w	8003ca6 <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 8003ac0:	f000 fdde 	bl	8004680 <GainSyncMenuExitHandler>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003aca:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003acc:	e0eb      	b.n	8003ca6 <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003ace:	4823      	ldr	r0, [pc, #140]	; (8003b5c <EM_ProcessEvent+0x314>)
 8003ad0:	f00b facc 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003ad4:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b06      	cmp	r3, #6
 8003ada:	d108      	bne.n	8003aee <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 8003adc:	f000 f92e 	bl	8003d3c <FreqMainMenuExitHandler>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003ae6:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f000 fdeb 	bl	80046c4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003af6:	f000 f943 	bl	8003d80 <FreqPresetMenuEntryHandler>
 8003afa:	4603      	mov	r3, r0
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003b00:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d105      	bne.n	8003b16 <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003b0a:	f000 f997 	bl	8003e3c <FreqAdjustMenuEntryHandler>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003b14:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <EM_ProcessEvent+0x2f0>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	f040 80c5 	bne.w	8003caa <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003b20:	f000 f9d6 	bl	8003ed0 <FreqSweepMenuEntryHandler>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b01      	ldr	r3, [pc, #4]	; (8003b30 <EM_ProcessEvent+0x2e8>)
 8003b2a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003b2c:	e0bd      	b.n	8003caa <EM_ProcessEvent+0x462>
 8003b2e:	bf00      	nop
 8003b30:	20001f16 	.word	0x20001f16
 8003b34:	08011438 	.word	0x08011438
 8003b38:	20001f17 	.word	0x20001f17
 8003b3c:	08011444 	.word	0x08011444
 8003b40:	08011460 	.word	0x08011460
 8003b44:	0801147c 	.word	0x0801147c
 8003b48:	08011494 	.word	0x08011494
 8003b4c:	080114ac 	.word	0x080114ac
 8003b50:	080114c4 	.word	0x080114c4
 8003b54:	080114dc 	.word	0x080114dc
 8003b58:	080114f4 	.word	0x080114f4
 8003b5c:	0801150c 	.word	0x0801150c

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003b60:	4857      	ldr	r0, [pc, #348]	; (8003cc0 <EM_ProcessEvent+0x478>)
 8003b62:	f00b fa83 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003b66:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d105      	bne.n	8003b7a <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003b6e:	f000 f939 	bl	8003de4 <FreqPresetMenuInputHandler>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b54      	ldr	r3, [pc, #336]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003b78:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003b7a:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	f040 8095 	bne.w	8003cae <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003b84:	f000 f944 	bl	8003e10 <FreqPresetMenuExitHandler>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b4e      	ldr	r3, [pc, #312]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003b8e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003b90:	e08d      	b.n	8003cae <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003b92:	484e      	ldr	r0, [pc, #312]	; (8003ccc <EM_ProcessEvent+0x484>)
 8003b94:	f00b fa6a 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003b98:	4b4a      	ldr	r3, [pc, #296]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d105      	bne.n	8003bac <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003ba0:	f000 f96e 	bl	8003e80 <FreqAdjustMenuInputHandler>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003baa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003bac:	4b45      	ldr	r3, [pc, #276]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d17e      	bne.n	8003cb2 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003bb4:	f000 f976 	bl	8003ea4 <FreqAdjustMenuExitHandler>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003bbe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003bc0:	e077      	b.n	8003cb2 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8003bc2:	4843      	ldr	r0, [pc, #268]	; (8003cd0 <EM_ProcessEvent+0x488>)
 8003bc4:	f00b fa52 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003bc8:	4b3e      	ldr	r3, [pc, #248]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d106      	bne.n	8003bde <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnable);
 8003bd0:	2007      	movs	r0, #7
 8003bd2:	f000 f9d3 	bl	8003f7c <FreqSweepMenuInputHandler>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003bdc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003bde:	4b39      	ldr	r3, [pc, #228]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d106      	bne.n	8003bf4 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepMode);
 8003be6:	2008      	movs	r0, #8
 8003be8:	f000 f9c8 	bl	8003f7c <FreqSweepMenuInputHandler>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003bf2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003bf4:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d106      	bne.n	8003c0a <EM_ProcessEvent+0x3c2>
			{
				// set lower bounds
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003bfc:	2009      	movs	r0, #9
 8003bfe:	f000 f9bd 	bl	8003f7c <FreqSweepMenuInputHandler>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003c08:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d106      	bne.n	8003c20 <EM_ProcessEvent+0x3d8>
			{
				// set higher bounds
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8003c12:	200a      	movs	r0, #10
 8003c14:	f000 f9b2 	bl	8003f7c <FreqSweepMenuInputHandler>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003c1e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8003c20:	4b28      	ldr	r3, [pc, #160]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d106      	bne.n	8003c36 <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evSweepSpeed);
 8003c28:	200b      	movs	r0, #11
 8003c2a:	f000 f9a7 	bl	8003f7c <FreqSweepMenuInputHandler>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003c34:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003c36:	4b23      	ldr	r3, [pc, #140]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d13b      	bne.n	8003cb6 <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 8003c3e:	f000 fabd 	bl	80041bc <FreqSweepMenuExitHandler>
 8003c42:	4603      	mov	r3, r0
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003c48:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003c4a:	e034      	b.n	8003cb6 <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 8003c4c:	4821      	ldr	r0, [pc, #132]	; (8003cd4 <EM_ProcessEvent+0x48c>)
 8003c4e:	f00b fa0d 	bl	800f06c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003c52:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d105      	bne.n	8003c66 <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 8003c5a:	f7ff fdc3 	bl	80037e4 <BiasMenuInputHandler>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003c64:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <EM_ProcessEvent+0x47c>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d125      	bne.n	8003cba <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 8003c6e:	f7ff fdcf 	bl	8003810 <BiasMenuExitHandler>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <EM_ProcessEvent+0x480>)
 8003c78:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003c7a:	2002      	movs	r0, #2
 8003c7c:	f000 fd22 	bl	80046c4 <ToplevelMenu_setStatus>
			}

			break;
 8003c80:	e01b      	b.n	8003cba <EM_ProcessEvent+0x472>

		default:
			break;
 8003c82:	bf00      	nop
 8003c84:	e01a      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003c86:	bf00      	nop
 8003c88:	e018      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003c8a:	bf00      	nop
 8003c8c:	e016      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003c8e:	bf00      	nop
 8003c90:	e014      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003c92:	bf00      	nop
 8003c94:	e012      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003c96:	bf00      	nop
 8003c98:	e010      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003c9a:	bf00      	nop
 8003c9c:	e00e      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003c9e:	bf00      	nop
 8003ca0:	e00c      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003ca2:	bf00      	nop
 8003ca4:	e00a      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003ca6:	bf00      	nop
 8003ca8:	e008      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003caa:	bf00      	nop
 8003cac:	e006      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <EM_ProcessEvent+0x474>
			break;
 8003cba:	bf00      	nop
	}

}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	08011524 	.word	0x08011524
 8003cc4:	20001f17 	.word	0x20001f17
 8003cc8:	20001f16 	.word	0x20001f16
 8003ccc:	0801153c 	.word	0x0801153c
 8003cd0:	08011554 	.word	0x08011554
 8003cd4:	0801156c 	.word	0x0801156c

08003cd8 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003ce2:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <EM_SetNewEvent+0x1c>)
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	7013      	strb	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	20001f17 	.word	0x20001f17

08003cf8 <FreqMenu_getStatus>:
 */
void _setSweepModeUp();
void _setSweepModeDown();

eFreqMenu_Status FreqMenu_getStatus()
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <FreqMenu_getStatus+0x14>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20001f1a 	.word	0x20001f1a

08003d10 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8003d14:	4806      	ldr	r0, [pc, #24]	; (8003d30 <FreqMainMenuEntryHandler+0x20>)
 8003d16:	f00b f9a9 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 8003d1a:	f7fd fa35 	bl	8001188 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <FreqMainMenuEntryHandler+0x24>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <FreqMainMenuEntryHandler+0x28>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003d2a:	230a      	movs	r3, #10
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	0801157c 	.word	0x0801157c
 8003d34:	20001f1a 	.word	0x20001f1a
 8003d38:	20001f17 	.word	0x20001f17

08003d3c <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 8003d40:	480a      	ldr	r0, [pc, #40]	; (8003d6c <FreqMainMenuExitHandler+0x30>)
 8003d42:	f00b f993 	bl	800f06c <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <FreqMainMenuExitHandler+0x34>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <FreqMainMenuExitHandler+0x38>)
 8003d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003d54:	f7fd fa18 	bl	8001188 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003d58:	4807      	ldr	r0, [pc, #28]	; (8003d78 <FreqMainMenuExitHandler+0x3c>)
 8003d5a:	f00b f987 	bl	800f06c <puts>
	#endif

	eNewEvent = evIdle;
 8003d5e:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <FreqMainMenuExitHandler+0x40>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003d64:	2301      	movs	r3, #1
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	080115cc 	.word	0x080115cc
 8003d70:	20001f1a 	.word	0x20001f1a
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	080115f4 	.word	0x080115f4
 8003d7c:	20001f17 	.word	0x20001f17

08003d80 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8003d86:	4812      	ldr	r0, [pc, #72]	; (8003dd0 <FreqPresetMenuEntryHandler+0x50>)
 8003d88:	f00b f970 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 8003d8c:	f7fd f9fc 	bl	8001188 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <FreqPresetMenuEntryHandler+0x54>)
 8003d92:	2202      	movs	r2, #2
 8003d94:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003d96:	f001 f86f 	bl	8004e78 <FreqO_GetFPresetObject>
 8003d9a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	791a      	ldrb	r2, [r3, #4]
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <FreqPresetMenuEntryHandler+0x58>)
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003daa:	f001 f897 	bl	8004edc <FreqO_GetFreqPresetEncoderRange>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <FreqPresetMenuEntryHandler+0x58>)
 8003db4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003db6:	e002      	b.n	8003dbe <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003db8:	4808      	ldr	r0, [pc, #32]	; (8003ddc <FreqPresetMenuEntryHandler+0x5c>)
 8003dba:	f7fd fa2f 	bl	800121c <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003dbe:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <FreqPresetMenuEntryHandler+0x60>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003dc4:	230b      	movs	r3, #11
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	0801160c 	.word	0x0801160c
 8003dd4:	20001f1a 	.word	0x20001f1a
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	08011638 	.word	0x08011638
 8003de0:	20001f17 	.word	0x20001f17

08003de4 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8003de8:	4807      	ldr	r0, [pc, #28]	; (8003e08 <FreqPresetMenuInputHandler+0x24>)
 8003dea:	f00b f93f 	bl	800f06c <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003dee:	2001      	movs	r0, #1
 8003df0:	f001 fbd8 	bl	80055a4 <SM_GetEncoderValue>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ff4c 	bl	8004c94 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <FreqPresetMenuInputHandler+0x28>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003e02:	230b      	movs	r3, #11
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	08011674 	.word	0x08011674
 8003e0c:	20001f17 	.word	0x20001f17

08003e10 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8003e14:	4806      	ldr	r0, [pc, #24]	; (8003e30 <FreqPresetMenuExitHandler+0x20>)
 8003e16:	f00b f929 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 8003e1a:	f7fd f9b5 	bl	8001188 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <FreqPresetMenuExitHandler+0x24>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <FreqPresetMenuExitHandler+0x28>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003e2a:	230a      	movs	r3, #10
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	080116a0 	.word	0x080116a0
 8003e34:	20001f1a 	.word	0x20001f1a
 8003e38:	20001f17 	.word	0x20001f17

08003e3c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8003e40:	480a      	ldr	r0, [pc, #40]	; (8003e6c <FreqAdjustMenuEntryHandler+0x30>)
 8003e42:	f00b f913 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 8003e46:	f7fd f99f 	bl	8001188 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <FreqAdjustMenuEntryHandler+0x34>)
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <FreqAdjustMenuEntryHandler+0x38>)
 8003e52:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <FreqAdjustMenuEntryHandler+0x3c>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8003e58:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <FreqAdjustMenuEntryHandler+0x3c>)
 8003e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <FreqAdjustMenuEntryHandler+0x40>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003e66:	230c      	movs	r3, #12
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	080116cc 	.word	0x080116cc
 8003e70:	20001f1a 	.word	0x20001f1a
 8003e74:	40013400 	.word	0x40013400
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	20001f17 	.word	0x20001f17

08003e80 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003e84:	4805      	ldr	r0, [pc, #20]	; (8003e9c <FreqAdjustMenuInputHandler+0x1c>)
 8003e86:	f00b f8f1 	bl	800f06c <puts>
	#endif

	FreqO_AdjustFreq();
 8003e8a:	f000 fef5 	bl	8004c78 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8003e8e:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <FreqAdjustMenuInputHandler+0x20>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003e94:	230c      	movs	r3, #12
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	080116f8 	.word	0x080116f8
 8003ea0:	20001f17 	.word	0x20001f17

08003ea4 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8003ea8:	4806      	ldr	r0, [pc, #24]	; (8003ec4 <FreqAdjustMenuExitHandler+0x20>)
 8003eaa:	f00b f8df 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 8003eae:	f7fd f96b 	bl	8001188 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <FreqAdjustMenuExitHandler+0x24>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <FreqAdjustMenuExitHandler+0x28>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003ebe:	230a      	movs	r3, #10
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	08011724 	.word	0x08011724
 8003ec8:	20001f1a 	.word	0x20001f1a
 8003ecc:	20001f17 	.word	0x20001f17

08003ed0 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8003ed4:	4822      	ldr	r0, [pc, #136]	; (8003f60 <FreqSweepMenuEntryHandler+0x90>)
 8003ed6:	f00b f8c9 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 8003eda:	f7fd f955 	bl	8001188 <DM_RefreshScreen>

	if( sweep_upper_arr_bounds != OUTPUT_TIMER->ARR)
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <FreqSweepMenuEntryHandler+0x94>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eea:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <FreqSweepMenuEntryHandler+0x98>)
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	eeb4 7a67 	vcmp.f32	s14, s15
 8003ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef8:	d008      	beq.n	8003f0c <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_arr_bounds  = OUTPUT_TIMER->ARR;
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <FreqSweepMenuEntryHandler+0x94>)
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f06:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <FreqSweepMenuEntryHandler+0x98>)
 8003f08:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_arr_bounds == MIN_OUTPUT_ARR)
 8003f0c:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <FreqSweepMenuEntryHandler+0x98>)
 8003f0e:	edd3 7a00 	vldr	s15, [r3]
 8003f12:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003f16:	eef4 7a47 	vcmp.f32	s15, s14
 8003f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1e:	d101      	bne.n	8003f24 <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 8003f20:	f000 f970 	bl	8004204 <_setSweepModeDown>
	}

	// encoder start value
	ENCODER_TIMER->CNT = 1;
 8003f24:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <FreqSweepMenuEntryHandler+0x9c>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24
	// encoder limit
	ENCODER_TIMER->ARR = 65535;
 8003f2a:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <FreqSweepMenuEntryHandler+0x9c>)
 8003f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <FreqSweepMenuEntryHandler+0xa0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <FreqSweepMenuEntryHandler+0xa0>)
 8003f3a:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <FreqSweepMenuEntryHandler+0xa0>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28

	// do stuff
	FreqSweepMenuInputHandler(evSweepSpeed);
 8003f46:	200b      	movs	r0, #11
 8003f48:	f000 f818 	bl	8003f7c <FreqSweepMenuInputHandler>

	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <FreqSweepMenuEntryHandler+0xa4>)
 8003f4e:	2204      	movs	r2, #4
 8003f50:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <FreqSweepMenuEntryHandler+0xa8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003f58:	230d      	movs	r3, #13
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	08011750 	.word	0x08011750
 8003f64:	40013400 	.word	0x40013400
 8003f68:	2000000c 	.word	0x2000000c
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000c00 	.word	0x40000c00
 8003f74:	20001f1a 	.word	0x20001f1a
 8003f78:	20001f17 	.word	0x20001f17

08003f7c <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003f86:	487f      	ldr	r0, [pc, #508]	; (8004184 <FreqSweepMenuInputHandler+0x208>)
 8003f88:	f00b f870 	bl	800f06c <puts>
	#endif



	switch(pEvent)
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	3b07      	subs	r3, #7
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	f200 80ee 	bhi.w	8004172 <FreqSweepMenuInputHandler+0x1f6>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <FreqSweepMenuInputHandler+0x20>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fb1 	.word	0x08003fb1
 8003fa0:	08003fd1 	.word	0x08003fd1
 8003fa4:	080040ff 	.word	0x080040ff
 8003fa8:	0800410d 	.word	0x0800410d
 8003fac:	08004007 	.word	0x08004007
	{
		case evSweepEnable:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8003fb0:	4875      	ldr	r0, [pc, #468]	; (8004188 <FreqSweepMenuInputHandler+0x20c>)
 8003fb2:	f00b f85b 	bl	800f06c <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8003fb6:	4b75      	ldr	r3, [pc, #468]	; (800418c <FreqSweepMenuInputHandler+0x210>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	4a74      	ldr	r2, [pc, #464]	; (800418c <FreqSweepMenuInputHandler+0x210>)
 8003fbc:	f083 0301 	eor.w	r3, r3, #1
 8003fc0:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8003fc2:	4b72      	ldr	r3, [pc, #456]	; (800418c <FreqSweepMenuInputHandler+0x210>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a71      	ldr	r2, [pc, #452]	; (800418c <FreqSweepMenuInputHandler+0x210>)
 8003fc8:	f083 0301 	eor.w	r3, r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]
			break;
 8003fce:	e0d1      	b.n	8004174 <FreqSweepMenuInputHandler+0x1f8>

		case evSweepMode:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8003fd0:	486f      	ldr	r0, [pc, #444]	; (8004190 <FreqSweepMenuInputHandler+0x214>)
 8003fd2:	f00b f84b 	bl	800f06c <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8003fd6:	4b6f      	ldr	r3, [pc, #444]	; (8004194 <FreqSweepMenuInputHandler+0x218>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f083 0301 	eor.w	r3, r3, #1
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	4b6c      	ldr	r3, [pc, #432]	; (8004194 <FreqSweepMenuInputHandler+0x218>)
 8003fe2:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8003fe4:	4b6b      	ldr	r3, [pc, #428]	; (8004194 <FreqSweepMenuInputHandler+0x218>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d004      	beq.n	8003ff6 <FreqSweepMenuInputHandler+0x7a>
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d008      	beq.n	8004002 <FreqSweepMenuInputHandler+0x86>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <FreqSweepMenuInputHandler+0x80>
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
			}
			// toggle bi-directional (center-alligned)

			break;
 8003ff4:	e0be      	b.n	8004174 <FreqSweepMenuInputHandler+0x1f8>
					_setSweepModeDown();
 8003ff6:	f000 f905 	bl	8004204 <_setSweepModeDown>
					break;
 8003ffa:	e003      	b.n	8004004 <FreqSweepMenuInputHandler+0x88>
					_setSweepModeUp();
 8003ffc:	f000 f92c 	bl	8004258 <_setSweepModeUp>
					break;
 8004000:	e000      	b.n	8004004 <FreqSweepMenuInputHandler+0x88>
					break;
 8004002:	bf00      	nop
			break;
 8004004:	e0b6      	b.n	8004174 <FreqSweepMenuInputHandler+0x1f8>

		case evSweepSpeed:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepSpeed captured\n");
 8004006:	4864      	ldr	r0, [pc, #400]	; (8004198 <FreqSweepMenuInputHandler+0x21c>)
 8004008:	f00b f830 	bl	800f06c <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 800400c:	4b63      	ldr	r3, [pc, #396]	; (800419c <FreqSweepMenuInputHandler+0x220>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <FreqSweepMenuInputHandler+0x9e>
 8004014:	2b01      	cmp	r3, #1
 8004016:	d037      	beq.n	8004088 <FreqSweepMenuInputHandler+0x10c>

			}



			break;
 8004018:	e0ac      	b.n	8004174 <FreqSweepMenuInputHandler+0x1f8>
					SWEEP_TIMER->ARR = MIN_SWEEP_ARR + ((ENCODER_TIMER->CNT*ENCODER_TIMER->CNT*ENCODER_TIMER->CNT));
 800401a:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	4a60      	ldr	r2, [pc, #384]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 8004020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	4a5e      	ldr	r2, [pc, #376]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 8004028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	4a57      	ldr	r2, [pc, #348]	; (800418c <FreqSweepMenuInputHandler+0x210>)
 8004030:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8004034:	3320      	adds	r3, #32
 8004036:	62d3      	str	r3, [r2, #44]	; 0x2c
					if(SWEEP_TIMER->PSC == 0)
 8004038:	4b54      	ldr	r3, [pc, #336]	; (800418c <FreqSweepMenuInputHandler+0x210>)
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10d      	bne.n	800405c <FreqSweepMenuInputHandler+0xe0>
						calculated_sweep_in_hertz = (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8004040:	4b52      	ldr	r3, [pc, #328]	; (800418c <FreqSweepMenuInputHandler+0x210>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800404c:	eddf 6a55 	vldr	s13, [pc, #340]	; 80041a4 <FreqSweepMenuInputHandler+0x228>
 8004050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004054:	4b54      	ldr	r3, [pc, #336]	; (80041a8 <FreqSweepMenuInputHandler+0x22c>)
 8004056:	edc3 7a00 	vstr	s15, [r3]
					break;
 800405a:	e04f      	b.n	80040fc <FreqSweepMenuInputHandler+0x180>
						calculated_sweep_in_hertz = (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <FreqSweepMenuInputHandler+0x210>)
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004068:	4b48      	ldr	r3, [pc, #288]	; (800418c <FreqSweepMenuInputHandler+0x210>)
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004078:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80041a4 <FreqSweepMenuInputHandler+0x228>
 800407c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004080:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <FreqSweepMenuInputHandler+0x22c>)
 8004082:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004086:	e039      	b.n	80040fc <FreqSweepMenuInputHandler+0x180>
						switch(active_sweep_mode)
 8004088:	4b42      	ldr	r3, [pc, #264]	; (8004194 <FreqSweepMenuInputHandler+0x218>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <FreqSweepMenuInputHandler+0x11a>
 8004090:	2b01      	cmp	r3, #1
 8004092:	d019      	beq.n	80040c8 <FreqSweepMenuInputHandler+0x14c>
								break;
 8004094:	e031      	b.n	80040fa <FreqSweepMenuInputHandler+0x17e>
									if(ENCODER_TIMER->CNT < sweep_upper_arr_bounds)
 8004096:	4b42      	ldr	r3, [pc, #264]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040a2:	4b42      	ldr	r3, [pc, #264]	; (80041ac <FreqSweepMenuInputHandler+0x230>)
 80040a4:	edd3 7a00 	vldr	s15, [r3]
 80040a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b0:	d400      	bmi.n	80040b4 <FreqSweepMenuInputHandler+0x138>
								break;
 80040b2:	e022      	b.n	80040fa <FreqSweepMenuInputHandler+0x17e>
										sweep_lower_arr_bounds = ENCODER_TIMER->CNT;
 80040b4:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c0:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <FreqSweepMenuInputHandler+0x234>)
 80040c2:	edc3 7a00 	vstr	s15, [r3]
								break;
 80040c6:	e018      	b.n	80040fa <FreqSweepMenuInputHandler+0x17e>
									if(ENCODER_TIMER->CNT > sweep_lower_arr_bounds)
 80040c8:	4b35      	ldr	r3, [pc, #212]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040d4:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <FreqSweepMenuInputHandler+0x234>)
 80040d6:	edd3 7a00 	vldr	s15, [r3]
 80040da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e2:	dc00      	bgt.n	80040e6 <FreqSweepMenuInputHandler+0x16a>
								break;
 80040e4:	e008      	b.n	80040f8 <FreqSweepMenuInputHandler+0x17c>
										sweep_upper_arr_bounds = ENCODER_TIMER->CNT;
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f2:	4b2e      	ldr	r3, [pc, #184]	; (80041ac <FreqSweepMenuInputHandler+0x230>)
 80040f4:	edc3 7a00 	vstr	s15, [r3]
								break;
 80040f8:	bf00      	nop
					break;
 80040fa:	bf00      	nop
			break;
 80040fc:	e03a      	b.n	8004174 <FreqSweepMenuInputHandler+0x1f8>

		case evSweepSpeedBtn:
			theCurrentEncoderSweepFunction = ENCODER_SWEEP_SPEED_FUNCTION;
 80040fe:	4b27      	ldr	r3, [pc, #156]	; (800419c <FreqSweepMenuInputHandler+0x220>)
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
			ENCODER_TIMER->CNT = 1;
 8004104:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 8004106:	2201      	movs	r2, #1
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800410a:	e033      	b.n	8004174 <FreqSweepMenuInputHandler+0x1f8>

		case evSweepLimitBtn:
			theCurrentEncoderSweepFunction = ENCODER_SWEEP_LIMIT_FUNCTION;
 800410c:	4b23      	ldr	r3, [pc, #140]	; (800419c <FreqSweepMenuInputHandler+0x220>)
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <FreqSweepMenuInputHandler+0x218>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <FreqSweepMenuInputHandler+0x1a4>
 800411a:	2b01      	cmp	r3, #1
 800411c:	d014      	beq.n	8004148 <FreqSweepMenuInputHandler+0x1cc>
						// if encoder position is below the lower bounds set it above it
						if(ENCODER_TIMER->CNT < sweep_lower_arr_bounds)
							ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
					break;
				default:
					break;
 800411e:	e027      	b.n	8004170 <FreqSweepMenuInputHandler+0x1f4>
						if(ENCODER_TIMER->CNT > sweep_upper_arr_bounds)
 8004120:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	ee07 3a90 	vmov	s15, r3
 8004128:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <FreqSweepMenuInputHandler+0x230>)
 800412e:	edd3 7a00 	vldr	s15, [r3]
 8004132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413a:	dc00      	bgt.n	800413e <FreqSweepMenuInputHandler+0x1c2>
					break;
 800413c:	e018      	b.n	8004170 <FreqSweepMenuInputHandler+0x1f4>
							 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <FreqSweepMenuInputHandler+0x238>)
 8004140:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	6253      	str	r3, [r2, #36]	; 0x24
					break;
 8004146:	e013      	b.n	8004170 <FreqSweepMenuInputHandler+0x1f4>
						if(ENCODER_TIMER->CNT < sweep_lower_arr_bounds)
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004154:	4b16      	ldr	r3, [pc, #88]	; (80041b0 <FreqSweepMenuInputHandler+0x234>)
 8004156:	edd3 7a00 	vldr	s15, [r3]
 800415a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800415e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004162:	d400      	bmi.n	8004166 <FreqSweepMenuInputHandler+0x1ea>
					break;
 8004164:	e003      	b.n	800416e <FreqSweepMenuInputHandler+0x1f2>
							ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <FreqSweepMenuInputHandler+0x238>)
 8004168:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <FreqSweepMenuInputHandler+0x224>)
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	6253      	str	r3, [r2, #36]	; 0x24
					break;
 800416e:	bf00      	nop
			}

			break;
 8004170:	e000      	b.n	8004174 <FreqSweepMenuInputHandler+0x1f8>

		default:
			// don't care about other eSystemEvent
			break;
 8004172:	bf00      	nop
	}

	// stay in this state
	eNewEvent = evIdle;
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <FreqSweepMenuInputHandler+0x23c>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800417a:	230d      	movs	r3, #13
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	080116f8 	.word	0x080116f8
 8004188:	08011774 	.word	0x08011774
 800418c:	40000c00 	.word	0x40000c00
 8004190:	0801178c 	.word	0x0801178c
 8004194:	20001f18 	.word	0x20001f18
 8004198:	080117a4 	.word	0x080117a4
 800419c:	20001f19 	.word	0x20001f19
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	4d2037a0 	.word	0x4d2037a0
 80041a8:	20001f34 	.word	0x20001f34
 80041ac:	2000000c 	.word	0x2000000c
 80041b0:	20000008 	.word	0x20000008
 80041b4:	40013400 	.word	0x40013400
 80041b8:	20001f17 	.word	0x20001f17

080041bc <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 80041c0:	480c      	ldr	r0, [pc, #48]	; (80041f4 <FreqSweepMenuExitHandler+0x38>)
 80041c2:	f00a ff53 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 80041c6:	f7fc ffdf 	bl	8001188 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <FreqSweepMenuExitHandler+0x3c>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <FreqSweepMenuExitHandler+0x3c>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <FreqSweepMenuExitHandler+0x3c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <FreqSweepMenuExitHandler+0x3c>)
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <FreqSweepMenuExitHandler+0x40>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <FreqSweepMenuExitHandler+0x44>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80041ee:	230a      	movs	r3, #10
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	080117bc 	.word	0x080117bc
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	20001f1a 	.word	0x20001f1a
 8004200:	20001f17 	.word	0x20001f17

08004204 <_setSweepModeDown>:

void _setSweepModeDown()
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <_setSweepModeDown+0x40>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <_setSweepModeDown+0x40>)
 800420e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004212:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <_setSweepModeDown+0x40>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <_setSweepModeDown+0x40>)
 800421a:	f043 0310 	orr.w	r3, r3, #16
 800421e:	6013      	str	r3, [r2, #0]

	sweep_lower_arr_bounds  = OUTPUT_TIMER->ARR;
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <_setSweepModeDown+0x44>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <_setSweepModeDown+0x48>)
 800422e:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_arr_bounds  = MAX_OUTPUT_ARR;
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <_setSweepModeDown+0x4c>)
 8004234:	4a07      	ldr	r2, [pc, #28]	; (8004254 <_setSweepModeDown+0x50>)
 8004236:	601a      	str	r2, [r3, #0]
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40013400 	.word	0x40013400
 800424c:	20000008 	.word	0x20000008
 8004250:	2000000c 	.word	0x2000000c
 8004254:	477fff00 	.word	0x477fff00

08004258 <_setSweepModeUp>:

void _setSweepModeUp()
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <_setSweepModeUp+0x40>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <_setSweepModeUp+0x40>)
 8004262:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004266:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <_setSweepModeUp+0x40>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <_setSweepModeUp+0x40>)
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	6013      	str	r3, [r2, #0]

	sweep_upper_arr_bounds  = OUTPUT_TIMER->ARR;
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <_setSweepModeUp+0x44>)
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <_setSweepModeUp+0x48>)
 8004282:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_arr_bounds  = MIN_OUTPUT_ARR;
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <_setSweepModeUp+0x4c>)
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <_setSweepModeUp+0x50>)
 800428a:	601a      	str	r2, [r3, #0]

}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40000c00 	.word	0x40000c00
 800429c:	40013400 	.word	0x40013400
 80042a0:	2000000c 	.word	0x2000000c
 80042a4:	20000008 	.word	0x20000008
 80042a8:	41500000 	.word	0x41500000

080042ac <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <FuncMenu_getStatus+0x14>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20001f1b 	.word	0x20001f1b

080042c4 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 80042c8:	4806      	ldr	r0, [pc, #24]	; (80042e4 <FuncMainMenuEntryHandler+0x20>)
 80042ca:	f00a fecf 	bl	800f06c <puts>
#endif

	DM_RefreshScreen();
 80042ce:	f7fc ff5b 	bl	8001188 <DM_RefreshScreen>


	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <FuncMainMenuEntryHandler+0x24>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <FuncMainMenuEntryHandler+0x28>)
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80042de:	2303      	movs	r3, #3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	080117e4 	.word	0x080117e4
 80042e8:	20001f1b 	.word	0x20001f1b
 80042ec:	20001f17 	.word	0x20001f17

080042f0 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 80042f4:	4808      	ldr	r0, [pc, #32]	; (8004318 <FuncMainMenuExitHandler+0x28>)
 80042f6:	f00a feb9 	bl	800f06c <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 80042fa:	4b08      	ldr	r3, [pc, #32]	; (800431c <FuncMainMenuExitHandler+0x2c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004300:	f7fc ff42 	bl	8001188 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004304:	4806      	ldr	r0, [pc, #24]	; (8004320 <FuncMainMenuExitHandler+0x30>)
 8004306:	f00a feb1 	bl	800f06c <puts>
#endif

	eNewEvent = evIdle;
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <FuncMainMenuExitHandler+0x34>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004310:	2301      	movs	r3, #1
}
 8004312:	4618      	mov	r0, r3
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	08011834 	.word	0x08011834
 800431c:	20001f1b 	.word	0x20001f1b
 8004320:	0801185c 	.word	0x0801185c
 8004324:	20001f17 	.word	0x20001f17

08004328 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 800432e:	4814      	ldr	r0, [pc, #80]	; (8004380 <FuncSignalMenuEntryHandler+0x58>)
 8004330:	f00a fe9c 	bl	800f06c <puts>
#endif

	DM_RefreshScreen();
 8004334:	f7fc ff28 	bl	8001188 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <FuncSignalMenuEntryHandler+0x5c>)
 800433a:	2202      	movs	r2, #2
 800433c:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 800433e:	2000      	movs	r0, #0
 8004340:	f001 f91a 	bl	8005578 <SM_GetOutputChannel>
 8004344:	4603      	mov	r3, r0
 8004346:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800434a:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	785a      	ldrb	r2, [r3, #1]
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <FuncSignalMenuEntryHandler+0x60>)
 8004358:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 800435a:	f000 ff3d 	bl	80051d8 <FuncO_GetFuncPresetEncoderRange>
 800435e:	4603      	mov	r3, r0
 8004360:	461a      	mov	r2, r3
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <FuncSignalMenuEntryHandler+0x60>)
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
 8004366:	e002      	b.n	800436e <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004368:	4808      	ldr	r0, [pc, #32]	; (800438c <FuncSignalMenuEntryHandler+0x64>)
 800436a:	f7fc ff57 	bl	800121c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <FuncSignalMenuEntryHandler+0x68>)
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004374:	2304      	movs	r3, #4
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	08011874 	.word	0x08011874
 8004384:	20001f1b 	.word	0x20001f1b
 8004388:	40012c00 	.word	0x40012c00
 800438c:	080118a0 	.word	0x080118a0
 8004390:	20001f17 	.word	0x20001f17

08004394 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 8004398:	4807      	ldr	r0, [pc, #28]	; (80043b8 <FuncSignalMenuInputHandler+0x24>)
 800439a:	f00a fe67 	bl	800f06c <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800439e:	2001      	movs	r0, #1
 80043a0:	f001 f900 	bl	80055a4 <SM_GetEncoderValue>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fdac 	bl	8004f04 <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <FuncSignalMenuInputHandler+0x28>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80043b2:	2304      	movs	r3, #4
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	080118d4 	.word	0x080118d4
 80043bc:	20001f17 	.word	0x20001f17

080043c0 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 80043c4:	4806      	ldr	r0, [pc, #24]	; (80043e0 <FuncSignalMenuExitHandler+0x20>)
 80043c6:	f00a fe51 	bl	800f06c <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <FuncSignalMenuExitHandler+0x24>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80043d0:	f7fc feda 	bl	8001188 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <FuncSignalMenuExitHandler+0x28>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80043da:	2303      	movs	r3, #3
}
 80043dc:	4618      	mov	r0, r3
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	08011900 	.word	0x08011900
 80043e4:	20001f1b 	.word	0x20001f1b
 80043e8:	20001f17 	.word	0x20001f17

080043ec <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 80043f2:	4814      	ldr	r0, [pc, #80]	; (8004444 <FuncSyncMenuEntryHandler+0x58>)
 80043f4:	f00a fe3a 	bl	800f06c <puts>
#endif

	DM_RefreshScreen();
 80043f8:	f7fc fec6 	bl	8001188 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <FuncSyncMenuEntryHandler+0x5c>)
 80043fe:	2203      	movs	r2, #3
 8004400:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8004402:	2001      	movs	r0, #1
 8004404:	f001 f8b8 	bl	8005578 <SM_GetOutputChannel>
 8004408:	4603      	mov	r3, r0
 800440a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800440e:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	785a      	ldrb	r2, [r3, #1]
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <FuncSyncMenuEntryHandler+0x60>)
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 800441e:	f000 fedb 	bl	80051d8 <FuncO_GetFuncPresetEncoderRange>
 8004422:	4603      	mov	r3, r0
 8004424:	461a      	mov	r2, r3
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <FuncSyncMenuEntryHandler+0x60>)
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c
 800442a:	e002      	b.n	8004432 <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 800442c:	4808      	ldr	r0, [pc, #32]	; (8004450 <FuncSyncMenuEntryHandler+0x64>)
 800442e:	f7fc fef5 	bl	800121c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <FuncSyncMenuEntryHandler+0x68>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004438:	2305      	movs	r3, #5
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	0801192c 	.word	0x0801192c
 8004448:	20001f1b 	.word	0x20001f1b
 800444c:	40012c00 	.word	0x40012c00
 8004450:	080118a0 	.word	0x080118a0
 8004454:	20001f17 	.word	0x20001f17

08004458 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 800445c:	4807      	ldr	r0, [pc, #28]	; (800447c <FuncSyncMenuInputHandler+0x24>)
 800445e:	f00a fe05 	bl	800f06c <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004462:	2001      	movs	r0, #1
 8004464:	f001 f89e 	bl	80055a4 <SM_GetEncoderValue>
 8004468:	4603      	mov	r3, r0
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fda2 	bl	8004fb4 <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <FuncSyncMenuInputHandler+0x28>)
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004476:	2305      	movs	r3, #5
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	08011954 	.word	0x08011954
 8004480:	20001f17 	.word	0x20001f17

08004484 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 8004488:	4806      	ldr	r0, [pc, #24]	; (80044a4 <FuncSyncMenuExitHandler+0x20>)
 800448a:	f00a fdef 	bl	800f06c <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <FuncSyncMenuExitHandler+0x24>)
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004494:	f7fc fe78 	bl	8001188 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <FuncSyncMenuExitHandler+0x28>)
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800449e:	2303      	movs	r3, #3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	0801197c 	.word	0x0801197c
 80044a8:	20001f1b 	.word	0x20001f1b
 80044ac:	20001f17 	.word	0x20001f17

080044b0 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <GainMenu_getStatus+0x14>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20001f1c 	.word	0x20001f1c

080044c8 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 80044cc:	4806      	ldr	r0, [pc, #24]	; (80044e8 <GainMainMenuEntryHandler+0x20>)
 80044ce:	f00a fdcd 	bl	800f06c <puts>
#endif

	DM_RefreshScreen();
 80044d2:	f7fc fe59 	bl	8001188 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <GainMainMenuEntryHandler+0x24>)
 80044d8:	2201      	movs	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <GainMainMenuEntryHandler+0x28>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80044e2:	2306      	movs	r3, #6
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	080119a4 	.word	0x080119a4
 80044ec:	20001f1c 	.word	0x20001f1c
 80044f0:	20001f17 	.word	0x20001f17

080044f4 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 80044f8:	4808      	ldr	r0, [pc, #32]	; (800451c <GainMainMenuExitHandler+0x28>)
 80044fa:	f00a fdb7 	bl	800f06c <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <GainMainMenuExitHandler+0x2c>)
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004504:	f7fc fe40 	bl	8001188 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004508:	4806      	ldr	r0, [pc, #24]	; (8004524 <GainMainMenuExitHandler+0x30>)
 800450a:	f00a fdaf 	bl	800f06c <puts>
#endif

	eNewEvent = evIdle;
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <GainMainMenuExitHandler+0x34>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004514:	2301      	movs	r3, #1
}
 8004516:	4618      	mov	r0, r3
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	080119f4 	.word	0x080119f4
 8004520:	20001f1c 	.word	0x20001f1c
 8004524:	08011a1c 	.word	0x08011a1c
 8004528:	20001f17 	.word	0x20001f17

0800452c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 8004532:	4813      	ldr	r0, [pc, #76]	; (8004580 <GainSignalMenuEntryHandler+0x54>)
 8004534:	f00a fd9a 	bl	800f06c <puts>
#endif

	DM_RefreshScreen();
 8004538:	f7fc fe26 	bl	8001188 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <GainSignalMenuEntryHandler+0x58>)
 800453e:	2202      	movs	r2, #2
 8004540:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004542:	2000      	movs	r0, #0
 8004544:	f001 f818 	bl	8005578 <SM_GetOutputChannel>
 8004548:	4603      	mov	r3, r0
 800454a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800454e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8b1a      	ldrh	r2, [r3, #24]
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <GainSignalMenuEntryHandler+0x5c>)
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <GainSignalMenuEntryHandler+0x5c>)
 8004560:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c
 8004566:	e002      	b.n	800456e <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004568:	4808      	ldr	r0, [pc, #32]	; (800458c <GainSignalMenuEntryHandler+0x60>)
 800456a:	f7fc fe57 	bl	800121c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <GainSignalMenuEntryHandler+0x64>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004574:	2307      	movs	r3, #7
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	08011a34 	.word	0x08011a34
 8004584:	20001f1c 	.word	0x20001f1c
 8004588:	40012c00 	.word	0x40012c00
 800458c:	08011a60 	.word	0x08011a60
 8004590:	20001f17 	.word	0x20001f17

08004594 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 8004598:	4807      	ldr	r0, [pc, #28]	; (80045b8 <GainSignalMenuInputHandler+0x24>)
 800459a:	f00a fd67 	bl	800f06c <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800459e:	2001      	movs	r0, #1
 80045a0:	f001 f800 	bl	80055a4 <SM_GetEncoderValue>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f9da 	bl	8005960 <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <GainSignalMenuInputHandler+0x28>)
 80045ae:	2203      	movs	r2, #3
 80045b0:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80045b2:	2307      	movs	r3, #7
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	08011a98 	.word	0x08011a98
 80045bc:	20001f17 	.word	0x20001f17

080045c0 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 80045c4:	4806      	ldr	r0, [pc, #24]	; (80045e0 <GainSignalMenuExitHandler+0x20>)
 80045c6:	f00a fd51 	bl	800f06c <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <GainSignalMenuExitHandler+0x24>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80045d0:	f7fc fdda 	bl	8001188 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <GainSignalMenuExitHandler+0x28>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80045da:	2306      	movs	r3, #6
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	08011ac4 	.word	0x08011ac4
 80045e4:	20001f1c 	.word	0x20001f1c
 80045e8:	20001f17 	.word	0x20001f17

080045ec <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 80045f2:	4813      	ldr	r0, [pc, #76]	; (8004640 <GainSyncMenuEntryHandler+0x54>)
 80045f4:	f00a fd3a 	bl	800f06c <puts>
#endif

	DM_RefreshScreen();
 80045f8:	f7fc fdc6 	bl	8001188 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <GainSyncMenuEntryHandler+0x58>)
 80045fe:	2203      	movs	r2, #3
 8004600:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8004602:	2001      	movs	r0, #1
 8004604:	f000 ffb8 	bl	8005578 <SM_GetOutputChannel>
 8004608:	4603      	mov	r3, r0
 800460a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800460e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8b1a      	ldrh	r2, [r3, #24]
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <GainSyncMenuEntryHandler+0x5c>)
 800461c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <GainSyncMenuEntryHandler+0x5c>)
 8004620:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004624:	62da      	str	r2, [r3, #44]	; 0x2c
 8004626:	e002      	b.n	800462e <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004628:	4808      	ldr	r0, [pc, #32]	; (800464c <GainSyncMenuEntryHandler+0x60>)
 800462a:	f7fc fdf7 	bl	800121c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <GainSyncMenuEntryHandler+0x64>)
 8004630:	2200      	movs	r2, #0
 8004632:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004634:	2308      	movs	r3, #8
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	08011af0 	.word	0x08011af0
 8004644:	20001f1c 	.word	0x20001f1c
 8004648:	40012c00 	.word	0x40012c00
 800464c:	08011a60 	.word	0x08011a60
 8004650:	20001f17 	.word	0x20001f17

08004654 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 8004658:	4807      	ldr	r0, [pc, #28]	; (8004678 <GainSyncMenuInputHandler+0x24>)
 800465a:	f00a fd07 	bl	800f06c <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800465e:	2001      	movs	r0, #1
 8004660:	f000 ffa0 	bl	80055a4 <SM_GetEncoderValue>
 8004664:	4603      	mov	r3, r0
 8004666:	4618      	mov	r0, r3
 8004668:	f001 fe24 	bl	80062b4 <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <GainSyncMenuInputHandler+0x28>)
 800466e:	2203      	movs	r2, #3
 8004670:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004672:	2308      	movs	r3, #8
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	08011b18 	.word	0x08011b18
 800467c:	20001f17 	.word	0x20001f17

08004680 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 8004684:	4806      	ldr	r0, [pc, #24]	; (80046a0 <GainSyncMenuExitHandler+0x20>)
 8004686:	f00a fcf1 	bl	800f06c <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <GainSyncMenuExitHandler+0x24>)
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004690:	f7fc fd7a 	bl	8001188 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004694:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <GainSyncMenuExitHandler+0x28>)
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800469a:	2306      	movs	r3, #6
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	08011b40 	.word	0x08011b40
 80046a4:	20001f1c 	.word	0x20001f1c
 80046a8:	20001f17 	.word	0x20001f17

080046ac <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <ToplevelMenu_getStatus+0x14>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000010 	.word	0x20000010

080046c4 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 80046ce:	4a04      	ldr	r2, [pc, #16]	; (80046e0 <ToplevelMenu_setStatus+0x1c>)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	7013      	strb	r3, [r2, #0]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	20000010 	.word	0x20000010

080046e4 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 80046e8:	4806      	ldr	r0, [pc, #24]	; (8004704 <ToplevelOutputMenuEntryHandler+0x20>)
 80046ea:	f00a fcbf 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 80046ee:	f7fc fd4b 	bl	8001188 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <ToplevelOutputMenuEntryHandler+0x24>)
 80046f4:	2202      	movs	r2, #2
 80046f6:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <ToplevelOutputMenuEntryHandler+0x28>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80046fe:	2301      	movs	r3, #1
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	08011c04 	.word	0x08011c04
 8004708:	20000010 	.word	0x20000010
 800470c:	20001f17 	.word	0x20001f17

08004710 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004714:	4806      	ldr	r0, [pc, #24]	; (8004730 <ToplevelOutputMenuExitHandler+0x20>)
 8004716:	f00a fca9 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 800471a:	f7fc fd35 	bl	8001188 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 800471e:	4b05      	ldr	r3, [pc, #20]	; (8004734 <ToplevelOutputMenuExitHandler+0x24>)
 8004720:	2201      	movs	r2, #1
 8004722:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <ToplevelOutputMenuExitHandler+0x28>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	08011c64 	.word	0x08011c64
 8004734:	20000010 	.word	0x20000010
 8004738:	20001f17 	.word	0x20001f17

0800473c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004740:	4806      	ldr	r0, [pc, #24]	; (800475c <ToplevelInputMenuEntryHandler+0x20>)
 8004742:	f00a fc93 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 8004746:	f7fc fd1f 	bl	8001188 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <ToplevelInputMenuEntryHandler+0x24>)
 800474c:	2203      	movs	r2, #3
 800474e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004750:	4b04      	ldr	r3, [pc, #16]	; (8004764 <ToplevelInputMenuEntryHandler+0x28>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004756:	2302      	movs	r3, #2
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	08011c94 	.word	0x08011c94
 8004760:	20000010 	.word	0x20000010
 8004764:	20001f17 	.word	0x20001f17

08004768 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 800476c:	4806      	ldr	r0, [pc, #24]	; (8004788 <ToplevelInputMenuExitHandler+0x20>)
 800476e:	f00a fc7d 	bl	800f06c <puts>
	#endif

	DM_RefreshScreen();
 8004772:	f7fc fd09 	bl	8001188 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <ToplevelInputMenuExitHandler+0x24>)
 8004778:	2201      	movs	r2, #1
 800477a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <ToplevelInputMenuExitHandler+0x28>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	08011cf4 	.word	0x08011cf4
 800478c:	20000010 	.word	0x20000010
 8004790:	20001f17 	.word	0x20001f17

08004794 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800479c:	4b07      	ldr	r3, [pc, #28]	; (80047bc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4013      	ands	r3, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d101      	bne.n	80047ae <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40010400 	.word	0x40010400

080047c0 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <IM_Init+0x1c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a04      	ldr	r2, [pc, #16]	; (80047dc <IM_Init+0x1c>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6013      	str	r3, [r2, #0]
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40014400 	.word	0x40014400

080047e0 <IM_SWEEPINCREMENT_TIM_IRQHandler>:


void IM_SWEEPINCREMENT_TIM_IRQHandler()
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80047e4:	4b26      	ldr	r3, [pc, #152]	; (8004880 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d11c      	bne.n	800482a <IM_SWEEPINCREMENT_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_arr_bounds)
 80047f0:	4b24      	ldr	r3, [pc, #144]	; (8004884 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa4>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	ee07 3a90 	vmov	s15, r3
 80047f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047fc:	4b22      	ldr	r3, [pc, #136]	; (8004888 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa8>)
 80047fe:	edd3 7a00 	vldr	s15, [r3]
 8004802:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480a:	db09      	blt.n	8004820 <IM_SWEEPINCREMENT_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_arr_bounds;
 800480c:	4b1f      	ldr	r3, [pc, #124]	; (800488c <IM_SWEEPINCREMENT_TIM_IRQHandler+0xac>)
 800480e:	edd3 7a00 	vldr	s15, [r3]
 8004812:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa4>)
 8004814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004818:	ee17 2a90 	vmov	r2, s15
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 800481e:	e029      	b.n	8004874 <IM_SWEEPINCREMENT_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa4>)
 8004822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004824:	3201      	adds	r2, #1
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004828:	e024      	b.n	8004874 <IM_SWEEPINCREMENT_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 800482a:	4b16      	ldr	r3, [pc, #88]	; (8004884 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa4>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d104      	bne.n	800483c <IM_SWEEPINCREMENT_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa4>)
 8004834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004838:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800483a:	e01b      	b.n	8004874 <IM_SWEEPINCREMENT_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_arr_bounds)
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa4>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004848:	4b10      	ldr	r3, [pc, #64]	; (800488c <IM_SWEEPINCREMENT_TIM_IRQHandler+0xac>)
 800484a:	edd3 7a00 	vldr	s15, [r3]
 800484e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004856:	d809      	bhi.n	800486c <IM_SWEEPINCREMENT_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_arr_bounds;
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa8>)
 800485a:	edd3 7a00 	vldr	s15, [r3]
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa4>)
 8004860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004864:	ee17 2a90 	vmov	r2, s15
 8004868:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800486a:	e003      	b.n	8004874 <IM_SWEEPINCREMENT_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <IM_SWEEPINCREMENT_TIM_IRQHandler+0xa4>)
 800486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004870:	3a01      	subs	r2, #1
 8004872:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40013400 	.word	0x40013400
 8004888:	2000000c 	.word	0x2000000c
 800488c:	20000008 	.word	0x20000008

08004890 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <IM_BTN1_EXTI14_Handler+0x44>)
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <IM_BTN1_EXTI14_Handler+0x48>)
 80048a0:	8812      	ldrh	r2, [r2, #0]
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048a8:	dd0c      	ble.n	80048c4 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 80048aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80048ae:	f7ff ff71 	bl	8004794 <LL_EXTI_IsActiveFlag_0_31>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 80048b8:	2001      	movs	r0, #1
 80048ba:	f7ff fa0d 	bl	8003cd8 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 80048be:	4807      	ldr	r0, [pc, #28]	; (80048dc <IM_BTN1_EXTI14_Handler+0x4c>)
 80048c0:	f00a fbd4 	bl	800f06c <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 80048c4:	4a04      	ldr	r2, [pc, #16]	; (80048d8 <IM_BTN1_EXTI14_Handler+0x48>)
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	8013      	strh	r3, [r2, #0]


}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40014400 	.word	0x40014400
 80048d8:	20001f1e 	.word	0x20001f1e
 80048dc:	08011d20 	.word	0x08011d20

080048e0 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <IM_BTN2_EXTI15_Handler+0x44>)
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	4a0e      	ldr	r2, [pc, #56]	; (8004928 <IM_BTN2_EXTI15_Handler+0x48>)
 80048f0:	8812      	ldrh	r2, [r2, #0]
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048f8:	dd0c      	ble.n	8004914 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80048fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80048fe:	f7ff ff49 	bl	8004794 <LL_EXTI_IsActiveFlag_0_31>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004908:	2003      	movs	r0, #3
 800490a:	f7ff f9e5 	bl	8003cd8 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 800490e:	4807      	ldr	r0, [pc, #28]	; (800492c <IM_BTN2_EXTI15_Handler+0x4c>)
 8004910:	f00a fbac 	bl	800f06c <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004914:	4a04      	ldr	r2, [pc, #16]	; (8004928 <IM_BTN2_EXTI15_Handler+0x48>)
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	8013      	strh	r3, [r2, #0]


}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40014400 	.word	0x40014400
 8004928:	20001f20 	.word	0x20001f20
 800492c:	08011d38 	.word	0x08011d38

08004930 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004936:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <IM_BTN3_EXTI0_Handler+0x40>)
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	4a0d      	ldr	r2, [pc, #52]	; (8004974 <IM_BTN3_EXTI0_Handler+0x44>)
 8004940:	8812      	ldrh	r2, [r2, #0]
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004948:	dd0b      	ble.n	8004962 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800494a:	2001      	movs	r0, #1
 800494c:	f7ff ff22 	bl	8004794 <LL_EXTI_IsActiveFlag_0_31>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004956:	2004      	movs	r0, #4
 8004958:	f7ff f9be 	bl	8003cd8 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 800495c:	4806      	ldr	r0, [pc, #24]	; (8004978 <IM_BTN3_EXTI0_Handler+0x48>)
 800495e:	f00a fb85 	bl	800f06c <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <IM_BTN3_EXTI0_Handler+0x44>)
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	8013      	strh	r3, [r2, #0]


}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40014400 	.word	0x40014400
 8004974:	20001f22 	.word	0x20001f22
 8004978:	08011d54 	.word	0x08011d54

0800497c <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <IM_BTN4_EXTI1_Handler+0x40>)
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <IM_BTN4_EXTI1_Handler+0x44>)
 800498c:	8812      	ldrh	r2, [r2, #0]
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004994:	dd0b      	ble.n	80049ae <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004996:	2002      	movs	r0, #2
 8004998:	f7ff fefc 	bl	8004794 <LL_EXTI_IsActiveFlag_0_31>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 80049a2:	2002      	movs	r0, #2
 80049a4:	f7ff f998 	bl	8003cd8 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 80049a8:	4806      	ldr	r0, [pc, #24]	; (80049c4 <IM_BTN4_EXTI1_Handler+0x48>)
 80049aa:	f00a fb5f 	bl	800f06c <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 80049ae:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <IM_BTN4_EXTI1_Handler+0x44>)
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	8013      	strh	r3, [r2, #0]


}
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40014400 	.word	0x40014400
 80049c0:	20001f24 	.word	0x20001f24
 80049c4:	08011d6c 	.word	0x08011d6c

080049c8 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80049ce:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <IM_ENC_EXTI2_Handler+0x40>)
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80049d4:	88fb      	ldrh	r3, [r7, #6]
 80049d6:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <IM_ENC_EXTI2_Handler+0x44>)
 80049d8:	8812      	ldrh	r2, [r2, #0]
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e0:	dd0b      	ble.n	80049fa <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80049e2:	2004      	movs	r0, #4
 80049e4:	f7ff fed6 	bl	8004794 <LL_EXTI_IsActiveFlag_0_31>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80049ee:	2006      	movs	r0, #6
 80049f0:	f7ff f972 	bl	8003cd8 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80049f4:	4806      	ldr	r0, [pc, #24]	; (8004a10 <IM_ENC_EXTI2_Handler+0x48>)
 80049f6:	f00a fb39 	bl	800f06c <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80049fa:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <IM_ENC_EXTI2_Handler+0x44>)
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	8013      	strh	r3, [r2, #0]


}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	20001f26 	.word	0x20001f26
 8004a10:	08011d84 	.word	0x08011d84

08004a14 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004a18:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <IM_ENC_DIRF_Handler+0x30>)
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a24:	d10b      	bne.n	8004a3e <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8004a26:	2005      	movs	r0, #5
 8004a28:	f7ff f956 	bl	8003cd8 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8004a2c:	4806      	ldr	r0, [pc, #24]	; (8004a48 <IM_ENC_DIRF_Handler+0x34>)
 8004a2e:	f00a fb1d 	bl	800f06c <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <IM_ENC_DIRF_Handler+0x30>)
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	4a03      	ldr	r2, [pc, #12]	; (8004a44 <IM_ENC_DIRF_Handler+0x30>)
 8004a38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a3c:	6113      	str	r3, [r2, #16]

	}
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	08011da0 	.word	0x08011da0

08004a4c <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004a50:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <BO_GetBiasPolarity+0x14>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000011 	.word	0x20000011

08004a64 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <BO_GetDcBiasEncoderValue+0x14>)
 8004a6a:	881b      	ldrh	r3, [r3, #0]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000012 	.word	0x20000012

08004a7c <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004a86:	2000      	movs	r0, #0
 8004a88:	f000 fd8c 	bl	80055a4 <SM_GetEncoderValue>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <BO_ModifyOutput+0x84>)
 8004a92:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004a9a:	d214      	bcs.n	8004ac6 <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004a9c:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <BO_ModifyOutput+0x88>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2110      	movs	r1, #16
 8004ab4:	4814      	ldr	r0, [pc, #80]	; (8004b08 <BO_ModifyOutput+0x8c>)
 8004ab6:	f005 fbeb 	bl	800a290 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004aba:	2201      	movs	r2, #1
 8004abc:	2108      	movs	r1, #8
 8004abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ac2:	f006 fac5 	bl	800b050 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004acc:	d314      	bcc.n	8004af8 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <BO_ModifyOutput+0x88>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
 8004ad6:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2110      	movs	r1, #16
 8004ae6:	4808      	ldr	r0, [pc, #32]	; (8004b08 <BO_ModifyOutput+0x8c>)
 8004ae8:	f005 fbd2 	bl	800a290 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004aec:	2200      	movs	r2, #0
 8004aee:	2108      	movs	r1, #8
 8004af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004af4:	f006 faac 	bl	800b050 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000012 	.word	0x20000012
 8004b04:	20000011 	.word	0x20000011
 8004b08:	20002614 	.word	0x20002614

08004b0c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004b10:	2110      	movs	r1, #16
 8004b12:	4803      	ldr	r0, [pc, #12]	; (8004b20 <BO_GetOutputBias+0x14>)
 8004b14:	f005 fc02 	bl	800a31c <HAL_DAC_GetValue>
 8004b18:	4603      	mov	r3, r0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20002614 	.word	0x20002614

08004b24 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	e06b      	b.n	8004c08 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004b30:	493a      	ldr	r1, [pc, #232]	; (8004c1c <DT_InitRegister+0xf8>)
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3308      	adds	r3, #8
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d129      	bne.n	8004b9a <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8004b46:	4935      	ldr	r1, [pc, #212]	; (8004c1c <DT_InitRegister+0xf8>)
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	3304      	adds	r3, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a31      	ldr	r2, [pc, #196]	; (8004c20 <DT_InitRegister+0xfc>)
 8004b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b66:	492d      	ldr	r1, [pc, #180]	; (8004c1c <DT_InitRegister+0xf8>)
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	3310      	adds	r3, #16
 8004b76:	edd3 7a00 	vldr	s15, [r3]
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b82:	ee17 0a90 	vmov	r0, s15
 8004b86:	4925      	ldr	r1, [pc, #148]	; (8004c1c <DT_InitRegister+0xf8>)
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	330c      	adds	r3, #12
 8004b96:	6018      	str	r0, [r3, #0]
 8004b98:	e033      	b.n	8004c02 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 8004b9a:	4920      	ldr	r1, [pc, #128]	; (8004c1c <DT_InitRegister+0xf8>)
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	3304      	adds	r3, #4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <DT_InitRegister+0xfc>)
 8004bae:	fbb2 f1f3 	udiv	r1, r2, r3
 8004bb2:	481a      	ldr	r0, [pc, #104]	; (8004c1c <DT_InitRegister+0xf8>)
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4403      	add	r3, r0
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bd0:	4912      	ldr	r1, [pc, #72]	; (8004c1c <DT_InitRegister+0xf8>)
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	3310      	adds	r3, #16
 8004be0:	edd3 7a00 	vldr	s15, [r3]
 8004be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bec:	ee17 0a90 	vmov	r0, s15
 8004bf0:	490a      	ldr	r1, [pc, #40]	; (8004c1c <DT_InitRegister+0xf8>)
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	330c      	adds	r3, #12
 8004c00:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3301      	adds	r3, #1
 8004c06:	607b      	str	r3, [r7, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b0d      	cmp	r3, #13
 8004c0c:	dd90      	ble.n	8004b30 <DT_InitRegister+0xc>
	}
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000014 	.word	0x20000014
 8004c20:	00155cc0 	.word	0x00155cc0

08004c24 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e016      	b.n	8004c60 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8004c32:	4910      	ldr	r1, [pc, #64]	; (8004c74 <DT_GetRegisterByEnum+0x50>)
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3304      	adds	r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d107      	bne.n	8004c5a <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4a07      	ldr	r2, [pc, #28]	; (8004c74 <DT_GetRegisterByEnum+0x50>)
 8004c56:	4413      	add	r3, r2
 8004c58:	e006      	b.n	8004c68 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b0d      	cmp	r3, #13
 8004c64:	dde5      	ble.n	8004c32 <DT_GetRegisterByEnum+0xe>

	return 0;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	20000014 	.word	0x20000014

08004c78 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f000 fc91 	bl	80055a4 <SM_GetEncoderValue>
 8004c82:	4603      	mov	r3, r0
 8004c84:	461a      	mov	r2, r3
 8004c86:	4b02      	ldr	r3, [pc, #8]	; (8004c90 <FreqO_AdjustFreq+0x18>)
 8004c88:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40013400 	.word	0x40013400

08004c94 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b38      	cmp	r3, #56	; 0x38
 8004ca2:	f200 80b4 	bhi.w	8004e0e <FreqO_ModifyOutput+0x17a>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <FreqO_ModifyOutput+0x18>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004d91 	.word	0x08004d91
 8004cb0:	08004d91 	.word	0x08004d91
 8004cb4:	08004d91 	.word	0x08004d91
 8004cb8:	08004d91 	.word	0x08004d91
 8004cbc:	08004d99 	.word	0x08004d99
 8004cc0:	08004d99 	.word	0x08004d99
 8004cc4:	08004d99 	.word	0x08004d99
 8004cc8:	08004d99 	.word	0x08004d99
 8004ccc:	08004da1 	.word	0x08004da1
 8004cd0:	08004da1 	.word	0x08004da1
 8004cd4:	08004da1 	.word	0x08004da1
 8004cd8:	08004da1 	.word	0x08004da1
 8004cdc:	08004da9 	.word	0x08004da9
 8004ce0:	08004da9 	.word	0x08004da9
 8004ce4:	08004da9 	.word	0x08004da9
 8004ce8:	08004da9 	.word	0x08004da9
 8004cec:	08004db1 	.word	0x08004db1
 8004cf0:	08004db1 	.word	0x08004db1
 8004cf4:	08004db1 	.word	0x08004db1
 8004cf8:	08004db1 	.word	0x08004db1
 8004cfc:	08004db9 	.word	0x08004db9
 8004d00:	08004db9 	.word	0x08004db9
 8004d04:	08004db9 	.word	0x08004db9
 8004d08:	08004db9 	.word	0x08004db9
 8004d0c:	08004dc3 	.word	0x08004dc3
 8004d10:	08004dc3 	.word	0x08004dc3
 8004d14:	08004dc3 	.word	0x08004dc3
 8004d18:	08004dc3 	.word	0x08004dc3
 8004d1c:	08004dcd 	.word	0x08004dcd
 8004d20:	08004dcd 	.word	0x08004dcd
 8004d24:	08004dcd 	.word	0x08004dcd
 8004d28:	08004e0f 	.word	0x08004e0f
 8004d2c:	08004dcd 	.word	0x08004dcd
 8004d30:	08004dd7 	.word	0x08004dd7
 8004d34:	08004dd7 	.word	0x08004dd7
 8004d38:	08004dd7 	.word	0x08004dd7
 8004d3c:	08004dd7 	.word	0x08004dd7
 8004d40:	08004de1 	.word	0x08004de1
 8004d44:	08004de1 	.word	0x08004de1
 8004d48:	08004de1 	.word	0x08004de1
 8004d4c:	08004de1 	.word	0x08004de1
 8004d50:	08004deb 	.word	0x08004deb
 8004d54:	08004deb 	.word	0x08004deb
 8004d58:	08004deb 	.word	0x08004deb
 8004d5c:	08004deb 	.word	0x08004deb
 8004d60:	08004df5 	.word	0x08004df5
 8004d64:	08004df5 	.word	0x08004df5
 8004d68:	08004df5 	.word	0x08004df5
 8004d6c:	08004df5 	.word	0x08004df5
 8004d70:	08004dff 	.word	0x08004dff
 8004d74:	08004dff 	.word	0x08004dff
 8004d78:	08004dff 	.word	0x08004dff
 8004d7c:	08004dff 	.word	0x08004dff
 8004d80:	08004e07 	.word	0x08004e07
 8004d84:	08004e07 	.word	0x08004e07
 8004d88:	08004e07 	.word	0x08004e07
 8004d8c:	08004e07 	.word	0x08004e07
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004d90:	2001      	movs	r0, #1
 8004d92:	f000 f845 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004d96:	e03a      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8004d98:	200a      	movs	r0, #10
 8004d9a:	f000 f841 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004d9e:	e036      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004da0:	2032      	movs	r0, #50	; 0x32
 8004da2:	f000 f83d 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004da6:	e032      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8004da8:	2064      	movs	r0, #100	; 0x64
 8004daa:	f000 f839 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004dae:	e02e      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004db0:	20fa      	movs	r0, #250	; 0xfa
 8004db2:	f000 f835 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004db6:	e02a      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8004db8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004dbc:	f000 f830 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004dc0:	e025      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004dc2:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004dc6:	f000 f82b 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004dca:	e020      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8004dcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dd0:	f000 f826 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004dd4:	e01b      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8004dd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8004dda:	f000 f821 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004dde:	e016      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8004de0:	f242 7010 	movw	r0, #10000	; 0x2710
 8004de4:	f000 f81c 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004de8:	e011      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8004dea:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8004dee:	f000 f817 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004df2:	e00c      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8004df4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004df8:	f000 f812 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004dfc:	e007      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8004dfe:	4806      	ldr	r0, [pc, #24]	; (8004e18 <FreqO_ModifyOutput+0x184>)
 8004e00:	f000 f80e 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004e04:	e003      	b.n	8004e0e <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8004e06:	4805      	ldr	r0, [pc, #20]	; (8004e1c <FreqO_ModifyOutput+0x188>)
 8004e08:	f000 f80a 	bl	8004e20 <FreqO_ApplyPreset>
			break;
 8004e0c:	bf00      	nop
	}

}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	000124f8 	.word	0x000124f8
 8004e1c:	000186a0 	.word	0x000186a0

08004e20 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff fefb 	bl	8004c24 <DT_GetRegisterByEnum>
 8004e2e:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d015      	beq.n	8004e62 <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 8004e36:	4a0d      	ldr	r2, [pc, #52]	; (8004e6c <FreqO_ApplyPreset+0x4c>)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 8004e3e:	4a0b      	ldr	r2, [pc, #44]	; (8004e6c <FreqO_ApplyPreset+0x4c>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f822 	bl	8004e90 <FreqO_FindFPresetObject>
 8004e4c:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 8004e54:	4a06      	ldr	r2, [pc, #24]	; (8004e70 <FreqO_ApplyPreset+0x50>)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8004e5a:	e002      	b.n	8004e62 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8004e5c:	4805      	ldr	r0, [pc, #20]	; (8004e74 <FreqO_ApplyPreset+0x54>)
 8004e5e:	f7fc f9dd 	bl	800121c <DM_SetErrorDebugMsg>
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40013400 	.word	0x40013400
 8004e70:	200001a0 	.word	0x200001a0
 8004e74:	08011db8 	.word	0x08011db8

08004e78 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
	return freq_profile;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <FreqO_GetFPresetObject+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	200001a0 	.word	0x200001a0

08004e90 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e00e      	b.n	8004ebc <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8004e9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ed4 <FreqO_FindFPresetObject+0x44>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d104      	bne.n	8004eb6 <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <FreqO_FindFPresetObject+0x44>)
 8004eb2:	4413      	add	r3, r2
 8004eb4:	e009      	b.n	8004eca <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b0d      	cmp	r3, #13
 8004ec0:	dded      	ble.n	8004e9e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004ec2:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <FreqO_FindFPresetObject+0x48>)
 8004ec4:	f7fc f9aa 	bl	800121c <DM_SetErrorDebugMsg>
	return 0;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000130 	.word	0x20000130
 8004ed8:	08011de0 	.word	0x08011de0

08004edc <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8004ee0:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	2000012c 	.word	0x2000012c

08004ef4 <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
	...

08004f04 <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	2b17      	cmp	r3, #23
 8004f12:	d84b      	bhi.n	8004fac <FuncO_ModifySignalOutput+0xa8>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <FuncO_ModifySignalOutput+0x18>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f7d 	.word	0x08004f7d
 8004f20:	08004f7d 	.word	0x08004f7d
 8004f24:	08004f7d 	.word	0x08004f7d
 8004f28:	08004f85 	.word	0x08004f85
 8004f2c:	08004f85 	.word	0x08004f85
 8004f30:	08004f85 	.word	0x08004f85
 8004f34:	08004f85 	.word	0x08004f85
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08004f8d 	.word	0x08004f8d
 8004f40:	08004f8d 	.word	0x08004f8d
 8004f44:	08004f8d 	.word	0x08004f8d
 8004f48:	08004f95 	.word	0x08004f95
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f95 	.word	0x08004f95
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004f9d 	.word	0x08004f9d
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	08004f9d 	.word	0x08004f9d
 8004f64:	08004f9d 	.word	0x08004f9d
 8004f68:	08004fa5 	.word	0x08004fa5
 8004f6c:	08004fa5 	.word	0x08004fa5
 8004f70:	08004fa5 	.word	0x08004fa5
 8004f74:	08004fa5 	.word	0x08004fa5
 8004f78:	08004fa5 	.word	0x08004fa5
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f000 f871 	bl	8005064 <FuncO_ApplyPresetToSignal>
			break;
 8004f82:	e013      	b.n	8004fac <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 8004f84:	2001      	movs	r0, #1
 8004f86:	f000 f86d 	bl	8005064 <FuncO_ApplyPresetToSignal>
			break;
 8004f8a:	e00f      	b.n	8004fac <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004f8c:	2002      	movs	r0, #2
 8004f8e:	f000 f869 	bl	8005064 <FuncO_ApplyPresetToSignal>
			break;
 8004f92:	e00b      	b.n	8004fac <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 8004f94:	2003      	movs	r0, #3
 8004f96:	f000 f865 	bl	8005064 <FuncO_ApplyPresetToSignal>
			break;
 8004f9a:	e007      	b.n	8004fac <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004f9c:	2004      	movs	r0, #4
 8004f9e:	f000 f861 	bl	8005064 <FuncO_ApplyPresetToSignal>
			break;
 8004fa2:	e003      	b.n	8004fac <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 8004fa4:	2005      	movs	r0, #5
 8004fa6:	f000 f85d 	bl	8005064 <FuncO_ApplyPresetToSignal>
			break;
 8004faa:	bf00      	nop

	}
}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	2b17      	cmp	r3, #23
 8004fc2:	d84b      	bhi.n	800505c <FuncO_ModifySyncOutput+0xa8>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <FuncO_ModifySyncOutput+0x18>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	0800502d 	.word	0x0800502d
 8004fd0:	0800502d 	.word	0x0800502d
 8004fd4:	0800502d 	.word	0x0800502d
 8004fd8:	08005035 	.word	0x08005035
 8004fdc:	08005035 	.word	0x08005035
 8004fe0:	08005035 	.word	0x08005035
 8004fe4:	08005035 	.word	0x08005035
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	0800503d 	.word	0x0800503d
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	08005045 	.word	0x08005045
 8004ffc:	08005045 	.word	0x08005045
 8005000:	08005045 	.word	0x08005045
 8005004:	08005045 	.word	0x08005045
 8005008:	0800504d 	.word	0x0800504d
 800500c:	0800504d 	.word	0x0800504d
 8005010:	0800504d 	.word	0x0800504d
 8005014:	0800504d 	.word	0x0800504d
 8005018:	08005055 	.word	0x08005055
 800501c:	08005055 	.word	0x08005055
 8005020:	08005055 	.word	0x08005055
 8005024:	08005055 	.word	0x08005055
 8005028:	08005055 	.word	0x08005055
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 800502c:	2000      	movs	r0, #0
 800502e:	f000 f873 	bl	8005118 <FuncO_ApplyPresetToSync>
			break;
 8005032:	e013      	b.n	800505c <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 8005034:	2001      	movs	r0, #1
 8005036:	f000 f86f 	bl	8005118 <FuncO_ApplyPresetToSync>
			break;
 800503a:	e00f      	b.n	800505c <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 800503c:	2002      	movs	r0, #2
 800503e:	f000 f86b 	bl	8005118 <FuncO_ApplyPresetToSync>
			break;
 8005042:	e00b      	b.n	800505c <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 8005044:	2003      	movs	r0, #3
 8005046:	f000 f867 	bl	8005118 <FuncO_ApplyPresetToSync>
			break;
 800504a:	e007      	b.n	800505c <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 800504c:	2004      	movs	r0, #4
 800504e:	f000 f863 	bl	8005118 <FuncO_ApplyPresetToSync>
			break;
 8005052:	e003      	b.n	800505c <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 8005054:	2005      	movs	r0, #5
 8005056:	f000 f85f 	bl	8005118 <FuncO_ApplyPresetToSync>
			break;
 800505a:	bf00      	nop

	}
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 8005064:	b590      	push	{r4, r7, lr}
 8005066:	b087      	sub	sp, #28
 8005068:	af02      	add	r7, sp, #8
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800506e:	79fc      	ldrb	r4, [r7, #7]
 8005070:	2000      	movs	r0, #0
 8005072:	f000 fa81 	bl	8005578 <SM_GetOutputChannel>
 8005076:	4601      	mov	r1, r0
 8005078:	4a23      	ldr	r2, [pc, #140]	; (8005108 <FuncO_ApplyPresetToSignal+0xa4>)
 800507a:	00e3      	lsls	r3, r4, #3
 800507c:	4413      	add	r3, r2
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005082:	2000      	movs	r0, #0
 8005084:	f000 fa78 	bl	8005578 <SM_GetOutputChannel>
 8005088:	4603      	mov	r3, r0
 800508a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fb0b 	bl	80056b0 <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800509a:	79fc      	ldrb	r4, [r7, #7]
 800509c:	2000      	movs	r0, #0
 800509e:	f000 fa6b 	bl	8005578 <SM_GetOutputChannel>
 80050a2:	4601      	mov	r1, r0
 80050a4:	00e3      	lsls	r3, r4, #3
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <FuncO_ApplyPresetToSignal+0xa4>)
 80050a8:	4413      	add	r3, r2
 80050aa:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 80050ae:	4817      	ldr	r0, [pc, #92]	; (800510c <FuncO_ApplyPresetToSignal+0xa8>)
 80050b0:	f007 f8f6 	bl	800c2a0 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80050b4:	2100      	movs	r1, #0
 80050b6:	4816      	ldr	r0, [pc, #88]	; (8005110 <FuncO_ApplyPresetToSignal+0xac>)
 80050b8:	f005 f894 	bl	800a1e4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80050bc:	2000      	movs	r0, #0
 80050be:	f000 fa5b 	bl	8005578 <SM_GetOutputChannel>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f103 0208 	add.w	r2, r3, #8
 80050c8:	2300      	movs	r3, #0
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2378      	movs	r3, #120	; 0x78
 80050ce:	2100      	movs	r1, #0
 80050d0:	480f      	ldr	r0, [pc, #60]	; (8005110 <FuncO_ApplyPresetToSignal+0xac>)
 80050d2:	f004 ffc5 	bl	800a060 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80050d6:	2100      	movs	r1, #0
 80050d8:	480e      	ldr	r0, [pc, #56]	; (8005114 <FuncO_ApplyPresetToSignal+0xb0>)
 80050da:	f005 f883 	bl	800a1e4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80050de:	2001      	movs	r0, #1
 80050e0:	f000 fa4a 	bl	8005578 <SM_GetOutputChannel>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f103 0208 	add.w	r2, r3, #8
 80050ea:	2300      	movs	r3, #0
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	2378      	movs	r3, #120	; 0x78
 80050f0:	2100      	movs	r1, #0
 80050f2:	4808      	ldr	r0, [pc, #32]	; (8005114 <FuncO_ApplyPresetToSignal+0xb0>)
 80050f4:	f004 ffb4 	bl	800a060 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 80050f8:	4804      	ldr	r0, [pc, #16]	; (800510c <FuncO_ApplyPresetToSignal+0xa8>)
 80050fa:	f007 f8a3 	bl	800c244 <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	bd90      	pop	{r4, r7, pc}
 8005106:	bf00      	nop
 8005108:	200001a8 	.word	0x200001a8
 800510c:	2000274c 	.word	0x2000274c
 8005110:	20002614 	.word	0x20002614
 8005114:	20002600 	.word	0x20002600

08005118 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b087      	sub	sp, #28
 800511c:	af02      	add	r7, sp, #8
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005122:	79fc      	ldrb	r4, [r7, #7]
 8005124:	2001      	movs	r0, #1
 8005126:	f000 fa27 	bl	8005578 <SM_GetOutputChannel>
 800512a:	4601      	mov	r1, r0
 800512c:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <FuncO_ApplyPresetToSync+0xb0>)
 800512e:	00e3      	lsls	r3, r4, #3
 8005130:	4413      	add	r3, r2
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8005136:	2001      	movs	r0, #1
 8005138:	f000 fa1e 	bl	8005578 <SM_GetOutputChannel>
 800513c:	4603      	mov	r3, r0
 800513e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fadf 	bl	800570c <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800514e:	79fc      	ldrb	r4, [r7, #7]
 8005150:	2001      	movs	r0, #1
 8005152:	f000 fa11 	bl	8005578 <SM_GetOutputChannel>
 8005156:	4601      	mov	r1, r0
 8005158:	00e3      	lsls	r3, r4, #3
 800515a:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <FuncO_ApplyPresetToSync+0xb0>)
 800515c:	4413      	add	r3, r2
 800515e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005162:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <FuncO_ApplyPresetToSync+0xb4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a19      	ldr	r2, [pc, #100]	; (80051cc <FuncO_ApplyPresetToSync+0xb4>)
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800516e:	2100      	movs	r1, #0
 8005170:	4817      	ldr	r0, [pc, #92]	; (80051d0 <FuncO_ApplyPresetToSync+0xb8>)
 8005172:	f005 f837 	bl	800a1e4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005176:	2001      	movs	r0, #1
 8005178:	f000 f9fe 	bl	8005578 <SM_GetOutputChannel>
 800517c:	4603      	mov	r3, r0
 800517e:	f103 0208 	add.w	r2, r3, #8
 8005182:	2300      	movs	r3, #0
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	2378      	movs	r3, #120	; 0x78
 8005188:	2100      	movs	r1, #0
 800518a:	4811      	ldr	r0, [pc, #68]	; (80051d0 <FuncO_ApplyPresetToSync+0xb8>)
 800518c:	f004 ff68 	bl	800a060 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005190:	2100      	movs	r1, #0
 8005192:	4810      	ldr	r0, [pc, #64]	; (80051d4 <FuncO_ApplyPresetToSync+0xbc>)
 8005194:	f005 f826 	bl	800a1e4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005198:	2000      	movs	r0, #0
 800519a:	f000 f9ed 	bl	8005578 <SM_GetOutputChannel>
 800519e:	4603      	mov	r3, r0
 80051a0:	f103 0208 	add.w	r2, r3, #8
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	2378      	movs	r3, #120	; 0x78
 80051aa:	2100      	movs	r1, #0
 80051ac:	4809      	ldr	r0, [pc, #36]	; (80051d4 <FuncO_ApplyPresetToSync+0xbc>)
 80051ae:	f004 ff57 	bl	800a060 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <FuncO_ApplyPresetToSync+0xb4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a05      	ldr	r2, [pc, #20]	; (80051cc <FuncO_ApplyPresetToSync+0xb4>)
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	6013      	str	r3, [r2, #0]
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	200001a8 	.word	0x200001a8
 80051cc:	40013400 	.word	0x40013400
 80051d0:	20002600 	.word	0x20002600
 80051d4:	20002614 	.word	0x20002614

080051d8 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 80051dc:	4b03      	ldr	r3, [pc, #12]	; (80051ec <FuncO_GetFuncPresetEncoderRange+0x14>)
 80051de:	781b      	ldrb	r3, [r3, #0]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	200001a4 	.word	0x200001a4

080051f0 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 80051fa:	79fc      	ldrb	r4, [r7, #7]
 80051fc:	2000      	movs	r0, #0
 80051fe:	f000 f9bb 	bl	8005578 <SM_GetOutputChannel>
 8005202:	4601      	mov	r1, r0
 8005204:	4623      	mov	r3, r4
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4423      	add	r3, r4
 800520a:	4a4f      	ldr	r2, [pc, #316]	; (8005348 <GO_ApplyPresetToSignal+0x158>)
 800520c:	4413      	add	r3, r2
 800520e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	2b07      	cmp	r3, #7
 8005216:	f200 8093 	bhi.w	8005340 <GO_ApplyPresetToSignal+0x150>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <GO_ApplyPresetToSignal+0x30>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005241 	.word	0x08005241
 8005224:	08005261 	.word	0x08005261
 8005228:	08005281 	.word	0x08005281
 800522c:	080052a1 	.word	0x080052a1
 8005230:	080052c1 	.word	0x080052c1
 8005234:	080052e1 	.word	0x080052e1
 8005238:	08005301 	.word	0x08005301
 800523c:	08005321 	.word	0x08005321
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005240:	2200      	movs	r2, #0
 8005242:	2101      	movs	r1, #1
 8005244:	4841      	ldr	r0, [pc, #260]	; (800534c <GO_ApplyPresetToSignal+0x15c>)
 8005246:	f005 ff03 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800524a:	2200      	movs	r2, #0
 800524c:	2120      	movs	r1, #32
 800524e:	4840      	ldr	r0, [pc, #256]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 8005250:	f005 fefe 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005254:	2200      	movs	r2, #0
 8005256:	2110      	movs	r1, #16
 8005258:	483d      	ldr	r0, [pc, #244]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 800525a:	f005 fef9 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 800525e:	e06f      	b.n	8005340 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005260:	2201      	movs	r2, #1
 8005262:	2101      	movs	r1, #1
 8005264:	4839      	ldr	r0, [pc, #228]	; (800534c <GO_ApplyPresetToSignal+0x15c>)
 8005266:	f005 fef3 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800526a:	2200      	movs	r2, #0
 800526c:	2120      	movs	r1, #32
 800526e:	4838      	ldr	r0, [pc, #224]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 8005270:	f005 feee 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005274:	2200      	movs	r2, #0
 8005276:	2110      	movs	r1, #16
 8005278:	4835      	ldr	r0, [pc, #212]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 800527a:	f005 fee9 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 800527e:	e05f      	b.n	8005340 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005280:	2200      	movs	r2, #0
 8005282:	2101      	movs	r1, #1
 8005284:	4831      	ldr	r0, [pc, #196]	; (800534c <GO_ApplyPresetToSignal+0x15c>)
 8005286:	f005 fee3 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800528a:	2201      	movs	r2, #1
 800528c:	2120      	movs	r1, #32
 800528e:	4830      	ldr	r0, [pc, #192]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 8005290:	f005 fede 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005294:	2200      	movs	r2, #0
 8005296:	2110      	movs	r1, #16
 8005298:	482d      	ldr	r0, [pc, #180]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 800529a:	f005 fed9 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 800529e:	e04f      	b.n	8005340 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80052a0:	2201      	movs	r2, #1
 80052a2:	2101      	movs	r1, #1
 80052a4:	4829      	ldr	r0, [pc, #164]	; (800534c <GO_ApplyPresetToSignal+0x15c>)
 80052a6:	f005 fed3 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80052aa:	2201      	movs	r2, #1
 80052ac:	2120      	movs	r1, #32
 80052ae:	4828      	ldr	r0, [pc, #160]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 80052b0:	f005 fece 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80052b4:	2200      	movs	r2, #0
 80052b6:	2110      	movs	r1, #16
 80052b8:	4825      	ldr	r0, [pc, #148]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 80052ba:	f005 fec9 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 80052be:	e03f      	b.n	8005340 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80052c0:	2200      	movs	r2, #0
 80052c2:	2101      	movs	r1, #1
 80052c4:	4821      	ldr	r0, [pc, #132]	; (800534c <GO_ApplyPresetToSignal+0x15c>)
 80052c6:	f005 fec3 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2120      	movs	r1, #32
 80052ce:	4820      	ldr	r0, [pc, #128]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 80052d0:	f005 febe 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80052d4:	2201      	movs	r2, #1
 80052d6:	2110      	movs	r1, #16
 80052d8:	481d      	ldr	r0, [pc, #116]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 80052da:	f005 feb9 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 80052de:	e02f      	b.n	8005340 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80052e0:	2201      	movs	r2, #1
 80052e2:	2101      	movs	r1, #1
 80052e4:	4819      	ldr	r0, [pc, #100]	; (800534c <GO_ApplyPresetToSignal+0x15c>)
 80052e6:	f005 feb3 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2120      	movs	r1, #32
 80052ee:	4818      	ldr	r0, [pc, #96]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 80052f0:	f005 feae 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80052f4:	2201      	movs	r2, #1
 80052f6:	2110      	movs	r1, #16
 80052f8:	4815      	ldr	r0, [pc, #84]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 80052fa:	f005 fea9 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 80052fe:	e01f      	b.n	8005340 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005300:	2200      	movs	r2, #0
 8005302:	2101      	movs	r1, #1
 8005304:	4811      	ldr	r0, [pc, #68]	; (800534c <GO_ApplyPresetToSignal+0x15c>)
 8005306:	f005 fea3 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800530a:	2201      	movs	r2, #1
 800530c:	2120      	movs	r1, #32
 800530e:	4810      	ldr	r0, [pc, #64]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 8005310:	f005 fe9e 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005314:	2201      	movs	r2, #1
 8005316:	2110      	movs	r1, #16
 8005318:	480d      	ldr	r0, [pc, #52]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 800531a:	f005 fe99 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 800531e:	e00f      	b.n	8005340 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005320:	2201      	movs	r2, #1
 8005322:	2101      	movs	r1, #1
 8005324:	4809      	ldr	r0, [pc, #36]	; (800534c <GO_ApplyPresetToSignal+0x15c>)
 8005326:	f005 fe93 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800532a:	2201      	movs	r2, #1
 800532c:	2120      	movs	r1, #32
 800532e:	4808      	ldr	r0, [pc, #32]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 8005330:	f005 fe8e 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005334:	2201      	movs	r2, #1
 8005336:	2110      	movs	r1, #16
 8005338:	4805      	ldr	r0, [pc, #20]	; (8005350 <GO_ApplyPresetToSignal+0x160>)
 800533a:	f005 fe89 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 800533e:	bf00      	nop
	}
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}
 8005348:	200001d8 	.word	0x200001d8
 800534c:	48000400 	.word	0x48000400
 8005350:	48000800 	.word	0x48000800

08005354 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800535e:	79fc      	ldrb	r4, [r7, #7]
 8005360:	2001      	movs	r0, #1
 8005362:	f000 f909 	bl	8005578 <SM_GetOutputChannel>
 8005366:	4601      	mov	r1, r0
 8005368:	4623      	mov	r3, r4
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4423      	add	r3, r4
 800536e:	4a4f      	ldr	r2, [pc, #316]	; (80054ac <GO_ApplyPresetToSync+0x158>)
 8005370:	4413      	add	r3, r2
 8005372:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	2b07      	cmp	r3, #7
 800537a:	f200 8093 	bhi.w	80054a4 <GO_ApplyPresetToSync+0x150>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <GO_ApplyPresetToSync+0x30>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	080053a5 	.word	0x080053a5
 8005388:	080053c5 	.word	0x080053c5
 800538c:	080053e5 	.word	0x080053e5
 8005390:	08005405 	.word	0x08005405
 8005394:	08005425 	.word	0x08005425
 8005398:	08005445 	.word	0x08005445
 800539c:	08005465 	.word	0x08005465
 80053a0:	08005485 	.word	0x08005485
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80053a4:	2200      	movs	r2, #0
 80053a6:	2101      	movs	r1, #1
 80053a8:	4841      	ldr	r0, [pc, #260]	; (80054b0 <GO_ApplyPresetToSync+0x15c>)
 80053aa:	f005 fe51 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80053ae:	2200      	movs	r2, #0
 80053b0:	2120      	movs	r1, #32
 80053b2:	4840      	ldr	r0, [pc, #256]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 80053b4:	f005 fe4c 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80053b8:	2200      	movs	r2, #0
 80053ba:	2110      	movs	r1, #16
 80053bc:	483d      	ldr	r0, [pc, #244]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 80053be:	f005 fe47 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 80053c2:	e06f      	b.n	80054a4 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80053c4:	2201      	movs	r2, #1
 80053c6:	2101      	movs	r1, #1
 80053c8:	4839      	ldr	r0, [pc, #228]	; (80054b0 <GO_ApplyPresetToSync+0x15c>)
 80053ca:	f005 fe41 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2120      	movs	r1, #32
 80053d2:	4838      	ldr	r0, [pc, #224]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 80053d4:	f005 fe3c 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80053d8:	2200      	movs	r2, #0
 80053da:	2110      	movs	r1, #16
 80053dc:	4835      	ldr	r0, [pc, #212]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 80053de:	f005 fe37 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 80053e2:	e05f      	b.n	80054a4 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2101      	movs	r1, #1
 80053e8:	4831      	ldr	r0, [pc, #196]	; (80054b0 <GO_ApplyPresetToSync+0x15c>)
 80053ea:	f005 fe31 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80053ee:	2201      	movs	r2, #1
 80053f0:	2120      	movs	r1, #32
 80053f2:	4830      	ldr	r0, [pc, #192]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 80053f4:	f005 fe2c 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80053f8:	2200      	movs	r2, #0
 80053fa:	2110      	movs	r1, #16
 80053fc:	482d      	ldr	r0, [pc, #180]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 80053fe:	f005 fe27 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 8005402:	e04f      	b.n	80054a4 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005404:	2201      	movs	r2, #1
 8005406:	2101      	movs	r1, #1
 8005408:	4829      	ldr	r0, [pc, #164]	; (80054b0 <GO_ApplyPresetToSync+0x15c>)
 800540a:	f005 fe21 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800540e:	2201      	movs	r2, #1
 8005410:	2120      	movs	r1, #32
 8005412:	4828      	ldr	r0, [pc, #160]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 8005414:	f005 fe1c 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005418:	2200      	movs	r2, #0
 800541a:	2110      	movs	r1, #16
 800541c:	4825      	ldr	r0, [pc, #148]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 800541e:	f005 fe17 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 8005422:	e03f      	b.n	80054a4 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005424:	2200      	movs	r2, #0
 8005426:	2101      	movs	r1, #1
 8005428:	4821      	ldr	r0, [pc, #132]	; (80054b0 <GO_ApplyPresetToSync+0x15c>)
 800542a:	f005 fe11 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800542e:	2200      	movs	r2, #0
 8005430:	2120      	movs	r1, #32
 8005432:	4820      	ldr	r0, [pc, #128]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 8005434:	f005 fe0c 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005438:	2201      	movs	r2, #1
 800543a:	2110      	movs	r1, #16
 800543c:	481d      	ldr	r0, [pc, #116]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 800543e:	f005 fe07 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 8005442:	e02f      	b.n	80054a4 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005444:	2201      	movs	r2, #1
 8005446:	2101      	movs	r1, #1
 8005448:	4819      	ldr	r0, [pc, #100]	; (80054b0 <GO_ApplyPresetToSync+0x15c>)
 800544a:	f005 fe01 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800544e:	2200      	movs	r2, #0
 8005450:	2120      	movs	r1, #32
 8005452:	4818      	ldr	r0, [pc, #96]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 8005454:	f005 fdfc 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005458:	2201      	movs	r2, #1
 800545a:	2110      	movs	r1, #16
 800545c:	4815      	ldr	r0, [pc, #84]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 800545e:	f005 fdf7 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 8005462:	e01f      	b.n	80054a4 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005464:	2200      	movs	r2, #0
 8005466:	2101      	movs	r1, #1
 8005468:	4811      	ldr	r0, [pc, #68]	; (80054b0 <GO_ApplyPresetToSync+0x15c>)
 800546a:	f005 fdf1 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800546e:	2201      	movs	r2, #1
 8005470:	2120      	movs	r1, #32
 8005472:	4810      	ldr	r0, [pc, #64]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 8005474:	f005 fdec 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005478:	2201      	movs	r2, #1
 800547a:	2110      	movs	r1, #16
 800547c:	480d      	ldr	r0, [pc, #52]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 800547e:	f005 fde7 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 8005482:	e00f      	b.n	80054a4 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005484:	2201      	movs	r2, #1
 8005486:	2101      	movs	r1, #1
 8005488:	4809      	ldr	r0, [pc, #36]	; (80054b0 <GO_ApplyPresetToSync+0x15c>)
 800548a:	f005 fde1 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800548e:	2201      	movs	r2, #1
 8005490:	2120      	movs	r1, #32
 8005492:	4808      	ldr	r0, [pc, #32]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 8005494:	f005 fddc 	bl	800b050 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005498:	2201      	movs	r2, #1
 800549a:	2110      	movs	r1, #16
 800549c:	4805      	ldr	r0, [pc, #20]	; (80054b4 <GO_ApplyPresetToSync+0x160>)
 800549e:	f005 fdd7 	bl	800b050 <HAL_GPIO_WritePin>
			break;
 80054a2:	bf00      	nop
	}
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd90      	pop	{r4, r7, pc}
 80054ac:	200001d8 	.word	0x200001d8
 80054b0:	48000400 	.word	0x48000400
 80054b4:	48000800 	.word	0x48000800

080054b8 <SM_Init>:
sOutputChannel_t SyncChannel;



void SM_Init()
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0

	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 80054be:	4b28      	ldr	r3, [pc, #160]	; (8005560 <SM_Init+0xa8>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80054c4:	4b27      	ldr	r3, [pc, #156]	; (8005564 <SM_Init+0xac>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a25      	ldr	r2, [pc, #148]	; (8005560 <SM_Init+0xa8>)
 80054ca:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80054cc:	4b24      	ldr	r3, [pc, #144]	; (8005560 <SM_Init+0xa8>)
 80054ce:	4a25      	ldr	r2, [pc, #148]	; (8005564 <SM_Init+0xac>)
 80054d0:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80054d4:	2300      	movs	r3, #0
 80054d6:	607b      	str	r3, [r7, #4]
 80054d8:	e00b      	b.n	80054f2 <SM_Init+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80054da:	4a23      	ldr	r2, [pc, #140]	; (8005568 <SM_Init+0xb0>)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054e2:	491f      	ldr	r1, [pc, #124]	; (8005560 <SM_Init+0xa8>)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3302      	adds	r3, #2
 80054e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3301      	adds	r3, #1
 80054f0:	607b      	str	r3, [r7, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b77      	cmp	r3, #119	; 0x77
 80054f6:	ddf0      	ble.n	80054da <SM_Init+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80054f8:	4b19      	ldr	r3, [pc, #100]	; (8005560 <SM_Init+0xa8>)
 80054fa:	4a1c      	ldr	r2, [pc, #112]	; (800556c <SM_Init+0xb4>)
 80054fc:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <SM_Init+0xa8>)
 8005502:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <SM_Init+0xb8>)
 8005504:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <SM_Init+0xbc>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <SM_Init+0xac>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <SM_Init+0xbc>)
 8005514:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005516:	4b17      	ldr	r3, [pc, #92]	; (8005574 <SM_Init+0xbc>)
 8005518:	4a12      	ldr	r2, [pc, #72]	; (8005564 <SM_Init+0xac>)
 800551a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	e00b      	b.n	800553c <SM_Init+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005524:	4a10      	ldr	r2, [pc, #64]	; (8005568 <SM_Init+0xb0>)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800552c:	4911      	ldr	r1, [pc, #68]	; (8005574 <SM_Init+0xbc>)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	3302      	adds	r3, #2
 8005532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b77      	cmp	r3, #119	; 0x77
 8005540:	ddf0      	ble.n	8005524 <SM_Init+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005542:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <SM_Init+0xbc>)
 8005544:	4a09      	ldr	r2, [pc, #36]	; (800556c <SM_Init+0xb4>)
 8005546:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <SM_Init+0xbc>)
 800554c:	4a08      	ldr	r2, [pc, #32]	; (8005570 <SM_Init+0xb8>)
 800554e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	2000213c 	.word	0x2000213c
 8005564:	200001a8 	.word	0x200001a8
 8005568:	2000157c 	.word	0x2000157c
 800556c:	20000bac 	.word	0x20000bac
 8005570:	200001db 	.word	0x200001db
 8005574:	20001f48 	.word	0x20001f48

08005578 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005588:	4b04      	ldr	r3, [pc, #16]	; (800559c <SM_GetOutputChannel+0x24>)
 800558a:	e000      	b.n	800558e <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <SM_GetOutputChannel+0x28>)
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	2000213c 	.word	0x2000213c
 80055a0:	20001f48 	.word	0x20001f48

080055a4 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <SM_GetEncoderValue+0x34>)
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <SM_GetEncoderValue+0x34>)
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	b29b      	uxth	r3, r3
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	e002      	b.n	80055cc <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80055c6:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <SM_GetEncoderValue+0x34>)
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	b29b      	uxth	r3, r3
	}
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	40012c00 	.word	0x40012c00

080055dc <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 80055e2:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <SM_GetOutputInHertz+0x7c>)
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <SM_GetOutputInHertz+0x16>
 80055ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80055ee:	60bb      	str	r3, [r7, #8]
 80055f0:	e007      	b.n	8005602 <SM_GetOutputInHertz+0x26>
 80055f2:	4b19      	ldr	r3, [pc, #100]	; (8005658 <SM_GetOutputInHertz+0x7c>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fe:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8005602:	4b15      	ldr	r3, [pc, #84]	; (8005658 <SM_GetOutputInHertz+0x7c>)
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <SM_GetOutputInHertz+0x36>
 800560a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	e007      	b.n	8005622 <SM_GetOutputInHertz+0x46>
 8005612:	4b11      	ldr	r3, [pc, #68]	; (8005658 <SM_GetOutputInHertz+0x7c>)
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8005622:	ed97 7a02 	vldr	s14, [r7, #8]
 8005626:	edd7 7a01 	vldr	s15, [r7, #4]
 800562a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800562e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800565c <SM_GetOutputInHertz+0x80>
 8005632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005636:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 800563a:	edd7 7a03 	vldr	s15, [r7, #12]
 800563e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005660 <SM_GetOutputInHertz+0x84>
 8005642:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005646:	eef0 7a66 	vmov.f32	s15, s13
}
 800564a:	eeb0 0a67 	vmov.f32	s0, s15
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40013400 	.word	0x40013400
 800565c:	4d2037a0 	.word	0x4d2037a0
 8005660:	42f00000 	.word	0x42f00000

08005664 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8005670:	887b      	ldrh	r3, [r7, #2]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <SM_ConvertPeriodToHertz+0x16>
 8005676:	2301      	movs	r3, #1
 8005678:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80056ac <SM_ConvertPeriodToHertz+0x48>
 8005696:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800569a:	eef0 7a66 	vmov.f32	s15, s13
}
 800569e:	eeb0 0a67 	vmov.f32	s0, s15
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	4d2037a0 	.word	0x4d2037a0

080056b0 <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80056ba:	79fa      	ldrb	r2, [r7, #7]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4a10      	ldr	r2, [pc, #64]	; (8005708 <VPP_ApplyPresetToSignal+0x58>)
 80056c6:	4413      	add	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80056ca:	2000      	movs	r0, #0
 80056cc:	f7ff ff54 	bl	8005578 <SM_GetOutputChannel>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	7a1b      	ldrb	r3, [r3, #8]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fd87 	bl	80051f0 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8b1b      	ldrh	r3, [r3, #24]
 80056f2:	4618      	mov	r0, r3
 80056f4:	eef0 0a47 	vmov.f32	s1, s14
 80056f8:	eeb0 0a67 	vmov.f32	s0, s15
 80056fc:	f000 f834 	bl	8005768 <_ProcessSignalDataTable>


}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	200001f0 	.word	0x200001f0

0800570c <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005716:	79fa      	ldrb	r2, [r7, #7]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4a10      	ldr	r2, [pc, #64]	; (8005764 <VPP_ApplyPresetToSync+0x58>)
 8005722:	4413      	add	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 8005726:	2001      	movs	r0, #1
 8005728:	f7ff ff26 	bl	8005578 <SM_GetOutputChannel>
 800572c:	4602      	mov	r2, r0
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	7a1b      	ldrb	r3, [r3, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fe0b 	bl	8005354 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	edd3 7a04 	vldr	s15, [r3, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	ed93 7a05 	vldr	s14, [r3, #20]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8b1b      	ldrh	r3, [r3, #24]
 800574e:	4618      	mov	r0, r3
 8005750:	eef0 0a47 	vmov.f32	s1, s14
 8005754:	eeb0 0a67 	vmov.f32	s0, s15
 8005758:	f000 f884 	bl	8005864 <_ProcessSyncDataTable>



}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	200001f0 	.word	0x200001f0

08005768 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005772:	edc7 0a02 	vstr	s1, [r7, #8]
 8005776:	4603      	mov	r3, r0
 8005778:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e00f      	b.n	80057a0 <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 8005780:	2000      	movs	r0, #0
 8005782:	f7ff fef9 	bl	8005578 <SM_GetOutputChannel>
 8005786:	4603      	mov	r3, r0
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4933      	ldr	r1, [pc, #204]	; (8005860 <_ProcessSignalDataTable+0xf8>)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b77      	cmp	r3, #119	; 0x77
 80057a4:	ddec      	ble.n	8005780 <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80057a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80057aa:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	089b      	lsrs	r3, r3, #2
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c0:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e02e      	b.n	8005828 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80057ca:	4a25      	ldr	r2, [pc, #148]	; (8005860 <_ProcessSignalDataTable+0xf8>)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057da:	edd7 7a03 	vldr	s15, [r7, #12]
 80057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e6:	ee17 1a90 	vmov	r1, s15
 80057ea:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <_ProcessSignalDataTable+0xf8>)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80057f2:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <_ProcessSignalDataTable+0xf8>)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005802:	edd7 7a06 	vldr	s15, [r7, #24]
 8005806:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800580a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800580e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005816:	ee17 1a90 	vmov	r1, s15
 800581a:	4a11      	ldr	r2, [pc, #68]	; (8005860 <_ProcessSignalDataTable+0xf8>)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	3301      	adds	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b77      	cmp	r3, #119	; 0x77
 800582c:	ddcd      	ble.n	80057ca <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800582e:	2300      	movs	r3, #0
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	e00e      	b.n	8005852 <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005834:	2000      	movs	r0, #0
 8005836:	f7ff fe9f 	bl	8005578 <SM_GetOutputChannel>
 800583a:	4601      	mov	r1, r0
 800583c:	4a08      	ldr	r2, [pc, #32]	; (8005860 <_ProcessSignalDataTable+0xf8>)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	3302      	adds	r3, #2
 8005848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	3301      	adds	r3, #1
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b77      	cmp	r3, #119	; 0x77
 8005856:	dded      	ble.n	8005834 <_ProcessSignalDataTable+0xcc>
	}
}
 8005858:	bf00      	nop
 800585a:	3720      	adds	r7, #32
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20002330 	.word	0x20002330

08005864 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	ed87 0a03 	vstr	s0, [r7, #12]
 800586e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005872:	4603      	mov	r3, r0
 8005874:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
 800587a:	e00f      	b.n	800589c <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 800587c:	2001      	movs	r0, #1
 800587e:	f7ff fe7b 	bl	8005578 <SM_GetOutputChannel>
 8005882:	4603      	mov	r3, r0
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4933      	ldr	r1, [pc, #204]	; (800595c <_ProcessSyncDataTable+0xf8>)
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	3301      	adds	r3, #1
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b77      	cmp	r3, #119	; 0x77
 80058a0:	ddec      	ble.n	800587c <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80058a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80058a6:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d008      	beq.n	80058c0 <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	089b      	lsrs	r3, r3, #2
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058bc:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e02e      	b.n	8005924 <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80058c6:	4a25      	ldr	r2, [pc, #148]	; (800595c <_ProcessSyncDataTable+0xf8>)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80058da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e2:	ee17 1a90 	vmov	r1, s15
 80058e6:	4a1d      	ldr	r2, [pc, #116]	; (800595c <_ProcessSyncDataTable+0xf8>)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80058ee:	4a1b      	ldr	r2, [pc, #108]	; (800595c <_ProcessSyncDataTable+0xf8>)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8005902:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005906:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800590a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800590e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005912:	ee17 1a90 	vmov	r1, s15
 8005916:	4a11      	ldr	r2, [pc, #68]	; (800595c <_ProcessSyncDataTable+0xf8>)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3301      	adds	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b77      	cmp	r3, #119	; 0x77
 8005928:	ddcd      	ble.n	80058c6 <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e00e      	b.n	800594e <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005930:	2001      	movs	r0, #1
 8005932:	f7ff fe21 	bl	8005578 <SM_GetOutputChannel>
 8005936:	4601      	mov	r1, r0
 8005938:	4a08      	ldr	r2, [pc, #32]	; (800595c <_ProcessSyncDataTable+0xf8>)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3302      	adds	r3, #2
 8005944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	3301      	adds	r3, #1
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b77      	cmp	r3, #119	; 0x77
 8005952:	dded      	ble.n	8005930 <_ProcessSyncDataTable+0xcc>
	}
}
 8005954:	bf00      	nop
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20002330 	.word	0x20002330

08005960 <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005970:	f200 849a 	bhi.w	80062a8 <VPP_ModifySignalOutput+0x948>
 8005974:	a201      	add	r2, pc, #4	; (adr r2, 800597c <VPP_ModifySignalOutput+0x1c>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	08005f99 	.word	0x08005f99
 8005980:	08005f99 	.word	0x08005f99
 8005984:	08005f99 	.word	0x08005f99
 8005988:	08005fa1 	.word	0x08005fa1
 800598c:	08005fa1 	.word	0x08005fa1
 8005990:	08005fa1 	.word	0x08005fa1
 8005994:	08005fa1 	.word	0x08005fa1
 8005998:	08005fa9 	.word	0x08005fa9
 800599c:	08005fa9 	.word	0x08005fa9
 80059a0:	08005fa9 	.word	0x08005fa9
 80059a4:	08005fa9 	.word	0x08005fa9
 80059a8:	08005fb1 	.word	0x08005fb1
 80059ac:	08005fb1 	.word	0x08005fb1
 80059b0:	08005fb1 	.word	0x08005fb1
 80059b4:	08005fb1 	.word	0x08005fb1
 80059b8:	08005fb9 	.word	0x08005fb9
 80059bc:	08005fb9 	.word	0x08005fb9
 80059c0:	08005fb9 	.word	0x08005fb9
 80059c4:	08005fb9 	.word	0x08005fb9
 80059c8:	08005fc1 	.word	0x08005fc1
 80059cc:	08005fc1 	.word	0x08005fc1
 80059d0:	08005fc1 	.word	0x08005fc1
 80059d4:	08005fc1 	.word	0x08005fc1
 80059d8:	08005fc9 	.word	0x08005fc9
 80059dc:	08005fc9 	.word	0x08005fc9
 80059e0:	08005fc9 	.word	0x08005fc9
 80059e4:	08005fc9 	.word	0x08005fc9
 80059e8:	08005fd1 	.word	0x08005fd1
 80059ec:	08005fd1 	.word	0x08005fd1
 80059f0:	08005fd1 	.word	0x08005fd1
 80059f4:	08005fd1 	.word	0x08005fd1
 80059f8:	08005fd9 	.word	0x08005fd9
 80059fc:	08005fd9 	.word	0x08005fd9
 8005a00:	08005fd9 	.word	0x08005fd9
 8005a04:	08005fd9 	.word	0x08005fd9
 8005a08:	08005fe1 	.word	0x08005fe1
 8005a0c:	08005fe1 	.word	0x08005fe1
 8005a10:	08005fe1 	.word	0x08005fe1
 8005a14:	08005fe1 	.word	0x08005fe1
 8005a18:	08005fe9 	.word	0x08005fe9
 8005a1c:	08005fe9 	.word	0x08005fe9
 8005a20:	08005fe9 	.word	0x08005fe9
 8005a24:	08005fe9 	.word	0x08005fe9
 8005a28:	08005ff1 	.word	0x08005ff1
 8005a2c:	08005ff1 	.word	0x08005ff1
 8005a30:	08005ff1 	.word	0x08005ff1
 8005a34:	08005ff1 	.word	0x08005ff1
 8005a38:	08005ff9 	.word	0x08005ff9
 8005a3c:	08005ff9 	.word	0x08005ff9
 8005a40:	08005ff9 	.word	0x08005ff9
 8005a44:	08005ff9 	.word	0x08005ff9
 8005a48:	08006001 	.word	0x08006001
 8005a4c:	08006001 	.word	0x08006001
 8005a50:	08006001 	.word	0x08006001
 8005a54:	08006001 	.word	0x08006001
 8005a58:	08006009 	.word	0x08006009
 8005a5c:	08006009 	.word	0x08006009
 8005a60:	08006009 	.word	0x08006009
 8005a64:	08006009 	.word	0x08006009
 8005a68:	08006011 	.word	0x08006011
 8005a6c:	08006011 	.word	0x08006011
 8005a70:	08006011 	.word	0x08006011
 8005a74:	08006011 	.word	0x08006011
 8005a78:	08006019 	.word	0x08006019
 8005a7c:	08006019 	.word	0x08006019
 8005a80:	08006019 	.word	0x08006019
 8005a84:	08006019 	.word	0x08006019
 8005a88:	08006021 	.word	0x08006021
 8005a8c:	08006021 	.word	0x08006021
 8005a90:	08006021 	.word	0x08006021
 8005a94:	08006021 	.word	0x08006021
 8005a98:	08006029 	.word	0x08006029
 8005a9c:	08006029 	.word	0x08006029
 8005aa0:	08006029 	.word	0x08006029
 8005aa4:	08006029 	.word	0x08006029
 8005aa8:	08006031 	.word	0x08006031
 8005aac:	08006031 	.word	0x08006031
 8005ab0:	08006031 	.word	0x08006031
 8005ab4:	08006031 	.word	0x08006031
 8005ab8:	08006039 	.word	0x08006039
 8005abc:	08006039 	.word	0x08006039
 8005ac0:	08006039 	.word	0x08006039
 8005ac4:	08006039 	.word	0x08006039
 8005ac8:	08006041 	.word	0x08006041
 8005acc:	08006041 	.word	0x08006041
 8005ad0:	08006041 	.word	0x08006041
 8005ad4:	08006041 	.word	0x08006041
 8005ad8:	08006049 	.word	0x08006049
 8005adc:	08006049 	.word	0x08006049
 8005ae0:	08006049 	.word	0x08006049
 8005ae4:	08006049 	.word	0x08006049
 8005ae8:	08006051 	.word	0x08006051
 8005aec:	08006051 	.word	0x08006051
 8005af0:	08006051 	.word	0x08006051
 8005af4:	08006051 	.word	0x08006051
 8005af8:	08006059 	.word	0x08006059
 8005afc:	08006059 	.word	0x08006059
 8005b00:	08006059 	.word	0x08006059
 8005b04:	08006059 	.word	0x08006059
 8005b08:	08006061 	.word	0x08006061
 8005b0c:	08006061 	.word	0x08006061
 8005b10:	08006061 	.word	0x08006061
 8005b14:	08006061 	.word	0x08006061
 8005b18:	08006069 	.word	0x08006069
 8005b1c:	08006069 	.word	0x08006069
 8005b20:	08006069 	.word	0x08006069
 8005b24:	08006069 	.word	0x08006069
 8005b28:	08006071 	.word	0x08006071
 8005b2c:	08006071 	.word	0x08006071
 8005b30:	08006071 	.word	0x08006071
 8005b34:	08006071 	.word	0x08006071
 8005b38:	08006079 	.word	0x08006079
 8005b3c:	08006079 	.word	0x08006079
 8005b40:	08006079 	.word	0x08006079
 8005b44:	08006079 	.word	0x08006079
 8005b48:	08006081 	.word	0x08006081
 8005b4c:	08006081 	.word	0x08006081
 8005b50:	08006081 	.word	0x08006081
 8005b54:	08006081 	.word	0x08006081
 8005b58:	08006089 	.word	0x08006089
 8005b5c:	08006089 	.word	0x08006089
 8005b60:	08006089 	.word	0x08006089
 8005b64:	08006089 	.word	0x08006089
 8005b68:	08006091 	.word	0x08006091
 8005b6c:	08006091 	.word	0x08006091
 8005b70:	08006091 	.word	0x08006091
 8005b74:	08006091 	.word	0x08006091
 8005b78:	08006099 	.word	0x08006099
 8005b7c:	08006099 	.word	0x08006099
 8005b80:	08006099 	.word	0x08006099
 8005b84:	08006099 	.word	0x08006099
 8005b88:	080060a1 	.word	0x080060a1
 8005b8c:	080060a1 	.word	0x080060a1
 8005b90:	080060a1 	.word	0x080060a1
 8005b94:	080060a1 	.word	0x080060a1
 8005b98:	080060a9 	.word	0x080060a9
 8005b9c:	080060a9 	.word	0x080060a9
 8005ba0:	080060a9 	.word	0x080060a9
 8005ba4:	080060a9 	.word	0x080060a9
 8005ba8:	080060b1 	.word	0x080060b1
 8005bac:	080060b1 	.word	0x080060b1
 8005bb0:	080060b1 	.word	0x080060b1
 8005bb4:	080060b1 	.word	0x080060b1
 8005bb8:	080060b9 	.word	0x080060b9
 8005bbc:	080060b9 	.word	0x080060b9
 8005bc0:	080060b9 	.word	0x080060b9
 8005bc4:	080060b9 	.word	0x080060b9
 8005bc8:	080060c1 	.word	0x080060c1
 8005bcc:	080060c1 	.word	0x080060c1
 8005bd0:	080060c1 	.word	0x080060c1
 8005bd4:	080060c1 	.word	0x080060c1
 8005bd8:	080060c9 	.word	0x080060c9
 8005bdc:	080060c9 	.word	0x080060c9
 8005be0:	080060c9 	.word	0x080060c9
 8005be4:	080060c9 	.word	0x080060c9
 8005be8:	080060d1 	.word	0x080060d1
 8005bec:	080060d1 	.word	0x080060d1
 8005bf0:	080060d1 	.word	0x080060d1
 8005bf4:	080060d1 	.word	0x080060d1
 8005bf8:	080060d9 	.word	0x080060d9
 8005bfc:	080060d9 	.word	0x080060d9
 8005c00:	080060d9 	.word	0x080060d9
 8005c04:	080060d9 	.word	0x080060d9
 8005c08:	080060e1 	.word	0x080060e1
 8005c0c:	080060e1 	.word	0x080060e1
 8005c10:	080060e1 	.word	0x080060e1
 8005c14:	080060e1 	.word	0x080060e1
 8005c18:	080060e9 	.word	0x080060e9
 8005c1c:	080060e9 	.word	0x080060e9
 8005c20:	080060e9 	.word	0x080060e9
 8005c24:	080060e9 	.word	0x080060e9
 8005c28:	080060f1 	.word	0x080060f1
 8005c2c:	080060f1 	.word	0x080060f1
 8005c30:	080060f1 	.word	0x080060f1
 8005c34:	080060f1 	.word	0x080060f1
 8005c38:	080060f9 	.word	0x080060f9
 8005c3c:	080060f9 	.word	0x080060f9
 8005c40:	080060f9 	.word	0x080060f9
 8005c44:	080060f9 	.word	0x080060f9
 8005c48:	08006101 	.word	0x08006101
 8005c4c:	08006101 	.word	0x08006101
 8005c50:	08006101 	.word	0x08006101
 8005c54:	08006101 	.word	0x08006101
 8005c58:	08006109 	.word	0x08006109
 8005c5c:	08006109 	.word	0x08006109
 8005c60:	08006109 	.word	0x08006109
 8005c64:	08006109 	.word	0x08006109
 8005c68:	08006111 	.word	0x08006111
 8005c6c:	08006111 	.word	0x08006111
 8005c70:	08006111 	.word	0x08006111
 8005c74:	08006111 	.word	0x08006111
 8005c78:	08006119 	.word	0x08006119
 8005c7c:	08006119 	.word	0x08006119
 8005c80:	08006119 	.word	0x08006119
 8005c84:	08006119 	.word	0x08006119
 8005c88:	08006121 	.word	0x08006121
 8005c8c:	08006121 	.word	0x08006121
 8005c90:	08006121 	.word	0x08006121
 8005c94:	08006121 	.word	0x08006121
 8005c98:	08006129 	.word	0x08006129
 8005c9c:	08006129 	.word	0x08006129
 8005ca0:	08006129 	.word	0x08006129
 8005ca4:	08006129 	.word	0x08006129
 8005ca8:	08006131 	.word	0x08006131
 8005cac:	08006131 	.word	0x08006131
 8005cb0:	08006131 	.word	0x08006131
 8005cb4:	08006131 	.word	0x08006131
 8005cb8:	08006139 	.word	0x08006139
 8005cbc:	08006139 	.word	0x08006139
 8005cc0:	08006139 	.word	0x08006139
 8005cc4:	08006139 	.word	0x08006139
 8005cc8:	08006141 	.word	0x08006141
 8005ccc:	08006141 	.word	0x08006141
 8005cd0:	08006141 	.word	0x08006141
 8005cd4:	08006141 	.word	0x08006141
 8005cd8:	08006149 	.word	0x08006149
 8005cdc:	08006149 	.word	0x08006149
 8005ce0:	08006149 	.word	0x08006149
 8005ce4:	08006149 	.word	0x08006149
 8005ce8:	08006151 	.word	0x08006151
 8005cec:	08006151 	.word	0x08006151
 8005cf0:	08006151 	.word	0x08006151
 8005cf4:	08006151 	.word	0x08006151
 8005cf8:	08006159 	.word	0x08006159
 8005cfc:	08006159 	.word	0x08006159
 8005d00:	08006159 	.word	0x08006159
 8005d04:	08006159 	.word	0x08006159
 8005d08:	08006161 	.word	0x08006161
 8005d0c:	08006161 	.word	0x08006161
 8005d10:	08006161 	.word	0x08006161
 8005d14:	08006161 	.word	0x08006161
 8005d18:	08006169 	.word	0x08006169
 8005d1c:	08006169 	.word	0x08006169
 8005d20:	08006169 	.word	0x08006169
 8005d24:	08006169 	.word	0x08006169
 8005d28:	08006171 	.word	0x08006171
 8005d2c:	08006171 	.word	0x08006171
 8005d30:	08006171 	.word	0x08006171
 8005d34:	08006171 	.word	0x08006171
 8005d38:	08006179 	.word	0x08006179
 8005d3c:	08006179 	.word	0x08006179
 8005d40:	08006179 	.word	0x08006179
 8005d44:	08006179 	.word	0x08006179
 8005d48:	08006181 	.word	0x08006181
 8005d4c:	08006181 	.word	0x08006181
 8005d50:	08006181 	.word	0x08006181
 8005d54:	08006181 	.word	0x08006181
 8005d58:	08006189 	.word	0x08006189
 8005d5c:	08006189 	.word	0x08006189
 8005d60:	08006189 	.word	0x08006189
 8005d64:	08006189 	.word	0x08006189
 8005d68:	08006191 	.word	0x08006191
 8005d6c:	08006191 	.word	0x08006191
 8005d70:	08006191 	.word	0x08006191
 8005d74:	08006191 	.word	0x08006191
 8005d78:	08006199 	.word	0x08006199
 8005d7c:	08006199 	.word	0x08006199
 8005d80:	08006199 	.word	0x08006199
 8005d84:	08006199 	.word	0x08006199
 8005d88:	080061a1 	.word	0x080061a1
 8005d8c:	080061a1 	.word	0x080061a1
 8005d90:	080061a1 	.word	0x080061a1
 8005d94:	080061a1 	.word	0x080061a1
 8005d98:	080061a9 	.word	0x080061a9
 8005d9c:	080061a9 	.word	0x080061a9
 8005da0:	080061a9 	.word	0x080061a9
 8005da4:	080061a9 	.word	0x080061a9
 8005da8:	080061b1 	.word	0x080061b1
 8005dac:	080061b1 	.word	0x080061b1
 8005db0:	080061b1 	.word	0x080061b1
 8005db4:	080061b1 	.word	0x080061b1
 8005db8:	080061b9 	.word	0x080061b9
 8005dbc:	080061b9 	.word	0x080061b9
 8005dc0:	080061b9 	.word	0x080061b9
 8005dc4:	080061b9 	.word	0x080061b9
 8005dc8:	080061c1 	.word	0x080061c1
 8005dcc:	080061c1 	.word	0x080061c1
 8005dd0:	080061c1 	.word	0x080061c1
 8005dd4:	080061c1 	.word	0x080061c1
 8005dd8:	080061c9 	.word	0x080061c9
 8005ddc:	080061c9 	.word	0x080061c9
 8005de0:	080061c9 	.word	0x080061c9
 8005de4:	080061c9 	.word	0x080061c9
 8005de8:	080061d1 	.word	0x080061d1
 8005dec:	080061d1 	.word	0x080061d1
 8005df0:	080061d1 	.word	0x080061d1
 8005df4:	080061d1 	.word	0x080061d1
 8005df8:	080061d9 	.word	0x080061d9
 8005dfc:	080061d9 	.word	0x080061d9
 8005e00:	080061d9 	.word	0x080061d9
 8005e04:	080061d9 	.word	0x080061d9
 8005e08:	080061e1 	.word	0x080061e1
 8005e0c:	080061e1 	.word	0x080061e1
 8005e10:	080061e1 	.word	0x080061e1
 8005e14:	080061e1 	.word	0x080061e1
 8005e18:	080061e9 	.word	0x080061e9
 8005e1c:	080061e9 	.word	0x080061e9
 8005e20:	080061e9 	.word	0x080061e9
 8005e24:	080061e9 	.word	0x080061e9
 8005e28:	080061f1 	.word	0x080061f1
 8005e2c:	080061f1 	.word	0x080061f1
 8005e30:	080061f1 	.word	0x080061f1
 8005e34:	080061f1 	.word	0x080061f1
 8005e38:	080061f9 	.word	0x080061f9
 8005e3c:	080061f9 	.word	0x080061f9
 8005e40:	080061f9 	.word	0x080061f9
 8005e44:	080061f9 	.word	0x080061f9
 8005e48:	08006201 	.word	0x08006201
 8005e4c:	08006201 	.word	0x08006201
 8005e50:	08006201 	.word	0x08006201
 8005e54:	08006201 	.word	0x08006201
 8005e58:	08006209 	.word	0x08006209
 8005e5c:	08006209 	.word	0x08006209
 8005e60:	08006209 	.word	0x08006209
 8005e64:	08006209 	.word	0x08006209
 8005e68:	08006211 	.word	0x08006211
 8005e6c:	08006211 	.word	0x08006211
 8005e70:	08006211 	.word	0x08006211
 8005e74:	08006211 	.word	0x08006211
 8005e78:	08006219 	.word	0x08006219
 8005e7c:	08006219 	.word	0x08006219
 8005e80:	08006219 	.word	0x08006219
 8005e84:	08006219 	.word	0x08006219
 8005e88:	08006221 	.word	0x08006221
 8005e8c:	08006221 	.word	0x08006221
 8005e90:	08006221 	.word	0x08006221
 8005e94:	08006221 	.word	0x08006221
 8005e98:	08006229 	.word	0x08006229
 8005e9c:	08006229 	.word	0x08006229
 8005ea0:	08006229 	.word	0x08006229
 8005ea4:	08006229 	.word	0x08006229
 8005ea8:	08006231 	.word	0x08006231
 8005eac:	08006231 	.word	0x08006231
 8005eb0:	08006231 	.word	0x08006231
 8005eb4:	08006231 	.word	0x08006231
 8005eb8:	08006239 	.word	0x08006239
 8005ebc:	08006239 	.word	0x08006239
 8005ec0:	08006239 	.word	0x08006239
 8005ec4:	08006239 	.word	0x08006239
 8005ec8:	08006241 	.word	0x08006241
 8005ecc:	08006241 	.word	0x08006241
 8005ed0:	08006241 	.word	0x08006241
 8005ed4:	08006241 	.word	0x08006241
 8005ed8:	08006249 	.word	0x08006249
 8005edc:	08006249 	.word	0x08006249
 8005ee0:	08006249 	.word	0x08006249
 8005ee4:	08006249 	.word	0x08006249
 8005ee8:	08006251 	.word	0x08006251
 8005eec:	08006251 	.word	0x08006251
 8005ef0:	08006251 	.word	0x08006251
 8005ef4:	08006251 	.word	0x08006251
 8005ef8:	08006259 	.word	0x08006259
 8005efc:	08006259 	.word	0x08006259
 8005f00:	08006259 	.word	0x08006259
 8005f04:	08006259 	.word	0x08006259
 8005f08:	08006261 	.word	0x08006261
 8005f0c:	08006261 	.word	0x08006261
 8005f10:	08006261 	.word	0x08006261
 8005f14:	08006261 	.word	0x08006261
 8005f18:	08006269 	.word	0x08006269
 8005f1c:	08006269 	.word	0x08006269
 8005f20:	08006269 	.word	0x08006269
 8005f24:	08006269 	.word	0x08006269
 8005f28:	08006271 	.word	0x08006271
 8005f2c:	08006271 	.word	0x08006271
 8005f30:	08006271 	.word	0x08006271
 8005f34:	08006271 	.word	0x08006271
 8005f38:	08006279 	.word	0x08006279
 8005f3c:	08006279 	.word	0x08006279
 8005f40:	08006279 	.word	0x08006279
 8005f44:	08006279 	.word	0x08006279
 8005f48:	08006281 	.word	0x08006281
 8005f4c:	08006281 	.word	0x08006281
 8005f50:	08006281 	.word	0x08006281
 8005f54:	08006281 	.word	0x08006281
 8005f58:	08006289 	.word	0x08006289
 8005f5c:	08006289 	.word	0x08006289
 8005f60:	08006289 	.word	0x08006289
 8005f64:	08006289 	.word	0x08006289
 8005f68:	08006291 	.word	0x08006291
 8005f6c:	08006291 	.word	0x08006291
 8005f70:	08006291 	.word	0x08006291
 8005f74:	08006291 	.word	0x08006291
 8005f78:	08006299 	.word	0x08006299
 8005f7c:	08006299 	.word	0x08006299
 8005f80:	08006299 	.word	0x08006299
 8005f84:	08006299 	.word	0x08006299
 8005f88:	080062a1 	.word	0x080062a1
 8005f8c:	080062a1 	.word	0x080062a1
 8005f90:	080062a1 	.word	0x080062a1
 8005f94:	080062a1 	.word	0x080062a1
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f7ff fb89 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005f9e:	e184      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	f7ff fb85 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fa6:	e180      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8005fa8:	2002      	movs	r0, #2
 8005faa:	f7ff fb81 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fae:	e17c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8005fb0:	2003      	movs	r0, #3
 8005fb2:	f7ff fb7d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fb6:	e178      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8005fb8:	2004      	movs	r0, #4
 8005fba:	f7ff fb79 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fbe:	e174      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8005fc0:	2005      	movs	r0, #5
 8005fc2:	f7ff fb75 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fc6:	e170      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8005fc8:	2006      	movs	r0, #6
 8005fca:	f7ff fb71 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fce:	e16c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 8005fd0:	2007      	movs	r0, #7
 8005fd2:	f7ff fb6d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fd6:	e168      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8005fd8:	2008      	movs	r0, #8
 8005fda:	f7ff fb69 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fde:	e164      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 8005fe0:	2009      	movs	r0, #9
 8005fe2:	f7ff fb65 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fe6:	e160      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8005fe8:	200a      	movs	r0, #10
 8005fea:	f7ff fb61 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005fee:	e15c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 8005ff0:	200b      	movs	r0, #11
 8005ff2:	f7ff fb5d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005ff6:	e158      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8005ff8:	200c      	movs	r0, #12
 8005ffa:	f7ff fb59 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8005ffe:	e154      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 8006000:	200d      	movs	r0, #13
 8006002:	f7ff fb55 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006006:	e150      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8006008:	200e      	movs	r0, #14
 800600a:	f7ff fb51 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800600e:	e14c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 8006010:	200f      	movs	r0, #15
 8006012:	f7ff fb4d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006016:	e148      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 8006018:	2010      	movs	r0, #16
 800601a:	f7ff fb49 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800601e:	e144      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 8006020:	2011      	movs	r0, #17
 8006022:	f7ff fb45 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006026:	e140      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 8006028:	2012      	movs	r0, #18
 800602a:	f7ff fb41 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800602e:	e13c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 8006030:	2013      	movs	r0, #19
 8006032:	f7ff fb3d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006036:	e138      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 8006038:	2014      	movs	r0, #20
 800603a:	f7ff fb39 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800603e:	e134      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 8006040:	2015      	movs	r0, #21
 8006042:	f7ff fb35 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006046:	e130      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 8006048:	2016      	movs	r0, #22
 800604a:	f7ff fb31 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800604e:	e12c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 8006050:	2017      	movs	r0, #23
 8006052:	f7ff fb2d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006056:	e128      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 8006058:	2018      	movs	r0, #24
 800605a:	f7ff fb29 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800605e:	e124      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 8006060:	2019      	movs	r0, #25
 8006062:	f7ff fb25 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006066:	e120      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 8006068:	201a      	movs	r0, #26
 800606a:	f7ff fb21 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800606e:	e11c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 8006070:	201b      	movs	r0, #27
 8006072:	f7ff fb1d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006076:	e118      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 8006078:	201c      	movs	r0, #28
 800607a:	f7ff fb19 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800607e:	e114      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 8006080:	201d      	movs	r0, #29
 8006082:	f7ff fb15 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006086:	e110      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 8006088:	201e      	movs	r0, #30
 800608a:	f7ff fb11 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800608e:	e10c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 8006090:	201f      	movs	r0, #31
 8006092:	f7ff fb0d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006096:	e108      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 8006098:	2020      	movs	r0, #32
 800609a:	f7ff fb09 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800609e:	e104      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 80060a0:	2021      	movs	r0, #33	; 0x21
 80060a2:	f7ff fb05 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060a6:	e100      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 80060a8:	2022      	movs	r0, #34	; 0x22
 80060aa:	f7ff fb01 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060ae:	e0fc      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 80060b0:	2023      	movs	r0, #35	; 0x23
 80060b2:	f7ff fafd 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060b6:	e0f8      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 80060b8:	2024      	movs	r0, #36	; 0x24
 80060ba:	f7ff faf9 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060be:	e0f4      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 80060c0:	2025      	movs	r0, #37	; 0x25
 80060c2:	f7ff faf5 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060c6:	e0f0      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 80060c8:	2026      	movs	r0, #38	; 0x26
 80060ca:	f7ff faf1 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060ce:	e0ec      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 80060d0:	2027      	movs	r0, #39	; 0x27
 80060d2:	f7ff faed 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060d6:	e0e8      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 80060d8:	2028      	movs	r0, #40	; 0x28
 80060da:	f7ff fae9 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060de:	e0e4      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 80060e0:	2029      	movs	r0, #41	; 0x29
 80060e2:	f7ff fae5 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060e6:	e0e0      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 80060e8:	202a      	movs	r0, #42	; 0x2a
 80060ea:	f7ff fae1 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060ee:	e0dc      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 80060f0:	202b      	movs	r0, #43	; 0x2b
 80060f2:	f7ff fadd 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060f6:	e0d8      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 80060f8:	202c      	movs	r0, #44	; 0x2c
 80060fa:	f7ff fad9 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80060fe:	e0d4      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 8006100:	202d      	movs	r0, #45	; 0x2d
 8006102:	f7ff fad5 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006106:	e0d0      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 8006108:	202e      	movs	r0, #46	; 0x2e
 800610a:	f7ff fad1 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800610e:	e0cc      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 8006110:	202f      	movs	r0, #47	; 0x2f
 8006112:	f7ff facd 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006116:	e0c8      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 8006118:	2030      	movs	r0, #48	; 0x30
 800611a:	f7ff fac9 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800611e:	e0c4      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 8006120:	2031      	movs	r0, #49	; 0x31
 8006122:	f7ff fac5 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006126:	e0c0      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 8006128:	2032      	movs	r0, #50	; 0x32
 800612a:	f7ff fac1 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800612e:	e0bc      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 8006130:	2033      	movs	r0, #51	; 0x33
 8006132:	f7ff fabd 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006136:	e0b8      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 8006138:	2034      	movs	r0, #52	; 0x34
 800613a:	f7ff fab9 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800613e:	e0b4      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 8006140:	2035      	movs	r0, #53	; 0x35
 8006142:	f7ff fab5 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006146:	e0b0      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 8006148:	2036      	movs	r0, #54	; 0x36
 800614a:	f7ff fab1 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800614e:	e0ac      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 8006150:	2037      	movs	r0, #55	; 0x37
 8006152:	f7ff faad 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006156:	e0a8      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 8006158:	2038      	movs	r0, #56	; 0x38
 800615a:	f7ff faa9 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800615e:	e0a4      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 8006160:	2039      	movs	r0, #57	; 0x39
 8006162:	f7ff faa5 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006166:	e0a0      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 8006168:	203a      	movs	r0, #58	; 0x3a
 800616a:	f7ff faa1 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800616e:	e09c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 8006170:	203b      	movs	r0, #59	; 0x3b
 8006172:	f7ff fa9d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006176:	e098      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 8006178:	203c      	movs	r0, #60	; 0x3c
 800617a:	f7ff fa99 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800617e:	e094      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 8006180:	203d      	movs	r0, #61	; 0x3d
 8006182:	f7ff fa95 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006186:	e090      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 8006188:	203e      	movs	r0, #62	; 0x3e
 800618a:	f7ff fa91 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800618e:	e08c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 8006190:	203f      	movs	r0, #63	; 0x3f
 8006192:	f7ff fa8d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006196:	e088      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 8006198:	2040      	movs	r0, #64	; 0x40
 800619a:	f7ff fa89 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800619e:	e084      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 80061a0:	2041      	movs	r0, #65	; 0x41
 80061a2:	f7ff fa85 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061a6:	e080      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 80061a8:	2042      	movs	r0, #66	; 0x42
 80061aa:	f7ff fa81 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061ae:	e07c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 80061b0:	2043      	movs	r0, #67	; 0x43
 80061b2:	f7ff fa7d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061b6:	e078      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 80061b8:	2044      	movs	r0, #68	; 0x44
 80061ba:	f7ff fa79 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061be:	e074      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 80061c0:	2045      	movs	r0, #69	; 0x45
 80061c2:	f7ff fa75 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061c6:	e070      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 80061c8:	2046      	movs	r0, #70	; 0x46
 80061ca:	f7ff fa71 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061ce:	e06c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 80061d0:	2047      	movs	r0, #71	; 0x47
 80061d2:	f7ff fa6d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061d6:	e068      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 80061d8:	2048      	movs	r0, #72	; 0x48
 80061da:	f7ff fa69 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061de:	e064      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 80061e0:	2049      	movs	r0, #73	; 0x49
 80061e2:	f7ff fa65 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061e6:	e060      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 80061e8:	204a      	movs	r0, #74	; 0x4a
 80061ea:	f7ff fa61 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061ee:	e05c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 80061f0:	204b      	movs	r0, #75	; 0x4b
 80061f2:	f7ff fa5d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061f6:	e058      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 80061f8:	204c      	movs	r0, #76	; 0x4c
 80061fa:	f7ff fa59 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80061fe:	e054      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 8006200:	204d      	movs	r0, #77	; 0x4d
 8006202:	f7ff fa55 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006206:	e050      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 8006208:	204e      	movs	r0, #78	; 0x4e
 800620a:	f7ff fa51 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800620e:	e04c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 8006210:	204f      	movs	r0, #79	; 0x4f
 8006212:	f7ff fa4d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006216:	e048      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 8006218:	2050      	movs	r0, #80	; 0x50
 800621a:	f7ff fa49 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800621e:	e044      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 8006220:	2051      	movs	r0, #81	; 0x51
 8006222:	f7ff fa45 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006226:	e040      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 8006228:	2052      	movs	r0, #82	; 0x52
 800622a:	f7ff fa41 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800622e:	e03c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 8006230:	2053      	movs	r0, #83	; 0x53
 8006232:	f7ff fa3d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006236:	e038      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 8006238:	2054      	movs	r0, #84	; 0x54
 800623a:	f7ff fa39 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800623e:	e034      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 8006240:	2055      	movs	r0, #85	; 0x55
 8006242:	f7ff fa35 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006246:	e030      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 8006248:	2056      	movs	r0, #86	; 0x56
 800624a:	f7ff fa31 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800624e:	e02c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 8006250:	2057      	movs	r0, #87	; 0x57
 8006252:	f7ff fa2d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006256:	e028      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 8006258:	2058      	movs	r0, #88	; 0x58
 800625a:	f7ff fa29 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800625e:	e024      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 8006260:	2059      	movs	r0, #89	; 0x59
 8006262:	f7ff fa25 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006266:	e020      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 8006268:	205a      	movs	r0, #90	; 0x5a
 800626a:	f7ff fa21 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800626e:	e01c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 8006270:	205b      	movs	r0, #91	; 0x5b
 8006272:	f7ff fa1d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006276:	e018      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 8006278:	205c      	movs	r0, #92	; 0x5c
 800627a:	f7ff fa19 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800627e:	e014      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 8006280:	205d      	movs	r0, #93	; 0x5d
 8006282:	f7ff fa15 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006286:	e010      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 8006288:	205e      	movs	r0, #94	; 0x5e
 800628a:	f7ff fa11 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800628e:	e00c      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 8006290:	205f      	movs	r0, #95	; 0x5f
 8006292:	f7ff fa0d 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 8006296:	e008      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 8006298:	2060      	movs	r0, #96	; 0x60
 800629a:	f7ff fa09 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 800629e:	e004      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 80062a0:	2061      	movs	r0, #97	; 0x61
 80062a2:	f7ff fa05 	bl	80056b0 <VPP_ApplyPresetToSignal>
			break;
 80062a6:	e000      	b.n	80062aa <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 80062a8:	bf00      	nop
	}
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop

080062b4 <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	4603      	mov	r3, r0
 80062bc:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80062c4:	f200 849a 	bhi.w	8006bfc <VPP_ModifySyncOutput+0x948>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <VPP_ModifySyncOutput+0x1c>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	080068ed 	.word	0x080068ed
 80062d4:	080068ed 	.word	0x080068ed
 80062d8:	080068ed 	.word	0x080068ed
 80062dc:	080068f5 	.word	0x080068f5
 80062e0:	080068f5 	.word	0x080068f5
 80062e4:	080068f5 	.word	0x080068f5
 80062e8:	080068f5 	.word	0x080068f5
 80062ec:	080068fd 	.word	0x080068fd
 80062f0:	080068fd 	.word	0x080068fd
 80062f4:	080068fd 	.word	0x080068fd
 80062f8:	080068fd 	.word	0x080068fd
 80062fc:	08006905 	.word	0x08006905
 8006300:	08006905 	.word	0x08006905
 8006304:	08006905 	.word	0x08006905
 8006308:	08006905 	.word	0x08006905
 800630c:	0800690d 	.word	0x0800690d
 8006310:	0800690d 	.word	0x0800690d
 8006314:	0800690d 	.word	0x0800690d
 8006318:	0800690d 	.word	0x0800690d
 800631c:	08006915 	.word	0x08006915
 8006320:	08006915 	.word	0x08006915
 8006324:	08006915 	.word	0x08006915
 8006328:	08006915 	.word	0x08006915
 800632c:	0800691d 	.word	0x0800691d
 8006330:	0800691d 	.word	0x0800691d
 8006334:	0800691d 	.word	0x0800691d
 8006338:	0800691d 	.word	0x0800691d
 800633c:	08006925 	.word	0x08006925
 8006340:	08006925 	.word	0x08006925
 8006344:	08006925 	.word	0x08006925
 8006348:	08006925 	.word	0x08006925
 800634c:	0800692d 	.word	0x0800692d
 8006350:	0800692d 	.word	0x0800692d
 8006354:	0800692d 	.word	0x0800692d
 8006358:	0800692d 	.word	0x0800692d
 800635c:	08006935 	.word	0x08006935
 8006360:	08006935 	.word	0x08006935
 8006364:	08006935 	.word	0x08006935
 8006368:	08006935 	.word	0x08006935
 800636c:	0800693d 	.word	0x0800693d
 8006370:	0800693d 	.word	0x0800693d
 8006374:	0800693d 	.word	0x0800693d
 8006378:	0800693d 	.word	0x0800693d
 800637c:	08006945 	.word	0x08006945
 8006380:	08006945 	.word	0x08006945
 8006384:	08006945 	.word	0x08006945
 8006388:	08006945 	.word	0x08006945
 800638c:	0800694d 	.word	0x0800694d
 8006390:	0800694d 	.word	0x0800694d
 8006394:	0800694d 	.word	0x0800694d
 8006398:	0800694d 	.word	0x0800694d
 800639c:	08006955 	.word	0x08006955
 80063a0:	08006955 	.word	0x08006955
 80063a4:	08006955 	.word	0x08006955
 80063a8:	08006955 	.word	0x08006955
 80063ac:	0800695d 	.word	0x0800695d
 80063b0:	0800695d 	.word	0x0800695d
 80063b4:	0800695d 	.word	0x0800695d
 80063b8:	0800695d 	.word	0x0800695d
 80063bc:	08006965 	.word	0x08006965
 80063c0:	08006965 	.word	0x08006965
 80063c4:	08006965 	.word	0x08006965
 80063c8:	08006965 	.word	0x08006965
 80063cc:	0800696d 	.word	0x0800696d
 80063d0:	0800696d 	.word	0x0800696d
 80063d4:	0800696d 	.word	0x0800696d
 80063d8:	0800696d 	.word	0x0800696d
 80063dc:	08006975 	.word	0x08006975
 80063e0:	08006975 	.word	0x08006975
 80063e4:	08006975 	.word	0x08006975
 80063e8:	08006975 	.word	0x08006975
 80063ec:	0800697d 	.word	0x0800697d
 80063f0:	0800697d 	.word	0x0800697d
 80063f4:	0800697d 	.word	0x0800697d
 80063f8:	0800697d 	.word	0x0800697d
 80063fc:	08006985 	.word	0x08006985
 8006400:	08006985 	.word	0x08006985
 8006404:	08006985 	.word	0x08006985
 8006408:	08006985 	.word	0x08006985
 800640c:	0800698d 	.word	0x0800698d
 8006410:	0800698d 	.word	0x0800698d
 8006414:	0800698d 	.word	0x0800698d
 8006418:	0800698d 	.word	0x0800698d
 800641c:	08006995 	.word	0x08006995
 8006420:	08006995 	.word	0x08006995
 8006424:	08006995 	.word	0x08006995
 8006428:	08006995 	.word	0x08006995
 800642c:	0800699d 	.word	0x0800699d
 8006430:	0800699d 	.word	0x0800699d
 8006434:	0800699d 	.word	0x0800699d
 8006438:	0800699d 	.word	0x0800699d
 800643c:	080069a5 	.word	0x080069a5
 8006440:	080069a5 	.word	0x080069a5
 8006444:	080069a5 	.word	0x080069a5
 8006448:	080069a5 	.word	0x080069a5
 800644c:	080069ad 	.word	0x080069ad
 8006450:	080069ad 	.word	0x080069ad
 8006454:	080069ad 	.word	0x080069ad
 8006458:	080069ad 	.word	0x080069ad
 800645c:	080069b5 	.word	0x080069b5
 8006460:	080069b5 	.word	0x080069b5
 8006464:	080069b5 	.word	0x080069b5
 8006468:	080069b5 	.word	0x080069b5
 800646c:	080069bd 	.word	0x080069bd
 8006470:	080069bd 	.word	0x080069bd
 8006474:	080069bd 	.word	0x080069bd
 8006478:	080069bd 	.word	0x080069bd
 800647c:	080069c5 	.word	0x080069c5
 8006480:	080069c5 	.word	0x080069c5
 8006484:	080069c5 	.word	0x080069c5
 8006488:	080069c5 	.word	0x080069c5
 800648c:	080069cd 	.word	0x080069cd
 8006490:	080069cd 	.word	0x080069cd
 8006494:	080069cd 	.word	0x080069cd
 8006498:	080069cd 	.word	0x080069cd
 800649c:	080069d5 	.word	0x080069d5
 80064a0:	080069d5 	.word	0x080069d5
 80064a4:	080069d5 	.word	0x080069d5
 80064a8:	080069d5 	.word	0x080069d5
 80064ac:	080069dd 	.word	0x080069dd
 80064b0:	080069dd 	.word	0x080069dd
 80064b4:	080069dd 	.word	0x080069dd
 80064b8:	080069dd 	.word	0x080069dd
 80064bc:	080069e5 	.word	0x080069e5
 80064c0:	080069e5 	.word	0x080069e5
 80064c4:	080069e5 	.word	0x080069e5
 80064c8:	080069e5 	.word	0x080069e5
 80064cc:	080069ed 	.word	0x080069ed
 80064d0:	080069ed 	.word	0x080069ed
 80064d4:	080069ed 	.word	0x080069ed
 80064d8:	080069ed 	.word	0x080069ed
 80064dc:	080069f5 	.word	0x080069f5
 80064e0:	080069f5 	.word	0x080069f5
 80064e4:	080069f5 	.word	0x080069f5
 80064e8:	080069f5 	.word	0x080069f5
 80064ec:	080069fd 	.word	0x080069fd
 80064f0:	080069fd 	.word	0x080069fd
 80064f4:	080069fd 	.word	0x080069fd
 80064f8:	080069fd 	.word	0x080069fd
 80064fc:	08006a05 	.word	0x08006a05
 8006500:	08006a05 	.word	0x08006a05
 8006504:	08006a05 	.word	0x08006a05
 8006508:	08006a05 	.word	0x08006a05
 800650c:	08006a0d 	.word	0x08006a0d
 8006510:	08006a0d 	.word	0x08006a0d
 8006514:	08006a0d 	.word	0x08006a0d
 8006518:	08006a0d 	.word	0x08006a0d
 800651c:	08006a15 	.word	0x08006a15
 8006520:	08006a15 	.word	0x08006a15
 8006524:	08006a15 	.word	0x08006a15
 8006528:	08006a15 	.word	0x08006a15
 800652c:	08006a1d 	.word	0x08006a1d
 8006530:	08006a1d 	.word	0x08006a1d
 8006534:	08006a1d 	.word	0x08006a1d
 8006538:	08006a1d 	.word	0x08006a1d
 800653c:	08006a25 	.word	0x08006a25
 8006540:	08006a25 	.word	0x08006a25
 8006544:	08006a25 	.word	0x08006a25
 8006548:	08006a25 	.word	0x08006a25
 800654c:	08006a2d 	.word	0x08006a2d
 8006550:	08006a2d 	.word	0x08006a2d
 8006554:	08006a2d 	.word	0x08006a2d
 8006558:	08006a2d 	.word	0x08006a2d
 800655c:	08006a35 	.word	0x08006a35
 8006560:	08006a35 	.word	0x08006a35
 8006564:	08006a35 	.word	0x08006a35
 8006568:	08006a35 	.word	0x08006a35
 800656c:	08006a3d 	.word	0x08006a3d
 8006570:	08006a3d 	.word	0x08006a3d
 8006574:	08006a3d 	.word	0x08006a3d
 8006578:	08006a3d 	.word	0x08006a3d
 800657c:	08006a45 	.word	0x08006a45
 8006580:	08006a45 	.word	0x08006a45
 8006584:	08006a45 	.word	0x08006a45
 8006588:	08006a45 	.word	0x08006a45
 800658c:	08006a4d 	.word	0x08006a4d
 8006590:	08006a4d 	.word	0x08006a4d
 8006594:	08006a4d 	.word	0x08006a4d
 8006598:	08006a4d 	.word	0x08006a4d
 800659c:	08006a55 	.word	0x08006a55
 80065a0:	08006a55 	.word	0x08006a55
 80065a4:	08006a55 	.word	0x08006a55
 80065a8:	08006a55 	.word	0x08006a55
 80065ac:	08006a5d 	.word	0x08006a5d
 80065b0:	08006a5d 	.word	0x08006a5d
 80065b4:	08006a5d 	.word	0x08006a5d
 80065b8:	08006a5d 	.word	0x08006a5d
 80065bc:	08006a65 	.word	0x08006a65
 80065c0:	08006a65 	.word	0x08006a65
 80065c4:	08006a65 	.word	0x08006a65
 80065c8:	08006a65 	.word	0x08006a65
 80065cc:	08006a6d 	.word	0x08006a6d
 80065d0:	08006a6d 	.word	0x08006a6d
 80065d4:	08006a6d 	.word	0x08006a6d
 80065d8:	08006a6d 	.word	0x08006a6d
 80065dc:	08006a75 	.word	0x08006a75
 80065e0:	08006a75 	.word	0x08006a75
 80065e4:	08006a75 	.word	0x08006a75
 80065e8:	08006a75 	.word	0x08006a75
 80065ec:	08006a7d 	.word	0x08006a7d
 80065f0:	08006a7d 	.word	0x08006a7d
 80065f4:	08006a7d 	.word	0x08006a7d
 80065f8:	08006a7d 	.word	0x08006a7d
 80065fc:	08006a85 	.word	0x08006a85
 8006600:	08006a85 	.word	0x08006a85
 8006604:	08006a85 	.word	0x08006a85
 8006608:	08006a85 	.word	0x08006a85
 800660c:	08006a8d 	.word	0x08006a8d
 8006610:	08006a8d 	.word	0x08006a8d
 8006614:	08006a8d 	.word	0x08006a8d
 8006618:	08006a8d 	.word	0x08006a8d
 800661c:	08006a95 	.word	0x08006a95
 8006620:	08006a95 	.word	0x08006a95
 8006624:	08006a95 	.word	0x08006a95
 8006628:	08006a95 	.word	0x08006a95
 800662c:	08006a9d 	.word	0x08006a9d
 8006630:	08006a9d 	.word	0x08006a9d
 8006634:	08006a9d 	.word	0x08006a9d
 8006638:	08006a9d 	.word	0x08006a9d
 800663c:	08006aa5 	.word	0x08006aa5
 8006640:	08006aa5 	.word	0x08006aa5
 8006644:	08006aa5 	.word	0x08006aa5
 8006648:	08006aa5 	.word	0x08006aa5
 800664c:	08006aad 	.word	0x08006aad
 8006650:	08006aad 	.word	0x08006aad
 8006654:	08006aad 	.word	0x08006aad
 8006658:	08006aad 	.word	0x08006aad
 800665c:	08006ab5 	.word	0x08006ab5
 8006660:	08006ab5 	.word	0x08006ab5
 8006664:	08006ab5 	.word	0x08006ab5
 8006668:	08006ab5 	.word	0x08006ab5
 800666c:	08006abd 	.word	0x08006abd
 8006670:	08006abd 	.word	0x08006abd
 8006674:	08006abd 	.word	0x08006abd
 8006678:	08006abd 	.word	0x08006abd
 800667c:	08006ac5 	.word	0x08006ac5
 8006680:	08006ac5 	.word	0x08006ac5
 8006684:	08006ac5 	.word	0x08006ac5
 8006688:	08006ac5 	.word	0x08006ac5
 800668c:	08006acd 	.word	0x08006acd
 8006690:	08006acd 	.word	0x08006acd
 8006694:	08006acd 	.word	0x08006acd
 8006698:	08006acd 	.word	0x08006acd
 800669c:	08006ad5 	.word	0x08006ad5
 80066a0:	08006ad5 	.word	0x08006ad5
 80066a4:	08006ad5 	.word	0x08006ad5
 80066a8:	08006ad5 	.word	0x08006ad5
 80066ac:	08006add 	.word	0x08006add
 80066b0:	08006add 	.word	0x08006add
 80066b4:	08006add 	.word	0x08006add
 80066b8:	08006add 	.word	0x08006add
 80066bc:	08006ae5 	.word	0x08006ae5
 80066c0:	08006ae5 	.word	0x08006ae5
 80066c4:	08006ae5 	.word	0x08006ae5
 80066c8:	08006ae5 	.word	0x08006ae5
 80066cc:	08006aed 	.word	0x08006aed
 80066d0:	08006aed 	.word	0x08006aed
 80066d4:	08006aed 	.word	0x08006aed
 80066d8:	08006aed 	.word	0x08006aed
 80066dc:	08006af5 	.word	0x08006af5
 80066e0:	08006af5 	.word	0x08006af5
 80066e4:	08006af5 	.word	0x08006af5
 80066e8:	08006af5 	.word	0x08006af5
 80066ec:	08006afd 	.word	0x08006afd
 80066f0:	08006afd 	.word	0x08006afd
 80066f4:	08006afd 	.word	0x08006afd
 80066f8:	08006afd 	.word	0x08006afd
 80066fc:	08006b05 	.word	0x08006b05
 8006700:	08006b05 	.word	0x08006b05
 8006704:	08006b05 	.word	0x08006b05
 8006708:	08006b05 	.word	0x08006b05
 800670c:	08006b0d 	.word	0x08006b0d
 8006710:	08006b0d 	.word	0x08006b0d
 8006714:	08006b0d 	.word	0x08006b0d
 8006718:	08006b0d 	.word	0x08006b0d
 800671c:	08006b15 	.word	0x08006b15
 8006720:	08006b15 	.word	0x08006b15
 8006724:	08006b15 	.word	0x08006b15
 8006728:	08006b15 	.word	0x08006b15
 800672c:	08006b1d 	.word	0x08006b1d
 8006730:	08006b1d 	.word	0x08006b1d
 8006734:	08006b1d 	.word	0x08006b1d
 8006738:	08006b1d 	.word	0x08006b1d
 800673c:	08006b25 	.word	0x08006b25
 8006740:	08006b25 	.word	0x08006b25
 8006744:	08006b25 	.word	0x08006b25
 8006748:	08006b25 	.word	0x08006b25
 800674c:	08006b2d 	.word	0x08006b2d
 8006750:	08006b2d 	.word	0x08006b2d
 8006754:	08006b2d 	.word	0x08006b2d
 8006758:	08006b2d 	.word	0x08006b2d
 800675c:	08006b35 	.word	0x08006b35
 8006760:	08006b35 	.word	0x08006b35
 8006764:	08006b35 	.word	0x08006b35
 8006768:	08006b35 	.word	0x08006b35
 800676c:	08006b3d 	.word	0x08006b3d
 8006770:	08006b3d 	.word	0x08006b3d
 8006774:	08006b3d 	.word	0x08006b3d
 8006778:	08006b3d 	.word	0x08006b3d
 800677c:	08006b45 	.word	0x08006b45
 8006780:	08006b45 	.word	0x08006b45
 8006784:	08006b45 	.word	0x08006b45
 8006788:	08006b45 	.word	0x08006b45
 800678c:	08006b4d 	.word	0x08006b4d
 8006790:	08006b4d 	.word	0x08006b4d
 8006794:	08006b4d 	.word	0x08006b4d
 8006798:	08006b4d 	.word	0x08006b4d
 800679c:	08006b55 	.word	0x08006b55
 80067a0:	08006b55 	.word	0x08006b55
 80067a4:	08006b55 	.word	0x08006b55
 80067a8:	08006b55 	.word	0x08006b55
 80067ac:	08006b5d 	.word	0x08006b5d
 80067b0:	08006b5d 	.word	0x08006b5d
 80067b4:	08006b5d 	.word	0x08006b5d
 80067b8:	08006b5d 	.word	0x08006b5d
 80067bc:	08006b65 	.word	0x08006b65
 80067c0:	08006b65 	.word	0x08006b65
 80067c4:	08006b65 	.word	0x08006b65
 80067c8:	08006b65 	.word	0x08006b65
 80067cc:	08006b6d 	.word	0x08006b6d
 80067d0:	08006b6d 	.word	0x08006b6d
 80067d4:	08006b6d 	.word	0x08006b6d
 80067d8:	08006b6d 	.word	0x08006b6d
 80067dc:	08006b75 	.word	0x08006b75
 80067e0:	08006b75 	.word	0x08006b75
 80067e4:	08006b75 	.word	0x08006b75
 80067e8:	08006b75 	.word	0x08006b75
 80067ec:	08006b7d 	.word	0x08006b7d
 80067f0:	08006b7d 	.word	0x08006b7d
 80067f4:	08006b7d 	.word	0x08006b7d
 80067f8:	08006b7d 	.word	0x08006b7d
 80067fc:	08006b85 	.word	0x08006b85
 8006800:	08006b85 	.word	0x08006b85
 8006804:	08006b85 	.word	0x08006b85
 8006808:	08006b85 	.word	0x08006b85
 800680c:	08006b8d 	.word	0x08006b8d
 8006810:	08006b8d 	.word	0x08006b8d
 8006814:	08006b8d 	.word	0x08006b8d
 8006818:	08006b8d 	.word	0x08006b8d
 800681c:	08006b95 	.word	0x08006b95
 8006820:	08006b95 	.word	0x08006b95
 8006824:	08006b95 	.word	0x08006b95
 8006828:	08006b95 	.word	0x08006b95
 800682c:	08006b9d 	.word	0x08006b9d
 8006830:	08006b9d 	.word	0x08006b9d
 8006834:	08006b9d 	.word	0x08006b9d
 8006838:	08006b9d 	.word	0x08006b9d
 800683c:	08006ba5 	.word	0x08006ba5
 8006840:	08006ba5 	.word	0x08006ba5
 8006844:	08006ba5 	.word	0x08006ba5
 8006848:	08006ba5 	.word	0x08006ba5
 800684c:	08006bad 	.word	0x08006bad
 8006850:	08006bad 	.word	0x08006bad
 8006854:	08006bad 	.word	0x08006bad
 8006858:	08006bad 	.word	0x08006bad
 800685c:	08006bb5 	.word	0x08006bb5
 8006860:	08006bb5 	.word	0x08006bb5
 8006864:	08006bb5 	.word	0x08006bb5
 8006868:	08006bb5 	.word	0x08006bb5
 800686c:	08006bbd 	.word	0x08006bbd
 8006870:	08006bbd 	.word	0x08006bbd
 8006874:	08006bbd 	.word	0x08006bbd
 8006878:	08006bbd 	.word	0x08006bbd
 800687c:	08006bc5 	.word	0x08006bc5
 8006880:	08006bc5 	.word	0x08006bc5
 8006884:	08006bc5 	.word	0x08006bc5
 8006888:	08006bc5 	.word	0x08006bc5
 800688c:	08006bcd 	.word	0x08006bcd
 8006890:	08006bcd 	.word	0x08006bcd
 8006894:	08006bcd 	.word	0x08006bcd
 8006898:	08006bcd 	.word	0x08006bcd
 800689c:	08006bd5 	.word	0x08006bd5
 80068a0:	08006bd5 	.word	0x08006bd5
 80068a4:	08006bd5 	.word	0x08006bd5
 80068a8:	08006bd5 	.word	0x08006bd5
 80068ac:	08006bdd 	.word	0x08006bdd
 80068b0:	08006bdd 	.word	0x08006bdd
 80068b4:	08006bdd 	.word	0x08006bdd
 80068b8:	08006bdd 	.word	0x08006bdd
 80068bc:	08006be5 	.word	0x08006be5
 80068c0:	08006be5 	.word	0x08006be5
 80068c4:	08006be5 	.word	0x08006be5
 80068c8:	08006be5 	.word	0x08006be5
 80068cc:	08006bed 	.word	0x08006bed
 80068d0:	08006bed 	.word	0x08006bed
 80068d4:	08006bed 	.word	0x08006bed
 80068d8:	08006bed 	.word	0x08006bed
 80068dc:	08006bf5 	.word	0x08006bf5
 80068e0:	08006bf5 	.word	0x08006bf5
 80068e4:	08006bf5 	.word	0x08006bf5
 80068e8:	08006bf5 	.word	0x08006bf5
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7fe ff0d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80068f2:	e184      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 80068f4:	2001      	movs	r0, #1
 80068f6:	f7fe ff09 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80068fa:	e180      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 80068fc:	2002      	movs	r0, #2
 80068fe:	f7fe ff05 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006902:	e17c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 8006904:	2003      	movs	r0, #3
 8006906:	f7fe ff01 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800690a:	e178      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 800690c:	2004      	movs	r0, #4
 800690e:	f7fe fefd 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006912:	e174      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 8006914:	2005      	movs	r0, #5
 8006916:	f7fe fef9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800691a:	e170      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 800691c:	2006      	movs	r0, #6
 800691e:	f7fe fef5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006922:	e16c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 8006924:	2007      	movs	r0, #7
 8006926:	f7fe fef1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800692a:	e168      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 800692c:	2008      	movs	r0, #8
 800692e:	f7fe feed 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006932:	e164      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8006934:	2009      	movs	r0, #9
 8006936:	f7fe fee9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800693a:	e160      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 800693c:	200a      	movs	r0, #10
 800693e:	f7fe fee5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006942:	e15c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8006944:	200b      	movs	r0, #11
 8006946:	f7fe fee1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800694a:	e158      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 800694c:	200c      	movs	r0, #12
 800694e:	f7fe fedd 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006952:	e154      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8006954:	200d      	movs	r0, #13
 8006956:	f7fe fed9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800695a:	e150      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 800695c:	200e      	movs	r0, #14
 800695e:	f7fe fed5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006962:	e14c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8006964:	200f      	movs	r0, #15
 8006966:	f7fe fed1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800696a:	e148      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 800696c:	2010      	movs	r0, #16
 800696e:	f7fe fecd 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006972:	e144      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 8006974:	2011      	movs	r0, #17
 8006976:	f7fe fec9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800697a:	e140      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 800697c:	2012      	movs	r0, #18
 800697e:	f7fe fec5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006982:	e13c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 8006984:	2013      	movs	r0, #19
 8006986:	f7fe fec1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800698a:	e138      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 800698c:	2014      	movs	r0, #20
 800698e:	f7fe febd 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006992:	e134      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 8006994:	2015      	movs	r0, #21
 8006996:	f7fe feb9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 800699a:	e130      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 800699c:	2016      	movs	r0, #22
 800699e:	f7fe feb5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069a2:	e12c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 80069a4:	2017      	movs	r0, #23
 80069a6:	f7fe feb1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069aa:	e128      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 80069ac:	2018      	movs	r0, #24
 80069ae:	f7fe fead 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069b2:	e124      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 80069b4:	2019      	movs	r0, #25
 80069b6:	f7fe fea9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069ba:	e120      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 80069bc:	201a      	movs	r0, #26
 80069be:	f7fe fea5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069c2:	e11c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 80069c4:	201b      	movs	r0, #27
 80069c6:	f7fe fea1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069ca:	e118      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 80069cc:	201c      	movs	r0, #28
 80069ce:	f7fe fe9d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069d2:	e114      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 80069d4:	201d      	movs	r0, #29
 80069d6:	f7fe fe99 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069da:	e110      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 80069dc:	201e      	movs	r0, #30
 80069de:	f7fe fe95 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069e2:	e10c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 80069e4:	201f      	movs	r0, #31
 80069e6:	f7fe fe91 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069ea:	e108      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 80069ec:	2020      	movs	r0, #32
 80069ee:	f7fe fe8d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069f2:	e104      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 80069f4:	2021      	movs	r0, #33	; 0x21
 80069f6:	f7fe fe89 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 80069fa:	e100      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 80069fc:	2022      	movs	r0, #34	; 0x22
 80069fe:	f7fe fe85 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a02:	e0fc      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 8006a04:	2023      	movs	r0, #35	; 0x23
 8006a06:	f7fe fe81 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a0a:	e0f8      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8006a0c:	2024      	movs	r0, #36	; 0x24
 8006a0e:	f7fe fe7d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a12:	e0f4      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8006a14:	2025      	movs	r0, #37	; 0x25
 8006a16:	f7fe fe79 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a1a:	e0f0      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8006a1c:	2026      	movs	r0, #38	; 0x26
 8006a1e:	f7fe fe75 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a22:	e0ec      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8006a24:	2027      	movs	r0, #39	; 0x27
 8006a26:	f7fe fe71 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a2a:	e0e8      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8006a2c:	2028      	movs	r0, #40	; 0x28
 8006a2e:	f7fe fe6d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a32:	e0e4      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8006a34:	2029      	movs	r0, #41	; 0x29
 8006a36:	f7fe fe69 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a3a:	e0e0      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8006a3c:	202a      	movs	r0, #42	; 0x2a
 8006a3e:	f7fe fe65 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a42:	e0dc      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8006a44:	202b      	movs	r0, #43	; 0x2b
 8006a46:	f7fe fe61 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a4a:	e0d8      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8006a4c:	202c      	movs	r0, #44	; 0x2c
 8006a4e:	f7fe fe5d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a52:	e0d4      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8006a54:	202d      	movs	r0, #45	; 0x2d
 8006a56:	f7fe fe59 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a5a:	e0d0      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8006a5c:	202e      	movs	r0, #46	; 0x2e
 8006a5e:	f7fe fe55 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a62:	e0cc      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8006a64:	202f      	movs	r0, #47	; 0x2f
 8006a66:	f7fe fe51 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a6a:	e0c8      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8006a6c:	2030      	movs	r0, #48	; 0x30
 8006a6e:	f7fe fe4d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a72:	e0c4      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 8006a74:	2031      	movs	r0, #49	; 0x31
 8006a76:	f7fe fe49 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a7a:	e0c0      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 8006a7c:	2032      	movs	r0, #50	; 0x32
 8006a7e:	f7fe fe45 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a82:	e0bc      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 8006a84:	2033      	movs	r0, #51	; 0x33
 8006a86:	f7fe fe41 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a8a:	e0b8      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 8006a8c:	2034      	movs	r0, #52	; 0x34
 8006a8e:	f7fe fe3d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a92:	e0b4      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 8006a94:	2035      	movs	r0, #53	; 0x35
 8006a96:	f7fe fe39 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006a9a:	e0b0      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 8006a9c:	2036      	movs	r0, #54	; 0x36
 8006a9e:	f7fe fe35 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006aa2:	e0ac      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 8006aa4:	2037      	movs	r0, #55	; 0x37
 8006aa6:	f7fe fe31 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006aaa:	e0a8      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 8006aac:	2038      	movs	r0, #56	; 0x38
 8006aae:	f7fe fe2d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006ab2:	e0a4      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 8006ab4:	2039      	movs	r0, #57	; 0x39
 8006ab6:	f7fe fe29 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006aba:	e0a0      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 8006abc:	203a      	movs	r0, #58	; 0x3a
 8006abe:	f7fe fe25 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006ac2:	e09c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 8006ac4:	203b      	movs	r0, #59	; 0x3b
 8006ac6:	f7fe fe21 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006aca:	e098      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 8006acc:	203c      	movs	r0, #60	; 0x3c
 8006ace:	f7fe fe1d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006ad2:	e094      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 8006ad4:	203d      	movs	r0, #61	; 0x3d
 8006ad6:	f7fe fe19 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006ada:	e090      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 8006adc:	203e      	movs	r0, #62	; 0x3e
 8006ade:	f7fe fe15 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006ae2:	e08c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8006ae4:	203f      	movs	r0, #63	; 0x3f
 8006ae6:	f7fe fe11 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006aea:	e088      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8006aec:	2040      	movs	r0, #64	; 0x40
 8006aee:	f7fe fe0d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006af2:	e084      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8006af4:	2041      	movs	r0, #65	; 0x41
 8006af6:	f7fe fe09 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006afa:	e080      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8006afc:	2042      	movs	r0, #66	; 0x42
 8006afe:	f7fe fe05 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b02:	e07c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8006b04:	2043      	movs	r0, #67	; 0x43
 8006b06:	f7fe fe01 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b0a:	e078      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8006b0c:	2044      	movs	r0, #68	; 0x44
 8006b0e:	f7fe fdfd 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b12:	e074      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 8006b14:	2045      	movs	r0, #69	; 0x45
 8006b16:	f7fe fdf9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b1a:	e070      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 8006b1c:	2046      	movs	r0, #70	; 0x46
 8006b1e:	f7fe fdf5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b22:	e06c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 8006b24:	2047      	movs	r0, #71	; 0x47
 8006b26:	f7fe fdf1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b2a:	e068      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 8006b2c:	2048      	movs	r0, #72	; 0x48
 8006b2e:	f7fe fded 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b32:	e064      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 8006b34:	2049      	movs	r0, #73	; 0x49
 8006b36:	f7fe fde9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b3a:	e060      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 8006b3c:	204a      	movs	r0, #74	; 0x4a
 8006b3e:	f7fe fde5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b42:	e05c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 8006b44:	204b      	movs	r0, #75	; 0x4b
 8006b46:	f7fe fde1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b4a:	e058      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 8006b4c:	204c      	movs	r0, #76	; 0x4c
 8006b4e:	f7fe fddd 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b52:	e054      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 8006b54:	204d      	movs	r0, #77	; 0x4d
 8006b56:	f7fe fdd9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b5a:	e050      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 8006b5c:	204e      	movs	r0, #78	; 0x4e
 8006b5e:	f7fe fdd5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b62:	e04c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 8006b64:	204f      	movs	r0, #79	; 0x4f
 8006b66:	f7fe fdd1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b6a:	e048      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 8006b6c:	2050      	movs	r0, #80	; 0x50
 8006b6e:	f7fe fdcd 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b72:	e044      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 8006b74:	2051      	movs	r0, #81	; 0x51
 8006b76:	f7fe fdc9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b7a:	e040      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 8006b7c:	2052      	movs	r0, #82	; 0x52
 8006b7e:	f7fe fdc5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b82:	e03c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 8006b84:	2053      	movs	r0, #83	; 0x53
 8006b86:	f7fe fdc1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b8a:	e038      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 8006b8c:	2054      	movs	r0, #84	; 0x54
 8006b8e:	f7fe fdbd 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b92:	e034      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 8006b94:	2055      	movs	r0, #85	; 0x55
 8006b96:	f7fe fdb9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006b9a:	e030      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 8006b9c:	2056      	movs	r0, #86	; 0x56
 8006b9e:	f7fe fdb5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006ba2:	e02c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 8006ba4:	2057      	movs	r0, #87	; 0x57
 8006ba6:	f7fe fdb1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006baa:	e028      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 8006bac:	2058      	movs	r0, #88	; 0x58
 8006bae:	f7fe fdad 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006bb2:	e024      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 8006bb4:	2059      	movs	r0, #89	; 0x59
 8006bb6:	f7fe fda9 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006bba:	e020      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 8006bbc:	205a      	movs	r0, #90	; 0x5a
 8006bbe:	f7fe fda5 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006bc2:	e01c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 8006bc4:	205b      	movs	r0, #91	; 0x5b
 8006bc6:	f7fe fda1 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006bca:	e018      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 8006bcc:	205c      	movs	r0, #92	; 0x5c
 8006bce:	f7fe fd9d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006bd2:	e014      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 8006bd4:	205d      	movs	r0, #93	; 0x5d
 8006bd6:	f7fe fd99 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006bda:	e010      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 8006bdc:	205e      	movs	r0, #94	; 0x5e
 8006bde:	f7fe fd95 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006be2:	e00c      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8006be4:	205f      	movs	r0, #95	; 0x5f
 8006be6:	f7fe fd91 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006bea:	e008      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8006bec:	2060      	movs	r0, #96	; 0x60
 8006bee:	f7fe fd8d 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006bf2:	e004      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8006bf4:	2061      	movs	r0, #97	; 0x61
 8006bf6:	f7fe fd89 	bl	800570c <VPP_ApplyPresetToSync>
			break;
 8006bfa:	e000      	b.n	8006bfe <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8006bfc:	bf00      	nop
	}
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop

08006c08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	; 0x30
 8006c0c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006c1a:	1d3b      	adds	r3, r7, #4
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f007 fd63 	bl	800e6ec <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006c26:	4b32      	ldr	r3, [pc, #200]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006c2e:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006c34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006c36:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c3c:	4b2c      	ldr	r3, [pc, #176]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006c42:	4b2b      	ldr	r3, [pc, #172]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006c48:	4b29      	ldr	r3, [pc, #164]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006c4e:	4b28      	ldr	r3, [pc, #160]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c50:	2204      	movs	r2, #4
 8006c52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006c54:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006c5a:	4b25      	ldr	r3, [pc, #148]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006c60:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006c66:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c6e:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c74:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006c7a:	4b1d      	ldr	r3, [pc, #116]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006c82:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c88:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006c8a:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006c92:	4817      	ldr	r0, [pc, #92]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c94:	f001 fee2 	bl	8008a5c <HAL_ADC_Init>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006c9e:	f000 feaf 	bl	8007a00 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006caa:	4619      	mov	r1, r3
 8006cac:	4810      	ldr	r0, [pc, #64]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006cae:	f002 fc6b 	bl	8009588 <HAL_ADCEx_MultiModeConfigChannel>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006cb8:	f000 fea2 	bl	8007a00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006cbc:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <MX_ADC1_Init+0xec>)
 8006cbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006cc0:	2306      	movs	r3, #6
 8006cc2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006cc8:	237f      	movs	r3, #127	; 0x7f
 8006cca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006ccc:	2304      	movs	r3, #4
 8006cce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006cd4:	1d3b      	adds	r3, r7, #4
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4805      	ldr	r0, [pc, #20]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006cda:	f002 f87f 	bl	8008ddc <HAL_ADC_ConfigChannel>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006ce4:	f000 fe8c 	bl	8007a00 <Error_Handler>
  }

}
 8006ce8:	bf00      	nop
 8006cea:	3730      	adds	r7, #48	; 0x30
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	20002510 	.word	0x20002510
 8006cf4:	0c900008 	.word	0x0c900008

08006cf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d00:	f107 0314 	add.w	r3, r7, #20
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	605a      	str	r2, [r3, #4]
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d18:	d14f      	bne.n	8006dba <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006d1a:	4b2a      	ldr	r3, [pc, #168]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1e:	4a29      	ldr	r2, [pc, #164]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d26:	4b27      	ldr	r3, [pc, #156]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d32:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d3e:	4b21      	ldr	r3, [pc, #132]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d4a:	2304      	movs	r3, #4
 8006d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d56:	f107 0314 	add.w	r3, r7, #20
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d60:	f003 fff4 	bl	800ad4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006d64:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d66:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <HAL_ADC_MspInit+0xd4>)
 8006d68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006d6a:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d70:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d76:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006d7c:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d7e:	2280      	movs	r2, #128	; 0x80
 8006d80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d82:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006d92:	4b0d      	ldr	r3, [pc, #52]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d94:	2220      	movs	r2, #32
 8006d96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006d9e:	480a      	ldr	r0, [pc, #40]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006da0:	f003 fd08 	bl	800a7b4 <HAL_DMA_Init>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006daa:	f000 fe29 	bl	8007a00 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a05      	ldr	r2, [pc, #20]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006db2:	655a      	str	r2, [r3, #84]	; 0x54
 8006db4:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006dba:	bf00      	nop
 8006dbc:	3728      	adds	r7, #40	; 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	2000257c 	.word	0x2000257c
 8006dcc:	40020008 	.word	0x40020008

08006dd0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006dd4:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006dd6:	4a10      	ldr	r2, [pc, #64]	; (8006e18 <MX_COMP1_Init+0x48>)
 8006dd8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006dda:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006de2:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <MX_COMP1_Init+0x4c>)
 8006de4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006df2:	4b08      	ldr	r3, [pc, #32]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006df8:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006dfe:	4805      	ldr	r0, [pc, #20]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006e00:	f002 fe16 	bl	8009a30 <HAL_COMP_Init>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006e0a:	f000 fdf9 	bl	8007a00 <Error_Handler>
  }

}
 8006e0e:	bf00      	nop
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200025dc 	.word	0x200025dc
 8006e18:	40010200 	.word	0x40010200
 8006e1c:	00800030 	.word	0x00800030

08006e20 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e28:	f107 030c 	add.w	r3, r7, #12
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	605a      	str	r2, [r3, #4]
 8006e32:	609a      	str	r2, [r3, #8]
 8006e34:	60da      	str	r2, [r3, #12]
 8006e36:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a0f      	ldr	r2, [pc, #60]	; (8006e7c <HAL_COMP_MspInit+0x5c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d118      	bne.n	8006e74 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e42:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <HAL_COMP_MspInit+0x60>)
 8006e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e46:	4a0e      	ldr	r2, [pc, #56]	; (8006e80 <HAL_COMP_MspInit+0x60>)
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <HAL_COMP_MspInit+0x60>)
 8006e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e66:	f107 030c 	add.w	r3, r7, #12
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e70:	f003 ff6c 	bl	800ad4c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006e74:	bf00      	nop
 8006e76:	3720      	adds	r7, #32
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40010200 	.word	0x40010200
 8006e80:	40021000 	.word	0x40021000

08006e84 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08c      	sub	sp, #48	; 0x30
 8006e88:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	2230      	movs	r2, #48	; 0x30
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f007 fc2b 	bl	800e6ec <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006e96:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <MX_DAC1_Init+0x8c>)
 8006e98:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <MX_DAC1_Init+0x90>)
 8006e9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006e9c:	481c      	ldr	r0, [pc, #112]	; (8006f10 <MX_DAC1_Init+0x8c>)
 8006e9e:	f003 f86a 	bl	8009f76 <HAL_DAC_Init>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006ea8:	f000 fdaa 	bl	8007a00 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006eac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006eb0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006ebe:	2306      	movs	r3, #6
 8006ec0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	480d      	ldr	r0, [pc, #52]	; (8006f10 <MX_DAC1_Init+0x8c>)
 8006eda:	f003 fa35 	bl	800a348 <HAL_DAC_ConfigChannel>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006ee4:	f000 fd8c 	bl	8007a00 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	2210      	movs	r2, #16
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4806      	ldr	r0, [pc, #24]	; (8006f10 <MX_DAC1_Init+0x8c>)
 8006ef8:	f003 fa26 	bl	800a348 <HAL_DAC_ConfigChannel>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006f02:	f000 fd7d 	bl	8007a00 <Error_Handler>
  }

}
 8006f06:	bf00      	nop
 8006f08:	3730      	adds	r7, #48	; 0x30
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20002614 	.word	0x20002614
 8006f14:	50000800 	.word	0x50000800

08006f18 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08c      	sub	sp, #48	; 0x30
 8006f1c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006f1e:	463b      	mov	r3, r7
 8006f20:	2230      	movs	r2, #48	; 0x30
 8006f22:	2100      	movs	r1, #0
 8006f24:	4618      	mov	r0, r3
 8006f26:	f007 fbe1 	bl	800e6ec <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006f2a:	4b16      	ldr	r3, [pc, #88]	; (8006f84 <MX_DAC2_Init+0x6c>)
 8006f2c:	4a16      	ldr	r2, [pc, #88]	; (8006f88 <MX_DAC2_Init+0x70>)
 8006f2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006f30:	4814      	ldr	r0, [pc, #80]	; (8006f84 <MX_DAC2_Init+0x6c>)
 8006f32:	f003 f820 	bl	8009f76 <HAL_DAC_Init>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006f3c:	f000 fd60 	bl	8007a00 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f44:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006f52:	2306      	movs	r3, #6
 8006f54:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006f66:	463b      	mov	r3, r7
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4805      	ldr	r0, [pc, #20]	; (8006f84 <MX_DAC2_Init+0x6c>)
 8006f6e:	f003 f9eb 	bl	800a348 <HAL_DAC_ConfigChannel>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006f78:	f000 fd42 	bl	8007a00 <Error_Handler>
  }

}
 8006f7c:	bf00      	nop
 8006f7e:	3730      	adds	r7, #48	; 0x30
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	20002600 	.word	0x20002600
 8006f88:	50000c00 	.word	0x50000c00

08006f8c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08c      	sub	sp, #48	; 0x30
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f94:	f107 031c 	add.w	r3, r7, #28
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	609a      	str	r2, [r3, #8]
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a56      	ldr	r2, [pc, #344]	; (8007104 <HAL_DAC_MspInit+0x178>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d150      	bne.n	8007050 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006fae:	4b56      	ldr	r3, [pc, #344]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb2:	4a55      	ldr	r2, [pc, #340]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fba:	4b53      	ldr	r3, [pc, #332]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8006fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fc6:	4b50      	ldr	r3, [pc, #320]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8006fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fca:	4a4f      	ldr	r2, [pc, #316]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8006fcc:	f043 0301 	orr.w	r3, r3, #1
 8006fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fd2:	4b4d      	ldr	r3, [pc, #308]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8006fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006fde:	2330      	movs	r3, #48	; 0x30
 8006fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fea:	f107 031c 	add.w	r3, r7, #28
 8006fee:	4619      	mov	r1, r3
 8006ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ff4:	f003 feaa 	bl	800ad4c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006ff8:	4b44      	ldr	r3, [pc, #272]	; (800710c <HAL_DAC_MspInit+0x180>)
 8006ffa:	4a45      	ldr	r2, [pc, #276]	; (8007110 <HAL_DAC_MspInit+0x184>)
 8006ffc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006ffe:	4b43      	ldr	r3, [pc, #268]	; (800710c <HAL_DAC_MspInit+0x180>)
 8007000:	2206      	movs	r2, #6
 8007002:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007004:	4b41      	ldr	r3, [pc, #260]	; (800710c <HAL_DAC_MspInit+0x180>)
 8007006:	2210      	movs	r2, #16
 8007008:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800700a:	4b40      	ldr	r3, [pc, #256]	; (800710c <HAL_DAC_MspInit+0x180>)
 800700c:	2200      	movs	r2, #0
 800700e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007010:	4b3e      	ldr	r3, [pc, #248]	; (800710c <HAL_DAC_MspInit+0x180>)
 8007012:	2280      	movs	r2, #128	; 0x80
 8007014:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007016:	4b3d      	ldr	r3, [pc, #244]	; (800710c <HAL_DAC_MspInit+0x180>)
 8007018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800701c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800701e:	4b3b      	ldr	r3, [pc, #236]	; (800710c <HAL_DAC_MspInit+0x180>)
 8007020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007024:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007026:	4b39      	ldr	r3, [pc, #228]	; (800710c <HAL_DAC_MspInit+0x180>)
 8007028:	2220      	movs	r2, #32
 800702a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800702c:	4b37      	ldr	r3, [pc, #220]	; (800710c <HAL_DAC_MspInit+0x180>)
 800702e:	2200      	movs	r2, #0
 8007030:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007032:	4836      	ldr	r0, [pc, #216]	; (800710c <HAL_DAC_MspInit+0x180>)
 8007034:	f003 fbbe 	bl	800a7b4 <HAL_DMA_Init>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800703e:	f000 fcdf 	bl	8007a00 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a31      	ldr	r2, [pc, #196]	; (800710c <HAL_DAC_MspInit+0x180>)
 8007046:	609a      	str	r2, [r3, #8]
 8007048:	4a30      	ldr	r2, [pc, #192]	; (800710c <HAL_DAC_MspInit+0x180>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800704e:	e054      	b.n	80070fa <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2f      	ldr	r2, [pc, #188]	; (8007114 <HAL_DAC_MspInit+0x188>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d14f      	bne.n	80070fa <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800705a:	4b2b      	ldr	r3, [pc, #172]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 800705c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705e:	4a2a      	ldr	r2, [pc, #168]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8007060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007066:	4b28      	ldr	r3, [pc, #160]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8007068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706e:	613b      	str	r3, [r7, #16]
 8007070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007072:	4b25      	ldr	r3, [pc, #148]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8007074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007076:	4a24      	ldr	r2, [pc, #144]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8007078:	f043 0301 	orr.w	r3, r3, #1
 800707c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800707e:	4b22      	ldr	r3, [pc, #136]	; (8007108 <HAL_DAC_MspInit+0x17c>)
 8007080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800708a:	2340      	movs	r3, #64	; 0x40
 800708c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800708e:	2303      	movs	r3, #3
 8007090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007092:	2300      	movs	r3, #0
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007096:	f107 031c 	add.w	r3, r7, #28
 800709a:	4619      	mov	r1, r3
 800709c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070a0:	f003 fe54 	bl	800ad4c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80070a4:	4b1c      	ldr	r3, [pc, #112]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070a6:	4a1d      	ldr	r2, [pc, #116]	; (800711c <HAL_DAC_MspInit+0x190>)
 80070a8:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80070aa:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070ac:	2229      	movs	r2, #41	; 0x29
 80070ae:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070b0:	4b19      	ldr	r3, [pc, #100]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070b2:	2210      	movs	r2, #16
 80070b4:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80070b6:	4b18      	ldr	r3, [pc, #96]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80070bc:	4b16      	ldr	r3, [pc, #88]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070be:	2280      	movs	r2, #128	; 0x80
 80070c0:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c8:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80070ca:	4b13      	ldr	r3, [pc, #76]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070d0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80070d2:	4b11      	ldr	r3, [pc, #68]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070d4:	2220      	movs	r2, #32
 80070d6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80070d8:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070da:	2200      	movs	r2, #0
 80070dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80070de:	480e      	ldr	r0, [pc, #56]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070e0:	f003 fb68 	bl	800a7b4 <HAL_DMA_Init>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80070ea:	f000 fc89 	bl	8007a00 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a09      	ldr	r2, [pc, #36]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070f2:	609a      	str	r2, [r3, #8]
 80070f4:	4a08      	ldr	r2, [pc, #32]	; (8007118 <HAL_DAC_MspInit+0x18c>)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80070fa:	bf00      	nop
 80070fc:	3730      	adds	r7, #48	; 0x30
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	50000800 	.word	0x50000800
 8007108:	40021000 	.word	0x40021000
 800710c:	20002628 	.word	0x20002628
 8007110:	4002001c 	.word	0x4002001c
 8007114:	50000c00 	.word	0x50000c00
 8007118:	20002688 	.word	0x20002688
 800711c:	40020030 	.word	0x40020030

08007120 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007126:	4b1a      	ldr	r3, [pc, #104]	; (8007190 <MX_DMA_Init+0x70>)
 8007128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712a:	4a19      	ldr	r2, [pc, #100]	; (8007190 <MX_DMA_Init+0x70>)
 800712c:	f043 0304 	orr.w	r3, r3, #4
 8007130:	6493      	str	r3, [r2, #72]	; 0x48
 8007132:	4b17      	ldr	r3, [pc, #92]	; (8007190 <MX_DMA_Init+0x70>)
 8007134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	607b      	str	r3, [r7, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800713e:	4b14      	ldr	r3, [pc, #80]	; (8007190 <MX_DMA_Init+0x70>)
 8007140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007142:	4a13      	ldr	r2, [pc, #76]	; (8007190 <MX_DMA_Init+0x70>)
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	6493      	str	r3, [r2, #72]	; 0x48
 800714a:	4b11      	ldr	r3, [pc, #68]	; (8007190 <MX_DMA_Init+0x70>)
 800714c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007156:	2200      	movs	r2, #0
 8007158:	2101      	movs	r1, #1
 800715a:	200b      	movs	r0, #11
 800715c:	f002 fed7 	bl	8009f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007160:	200b      	movs	r0, #11
 8007162:	f002 feee 	bl	8009f42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007166:	2200      	movs	r2, #0
 8007168:	2100      	movs	r1, #0
 800716a:	200c      	movs	r0, #12
 800716c:	f002 fecf 	bl	8009f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007170:	200c      	movs	r0, #12
 8007172:	f002 fee6 	bl	8009f42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007176:	2200      	movs	r2, #0
 8007178:	2100      	movs	r1, #0
 800717a:	200d      	movs	r0, #13
 800717c:	f002 fec7 	bl	8009f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007180:	200d      	movs	r0, #13
 8007182:	f002 fede 	bl	8009f42 <HAL_NVIC_EnableIRQ>

}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40021000 	.word	0x40021000

08007194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007198:	4b04      	ldr	r3, [pc, #16]	; (80071ac <__NVIC_GetPriorityGrouping+0x18>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	0a1b      	lsrs	r3, r3, #8
 800719e:	f003 0307 	and.w	r3, r3, #7
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	e000ed00 	.word	0xe000ed00

080071b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	db0b      	blt.n	80071da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	f003 021f 	and.w	r2, r3, #31
 80071c8:	4907      	ldr	r1, [pc, #28]	; (80071e8 <__NVIC_EnableIRQ+0x38>)
 80071ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	2001      	movs	r0, #1
 80071d2:	fa00 f202 	lsl.w	r2, r0, r2
 80071d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	e000e100 	.word	0xe000e100

080071ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	6039      	str	r1, [r7, #0]
 80071f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	db0a      	blt.n	8007216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	490c      	ldr	r1, [pc, #48]	; (8007238 <__NVIC_SetPriority+0x4c>)
 8007206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800720a:	0112      	lsls	r2, r2, #4
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	440b      	add	r3, r1
 8007210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007214:	e00a      	b.n	800722c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	b2da      	uxtb	r2, r3
 800721a:	4908      	ldr	r1, [pc, #32]	; (800723c <__NVIC_SetPriority+0x50>)
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	f003 030f 	and.w	r3, r3, #15
 8007222:	3b04      	subs	r3, #4
 8007224:	0112      	lsls	r2, r2, #4
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	440b      	add	r3, r1
 800722a:	761a      	strb	r2, [r3, #24]
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	e000e100 	.word	0xe000e100
 800723c:	e000ed00 	.word	0xe000ed00

08007240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007240:	b480      	push	{r7}
 8007242:	b089      	sub	sp, #36	; 0x24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	f1c3 0307 	rsb	r3, r3, #7
 800725a:	2b04      	cmp	r3, #4
 800725c:	bf28      	it	cs
 800725e:	2304      	movcs	r3, #4
 8007260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	3304      	adds	r3, #4
 8007266:	2b06      	cmp	r3, #6
 8007268:	d902      	bls.n	8007270 <NVIC_EncodePriority+0x30>
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3b03      	subs	r3, #3
 800726e:	e000      	b.n	8007272 <NVIC_EncodePriority+0x32>
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	fa02 f303 	lsl.w	r3, r2, r3
 800727e:	43da      	mvns	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	401a      	ands	r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	fa01 f303 	lsl.w	r3, r1, r3
 8007292:	43d9      	mvns	r1, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007298:	4313      	orrs	r3, r2
         );
}
 800729a:	4618      	mov	r0, r3
 800729c:	3724      	adds	r7, #36	; 0x24
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
	...

080072a8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80072b2:	4a14      	ldr	r2, [pc, #80]	; (8007304 <LL_SYSCFG_SetEXTISource+0x5c>)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	3302      	adds	r3, #2
 80072bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	0c1b      	lsrs	r3, r3, #16
 80072c4:	43db      	mvns	r3, r3
 80072c6:	ea02 0103 	and.w	r1, r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	fa93 f3a3 	rbit	r3, r3
 80072d6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	fab3 f383 	clz	r3, r3
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	409a      	lsls	r2, r3
 80072e8:	4806      	ldr	r0, [pc, #24]	; (8007304 <LL_SYSCFG_SetEXTISource+0x5c>)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	f003 0303 	and.w	r3, r3, #3
 80072f0:	430a      	orrs	r2, r1
 80072f2:	3302      	adds	r3, #2
 80072f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80072f8:	bf00      	nop
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	40010000 	.word	0x40010000

08007308 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007308:	b480      	push	{r7}
 800730a:	b089      	sub	sp, #36	; 0x24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	fa93 f3a3 	rbit	r3, r3
 8007322:	613b      	str	r3, [r7, #16]
  return result;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	fab3 f383 	clz	r3, r3
 800732a:	b2db      	uxtb	r3, r3
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	2103      	movs	r1, #3
 8007330:	fa01 f303 	lsl.w	r3, r1, r3
 8007334:	43db      	mvns	r3, r3
 8007336:	401a      	ands	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	fa93 f3a3 	rbit	r3, r3
 8007342:	61bb      	str	r3, [r7, #24]
  return result;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	fab3 f383 	clz	r3, r3
 800734a:	b2db      	uxtb	r3, r3
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	fa01 f303 	lsl.w	r3, r1, r3
 8007354:	431a      	orrs	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	601a      	str	r2, [r3, #0]
}
 800735a:	bf00      	nop
 800735c:	3724      	adds	r7, #36	; 0x24
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007366:	b480      	push	{r7}
 8007368:	b089      	sub	sp, #36	; 0x24
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	fa93 f3a3 	rbit	r3, r3
 8007380:	613b      	str	r3, [r7, #16]
  return result;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	fab3 f383 	clz	r3, r3
 8007388:	b2db      	uxtb	r3, r3
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	2103      	movs	r1, #3
 800738e:	fa01 f303 	lsl.w	r3, r1, r3
 8007392:	43db      	mvns	r3, r3
 8007394:	401a      	ands	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	fa93 f3a3 	rbit	r3, r3
 80073a0:	61bb      	str	r3, [r7, #24]
  return result;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	fab3 f383 	clz	r3, r3
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	fa01 f303 	lsl.w	r3, r1, r3
 80073b2:	431a      	orrs	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	60da      	str	r2, [r3, #12]
}
 80073b8:	bf00      	nop
 80073ba:	3724      	adds	r7, #36	; 0x24
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80073e8:	4b08      	ldr	r3, [pc, #32]	; (800740c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073ec:	4907      	ldr	r1, [pc, #28]	; (800740c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4013      	ands	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40021000 	.word	0x40021000

08007410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007416:	f107 031c 	add.w	r3, r7, #28
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	605a      	str	r2, [r3, #4]
 8007420:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007422:	1d3b      	adds	r3, r7, #4
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	609a      	str	r2, [r3, #8]
 800742c:	60da      	str	r2, [r3, #12]
 800742e:	611a      	str	r2, [r3, #16]
 8007430:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007432:	2004      	movs	r0, #4
 8007434:	f7ff ffd4 	bl	80073e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007438:	2020      	movs	r0, #32
 800743a:	f7ff ffd1 	bl	80073e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800743e:	2001      	movs	r0, #1
 8007440:	f7ff ffce 	bl	80073e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007444:	2002      	movs	r0, #2
 8007446:	f7ff ffcb 	bl	80073e0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800744a:	2108      	movs	r1, #8
 800744c:	48d3      	ldr	r0, [pc, #844]	; (800779c <MX_GPIO_Init+0x38c>)
 800744e:	f7ff ffb9 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8007452:	2108      	movs	r1, #8
 8007454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007458:	f7ff ffb4 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 800745c:	2110      	movs	r1, #16
 800745e:	48cf      	ldr	r0, [pc, #828]	; (800779c <MX_GPIO_Init+0x38c>)
 8007460:	f7ff ffb0 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8007464:	2120      	movs	r1, #32
 8007466:	48cd      	ldr	r0, [pc, #820]	; (800779c <MX_GPIO_Init+0x38c>)
 8007468:	f7ff ffac 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 800746c:	2101      	movs	r1, #1
 800746e:	48cc      	ldr	r0, [pc, #816]	; (80077a0 <MX_GPIO_Init+0x390>)
 8007470:	f7ff ffa8 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007478:	48c8      	ldr	r0, [pc, #800]	; (800779c <MX_GPIO_Init+0x38c>)
 800747a:	f7ff ffa3 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800747e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007482:	48c6      	ldr	r0, [pc, #792]	; (800779c <MX_GPIO_Init+0x38c>)
 8007484:	f7ff ff9e 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007488:	2140      	movs	r1, #64	; 0x40
 800748a:	48c5      	ldr	r0, [pc, #788]	; (80077a0 <MX_GPIO_Init+0x390>)
 800748c:	f7ff ff9a 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007490:	2180      	movs	r1, #128	; 0x80
 8007492:	48c3      	ldr	r0, [pc, #780]	; (80077a0 <MX_GPIO_Init+0x390>)
 8007494:	f7ff ff96 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800749c:	48c0      	ldr	r0, [pc, #768]	; (80077a0 <MX_GPIO_Init+0x390>)
 800749e:	f7ff ff91 	bl	80073c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80074a2:	49c0      	ldr	r1, [pc, #768]	; (80077a4 <MX_GPIO_Init+0x394>)
 80074a4:	2002      	movs	r0, #2
 80074a6:	f7ff feff 	bl	80072a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80074aa:	49bf      	ldr	r1, [pc, #764]	; (80077a8 <MX_GPIO_Init+0x398>)
 80074ac:	2002      	movs	r0, #2
 80074ae:	f7ff fefb 	bl	80072a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80074b2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80074b6:	2005      	movs	r0, #5
 80074b8:	f7ff fef6 	bl	80072a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80074bc:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80074c0:	2005      	movs	r0, #5
 80074c2:	f7ff fef1 	bl	80072a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80074c6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80074ca:	2002      	movs	r0, #2
 80074cc:	f7ff feec 	bl	80072a8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80074d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074d4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80074dc:	2300      	movs	r3, #0
 80074de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80074e2:	2302      	movs	r3, #2
 80074e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80074e8:	f107 031c 	add.w	r3, r7, #28
 80074ec:	4618      	mov	r0, r3
 80074ee:	f005 fead 	bl	800d24c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80074f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074f6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80074fe:	2300      	movs	r3, #0
 8007500:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007504:	2302      	movs	r3, #2
 8007506:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800750a:	f107 031c 	add.w	r3, r7, #28
 800750e:	4618      	mov	r0, r3
 8007510:	f005 fe9c 	bl	800d24c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007514:	2301      	movs	r3, #1
 8007516:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007518:	2301      	movs	r3, #1
 800751a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800751e:	2300      	movs	r3, #0
 8007520:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007524:	2302      	movs	r3, #2
 8007526:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800752a:	f107 031c 	add.w	r3, r7, #28
 800752e:	4618      	mov	r0, r3
 8007530:	f005 fe8c 	bl	800d24c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007534:	2302      	movs	r3, #2
 8007536:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800753e:	2300      	movs	r3, #0
 8007540:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007544:	2302      	movs	r3, #2
 8007546:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800754a:	f107 031c 	add.w	r3, r7, #28
 800754e:	4618      	mov	r0, r3
 8007550:	f005 fe7c 	bl	800d24c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007554:	2304      	movs	r3, #4
 8007556:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800755e:	2300      	movs	r3, #0
 8007560:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007564:	2302      	movs	r3, #2
 8007566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800756a:	f107 031c 	add.w	r3, r7, #28
 800756e:	4618      	mov	r0, r3
 8007570:	f005 fe6c 	bl	800d24c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007574:	2201      	movs	r2, #1
 8007576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800757a:	4888      	ldr	r0, [pc, #544]	; (800779c <MX_GPIO_Init+0x38c>)
 800757c:	f7ff fef3 	bl	8007366 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007580:	2201      	movs	r2, #1
 8007582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007586:	4885      	ldr	r0, [pc, #532]	; (800779c <MX_GPIO_Init+0x38c>)
 8007588:	f7ff feed 	bl	8007366 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 800758c:	2201      	movs	r2, #1
 800758e:	2101      	movs	r1, #1
 8007590:	4886      	ldr	r0, [pc, #536]	; (80077ac <MX_GPIO_Init+0x39c>)
 8007592:	f7ff fee8 	bl	8007366 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007596:	2201      	movs	r2, #1
 8007598:	2102      	movs	r1, #2
 800759a:	4884      	ldr	r0, [pc, #528]	; (80077ac <MX_GPIO_Init+0x39c>)
 800759c:	f7ff fee3 	bl	8007366 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 80075a0:	2201      	movs	r2, #1
 80075a2:	2104      	movs	r1, #4
 80075a4:	487d      	ldr	r0, [pc, #500]	; (800779c <MX_GPIO_Init+0x38c>)
 80075a6:	f7ff fede 	bl	8007366 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80075aa:	2200      	movs	r2, #0
 80075ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075b0:	487a      	ldr	r0, [pc, #488]	; (800779c <MX_GPIO_Init+0x38c>)
 80075b2:	f7ff fea9 	bl	8007308 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80075b6:	2200      	movs	r2, #0
 80075b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075bc:	4877      	ldr	r0, [pc, #476]	; (800779c <MX_GPIO_Init+0x38c>)
 80075be:	f7ff fea3 	bl	8007308 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80075c2:	2200      	movs	r2, #0
 80075c4:	2101      	movs	r1, #1
 80075c6:	4879      	ldr	r0, [pc, #484]	; (80077ac <MX_GPIO_Init+0x39c>)
 80075c8:	f7ff fe9e 	bl	8007308 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80075cc:	2200      	movs	r2, #0
 80075ce:	2102      	movs	r1, #2
 80075d0:	4876      	ldr	r0, [pc, #472]	; (80077ac <MX_GPIO_Init+0x39c>)
 80075d2:	f7ff fe99 	bl	8007308 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80075d6:	2200      	movs	r2, #0
 80075d8:	2104      	movs	r1, #4
 80075da:	4870      	ldr	r0, [pc, #448]	; (800779c <MX_GPIO_Init+0x38c>)
 80075dc:	f7ff fe94 	bl	8007308 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80075e0:	2308      	movs	r3, #8
 80075e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80075e4:	2301      	movs	r3, #1
 80075e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80075f0:	2302      	movs	r3, #2
 80075f2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80075f4:	1d3b      	adds	r3, r7, #4
 80075f6:	4619      	mov	r1, r3
 80075f8:	4868      	ldr	r0, [pc, #416]	; (800779c <MX_GPIO_Init+0x38c>)
 80075fa:	f006 f81a 	bl	800d632 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80075fe:	2308      	movs	r3, #8
 8007600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007602:	2301      	movs	r3, #1
 8007604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	4619      	mov	r1, r3
 8007616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800761a:	f006 f80a 	bl	800d632 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 800761e:	2310      	movs	r3, #16
 8007620:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007622:	2301      	movs	r3, #1
 8007624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8007632:	1d3b      	adds	r3, r7, #4
 8007634:	4619      	mov	r1, r3
 8007636:	4859      	ldr	r0, [pc, #356]	; (800779c <MX_GPIO_Init+0x38c>)
 8007638:	f005 fffb 	bl	800d632 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 800763c:	2320      	movs	r3, #32
 800763e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007640:	2301      	movs	r3, #1
 8007642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007648:	2300      	movs	r3, #0
 800764a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800764c:	2300      	movs	r3, #0
 800764e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	4619      	mov	r1, r3
 8007654:	4851      	ldr	r0, [pc, #324]	; (800779c <MX_GPIO_Init+0x38c>)
 8007656:	f005 ffec 	bl	800d632 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 800765a:	2301      	movs	r3, #1
 800765c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800765e:	2301      	movs	r3, #1
 8007660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007666:	2300      	movs	r3, #0
 8007668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800766e:	1d3b      	adds	r3, r7, #4
 8007670:	4619      	mov	r1, r3
 8007672:	484b      	ldr	r0, [pc, #300]	; (80077a0 <MX_GPIO_Init+0x390>)
 8007674:	f005 ffdd 	bl	800d632 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800767c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800767e:	2301      	movs	r3, #1
 8007680:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800768e:	1d3b      	adds	r3, r7, #4
 8007690:	4619      	mov	r1, r3
 8007692:	4842      	ldr	r0, [pc, #264]	; (800779c <MX_GPIO_Init+0x38c>)
 8007694:	f005 ffcd 	bl	800d632 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800769c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800769e:	2301      	movs	r3, #1
 80076a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	4619      	mov	r1, r3
 80076b2:	483a      	ldr	r0, [pc, #232]	; (800779c <MX_GPIO_Init+0x38c>)
 80076b4:	f005 ffbd 	bl	800d632 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80076b8:	2340      	movs	r3, #64	; 0x40
 80076ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076bc:	2301      	movs	r3, #1
 80076be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076c0:	2303      	movs	r3, #3
 80076c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80076cc:	1d3b      	adds	r3, r7, #4
 80076ce:	4619      	mov	r1, r3
 80076d0:	4833      	ldr	r0, [pc, #204]	; (80077a0 <MX_GPIO_Init+0x390>)
 80076d2:	f005 ffae 	bl	800d632 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80076d6:	2380      	movs	r3, #128	; 0x80
 80076d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076da:	2301      	movs	r3, #1
 80076dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076de:	2303      	movs	r3, #3
 80076e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076e6:	2300      	movs	r3, #0
 80076e8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80076ea:	1d3b      	adds	r3, r7, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	482c      	ldr	r0, [pc, #176]	; (80077a0 <MX_GPIO_Init+0x390>)
 80076f0:	f005 ff9f 	bl	800d632 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80076f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076fa:	2301      	movs	r3, #1
 80076fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076fe:	2303      	movs	r3, #3
 8007700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007702:	2300      	movs	r3, #0
 8007704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800770a:	1d3b      	adds	r3, r7, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4824      	ldr	r0, [pc, #144]	; (80077a0 <MX_GPIO_Init+0x390>)
 8007710:	f005 ff8f 	bl	800d632 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007714:	f7ff fd3e 	bl	8007194 <__NVIC_GetPriorityGrouping>
 8007718:	4603      	mov	r3, r0
 800771a:	2200      	movs	r2, #0
 800771c:	2100      	movs	r1, #0
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fd8e 	bl	8007240 <NVIC_EncodePriority>
 8007724:	4603      	mov	r3, r0
 8007726:	4619      	mov	r1, r3
 8007728:	2006      	movs	r0, #6
 800772a:	f7ff fd5f 	bl	80071ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800772e:	2006      	movs	r0, #6
 8007730:	f7ff fd3e 	bl	80071b0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007734:	f7ff fd2e 	bl	8007194 <__NVIC_GetPriorityGrouping>
 8007738:	4603      	mov	r3, r0
 800773a:	2200      	movs	r2, #0
 800773c:	2100      	movs	r1, #0
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fd7e 	bl	8007240 <NVIC_EncodePriority>
 8007744:	4603      	mov	r3, r0
 8007746:	4619      	mov	r1, r3
 8007748:	2007      	movs	r0, #7
 800774a:	f7ff fd4f 	bl	80071ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800774e:	2007      	movs	r0, #7
 8007750:	f7ff fd2e 	bl	80071b0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007754:	f7ff fd1e 	bl	8007194 <__NVIC_GetPriorityGrouping>
 8007758:	4603      	mov	r3, r0
 800775a:	2200      	movs	r2, #0
 800775c:	2100      	movs	r1, #0
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fd6e 	bl	8007240 <NVIC_EncodePriority>
 8007764:	4603      	mov	r3, r0
 8007766:	4619      	mov	r1, r3
 8007768:	2008      	movs	r0, #8
 800776a:	f7ff fd3f 	bl	80071ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800776e:	2008      	movs	r0, #8
 8007770:	f7ff fd1e 	bl	80071b0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007774:	f7ff fd0e 	bl	8007194 <__NVIC_GetPriorityGrouping>
 8007778:	4603      	mov	r3, r0
 800777a:	2200      	movs	r2, #0
 800777c:	2100      	movs	r1, #0
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fd5e 	bl	8007240 <NVIC_EncodePriority>
 8007784:	4603      	mov	r3, r0
 8007786:	4619      	mov	r1, r3
 8007788:	2028      	movs	r0, #40	; 0x28
 800778a:	f7ff fd2f 	bl	80071ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800778e:	2028      	movs	r0, #40	; 0x28
 8007790:	f7ff fd0e 	bl	80071b0 <__NVIC_EnableIRQ>

}
 8007794:	bf00      	nop
 8007796:	3728      	adds	r7, #40	; 0x28
 8007798:	46bd      	mov	sp, r7
 800779a:	e009      	b.n	80077b0 <MX_GPIO_Init+0x3a0>
 800779c:	48000800 	.word	0x48000800
 80077a0:	48000400 	.word	0x48000400
 80077a4:	0f000003 	.word	0x0f000003
 80077a8:	f0000003 	.word	0xf0000003
 80077ac:	48001400 	.word	0x48001400
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop

080077b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80077bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d013      	beq.n	80077f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80077cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80077d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80077dc:	e000      	b.n	80077e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80077de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80077e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0f9      	beq.n	80077de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80077ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80077f4:	687b      	ldr	r3, [r7, #4]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  int i=0;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	e009      	b.n	800782c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	60ba      	str	r2, [r7, #8]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff ffc7 	bl	80077b4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	3301      	adds	r3, #1
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	429a      	cmp	r2, r3
 8007832:	dbf1      	blt.n	8007818 <_write+0x16>
  return len;
 8007834:	687b      	ldr	r3, [r7, #4]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007844:	f000 feb5 	bl	80085b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007848:	f000 f86c 	bl	8007924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800784c:	f7ff fde0 	bl	8007410 <MX_GPIO_Init>
  MX_DMA_Init();
 8007850:	f7ff fc66 	bl	8007120 <MX_DMA_Init>
  MX_DAC1_Init();
 8007854:	f7ff fb16 	bl	8006e84 <MX_DAC1_Init>
  MX_DAC2_Init();
 8007858:	f7ff fb5e 	bl	8006f18 <MX_DAC2_Init>
  MX_ADC1_Init();
 800785c:	f7ff f9d4 	bl	8006c08 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007860:	f7ff fab6 	bl	8006dd0 <MX_COMP1_Init>
  MX_TIM2_Init();
 8007864:	f000 fbaa 	bl	8007fbc <MX_TIM2_Init>
  MX_SPI3_Init();
 8007868:	f000 f908 	bl	8007a7c <MX_SPI3_Init>
  MX_RNG_Init();
 800786c:	f000 f8f8 	bl	8007a60 <MX_RNG_Init>
  MX_TIM1_Init();
 8007870:	f000 fb34 	bl	8007edc <MX_TIM1_Init>
  MX_TIM8_Init();
 8007874:	f000 fc8a 	bl	800818c <MX_TIM8_Init>
  MX_TIM16_Init();
 8007878:	f000 fd42 	bl	8008300 <MX_TIM16_Init>
  MX_TIM15_Init();
 800787c:	f000 fcee 	bl	800825c <MX_TIM15_Init>
  MX_TIM5_Init();
 8007880:	f000 fc36 	bl	80080f0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007884:	f000 fbe6 	bl	8008054 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 8007888:	f7fd f94c 	bl	8004b24 <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 800788c:	f7fd fe14 	bl	80054b8 <SM_Init>
  FuncO_Init();
 8007890:	f7fd fb30 	bl	8004ef4 <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8007894:	2000      	movs	r0, #0
 8007896:	f7fd fbe5 	bl	8005064 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 800789a:	2000      	movs	r0, #0
 800789c:	f7fd fc3c 	bl	8005118 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_MAX_OUTPUT_ARR;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80078a0:	2110      	movs	r1, #16
 80078a2:	481b      	ldr	r0, [pc, #108]	; (8007910 <main+0xd0>)
 80078a4:	f002 fb89 	bl	8009fba <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80078a8:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <main+0xd4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a19      	ldr	r2, [pc, #100]	; (8007914 <main+0xd4>)
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 80078b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078b8:	f7fd fab2 	bl	8004e20 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80078bc:	2201      	movs	r2, #1
 80078be:	2108      	movs	r1, #8
 80078c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078c4:	f003 fbc4 	bl	800b050 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 80078c8:	2059      	movs	r0, #89	; 0x59
 80078ca:	f7fd fef1 	bl	80056b0 <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80078ce:	2200      	movs	r2, #0
 80078d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078d4:	4810      	ldr	r0, [pc, #64]	; (8007918 <main+0xd8>)
 80078d6:	f003 fbbb 	bl	800b050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80078da:	2200      	movs	r2, #0
 80078dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078e0:	480d      	ldr	r0, [pc, #52]	; (8007918 <main+0xd8>)
 80078e2:	f003 fbb5 	bl	800b050 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80078e6:	480d      	ldr	r0, [pc, #52]	; (800791c <main+0xdc>)
 80078e8:	f004 fcac 	bl	800c244 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80078ec:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <main+0xe0>)
 80078ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078f2:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <main+0xe0>)
 80078f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078fa:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80078fc:	f7f9 f9a2 	bl	8000c44 <DM_Init>
  DM_PostInit();
 8007900:	f7f9 f9ae 	bl	8000c60 <DM_PostInit>

  IM_Init();
 8007904:	f7fc ff5c 	bl	80047c0 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007908:	f7fb ff9e 	bl	8003848 <EM_ProcessEvent>
 800790c:	e7fc      	b.n	8007908 <main+0xc8>
 800790e:	bf00      	nop
 8007910:	20002614 	.word	0x20002614
 8007914:	40013400 	.word	0x40013400
 8007918:	48000800 	.word	0x48000800
 800791c:	2000287c 	.word	0x2000287c
 8007920:	40001000 	.word	0x40001000

08007924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b0a8      	sub	sp, #160	; 0xa0
 8007928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800792a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800792e:	2238      	movs	r2, #56	; 0x38
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f006 feda 	bl	800e6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007938:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	609a      	str	r2, [r3, #8]
 8007944:	60da      	str	r2, [r3, #12]
 8007946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007948:	463b      	mov	r3, r7
 800794a:	2254      	movs	r2, #84	; 0x54
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f006 fecc 	bl	800e6ec <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007954:	2000      	movs	r0, #0
 8007956:	f003 fb93 	bl	800b080 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800795a:	2322      	movs	r3, #34	; 0x22
 800795c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800795e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007962:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007964:	2340      	movs	r3, #64	; 0x40
 8007966:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007968:	2301      	movs	r3, #1
 800796a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800796e:	2302      	movs	r3, #2
 8007970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007974:	2302      	movs	r3, #2
 8007976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800797a:	2302      	movs	r3, #2
 800797c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007980:	232a      	movs	r3, #42	; 0x2a
 8007982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8007986:	231e      	movs	r3, #30
 8007988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800798c:	2304      	movs	r3, #4
 800798e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007992:	2302      	movs	r3, #2
 8007994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007998:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800799c:	4618      	mov	r0, r3
 800799e:	f003 fc13 	bl	800b1c8 <HAL_RCC_OscConfig>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <SystemClock_Config+0x88>
  {
    Error_Handler();
 80079a8:	f000 f82a 	bl	8007a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80079ac:	230f      	movs	r3, #15
 80079ae:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80079b0:	2303      	movs	r3, #3
 80079b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80079b4:	2300      	movs	r3, #0
 80079b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80079b8:	2300      	movs	r3, #0
 80079ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80079bc:	2300      	movs	r3, #0
 80079be:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80079c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079c4:	2108      	movs	r1, #8
 80079c6:	4618      	mov	r0, r3
 80079c8:	f003 ff16 	bl	800b7f8 <HAL_RCC_ClockConfig>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80079d2:	f000 f815 	bl	8007a00 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80079d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80079da:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80079dc:	2300      	movs	r3, #0
 80079de:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80079e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079e6:	463b      	mov	r3, r7
 80079e8:	4618      	mov	r0, r3
 80079ea:	f004 f8f5 	bl	800bbd8 <HAL_RCCEx_PeriphCLKConfig>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80079f4:	f000 f804 	bl	8007a00 <Error_Handler>
  }
}
 80079f8:	bf00      	nop
 80079fa:	37a0      	adds	r7, #160	; 0xa0
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007a04:	bf00      	nop
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f043 0204 	orr.w	r2, r3, #4
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	601a      	str	r2, [r3, #0]
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
	...

08007a30 <LL_AHB2_GRP1_EnableClock>:
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007a38:	4b08      	ldr	r3, [pc, #32]	; (8007a5c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a3c:	4907      	ldr	r1, [pc, #28]	; (8007a5c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007a44:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	40021000 	.word	0x40021000

08007a60 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007a64:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007a68:	f7ff ffe2 	bl	8007a30 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007a6c:	4802      	ldr	r0, [pc, #8]	; (8007a78 <MX_RNG_Init+0x18>)
 8007a6e:	f7ff ffce 	bl	8007a0e <LL_RNG_Enable>

}
 8007a72:	bf00      	nop
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	50060800 	.word	0x50060800

08007a7c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007a80:	4b1b      	ldr	r3, [pc, #108]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007a82:	4a1c      	ldr	r2, [pc, #112]	; (8007af4 <MX_SPI3_Init+0x78>)
 8007a84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007a86:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007a8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007a8e:	4b18      	ldr	r3, [pc, #96]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007a94:	4b16      	ldr	r3, [pc, #88]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007a96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007a9a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a9c:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007ab0:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007ab2:	2210      	movs	r2, #16
 8007ab4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ab6:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007abc:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007ac8:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007aca:	2207      	movs	r2, #7
 8007acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007ace:	4b08      	ldr	r3, [pc, #32]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007ad6:	2208      	movs	r2, #8
 8007ad8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007ada:	4805      	ldr	r0, [pc, #20]	; (8007af0 <MX_SPI3_Init+0x74>)
 8007adc:	f004 fac8 	bl	800c070 <HAL_SPI_Init>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007ae6:	f7ff ff8b 	bl	8007a00 <Error_Handler>
  }

}
 8007aea:	bf00      	nop
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	200026e8 	.word	0x200026e8
 8007af4:	40003c00 	.word	0x40003c00

08007af8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b00:	f107 0314 	add.w	r3, r7, #20
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	609a      	str	r2, [r3, #8]
 8007b0c:	60da      	str	r2, [r3, #12]
 8007b0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a17      	ldr	r2, [pc, #92]	; (8007b74 <HAL_SPI_MspInit+0x7c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d128      	bne.n	8007b6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007b1a:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <HAL_SPI_MspInit+0x80>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	4a16      	ldr	r2, [pc, #88]	; (8007b78 <HAL_SPI_MspInit+0x80>)
 8007b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b24:	6593      	str	r3, [r2, #88]	; 0x58
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <HAL_SPI_MspInit+0x80>)
 8007b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b2e:	613b      	str	r3, [r7, #16]
 8007b30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b32:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <HAL_SPI_MspInit+0x80>)
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	4a10      	ldr	r2, [pc, #64]	; (8007b78 <HAL_SPI_MspInit+0x80>)
 8007b38:	f043 0304 	orr.w	r3, r3, #4
 8007b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <HAL_SPI_MspInit+0x80>)
 8007b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b42:	f003 0304 	and.w	r3, r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007b4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b50:	2302      	movs	r3, #2
 8007b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007b5c:	2306      	movs	r3, #6
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b60:	f107 0314 	add.w	r3, r7, #20
 8007b64:	4619      	mov	r1, r3
 8007b66:	4805      	ldr	r0, [pc, #20]	; (8007b7c <HAL_SPI_MspInit+0x84>)
 8007b68:	f003 f8f0 	bl	800ad4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007b6c:	bf00      	nop
 8007b6e:	3728      	adds	r7, #40	; 0x28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	40003c00 	.word	0x40003c00
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	48000800 	.word	0x48000800

08007b80 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	4a04      	ldr	r2, [pc, #16]	; (8007b9c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b8e:	6093      	str	r3, [r2, #8]
}
 8007b90:	bf00      	nop
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40007000 	.word	0x40007000

08007ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ba6:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <HAL_MspInit+0x44>)
 8007ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007baa:	4a0e      	ldr	r2, [pc, #56]	; (8007be4 <HAL_MspInit+0x44>)
 8007bac:	f043 0301 	orr.w	r3, r3, #1
 8007bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <HAL_MspInit+0x44>)
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	607b      	str	r3, [r7, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <HAL_MspInit+0x44>)
 8007bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc2:	4a08      	ldr	r2, [pc, #32]	; (8007be4 <HAL_MspInit+0x44>)
 8007bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8007bca:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <HAL_MspInit+0x44>)
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007bd6:	f7ff ffd3 	bl	8007b80 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40021000 	.word	0x40021000

08007be8 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007bf2:	695a      	ldr	r2, [r3, #20]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d101      	bne.n	8007c02 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	40010400 	.word	0x40010400

08007c14 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007c1c:	4a04      	ldr	r2, [pc, #16]	; (8007c30 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6153      	str	r3, [r2, #20]
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40010400 	.word	0x40010400

08007c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c38:	bf00      	nop
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c42:	b480      	push	{r7}
 8007c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c46:	e7fe      	b.n	8007c46 <HardFault_Handler+0x4>

08007c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c4c:	e7fe      	b.n	8007c4c <MemManage_Handler+0x4>

08007c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c52:	e7fe      	b.n	8007c52 <BusFault_Handler+0x4>

08007c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c58:	e7fe      	b.n	8007c58 <UsageFault_Handler+0x4>

08007c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c5e:	bf00      	nop
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c6c:	bf00      	nop
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c76:	b480      	push	{r7}
 8007c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c7a:	bf00      	nop
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c88:	f000 fce6 	bl	8008658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c8c:	bf00      	nop
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007c94:	f7fc fe4c 	bl	8004930 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007c98:	2001      	movs	r0, #1
 8007c9a:	f7ff ffa5 	bl	8007be8 <LL_EXTI_IsActiveFlag_0_31>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f7ff ffb5 	bl	8007c14 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007caa:	bf00      	nop
 8007cac:	bd80      	pop	{r7, pc}

08007cae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007cb2:	f7fc fe63 	bl	800497c <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007cb6:	2002      	movs	r0, #2
 8007cb8:	f7ff ff96 	bl	8007be8 <LL_EXTI_IsActiveFlag_0_31>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007cc2:	2002      	movs	r0, #2
 8007cc4:	f7ff ffa6 	bl	8007c14 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007cc8:	bf00      	nop
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007cd0:	f7fc fe7a 	bl	80049c8 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007cd4:	2004      	movs	r0, #4
 8007cd6:	f7ff ff87 	bl	8007be8 <LL_EXTI_IsActiveFlag_0_31>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007ce0:	2004      	movs	r0, #4
 8007ce2:	f7ff ff97 	bl	8007c14 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007ce6:	bf00      	nop
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007cf0:	4802      	ldr	r0, [pc, #8]	; (8007cfc <DMA1_Channel1_IRQHandler+0x10>)
 8007cf2:	f002 fedb 	bl	800aaac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007cf6:	bf00      	nop
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	2000257c 	.word	0x2000257c

08007d00 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007d04:	4802      	ldr	r0, [pc, #8]	; (8007d10 <DMA1_Channel2_IRQHandler+0x10>)
 8007d06:	f002 fed1 	bl	800aaac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007d0a:	bf00      	nop
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20002628 	.word	0x20002628

08007d14 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007d18:	4802      	ldr	r0, [pc, #8]	; (8007d24 <DMA1_Channel3_IRQHandler+0x10>)
 8007d1a:	f002 fec7 	bl	800aaac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007d1e:	bf00      	nop
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20002688 	.word	0x20002688

08007d28 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007d2c:	f7f8 ffb6 	bl	8000c9c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007d30:	f7fc fe70 	bl	8004a14 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d34:	4803      	ldr	r0, [pc, #12]	; (8007d44 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007d36:	f004 fbe6 	bl	800c506 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007d3a:	4803      	ldr	r0, [pc, #12]	; (8007d48 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007d3c:	f004 fbe3 	bl	800c506 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007d40:	bf00      	nop
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	2000287c 	.word	0x2000287c
 8007d48:	20002798 	.word	0x20002798

08007d4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007d50:	4802      	ldr	r0, [pc, #8]	; (8007d5c <TIM3_IRQHandler+0x10>)
 8007d52:	f004 fbd8 	bl	800c506 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007d56:	bf00      	nop
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20002830 	.word	0x20002830

08007d60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007d64:	f7fc fd94 	bl	8004890 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007d68:	f7fc fdba 	bl	80048e0 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007d6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007d70:	f7ff ff3a 	bl	8007be8 <LL_EXTI_IsActiveFlag_0_31>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007d7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007d7e:	f7ff ff49 	bl	8007c14 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007d82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d86:	f7ff ff2f 	bl	8007be8 <LL_EXTI_IsActiveFlag_0_31>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007d90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d94:	f7ff ff3e 	bl	8007c14 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007d98:	bf00      	nop
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEPINCREMENT_TIM_IRQHandler();
 8007da0:	f7fc fd1e 	bl	80047e0 <IM_SWEEPINCREMENT_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007da4:	4802      	ldr	r0, [pc, #8]	; (8007db0 <TIM5_IRQHandler+0x14>)
 8007da6:	f004 fbae 	bl	800c506 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007daa:	bf00      	nop
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	200027e4 	.word	0x200027e4

08007db4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	e00a      	b.n	8007ddc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007dc6:	f3af 8000 	nop.w
 8007dca:	4601      	mov	r1, r0
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	60ba      	str	r2, [r7, #8]
 8007dd2:	b2ca      	uxtb	r2, r1
 8007dd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	dbf0      	blt.n	8007dc6 <_read+0x12>
	}

return len;
 8007de4:	687b      	ldr	r3, [r7, #4]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <_close>:
	}
	return len;
}

int _close(int file)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
	return -1;
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e16:	605a      	str	r2, [r3, #4]
	return 0;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <_isatty>:

int _isatty(int file)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
	return 1;
 8007e2e:	2301      	movs	r3, #1
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
	return 0;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
	...

08007e58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007e60:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <_sbrk+0x50>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <_sbrk+0x16>
		heap_end = &end;
 8007e68:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <_sbrk+0x50>)
 8007e6a:	4a10      	ldr	r2, [pc, #64]	; (8007eac <_sbrk+0x54>)
 8007e6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ea8 <_sbrk+0x50>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007e74:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <_sbrk+0x50>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	466a      	mov	r2, sp
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d907      	bls.n	8007e92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007e82:	f006 fc09 	bl	800e698 <__errno>
 8007e86:	4602      	mov	r2, r0
 8007e88:	230c      	movs	r3, #12
 8007e8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e90:	e006      	b.n	8007ea0 <_sbrk+0x48>
	}

	heap_end += incr;
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <_sbrk+0x50>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4413      	add	r3, r2
 8007e9a:	4a03      	ldr	r2, [pc, #12]	; (8007ea8 <_sbrk+0x50>)
 8007e9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	20001f28 	.word	0x20001f28
 8007eac:	20002968 	.word	0x20002968

08007eb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <SystemInit+0x28>)
 8007eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eba:	4a07      	ldr	r2, [pc, #28]	; (8007ed8 <SystemInit+0x28>)
 8007ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ec4:	4b04      	ldr	r3, [pc, #16]	; (8007ed8 <SystemInit+0x28>)
 8007ec6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007eca:	609a      	str	r2, [r3, #8]
#endif
}
 8007ecc:	bf00      	nop
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	e000ed00 	.word	0xe000ed00

08007edc <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b09a      	sub	sp, #104	; 0x68
 8007ee0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007ee2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ee6:	2224      	movs	r2, #36	; 0x24
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f006 fbfe 	bl	800e6ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ef0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007efc:	1d3b      	adds	r3, r7, #4
 8007efe:	2234      	movs	r2, #52	; 0x34
 8007f00:	2100      	movs	r1, #0
 8007f02:	4618      	mov	r0, r3
 8007f04:	f006 fbf2 	bl	800e6ec <memset>

  htim1.Instance = TIM1;
 8007f08:	4b2a      	ldr	r3, [pc, #168]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f0a:	4a2b      	ldr	r2, [pc, #172]	; (8007fb8 <MX_TIM1_Init+0xdc>)
 8007f0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007f0e:	4b29      	ldr	r3, [pc, #164]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8007f14:	4b27      	ldr	r3, [pc, #156]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f16:	2240      	movs	r2, #64	; 0x40
 8007f18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007f1a:	4b26      	ldr	r3, [pc, #152]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f22:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007f28:	4b22      	ldr	r3, [pc, #136]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f2e:	4b21      	ldr	r3, [pc, #132]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f30:	2280      	movs	r2, #128	; 0x80
 8007f32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007f34:	2303      	movs	r3, #3
 8007f36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007f40:	2300      	movs	r3, #0
 8007f42:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007f50:	2300      	movs	r3, #0
 8007f52:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007f58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4815      	ldr	r0, [pc, #84]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f60:	f004 fa2b 	bl	800c3ba <HAL_TIM_Encoder_Init>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007f6a:	f7ff fd49 	bl	8007a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007f6e:	2320      	movs	r3, #32
 8007f70:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007f72:	2300      	movs	r3, #0
 8007f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007f7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007f7e:	4619      	mov	r1, r3
 8007f80:	480c      	ldr	r0, [pc, #48]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f82:	f004 fea5 	bl	800ccd0 <HAL_TIMEx_MasterConfigSynchronization>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007f8c:	f7ff fd38 	bl	8007a00 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007f90:	2300      	movs	r3, #0
 8007f92:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007f94:	2300      	movs	r3, #0
 8007f96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007f98:	1d3b      	adds	r3, r7, #4
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <MX_TIM1_Init+0xd8>)
 8007f9e:	f004 ff2d 	bl	800cdfc <HAL_TIMEx_ConfigBreakDeadTime>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007fa8:	f7ff fd2a 	bl	8007a00 <Error_Handler>
  }

}
 8007fac:	bf00      	nop
 8007fae:	3768      	adds	r7, #104	; 0x68
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	2000287c 	.word	0x2000287c
 8007fb8:	40012c00 	.word	0x40012c00

08007fbc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fc2:	f107 0310 	add.w	r3, r7, #16
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	605a      	str	r2, [r3, #4]
 8007fcc:	609a      	str	r2, [r3, #8]
 8007fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fd0:	1d3b      	adds	r3, r7, #4
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
 8007fd8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007fda:	4b1d      	ldr	r3, [pc, #116]	; (8008050 <MX_TIM2_Init+0x94>)
 8007fdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007fe0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007fe2:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <MX_TIM2_Init+0x94>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fe8:	4b19      	ldr	r3, [pc, #100]	; (8008050 <MX_TIM2_Init+0x94>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007fee:	4b18      	ldr	r3, [pc, #96]	; (8008050 <MX_TIM2_Init+0x94>)
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ff4:	4b16      	ldr	r3, [pc, #88]	; (8008050 <MX_TIM2_Init+0x94>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007ffa:	4b15      	ldr	r3, [pc, #84]	; (8008050 <MX_TIM2_Init+0x94>)
 8007ffc:	2280      	movs	r2, #128	; 0x80
 8007ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008000:	4813      	ldr	r0, [pc, #76]	; (8008050 <MX_TIM2_Init+0x94>)
 8008002:	f004 f8c7 	bl	800c194 <HAL_TIM_Base_Init>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800800c:	f7ff fcf8 	bl	8007a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008014:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008016:	f107 0310 	add.w	r3, r7, #16
 800801a:	4619      	mov	r1, r3
 800801c:	480c      	ldr	r0, [pc, #48]	; (8008050 <MX_TIM2_Init+0x94>)
 800801e:	f004 fbf1 	bl	800c804 <HAL_TIM_ConfigClockSource>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008028:	f7ff fcea 	bl	8007a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800802c:	2320      	movs	r3, #32
 800802e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008030:	2300      	movs	r3, #0
 8008032:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008034:	1d3b      	adds	r3, r7, #4
 8008036:	4619      	mov	r1, r3
 8008038:	4805      	ldr	r0, [pc, #20]	; (8008050 <MX_TIM2_Init+0x94>)
 800803a:	f004 fe49 	bl	800ccd0 <HAL_TIMEx_MasterConfigSynchronization>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008044:	f7ff fcdc 	bl	8007a00 <Error_Handler>
  }

}
 8008048:	bf00      	nop
 800804a:	3720      	adds	r7, #32
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	200028c8 	.word	0x200028c8

08008054 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800805a:	f107 0310 	add.w	r3, r7, #16
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	605a      	str	r2, [r3, #4]
 8008064:	609a      	str	r2, [r3, #8]
 8008066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008068:	1d3b      	adds	r3, r7, #4
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	605a      	str	r2, [r3, #4]
 8008070:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8008072:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <MX_TIM3_Init+0x94>)
 8008074:	4a1d      	ldr	r2, [pc, #116]	; (80080ec <MX_TIM3_Init+0x98>)
 8008076:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008078:	4b1b      	ldr	r3, [pc, #108]	; (80080e8 <MX_TIM3_Init+0x94>)
 800807a:	2200      	movs	r2, #0
 800807c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800807e:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <MX_TIM3_Init+0x94>)
 8008080:	2210      	movs	r2, #16
 8008082:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008084:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <MX_TIM3_Init+0x94>)
 8008086:	2201      	movs	r2, #1
 8008088:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800808a:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <MX_TIM3_Init+0x94>)
 800808c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008090:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <MX_TIM3_Init+0x94>)
 8008094:	2200      	movs	r2, #0
 8008096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008098:	4813      	ldr	r0, [pc, #76]	; (80080e8 <MX_TIM3_Init+0x94>)
 800809a:	f004 f87b 	bl	800c194 <HAL_TIM_Base_Init>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80080a4:	f7ff fcac 	bl	8007a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80080ae:	f107 0310 	add.w	r3, r7, #16
 80080b2:	4619      	mov	r1, r3
 80080b4:	480c      	ldr	r0, [pc, #48]	; (80080e8 <MX_TIM3_Init+0x94>)
 80080b6:	f004 fba5 	bl	800c804 <HAL_TIM_ConfigClockSource>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80080c0:	f7ff fc9e 	bl	8007a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080c4:	2300      	movs	r3, #0
 80080c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80080cc:	1d3b      	adds	r3, r7, #4
 80080ce:	4619      	mov	r1, r3
 80080d0:	4805      	ldr	r0, [pc, #20]	; (80080e8 <MX_TIM3_Init+0x94>)
 80080d2:	f004 fdfd 	bl	800ccd0 <HAL_TIMEx_MasterConfigSynchronization>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80080dc:	f7ff fc90 	bl	8007a00 <Error_Handler>
  }

}
 80080e0:	bf00      	nop
 80080e2:	3720      	adds	r7, #32
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20002830 	.word	0x20002830
 80080ec:	40000400 	.word	0x40000400

080080f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b088      	sub	sp, #32
 80080f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080f6:	f107 0310 	add.w	r3, r7, #16
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	605a      	str	r2, [r3, #4]
 8008100:	609a      	str	r2, [r3, #8]
 8008102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008104:	1d3b      	adds	r3, r7, #4
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	605a      	str	r2, [r3, #4]
 800810c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800810e:	4b1d      	ldr	r3, [pc, #116]	; (8008184 <MX_TIM5_Init+0x94>)
 8008110:	4a1d      	ldr	r2, [pc, #116]	; (8008188 <MX_TIM5_Init+0x98>)
 8008112:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008114:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <MX_TIM5_Init+0x94>)
 8008116:	2200      	movs	r2, #0
 8008118:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800811a:	4b1a      	ldr	r3, [pc, #104]	; (8008184 <MX_TIM5_Init+0x94>)
 800811c:	2200      	movs	r2, #0
 800811e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008120:	4b18      	ldr	r3, [pc, #96]	; (8008184 <MX_TIM5_Init+0x94>)
 8008122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008126:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008128:	4b16      	ldr	r3, [pc, #88]	; (8008184 <MX_TIM5_Init+0x94>)
 800812a:	2200      	movs	r2, #0
 800812c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800812e:	4b15      	ldr	r3, [pc, #84]	; (8008184 <MX_TIM5_Init+0x94>)
 8008130:	2280      	movs	r2, #128	; 0x80
 8008132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008134:	4813      	ldr	r0, [pc, #76]	; (8008184 <MX_TIM5_Init+0x94>)
 8008136:	f004 f82d 	bl	800c194 <HAL_TIM_Base_Init>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008140:	f7ff fc5e 	bl	8007a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008148:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800814a:	f107 0310 	add.w	r3, r7, #16
 800814e:	4619      	mov	r1, r3
 8008150:	480c      	ldr	r0, [pc, #48]	; (8008184 <MX_TIM5_Init+0x94>)
 8008152:	f004 fb57 	bl	800c804 <HAL_TIM_ConfigClockSource>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800815c:	f7ff fc50 	bl	8007a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008160:	2300      	movs	r3, #0
 8008162:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008168:	1d3b      	adds	r3, r7, #4
 800816a:	4619      	mov	r1, r3
 800816c:	4805      	ldr	r0, [pc, #20]	; (8008184 <MX_TIM5_Init+0x94>)
 800816e:	f004 fdaf 	bl	800ccd0 <HAL_TIMEx_MasterConfigSynchronization>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008178:	f7ff fc42 	bl	8007a00 <Error_Handler>
  }

}
 800817c:	bf00      	nop
 800817e:	3720      	adds	r7, #32
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	200027e4 	.word	0x200027e4
 8008188:	40000c00 	.word	0x40000c00

0800818c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b094      	sub	sp, #80	; 0x50
 8008190:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008192:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	605a      	str	r2, [r3, #4]
 800819c:	609a      	str	r2, [r3, #8]
 800819e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80081ac:	463b      	mov	r3, r7
 80081ae:	2234      	movs	r2, #52	; 0x34
 80081b0:	2100      	movs	r1, #0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f006 fa9a 	bl	800e6ec <memset>

  htim8.Instance = TIM8;
 80081b8:	4b26      	ldr	r3, [pc, #152]	; (8008254 <MX_TIM8_Init+0xc8>)
 80081ba:	4a27      	ldr	r2, [pc, #156]	; (8008258 <MX_TIM8_Init+0xcc>)
 80081bc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80081be:	4b25      	ldr	r3, [pc, #148]	; (8008254 <MX_TIM8_Init+0xc8>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081c4:	4b23      	ldr	r3, [pc, #140]	; (8008254 <MX_TIM8_Init+0xc8>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80081ca:	4b22      	ldr	r3, [pc, #136]	; (8008254 <MX_TIM8_Init+0xc8>)
 80081cc:	2201      	movs	r2, #1
 80081ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081d0:	4b20      	ldr	r3, [pc, #128]	; (8008254 <MX_TIM8_Init+0xc8>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80081d6:	4b1f      	ldr	r3, [pc, #124]	; (8008254 <MX_TIM8_Init+0xc8>)
 80081d8:	2200      	movs	r2, #0
 80081da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80081dc:	4b1d      	ldr	r3, [pc, #116]	; (8008254 <MX_TIM8_Init+0xc8>)
 80081de:	2280      	movs	r2, #128	; 0x80
 80081e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80081e2:	481c      	ldr	r0, [pc, #112]	; (8008254 <MX_TIM8_Init+0xc8>)
 80081e4:	f003 ffd6 	bl	800c194 <HAL_TIM_Base_Init>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80081ee:	f7ff fc07 	bl	8007a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081f6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80081f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081fc:	4619      	mov	r1, r3
 80081fe:	4815      	ldr	r0, [pc, #84]	; (8008254 <MX_TIM8_Init+0xc8>)
 8008200:	f004 fb00 	bl	800c804 <HAL_TIM_ConfigClockSource>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800820a:	f7ff fbf9 	bl	8007a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800820e:	2320      	movs	r3, #32
 8008210:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008212:	2300      	movs	r3, #0
 8008214:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008216:	2300      	movs	r3, #0
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800821a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800821e:	4619      	mov	r1, r3
 8008220:	480c      	ldr	r0, [pc, #48]	; (8008254 <MX_TIM8_Init+0xc8>)
 8008222:	f004 fd55 	bl	800ccd0 <HAL_TIMEx_MasterConfigSynchronization>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800822c:	f7ff fbe8 	bl	8007a00 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008234:	2300      	movs	r3, #0
 8008236:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008238:	463b      	mov	r3, r7
 800823a:	4619      	mov	r1, r3
 800823c:	4805      	ldr	r0, [pc, #20]	; (8008254 <MX_TIM8_Init+0xc8>)
 800823e:	f004 fddd 	bl	800cdfc <HAL_TIMEx_ConfigBreakDeadTime>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008248:	f7ff fbda 	bl	8007a00 <Error_Handler>
  }

}
 800824c:	bf00      	nop
 800824e:	3750      	adds	r7, #80	; 0x50
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	2000274c 	.word	0x2000274c
 8008258:	40013400 	.word	0x40013400

0800825c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008262:	f107 0310 	add.w	r3, r7, #16
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	605a      	str	r2, [r3, #4]
 800826c:	609a      	str	r2, [r3, #8]
 800826e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008270:	1d3b      	adds	r3, r7, #4
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	605a      	str	r2, [r3, #4]
 8008278:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800827a:	4b1f      	ldr	r3, [pc, #124]	; (80082f8 <MX_TIM15_Init+0x9c>)
 800827c:	4a1f      	ldr	r2, [pc, #124]	; (80082fc <MX_TIM15_Init+0xa0>)
 800827e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008280:	4b1d      	ldr	r3, [pc, #116]	; (80082f8 <MX_TIM15_Init+0x9c>)
 8008282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008286:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008288:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <MX_TIM15_Init+0x9c>)
 800828a:	2200      	movs	r2, #0
 800828c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 800828e:	4b1a      	ldr	r3, [pc, #104]	; (80082f8 <MX_TIM15_Init+0x9c>)
 8008290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008294:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008296:	4b18      	ldr	r3, [pc, #96]	; (80082f8 <MX_TIM15_Init+0x9c>)
 8008298:	2200      	movs	r2, #0
 800829a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800829c:	4b16      	ldr	r3, [pc, #88]	; (80082f8 <MX_TIM15_Init+0x9c>)
 800829e:	2200      	movs	r2, #0
 80082a0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <MX_TIM15_Init+0x9c>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80082a8:	4813      	ldr	r0, [pc, #76]	; (80082f8 <MX_TIM15_Init+0x9c>)
 80082aa:	f003 ff73 	bl	800c194 <HAL_TIM_Base_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80082b4:	f7ff fba4 	bl	8007a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80082be:	f107 0310 	add.w	r3, r7, #16
 80082c2:	4619      	mov	r1, r3
 80082c4:	480c      	ldr	r0, [pc, #48]	; (80082f8 <MX_TIM15_Init+0x9c>)
 80082c6:	f004 fa9d 	bl	800c804 <HAL_TIM_ConfigClockSource>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80082d0:	f7ff fb96 	bl	8007a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082d4:	2300      	movs	r3, #0
 80082d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80082dc:	1d3b      	adds	r3, r7, #4
 80082de:	4619      	mov	r1, r3
 80082e0:	4805      	ldr	r0, [pc, #20]	; (80082f8 <MX_TIM15_Init+0x9c>)
 80082e2:	f004 fcf5 	bl	800ccd0 <HAL_TIMEx_MasterConfigSynchronization>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80082ec:	f7ff fb88 	bl	8007a00 <Error_Handler>
  }

}
 80082f0:	bf00      	nop
 80082f2:	3720      	adds	r7, #32
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20002798 	.word	0x20002798
 80082fc:	40014000 	.word	0x40014000

08008300 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008304:	4b10      	ldr	r3, [pc, #64]	; (8008348 <MX_TIM16_Init+0x48>)
 8008306:	4a11      	ldr	r2, [pc, #68]	; (800834c <MX_TIM16_Init+0x4c>)
 8008308:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 800830a:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <MX_TIM16_Init+0x48>)
 800830c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008310:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008312:	4b0d      	ldr	r3, [pc, #52]	; (8008348 <MX_TIM16_Init+0x48>)
 8008314:	2200      	movs	r2, #0
 8008316:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008318:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <MX_TIM16_Init+0x48>)
 800831a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800831e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008320:	4b09      	ldr	r3, [pc, #36]	; (8008348 <MX_TIM16_Init+0x48>)
 8008322:	2200      	movs	r2, #0
 8008324:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008326:	4b08      	ldr	r3, [pc, #32]	; (8008348 <MX_TIM16_Init+0x48>)
 8008328:	2200      	movs	r2, #0
 800832a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800832c:	4b06      	ldr	r3, [pc, #24]	; (8008348 <MX_TIM16_Init+0x48>)
 800832e:	2200      	movs	r2, #0
 8008330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008332:	4805      	ldr	r0, [pc, #20]	; (8008348 <MX_TIM16_Init+0x48>)
 8008334:	f003 ff2e 	bl	800c194 <HAL_TIM_Base_Init>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800833e:	f7ff fb5f 	bl	8007a00 <Error_Handler>
  }

}
 8008342:	bf00      	nop
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20002914 	.word	0x20002914
 800834c:	40014400 	.word	0x40014400

08008350 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	; 0x28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008358:	f107 0314 	add.w	r3, r7, #20
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	609a      	str	r2, [r3, #8]
 8008364:	60da      	str	r2, [r3, #12]
 8008366:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a1b      	ldr	r2, [pc, #108]	; (80083dc <HAL_TIM_Encoder_MspInit+0x8c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d12f      	bne.n	80083d2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008372:	4b1b      	ldr	r3, [pc, #108]	; (80083e0 <HAL_TIM_Encoder_MspInit+0x90>)
 8008374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008376:	4a1a      	ldr	r2, [pc, #104]	; (80083e0 <HAL_TIM_Encoder_MspInit+0x90>)
 8008378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800837c:	6613      	str	r3, [r2, #96]	; 0x60
 800837e:	4b18      	ldr	r3, [pc, #96]	; (80083e0 <HAL_TIM_Encoder_MspInit+0x90>)
 8008380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800838a:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <HAL_TIM_Encoder_MspInit+0x90>)
 800838c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <HAL_TIM_Encoder_MspInit+0x90>)
 8008390:	f043 0304 	orr.w	r3, r3, #4
 8008394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008396:	4b12      	ldr	r3, [pc, #72]	; (80083e0 <HAL_TIM_Encoder_MspInit+0x90>)
 8008398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80083a2:	2303      	movs	r3, #3
 80083a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083a6:	2302      	movs	r3, #2
 80083a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ae:	2300      	movs	r3, #0
 80083b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80083b2:	2302      	movs	r3, #2
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083b6:	f107 0314 	add.w	r3, r7, #20
 80083ba:	4619      	mov	r1, r3
 80083bc:	4809      	ldr	r0, [pc, #36]	; (80083e4 <HAL_TIM_Encoder_MspInit+0x94>)
 80083be:	f002 fcc5 	bl	800ad4c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80083c2:	2200      	movs	r2, #0
 80083c4:	2100      	movs	r1, #0
 80083c6:	2018      	movs	r0, #24
 80083c8:	f001 fda1 	bl	8009f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80083cc:	2018      	movs	r0, #24
 80083ce:	f001 fdb8 	bl	8009f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80083d2:	bf00      	nop
 80083d4:	3728      	adds	r7, #40	; 0x28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	40012c00 	.word	0x40012c00
 80083e0:	40021000 	.word	0x40021000
 80083e4:	48000800 	.word	0x48000800

080083e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	; 0x38
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	605a      	str	r2, [r3, #4]
 80083fa:	609a      	str	r2, [r3, #8]
 80083fc:	60da      	str	r2, [r3, #12]
 80083fe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008408:	d10c      	bne.n	8008424 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800840a:	4b4f      	ldr	r3, [pc, #316]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 800840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840e:	4a4e      	ldr	r2, [pc, #312]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008410:	f043 0301 	orr.w	r3, r3, #1
 8008414:	6593      	str	r3, [r2, #88]	; 0x58
 8008416:	4b4c      	ldr	r3, [pc, #304]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	623b      	str	r3, [r7, #32]
 8008420:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8008422:	e08d      	b.n	8008540 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a48      	ldr	r2, [pc, #288]	; (800854c <HAL_TIM_Base_MspInit+0x164>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d114      	bne.n	8008458 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800842e:	4b46      	ldr	r3, [pc, #280]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008432:	4a45      	ldr	r2, [pc, #276]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008434:	f043 0302 	orr.w	r3, r3, #2
 8008438:	6593      	str	r3, [r2, #88]	; 0x58
 800843a:	4b43      	ldr	r3, [pc, #268]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 800843c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	61fb      	str	r3, [r7, #28]
 8008444:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008446:	2200      	movs	r2, #0
 8008448:	2100      	movs	r1, #0
 800844a:	201d      	movs	r0, #29
 800844c:	f001 fd5f 	bl	8009f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008450:	201d      	movs	r0, #29
 8008452:	f001 fd76 	bl	8009f42 <HAL_NVIC_EnableIRQ>
}
 8008456:	e073      	b.n	8008540 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a3c      	ldr	r2, [pc, #240]	; (8008550 <HAL_TIM_Base_MspInit+0x168>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d131      	bne.n	80084c6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008462:	4b39      	ldr	r3, [pc, #228]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008466:	4a38      	ldr	r2, [pc, #224]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008468:	f043 0308 	orr.w	r3, r3, #8
 800846c:	6593      	str	r3, [r2, #88]	; 0x58
 800846e:	4b36      	ldr	r3, [pc, #216]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008472:	f003 0308 	and.w	r3, r3, #8
 8008476:	61bb      	str	r3, [r7, #24]
 8008478:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800847a:	4b33      	ldr	r3, [pc, #204]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 800847c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847e:	4a32      	ldr	r2, [pc, #200]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008480:	f043 0301 	orr.w	r3, r3, #1
 8008484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008486:	4b30      	ldr	r3, [pc, #192]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008492:	2301      	movs	r3, #1
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008496:	2302      	movs	r3, #2
 8008498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849a:	2300      	movs	r3, #0
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800849e:	2300      	movs	r3, #0
 80084a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80084a2:	2302      	movs	r3, #2
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084aa:	4619      	mov	r1, r3
 80084ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084b0:	f002 fc4c 	bl	800ad4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 80084b4:	2200      	movs	r2, #0
 80084b6:	2102      	movs	r1, #2
 80084b8:	2032      	movs	r0, #50	; 0x32
 80084ba:	f001 fd28 	bl	8009f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80084be:	2032      	movs	r0, #50	; 0x32
 80084c0:	f001 fd3f 	bl	8009f42 <HAL_NVIC_EnableIRQ>
}
 80084c4:	e03c      	b.n	8008540 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a22      	ldr	r2, [pc, #136]	; (8008554 <HAL_TIM_Base_MspInit+0x16c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d10c      	bne.n	80084ea <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80084d0:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 80084d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084d4:	4a1c      	ldr	r2, [pc, #112]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 80084d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084da:	6613      	str	r3, [r2, #96]	; 0x60
 80084dc:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 80084de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	693b      	ldr	r3, [r7, #16]
}
 80084e8:	e02a      	b.n	8008540 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1a      	ldr	r2, [pc, #104]	; (8008558 <HAL_TIM_Base_MspInit+0x170>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d114      	bne.n	800851e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80084f4:	4b14      	ldr	r3, [pc, #80]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 80084f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f8:	4a13      	ldr	r2, [pc, #76]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 80084fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084fe:	6613      	str	r3, [r2, #96]	; 0x60
 8008500:	4b11      	ldr	r3, [pc, #68]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800850c:	2200      	movs	r2, #0
 800850e:	2100      	movs	r1, #0
 8008510:	2018      	movs	r0, #24
 8008512:	f001 fcfc 	bl	8009f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008516:	2018      	movs	r0, #24
 8008518:	f001 fd13 	bl	8009f42 <HAL_NVIC_EnableIRQ>
}
 800851c:	e010      	b.n	8008540 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a0e      	ldr	r2, [pc, #56]	; (800855c <HAL_TIM_Base_MspInit+0x174>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d10b      	bne.n	8008540 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008528:	4b07      	ldr	r3, [pc, #28]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 800852a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852c:	4a06      	ldr	r2, [pc, #24]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 800852e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008532:	6613      	str	r3, [r2, #96]	; 0x60
 8008534:	4b04      	ldr	r3, [pc, #16]	; (8008548 <HAL_TIM_Base_MspInit+0x160>)
 8008536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853c:	60bb      	str	r3, [r7, #8]
 800853e:	68bb      	ldr	r3, [r7, #8]
}
 8008540:	bf00      	nop
 8008542:	3738      	adds	r7, #56	; 0x38
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	40021000 	.word	0x40021000
 800854c:	40000400 	.word	0x40000400
 8008550:	40000c00 	.word	0x40000c00
 8008554:	40013400 	.word	0x40013400
 8008558:	40014000 	.word	0x40014000
 800855c:	40014400 	.word	0x40014400

08008560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008560:	480d      	ldr	r0, [pc, #52]	; (8008598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008562:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008564:	480d      	ldr	r0, [pc, #52]	; (800859c <LoopForever+0x6>)
  ldr r1, =_edata
 8008566:	490e      	ldr	r1, [pc, #56]	; (80085a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008568:	4a0e      	ldr	r2, [pc, #56]	; (80085a4 <LoopForever+0xe>)
  movs r3, #0
 800856a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800856c:	e002      	b.n	8008574 <LoopCopyDataInit>

0800856e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800856e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008572:	3304      	adds	r3, #4

08008574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008578:	d3f9      	bcc.n	800856e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800857a:	4a0b      	ldr	r2, [pc, #44]	; (80085a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800857c:	4c0b      	ldr	r4, [pc, #44]	; (80085ac <LoopForever+0x16>)
  movs r3, #0
 800857e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008580:	e001      	b.n	8008586 <LoopFillZerobss>

08008582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008584:	3204      	adds	r2, #4

08008586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008588:	d3fb      	bcc.n	8008582 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800858a:	f7ff fc91 	bl	8007eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800858e:	f006 f889 	bl	800e6a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008592:	f7ff f955 	bl	8007840 <main>

08008596 <LoopForever>:

LoopForever:
    b LoopForever
 8008596:	e7fe      	b.n	8008596 <LoopForever>
  ldr   r0, =_estack
 8008598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800859c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085a0:	20001ecc 	.word	0x20001ecc
  ldr r2, =_sidata
 80085a4:	080127f0 	.word	0x080127f0
  ldr r2, =_sbss
 80085a8:	20001ecc 	.word	0x20001ecc
  ldr r4, =_ebss
 80085ac:	20002968 	.word	0x20002968

080085b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80085b0:	e7fe      	b.n	80085b0 <ADC1_2_IRQHandler>

080085b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b082      	sub	sp, #8
 80085b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085bc:	2003      	movs	r0, #3
 80085be:	f001 fc9b 	bl	8009ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80085c2:	2000      	movs	r0, #0
 80085c4:	f000 f80e 	bl	80085e4 <HAL_InitTick>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	71fb      	strb	r3, [r7, #7]
 80085d2:	e001      	b.n	80085d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80085d4:	f7ff fae4 	bl	8007ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80085d8:	79fb      	ldrb	r3, [r7, #7]

}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80085f0:	4b16      	ldr	r3, [pc, #88]	; (800864c <HAL_InitTick+0x68>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d022      	beq.n	800863e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80085f8:	4b15      	ldr	r3, [pc, #84]	; (8008650 <HAL_InitTick+0x6c>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	4b13      	ldr	r3, [pc, #76]	; (800864c <HAL_InitTick+0x68>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008604:	fbb1 f3f3 	udiv	r3, r1, r3
 8008608:	fbb2 f3f3 	udiv	r3, r2, r3
 800860c:	4618      	mov	r0, r3
 800860e:	f001 fca6 	bl	8009f5e <HAL_SYSTICK_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10f      	bne.n	8008638 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b0f      	cmp	r3, #15
 800861c:	d809      	bhi.n	8008632 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800861e:	2200      	movs	r2, #0
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008626:	f001 fc72 	bl	8009f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800862a:	4a0a      	ldr	r2, [pc, #40]	; (8008654 <HAL_InitTick+0x70>)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	e007      	b.n	8008642 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	73fb      	strb	r3, [r7, #15]
 8008636:	e004      	b.n	8008642 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	73fb      	strb	r3, [r7, #15]
 800863c:	e001      	b.n	8008642 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008642:	7bfb      	ldrb	r3, [r7, #15]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20000cb0 	.word	0x20000cb0
 8008650:	20000ca8 	.word	0x20000ca8
 8008654:	20000cac 	.word	0x20000cac

08008658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800865c:	4b05      	ldr	r3, [pc, #20]	; (8008674 <HAL_IncTick+0x1c>)
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	4b05      	ldr	r3, [pc, #20]	; (8008678 <HAL_IncTick+0x20>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4413      	add	r3, r2
 8008666:	4a03      	ldr	r2, [pc, #12]	; (8008674 <HAL_IncTick+0x1c>)
 8008668:	6013      	str	r3, [r2, #0]
}
 800866a:	bf00      	nop
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	20002960 	.word	0x20002960
 8008678:	20000cb0 	.word	0x20000cb0

0800867c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
  return uwTick;
 8008680:	4b03      	ldr	r3, [pc, #12]	; (8008690 <HAL_GetTick+0x14>)
 8008682:	681b      	ldr	r3, [r3, #0]
}
 8008684:	4618      	mov	r0, r3
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20002960 	.word	0x20002960

08008694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800869c:	f7ff ffee 	bl	800867c <HAL_GetTick>
 80086a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ac:	d004      	beq.n	80086b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80086ae:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <HAL_Delay+0x40>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4413      	add	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086b8:	bf00      	nop
 80086ba:	f7ff ffdf 	bl	800867c <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d8f7      	bhi.n	80086ba <HAL_Delay+0x26>
  {
  }
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000cb0 	.word	0x20000cb0

080086d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	609a      	str	r2, [r3, #8]
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	431a      	orrs	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	609a      	str	r2, [r3, #8]
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008734:	4618      	mov	r0, r3
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008740:	b490      	push	{r4, r7}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3360      	adds	r3, #96	; 0x60
 8008752:	461a      	mov	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <LL_ADC_SetOffset+0x40>)
 8008760:	4013      	ands	r3, r2
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008772:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bc90      	pop	{r4, r7}
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	03fff000 	.word	0x03fff000

08008784 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008784:	b490      	push	{r4, r7}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3360      	adds	r3, #96	; 0x60
 8008792:	461a      	mov	r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc90      	pop	{r4, r7}
 80087aa:	4770      	bx	lr

080087ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80087ac:	b490      	push	{r4, r7}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3360      	adds	r3, #96	; 0x60
 80087bc:	461a      	mov	r2, r3
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc90      	pop	{r4, r7}
 80087da:	4770      	bx	lr

080087dc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80087dc:	b490      	push	{r4, r7}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3360      	adds	r3, #96	; 0x60
 80087ec:	461a      	mov	r2, r3
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4313      	orrs	r3, r2
 8008800:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bc90      	pop	{r4, r7}
 800880a:	4770      	bx	lr

0800880c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800880c:	b490      	push	{r4, r7}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3360      	adds	r3, #96	; 0x60
 800881c:	461a      	mov	r2, r3
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4313      	orrs	r3, r2
 8008830:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bc90      	pop	{r4, r7}
 800883a:	4770      	bx	lr

0800883c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	615a      	str	r2, [r3, #20]
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008862:	b490      	push	{r4, r7}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3330      	adds	r3, #48	; 0x30
 8008872:	461a      	mov	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	f003 030c 	and.w	r3, r3, #12
 800887e:	4413      	add	r3, r2
 8008880:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f003 031f 	and.w	r3, r3, #31
 800888a:	211f      	movs	r1, #31
 800888c:	fa01 f303 	lsl.w	r3, r1, r3
 8008890:	43db      	mvns	r3, r3
 8008892:	401a      	ands	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	0e9b      	lsrs	r3, r3, #26
 8008898:	f003 011f 	and.w	r1, r3, #31
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f003 031f 	and.w	r3, r3, #31
 80088a2:	fa01 f303 	lsl.w	r3, r1, r3
 80088a6:	4313      	orrs	r3, r2
 80088a8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bc90      	pop	{r4, r7}
 80088b2:	4770      	bx	lr

080088b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80088b4:	b490      	push	{r4, r7}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3314      	adds	r3, #20
 80088c4:	461a      	mov	r2, r3
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	0e5b      	lsrs	r3, r3, #25
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	4413      	add	r3, r2
 80088d2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80088d4:	6822      	ldr	r2, [r4, #0]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	0d1b      	lsrs	r3, r3, #20
 80088da:	f003 031f 	and.w	r3, r3, #31
 80088de:	2107      	movs	r1, #7
 80088e0:	fa01 f303 	lsl.w	r3, r1, r3
 80088e4:	43db      	mvns	r3, r3
 80088e6:	401a      	ands	r2, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	0d1b      	lsrs	r3, r3, #20
 80088ec:	f003 031f 	and.w	r3, r3, #31
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	fa01 f303 	lsl.w	r3, r1, r3
 80088f6:	4313      	orrs	r3, r2
 80088f8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bc90      	pop	{r4, r7}
 8008902:	4770      	bx	lr

08008904 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800891c:	43db      	mvns	r3, r3
 800891e:	401a      	ands	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f003 0318 	and.w	r3, r3, #24
 8008926:	4908      	ldr	r1, [pc, #32]	; (8008948 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008928:	40d9      	lsrs	r1, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	400b      	ands	r3, r1
 800892e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008932:	431a      	orrs	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	0007ffff 	.word	0x0007ffff

0800894c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800895c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	6093      	str	r3, [r2, #8]
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008984:	d101      	bne.n	800898a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80089a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80089ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089d4:	d101      	bne.n	80089da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d101      	bne.n	8008a00 <LL_ADC_IsEnabled+0x18>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e000      	b.n	8008a02 <LL_ADC_IsEnabled+0x1a>
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 0304 	and.w	r3, r3, #4
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d101      	bne.n	8008a26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d101      	bne.n	8008a4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e000      	b.n	8008a4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b089      	sub	sp, #36	; 0x24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e1ad      	b.n	8008dd2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d109      	bne.n	8008a98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7fe f937 	bl	8006cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7ff ff67 	bl	8008970 <LL_ADC_IsDeepPowerDownEnabled>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d004      	beq.n	8008ab2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff ff4d 	bl	800894c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7ff ff82 	bl	80089c0 <LL_ADC_IsInternalRegulatorEnabled>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d113      	bne.n	8008aea <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff ff66 	bl	8008998 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008acc:	4b9e      	ldr	r3, [pc, #632]	; (8008d48 <HAL_ADC_Init+0x2ec>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	099b      	lsrs	r3, r3, #6
 8008ad2:	4a9e      	ldr	r2, [pc, #632]	; (8008d4c <HAL_ADC_Init+0x2f0>)
 8008ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad8:	099b      	lsrs	r3, r3, #6
 8008ada:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008adc:	e002      	b.n	8008ae4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1f9      	bne.n	8008ade <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff ff66 	bl	80089c0 <LL_ADC_IsInternalRegulatorEnabled>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10d      	bne.n	8008b16 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008afe:	f043 0210 	orr.w	r2, r3, #16
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b0a:	f043 0201 	orr.w	r2, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff ff77 	bl	8008a0e <LL_ADC_REG_IsConversionOngoing>
 8008b20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b26:	f003 0310 	and.w	r3, r3, #16
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f040 8148 	bne.w	8008dc0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f040 8144 	bne.w	8008dc0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008b40:	f043 0202 	orr.w	r2, r3, #2
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff ff4b 	bl	80089e8 <LL_ADC_IsEnabled>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d141      	bne.n	8008bdc <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b60:	d004      	beq.n	8008b6c <HAL_ADC_Init+0x110>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a7a      	ldr	r2, [pc, #488]	; (8008d50 <HAL_ADC_Init+0x2f4>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d10f      	bne.n	8008b8c <HAL_ADC_Init+0x130>
 8008b6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008b70:	f7ff ff3a 	bl	80089e8 <LL_ADC_IsEnabled>
 8008b74:	4604      	mov	r4, r0
 8008b76:	4876      	ldr	r0, [pc, #472]	; (8008d50 <HAL_ADC_Init+0x2f4>)
 8008b78:	f7ff ff36 	bl	80089e8 <LL_ADC_IsEnabled>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	4323      	orrs	r3, r4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bf0c      	ite	eq
 8008b84:	2301      	moveq	r3, #1
 8008b86:	2300      	movne	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	e012      	b.n	8008bb2 <HAL_ADC_Init+0x156>
 8008b8c:	4871      	ldr	r0, [pc, #452]	; (8008d54 <HAL_ADC_Init+0x2f8>)
 8008b8e:	f7ff ff2b 	bl	80089e8 <LL_ADC_IsEnabled>
 8008b92:	4604      	mov	r4, r0
 8008b94:	4870      	ldr	r0, [pc, #448]	; (8008d58 <HAL_ADC_Init+0x2fc>)
 8008b96:	f7ff ff27 	bl	80089e8 <LL_ADC_IsEnabled>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	431c      	orrs	r4, r3
 8008b9e:	486f      	ldr	r0, [pc, #444]	; (8008d5c <HAL_ADC_Init+0x300>)
 8008ba0:	f7ff ff22 	bl	80089e8 <LL_ADC_IsEnabled>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	4323      	orrs	r3, r4
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bf0c      	ite	eq
 8008bac:	2301      	moveq	r3, #1
 8008bae:	2300      	movne	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d012      	beq.n	8008bdc <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bbe:	d004      	beq.n	8008bca <HAL_ADC_Init+0x16e>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a62      	ldr	r2, [pc, #392]	; (8008d50 <HAL_ADC_Init+0x2f4>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d101      	bne.n	8008bce <HAL_ADC_Init+0x172>
 8008bca:	4a65      	ldr	r2, [pc, #404]	; (8008d60 <HAL_ADC_Init+0x304>)
 8008bcc:	e000      	b.n	8008bd0 <HAL_ADC_Init+0x174>
 8008bce:	4a65      	ldr	r2, [pc, #404]	; (8008d64 <HAL_ADC_Init+0x308>)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	f7ff fd7e 	bl	80086d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7f5b      	ldrb	r3, [r3, #29]
 8008be0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008be6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008bec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008bf2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bfa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d106      	bne.n	8008c18 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	045b      	lsls	r3, r3, #17
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d009      	beq.n	8008c34 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	4b4b      	ldr	r3, [pc, #300]	; (8008d68 <HAL_ADC_Init+0x30c>)
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	69b9      	ldr	r1, [r7, #24]
 8008c44:	430b      	orrs	r3, r1
 8008c46:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fed3 	bl	8008a0e <LL_ADC_REG_IsConversionOngoing>
 8008c68:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fee0 	bl	8008a34 <LL_ADC_INJ_IsConversionOngoing>
 8008c74:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d17f      	bne.n	8008d7c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d17c      	bne.n	8008d7c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008c86:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c8e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008c90:	4313      	orrs	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c9e:	f023 0302 	bic.w	r3, r3, #2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	69b9      	ldr	r1, [r7, #24]
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d017      	beq.n	8008ce4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	691a      	ldr	r2, [r3, #16]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008cc2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ccc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008cd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	6911      	ldr	r1, [r2, #16]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	6812      	ldr	r2, [r2, #0]
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008ce2:	e013      	b.n	8008d0c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008cf2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6812      	ldr	r2, [r2, #0]
 8008d00:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d08:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d12a      	bne.n	8008d6c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d20:	f023 0304 	bic.w	r3, r3, #4
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d2c:	4311      	orrs	r1, r2
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008d32:	4311      	orrs	r1, r2
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 0201 	orr.w	r2, r2, #1
 8008d44:	611a      	str	r2, [r3, #16]
 8008d46:	e019      	b.n	8008d7c <HAL_ADC_Init+0x320>
 8008d48:	20000ca8 	.word	0x20000ca8
 8008d4c:	053e2d63 	.word	0x053e2d63
 8008d50:	50000100 	.word	0x50000100
 8008d54:	50000400 	.word	0x50000400
 8008d58:	50000500 	.word	0x50000500
 8008d5c:	50000600 	.word	0x50000600
 8008d60:	50000300 	.word	0x50000300
 8008d64:	50000700 	.word	0x50000700
 8008d68:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691a      	ldr	r2, [r3, #16]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0201 	bic.w	r2, r2, #1
 8008d7a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d10c      	bne.n	8008d9e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8a:	f023 010f 	bic.w	r1, r3, #15
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	1e5a      	subs	r2, r3, #1
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8008d9c:	e007      	b.n	8008dae <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 020f 	bic.w	r2, r2, #15
 8008dac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	f043 0201 	orr.w	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008dbe:	e007      	b.n	8008dd0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc4:	f043 0210 	orr.w	r2, r3, #16
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3724      	adds	r7, #36	; 0x24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd90      	pop	{r4, r7, pc}
 8008dda:	bf00      	nop

08008ddc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b0a6      	sub	sp, #152	; 0x98
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d101      	bne.n	8008dfe <HAL_ADC_ConfigChannel+0x22>
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e38e      	b.n	800951c <HAL_ADC_ConfigChannel+0x740>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fdff 	bl	8008a0e <LL_ADC_REG_IsConversionOngoing>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f040 836f 	bne.w	80094f6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	6859      	ldr	r1, [r3, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	f7ff fd1c 	bl	8008862 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fded 	bl	8008a0e <LL_ADC_REG_IsConversionOngoing>
 8008e34:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff fdf9 	bl	8008a34 <LL_ADC_INJ_IsConversionOngoing>
 8008e42:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f040 817b 	bne.w	8009146 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f040 8176 	bne.w	8009146 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e62:	d10f      	bne.n	8008e84 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f7ff fd20 	bl	80088b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff fcdd 	bl	800883c <LL_ADC_SetSamplingTimeCommonConfig>
 8008e82:	e00e      	b.n	8008ea2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	6819      	ldr	r1, [r3, #0]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	461a      	mov	r2, r3
 8008e92:	f7ff fd0f 	bl	80088b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff fccd 	bl	800883c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695a      	ldr	r2, [r3, #20]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	08db      	lsrs	r3, r3, #3
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	d022      	beq.n	8008f0a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	6919      	ldr	r1, [r3, #16]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ed4:	f7ff fc34 	bl	8008740 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6818      	ldr	r0, [r3, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	6919      	ldr	r1, [r3, #16]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f7ff fc79 	bl	80087dc <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	6919      	ldr	r1, [r3, #16]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	7f1b      	ldrb	r3, [r3, #28]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d102      	bne.n	8008f00 <HAL_ADC_ConfigChannel+0x124>
 8008efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008efe:	e000      	b.n	8008f02 <HAL_ADC_ConfigChannel+0x126>
 8008f00:	2300      	movs	r3, #0
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7ff fc82 	bl	800880c <LL_ADC_SetOffsetSaturation>
 8008f08:	e11d      	b.n	8009146 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2100      	movs	r1, #0
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff fc37 	bl	8008784 <LL_ADC_GetOffsetChannel>
 8008f16:	4603      	mov	r3, r0
 8008f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <HAL_ADC_ConfigChannel+0x15a>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2100      	movs	r1, #0
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff fc2c 	bl	8008784 <LL_ADC_GetOffsetChannel>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	0e9b      	lsrs	r3, r3, #26
 8008f30:	f003 021f 	and.w	r2, r3, #31
 8008f34:	e012      	b.n	8008f5c <HAL_ADC_ConfigChannel+0x180>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff fc21 	bl	8008784 <LL_ADC_GetOffsetChannel>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f4c:	fa93 f3a3 	rbit	r3, r3
 8008f50:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008f52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f54:	fab3 f383 	clz	r3, r3
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d105      	bne.n	8008f74 <HAL_ADC_ConfigChannel+0x198>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	0e9b      	lsrs	r3, r3, #26
 8008f6e:	f003 031f 	and.w	r3, r3, #31
 8008f72:	e00a      	b.n	8008f8a <HAL_ADC_ConfigChannel+0x1ae>
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f7c:	fa93 f3a3 	rbit	r3, r3
 8008f80:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f84:	fab3 f383 	clz	r3, r3
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d106      	bne.n	8008f9c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2200      	movs	r2, #0
 8008f94:	2100      	movs	r1, #0
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff fc08 	bl	80087ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff fbee 	bl	8008784 <LL_ADC_GetOffsetChannel>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10a      	bne.n	8008fc8 <HAL_ADC_ConfigChannel+0x1ec>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff fbe3 	bl	8008784 <LL_ADC_GetOffsetChannel>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	0e9b      	lsrs	r3, r3, #26
 8008fc2:	f003 021f 	and.w	r2, r3, #31
 8008fc6:	e010      	b.n	8008fea <HAL_ADC_ConfigChannel+0x20e>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2101      	movs	r1, #1
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fbd8 	bl	8008784 <LL_ADC_GetOffsetChannel>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fda:	fa93 f3a3 	rbit	r3, r3
 8008fde:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe2:	fab3 f383 	clz	r3, r3
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d105      	bne.n	8009002 <HAL_ADC_ConfigChannel+0x226>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	0e9b      	lsrs	r3, r3, #26
 8008ffc:	f003 031f 	and.w	r3, r3, #31
 8009000:	e00a      	b.n	8009018 <HAL_ADC_ConfigChannel+0x23c>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800900a:	fa93 f3a3 	rbit	r3, r3
 800900e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009012:	fab3 f383 	clz	r3, r3
 8009016:	b2db      	uxtb	r3, r3
 8009018:	429a      	cmp	r2, r3
 800901a:	d106      	bne.n	800902a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2200      	movs	r2, #0
 8009022:	2101      	movs	r1, #1
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff fbc1 	bl	80087ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2102      	movs	r1, #2
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff fba7 	bl	8008784 <LL_ADC_GetOffsetChannel>
 8009036:	4603      	mov	r3, r0
 8009038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10a      	bne.n	8009056 <HAL_ADC_ConfigChannel+0x27a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2102      	movs	r1, #2
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff fb9c 	bl	8008784 <LL_ADC_GetOffsetChannel>
 800904c:	4603      	mov	r3, r0
 800904e:	0e9b      	lsrs	r3, r3, #26
 8009050:	f003 021f 	and.w	r2, r3, #31
 8009054:	e010      	b.n	8009078 <HAL_ADC_ConfigChannel+0x29c>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2102      	movs	r1, #2
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff fb91 	bl	8008784 <LL_ADC_GetOffsetChannel>
 8009062:	4603      	mov	r3, r0
 8009064:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009068:	fa93 f3a3 	rbit	r3, r3
 800906c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800906e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009070:	fab3 f383 	clz	r3, r3
 8009074:	b2db      	uxtb	r3, r3
 8009076:	461a      	mov	r2, r3
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009080:	2b00      	cmp	r3, #0
 8009082:	d105      	bne.n	8009090 <HAL_ADC_ConfigChannel+0x2b4>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	0e9b      	lsrs	r3, r3, #26
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	e00a      	b.n	80090a6 <HAL_ADC_ConfigChannel+0x2ca>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009098:	fa93 f3a3 	rbit	r3, r3
 800909c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800909e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090a0:	fab3 f383 	clz	r3, r3
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d106      	bne.n	80090b8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2200      	movs	r2, #0
 80090b0:	2102      	movs	r1, #2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff fb7a 	bl	80087ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2103      	movs	r1, #3
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff fb60 	bl	8008784 <LL_ADC_GetOffsetChannel>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10a      	bne.n	80090e4 <HAL_ADC_ConfigChannel+0x308>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2103      	movs	r1, #3
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff fb55 	bl	8008784 <LL_ADC_GetOffsetChannel>
 80090da:	4603      	mov	r3, r0
 80090dc:	0e9b      	lsrs	r3, r3, #26
 80090de:	f003 021f 	and.w	r2, r3, #31
 80090e2:	e010      	b.n	8009106 <HAL_ADC_ConfigChannel+0x32a>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2103      	movs	r1, #3
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff fb4a 	bl	8008784 <LL_ADC_GetOffsetChannel>
 80090f0:	4603      	mov	r3, r0
 80090f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090f6:	fa93 f3a3 	rbit	r3, r3
 80090fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80090fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090fe:	fab3 f383 	clz	r3, r3
 8009102:	b2db      	uxtb	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800910e:	2b00      	cmp	r3, #0
 8009110:	d105      	bne.n	800911e <HAL_ADC_ConfigChannel+0x342>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	0e9b      	lsrs	r3, r3, #26
 8009118:	f003 031f 	and.w	r3, r3, #31
 800911c:	e00a      	b.n	8009134 <HAL_ADC_ConfigChannel+0x358>
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009126:	fa93 f3a3 	rbit	r3, r3
 800912a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800912c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912e:	fab3 f383 	clz	r3, r3
 8009132:	b2db      	uxtb	r3, r3
 8009134:	429a      	cmp	r2, r3
 8009136:	d106      	bne.n	8009146 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2200      	movs	r2, #0
 800913e:	2103      	movs	r1, #3
 8009140:	4618      	mov	r0, r3
 8009142:	f7ff fb33 	bl	80087ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff fc4c 	bl	80089e8 <LL_ADC_IsEnabled>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	f040 810c 	bne.w	8009370 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	6819      	ldr	r1, [r3, #0]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	461a      	mov	r2, r3
 8009166:	f7ff fbcd 	bl	8008904 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	4aaf      	ldr	r2, [pc, #700]	; (800942c <HAL_ADC_ConfigChannel+0x650>)
 8009170:	4293      	cmp	r3, r2
 8009172:	f040 80fd 	bne.w	8009370 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <HAL_ADC_ConfigChannel+0x3c2>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	0e9b      	lsrs	r3, r3, #26
 800918c:	3301      	adds	r3, #1
 800918e:	f003 031f 	and.w	r3, r3, #31
 8009192:	2b09      	cmp	r3, #9
 8009194:	bf94      	ite	ls
 8009196:	2301      	movls	r3, #1
 8009198:	2300      	movhi	r3, #0
 800919a:	b2db      	uxtb	r3, r3
 800919c:	e012      	b.n	80091c4 <HAL_ADC_ConfigChannel+0x3e8>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a6:	fa93 f3a3 	rbit	r3, r3
 80091aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	fab3 f383 	clz	r3, r3
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	3301      	adds	r3, #1
 80091b6:	f003 031f 	and.w	r3, r3, #31
 80091ba:	2b09      	cmp	r3, #9
 80091bc:	bf94      	ite	ls
 80091be:	2301      	movls	r3, #1
 80091c0:	2300      	movhi	r3, #0
 80091c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d064      	beq.n	8009292 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d107      	bne.n	80091e4 <HAL_ADC_ConfigChannel+0x408>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	0e9b      	lsrs	r3, r3, #26
 80091da:	3301      	adds	r3, #1
 80091dc:	069b      	lsls	r3, r3, #26
 80091de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80091e2:	e00e      	b.n	8009202 <HAL_ADC_ConfigChannel+0x426>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	fa93 f3a3 	rbit	r3, r3
 80091f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80091f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f4:	fab3 f383 	clz	r3, r3
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	3301      	adds	r3, #1
 80091fc:	069b      	lsls	r3, r3, #26
 80091fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <HAL_ADC_ConfigChannel+0x446>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	0e9b      	lsrs	r3, r3, #26
 8009214:	3301      	adds	r3, #1
 8009216:	f003 031f 	and.w	r3, r3, #31
 800921a:	2101      	movs	r1, #1
 800921c:	fa01 f303 	lsl.w	r3, r1, r3
 8009220:	e010      	b.n	8009244 <HAL_ADC_ConfigChannel+0x468>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	fa93 f3a3 	rbit	r3, r3
 800922e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	fab3 f383 	clz	r3, r3
 8009236:	b2db      	uxtb	r3, r3
 8009238:	3301      	adds	r3, #1
 800923a:	f003 031f 	and.w	r3, r3, #31
 800923e:	2101      	movs	r1, #1
 8009240:	fa01 f303 	lsl.w	r3, r1, r3
 8009244:	ea42 0103 	orr.w	r1, r2, r3
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <HAL_ADC_ConfigChannel+0x48e>
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	0e9b      	lsrs	r3, r3, #26
 800925a:	3301      	adds	r3, #1
 800925c:	f003 021f 	and.w	r2, r3, #31
 8009260:	4613      	mov	r3, r2
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	4413      	add	r3, r2
 8009266:	051b      	lsls	r3, r3, #20
 8009268:	e011      	b.n	800928e <HAL_ADC_ConfigChannel+0x4b2>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	fa93 f3a3 	rbit	r3, r3
 8009276:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	fab3 f383 	clz	r3, r3
 800927e:	b2db      	uxtb	r3, r3
 8009280:	3301      	adds	r3, #1
 8009282:	f003 021f 	and.w	r2, r3, #31
 8009286:	4613      	mov	r3, r2
 8009288:	005b      	lsls	r3, r3, #1
 800928a:	4413      	add	r3, r2
 800928c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800928e:	430b      	orrs	r3, r1
 8009290:	e069      	b.n	8009366 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800929a:	2b00      	cmp	r3, #0
 800929c:	d107      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x4d2>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	0e9b      	lsrs	r3, r3, #26
 80092a4:	3301      	adds	r3, #1
 80092a6:	069b      	lsls	r3, r3, #26
 80092a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092ac:	e00e      	b.n	80092cc <HAL_ADC_ConfigChannel+0x4f0>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	fa93 f3a3 	rbit	r3, r3
 80092ba:	61fb      	str	r3, [r7, #28]
  return result;
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	fab3 f383 	clz	r3, r3
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	3301      	adds	r3, #1
 80092c6:	069b      	lsls	r3, r3, #26
 80092c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d109      	bne.n	80092ec <HAL_ADC_ConfigChannel+0x510>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	0e9b      	lsrs	r3, r3, #26
 80092de:	3301      	adds	r3, #1
 80092e0:	f003 031f 	and.w	r3, r3, #31
 80092e4:	2101      	movs	r1, #1
 80092e6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ea:	e010      	b.n	800930e <HAL_ADC_ConfigChannel+0x532>
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	fa93 f3a3 	rbit	r3, r3
 80092f8:	617b      	str	r3, [r7, #20]
  return result;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	fab3 f383 	clz	r3, r3
 8009300:	b2db      	uxtb	r3, r3
 8009302:	3301      	adds	r3, #1
 8009304:	f003 031f 	and.w	r3, r3, #31
 8009308:	2101      	movs	r1, #1
 800930a:	fa01 f303 	lsl.w	r3, r1, r3
 800930e:	ea42 0103 	orr.w	r1, r2, r3
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10d      	bne.n	800933a <HAL_ADC_ConfigChannel+0x55e>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	0e9b      	lsrs	r3, r3, #26
 8009324:	3301      	adds	r3, #1
 8009326:	f003 021f 	and.w	r2, r3, #31
 800932a:	4613      	mov	r3, r2
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	4413      	add	r3, r2
 8009330:	3b1e      	subs	r3, #30
 8009332:	051b      	lsls	r3, r3, #20
 8009334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009338:	e014      	b.n	8009364 <HAL_ADC_ConfigChannel+0x588>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	fa93 f3a3 	rbit	r3, r3
 8009346:	60fb      	str	r3, [r7, #12]
  return result;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	fab3 f383 	clz	r3, r3
 800934e:	b2db      	uxtb	r3, r3
 8009350:	3301      	adds	r3, #1
 8009352:	f003 021f 	and.w	r2, r3, #31
 8009356:	4613      	mov	r3, r2
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	4413      	add	r3, r2
 800935c:	3b1e      	subs	r3, #30
 800935e:	051b      	lsls	r3, r3, #20
 8009360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009364:	430b      	orrs	r3, r1
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	6892      	ldr	r2, [r2, #8]
 800936a:	4619      	mov	r1, r3
 800936c:	f7ff faa2 	bl	80088b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	4b2e      	ldr	r3, [pc, #184]	; (8009430 <HAL_ADC_ConfigChannel+0x654>)
 8009376:	4013      	ands	r3, r2
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 80c9 	beq.w	8009510 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009386:	d004      	beq.n	8009392 <HAL_ADC_ConfigChannel+0x5b6>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a29      	ldr	r2, [pc, #164]	; (8009434 <HAL_ADC_ConfigChannel+0x658>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d101      	bne.n	8009396 <HAL_ADC_ConfigChannel+0x5ba>
 8009392:	4b29      	ldr	r3, [pc, #164]	; (8009438 <HAL_ADC_ConfigChannel+0x65c>)
 8009394:	e000      	b.n	8009398 <HAL_ADC_ConfigChannel+0x5bc>
 8009396:	4b29      	ldr	r3, [pc, #164]	; (800943c <HAL_ADC_ConfigChannel+0x660>)
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff f9c3 	bl	8008724 <LL_ADC_GetCommonPathInternalCh>
 800939e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a26      	ldr	r2, [pc, #152]	; (8009440 <HAL_ADC_ConfigChannel+0x664>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d004      	beq.n	80093b6 <HAL_ADC_ConfigChannel+0x5da>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a24      	ldr	r2, [pc, #144]	; (8009444 <HAL_ADC_ConfigChannel+0x668>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d14e      	bne.n	8009454 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80093b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d148      	bne.n	8009454 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ca:	d005      	beq.n	80093d8 <HAL_ADC_ConfigChannel+0x5fc>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <HAL_ADC_ConfigChannel+0x66c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	f040 8099 	bne.w	800950a <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093e0:	d004      	beq.n	80093ec <HAL_ADC_ConfigChannel+0x610>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a13      	ldr	r2, [pc, #76]	; (8009434 <HAL_ADC_ConfigChannel+0x658>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d101      	bne.n	80093f0 <HAL_ADC_ConfigChannel+0x614>
 80093ec:	4a12      	ldr	r2, [pc, #72]	; (8009438 <HAL_ADC_ConfigChannel+0x65c>)
 80093ee:	e000      	b.n	80093f2 <HAL_ADC_ConfigChannel+0x616>
 80093f0:	4a12      	ldr	r2, [pc, #72]	; (800943c <HAL_ADC_ConfigChannel+0x660>)
 80093f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f7ff f97e 	bl	80086fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009402:	4b12      	ldr	r3, [pc, #72]	; (800944c <HAL_ADC_ConfigChannel+0x670>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	099b      	lsrs	r3, r3, #6
 8009408:	4a11      	ldr	r2, [pc, #68]	; (8009450 <HAL_ADC_ConfigChannel+0x674>)
 800940a:	fba2 2303 	umull	r2, r3, r2, r3
 800940e:	099a      	lsrs	r2, r3, #6
 8009410:	4613      	mov	r3, r2
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800941a:	e002      	b.n	8009422 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	3b01      	subs	r3, #1
 8009420:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1f9      	bne.n	800941c <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009428:	e06f      	b.n	800950a <HAL_ADC_ConfigChannel+0x72e>
 800942a:	bf00      	nop
 800942c:	407f0000 	.word	0x407f0000
 8009430:	80080000 	.word	0x80080000
 8009434:	50000100 	.word	0x50000100
 8009438:	50000300 	.word	0x50000300
 800943c:	50000700 	.word	0x50000700
 8009440:	c3210000 	.word	0xc3210000
 8009444:	90c00010 	.word	0x90c00010
 8009448:	50000600 	.word	0x50000600
 800944c:	20000ca8 	.word	0x20000ca8
 8009450:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a32      	ldr	r2, [pc, #200]	; (8009524 <HAL_ADC_ConfigChannel+0x748>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d125      	bne.n	80094aa <HAL_ADC_ConfigChannel+0x6ce>
 800945e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d11f      	bne.n	80094aa <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a2e      	ldr	r2, [pc, #184]	; (8009528 <HAL_ADC_ConfigChannel+0x74c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d104      	bne.n	800947e <HAL_ADC_ConfigChannel+0x6a2>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a2c      	ldr	r2, [pc, #176]	; (800952c <HAL_ADC_ConfigChannel+0x750>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d047      	beq.n	800950e <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009486:	d004      	beq.n	8009492 <HAL_ADC_ConfigChannel+0x6b6>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a26      	ldr	r2, [pc, #152]	; (8009528 <HAL_ADC_ConfigChannel+0x74c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d101      	bne.n	8009496 <HAL_ADC_ConfigChannel+0x6ba>
 8009492:	4a27      	ldr	r2, [pc, #156]	; (8009530 <HAL_ADC_ConfigChannel+0x754>)
 8009494:	e000      	b.n	8009498 <HAL_ADC_ConfigChannel+0x6bc>
 8009496:	4a27      	ldr	r2, [pc, #156]	; (8009534 <HAL_ADC_ConfigChannel+0x758>)
 8009498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800949c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094a0:	4619      	mov	r1, r3
 80094a2:	4610      	mov	r0, r2
 80094a4:	f7ff f92b 	bl	80086fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80094a8:	e031      	b.n	800950e <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a22      	ldr	r2, [pc, #136]	; (8009538 <HAL_ADC_ConfigChannel+0x75c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d12d      	bne.n	8009510 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80094b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d127      	bne.n	8009510 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a18      	ldr	r2, [pc, #96]	; (8009528 <HAL_ADC_ConfigChannel+0x74c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d022      	beq.n	8009510 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094d2:	d004      	beq.n	80094de <HAL_ADC_ConfigChannel+0x702>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a13      	ldr	r2, [pc, #76]	; (8009528 <HAL_ADC_ConfigChannel+0x74c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d101      	bne.n	80094e2 <HAL_ADC_ConfigChannel+0x706>
 80094de:	4a14      	ldr	r2, [pc, #80]	; (8009530 <HAL_ADC_ConfigChannel+0x754>)
 80094e0:	e000      	b.n	80094e4 <HAL_ADC_ConfigChannel+0x708>
 80094e2:	4a14      	ldr	r2, [pc, #80]	; (8009534 <HAL_ADC_ConfigChannel+0x758>)
 80094e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7ff f905 	bl	80086fe <LL_ADC_SetCommonPathInternalCh>
 80094f4:	e00c      	b.n	8009510 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094fa:	f043 0220 	orr.w	r2, r3, #32
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009508:	e002      	b.n	8009510 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800950a:	bf00      	nop
 800950c:	e000      	b.n	8009510 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800950e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009518:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800951c:	4618      	mov	r0, r3
 800951e:	3798      	adds	r7, #152	; 0x98
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	c7520000 	.word	0xc7520000
 8009528:	50000100 	.word	0x50000100
 800952c:	50000500 	.word	0x50000500
 8009530:	50000300 	.word	0x50000300
 8009534:	50000700 	.word	0x50000700
 8009538:	cb840000 	.word	0xcb840000

0800953c <LL_ADC_IsEnabled>:
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b01      	cmp	r3, #1
 800954e:	d101      	bne.n	8009554 <LL_ADC_IsEnabled+0x18>
 8009550:	2301      	movs	r3, #1
 8009552:	e000      	b.n	8009556 <LL_ADC_IsEnabled+0x1a>
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <LL_ADC_REG_IsConversionOngoing>:
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b04      	cmp	r3, #4
 8009574:	d101      	bne.n	800957a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009576:	2301      	movs	r3, #1
 8009578:	e000      	b.n	800957c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009588:	b590      	push	{r4, r7, lr}
 800958a:	b0a1      	sub	sp, #132	; 0x84
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e0e3      	b.n	800976e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095b6:	d102      	bne.n	80095be <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80095b8:	4b6f      	ldr	r3, [pc, #444]	; (8009778 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80095ba:	60bb      	str	r3, [r7, #8]
 80095bc:	e009      	b.n	80095d2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a6e      	ldr	r2, [pc, #440]	; (800977c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d102      	bne.n	80095ce <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80095c8:	4b6d      	ldr	r3, [pc, #436]	; (8009780 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80095ca:	60bb      	str	r3, [r7, #8]
 80095cc:	e001      	b.n	80095d2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80095ce:	2300      	movs	r3, #0
 80095d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10b      	bne.n	80095f0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095dc:	f043 0220 	orr.w	r2, r3, #32
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e0be      	b.n	800976e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff ffb5 	bl	8009562 <LL_ADC_REG_IsConversionOngoing>
 80095f8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff ffaf 	bl	8009562 <LL_ADC_REG_IsConversionOngoing>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	f040 80a0 	bne.w	800974c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800960c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800960e:	2b00      	cmp	r3, #0
 8009610:	f040 809c 	bne.w	800974c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800961c:	d004      	beq.n	8009628 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a55      	ldr	r2, [pc, #340]	; (8009778 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d101      	bne.n	800962c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009628:	4b56      	ldr	r3, [pc, #344]	; (8009784 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800962a:	e000      	b.n	800962e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800962c:	4b56      	ldr	r3, [pc, #344]	; (8009788 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800962e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d04b      	beq.n	80096d0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	6859      	ldr	r1, [r3, #4]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800964a:	035b      	lsls	r3, r3, #13
 800964c:	430b      	orrs	r3, r1
 800964e:	431a      	orrs	r2, r3
 8009650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009652:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800965c:	d004      	beq.n	8009668 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a45      	ldr	r2, [pc, #276]	; (8009778 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d10f      	bne.n	8009688 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009668:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800966c:	f7ff ff66 	bl	800953c <LL_ADC_IsEnabled>
 8009670:	4604      	mov	r4, r0
 8009672:	4841      	ldr	r0, [pc, #260]	; (8009778 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009674:	f7ff ff62 	bl	800953c <LL_ADC_IsEnabled>
 8009678:	4603      	mov	r3, r0
 800967a:	4323      	orrs	r3, r4
 800967c:	2b00      	cmp	r3, #0
 800967e:	bf0c      	ite	eq
 8009680:	2301      	moveq	r3, #1
 8009682:	2300      	movne	r3, #0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	e012      	b.n	80096ae <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009688:	483c      	ldr	r0, [pc, #240]	; (800977c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800968a:	f7ff ff57 	bl	800953c <LL_ADC_IsEnabled>
 800968e:	4604      	mov	r4, r0
 8009690:	483b      	ldr	r0, [pc, #236]	; (8009780 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009692:	f7ff ff53 	bl	800953c <LL_ADC_IsEnabled>
 8009696:	4603      	mov	r3, r0
 8009698:	431c      	orrs	r4, r3
 800969a:	483c      	ldr	r0, [pc, #240]	; (800978c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800969c:	f7ff ff4e 	bl	800953c <LL_ADC_IsEnabled>
 80096a0:	4603      	mov	r3, r0
 80096a2:	4323      	orrs	r3, r4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	bf0c      	ite	eq
 80096a8:	2301      	moveq	r3, #1
 80096aa:	2300      	movne	r3, #0
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d056      	beq.n	8009760 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80096b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80096ba:	f023 030f 	bic.w	r3, r3, #15
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	6811      	ldr	r1, [r2, #0]
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	6892      	ldr	r2, [r2, #8]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	431a      	orrs	r2, r3
 80096ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096cc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80096ce:	e047      	b.n	8009760 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80096d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096e4:	d004      	beq.n	80096f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a23      	ldr	r2, [pc, #140]	; (8009778 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d10f      	bne.n	8009710 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80096f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80096f4:	f7ff ff22 	bl	800953c <LL_ADC_IsEnabled>
 80096f8:	4604      	mov	r4, r0
 80096fa:	481f      	ldr	r0, [pc, #124]	; (8009778 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80096fc:	f7ff ff1e 	bl	800953c <LL_ADC_IsEnabled>
 8009700:	4603      	mov	r3, r0
 8009702:	4323      	orrs	r3, r4
 8009704:	2b00      	cmp	r3, #0
 8009706:	bf0c      	ite	eq
 8009708:	2301      	moveq	r3, #1
 800970a:	2300      	movne	r3, #0
 800970c:	b2db      	uxtb	r3, r3
 800970e:	e012      	b.n	8009736 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009710:	481a      	ldr	r0, [pc, #104]	; (800977c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009712:	f7ff ff13 	bl	800953c <LL_ADC_IsEnabled>
 8009716:	4604      	mov	r4, r0
 8009718:	4819      	ldr	r0, [pc, #100]	; (8009780 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800971a:	f7ff ff0f 	bl	800953c <LL_ADC_IsEnabled>
 800971e:	4603      	mov	r3, r0
 8009720:	431c      	orrs	r4, r3
 8009722:	481a      	ldr	r0, [pc, #104]	; (800978c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009724:	f7ff ff0a 	bl	800953c <LL_ADC_IsEnabled>
 8009728:	4603      	mov	r3, r0
 800972a:	4323      	orrs	r3, r4
 800972c:	2b00      	cmp	r3, #0
 800972e:	bf0c      	ite	eq
 8009730:	2301      	moveq	r3, #1
 8009732:	2300      	movne	r3, #0
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d012      	beq.n	8009760 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800973a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009742:	f023 030f 	bic.w	r3, r3, #15
 8009746:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009748:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800974a:	e009      	b.n	8009760 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009750:	f043 0220 	orr.w	r2, r3, #32
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800975e:	e000      	b.n	8009762 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009760:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800976a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800976e:	4618      	mov	r0, r3
 8009770:	3784      	adds	r7, #132	; 0x84
 8009772:	46bd      	mov	sp, r7
 8009774:	bd90      	pop	{r4, r7, pc}
 8009776:	bf00      	nop
 8009778:	50000100 	.word	0x50000100
 800977c:	50000400 	.word	0x50000400
 8009780:	50000500 	.word	0x50000500
 8009784:	50000300 	.word	0x50000300
 8009788:	50000700 	.word	0x50000700
 800978c:	50000600 	.word	0x50000600

08009790 <LL_EXTI_EnableIT_0_31>:
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	4904      	ldr	r1, [pc, #16]	; (80097b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	600b      	str	r3, [r1, #0]
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	40010400 	.word	0x40010400

080097b4 <LL_EXTI_EnableIT_32_63>:
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80097bc:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <LL_EXTI_EnableIT_32_63+0x20>)
 80097be:	6a1a      	ldr	r2, [r3, #32]
 80097c0:	4904      	ldr	r1, [pc, #16]	; (80097d4 <LL_EXTI_EnableIT_32_63+0x20>)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	620b      	str	r3, [r1, #32]
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	40010400 	.word	0x40010400

080097d8 <LL_EXTI_DisableIT_0_31>:
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80097e0:	4b06      	ldr	r3, [pc, #24]	; (80097fc <LL_EXTI_DisableIT_0_31+0x24>)
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	43db      	mvns	r3, r3
 80097e8:	4904      	ldr	r1, [pc, #16]	; (80097fc <LL_EXTI_DisableIT_0_31+0x24>)
 80097ea:	4013      	ands	r3, r2
 80097ec:	600b      	str	r3, [r1, #0]
}
 80097ee:	bf00      	nop
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	40010400 	.word	0x40010400

08009800 <LL_EXTI_DisableIT_32_63>:
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <LL_EXTI_DisableIT_32_63+0x24>)
 800980a:	6a1a      	ldr	r2, [r3, #32]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	43db      	mvns	r3, r3
 8009810:	4904      	ldr	r1, [pc, #16]	; (8009824 <LL_EXTI_DisableIT_32_63+0x24>)
 8009812:	4013      	ands	r3, r2
 8009814:	620b      	str	r3, [r1, #32]
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	40010400 	.word	0x40010400

08009828 <LL_EXTI_EnableEvent_0_31>:
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	4904      	ldr	r1, [pc, #16]	; (8009848 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4313      	orrs	r3, r2
 800983a:	604b      	str	r3, [r1, #4]
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	40010400 	.word	0x40010400

0800984c <LL_EXTI_EnableEvent_32_63>:
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <LL_EXTI_EnableEvent_32_63+0x20>)
 8009856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009858:	4904      	ldr	r1, [pc, #16]	; (800986c <LL_EXTI_EnableEvent_32_63+0x20>)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4313      	orrs	r3, r2
 800985e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	40010400 	.word	0x40010400

08009870 <LL_EXTI_DisableEvent_0_31>:
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009878:	4b06      	ldr	r3, [pc, #24]	; (8009894 <LL_EXTI_DisableEvent_0_31+0x24>)
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	43db      	mvns	r3, r3
 8009880:	4904      	ldr	r1, [pc, #16]	; (8009894 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009882:	4013      	ands	r3, r2
 8009884:	604b      	str	r3, [r1, #4]
}
 8009886:	bf00      	nop
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40010400 	.word	0x40010400

08009898 <LL_EXTI_DisableEvent_32_63>:
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80098a0:	4b06      	ldr	r3, [pc, #24]	; (80098bc <LL_EXTI_DisableEvent_32_63+0x24>)
 80098a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	43db      	mvns	r3, r3
 80098a8:	4904      	ldr	r1, [pc, #16]	; (80098bc <LL_EXTI_DisableEvent_32_63+0x24>)
 80098aa:	4013      	ands	r3, r2
 80098ac:	624b      	str	r3, [r1, #36]	; 0x24
}
 80098ae:	bf00      	nop
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	40010400 	.word	0x40010400

080098c0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80098c8:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	4904      	ldr	r1, [pc, #16]	; (80098e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	608b      	str	r3, [r1, #8]
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	40010400 	.word	0x40010400

080098e4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80098ec:	4b05      	ldr	r3, [pc, #20]	; (8009904 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80098ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098f0:	4904      	ldr	r1, [pc, #16]	; (8009904 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	40010400 	.word	0x40010400

08009908 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009912:	689a      	ldr	r2, [r3, #8]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	43db      	mvns	r3, r3
 8009918:	4904      	ldr	r1, [pc, #16]	; (800992c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800991a:	4013      	ands	r3, r2
 800991c:	608b      	str	r3, [r1, #8]
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	40010400 	.word	0x40010400

08009930 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009938:	4b06      	ldr	r3, [pc, #24]	; (8009954 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800993a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	43db      	mvns	r3, r3
 8009940:	4904      	ldr	r1, [pc, #16]	; (8009954 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009942:	4013      	ands	r3, r2
 8009944:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	40010400 	.word	0x40010400

08009958 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009960:	4b05      	ldr	r3, [pc, #20]	; (8009978 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	4904      	ldr	r1, [pc, #16]	; (8009978 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4313      	orrs	r3, r2
 800996a:	60cb      	str	r3, [r1, #12]
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	40010400 	.word	0x40010400

0800997c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009984:	4b05      	ldr	r3, [pc, #20]	; (800999c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009988:	4904      	ldr	r1, [pc, #16]	; (800999c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4313      	orrs	r3, r2
 800998e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	40010400 	.word	0x40010400

080099a0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80099a8:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	43db      	mvns	r3, r3
 80099b0:	4904      	ldr	r1, [pc, #16]	; (80099c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80099b2:	4013      	ands	r3, r2
 80099b4:	60cb      	str	r3, [r1, #12]
}
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40010400 	.word	0x40010400

080099c8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80099d0:	4b06      	ldr	r3, [pc, #24]	; (80099ec <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80099d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	43db      	mvns	r3, r3
 80099d8:	4904      	ldr	r1, [pc, #16]	; (80099ec <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80099da:	4013      	ands	r3, r2
 80099dc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40010400 	.word	0x40010400

080099f0 <LL_EXTI_ClearFlag_0_31>:
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80099f8:	4a04      	ldr	r2, [pc, #16]	; (8009a0c <LL_EXTI_ClearFlag_0_31+0x1c>)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6153      	str	r3, [r2, #20]
}
 80099fe:	bf00      	nop
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	40010400 	.word	0x40010400

08009a10 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009a18:	4a04      	ldr	r2, [pc, #16]	; (8009a2c <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009a1e:	bf00      	nop
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	40010400 	.word	0x40010400

08009a30 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d102      	bne.n	8009a4c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	77fb      	strb	r3, [r7, #31]
 8009a4a:	e180      	b.n	8009d4e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a5a:	d102      	bne.n	8009a62 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	77fb      	strb	r3, [r7, #31]
 8009a60:	e175      	b.n	8009d4e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	7f5b      	ldrb	r3, [r3, #29]
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d108      	bne.n	8009a7e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7fd f9d1 	bl	8006e20 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a88:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	4b98      	ldr	r3, [pc, #608]	; (8009d10 <HAL_COMP_Init+0x2e0>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	6812      	ldr	r2, [r2, #0]
 8009ab6:	6979      	ldr	r1, [r7, #20]
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d015      	beq.n	8009af6 <HAL_COMP_Init+0xc6>
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d112      	bne.n	8009af6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009ad0:	4b90      	ldr	r3, [pc, #576]	; (8009d14 <HAL_COMP_Init+0x2e4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	099b      	lsrs	r3, r3, #6
 8009ad6:	4a90      	ldr	r2, [pc, #576]	; (8009d18 <HAL_COMP_Init+0x2e8>)
 8009ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8009adc:	099a      	lsrs	r2, r3, #6
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009ae8:	e002      	b.n	8009af0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1f9      	bne.n	8009aea <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a88      	ldr	r2, [pc, #544]	; (8009d1c <HAL_COMP_Init+0x2ec>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d028      	beq.n	8009b52 <HAL_COMP_Init+0x122>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a86      	ldr	r2, [pc, #536]	; (8009d20 <HAL_COMP_Init+0x2f0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d020      	beq.n	8009b4c <HAL_COMP_Init+0x11c>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a85      	ldr	r2, [pc, #532]	; (8009d24 <HAL_COMP_Init+0x2f4>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d018      	beq.n	8009b46 <HAL_COMP_Init+0x116>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a83      	ldr	r2, [pc, #524]	; (8009d28 <HAL_COMP_Init+0x2f8>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d010      	beq.n	8009b40 <HAL_COMP_Init+0x110>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a82      	ldr	r2, [pc, #520]	; (8009d2c <HAL_COMP_Init+0x2fc>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d008      	beq.n	8009b3a <HAL_COMP_Init+0x10a>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a80      	ldr	r2, [pc, #512]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d101      	bne.n	8009b36 <HAL_COMP_Init+0x106>
 8009b32:	2301      	movs	r3, #1
 8009b34:	e00f      	b.n	8009b56 <HAL_COMP_Init+0x126>
 8009b36:	2302      	movs	r3, #2
 8009b38:	e00d      	b.n	8009b56 <HAL_COMP_Init+0x126>
 8009b3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b3e:	e00a      	b.n	8009b56 <HAL_COMP_Init+0x126>
 8009b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b44:	e007      	b.n	8009b56 <HAL_COMP_Init+0x126>
 8009b46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009b4a:	e004      	b.n	8009b56 <HAL_COMP_Init+0x126>
 8009b4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b50:	e001      	b.n	8009b56 <HAL_COMP_Init+0x126>
 8009b52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b56:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	f003 0303 	and.w	r3, r3, #3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 80b6 	beq.w	8009cd2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	f003 0310 	and.w	r3, r3, #16
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d011      	beq.n	8009b96 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a6e      	ldr	r2, [pc, #440]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d004      	beq.n	8009b86 <HAL_COMP_Init+0x156>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a6c      	ldr	r2, [pc, #432]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d103      	bne.n	8009b8e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8009b86:	6938      	ldr	r0, [r7, #16]
 8009b88:	f7ff feac 	bl	80098e4 <LL_EXTI_EnableRisingTrig_32_63>
 8009b8c:	e014      	b.n	8009bb8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009b8e:	6938      	ldr	r0, [r7, #16]
 8009b90:	f7ff fe96 	bl	80098c0 <LL_EXTI_EnableRisingTrig_0_31>
 8009b94:	e010      	b.n	8009bb8 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a65      	ldr	r2, [pc, #404]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d004      	beq.n	8009baa <HAL_COMP_Init+0x17a>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a63      	ldr	r2, [pc, #396]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d103      	bne.n	8009bb2 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009baa:	6938      	ldr	r0, [r7, #16]
 8009bac:	f7ff fec0 	bl	8009930 <LL_EXTI_DisableRisingTrig_32_63>
 8009bb0:	e002      	b.n	8009bb8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009bb2:	6938      	ldr	r0, [r7, #16]
 8009bb4:	f7ff fea8 	bl	8009908 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d011      	beq.n	8009be8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a59      	ldr	r2, [pc, #356]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d004      	beq.n	8009bd8 <HAL_COMP_Init+0x1a8>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a58      	ldr	r2, [pc, #352]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d103      	bne.n	8009be0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009bd8:	6938      	ldr	r0, [r7, #16]
 8009bda:	f7ff fecf 	bl	800997c <LL_EXTI_EnableFallingTrig_32_63>
 8009bde:	e014      	b.n	8009c0a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009be0:	6938      	ldr	r0, [r7, #16]
 8009be2:	f7ff feb9 	bl	8009958 <LL_EXTI_EnableFallingTrig_0_31>
 8009be6:	e010      	b.n	8009c0a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a50      	ldr	r2, [pc, #320]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d004      	beq.n	8009bfc <HAL_COMP_Init+0x1cc>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a4f      	ldr	r2, [pc, #316]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d103      	bne.n	8009c04 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009bfc:	6938      	ldr	r0, [r7, #16]
 8009bfe:	f7ff fee3 	bl	80099c8 <LL_EXTI_DisableFallingTrig_32_63>
 8009c02:	e002      	b.n	8009c0a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009c04:	6938      	ldr	r0, [r7, #16]
 8009c06:	f7ff fecb 	bl	80099a0 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a48      	ldr	r2, [pc, #288]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d004      	beq.n	8009c1e <HAL_COMP_Init+0x1ee>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a46      	ldr	r2, [pc, #280]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d103      	bne.n	8009c26 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009c1e:	6938      	ldr	r0, [r7, #16]
 8009c20:	f7ff fef6 	bl	8009a10 <LL_EXTI_ClearFlag_32_63>
 8009c24:	e002      	b.n	8009c2c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009c26:	6938      	ldr	r0, [r7, #16]
 8009c28:	f7ff fee2 	bl	80099f0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d011      	beq.n	8009c5c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a3c      	ldr	r2, [pc, #240]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d004      	beq.n	8009c4c <HAL_COMP_Init+0x21c>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a3b      	ldr	r2, [pc, #236]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d103      	bne.n	8009c54 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009c4c:	6938      	ldr	r0, [r7, #16]
 8009c4e:	f7ff fdfd 	bl	800984c <LL_EXTI_EnableEvent_32_63>
 8009c52:	e014      	b.n	8009c7e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009c54:	6938      	ldr	r0, [r7, #16]
 8009c56:	f7ff fde7 	bl	8009828 <LL_EXTI_EnableEvent_0_31>
 8009c5a:	e010      	b.n	8009c7e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a33      	ldr	r2, [pc, #204]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d004      	beq.n	8009c70 <HAL_COMP_Init+0x240>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a32      	ldr	r2, [pc, #200]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d103      	bne.n	8009c78 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009c70:	6938      	ldr	r0, [r7, #16]
 8009c72:	f7ff fe11 	bl	8009898 <LL_EXTI_DisableEvent_32_63>
 8009c76:	e002      	b.n	8009c7e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009c78:	6938      	ldr	r0, [r7, #16]
 8009c7a:	f7ff fdf9 	bl	8009870 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d011      	beq.n	8009cae <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a28      	ldr	r2, [pc, #160]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d004      	beq.n	8009c9e <HAL_COMP_Init+0x26e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a26      	ldr	r2, [pc, #152]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d103      	bne.n	8009ca6 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009c9e:	6938      	ldr	r0, [r7, #16]
 8009ca0:	f7ff fd88 	bl	80097b4 <LL_EXTI_EnableIT_32_63>
 8009ca4:	e04b      	b.n	8009d3e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009ca6:	6938      	ldr	r0, [r7, #16]
 8009ca8:	f7ff fd72 	bl	8009790 <LL_EXTI_EnableIT_0_31>
 8009cac:	e047      	b.n	8009d3e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a1f      	ldr	r2, [pc, #124]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d004      	beq.n	8009cc2 <HAL_COMP_Init+0x292>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a1d      	ldr	r2, [pc, #116]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d103      	bne.n	8009cca <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009cc2:	6938      	ldr	r0, [r7, #16]
 8009cc4:	f7ff fd9c 	bl	8009800 <LL_EXTI_DisableIT_32_63>
 8009cc8:	e039      	b.n	8009d3e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009cca:	6938      	ldr	r0, [r7, #16]
 8009ccc:	f7ff fd84 	bl	80097d8 <LL_EXTI_DisableIT_0_31>
 8009cd0:	e035      	b.n	8009d3e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a16      	ldr	r2, [pc, #88]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d004      	beq.n	8009ce6 <HAL_COMP_Init+0x2b6>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a14      	ldr	r2, [pc, #80]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d103      	bne.n	8009cee <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009ce6:	6938      	ldr	r0, [r7, #16]
 8009ce8:	f7ff fdd6 	bl	8009898 <LL_EXTI_DisableEvent_32_63>
 8009cec:	e002      	b.n	8009cf4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009cee:	6938      	ldr	r0, [r7, #16]
 8009cf0:	f7ff fdbe 	bl	8009870 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a0d      	ldr	r2, [pc, #52]	; (8009d30 <HAL_COMP_Init+0x300>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d004      	beq.n	8009d08 <HAL_COMP_Init+0x2d8>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a0c      	ldr	r2, [pc, #48]	; (8009d34 <HAL_COMP_Init+0x304>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d117      	bne.n	8009d38 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009d08:	6938      	ldr	r0, [r7, #16]
 8009d0a:	f7ff fd79 	bl	8009800 <LL_EXTI_DisableIT_32_63>
 8009d0e:	e016      	b.n	8009d3e <HAL_COMP_Init+0x30e>
 8009d10:	ff007e0f 	.word	0xff007e0f
 8009d14:	20000ca8 	.word	0x20000ca8
 8009d18:	053e2d63 	.word	0x053e2d63
 8009d1c:	40010200 	.word	0x40010200
 8009d20:	40010204 	.word	0x40010204
 8009d24:	40010208 	.word	0x40010208
 8009d28:	4001020c 	.word	0x4001020c
 8009d2c:	40010210 	.word	0x40010210
 8009d30:	40010214 	.word	0x40010214
 8009d34:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009d38:	6938      	ldr	r0, [r7, #16]
 8009d3a:	f7ff fd4d 	bl	80097d8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	7f5b      	ldrb	r3, [r3, #29]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3720      	adds	r7, #32
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <__NVIC_SetPriorityGrouping>:
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f003 0307 	and.w	r3, r3, #7
 8009d66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d68:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <__NVIC_SetPriorityGrouping+0x44>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d74:	4013      	ands	r3, r2
 8009d76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d8a:	4a04      	ldr	r2, [pc, #16]	; (8009d9c <__NVIC_SetPriorityGrouping+0x44>)
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	60d3      	str	r3, [r2, #12]
}
 8009d90:	bf00      	nop
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	e000ed00 	.word	0xe000ed00

08009da0 <__NVIC_GetPriorityGrouping>:
{
 8009da0:	b480      	push	{r7}
 8009da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009da4:	4b04      	ldr	r3, [pc, #16]	; (8009db8 <__NVIC_GetPriorityGrouping+0x18>)
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	0a1b      	lsrs	r3, r3, #8
 8009daa:	f003 0307 	and.w	r3, r3, #7
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	e000ed00 	.word	0xe000ed00

08009dbc <__NVIC_EnableIRQ>:
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	db0b      	blt.n	8009de6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009dce:	79fb      	ldrb	r3, [r7, #7]
 8009dd0:	f003 021f 	and.w	r2, r3, #31
 8009dd4:	4907      	ldr	r1, [pc, #28]	; (8009df4 <__NVIC_EnableIRQ+0x38>)
 8009dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dda:	095b      	lsrs	r3, r3, #5
 8009ddc:	2001      	movs	r0, #1
 8009dde:	fa00 f202 	lsl.w	r2, r0, r2
 8009de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009de6:	bf00      	nop
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	e000e100 	.word	0xe000e100

08009df8 <__NVIC_SetPriority>:
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	6039      	str	r1, [r7, #0]
 8009e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	db0a      	blt.n	8009e22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	490c      	ldr	r1, [pc, #48]	; (8009e44 <__NVIC_SetPriority+0x4c>)
 8009e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e16:	0112      	lsls	r2, r2, #4
 8009e18:	b2d2      	uxtb	r2, r2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009e20:	e00a      	b.n	8009e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	4908      	ldr	r1, [pc, #32]	; (8009e48 <__NVIC_SetPriority+0x50>)
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	3b04      	subs	r3, #4
 8009e30:	0112      	lsls	r2, r2, #4
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	440b      	add	r3, r1
 8009e36:	761a      	strb	r2, [r3, #24]
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	e000e100 	.word	0xe000e100
 8009e48:	e000ed00 	.word	0xe000ed00

08009e4c <NVIC_EncodePriority>:
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b089      	sub	sp, #36	; 0x24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	f1c3 0307 	rsb	r3, r3, #7
 8009e66:	2b04      	cmp	r3, #4
 8009e68:	bf28      	it	cs
 8009e6a:	2304      	movcs	r3, #4
 8009e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	3304      	adds	r3, #4
 8009e72:	2b06      	cmp	r3, #6
 8009e74:	d902      	bls.n	8009e7c <NVIC_EncodePriority+0x30>
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	3b03      	subs	r3, #3
 8009e7a:	e000      	b.n	8009e7e <NVIC_EncodePriority+0x32>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	fa02 f303 	lsl.w	r3, r2, r3
 8009e8a:	43da      	mvns	r2, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	401a      	ands	r2, r3
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e9e:	43d9      	mvns	r1, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ea4:	4313      	orrs	r3, r2
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3724      	adds	r7, #36	; 0x24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
	...

08009eb4 <SysTick_Config>:
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ec4:	d301      	bcc.n	8009eca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e00f      	b.n	8009eea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009eca:	4a0a      	ldr	r2, [pc, #40]	; (8009ef4 <SysTick_Config+0x40>)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ed2:	210f      	movs	r1, #15
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ed8:	f7ff ff8e 	bl	8009df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009edc:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <SysTick_Config+0x40>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009ee2:	4b04      	ldr	r3, [pc, #16]	; (8009ef4 <SysTick_Config+0x40>)
 8009ee4:	2207      	movs	r2, #7
 8009ee6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	e000e010 	.word	0xe000e010

08009ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7ff ff29 	bl	8009d58 <__NVIC_SetPriorityGrouping>
}
 8009f06:	bf00      	nop
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b086      	sub	sp, #24
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	4603      	mov	r3, r0
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
 8009f1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009f1c:	f7ff ff40 	bl	8009da0 <__NVIC_GetPriorityGrouping>
 8009f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	68b9      	ldr	r1, [r7, #8]
 8009f26:	6978      	ldr	r0, [r7, #20]
 8009f28:	f7ff ff90 	bl	8009e4c <NVIC_EncodePriority>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f32:	4611      	mov	r1, r2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff ff5f 	bl	8009df8 <__NVIC_SetPriority>
}
 8009f3a:	bf00      	nop
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b082      	sub	sp, #8
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	4603      	mov	r3, r0
 8009f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff ff33 	bl	8009dbc <__NVIC_EnableIRQ>
}
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff ffa4 	bl	8009eb4 <SysTick_Config>
 8009f6c:	4603      	mov	r3, r0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e014      	b.n	8009fb2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	791b      	ldrb	r3, [r3, #4]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d105      	bne.n	8009f9e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7fc fff7 	bl	8006f8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_DAC_Start+0x16>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e043      	b.n	800a058 <HAL_DAC_Start+0x9e>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2202      	movs	r2, #2
 8009fda:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6819      	ldr	r1, [r3, #0]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	f003 0310 	and.w	r3, r3, #16
 8009fe8:	2201      	movs	r2, #1
 8009fea:	409a      	lsls	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	430a      	orrs	r2, r1
 8009ff2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	f7fe fb4d 	bl	8008694 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10f      	bne.n	800a020 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d11d      	bne.n	800a04a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	685a      	ldr	r2, [r3, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f042 0201 	orr.w	r2, r2, #1
 800a01c:	605a      	str	r2, [r3, #4]
 800a01e:	e014      	b.n	800a04a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	f003 0310 	and.w	r3, r3, #16
 800a030:	2102      	movs	r1, #2
 800a032:	fa01 f303 	lsl.w	r3, r1, r3
 800a036:	429a      	cmp	r2, r3
 800a038:	d107      	bne.n	800a04a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f042 0202 	orr.w	r2, r2, #2
 800a048:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	795b      	ldrb	r3, [r3, #5]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <HAL_DAC_Start_DMA+0x1e>
 800a07a:	2302      	movs	r3, #2
 800a07c:	e0a1      	b.n	800a1c2 <HAL_DAC_Start_DMA+0x162>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2202      	movs	r2, #2
 800a088:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d12a      	bne.n	800a0e6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	4a4d      	ldr	r2, [pc, #308]	; (800a1cc <HAL_DAC_Start_DMA+0x16c>)
 800a096:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	4a4c      	ldr	r2, [pc, #304]	; (800a1d0 <HAL_DAC_Start_DMA+0x170>)
 800a09e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	4a4b      	ldr	r2, [pc, #300]	; (800a1d4 <HAL_DAC_Start_DMA+0x174>)
 800a0a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a0b6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	2b04      	cmp	r3, #4
 800a0bc:	d009      	beq.n	800a0d2 <HAL_DAC_Start_DMA+0x72>
 800a0be:	2b08      	cmp	r3, #8
 800a0c0:	d00c      	beq.n	800a0dc <HAL_DAC_Start_DMA+0x7c>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d000      	beq.n	800a0c8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800a0c6:	e039      	b.n	800a13c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	613b      	str	r3, [r7, #16]
        break;
 800a0d0:	e034      	b.n	800a13c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	330c      	adds	r3, #12
 800a0d8:	613b      	str	r3, [r7, #16]
        break;
 800a0da:	e02f      	b.n	800a13c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3310      	adds	r3, #16
 800a0e2:	613b      	str	r3, [r7, #16]
        break;
 800a0e4:	e02a      	b.n	800a13c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	4a3b      	ldr	r2, [pc, #236]	; (800a1d8 <HAL_DAC_Start_DMA+0x178>)
 800a0ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	4a3a      	ldr	r2, [pc, #232]	; (800a1dc <HAL_DAC_Start_DMA+0x17c>)
 800a0f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	4a39      	ldr	r2, [pc, #228]	; (800a1e0 <HAL_DAC_Start_DMA+0x180>)
 800a0fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a10c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	2b04      	cmp	r3, #4
 800a112:	d009      	beq.n	800a128 <HAL_DAC_Start_DMA+0xc8>
 800a114:	2b08      	cmp	r3, #8
 800a116:	d00c      	beq.n	800a132 <HAL_DAC_Start_DMA+0xd2>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d000      	beq.n	800a11e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800a11c:	e00e      	b.n	800a13c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3314      	adds	r3, #20
 800a124:	613b      	str	r3, [r7, #16]
        break;
 800a126:	e009      	b.n	800a13c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3318      	adds	r3, #24
 800a12e:	613b      	str	r3, [r7, #16]
        break;
 800a130:	e004      	b.n	800a13c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	331c      	adds	r3, #28
 800a138:	613b      	str	r3, [r7, #16]
        break;
 800a13a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d111      	bne.n	800a166 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a150:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6898      	ldr	r0, [r3, #8]
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	f000 fbd2 	bl	800a904 <HAL_DMA_Start_IT>
 800a160:	4603      	mov	r3, r0
 800a162:	75fb      	strb	r3, [r7, #23]
 800a164:	e010      	b.n	800a188 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a174:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	68d8      	ldr	r0, [r3, #12]
 800a17a:	6879      	ldr	r1, [r7, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	f000 fbc0 	bl	800a904 <HAL_DMA_Start_IT>
 800a184:	4603      	mov	r3, r0
 800a186:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10f      	bne.n	800a1b4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6819      	ldr	r1, [r3, #0]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f003 0310 	and.w	r3, r3, #16
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	409a      	lsls	r2, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a1ac:	2001      	movs	r0, #1
 800a1ae:	f7fe fa71 	bl	8008694 <HAL_Delay>
 800a1b2:	e005      	b.n	800a1c0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	f043 0204 	orr.w	r2, r3, #4
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	0800a6a1 	.word	0x0800a6a1
 800a1d0:	0800a6c3 	.word	0x0800a6c3
 800a1d4:	0800a6df 	.word	0x0800a6df
 800a1d8:	0800a749 	.word	0x0800a749
 800a1dc:	0800a76b 	.word	0x0800a76b
 800a1e0:	0800a787 	.word	0x0800a787

0800a1e4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6819      	ldr	r1, [r3, #0]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	f003 0310 	and.w	r3, r3, #16
 800a1fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a202:	43da      	mvns	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	400a      	ands	r2, r1
 800a20a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6819      	ldr	r1, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	f003 0310 	and.w	r3, r3, #16
 800a218:	2201      	movs	r2, #1
 800a21a:	fa02 f303 	lsl.w	r3, r2, r3
 800a21e:	43da      	mvns	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	400a      	ands	r2, r1
 800a226:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a228:	2001      	movs	r0, #1
 800a22a:	f7fe fa33 	bl	8008694 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10f      	bne.n	800a254 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 fbde 	bl	800a9fa <HAL_DMA_Abort>
 800a23e:	4603      	mov	r3, r0
 800a240:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a250:	601a      	str	r2, [r3, #0]
 800a252:	e00e      	b.n	800a272 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 fbce 	bl	800a9fa <HAL_DMA_Abort>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a270:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a272:	7bfb      	ldrb	r3, [r7, #15]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2204      	movs	r2, #4
 800a27c:	711a      	strb	r2, [r3, #4]
 800a27e:	e002      	b.n	800a286 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a286:	7bfb      	ldrb	r3, [r7, #15]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
 800a29c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d105      	bne.n	800a2c0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	617b      	str	r3, [r7, #20]
 800a2be:	e004      	b.n	800a2ca <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	3314      	adds	r3, #20
 800a2c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d103      	bne.n	800a334 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	e002      	b.n	800a33a <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08a      	sub	sp, #40	; 0x28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	795b      	ldrb	r3, [r3, #5]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d101      	bne.n	800a364 <HAL_DAC_ConfigChannel+0x1c>
 800a360:	2302      	movs	r3, #2
 800a362:	e194      	b.n	800a68e <HAL_DAC_ConfigChannel+0x346>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2202      	movs	r2, #2
 800a36e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b04      	cmp	r3, #4
 800a376:	d174      	bne.n	800a462 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d137      	bne.n	800a3ee <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a37e:	f7fe f97d 	bl	800867c <HAL_GetTick>
 800a382:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a384:	e011      	b.n	800a3aa <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a386:	f7fe f979 	bl	800867c <HAL_GetTick>
 800a38a:	4602      	mov	r2, r0
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	2b01      	cmp	r3, #1
 800a392:	d90a      	bls.n	800a3aa <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	f043 0208 	orr.w	r2, r3, #8
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e171      	b.n	800a68e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e6      	bne.n	800a386 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	f7fe f96b 	bl	8008694 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3c6:	641a      	str	r2, [r3, #64]	; 0x40
 800a3c8:	e01e      	b.n	800a408 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a3ca:	f7fe f957 	bl	800867c <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d90a      	bls.n	800a3ee <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f043 0208 	orr.w	r2, r3, #8
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2203      	movs	r2, #3
 800a3e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e14f      	b.n	800a68e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dbe8      	blt.n	800a3ca <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	f7fe f94b 	bl	8008694 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a406:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f003 0310 	and.w	r3, r3, #16
 800a414:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a418:	fa01 f303 	lsl.w	r3, r1, r3
 800a41c:	43db      	mvns	r3, r3
 800a41e:	ea02 0103 	and.w	r1, r2, r3
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f003 0310 	and.w	r3, r3, #16
 800a42c:	409a      	lsls	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f003 0310 	and.w	r3, r3, #16
 800a442:	21ff      	movs	r1, #255	; 0xff
 800a444:	fa01 f303 	lsl.w	r3, r1, r3
 800a448:	43db      	mvns	r3, r3
 800a44a:	ea02 0103 	and.w	r1, r2, r3
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f003 0310 	and.w	r3, r3, #16
 800a458:	409a      	lsls	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d11d      	bne.n	800a4a6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f003 0310 	and.w	r3, r3, #16
 800a478:	221f      	movs	r2, #31
 800a47a:	fa02 f303 	lsl.w	r3, r2, r3
 800a47e:	43db      	mvns	r3, r3
 800a480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a482:	4013      	ands	r3, r2
 800a484:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6a1b      	ldr	r3, [r3, #32]
 800a48a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f003 0310 	and.w	r3, r3, #16
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	fa02 f303 	lsl.w	r3, r2, r3
 800a498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a49a:	4313      	orrs	r3, r2
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f003 0310 	and.w	r3, r3, #16
 800a4b4:	2207      	movs	r2, #7
 800a4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ba:	43db      	mvns	r3, r3
 800a4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4be:	4013      	ands	r3, r2
 800a4c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	623b      	str	r3, [r7, #32]
 800a4d2:	e011      	b.n	800a4f8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	f003 0302 	and.w	r3, r3, #2
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	623b      	str	r3, [r7, #32]
 800a4e4:	e008      	b.n	800a4f8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d102      	bne.n	800a4f4 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	623b      	str	r3, [r7, #32]
 800a4f2:	e001      	b.n	800a4f8 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	4313      	orrs	r3, r2
 800a502:	6a3a      	ldr	r2, [r7, #32]
 800a504:	4313      	orrs	r3, r2
 800a506:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f003 0310 	and.w	r3, r3, #16
 800a50e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a512:	fa02 f303 	lsl.w	r3, r2, r3
 800a516:	43db      	mvns	r3, r3
 800a518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a51a:	4013      	ands	r3, r2
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	791b      	ldrb	r3, [r3, #4]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d102      	bne.n	800a52c <HAL_DAC_ConfigChannel+0x1e4>
 800a526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a52a:	e000      	b.n	800a52e <HAL_DAC_ConfigChannel+0x1e6>
 800a52c:	2300      	movs	r3, #0
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	4313      	orrs	r3, r2
 800a532:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f003 0310 	and.w	r3, r3, #16
 800a53a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a53e:	fa02 f303 	lsl.w	r3, r2, r3
 800a542:	43db      	mvns	r3, r3
 800a544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a546:	4013      	ands	r3, r2
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	795b      	ldrb	r3, [r3, #5]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d102      	bne.n	800a558 <HAL_DAC_ConfigChannel+0x210>
 800a552:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a556:	e000      	b.n	800a55a <HAL_DAC_ConfigChannel+0x212>
 800a558:	2300      	movs	r3, #0
 800a55a:	69ba      	ldr	r2, [r7, #24]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a566:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d114      	bne.n	800a59a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a570:	f001 fae0 	bl	800bb34 <HAL_RCC_GetHCLKFreq>
 800a574:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	4a47      	ldr	r2, [pc, #284]	; (800a698 <HAL_DAC_ConfigChannel+0x350>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d904      	bls.n	800a588 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
 800a586:	e00d      	b.n	800a5a4 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	4a44      	ldr	r2, [pc, #272]	; (800a69c <HAL_DAC_ConfigChannel+0x354>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d909      	bls.n	800a5a4 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
 800a598:	e004      	b.n	800a5a4 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f003 0310 	and.w	r3, r3, #16
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6819      	ldr	r1, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f003 0310 	and.w	r3, r3, #16
 800a5ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d2:	43da      	mvns	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	400a      	ands	r2, r1
 800a5da:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f003 0310 	and.w	r3, r3, #16
 800a5ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f2:	43db      	mvns	r3, r3
 800a5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f003 0310 	and.w	r3, r3, #16
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	fa02 f303 	lsl.w	r3, r2, r3
 800a60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a60e:	4313      	orrs	r3, r2
 800a610:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a618:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6819      	ldr	r1, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f003 0310 	and.w	r3, r3, #16
 800a626:	22c0      	movs	r2, #192	; 0xc0
 800a628:	fa02 f303 	lsl.w	r3, r2, r3
 800a62c:	43da      	mvns	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	400a      	ands	r2, r1
 800a634:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	089b      	lsrs	r3, r3, #2
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	089b      	lsrs	r3, r3, #2
 800a648:	021b      	lsls	r3, r3, #8
 800a64a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	4313      	orrs	r3, r2
 800a652:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a664:	fa01 f303 	lsl.w	r3, r1, r3
 800a668:	43db      	mvns	r3, r3
 800a66a:	ea02 0103 	and.w	r1, r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f003 0310 	and.w	r3, r3, #16
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	409a      	lsls	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3728      	adds	r7, #40	; 0x28
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	09896800 	.word	0x09896800
 800a69c:	04c4b400 	.word	0x04c4b400

0800a6a0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff fe16 	bl	800a2e0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	711a      	strb	r2, [r3, #4]
}
 800a6ba:	bf00      	nop
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7ff fe0f 	bl	800a2f4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	f043 0204 	orr.w	r2, r3, #4
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7ff fe05 	bl	800a308 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2201      	movs	r2, #1
 800a702:	711a      	strb	r2, [r3, #4]
}
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a754:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f7ff ffd8 	bl	800a70c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2201      	movs	r2, #1
 800a760:	711a      	strb	r2, [r3, #4]
}
 800a762:	bf00      	nop
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a776:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f7ff ffd1 	bl	800a720 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a792:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	f043 0204 	orr.w	r2, r3, #4
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7ff ffc7 	bl	800a734 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	711a      	strb	r2, [r3, #4]
}
 800a7ac:	bf00      	nop
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e08d      	b.n	800a8e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4b47      	ldr	r3, [pc, #284]	; (800a8ec <HAL_DMA_Init+0x138>)
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d80f      	bhi.n	800a7f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4b45      	ldr	r3, [pc, #276]	; (800a8f0 <HAL_DMA_Init+0x13c>)
 800a7da:	4413      	add	r3, r2
 800a7dc:	4a45      	ldr	r2, [pc, #276]	; (800a8f4 <HAL_DMA_Init+0x140>)
 800a7de:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e2:	091b      	lsrs	r3, r3, #4
 800a7e4:	009a      	lsls	r2, r3, #2
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a42      	ldr	r2, [pc, #264]	; (800a8f8 <HAL_DMA_Init+0x144>)
 800a7ee:	641a      	str	r2, [r3, #64]	; 0x40
 800a7f0:	e00e      	b.n	800a810 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	4b40      	ldr	r3, [pc, #256]	; (800a8fc <HAL_DMA_Init+0x148>)
 800a7fa:	4413      	add	r3, r2
 800a7fc:	4a3d      	ldr	r2, [pc, #244]	; (800a8f4 <HAL_DMA_Init+0x140>)
 800a7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a802:	091b      	lsrs	r3, r3, #4
 800a804:	009a      	lsls	r2, r3, #2
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a3c      	ldr	r2, [pc, #240]	; (800a900 <HAL_DMA_Init+0x14c>)
 800a80e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2202      	movs	r2, #2
 800a814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a84c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	4313      	orrs	r3, r2
 800a858:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa10 	bl	800ac88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a870:	d102      	bne.n	800a878 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a880:	b2d2      	uxtb	r2, r2
 800a882:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a88c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d010      	beq.n	800a8b8 <HAL_DMA_Init+0x104>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	2b04      	cmp	r3, #4
 800a89c:	d80c      	bhi.n	800a8b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fa30 	bl	800ad04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a8b4:	605a      	str	r2, [r3, #4]
 800a8b6:	e008      	b.n	800a8ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	40020407 	.word	0x40020407
 800a8f0:	bffdfff8 	.word	0xbffdfff8
 800a8f4:	cccccccd 	.word	0xcccccccd
 800a8f8:	40020000 	.word	0x40020000
 800a8fc:	bffdfbf8 	.word	0xbffdfbf8
 800a900:	40020400 	.word	0x40020400

0800a904 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_DMA_Start_IT+0x20>
 800a920:	2302      	movs	r3, #2
 800a922:	e066      	b.n	800a9f2 <HAL_DMA_Start_IT+0xee>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b01      	cmp	r3, #1
 800a936:	d155      	bne.n	800a9e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2202      	movs	r2, #2
 800a93c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f022 0201 	bic.w	r2, r2, #1
 800a954:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	68b9      	ldr	r1, [r7, #8]
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f954 	bl	800ac0a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a966:	2b00      	cmp	r3, #0
 800a968:	d008      	beq.n	800a97c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f042 020e 	orr.w	r2, r2, #14
 800a978:	601a      	str	r2, [r3, #0]
 800a97a:	e00f      	b.n	800a99c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f022 0204 	bic.w	r2, r2, #4
 800a98a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f042 020a 	orr.w	r2, r2, #10
 800a99a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d007      	beq.n	800a9ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d007      	beq.n	800a9d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f042 0201 	orr.w	r2, r2, #1
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	e005      	b.n	800a9f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b085      	sub	sp, #20
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d005      	beq.n	800aa1e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2204      	movs	r2, #4
 800aa16:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	73fb      	strb	r3, [r7, #15]
 800aa1c:	e037      	b.n	800aa8e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f022 020e 	bic.w	r2, r2, #14
 800aa2c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa3c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f022 0201 	bic.w	r2, r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa52:	f003 021f 	and.w	r2, r3, #31
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	fa01 f202 	lsl.w	r2, r1, r2
 800aa60:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aa6a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00c      	beq.n	800aa8e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa82:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa8c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2201      	movs	r2, #1
 800aa92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac8:	f003 031f 	and.w	r3, r3, #31
 800aacc:	2204      	movs	r2, #4
 800aace:	409a      	lsls	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	4013      	ands	r3, r2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d026      	beq.n	800ab26 <HAL_DMA_IRQHandler+0x7a>
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	f003 0304 	and.w	r3, r3, #4
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d021      	beq.n	800ab26 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0320 	and.w	r3, r3, #32
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d107      	bne.n	800ab00 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 0204 	bic.w	r2, r2, #4
 800aafe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab04:	f003 021f 	and.w	r2, r3, #31
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0c:	2104      	movs	r1, #4
 800ab0e:	fa01 f202 	lsl.w	r2, r1, r2
 800ab12:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d071      	beq.n	800ac00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ab24:	e06c      	b.n	800ac00 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2a:	f003 031f 	and.w	r3, r3, #31
 800ab2e:	2202      	movs	r2, #2
 800ab30:	409a      	lsls	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4013      	ands	r3, r2
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d02e      	beq.n	800ab98 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f003 0302 	and.w	r3, r3, #2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d029      	beq.n	800ab98 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 0320 	and.w	r3, r3, #32
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10b      	bne.n	800ab6a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f022 020a 	bic.w	r2, r2, #10
 800ab60:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6e:	f003 021f 	and.w	r2, r3, #31
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab76:	2102      	movs	r1, #2
 800ab78:	fa01 f202 	lsl.w	r2, r1, r2
 800ab7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d038      	beq.n	800ac00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800ab96:	e033      	b.n	800ac00 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9c:	f003 031f 	and.w	r3, r3, #31
 800aba0:	2208      	movs	r2, #8
 800aba2:	409a      	lsls	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4013      	ands	r3, r2
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d02a      	beq.n	800ac02 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f003 0308 	and.w	r3, r3, #8
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d025      	beq.n	800ac02 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f022 020e 	bic.w	r2, r2, #14
 800abc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abca:	f003 021f 	and.w	r2, r3, #31
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd2:	2101      	movs	r1, #1
 800abd4:	fa01 f202 	lsl.w	r2, r1, r2
 800abd8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d004      	beq.n	800ac02 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
}
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b085      	sub	sp, #20
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
 800ac16:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ac20:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d004      	beq.n	800ac34 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ac32:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac38:	f003 021f 	and.w	r2, r3, #31
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac40:	2101      	movs	r1, #1
 800ac42:	fa01 f202 	lsl.w	r2, r1, r2
 800ac46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	2b10      	cmp	r3, #16
 800ac56:	d108      	bne.n	800ac6a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ac68:	e007      	b.n	800ac7a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	60da      	str	r2, [r3, #12]
}
 800ac7a:	bf00      	nop
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	4b16      	ldr	r3, [pc, #88]	; (800acf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d802      	bhi.n	800aca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ac9c:	4b15      	ldr	r3, [pc, #84]	; (800acf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ac9e:	617b      	str	r3, [r7, #20]
 800aca0:	e001      	b.n	800aca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800aca2:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800aca4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	3b08      	subs	r3, #8
 800acb2:	4a12      	ldr	r2, [pc, #72]	; (800acfc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800acb4:	fba2 2303 	umull	r2, r3, r2, r3
 800acb8:	091b      	lsrs	r3, r3, #4
 800acba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc0:	089b      	lsrs	r3, r3, #2
 800acc2:	009a      	lsls	r2, r3, #2
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	4413      	add	r3, r2
 800acc8:	461a      	mov	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a0b      	ldr	r2, [pc, #44]	; (800ad00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800acd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f003 031f 	and.w	r3, r3, #31
 800acda:	2201      	movs	r2, #1
 800acdc:	409a      	lsls	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ace2:	bf00      	nop
 800ace4:	371c      	adds	r7, #28
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40020407 	.word	0x40020407
 800acf4:	40020800 	.word	0x40020800
 800acf8:	40020820 	.word	0x40020820
 800acfc:	cccccccd 	.word	0xcccccccd
 800ad00:	40020880 	.word	0x40020880

0800ad04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	4b0b      	ldr	r3, [pc, #44]	; (800ad44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ad18:	4413      	add	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a08      	ldr	r2, [pc, #32]	; (800ad48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ad26:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	f003 031f 	and.w	r3, r3, #31
 800ad30:	2201      	movs	r2, #1
 800ad32:	409a      	lsls	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ad38:	bf00      	nop
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	1000823f 	.word	0x1000823f
 800ad48:	40020940 	.word	0x40020940

0800ad4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ad56:	2300      	movs	r3, #0
 800ad58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ad5a:	e15a      	b.n	800b012 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	2101      	movs	r1, #1
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	fa01 f303 	lsl.w	r3, r1, r3
 800ad68:	4013      	ands	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 814c 	beq.w	800b00c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d00b      	beq.n	800ad94 <HAL_GPIO_Init+0x48>
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d007      	beq.n	800ad94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ad88:	2b11      	cmp	r3, #17
 800ad8a:	d003      	beq.n	800ad94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	2b12      	cmp	r3, #18
 800ad92:	d130      	bne.n	800adf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	2203      	movs	r2, #3
 800ada0:	fa02 f303 	lsl.w	r3, r2, r3
 800ada4:	43db      	mvns	r3, r3
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	4013      	ands	r3, r2
 800adaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	fa02 f303 	lsl.w	r3, r2, r3
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	4313      	orrs	r3, r2
 800adbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800adca:	2201      	movs	r2, #1
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	fa02 f303 	lsl.w	r3, r2, r3
 800add2:	43db      	mvns	r3, r3
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	4013      	ands	r3, r2
 800add8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	091b      	lsrs	r3, r3, #4
 800ade0:	f003 0201 	and.w	r2, r3, #1
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	fa02 f303 	lsl.w	r3, r2, r3
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	4313      	orrs	r3, r2
 800adee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	2203      	movs	r2, #3
 800ae02:	fa02 f303 	lsl.w	r3, r2, r3
 800ae06:	43db      	mvns	r3, r3
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	689a      	ldr	r2, [r3, #8]
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	fa02 f303 	lsl.w	r3, r2, r3
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d003      	beq.n	800ae36 <HAL_GPIO_Init+0xea>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	2b12      	cmp	r3, #18
 800ae34:	d123      	bne.n	800ae7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	08da      	lsrs	r2, r3, #3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3208      	adds	r2, #8
 800ae3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	220f      	movs	r2, #15
 800ae4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae52:	43db      	mvns	r3, r3
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	4013      	ands	r3, r2
 800ae58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	691a      	ldr	r2, [r3, #16]
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f003 0307 	and.w	r3, r3, #7
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	08da      	lsrs	r2, r3, #3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	3208      	adds	r2, #8
 800ae78:	6939      	ldr	r1, [r7, #16]
 800ae7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	2203      	movs	r2, #3
 800ae8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8e:	43db      	mvns	r3, r3
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	4013      	ands	r3, r2
 800ae94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	f003 0203 	and.w	r2, r3, #3
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	005b      	lsls	r3, r3, #1
 800aea2:	fa02 f303 	lsl.w	r3, r2, r3
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 80a6 	beq.w	800b00c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aec0:	4b5b      	ldr	r3, [pc, #364]	; (800b030 <HAL_GPIO_Init+0x2e4>)
 800aec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aec4:	4a5a      	ldr	r2, [pc, #360]	; (800b030 <HAL_GPIO_Init+0x2e4>)
 800aec6:	f043 0301 	orr.w	r3, r3, #1
 800aeca:	6613      	str	r3, [r2, #96]	; 0x60
 800aecc:	4b58      	ldr	r3, [pc, #352]	; (800b030 <HAL_GPIO_Init+0x2e4>)
 800aece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	60bb      	str	r3, [r7, #8]
 800aed6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aed8:	4a56      	ldr	r2, [pc, #344]	; (800b034 <HAL_GPIO_Init+0x2e8>)
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	089b      	lsrs	r3, r3, #2
 800aede:	3302      	adds	r3, #2
 800aee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	220f      	movs	r2, #15
 800aef0:	fa02 f303 	lsl.w	r3, r2, r3
 800aef4:	43db      	mvns	r3, r3
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	4013      	ands	r3, r2
 800aefa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800af02:	d01f      	beq.n	800af44 <HAL_GPIO_Init+0x1f8>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a4c      	ldr	r2, [pc, #304]	; (800b038 <HAL_GPIO_Init+0x2ec>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d019      	beq.n	800af40 <HAL_GPIO_Init+0x1f4>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a4b      	ldr	r2, [pc, #300]	; (800b03c <HAL_GPIO_Init+0x2f0>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d013      	beq.n	800af3c <HAL_GPIO_Init+0x1f0>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a4a      	ldr	r2, [pc, #296]	; (800b040 <HAL_GPIO_Init+0x2f4>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d00d      	beq.n	800af38 <HAL_GPIO_Init+0x1ec>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a49      	ldr	r2, [pc, #292]	; (800b044 <HAL_GPIO_Init+0x2f8>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d007      	beq.n	800af34 <HAL_GPIO_Init+0x1e8>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a48      	ldr	r2, [pc, #288]	; (800b048 <HAL_GPIO_Init+0x2fc>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d101      	bne.n	800af30 <HAL_GPIO_Init+0x1e4>
 800af2c:	2305      	movs	r3, #5
 800af2e:	e00a      	b.n	800af46 <HAL_GPIO_Init+0x1fa>
 800af30:	2306      	movs	r3, #6
 800af32:	e008      	b.n	800af46 <HAL_GPIO_Init+0x1fa>
 800af34:	2304      	movs	r3, #4
 800af36:	e006      	b.n	800af46 <HAL_GPIO_Init+0x1fa>
 800af38:	2303      	movs	r3, #3
 800af3a:	e004      	b.n	800af46 <HAL_GPIO_Init+0x1fa>
 800af3c:	2302      	movs	r3, #2
 800af3e:	e002      	b.n	800af46 <HAL_GPIO_Init+0x1fa>
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <HAL_GPIO_Init+0x1fa>
 800af44:	2300      	movs	r3, #0
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	f002 0203 	and.w	r2, r2, #3
 800af4c:	0092      	lsls	r2, r2, #2
 800af4e:	4093      	lsls	r3, r2
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	4313      	orrs	r3, r2
 800af54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800af56:	4937      	ldr	r1, [pc, #220]	; (800b034 <HAL_GPIO_Init+0x2e8>)
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	089b      	lsrs	r3, r3, #2
 800af5c:	3302      	adds	r3, #2
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800af64:	4b39      	ldr	r3, [pc, #228]	; (800b04c <HAL_GPIO_Init+0x300>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	43db      	mvns	r3, r3
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	4013      	ands	r3, r2
 800af72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d003      	beq.n	800af88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	4313      	orrs	r3, r2
 800af86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800af88:	4a30      	ldr	r2, [pc, #192]	; (800b04c <HAL_GPIO_Init+0x300>)
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800af8e:	4b2f      	ldr	r3, [pc, #188]	; (800b04c <HAL_GPIO_Init+0x300>)
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	43db      	mvns	r3, r3
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	4013      	ands	r3, r2
 800af9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800afb2:	4a26      	ldr	r2, [pc, #152]	; (800b04c <HAL_GPIO_Init+0x300>)
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800afb8:	4b24      	ldr	r3, [pc, #144]	; (800b04c <HAL_GPIO_Init+0x300>)
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	43db      	mvns	r3, r3
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	4013      	ands	r3, r2
 800afc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d003      	beq.n	800afdc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	4313      	orrs	r3, r2
 800afda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800afdc:	4a1b      	ldr	r2, [pc, #108]	; (800b04c <HAL_GPIO_Init+0x300>)
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800afe2:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <HAL_GPIO_Init+0x300>)
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	43db      	mvns	r3, r3
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	4013      	ands	r3, r2
 800aff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4313      	orrs	r3, r2
 800b004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b006:	4a11      	ldr	r2, [pc, #68]	; (800b04c <HAL_GPIO_Init+0x300>)
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	3301      	adds	r3, #1
 800b010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	fa22 f303 	lsr.w	r3, r2, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f47f ae9d 	bne.w	800ad5c <HAL_GPIO_Init+0x10>
  }
}
 800b022:	bf00      	nop
 800b024:	371c      	adds	r7, #28
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	40021000 	.word	0x40021000
 800b034:	40010000 	.word	0x40010000
 800b038:	48000400 	.word	0x48000400
 800b03c:	48000800 	.word	0x48000800
 800b040:	48000c00 	.word	0x48000c00
 800b044:	48001000 	.word	0x48001000
 800b048:	48001400 	.word	0x48001400
 800b04c:	40010400 	.word	0x40010400

0800b050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	460b      	mov	r3, r1
 800b05a:	807b      	strh	r3, [r7, #2]
 800b05c:	4613      	mov	r3, r2
 800b05e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b060:	787b      	ldrb	r3, [r7, #1]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d003      	beq.n	800b06e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b066:	887a      	ldrh	r2, [r7, #2]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b06c:	e002      	b.n	800b074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b06e:	887a      	ldrh	r2, [r7, #2]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d141      	bne.n	800b112 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b08e:	4b4b      	ldr	r3, [pc, #300]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b09a:	d131      	bne.n	800b100 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b09c:	4b47      	ldr	r3, [pc, #284]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0a2:	4a46      	ldr	r2, [pc, #280]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b0ac:	4b43      	ldr	r3, [pc, #268]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b0b4:	4a41      	ldr	r2, [pc, #260]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b0bc:	4b40      	ldr	r3, [pc, #256]	; (800b1c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2232      	movs	r2, #50	; 0x32
 800b0c2:	fb02 f303 	mul.w	r3, r2, r3
 800b0c6:	4a3f      	ldr	r2, [pc, #252]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0cc:	0c9b      	lsrs	r3, r3, #18
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0d2:	e002      	b.n	800b0da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0da:	4b38      	ldr	r3, [pc, #224]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0e6:	d102      	bne.n	800b0ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1f2      	bne.n	800b0d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b0ee:	4b33      	ldr	r3, [pc, #204]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0fa:	d158      	bne.n	800b1ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e057      	b.n	800b1b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b100:	4b2e      	ldr	r3, [pc, #184]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b106:	4a2d      	ldr	r2, [pc, #180]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b10c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b110:	e04d      	b.n	800b1ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b118:	d141      	bne.n	800b19e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b11a:	4b28      	ldr	r3, [pc, #160]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b126:	d131      	bne.n	800b18c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b128:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b12e:	4a23      	ldr	r2, [pc, #140]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b138:	4b20      	ldr	r3, [pc, #128]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b140:	4a1e      	ldr	r2, [pc, #120]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b146:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b148:	4b1d      	ldr	r3, [pc, #116]	; (800b1c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2232      	movs	r2, #50	; 0x32
 800b14e:	fb02 f303 	mul.w	r3, r2, r3
 800b152:	4a1c      	ldr	r2, [pc, #112]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b154:	fba2 2303 	umull	r2, r3, r2, r3
 800b158:	0c9b      	lsrs	r3, r3, #18
 800b15a:	3301      	adds	r3, #1
 800b15c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b15e:	e002      	b.n	800b166 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3b01      	subs	r3, #1
 800b164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b166:	4b15      	ldr	r3, [pc, #84]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b16e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b172:	d102      	bne.n	800b17a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1f2      	bne.n	800b160 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b17a:	4b10      	ldr	r3, [pc, #64]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b186:	d112      	bne.n	800b1ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e011      	b.n	800b1b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b18c:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b18e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b192:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b19c:	e007      	b.n	800b1ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b19e:	4b07      	ldr	r3, [pc, #28]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b1a6:	4a05      	ldr	r2, [pc, #20]	; (800b1bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	40007000 	.word	0x40007000
 800b1c0:	20000ca8 	.word	0x20000ca8
 800b1c4:	431bde83 	.word	0x431bde83

0800b1c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b088      	sub	sp, #32
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d101      	bne.n	800b1da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e308      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d075      	beq.n	800b2d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1e6:	4ba3      	ldr	r3, [pc, #652]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	f003 030c 	and.w	r3, r3, #12
 800b1ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1f0:	4ba0      	ldr	r3, [pc, #640]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	f003 0303 	and.w	r3, r3, #3
 800b1f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b0c      	cmp	r3, #12
 800b1fe:	d102      	bne.n	800b206 <HAL_RCC_OscConfig+0x3e>
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2b03      	cmp	r3, #3
 800b204:	d002      	beq.n	800b20c <HAL_RCC_OscConfig+0x44>
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	2b08      	cmp	r3, #8
 800b20a:	d10b      	bne.n	800b224 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b20c:	4b99      	ldr	r3, [pc, #612]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d05b      	beq.n	800b2d0 <HAL_RCC_OscConfig+0x108>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d157      	bne.n	800b2d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e2e3      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b22c:	d106      	bne.n	800b23c <HAL_RCC_OscConfig+0x74>
 800b22e:	4b91      	ldr	r3, [pc, #580]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a90      	ldr	r2, [pc, #576]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b238:	6013      	str	r3, [r2, #0]
 800b23a:	e01d      	b.n	800b278 <HAL_RCC_OscConfig+0xb0>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b244:	d10c      	bne.n	800b260 <HAL_RCC_OscConfig+0x98>
 800b246:	4b8b      	ldr	r3, [pc, #556]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a8a      	ldr	r2, [pc, #552]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b24c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	4b88      	ldr	r3, [pc, #544]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a87      	ldr	r2, [pc, #540]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b25c:	6013      	str	r3, [r2, #0]
 800b25e:	e00b      	b.n	800b278 <HAL_RCC_OscConfig+0xb0>
 800b260:	4b84      	ldr	r3, [pc, #528]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a83      	ldr	r2, [pc, #524]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b26a:	6013      	str	r3, [r2, #0]
 800b26c:	4b81      	ldr	r3, [pc, #516]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a80      	ldr	r2, [pc, #512]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d013      	beq.n	800b2a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b280:	f7fd f9fc 	bl	800867c <HAL_GetTick>
 800b284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b286:	e008      	b.n	800b29a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b288:	f7fd f9f8 	bl	800867c <HAL_GetTick>
 800b28c:	4602      	mov	r2, r0
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	2b64      	cmp	r3, #100	; 0x64
 800b294:	d901      	bls.n	800b29a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e2a8      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b29a:	4b76      	ldr	r3, [pc, #472]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d0f0      	beq.n	800b288 <HAL_RCC_OscConfig+0xc0>
 800b2a6:	e014      	b.n	800b2d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2a8:	f7fd f9e8 	bl	800867c <HAL_GetTick>
 800b2ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2ae:	e008      	b.n	800b2c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2b0:	f7fd f9e4 	bl	800867c <HAL_GetTick>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	2b64      	cmp	r3, #100	; 0x64
 800b2bc:	d901      	bls.n	800b2c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e294      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2c2:	4b6c      	ldr	r3, [pc, #432]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1f0      	bne.n	800b2b0 <HAL_RCC_OscConfig+0xe8>
 800b2ce:	e000      	b.n	800b2d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f003 0302 	and.w	r3, r3, #2
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d075      	beq.n	800b3ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2de:	4b65      	ldr	r3, [pc, #404]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	f003 030c 	and.w	r3, r3, #12
 800b2e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b2e8:	4b62      	ldr	r3, [pc, #392]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	f003 0303 	and.w	r3, r3, #3
 800b2f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	2b0c      	cmp	r3, #12
 800b2f6:	d102      	bne.n	800b2fe <HAL_RCC_OscConfig+0x136>
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d002      	beq.n	800b304 <HAL_RCC_OscConfig+0x13c>
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	2b04      	cmp	r3, #4
 800b302:	d11f      	bne.n	800b344 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b304:	4b5b      	ldr	r3, [pc, #364]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <HAL_RCC_OscConfig+0x154>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e267      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b31c:	4b55      	ldr	r3, [pc, #340]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	061b      	lsls	r3, r3, #24
 800b32a:	4952      	ldr	r1, [pc, #328]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b330:	4b51      	ldr	r3, [pc, #324]	; (800b478 <HAL_RCC_OscConfig+0x2b0>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4618      	mov	r0, r3
 800b336:	f7fd f955 	bl	80085e4 <HAL_InitTick>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d043      	beq.n	800b3c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e253      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d023      	beq.n	800b394 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b34c:	4b49      	ldr	r3, [pc, #292]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a48      	ldr	r2, [pc, #288]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b358:	f7fd f990 	bl	800867c <HAL_GetTick>
 800b35c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b35e:	e008      	b.n	800b372 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b360:	f7fd f98c 	bl	800867c <HAL_GetTick>
 800b364:	4602      	mov	r2, r0
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d901      	bls.n	800b372 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e23c      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b372:	4b40      	ldr	r3, [pc, #256]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d0f0      	beq.n	800b360 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b37e:	4b3d      	ldr	r3, [pc, #244]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	061b      	lsls	r3, r3, #24
 800b38c:	4939      	ldr	r1, [pc, #228]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b38e:	4313      	orrs	r3, r2
 800b390:	604b      	str	r3, [r1, #4]
 800b392:	e01a      	b.n	800b3ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b394:	4b37      	ldr	r3, [pc, #220]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a36      	ldr	r2, [pc, #216]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b39a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b39e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a0:	f7fd f96c 	bl	800867c <HAL_GetTick>
 800b3a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b3a6:	e008      	b.n	800b3ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3a8:	f7fd f968 	bl	800867c <HAL_GetTick>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d901      	bls.n	800b3ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e218      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b3ba:	4b2e      	ldr	r3, [pc, #184]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1f0      	bne.n	800b3a8 <HAL_RCC_OscConfig+0x1e0>
 800b3c6:	e000      	b.n	800b3ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0308 	and.w	r3, r3, #8
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d03c      	beq.n	800b450 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d01c      	beq.n	800b418 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b3de:	4b25      	ldr	r3, [pc, #148]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b3e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3e4:	4a23      	ldr	r2, [pc, #140]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b3e6:	f043 0301 	orr.w	r3, r3, #1
 800b3ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3ee:	f7fd f945 	bl	800867c <HAL_GetTick>
 800b3f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3f4:	e008      	b.n	800b408 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3f6:	f7fd f941 	bl	800867c <HAL_GetTick>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	1ad3      	subs	r3, r2, r3
 800b400:	2b02      	cmp	r3, #2
 800b402:	d901      	bls.n	800b408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b404:	2303      	movs	r3, #3
 800b406:	e1f1      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b408:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b40a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	2b00      	cmp	r3, #0
 800b414:	d0ef      	beq.n	800b3f6 <HAL_RCC_OscConfig+0x22e>
 800b416:	e01b      	b.n	800b450 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b418:	4b16      	ldr	r3, [pc, #88]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b41a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b41e:	4a15      	ldr	r2, [pc, #84]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b420:	f023 0301 	bic.w	r3, r3, #1
 800b424:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b428:	f7fd f928 	bl	800867c <HAL_GetTick>
 800b42c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b42e:	e008      	b.n	800b442 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b430:	f7fd f924 	bl	800867c <HAL_GetTick>
 800b434:	4602      	mov	r2, r0
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d901      	bls.n	800b442 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e1d4      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b442:	4b0c      	ldr	r3, [pc, #48]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b448:	f003 0302 	and.w	r3, r3, #2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1ef      	bne.n	800b430 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0304 	and.w	r3, r3, #4
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 80ab 	beq.w	800b5b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b45e:	2300      	movs	r3, #0
 800b460:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b462:	4b04      	ldr	r3, [pc, #16]	; (800b474 <HAL_RCC_OscConfig+0x2ac>)
 800b464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d106      	bne.n	800b47c <HAL_RCC_OscConfig+0x2b4>
 800b46e:	2301      	movs	r3, #1
 800b470:	e005      	b.n	800b47e <HAL_RCC_OscConfig+0x2b6>
 800b472:	bf00      	nop
 800b474:	40021000 	.word	0x40021000
 800b478:	20000cac 	.word	0x20000cac
 800b47c:	2300      	movs	r3, #0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00d      	beq.n	800b49e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b482:	4baf      	ldr	r3, [pc, #700]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b486:	4aae      	ldr	r2, [pc, #696]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b48c:	6593      	str	r3, [r2, #88]	; 0x58
 800b48e:	4bac      	ldr	r3, [pc, #688]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b496:	60fb      	str	r3, [r7, #12]
 800b498:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b49a:	2301      	movs	r3, #1
 800b49c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b49e:	4ba9      	ldr	r3, [pc, #676]	; (800b744 <HAL_RCC_OscConfig+0x57c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d118      	bne.n	800b4dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4aa:	4ba6      	ldr	r3, [pc, #664]	; (800b744 <HAL_RCC_OscConfig+0x57c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4aa5      	ldr	r2, [pc, #660]	; (800b744 <HAL_RCC_OscConfig+0x57c>)
 800b4b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b4b6:	f7fd f8e1 	bl	800867c <HAL_GetTick>
 800b4ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4bc:	e008      	b.n	800b4d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4be:	f7fd f8dd 	bl	800867c <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d901      	bls.n	800b4d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e18d      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4d0:	4b9c      	ldr	r3, [pc, #624]	; (800b744 <HAL_RCC_OscConfig+0x57c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d0f0      	beq.n	800b4be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d108      	bne.n	800b4f6 <HAL_RCC_OscConfig+0x32e>
 800b4e4:	4b96      	ldr	r3, [pc, #600]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ea:	4a95      	ldr	r2, [pc, #596]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b4ec:	f043 0301 	orr.w	r3, r3, #1
 800b4f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b4f4:	e024      	b.n	800b540 <HAL_RCC_OscConfig+0x378>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	2b05      	cmp	r3, #5
 800b4fc:	d110      	bne.n	800b520 <HAL_RCC_OscConfig+0x358>
 800b4fe:	4b90      	ldr	r3, [pc, #576]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b504:	4a8e      	ldr	r2, [pc, #568]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b506:	f043 0304 	orr.w	r3, r3, #4
 800b50a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b50e:	4b8c      	ldr	r3, [pc, #560]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b514:	4a8a      	ldr	r2, [pc, #552]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b516:	f043 0301 	orr.w	r3, r3, #1
 800b51a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b51e:	e00f      	b.n	800b540 <HAL_RCC_OscConfig+0x378>
 800b520:	4b87      	ldr	r3, [pc, #540]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b526:	4a86      	ldr	r2, [pc, #536]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b528:	f023 0301 	bic.w	r3, r3, #1
 800b52c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b530:	4b83      	ldr	r3, [pc, #524]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b536:	4a82      	ldr	r2, [pc, #520]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b538:	f023 0304 	bic.w	r3, r3, #4
 800b53c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d016      	beq.n	800b576 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b548:	f7fd f898 	bl	800867c <HAL_GetTick>
 800b54c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b54e:	e00a      	b.n	800b566 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b550:	f7fd f894 	bl	800867c <HAL_GetTick>
 800b554:	4602      	mov	r2, r0
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b55e:	4293      	cmp	r3, r2
 800b560:	d901      	bls.n	800b566 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b562:	2303      	movs	r3, #3
 800b564:	e142      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b566:	4b76      	ldr	r3, [pc, #472]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b56c:	f003 0302 	and.w	r3, r3, #2
 800b570:	2b00      	cmp	r3, #0
 800b572:	d0ed      	beq.n	800b550 <HAL_RCC_OscConfig+0x388>
 800b574:	e015      	b.n	800b5a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b576:	f7fd f881 	bl	800867c <HAL_GetTick>
 800b57a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b57c:	e00a      	b.n	800b594 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b57e:	f7fd f87d 	bl	800867c <HAL_GetTick>
 800b582:	4602      	mov	r2, r0
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	1ad3      	subs	r3, r2, r3
 800b588:	f241 3288 	movw	r2, #5000	; 0x1388
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d901      	bls.n	800b594 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b590:	2303      	movs	r3, #3
 800b592:	e12b      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b594:	4b6a      	ldr	r3, [pc, #424]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59a:	f003 0302 	and.w	r3, r3, #2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1ed      	bne.n	800b57e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b5a2:	7ffb      	ldrb	r3, [r7, #31]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d105      	bne.n	800b5b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5a8:	4b65      	ldr	r3, [pc, #404]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b5aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ac:	4a64      	ldr	r2, [pc, #400]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b5ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 0320 	and.w	r3, r3, #32
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d03c      	beq.n	800b63a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d01c      	beq.n	800b602 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b5c8:	4b5d      	ldr	r3, [pc, #372]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b5ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5ce:	4a5c      	ldr	r2, [pc, #368]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b5d0:	f043 0301 	orr.w	r3, r3, #1
 800b5d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5d8:	f7fd f850 	bl	800867c <HAL_GetTick>
 800b5dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5de:	e008      	b.n	800b5f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5e0:	f7fd f84c 	bl	800867c <HAL_GetTick>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d901      	bls.n	800b5f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	e0fc      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5f2:	4b53      	ldr	r3, [pc, #332]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b5f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5f8:	f003 0302 	and.w	r3, r3, #2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d0ef      	beq.n	800b5e0 <HAL_RCC_OscConfig+0x418>
 800b600:	e01b      	b.n	800b63a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b602:	4b4f      	ldr	r3, [pc, #316]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b608:	4a4d      	ldr	r2, [pc, #308]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b60a:	f023 0301 	bic.w	r3, r3, #1
 800b60e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b612:	f7fd f833 	bl	800867c <HAL_GetTick>
 800b616:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b618:	e008      	b.n	800b62c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b61a:	f7fd f82f 	bl	800867c <HAL_GetTick>
 800b61e:	4602      	mov	r2, r0
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	d901      	bls.n	800b62c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e0df      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b62c:	4b44      	ldr	r3, [pc, #272]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b62e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b632:	f003 0302 	and.w	r3, r3, #2
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1ef      	bne.n	800b61a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	69db      	ldr	r3, [r3, #28]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 80d3 	beq.w	800b7ea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b644:	4b3e      	ldr	r3, [pc, #248]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	f003 030c 	and.w	r3, r3, #12
 800b64c:	2b0c      	cmp	r3, #12
 800b64e:	f000 808d 	beq.w	800b76c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	69db      	ldr	r3, [r3, #28]
 800b656:	2b02      	cmp	r3, #2
 800b658:	d15a      	bne.n	800b710 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b65a:	4b39      	ldr	r3, [pc, #228]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a38      	ldr	r2, [pc, #224]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b666:	f7fd f809 	bl	800867c <HAL_GetTick>
 800b66a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b66c:	e008      	b.n	800b680 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b66e:	f7fd f805 	bl	800867c <HAL_GetTick>
 800b672:	4602      	mov	r2, r0
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d901      	bls.n	800b680 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e0b5      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b680:	4b2f      	ldr	r3, [pc, #188]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1f0      	bne.n	800b66e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b68c:	4b2c      	ldr	r3, [pc, #176]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b68e:	68da      	ldr	r2, [r3, #12]
 800b690:	4b2d      	ldr	r3, [pc, #180]	; (800b748 <HAL_RCC_OscConfig+0x580>)
 800b692:	4013      	ands	r3, r2
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	6a11      	ldr	r1, [r2, #32]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b69c:	3a01      	subs	r2, #1
 800b69e:	0112      	lsls	r2, r2, #4
 800b6a0:	4311      	orrs	r1, r2
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b6a6:	0212      	lsls	r2, r2, #8
 800b6a8:	4311      	orrs	r1, r2
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b6ae:	0852      	lsrs	r2, r2, #1
 800b6b0:	3a01      	subs	r2, #1
 800b6b2:	0552      	lsls	r2, r2, #21
 800b6b4:	4311      	orrs	r1, r2
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b6ba:	0852      	lsrs	r2, r2, #1
 800b6bc:	3a01      	subs	r2, #1
 800b6be:	0652      	lsls	r2, r2, #25
 800b6c0:	4311      	orrs	r1, r2
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b6c6:	06d2      	lsls	r2, r2, #27
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	491d      	ldr	r1, [pc, #116]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b6d0:	4b1b      	ldr	r3, [pc, #108]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a1a      	ldr	r2, [pc, #104]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b6d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b6dc:	4b18      	ldr	r3, [pc, #96]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	4a17      	ldr	r2, [pc, #92]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b6e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6e8:	f7fc ffc8 	bl	800867c <HAL_GetTick>
 800b6ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6ee:	e008      	b.n	800b702 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6f0:	f7fc ffc4 	bl	800867c <HAL_GetTick>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d901      	bls.n	800b702 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e074      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b702:	4b0f      	ldr	r3, [pc, #60]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0f0      	beq.n	800b6f0 <HAL_RCC_OscConfig+0x528>
 800b70e:	e06c      	b.n	800b7ea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a0a      	ldr	r2, [pc, #40]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b71a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b71c:	4b08      	ldr	r3, [pc, #32]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	4a07      	ldr	r2, [pc, #28]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b722:	f023 0303 	bic.w	r3, r3, #3
 800b726:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b728:	4b05      	ldr	r3, [pc, #20]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	4a04      	ldr	r2, [pc, #16]	; (800b740 <HAL_RCC_OscConfig+0x578>)
 800b72e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b736:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b738:	f7fc ffa0 	bl	800867c <HAL_GetTick>
 800b73c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b73e:	e00e      	b.n	800b75e <HAL_RCC_OscConfig+0x596>
 800b740:	40021000 	.word	0x40021000
 800b744:	40007000 	.word	0x40007000
 800b748:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b74c:	f7fc ff96 	bl	800867c <HAL_GetTick>
 800b750:	4602      	mov	r2, r0
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	2b02      	cmp	r3, #2
 800b758:	d901      	bls.n	800b75e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b75a:	2303      	movs	r3, #3
 800b75c:	e046      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b75e:	4b25      	ldr	r3, [pc, #148]	; (800b7f4 <HAL_RCC_OscConfig+0x62c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b766:	2b00      	cmp	r3, #0
 800b768:	d1f0      	bne.n	800b74c <HAL_RCC_OscConfig+0x584>
 800b76a:	e03e      	b.n	800b7ea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	69db      	ldr	r3, [r3, #28]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d101      	bne.n	800b778 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e039      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b778:	4b1e      	ldr	r3, [pc, #120]	; (800b7f4 <HAL_RCC_OscConfig+0x62c>)
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f003 0203 	and.w	r2, r3, #3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a1b      	ldr	r3, [r3, #32]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d12c      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	3b01      	subs	r3, #1
 800b798:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d123      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d11b      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d113      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c8:	085b      	lsrs	r3, r3, #1
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d109      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7dc:	085b      	lsrs	r3, r3, #1
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d001      	beq.n	800b7ea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3720      	adds	r7, #32
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	40021000 	.word	0x40021000

0800b7f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e11e      	b.n	800ba4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b810:	4b91      	ldr	r3, [pc, #580]	; (800ba58 <HAL_RCC_ClockConfig+0x260>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	683a      	ldr	r2, [r7, #0]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d910      	bls.n	800b840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b81e:	4b8e      	ldr	r3, [pc, #568]	; (800ba58 <HAL_RCC_ClockConfig+0x260>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f023 020f 	bic.w	r2, r3, #15
 800b826:	498c      	ldr	r1, [pc, #560]	; (800ba58 <HAL_RCC_ClockConfig+0x260>)
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b82e:	4b8a      	ldr	r3, [pc, #552]	; (800ba58 <HAL_RCC_ClockConfig+0x260>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f003 030f 	and.w	r3, r3, #15
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d001      	beq.n	800b840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e106      	b.n	800ba4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d073      	beq.n	800b934 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	2b03      	cmp	r3, #3
 800b852:	d129      	bne.n	800b8a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b854:	4b81      	ldr	r3, [pc, #516]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e0f4      	b.n	800ba4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b864:	f000 f972 	bl	800bb4c <RCC_GetSysClockFreqFromPLLSource>
 800b868:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	4a7c      	ldr	r2, [pc, #496]	; (800ba60 <HAL_RCC_ClockConfig+0x268>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d93f      	bls.n	800b8f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b872:	4b7a      	ldr	r3, [pc, #488]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d009      	beq.n	800b892 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b886:	2b00      	cmp	r3, #0
 800b888:	d033      	beq.n	800b8f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d12f      	bne.n	800b8f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b892:	4b72      	ldr	r3, [pc, #456]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b89a:	4a70      	ldr	r2, [pc, #448]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b8a2:	2380      	movs	r3, #128	; 0x80
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	e024      	b.n	800b8f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d107      	bne.n	800b8c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b8b0:	4b6a      	ldr	r3, [pc, #424]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d109      	bne.n	800b8d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e0c6      	b.n	800ba4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8c0:	4b66      	ldr	r3, [pc, #408]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e0be      	b.n	800ba4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b8d0:	f000 f8ce 	bl	800ba70 <HAL_RCC_GetSysClockFreq>
 800b8d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	4a61      	ldr	r2, [pc, #388]	; (800ba60 <HAL_RCC_ClockConfig+0x268>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d909      	bls.n	800b8f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b8de:	4b5f      	ldr	r3, [pc, #380]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8e6:	4a5d      	ldr	r2, [pc, #372]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b8ee:	2380      	movs	r3, #128	; 0x80
 800b8f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b8f2:	4b5a      	ldr	r3, [pc, #360]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	f023 0203 	bic.w	r2, r3, #3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	4957      	ldr	r1, [pc, #348]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b900:	4313      	orrs	r3, r2
 800b902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b904:	f7fc feba 	bl	800867c <HAL_GetTick>
 800b908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b90a:	e00a      	b.n	800b922 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b90c:	f7fc feb6 	bl	800867c <HAL_GetTick>
 800b910:	4602      	mov	r2, r0
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	f241 3288 	movw	r2, #5000	; 0x1388
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d901      	bls.n	800b922 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b91e:	2303      	movs	r3, #3
 800b920:	e095      	b.n	800ba4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b922:	4b4e      	ldr	r3, [pc, #312]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f003 020c 	and.w	r2, r3, #12
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	429a      	cmp	r2, r3
 800b932:	d1eb      	bne.n	800b90c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0302 	and.w	r3, r3, #2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d023      	beq.n	800b988 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d005      	beq.n	800b958 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b94c:	4b43      	ldr	r3, [pc, #268]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	4a42      	ldr	r2, [pc, #264]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b956:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0308 	and.w	r3, r3, #8
 800b960:	2b00      	cmp	r3, #0
 800b962:	d007      	beq.n	800b974 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b964:	4b3d      	ldr	r3, [pc, #244]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b96c:	4a3b      	ldr	r2, [pc, #236]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b96e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b972:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b974:	4b39      	ldr	r3, [pc, #228]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	4936      	ldr	r1, [pc, #216]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b982:	4313      	orrs	r3, r2
 800b984:	608b      	str	r3, [r1, #8]
 800b986:	e008      	b.n	800b99a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	2b80      	cmp	r3, #128	; 0x80
 800b98c:	d105      	bne.n	800b99a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b98e:	4b33      	ldr	r3, [pc, #204]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	4a32      	ldr	r2, [pc, #200]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b998:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b99a:	4b2f      	ldr	r3, [pc, #188]	; (800ba58 <HAL_RCC_ClockConfig+0x260>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d21d      	bcs.n	800b9e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9a8:	4b2b      	ldr	r3, [pc, #172]	; (800ba58 <HAL_RCC_ClockConfig+0x260>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f023 020f 	bic.w	r2, r3, #15
 800b9b0:	4929      	ldr	r1, [pc, #164]	; (800ba58 <HAL_RCC_ClockConfig+0x260>)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b9b8:	f7fc fe60 	bl	800867c <HAL_GetTick>
 800b9bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9be:	e00a      	b.n	800b9d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9c0:	f7fc fe5c 	bl	800867c <HAL_GetTick>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d901      	bls.n	800b9d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e03b      	b.n	800ba4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9d6:	4b20      	ldr	r3, [pc, #128]	; (800ba58 <HAL_RCC_ClockConfig+0x260>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 030f 	and.w	r3, r3, #15
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d1ed      	bne.n	800b9c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0304 	and.w	r3, r3, #4
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9f0:	4b1a      	ldr	r3, [pc, #104]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	4917      	ldr	r1, [pc, #92]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f003 0308 	and.w	r3, r3, #8
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d009      	beq.n	800ba22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ba0e:	4b13      	ldr	r3, [pc, #76]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	00db      	lsls	r3, r3, #3
 800ba1c:	490f      	ldr	r1, [pc, #60]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ba22:	f000 f825 	bl	800ba70 <HAL_RCC_GetSysClockFreq>
 800ba26:	4601      	mov	r1, r0
 800ba28:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <HAL_RCC_ClockConfig+0x264>)
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	091b      	lsrs	r3, r3, #4
 800ba2e:	f003 030f 	and.w	r3, r3, #15
 800ba32:	4a0c      	ldr	r2, [pc, #48]	; (800ba64 <HAL_RCC_ClockConfig+0x26c>)
 800ba34:	5cd3      	ldrb	r3, [r2, r3]
 800ba36:	f003 031f 	and.w	r3, r3, #31
 800ba3a:	fa21 f303 	lsr.w	r3, r1, r3
 800ba3e:	4a0a      	ldr	r2, [pc, #40]	; (800ba68 <HAL_RCC_ClockConfig+0x270>)
 800ba40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ba42:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <HAL_RCC_ClockConfig+0x274>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fc fdcc 	bl	80085e4 <HAL_InitTick>
 800ba4c:	4603      	mov	r3, r0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	40022000 	.word	0x40022000
 800ba5c:	40021000 	.word	0x40021000
 800ba60:	04c4b400 	.word	0x04c4b400
 800ba64:	080122d8 	.word	0x080122d8
 800ba68:	20000ca8 	.word	0x20000ca8
 800ba6c:	20000cac 	.word	0x20000cac

0800ba70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b087      	sub	sp, #28
 800ba74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ba76:	4b2c      	ldr	r3, [pc, #176]	; (800bb28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	f003 030c 	and.w	r3, r3, #12
 800ba7e:	2b04      	cmp	r3, #4
 800ba80:	d102      	bne.n	800ba88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ba82:	4b2a      	ldr	r3, [pc, #168]	; (800bb2c <HAL_RCC_GetSysClockFreq+0xbc>)
 800ba84:	613b      	str	r3, [r7, #16]
 800ba86:	e047      	b.n	800bb18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ba88:	4b27      	ldr	r3, [pc, #156]	; (800bb28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f003 030c 	and.w	r3, r3, #12
 800ba90:	2b08      	cmp	r3, #8
 800ba92:	d102      	bne.n	800ba9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ba94:	4b26      	ldr	r3, [pc, #152]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	e03e      	b.n	800bb18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ba9a:	4b23      	ldr	r3, [pc, #140]	; (800bb28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	f003 030c 	and.w	r3, r3, #12
 800baa2:	2b0c      	cmp	r3, #12
 800baa4:	d136      	bne.n	800bb14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800baa6:	4b20      	ldr	r3, [pc, #128]	; (800bb28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f003 0303 	and.w	r3, r3, #3
 800baae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bab0:	4b1d      	ldr	r3, [pc, #116]	; (800bb28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	091b      	lsrs	r3, r3, #4
 800bab6:	f003 030f 	and.w	r3, r3, #15
 800baba:	3301      	adds	r3, #1
 800babc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b03      	cmp	r3, #3
 800bac2:	d10c      	bne.n	800bade <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bac4:	4a1a      	ldr	r2, [pc, #104]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bacc:	4a16      	ldr	r2, [pc, #88]	; (800bb28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bace:	68d2      	ldr	r2, [r2, #12]
 800bad0:	0a12      	lsrs	r2, r2, #8
 800bad2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bad6:	fb02 f303 	mul.w	r3, r2, r3
 800bada:	617b      	str	r3, [r7, #20]
      break;
 800badc:	e00c      	b.n	800baf8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bade:	4a13      	ldr	r2, [pc, #76]	; (800bb2c <HAL_RCC_GetSysClockFreq+0xbc>)
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae6:	4a10      	ldr	r2, [pc, #64]	; (800bb28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bae8:	68d2      	ldr	r2, [r2, #12]
 800baea:	0a12      	lsrs	r2, r2, #8
 800baec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800baf0:	fb02 f303 	mul.w	r3, r2, r3
 800baf4:	617b      	str	r3, [r7, #20]
      break;
 800baf6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800baf8:	4b0b      	ldr	r3, [pc, #44]	; (800bb28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	0e5b      	lsrs	r3, r3, #25
 800bafe:	f003 0303 	and.w	r3, r3, #3
 800bb02:	3301      	adds	r3, #1
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb10:	613b      	str	r3, [r7, #16]
 800bb12:	e001      	b.n	800bb18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bb14:	2300      	movs	r3, #0
 800bb16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bb18:	693b      	ldr	r3, [r7, #16]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	371c      	adds	r7, #28
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	40021000 	.word	0x40021000
 800bb2c:	00f42400 	.word	0x00f42400
 800bb30:	007a1200 	.word	0x007a1200

0800bb34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb34:	b480      	push	{r7}
 800bb36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb38:	4b03      	ldr	r3, [pc, #12]	; (800bb48 <HAL_RCC_GetHCLKFreq+0x14>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	20000ca8 	.word	0x20000ca8

0800bb4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb52:	4b1e      	ldr	r3, [pc, #120]	; (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	f003 0303 	and.w	r3, r3, #3
 800bb5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb5c:	4b1b      	ldr	r3, [pc, #108]	; (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	091b      	lsrs	r3, r3, #4
 800bb62:	f003 030f 	and.w	r3, r3, #15
 800bb66:	3301      	adds	r3, #1
 800bb68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d10c      	bne.n	800bb8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb70:	4a17      	ldr	r2, [pc, #92]	; (800bbd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb78:	4a14      	ldr	r2, [pc, #80]	; (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb7a:	68d2      	ldr	r2, [r2, #12]
 800bb7c:	0a12      	lsrs	r2, r2, #8
 800bb7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb82:	fb02 f303 	mul.w	r3, r2, r3
 800bb86:	617b      	str	r3, [r7, #20]
    break;
 800bb88:	e00c      	b.n	800bba4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb8a:	4a12      	ldr	r2, [pc, #72]	; (800bbd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb92:	4a0e      	ldr	r2, [pc, #56]	; (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb94:	68d2      	ldr	r2, [r2, #12]
 800bb96:	0a12      	lsrs	r2, r2, #8
 800bb98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb9c:	fb02 f303 	mul.w	r3, r2, r3
 800bba0:	617b      	str	r3, [r7, #20]
    break;
 800bba2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bba4:	4b09      	ldr	r3, [pc, #36]	; (800bbcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	0e5b      	lsrs	r3, r3, #25
 800bbaa:	f003 0303 	and.w	r3, r3, #3
 800bbae:	3301      	adds	r3, #1
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bbbe:	687b      	ldr	r3, [r7, #4]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	371c      	adds	r7, #28
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	40021000 	.word	0x40021000
 800bbd0:	007a1200 	.word	0x007a1200
 800bbd4:	00f42400 	.word	0x00f42400

0800bbd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 8098 	beq.w	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbfa:	4b43      	ldr	r3, [pc, #268]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10d      	bne.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc06:	4b40      	ldr	r3, [pc, #256]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0a:	4a3f      	ldr	r2, [pc, #252]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc10:	6593      	str	r3, [r2, #88]	; 0x58
 800bc12:	4b3d      	ldr	r3, [pc, #244]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc1a:	60bb      	str	r3, [r7, #8]
 800bc1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc22:	4b3a      	ldr	r3, [pc, #232]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a39      	ldr	r2, [pc, #228]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc2e:	f7fc fd25 	bl	800867c <HAL_GetTick>
 800bc32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc34:	e009      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc36:	f7fc fd21 	bl	800867c <HAL_GetTick>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d902      	bls.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	74fb      	strb	r3, [r7, #19]
        break;
 800bc48:	e005      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc4a:	4b30      	ldr	r3, [pc, #192]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0ef      	beq.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bc56:	7cfb      	ldrb	r3, [r7, #19]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d159      	bne.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bc5c:	4b2a      	ldr	r3, [pc, #168]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d01e      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d019      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bc78:	4b23      	ldr	r3, [pc, #140]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc84:	4b20      	ldr	r3, [pc, #128]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8a:	4a1f      	ldr	r2, [pc, #124]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc94:	4b1c      	ldr	r3, [pc, #112]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9a:	4a1b      	ldr	r2, [pc, #108]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bca4:	4a18      	ldr	r2, [pc, #96]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d016      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcb6:	f7fc fce1 	bl	800867c <HAL_GetTick>
 800bcba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcbc:	e00b      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcbe:	f7fc fcdd 	bl	800867c <HAL_GetTick>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d902      	bls.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	74fb      	strb	r3, [r7, #19]
            break;
 800bcd4:	e006      	b.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcd6:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcdc:	f003 0302 	and.w	r3, r3, #2
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d0ec      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bce4:	7cfb      	ldrb	r3, [r7, #19]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10b      	bne.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcea:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcf8:	4903      	ldr	r1, [pc, #12]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bd00:	e008      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd02:	7cfb      	ldrb	r3, [r7, #19]
 800bd04:	74bb      	strb	r3, [r7, #18]
 800bd06:	e005      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bd08:	40021000 	.word	0x40021000
 800bd0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd10:	7cfb      	ldrb	r3, [r7, #19]
 800bd12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd14:	7c7b      	ldrb	r3, [r7, #17]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d105      	bne.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd1a:	4baf      	ldr	r3, [pc, #700]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd1e:	4aae      	ldr	r2, [pc, #696]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00a      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd32:	4ba9      	ldr	r3, [pc, #676]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd38:	f023 0203 	bic.w	r2, r3, #3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	49a5      	ldr	r1, [pc, #660]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd42:	4313      	orrs	r3, r2
 800bd44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f003 0302 	and.w	r3, r3, #2
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00a      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd54:	4ba0      	ldr	r3, [pc, #640]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd5a:	f023 020c 	bic.w	r2, r3, #12
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	499d      	ldr	r1, [pc, #628]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd64:	4313      	orrs	r3, r2
 800bd66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0304 	and.w	r3, r3, #4
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00a      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd76:	4b98      	ldr	r3, [pc, #608]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	4994      	ldr	r1, [pc, #592]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd86:	4313      	orrs	r3, r2
 800bd88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0308 	and.w	r3, r3, #8
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00a      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd98:	4b8f      	ldr	r3, [pc, #572]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	498c      	ldr	r1, [pc, #560]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 0310 	and.w	r3, r3, #16
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00a      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bdba:	4b87      	ldr	r3, [pc, #540]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	4983      	ldr	r1, [pc, #524]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 0320 	and.w	r3, r3, #32
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00a      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bddc:	4b7e      	ldr	r3, [pc, #504]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bde2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	497b      	ldr	r1, [pc, #492]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00a      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bdfe:	4b76      	ldr	r3, [pc, #472]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	69db      	ldr	r3, [r3, #28]
 800be0c:	4972      	ldr	r1, [pc, #456]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00a      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be20:	4b6d      	ldr	r3, [pc, #436]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	496a      	ldr	r1, [pc, #424]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be30:	4313      	orrs	r3, r2
 800be32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00a      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be42:	4b65      	ldr	r3, [pc, #404]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be50:	4961      	ldr	r1, [pc, #388]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be52:	4313      	orrs	r3, r2
 800be54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00a      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be64:	4b5c      	ldr	r3, [pc, #368]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be6a:	f023 0203 	bic.w	r2, r3, #3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	4959      	ldr	r1, [pc, #356]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be74:	4313      	orrs	r3, r2
 800be76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00a      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be86:	4b54      	ldr	r3, [pc, #336]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be94:	4950      	ldr	r1, [pc, #320]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be96:	4313      	orrs	r3, r2
 800be98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d015      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bea8:	4b4b      	ldr	r3, [pc, #300]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb6:	4948      	ldr	r1, [pc, #288]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beb8:	4313      	orrs	r3, r2
 800beba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bec6:	d105      	bne.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bec8:	4b43      	ldr	r3, [pc, #268]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	4a42      	ldr	r2, [pc, #264]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bed2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d015      	beq.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bee0:	4b3d      	ldr	r3, [pc, #244]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beee:	493a      	ldr	r1, [pc, #232]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bef0:	4313      	orrs	r3, r2
 800bef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800befa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800befe:	d105      	bne.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf00:	4b35      	ldr	r3, [pc, #212]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	4a34      	ldr	r2, [pc, #208]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d015      	beq.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf18:	4b2f      	ldr	r3, [pc, #188]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf26:	492c      	ldr	r1, [pc, #176]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf36:	d105      	bne.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf38:	4b27      	ldr	r3, [pc, #156]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	4a26      	ldr	r2, [pc, #152]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d015      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf50:	4b21      	ldr	r3, [pc, #132]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5e:	491e      	ldr	r1, [pc, #120]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf60:	4313      	orrs	r3, r2
 800bf62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf6e:	d105      	bne.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf70:	4b19      	ldr	r3, [pc, #100]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	4a18      	ldr	r2, [pc, #96]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d015      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf88:	4b13      	ldr	r3, [pc, #76]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf96:	4910      	ldr	r1, [pc, #64]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfa6:	d105      	bne.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bfa8:	4b0b      	ldr	r3, [pc, #44]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	4a0a      	ldr	r2, [pc, #40]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d018      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bfc0:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfce:	4902      	ldr	r1, [pc, #8]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bfd6:	e001      	b.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x404>
 800bfd8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfe4:	d105      	bne.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bfe6:	4b21      	ldr	r3, [pc, #132]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	4a20      	ldr	r2, [pc, #128]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bfec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bff0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d015      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bffe:	4b1b      	ldr	r3, [pc, #108]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c004:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c00c:	4917      	ldr	r1, [pc, #92]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c01c:	d105      	bne.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c01e:	4b13      	ldr	r3, [pc, #76]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	4a12      	ldr	r2, [pc, #72]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c028:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d015      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c036:	4b0d      	ldr	r3, [pc, #52]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c03c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c044:	4909      	ldr	r1, [pc, #36]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c046:	4313      	orrs	r3, r2
 800c048:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c054:	d105      	bne.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c056:	4b05      	ldr	r3, [pc, #20]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	4a04      	ldr	r2, [pc, #16]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c05c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c060:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c062:	7cbb      	ldrb	r3, [r7, #18]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	40021000 	.word	0x40021000

0800c070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	e084      	b.n	800c18c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b00      	cmp	r3, #0
 800c092:	d106      	bne.n	800c0a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7fb fd2b 	bl	8007af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0c2:	d902      	bls.n	800c0ca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	e002      	b.n	800c0d0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c0ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c0d8:	d007      	beq.n	800c0ea <HAL_SPI_Init+0x7a>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0e2:	d002      	beq.n	800c0ea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10b      	bne.n	800c10a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	68db      	ldr	r3, [r3, #12]
 800c0f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0fa:	d903      	bls.n	800c104 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2202      	movs	r2, #2
 800c100:	631a      	str	r2, [r3, #48]	; 0x30
 800c102:	e002      	b.n	800c10a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	685a      	ldr	r2, [r3, #4]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	431a      	orrs	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	431a      	orrs	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	695b      	ldr	r3, [r3, #20]
 800c11e:	431a      	orrs	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c128:	431a      	orrs	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	69db      	ldr	r3, [r3, #28]
 800c12e:	431a      	orrs	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a1b      	ldr	r3, [r3, #32]
 800c134:	ea42 0103 	orr.w	r1, r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	430a      	orrs	r2, r1
 800c142:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	0c1b      	lsrs	r3, r3, #16
 800c14a:	f003 0204 	and.w	r2, r3, #4
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c152:	431a      	orrs	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	ea42 0103 	orr.w	r1, r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	430a      	orrs	r2, r1
 800c16a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	69da      	ldr	r2, [r3, #28]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c17a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e049      	b.n	800c23a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d106      	bne.n	800c1c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7fc f914 	bl	80083e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	f000 fc38 	bl	800ca48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
	...

0800c244 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c252:	b2db      	uxtb	r3, r3
 800c254:	2b01      	cmp	r3, #1
 800c256:	d001      	beq.n	800c25c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	e019      	b.n	800c290 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2202      	movs	r2, #2
 800c260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689a      	ldr	r2, [r3, #8]
 800c26a:	4b0c      	ldr	r3, [pc, #48]	; (800c29c <HAL_TIM_Base_Start+0x58>)
 800c26c:	4013      	ands	r3, r2
 800c26e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2b06      	cmp	r3, #6
 800c274:	d00b      	beq.n	800c28e <HAL_TIM_Base_Start+0x4a>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c27c:	d007      	beq.n	800c28e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f042 0201 	orr.w	r2, r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	00010007 	.word	0x00010007

0800c2a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6a1a      	ldr	r2, [r3, #32]
 800c2ae:	f241 1311 	movw	r3, #4369	; 0x1111
 800c2b2:	4013      	ands	r3, r2
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10f      	bne.n	800c2d8 <HAL_TIM_Base_Stop+0x38>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	6a1a      	ldr	r2, [r3, #32]
 800c2be:	f244 4344 	movw	r3, #17476	; 0x4444
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d107      	bne.n	800c2d8 <HAL_TIM_Base_Stop+0x38>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 0201 	bic.w	r2, r2, #1
 800c2d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
	...

0800c2f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b01      	cmp	r3, #1
 800c302:	d001      	beq.n	800c308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	e021      	b.n	800c34c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2202      	movs	r2, #2
 800c30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68da      	ldr	r2, [r3, #12]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f042 0201 	orr.w	r2, r2, #1
 800c31e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	689a      	ldr	r2, [r3, #8]
 800c326:	4b0c      	ldr	r3, [pc, #48]	; (800c358 <HAL_TIM_Base_Start_IT+0x68>)
 800c328:	4013      	ands	r3, r2
 800c32a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2b06      	cmp	r3, #6
 800c330:	d00b      	beq.n	800c34a <HAL_TIM_Base_Start_IT+0x5a>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c338:	d007      	beq.n	800c34a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f042 0201 	orr.w	r2, r2, #1
 800c348:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	00010007 	.word	0x00010007

0800c35c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68da      	ldr	r2, [r3, #12]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f022 0201 	bic.w	r2, r2, #1
 800c372:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	6a1a      	ldr	r2, [r3, #32]
 800c37a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c37e:	4013      	ands	r3, r2
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10f      	bne.n	800c3a4 <HAL_TIM_Base_Stop_IT+0x48>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6a1a      	ldr	r2, [r3, #32]
 800c38a:	f244 4344 	movw	r3, #17476	; 0x4444
 800c38e:	4013      	ands	r3, r2
 800c390:	2b00      	cmp	r3, #0
 800c392:	d107      	bne.n	800c3a4 <HAL_TIM_Base_Stop_IT+0x48>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f022 0201 	bic.w	r2, r2, #1
 800c3a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b086      	sub	sp, #24
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d101      	bne.n	800c3ce <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e097      	b.n	800c4fe <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d106      	bne.n	800c3e8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7fb ffb4 	bl	8008350 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	6812      	ldr	r2, [r2, #0]
 800c3fa:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c3fe:	f023 0307 	bic.w	r3, r3, #7
 800c402:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	3304      	adds	r3, #4
 800c40c:	4619      	mov	r1, r3
 800c40e:	4610      	mov	r0, r2
 800c410:	f000 fb1a 	bl	800ca48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	699b      	ldr	r3, [r3, #24]
 800c422:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	697a      	ldr	r2, [r7, #20]
 800c432:	4313      	orrs	r3, r2
 800c434:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c43c:	f023 0303 	bic.w	r3, r3, #3
 800c440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	689a      	ldr	r2, [r3, #8]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	021b      	lsls	r3, r3, #8
 800c44c:	4313      	orrs	r3, r2
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	4313      	orrs	r3, r2
 800c452:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c45a:	f023 030c 	bic.w	r3, r3, #12
 800c45e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c46a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	68da      	ldr	r2, [r3, #12]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	69db      	ldr	r3, [r3, #28]
 800c474:	021b      	lsls	r3, r3, #8
 800c476:	4313      	orrs	r3, r2
 800c478:	693a      	ldr	r2, [r7, #16]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	011a      	lsls	r2, r3, #4
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	6a1b      	ldr	r3, [r3, #32]
 800c488:	031b      	lsls	r3, r3, #12
 800c48a:	4313      	orrs	r3, r2
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	4313      	orrs	r3, r2
 800c490:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c498:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c4a0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	011b      	lsls	r3, r3, #4
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	f003 0302 	and.w	r3, r3, #2
 800c518:	2b02      	cmp	r3, #2
 800c51a:	d122      	bne.n	800c562 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b02      	cmp	r3, #2
 800c528:	d11b      	bne.n	800c562 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f06f 0202 	mvn.w	r2, #2
 800c532:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	f003 0303 	and.w	r3, r3, #3
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fa5f 	bl	800ca0c <HAL_TIM_IC_CaptureCallback>
 800c54e:	e005      	b.n	800c55c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fa51 	bl	800c9f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fa62 	bl	800ca20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	f003 0304 	and.w	r3, r3, #4
 800c56c:	2b04      	cmp	r3, #4
 800c56e:	d122      	bne.n	800c5b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	f003 0304 	and.w	r3, r3, #4
 800c57a:	2b04      	cmp	r3, #4
 800c57c:	d11b      	bne.n	800c5b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f06f 0204 	mvn.w	r2, #4
 800c586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2202      	movs	r2, #2
 800c58c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fa35 	bl	800ca0c <HAL_TIM_IC_CaptureCallback>
 800c5a2:	e005      	b.n	800c5b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 fa27 	bl	800c9f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fa38 	bl	800ca20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	f003 0308 	and.w	r3, r3, #8
 800c5c0:	2b08      	cmp	r3, #8
 800c5c2:	d122      	bne.n	800c60a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	f003 0308 	and.w	r3, r3, #8
 800c5ce:	2b08      	cmp	r3, #8
 800c5d0:	d11b      	bne.n	800c60a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f06f 0208 	mvn.w	r2, #8
 800c5da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2204      	movs	r2, #4
 800c5e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d003      	beq.n	800c5f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fa0b 	bl	800ca0c <HAL_TIM_IC_CaptureCallback>
 800c5f6:	e005      	b.n	800c604 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f9fd 	bl	800c9f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fa0e 	bl	800ca20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	f003 0310 	and.w	r3, r3, #16
 800c614:	2b10      	cmp	r3, #16
 800c616:	d122      	bne.n	800c65e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	f003 0310 	and.w	r3, r3, #16
 800c622:	2b10      	cmp	r3, #16
 800c624:	d11b      	bne.n	800c65e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f06f 0210 	mvn.w	r2, #16
 800c62e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2208      	movs	r2, #8
 800c634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	69db      	ldr	r3, [r3, #28]
 800c63c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 f9e1 	bl	800ca0c <HAL_TIM_IC_CaptureCallback>
 800c64a:	e005      	b.n	800c658 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f9d3 	bl	800c9f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f9e4 	bl	800ca20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	f003 0301 	and.w	r3, r3, #1
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d10e      	bne.n	800c68a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	f003 0301 	and.w	r3, r3, #1
 800c676:	2b01      	cmp	r3, #1
 800c678:	d107      	bne.n	800c68a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f06f 0201 	mvn.w	r2, #1
 800c682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f9ad 	bl	800c9e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c694:	2b80      	cmp	r3, #128	; 0x80
 800c696:	d10e      	bne.n	800c6b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6a2:	2b80      	cmp	r3, #128	; 0x80
 800c6a4:	d107      	bne.n	800c6b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c6ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fc5f 	bl	800cf74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6c4:	d10e      	bne.n	800c6e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6d0:	2b80      	cmp	r3, #128	; 0x80
 800c6d2:	d107      	bne.n	800c6e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c6dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fc52 	bl	800cf88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ee:	2b40      	cmp	r3, #64	; 0x40
 800c6f0:	d10e      	bne.n	800c710 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6fc:	2b40      	cmp	r3, #64	; 0x40
 800c6fe:	d107      	bne.n	800c710 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f992 	bl	800ca34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	f003 0320 	and.w	r3, r3, #32
 800c71a:	2b20      	cmp	r3, #32
 800c71c:	d10e      	bne.n	800c73c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	f003 0320 	and.w	r3, r3, #32
 800c728:	2b20      	cmp	r3, #32
 800c72a:	d107      	bne.n	800c73c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f06f 0220 	mvn.w	r2, #32
 800c734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fc12 	bl	800cf60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c74a:	d10f      	bne.n	800c76c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c75a:	d107      	bne.n	800c76c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 fc18 	bl	800cf9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c77a:	d10f      	bne.n	800c79c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c78a:	d107      	bne.n	800c79c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fc0a 	bl	800cfb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7aa:	d10f      	bne.n	800c7cc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7ba:	d107      	bne.n	800c7cc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c7c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fbfc 	bl	800cfc4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7da:	d10f      	bne.n	800c7fc <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7ea:	d107      	bne.n	800c7fc <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fbee 	bl	800cfd8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c814:	2b01      	cmp	r3, #1
 800c816:	d101      	bne.n	800c81c <HAL_TIM_ConfigClockSource+0x18>
 800c818:	2302      	movs	r3, #2
 800c81a:	e0d2      	b.n	800c9c2 <HAL_TIM_ConfigClockSource+0x1be>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2201      	movs	r2, #1
 800c820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2202      	movs	r2, #2
 800c828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c83a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c83e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c846:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c858:	f000 80a9 	beq.w	800c9ae <HAL_TIM_ConfigClockSource+0x1aa>
 800c85c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c860:	d81a      	bhi.n	800c898 <HAL_TIM_ConfigClockSource+0x94>
 800c862:	2b30      	cmp	r3, #48	; 0x30
 800c864:	f000 809a 	beq.w	800c99c <HAL_TIM_ConfigClockSource+0x198>
 800c868:	2b30      	cmp	r3, #48	; 0x30
 800c86a:	d809      	bhi.n	800c880 <HAL_TIM_ConfigClockSource+0x7c>
 800c86c:	2b10      	cmp	r3, #16
 800c86e:	f000 8095 	beq.w	800c99c <HAL_TIM_ConfigClockSource+0x198>
 800c872:	2b20      	cmp	r3, #32
 800c874:	f000 8092 	beq.w	800c99c <HAL_TIM_ConfigClockSource+0x198>
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 808f 	beq.w	800c99c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c87e:	e097      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c880:	2b50      	cmp	r3, #80	; 0x50
 800c882:	d05b      	beq.n	800c93c <HAL_TIM_ConfigClockSource+0x138>
 800c884:	2b50      	cmp	r3, #80	; 0x50
 800c886:	d802      	bhi.n	800c88e <HAL_TIM_ConfigClockSource+0x8a>
 800c888:	2b40      	cmp	r3, #64	; 0x40
 800c88a:	d077      	beq.n	800c97c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c88c:	e090      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c88e:	2b60      	cmp	r3, #96	; 0x60
 800c890:	d064      	beq.n	800c95c <HAL_TIM_ConfigClockSource+0x158>
 800c892:	2b70      	cmp	r3, #112	; 0x70
 800c894:	d028      	beq.n	800c8e8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c896:	e08b      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c898:	4a4c      	ldr	r2, [pc, #304]	; (800c9cc <HAL_TIM_ConfigClockSource+0x1c8>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d07e      	beq.n	800c99c <HAL_TIM_ConfigClockSource+0x198>
 800c89e:	4a4b      	ldr	r2, [pc, #300]	; (800c9cc <HAL_TIM_ConfigClockSource+0x1c8>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d810      	bhi.n	800c8c6 <HAL_TIM_ConfigClockSource+0xc2>
 800c8a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8a8:	d078      	beq.n	800c99c <HAL_TIM_ConfigClockSource+0x198>
 800c8aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8ae:	d803      	bhi.n	800c8b8 <HAL_TIM_ConfigClockSource+0xb4>
 800c8b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8b4:	d02f      	beq.n	800c916 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c8b6:	e07b      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c8bc:	d06e      	beq.n	800c99c <HAL_TIM_ConfigClockSource+0x198>
 800c8be:	4a44      	ldr	r2, [pc, #272]	; (800c9d0 <HAL_TIM_ConfigClockSource+0x1cc>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d06b      	beq.n	800c99c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c8c4:	e074      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8c6:	4a43      	ldr	r2, [pc, #268]	; (800c9d4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d067      	beq.n	800c99c <HAL_TIM_ConfigClockSource+0x198>
 800c8cc:	4a41      	ldr	r2, [pc, #260]	; (800c9d4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d803      	bhi.n	800c8da <HAL_TIM_ConfigClockSource+0xd6>
 800c8d2:	4a41      	ldr	r2, [pc, #260]	; (800c9d8 <HAL_TIM_ConfigClockSource+0x1d4>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d061      	beq.n	800c99c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c8d8:	e06a      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8da:	4a40      	ldr	r2, [pc, #256]	; (800c9dc <HAL_TIM_ConfigClockSource+0x1d8>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d05d      	beq.n	800c99c <HAL_TIM_ConfigClockSource+0x198>
 800c8e0:	4a3f      	ldr	r2, [pc, #252]	; (800c9e0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d05a      	beq.n	800c99c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c8e6:	e063      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6818      	ldr	r0, [r3, #0]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	6899      	ldr	r1, [r3, #8]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	f000 f9ca 	bl	800cc90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c90a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	609a      	str	r2, [r3, #8]
      break;
 800c914:	e04c      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	6899      	ldr	r1, [r3, #8]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	f000 f9b3 	bl	800cc90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	689a      	ldr	r2, [r3, #8]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c938:	609a      	str	r2, [r3, #8]
      break;
 800c93a:	e039      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	6859      	ldr	r1, [r3, #4]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	461a      	mov	r2, r3
 800c94a:	f000 f925 	bl	800cb98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2150      	movs	r1, #80	; 0x50
 800c954:	4618      	mov	r0, r3
 800c956:	f000 f97e 	bl	800cc56 <TIM_ITRx_SetConfig>
      break;
 800c95a:	e029      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6818      	ldr	r0, [r3, #0]
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	6859      	ldr	r1, [r3, #4]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	461a      	mov	r2, r3
 800c96a:	f000 f944 	bl	800cbf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2160      	movs	r1, #96	; 0x60
 800c974:	4618      	mov	r0, r3
 800c976:	f000 f96e 	bl	800cc56 <TIM_ITRx_SetConfig>
      break;
 800c97a:	e019      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6818      	ldr	r0, [r3, #0]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	6859      	ldr	r1, [r3, #4]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	461a      	mov	r2, r3
 800c98a:	f000 f905 	bl	800cb98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2140      	movs	r1, #64	; 0x40
 800c994:	4618      	mov	r0, r3
 800c996:	f000 f95e 	bl	800cc56 <TIM_ITRx_SetConfig>
      break;
 800c99a:	e009      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	f000 f955 	bl	800cc56 <TIM_ITRx_SetConfig>
      break;
 800c9ac:	e000      	b.n	800c9b0 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c9ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	00100030 	.word	0x00100030
 800c9d0:	00100020 	.word	0x00100020
 800c9d4:	00100050 	.word	0x00100050
 800c9d8:	00100040 	.word	0x00100040
 800c9dc:	00100060 	.word	0x00100060
 800c9e0:	00100070 	.word	0x00100070

0800c9e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca14:	bf00      	nop
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a46      	ldr	r2, [pc, #280]	; (800cb74 <TIM_Base_SetConfig+0x12c>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d017      	beq.n	800ca90 <TIM_Base_SetConfig+0x48>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca66:	d013      	beq.n	800ca90 <TIM_Base_SetConfig+0x48>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a43      	ldr	r2, [pc, #268]	; (800cb78 <TIM_Base_SetConfig+0x130>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d00f      	beq.n	800ca90 <TIM_Base_SetConfig+0x48>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a42      	ldr	r2, [pc, #264]	; (800cb7c <TIM_Base_SetConfig+0x134>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d00b      	beq.n	800ca90 <TIM_Base_SetConfig+0x48>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a41      	ldr	r2, [pc, #260]	; (800cb80 <TIM_Base_SetConfig+0x138>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d007      	beq.n	800ca90 <TIM_Base_SetConfig+0x48>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a40      	ldr	r2, [pc, #256]	; (800cb84 <TIM_Base_SetConfig+0x13c>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d003      	beq.n	800ca90 <TIM_Base_SetConfig+0x48>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a3f      	ldr	r2, [pc, #252]	; (800cb88 <TIM_Base_SetConfig+0x140>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d108      	bne.n	800caa2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4a33      	ldr	r2, [pc, #204]	; (800cb74 <TIM_Base_SetConfig+0x12c>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d023      	beq.n	800caf2 <TIM_Base_SetConfig+0xaa>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cab0:	d01f      	beq.n	800caf2 <TIM_Base_SetConfig+0xaa>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4a30      	ldr	r2, [pc, #192]	; (800cb78 <TIM_Base_SetConfig+0x130>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d01b      	beq.n	800caf2 <TIM_Base_SetConfig+0xaa>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4a2f      	ldr	r2, [pc, #188]	; (800cb7c <TIM_Base_SetConfig+0x134>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d017      	beq.n	800caf2 <TIM_Base_SetConfig+0xaa>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	4a2e      	ldr	r2, [pc, #184]	; (800cb80 <TIM_Base_SetConfig+0x138>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d013      	beq.n	800caf2 <TIM_Base_SetConfig+0xaa>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4a2d      	ldr	r2, [pc, #180]	; (800cb84 <TIM_Base_SetConfig+0x13c>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d00f      	beq.n	800caf2 <TIM_Base_SetConfig+0xaa>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4a2d      	ldr	r2, [pc, #180]	; (800cb8c <TIM_Base_SetConfig+0x144>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d00b      	beq.n	800caf2 <TIM_Base_SetConfig+0xaa>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a2c      	ldr	r2, [pc, #176]	; (800cb90 <TIM_Base_SetConfig+0x148>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d007      	beq.n	800caf2 <TIM_Base_SetConfig+0xaa>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a2b      	ldr	r2, [pc, #172]	; (800cb94 <TIM_Base_SetConfig+0x14c>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d003      	beq.n	800caf2 <TIM_Base_SetConfig+0xaa>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a26      	ldr	r2, [pc, #152]	; (800cb88 <TIM_Base_SetConfig+0x140>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d108      	bne.n	800cb04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	689a      	ldr	r2, [r3, #8]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a12      	ldr	r2, [pc, #72]	; (800cb74 <TIM_Base_SetConfig+0x12c>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d013      	beq.n	800cb58 <TIM_Base_SetConfig+0x110>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a14      	ldr	r2, [pc, #80]	; (800cb84 <TIM_Base_SetConfig+0x13c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d00f      	beq.n	800cb58 <TIM_Base_SetConfig+0x110>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a14      	ldr	r2, [pc, #80]	; (800cb8c <TIM_Base_SetConfig+0x144>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d00b      	beq.n	800cb58 <TIM_Base_SetConfig+0x110>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a13      	ldr	r2, [pc, #76]	; (800cb90 <TIM_Base_SetConfig+0x148>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d007      	beq.n	800cb58 <TIM_Base_SetConfig+0x110>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a12      	ldr	r2, [pc, #72]	; (800cb94 <TIM_Base_SetConfig+0x14c>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d003      	beq.n	800cb58 <TIM_Base_SetConfig+0x110>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a0d      	ldr	r2, [pc, #52]	; (800cb88 <TIM_Base_SetConfig+0x140>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d103      	bne.n	800cb60 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	691a      	ldr	r2, [r3, #16]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	615a      	str	r2, [r3, #20]
}
 800cb66:	bf00      	nop
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	40012c00 	.word	0x40012c00
 800cb78:	40000400 	.word	0x40000400
 800cb7c:	40000800 	.word	0x40000800
 800cb80:	40000c00 	.word	0x40000c00
 800cb84:	40013400 	.word	0x40013400
 800cb88:	40015000 	.word	0x40015000
 800cb8c:	40014000 	.word	0x40014000
 800cb90:	40014400 	.word	0x40014400
 800cb94:	40014800 	.word	0x40014800

0800cb98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b087      	sub	sp, #28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	f023 0201 	bic.w	r2, r3, #1
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	011b      	lsls	r3, r3, #4
 800cbc8:	693a      	ldr	r2, [r7, #16]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f023 030a 	bic.w	r3, r3, #10
 800cbd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	621a      	str	r2, [r3, #32]
}
 800cbea:	bf00      	nop
 800cbec:	371c      	adds	r7, #28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbf6:	b480      	push	{r7}
 800cbf8:	b087      	sub	sp, #28
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	f023 0210 	bic.w	r2, r3, #16
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	699b      	ldr	r3, [r3, #24]
 800cc12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6a1b      	ldr	r3, [r3, #32]
 800cc18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	031b      	lsls	r3, r3, #12
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	011b      	lsls	r3, r3, #4
 800cc38:	693a      	ldr	r2, [r7, #16]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	697a      	ldr	r2, [r7, #20]
 800cc42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	621a      	str	r2, [r3, #32]
}
 800cc4a:	bf00      	nop
 800cc4c:	371c      	adds	r7, #28
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc56:	b480      	push	{r7}
 800cc58:	b085      	sub	sp, #20
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cc6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	f043 0307 	orr.w	r3, r3, #7
 800cc7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	609a      	str	r2, [r3, #8]
}
 800cc84:	bf00      	nop
 800cc86:	3714      	adds	r7, #20
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
 800cc9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	021a      	lsls	r2, r3, #8
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	431a      	orrs	r2, r3
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	609a      	str	r2, [r3, #8]
}
 800ccc4:	bf00      	nop
 800ccc6:	371c      	adds	r7, #28
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d101      	bne.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cce4:	2302      	movs	r3, #2
 800cce6:	e074      	b.n	800cdd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2201      	movs	r2, #1
 800ccec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a34      	ldr	r2, [pc, #208]	; (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d009      	beq.n	800cd26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a33      	ldr	r2, [pc, #204]	; (800cde4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d004      	beq.n	800cd26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a31      	ldr	r2, [pc, #196]	; (800cde8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d108      	bne.n	800cd38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cd3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a21      	ldr	r2, [pc, #132]	; (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d022      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd68:	d01d      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a1f      	ldr	r2, [pc, #124]	; (800cdec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d018      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a1d      	ldr	r2, [pc, #116]	; (800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d013      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a1c      	ldr	r2, [pc, #112]	; (800cdf4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d00e      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a15      	ldr	r2, [pc, #84]	; (800cde4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d009      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a18      	ldr	r2, [pc, #96]	; (800cdf8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d004      	beq.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a11      	ldr	r2, [pc, #68]	; (800cde8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d10c      	bne.n	800cdc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	40012c00 	.word	0x40012c00
 800cde4:	40013400 	.word	0x40013400
 800cde8:	40015000 	.word	0x40015000
 800cdec:	40000400 	.word	0x40000400
 800cdf0:	40000800 	.word	0x40000800
 800cdf4:	40000c00 	.word	0x40000c00
 800cdf8:	40014000 	.word	0x40014000

0800cdfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce06:	2300      	movs	r3, #0
 800ce08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d101      	bne.n	800ce18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce14:	2302      	movs	r3, #2
 800ce16:	e096      	b.n	800cf46 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	695b      	ldr	r3, [r3, #20]
 800ce70:	4313      	orrs	r3, r2
 800ce72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	699b      	ldr	r3, [r3, #24]
 800ce8c:	041b      	lsls	r3, r3, #16
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a2f      	ldr	r2, [pc, #188]	; (800cf54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d009      	beq.n	800ceb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a2d      	ldr	r2, [pc, #180]	; (800cf58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d004      	beq.n	800ceb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a2c      	ldr	r2, [pc, #176]	; (800cf5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d106      	bne.n	800cebe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	69db      	ldr	r3, [r3, #28]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4a24      	ldr	r2, [pc, #144]	; (800cf54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d009      	beq.n	800cedc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a22      	ldr	r2, [pc, #136]	; (800cf58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d004      	beq.n	800cedc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a21      	ldr	r2, [pc, #132]	; (800cf5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d12b      	bne.n	800cf34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee6:	051b      	lsls	r3, r3, #20
 800cee8:	4313      	orrs	r3, r2
 800ceea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	6a1b      	ldr	r3, [r3, #32]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf04:	4313      	orrs	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a11      	ldr	r2, [pc, #68]	; (800cf54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d009      	beq.n	800cf26 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a10      	ldr	r2, [pc, #64]	; (800cf58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d004      	beq.n	800cf26 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a0e      	ldr	r2, [pc, #56]	; (800cf5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d106      	bne.n	800cf34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf30:	4313      	orrs	r3, r2
 800cf32:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	40012c00 	.word	0x40012c00
 800cf58:	40013400 	.word	0x40013400
 800cf5c:	40015000 	.word	0x40015000

0800cf60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <LL_EXTI_EnableIT_0_31>:
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800cff4:	4b05      	ldr	r3, [pc, #20]	; (800d00c <LL_EXTI_EnableIT_0_31+0x20>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	4904      	ldr	r1, [pc, #16]	; (800d00c <LL_EXTI_EnableIT_0_31+0x20>)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4313      	orrs	r3, r2
 800cffe:	600b      	str	r3, [r1, #0]
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	40010400 	.word	0x40010400

0800d010 <LL_EXTI_EnableIT_32_63>:
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d018:	4b05      	ldr	r3, [pc, #20]	; (800d030 <LL_EXTI_EnableIT_32_63+0x20>)
 800d01a:	6a1a      	ldr	r2, [r3, #32]
 800d01c:	4904      	ldr	r1, [pc, #16]	; (800d030 <LL_EXTI_EnableIT_32_63+0x20>)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4313      	orrs	r3, r2
 800d022:	620b      	str	r3, [r1, #32]
}
 800d024:	bf00      	nop
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	40010400 	.word	0x40010400

0800d034 <LL_EXTI_DisableIT_0_31>:
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d03c:	4b06      	ldr	r3, [pc, #24]	; (800d058 <LL_EXTI_DisableIT_0_31+0x24>)
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	43db      	mvns	r3, r3
 800d044:	4904      	ldr	r1, [pc, #16]	; (800d058 <LL_EXTI_DisableIT_0_31+0x24>)
 800d046:	4013      	ands	r3, r2
 800d048:	600b      	str	r3, [r1, #0]
}
 800d04a:	bf00      	nop
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	40010400 	.word	0x40010400

0800d05c <LL_EXTI_DisableIT_32_63>:
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d064:	4b06      	ldr	r3, [pc, #24]	; (800d080 <LL_EXTI_DisableIT_32_63+0x24>)
 800d066:	6a1a      	ldr	r2, [r3, #32]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	43db      	mvns	r3, r3
 800d06c:	4904      	ldr	r1, [pc, #16]	; (800d080 <LL_EXTI_DisableIT_32_63+0x24>)
 800d06e:	4013      	ands	r3, r2
 800d070:	620b      	str	r3, [r1, #32]
}
 800d072:	bf00      	nop
 800d074:	370c      	adds	r7, #12
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	40010400 	.word	0x40010400

0800d084 <LL_EXTI_EnableEvent_0_31>:
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d08c:	4b05      	ldr	r3, [pc, #20]	; (800d0a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d08e:	685a      	ldr	r2, [r3, #4]
 800d090:	4904      	ldr	r1, [pc, #16]	; (800d0a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4313      	orrs	r3, r2
 800d096:	604b      	str	r3, [r1, #4]
}
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	40010400 	.word	0x40010400

0800d0a8 <LL_EXTI_EnableEvent_32_63>:
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d0b0:	4b05      	ldr	r3, [pc, #20]	; (800d0c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d0b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0b4:	4904      	ldr	r1, [pc, #16]	; (800d0c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d0bc:	bf00      	nop
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr
 800d0c8:	40010400 	.word	0x40010400

0800d0cc <LL_EXTI_DisableEvent_0_31>:
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d0d4:	4b06      	ldr	r3, [pc, #24]	; (800d0f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d0d6:	685a      	ldr	r2, [r3, #4]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	43db      	mvns	r3, r3
 800d0dc:	4904      	ldr	r1, [pc, #16]	; (800d0f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d0de:	4013      	ands	r3, r2
 800d0e0:	604b      	str	r3, [r1, #4]
}
 800d0e2:	bf00      	nop
 800d0e4:	370c      	adds	r7, #12
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	40010400 	.word	0x40010400

0800d0f4 <LL_EXTI_DisableEvent_32_63>:
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d0fc:	4b06      	ldr	r3, [pc, #24]	; (800d118 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	43db      	mvns	r3, r3
 800d104:	4904      	ldr	r1, [pc, #16]	; (800d118 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d106:	4013      	ands	r3, r2
 800d108:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d10a:	bf00      	nop
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	40010400 	.word	0x40010400

0800d11c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d124:	4b05      	ldr	r3, [pc, #20]	; (800d13c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d126:	689a      	ldr	r2, [r3, #8]
 800d128:	4904      	ldr	r1, [pc, #16]	; (800d13c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4313      	orrs	r3, r2
 800d12e:	608b      	str	r3, [r1, #8]
}
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr
 800d13c:	40010400 	.word	0x40010400

0800d140 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d148:	4b05      	ldr	r3, [pc, #20]	; (800d160 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d14a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d14c:	4904      	ldr	r1, [pc, #16]	; (800d160 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4313      	orrs	r3, r2
 800d152:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d154:	bf00      	nop
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr
 800d160:	40010400 	.word	0x40010400

0800d164 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d16c:	4b06      	ldr	r3, [pc, #24]	; (800d188 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d16e:	689a      	ldr	r2, [r3, #8]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	43db      	mvns	r3, r3
 800d174:	4904      	ldr	r1, [pc, #16]	; (800d188 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d176:	4013      	ands	r3, r2
 800d178:	608b      	str	r3, [r1, #8]
}
 800d17a:	bf00      	nop
 800d17c:	370c      	adds	r7, #12
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	40010400 	.word	0x40010400

0800d18c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d194:	4b06      	ldr	r3, [pc, #24]	; (800d1b0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	43db      	mvns	r3, r3
 800d19c:	4904      	ldr	r1, [pc, #16]	; (800d1b0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d19e:	4013      	ands	r3, r2
 800d1a0:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d1a2:	bf00      	nop
 800d1a4:	370c      	adds	r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	40010400 	.word	0x40010400

0800d1b4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d1bc:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d1be:	68da      	ldr	r2, [r3, #12]
 800d1c0:	4904      	ldr	r1, [pc, #16]	; (800d1d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	60cb      	str	r3, [r1, #12]
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr
 800d1d4:	40010400 	.word	0x40010400

0800d1d8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d1e0:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e4:	4904      	ldr	r1, [pc, #16]	; (800d1f8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d1ec:	bf00      	nop
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	40010400 	.word	0x40010400

0800d1fc <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d204:	4b06      	ldr	r3, [pc, #24]	; (800d220 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d206:	68da      	ldr	r2, [r3, #12]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	43db      	mvns	r3, r3
 800d20c:	4904      	ldr	r1, [pc, #16]	; (800d220 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d20e:	4013      	ands	r3, r2
 800d210:	60cb      	str	r3, [r1, #12]
}
 800d212:	bf00      	nop
 800d214:	370c      	adds	r7, #12
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	40010400 	.word	0x40010400

0800d224 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d22c:	4b06      	ldr	r3, [pc, #24]	; (800d248 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	43db      	mvns	r3, r3
 800d234:	4904      	ldr	r1, [pc, #16]	; (800d248 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d236:	4013      	ands	r3, r2
 800d238:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d23a:	bf00      	nop
 800d23c:	370c      	adds	r7, #12
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	40010400 	.word	0x40010400

0800d24c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d254:	2300      	movs	r3, #0
 800d256:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	7a1b      	ldrb	r3, [r3, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 80c8 	beq.w	800d3f2 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d05d      	beq.n	800d326 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7a5b      	ldrb	r3, [r3, #9]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d00e      	beq.n	800d290 <LL_EXTI_Init+0x44>
 800d272:	2b02      	cmp	r3, #2
 800d274:	d017      	beq.n	800d2a6 <LL_EXTI_Init+0x5a>
 800d276:	2b00      	cmp	r3, #0
 800d278:	d120      	bne.n	800d2bc <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4618      	mov	r0, r3
 800d280:	f7ff ff24 	bl	800d0cc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4618      	mov	r0, r3
 800d28a:	f7ff feaf 	bl	800cfec <LL_EXTI_EnableIT_0_31>
          break;
 800d28e:	e018      	b.n	800d2c2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4618      	mov	r0, r3
 800d296:	f7ff fecd 	bl	800d034 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff fef0 	bl	800d084 <LL_EXTI_EnableEvent_0_31>
          break;
 800d2a4:	e00d      	b.n	800d2c2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff fe9e 	bl	800cfec <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff fee5 	bl	800d084 <LL_EXTI_EnableEvent_0_31>
          break;
 800d2ba:	e002      	b.n	800d2c2 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	60fb      	str	r3, [r7, #12]
          break;
 800d2c0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7a9b      	ldrb	r3, [r3, #10]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d02d      	beq.n	800d326 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	7a9b      	ldrb	r3, [r3, #10]
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d00e      	beq.n	800d2f0 <LL_EXTI_Init+0xa4>
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d017      	beq.n	800d306 <LL_EXTI_Init+0xba>
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d120      	bne.n	800d31c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff ff8c 	bl	800d1fc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff ff17 	bl	800d11c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d2ee:	e01b      	b.n	800d328 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7ff ff35 	bl	800d164 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7ff ff58 	bl	800d1b4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d304:	e010      	b.n	800d328 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7ff ff06 	bl	800d11c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4618      	mov	r0, r3
 800d316:	f7ff ff4d 	bl	800d1b4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d31a:	e005      	b.n	800d328 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f043 0302 	orr.w	r3, r3, #2
 800d322:	60fb      	str	r3, [r7, #12]
            break;
 800d324:	e000      	b.n	800d328 <LL_EXTI_Init+0xdc>
        }
      }
 800d326:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d075      	beq.n	800d41c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7a5b      	ldrb	r3, [r3, #9]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d00e      	beq.n	800d356 <LL_EXTI_Init+0x10a>
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d017      	beq.n	800d36c <LL_EXTI_Init+0x120>
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d120      	bne.n	800d382 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	4618      	mov	r0, r3
 800d346:	f7ff fed5 	bl	800d0f4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	4618      	mov	r0, r3
 800d350:	f7ff fe5e 	bl	800d010 <LL_EXTI_EnableIT_32_63>
          break;
 800d354:	e01a      	b.n	800d38c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7ff fe7e 	bl	800d05c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	4618      	mov	r0, r3
 800d366:	f7ff fe9f 	bl	800d0a8 <LL_EXTI_EnableEvent_32_63>
          break;
 800d36a:	e00f      	b.n	800d38c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	4618      	mov	r0, r3
 800d372:	f7ff fe4d 	bl	800d010 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7ff fe94 	bl	800d0a8 <LL_EXTI_EnableEvent_32_63>
          break;
 800d380:	e004      	b.n	800d38c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f043 0304 	orr.w	r3, r3, #4
 800d388:	60fb      	str	r3, [r7, #12]
          break;
 800d38a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7a9b      	ldrb	r3, [r3, #10]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d043      	beq.n	800d41c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7a9b      	ldrb	r3, [r3, #10]
 800d398:	2b02      	cmp	r3, #2
 800d39a:	d00e      	beq.n	800d3ba <LL_EXTI_Init+0x16e>
 800d39c:	2b03      	cmp	r3, #3
 800d39e:	d017      	beq.n	800d3d0 <LL_EXTI_Init+0x184>
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d120      	bne.n	800d3e6 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff ff3b 	bl	800d224 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff fec4 	bl	800d140 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d3b8:	e031      	b.n	800d41e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7ff fee4 	bl	800d18c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff ff05 	bl	800d1d8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d3ce:	e026      	b.n	800d41e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7ff feb3 	bl	800d140 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7ff fefa 	bl	800d1d8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d3e4:	e01b      	b.n	800d41e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f043 0305 	orr.w	r3, r3, #5
 800d3ec:	60fb      	str	r3, [r7, #12]
            break;
 800d3ee:	bf00      	nop
 800d3f0:	e015      	b.n	800d41e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7ff fe1c 	bl	800d034 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4618      	mov	r0, r3
 800d402:	f7ff fe63 	bl	800d0cc <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7ff fe26 	bl	800d05c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff fe6d 	bl	800d0f4 <LL_EXTI_DisableEvent_32_63>
 800d41a:	e000      	b.n	800d41e <LL_EXTI_Init+0x1d2>
      }
 800d41c:	bf00      	nop
  }

  return status;
 800d41e:	68fb      	ldr	r3, [r7, #12]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <LL_GPIO_SetPinMode>:
{
 800d428:	b480      	push	{r7}
 800d42a:	b089      	sub	sp, #36	; 0x24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	fa93 f3a3 	rbit	r3, r3
 800d442:	613b      	str	r3, [r7, #16]
  return result;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	fab3 f383 	clz	r3, r3
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	2103      	movs	r1, #3
 800d450:	fa01 f303 	lsl.w	r3, r1, r3
 800d454:	43db      	mvns	r3, r3
 800d456:	401a      	ands	r2, r3
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	fa93 f3a3 	rbit	r3, r3
 800d462:	61bb      	str	r3, [r7, #24]
  return result;
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	fab3 f383 	clz	r3, r3
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	fa01 f303 	lsl.w	r3, r1, r3
 800d474:	431a      	orrs	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	601a      	str	r2, [r3, #0]
}
 800d47a:	bf00      	nop
 800d47c:	3724      	adds	r7, #36	; 0x24
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <LL_GPIO_SetPinOutputType>:
{
 800d486:	b480      	push	{r7}
 800d488:	b085      	sub	sp, #20
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	60f8      	str	r0, [r7, #12]
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	685a      	ldr	r2, [r3, #4]
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	43db      	mvns	r3, r3
 800d49a:	401a      	ands	r2, r3
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	6879      	ldr	r1, [r7, #4]
 800d4a0:	fb01 f303 	mul.w	r3, r1, r3
 800d4a4:	431a      	orrs	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	605a      	str	r2, [r3, #4]
}
 800d4aa:	bf00      	nop
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <LL_GPIO_SetPinSpeed>:
{
 800d4b6:	b480      	push	{r7}
 800d4b8:	b089      	sub	sp, #36	; 0x24
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	60f8      	str	r0, [r7, #12]
 800d4be:	60b9      	str	r1, [r7, #8]
 800d4c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	689a      	ldr	r2, [r3, #8]
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	fa93 f3a3 	rbit	r3, r3
 800d4d0:	613b      	str	r3, [r7, #16]
  return result;
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	fab3 f383 	clz	r3, r3
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	005b      	lsls	r3, r3, #1
 800d4dc:	2103      	movs	r1, #3
 800d4de:	fa01 f303 	lsl.w	r3, r1, r3
 800d4e2:	43db      	mvns	r3, r3
 800d4e4:	401a      	ands	r2, r3
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	fa93 f3a3 	rbit	r3, r3
 800d4f0:	61bb      	str	r3, [r7, #24]
  return result;
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	fab3 f383 	clz	r3, r3
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	6879      	ldr	r1, [r7, #4]
 800d4fe:	fa01 f303 	lsl.w	r3, r1, r3
 800d502:	431a      	orrs	r2, r3
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	609a      	str	r2, [r3, #8]
}
 800d508:	bf00      	nop
 800d50a:	3724      	adds	r7, #36	; 0x24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <LL_GPIO_SetPinPull>:
{
 800d514:	b480      	push	{r7}
 800d516:	b089      	sub	sp, #36	; 0x24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	68da      	ldr	r2, [r3, #12]
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	fa93 f3a3 	rbit	r3, r3
 800d52e:	613b      	str	r3, [r7, #16]
  return result;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	fab3 f383 	clz	r3, r3
 800d536:	b2db      	uxtb	r3, r3
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	2103      	movs	r1, #3
 800d53c:	fa01 f303 	lsl.w	r3, r1, r3
 800d540:	43db      	mvns	r3, r3
 800d542:	401a      	ands	r2, r3
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	fa93 f3a3 	rbit	r3, r3
 800d54e:	61bb      	str	r3, [r7, #24]
  return result;
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	fab3 f383 	clz	r3, r3
 800d556:	b2db      	uxtb	r3, r3
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	fa01 f303 	lsl.w	r3, r1, r3
 800d560:	431a      	orrs	r2, r3
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	60da      	str	r2, [r3, #12]
}
 800d566:	bf00      	nop
 800d568:	3724      	adds	r7, #36	; 0x24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <LL_GPIO_SetAFPin_0_7>:
{
 800d572:	b480      	push	{r7}
 800d574:	b089      	sub	sp, #36	; 0x24
 800d576:	af00      	add	r7, sp, #0
 800d578:	60f8      	str	r0, [r7, #12]
 800d57a:	60b9      	str	r1, [r7, #8]
 800d57c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6a1a      	ldr	r2, [r3, #32]
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	fa93 f3a3 	rbit	r3, r3
 800d58c:	613b      	str	r3, [r7, #16]
  return result;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	fab3 f383 	clz	r3, r3
 800d594:	b2db      	uxtb	r3, r3
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	210f      	movs	r1, #15
 800d59a:	fa01 f303 	lsl.w	r3, r1, r3
 800d59e:	43db      	mvns	r3, r3
 800d5a0:	401a      	ands	r2, r3
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	fa93 f3a3 	rbit	r3, r3
 800d5ac:	61bb      	str	r3, [r7, #24]
  return result;
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	fab3 f383 	clz	r3, r3
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800d5be:	431a      	orrs	r2, r3
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	621a      	str	r2, [r3, #32]
}
 800d5c4:	bf00      	nop
 800d5c6:	3724      	adds	r7, #36	; 0x24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <LL_GPIO_SetAFPin_8_15>:
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b089      	sub	sp, #36	; 0x24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	0a1b      	lsrs	r3, r3, #8
 800d5e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	fa93 f3a3 	rbit	r3, r3
 800d5ec:	613b      	str	r3, [r7, #16]
  return result;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	fab3 f383 	clz	r3, r3
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	210f      	movs	r1, #15
 800d5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d5fe:	43db      	mvns	r3, r3
 800d600:	401a      	ands	r2, r3
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	0a1b      	lsrs	r3, r3, #8
 800d606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	fa93 f3a3 	rbit	r3, r3
 800d60e:	61bb      	str	r3, [r7, #24]
  return result;
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	fab3 f383 	clz	r3, r3
 800d616:	b2db      	uxtb	r3, r3
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	6879      	ldr	r1, [r7, #4]
 800d61c:	fa01 f303 	lsl.w	r3, r1, r3
 800d620:	431a      	orrs	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d626:	bf00      	nop
 800d628:	3724      	adds	r7, #36	; 0x24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b086      	sub	sp, #24
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	fa93 f3a3 	rbit	r3, r3
 800d648:	60bb      	str	r3, [r7, #8]
  return result;
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	fab3 f383 	clz	r3, r3
 800d650:	b2db      	uxtb	r3, r3
 800d652:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d654:	e040      	b.n	800d6d8 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	2101      	movs	r1, #1
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	fa01 f303 	lsl.w	r3, r1, r3
 800d662:	4013      	ands	r3, r2
 800d664:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d032      	beq.n	800d6d2 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	461a      	mov	r2, r3
 800d672:	6939      	ldr	r1, [r7, #16]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f7ff fed7 	bl	800d428 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d003      	beq.n	800d68a <LL_GPIO_Init+0x58>
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	2b02      	cmp	r3, #2
 800d688:	d106      	bne.n	800d698 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	461a      	mov	r2, r3
 800d690:	6939      	ldr	r1, [r7, #16]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff ff0f 	bl	800d4b6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	461a      	mov	r2, r3
 800d69e:	6939      	ldr	r1, [r7, #16]
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff ff37 	bl	800d514 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d111      	bne.n	800d6d2 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2bff      	cmp	r3, #255	; 0xff
 800d6b2:	d807      	bhi.n	800d6c4 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	695b      	ldr	r3, [r3, #20]
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	6939      	ldr	r1, [r7, #16]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff ff58 	bl	800d572 <LL_GPIO_SetAFPin_0_7>
 800d6c2:	e006      	b.n	800d6d2 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	695b      	ldr	r3, [r3, #20]
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	6939      	ldr	r1, [r7, #16]
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f7ff ff7f 	bl	800d5d0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	fa22 f303 	lsr.w	r3, r2, r3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1b7      	bne.n	800d656 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d003      	beq.n	800d6f6 <LL_GPIO_Init+0xc4>
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	2b02      	cmp	r3, #2
 800d6f4:	d107      	bne.n	800d706 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	6819      	ldr	r1, [r3, #0]
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	461a      	mov	r2, r3
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7ff fec0 	bl	800d486 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800d706:	2300      	movs	r3, #0
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800d710:	b590      	push	{r4, r7, lr}
 800d712:	b087      	sub	sp, #28
 800d714:	af02      	add	r7, sp, #8
 800d716:	4604      	mov	r4, r0
 800d718:	4608      	mov	r0, r1
 800d71a:	4611      	mov	r1, r2
 800d71c:	461a      	mov	r2, r3
 800d71e:	4623      	mov	r3, r4
 800d720:	80fb      	strh	r3, [r7, #6]
 800d722:	4603      	mov	r3, r0
 800d724:	80bb      	strh	r3, [r7, #4]
 800d726:	460b      	mov	r3, r1
 800d728:	807b      	strh	r3, [r7, #2]
 800d72a:	4613      	mov	r3, r2
 800d72c:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800d72e:	2300      	movs	r3, #0
 800d730:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800d732:	7bfa      	ldrb	r2, [r7, #15]
 800d734:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d738:	429a      	cmp	r2, r3
 800d73a:	d93a      	bls.n	800d7b2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800d73c:	88ba      	ldrh	r2, [r7, #4]
 800d73e:	7bfb      	ldrb	r3, [r7, #15]
 800d740:	441a      	add	r2, r3
 800d742:	88b9      	ldrh	r1, [r7, #4]
 800d744:	883b      	ldrh	r3, [r7, #0]
 800d746:	4419      	add	r1, r3
 800d748:	7bfb      	ldrb	r3, [r7, #15]
 800d74a:	1acb      	subs	r3, r1, r3
 800d74c:	429a      	cmp	r2, r3
 800d74e:	f000 8090 	beq.w	800d872 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800d752:	88fa      	ldrh	r2, [r7, #6]
 800d754:	7bfb      	ldrb	r3, [r7, #15]
 800d756:	441a      	add	r2, r3
 800d758:	88f9      	ldrh	r1, [r7, #6]
 800d75a:	887b      	ldrh	r3, [r7, #2]
 800d75c:	4419      	add	r1, r3
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
 800d760:	1acb      	subs	r3, r1, r3
 800d762:	429a      	cmp	r2, r3
 800d764:	f000 8085 	beq.w	800d872 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800d768:	7bfb      	ldrb	r3, [r7, #15]
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	88fb      	ldrh	r3, [r7, #6]
 800d76e:	4413      	add	r3, r2
 800d770:	b298      	uxth	r0, r3
 800d772:	7bfb      	ldrb	r3, [r7, #15]
 800d774:	b29a      	uxth	r2, r3
 800d776:	88bb      	ldrh	r3, [r7, #4]
 800d778:	4413      	add	r3, r2
 800d77a:	b299      	uxth	r1, r3
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	005b      	lsls	r3, r3, #1
 800d782:	b29b      	uxth	r3, r3
 800d784:	887a      	ldrh	r2, [r7, #2]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	b29b      	uxth	r3, r3
 800d78a:	3301      	adds	r3, #1
 800d78c:	b29c      	uxth	r4, r3
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
 800d790:	b29b      	uxth	r3, r3
 800d792:	005b      	lsls	r3, r3, #1
 800d794:	b29b      	uxth	r3, r3
 800d796:	883a      	ldrh	r2, [r7, #0]
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	3301      	adds	r3, #1
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	2304      	movs	r3, #4
 800d7a2:	9301      	str	r3, [sp, #4]
 800d7a4:	8c3b      	ldrh	r3, [r7, #32]
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	f000 fcd6 	bl	800e15c <ILI9341_Draw_Rectangle>
				goto finish;
 800d7b0:	e060      	b.n	800d874 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	88fb      	ldrh	r3, [r7, #6]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	b298      	uxth	r0, r3
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	88bb      	ldrh	r3, [r7, #4]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	b299      	uxth	r1, r3
 800d7c6:	7bfb      	ldrb	r3, [r7, #15]
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	005b      	lsls	r3, r3, #1
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	887a      	ldrh	r2, [r7, #2]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	f000 fa81 	bl	800dce0 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800d7de:	7bfb      	ldrb	r3, [r7, #15]
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	88fb      	ldrh	r3, [r7, #6]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	b298      	uxth	r0, r3
										(y + h) - b,
 800d7e8:	88ba      	ldrh	r2, [r7, #4]
 800d7ea:	883b      	ldrh	r3, [r7, #0]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	b299      	uxth	r1, r3
 800d7f8:	7bfb      	ldrb	r3, [r7, #15]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	887a      	ldrh	r2, [r7, #2]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	b29a      	uxth	r2, r3
 800d802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d806:	b29b      	uxth	r3, r3
 800d808:	f000 fa6a 	bl	800dce0 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800d80c:	7bfb      	ldrb	r3, [r7, #15]
 800d80e:	b29a      	uxth	r2, r3
 800d810:	88fb      	ldrh	r3, [r7, #6]
 800d812:	4413      	add	r3, r2
 800d814:	b298      	uxth	r0, r3
 800d816:	7bfb      	ldrb	r3, [r7, #15]
 800d818:	b29a      	uxth	r2, r3
 800d81a:	88bb      	ldrh	r3, [r7, #4]
 800d81c:	4413      	add	r3, r2
 800d81e:	b299      	uxth	r1, r3
 800d820:	7bfb      	ldrb	r3, [r7, #15]
 800d822:	b29b      	uxth	r3, r3
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	b29b      	uxth	r3, r3
 800d828:	883a      	ldrh	r2, [r7, #0]
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d832:	b29b      	uxth	r3, r3
 800d834:	f000 fa9c 	bl	800dd70 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800d838:	88fa      	ldrh	r2, [r7, #6]
 800d83a:	887b      	ldrh	r3, [r7, #2]
 800d83c:	4413      	add	r3, r2
 800d83e:	b29a      	uxth	r2, r3
 800d840:	7bfb      	ldrb	r3, [r7, #15]
 800d842:	b29b      	uxth	r3, r3
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	b298      	uxth	r0, r3
 800d848:	7bfb      	ldrb	r3, [r7, #15]
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	88bb      	ldrh	r3, [r7, #4]
 800d84e:	4413      	add	r3, r2
 800d850:	b299      	uxth	r1, r3
 800d852:	7bfb      	ldrb	r3, [r7, #15]
 800d854:	b29b      	uxth	r3, r3
 800d856:	005b      	lsls	r3, r3, #1
 800d858:	b29b      	uxth	r3, r3
 800d85a:	883a      	ldrh	r2, [r7, #0]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	b29a      	uxth	r2, r3
 800d860:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d864:	b29b      	uxth	r3, r3
 800d866:	f000 fa83 	bl	800dd70 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800d86a:	7bfb      	ldrb	r3, [r7, #15]
 800d86c:	3301      	adds	r3, #1
 800d86e:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800d870:	e75f      	b.n	800d732 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800d872:	bf00      	nop
	// done
	return;
 800d874:	bf00      	nop
}
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd90      	pop	{r4, r7, pc}

0800d87c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d87c:	b590      	push	{r4, r7, lr}
 800d87e:	b089      	sub	sp, #36	; 0x24
 800d880:	af02      	add	r7, sp, #8
 800d882:	4604      	mov	r4, r0
 800d884:	4608      	mov	r0, r1
 800d886:	4611      	mov	r1, r2
 800d888:	461a      	mov	r2, r3
 800d88a:	4623      	mov	r3, r4
 800d88c:	71fb      	strb	r3, [r7, #7]
 800d88e:	4603      	mov	r3, r0
 800d890:	80bb      	strh	r3, [r7, #4]
 800d892:	460b      	mov	r3, r1
 800d894:	807b      	strh	r3, [r7, #2]
 800d896:	4613      	mov	r3, r2
 800d898:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800d89a:	79fb      	ldrb	r3, [r7, #7]
 800d89c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800d89e:	7dfb      	ldrb	r3, [r7, #23]
 800d8a0:	2b1f      	cmp	r3, #31
 800d8a2:	d802      	bhi.n	800d8aa <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	71fb      	strb	r3, [r7, #7]
 800d8a8:	e002      	b.n	800d8b0 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800d8aa:	7dfb      	ldrb	r3, [r7, #23]
 800d8ac:	3b20      	subs	r3, #32
 800d8ae:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	753b      	strb	r3, [r7, #20]
 800d8b4:	e012      	b.n	800d8dc <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800d8b6:	7dfa      	ldrb	r2, [r7, #23]
 800d8b8:	7d38      	ldrb	r0, [r7, #20]
 800d8ba:	7d39      	ldrb	r1, [r7, #20]
 800d8bc:	4c48      	ldr	r4, [pc, #288]	; (800d9e0 <ILI9341_Draw_Char+0x164>)
 800d8be:	4613      	mov	r3, r2
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	4413      	add	r3, r2
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	4423      	add	r3, r4
 800d8c8:	4403      	add	r3, r0
 800d8ca:	781a      	ldrb	r2, [r3, #0]
 800d8cc:	f107 0318 	add.w	r3, r7, #24
 800d8d0:	440b      	add	r3, r1
 800d8d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d8d6:	7d3b      	ldrb	r3, [r7, #20]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	753b      	strb	r3, [r7, #20]
 800d8dc:	7d3b      	ldrb	r3, [r7, #20]
 800d8de:	2b05      	cmp	r3, #5
 800d8e0:	d9e9      	bls.n	800d8b6 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	757b      	strb	r3, [r7, #21]
 800d8e6:	e074      	b.n	800d9d2 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	75bb      	strb	r3, [r7, #22]
 800d8ec:	e06b      	b.n	800d9c6 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800d8ee:	7d7b      	ldrb	r3, [r7, #21]
 800d8f0:	f107 0218 	add.w	r2, r7, #24
 800d8f4:	4413      	add	r3, r2
 800d8f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	7dbb      	ldrb	r3, [r7, #22]
 800d8fe:	fa42 f303 	asr.w	r3, r2, r3
 800d902:	f003 0301 	and.w	r3, r3, #1
 800d906:	2b00      	cmp	r3, #0
 800d908:	d02d      	beq.n	800d966 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800d90a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d10e      	bne.n	800d92e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800d910:	7d7b      	ldrb	r3, [r7, #21]
 800d912:	b29a      	uxth	r2, r3
 800d914:	88bb      	ldrh	r3, [r7, #4]
 800d916:	4413      	add	r3, r2
 800d918:	b298      	uxth	r0, r3
 800d91a:	7dbb      	ldrb	r3, [r7, #22]
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	887b      	ldrh	r3, [r7, #2]
 800d920:	4413      	add	r3, r2
 800d922:	b29b      	uxth	r3, r3
 800d924:	883a      	ldrh	r2, [r7, #0]
 800d926:	4619      	mov	r1, r3
 800d928:	f000 fae0 	bl	800deec <ILI9341_Draw_Pixel>
 800d92c:	e048      	b.n	800d9c0 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800d92e:	7d7b      	ldrb	r3, [r7, #21]
 800d930:	b29b      	uxth	r3, r3
 800d932:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d934:	fb12 f303 	smulbb	r3, r2, r3
 800d938:	b29a      	uxth	r2, r3
 800d93a:	88bb      	ldrh	r3, [r7, #4]
 800d93c:	4413      	add	r3, r2
 800d93e:	b298      	uxth	r0, r3
 800d940:	7dbb      	ldrb	r3, [r7, #22]
 800d942:	b29b      	uxth	r3, r3
 800d944:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d946:	fb12 f303 	smulbb	r3, r2, r3
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	887b      	ldrh	r3, [r7, #2]
 800d94e:	4413      	add	r3, r2
 800d950:	b299      	uxth	r1, r3
 800d952:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d954:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d956:	2301      	movs	r3, #1
 800d958:	9301      	str	r3, [sp, #4]
 800d95a:	883b      	ldrh	r3, [r7, #0]
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	4623      	mov	r3, r4
 800d960:	f000 fbfc 	bl	800e15c <ILI9341_Draw_Rectangle>
 800d964:	e02c      	b.n	800d9c0 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800d966:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d10e      	bne.n	800d98a <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800d96c:	7d7b      	ldrb	r3, [r7, #21]
 800d96e:	b29a      	uxth	r2, r3
 800d970:	88bb      	ldrh	r3, [r7, #4]
 800d972:	4413      	add	r3, r2
 800d974:	b298      	uxth	r0, r3
 800d976:	7dbb      	ldrb	r3, [r7, #22]
 800d978:	b29a      	uxth	r2, r3
 800d97a:	887b      	ldrh	r3, [r7, #2]
 800d97c:	4413      	add	r3, r2
 800d97e:	b29b      	uxth	r3, r3
 800d980:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d982:	4619      	mov	r1, r3
 800d984:	f000 fab2 	bl	800deec <ILI9341_Draw_Pixel>
 800d988:	e01a      	b.n	800d9c0 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800d98a:	7d7b      	ldrb	r3, [r7, #21]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d990:	fb12 f303 	smulbb	r3, r2, r3
 800d994:	b29a      	uxth	r2, r3
 800d996:	88bb      	ldrh	r3, [r7, #4]
 800d998:	4413      	add	r3, r2
 800d99a:	b298      	uxth	r0, r3
 800d99c:	7dbb      	ldrb	r3, [r7, #22]
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d9a2:	fb12 f303 	smulbb	r3, r2, r3
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	887b      	ldrh	r3, [r7, #2]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	b299      	uxth	r1, r3
 800d9ae:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d9b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	9301      	str	r3, [sp, #4]
 800d9b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d9b8:	9300      	str	r3, [sp, #0]
 800d9ba:	4623      	mov	r3, r4
 800d9bc:	f000 fbce 	bl	800e15c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800d9c0:	7dbb      	ldrb	r3, [r7, #22]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	75bb      	strb	r3, [r7, #22]
 800d9c6:	7dbb      	ldrb	r3, [r7, #22]
 800d9c8:	2b07      	cmp	r3, #7
 800d9ca:	d990      	bls.n	800d8ee <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800d9cc:	7d7b      	ldrb	r3, [r7, #21]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	757b      	strb	r3, [r7, #21]
 800d9d2:	7d7b      	ldrb	r3, [r7, #21]
 800d9d4:	2b05      	cmp	r3, #5
 800d9d6:	d987      	bls.n	800d8e8 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800d9d8:	bf00      	nop
 800d9da:	371c      	adds	r7, #28
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd90      	pop	{r4, r7, pc}
 800d9e0:	080122e8 	.word	0x080122e8

0800d9e4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d9e4:	b590      	push	{r4, r7, lr}
 800d9e6:	b087      	sub	sp, #28
 800d9e8:	af02      	add	r7, sp, #8
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	4608      	mov	r0, r1
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	817b      	strh	r3, [r7, #10]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	813b      	strh	r3, [r7, #8]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800d9fe:	e016      	b.n	800da2e <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	60fa      	str	r2, [r7, #12]
 800da06:	7818      	ldrb	r0, [r3, #0]
 800da08:	88fc      	ldrh	r4, [r7, #6]
 800da0a:	893a      	ldrh	r2, [r7, #8]
 800da0c:	8979      	ldrh	r1, [r7, #10]
 800da0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da10:	9301      	str	r3, [sp, #4]
 800da12:	8c3b      	ldrh	r3, [r7, #32]
 800da14:	9300      	str	r3, [sp, #0]
 800da16:	4623      	mov	r3, r4
 800da18:	f7ff ff30 	bl	800d87c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800da1c:	8c3b      	ldrh	r3, [r7, #32]
 800da1e:	461a      	mov	r2, r3
 800da20:	0052      	lsls	r2, r2, #1
 800da22:	4413      	add	r3, r2
 800da24:	005b      	lsls	r3, r3, #1
 800da26:	b29a      	uxth	r2, r3
 800da28:	897b      	ldrh	r3, [r7, #10]
 800da2a:	4413      	add	r3, r2
 800da2c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1e4      	bne.n	800da00 <ILI9341_Draw_Text+0x1c>
    }


}
 800da36:	bf00      	nop
 800da38:	3714      	adds	r7, #20
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd90      	pop	{r4, r7, pc}
	...

0800da40 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800da46:	2300      	movs	r3, #0
 800da48:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800da4a:	2300      	movs	r3, #0
 800da4c:	80fb      	strh	r3, [r7, #6]
 800da4e:	e010      	b.n	800da72 <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800da50:	88fb      	ldrh	r3, [r7, #6]
 800da52:	4a0c      	ldr	r2, [pc, #48]	; (800da84 <ILI9341_FillScreenGradient+0x44>)
 800da54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da58:	b29b      	uxth	r3, r3
 800da5a:	88b9      	ldrh	r1, [r7, #4]
 800da5c:	88f8      	ldrh	r0, [r7, #6]
 800da5e:	2204      	movs	r2, #4
 800da60:	9201      	str	r2, [sp, #4]
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	23f0      	movs	r3, #240	; 0xf0
 800da66:	2201      	movs	r2, #1
 800da68:	f000 fb78 	bl	800e15c <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800da6c:	88fb      	ldrh	r3, [r7, #6]
 800da6e:	3301      	adds	r3, #1
 800da70:	80fb      	strh	r3, [r7, #6]
 800da72:	88fb      	ldrh	r3, [r7, #6]
 800da74:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800da78:	d9ea      	bls.n	800da50 <ILI9341_FillScreenGradient+0x10>

	}
}
 800da7a:	bf00      	nop
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	20000cbc 	.word	0x20000cbc

0800da88 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800da8c:	f000 fc3a 	bl	800e304 <_LCD_Enable>
	ILI9341_SPI_Init();
 800da90:	f000 f908 	bl	800dca4 <ILI9341_SPI_Init>
	_LCD_Reset();
 800da94:	f000 fc46 	bl	800e324 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800da98:	2001      	movs	r0, #1
 800da9a:	f000 fd11 	bl	800e4c0 <_LCD_SendCommand>
	HAL_Delay(2000);
 800da9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800daa2:	f7fa fdf7 	bl	8008694 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800daa6:	20cb      	movs	r0, #203	; 0xcb
 800daa8:	f000 fd0a 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800daac:	2039      	movs	r0, #57	; 0x39
 800daae:	f000 fd39 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800dab2:	202c      	movs	r0, #44	; 0x2c
 800dab4:	f000 fd36 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dab8:	2000      	movs	r0, #0
 800daba:	f000 fd33 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x34);
 800dabe:	2034      	movs	r0, #52	; 0x34
 800dac0:	f000 fd30 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x02);
 800dac4:	2002      	movs	r0, #2
 800dac6:	f000 fd2d 	bl	800e524 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800daca:	20cf      	movs	r0, #207	; 0xcf
 800dacc:	f000 fcf8 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dad0:	2000      	movs	r0, #0
 800dad2:	f000 fd27 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800dad6:	20c1      	movs	r0, #193	; 0xc1
 800dad8:	f000 fd24 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x30);
 800dadc:	2030      	movs	r0, #48	; 0x30
 800dade:	f000 fd21 	bl	800e524 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800dae2:	20e8      	movs	r0, #232	; 0xe8
 800dae4:	f000 fcec 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800dae8:	2085      	movs	r0, #133	; 0x85
 800daea:	f000 fd1b 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x00);
 800daee:	2000      	movs	r0, #0
 800daf0:	f000 fd18 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x78);
 800daf4:	2078      	movs	r0, #120	; 0x78
 800daf6:	f000 fd15 	bl	800e524 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800dafa:	20ea      	movs	r0, #234	; 0xea
 800dafc:	f000 fce0 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800db00:	2000      	movs	r0, #0
 800db02:	f000 fd0f 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x00);
 800db06:	2000      	movs	r0, #0
 800db08:	f000 fd0c 	bl	800e524 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800db0c:	20ed      	movs	r0, #237	; 0xed
 800db0e:	f000 fcd7 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800db12:	2064      	movs	r0, #100	; 0x64
 800db14:	f000 fd06 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x03);
 800db18:	2003      	movs	r0, #3
 800db1a:	f000 fd03 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x12);
 800db1e:	2012      	movs	r0, #18
 800db20:	f000 fd00 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x81);
 800db24:	2081      	movs	r0, #129	; 0x81
 800db26:	f000 fcfd 	bl	800e524 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800db2a:	20f7      	movs	r0, #247	; 0xf7
 800db2c:	f000 fcc8 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800db30:	2020      	movs	r0, #32
 800db32:	f000 fcf7 	bl	800e524 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800db36:	20c0      	movs	r0, #192	; 0xc0
 800db38:	f000 fcc2 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800db3c:	2023      	movs	r0, #35	; 0x23
 800db3e:	f000 fcf1 	bl	800e524 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800db42:	20c1      	movs	r0, #193	; 0xc1
 800db44:	f000 fcbc 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800db48:	2010      	movs	r0, #16
 800db4a:	f000 fceb 	bl	800e524 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800db4e:	20c5      	movs	r0, #197	; 0xc5
 800db50:	f000 fcb6 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800db54:	203e      	movs	r0, #62	; 0x3e
 800db56:	f000 fce5 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x28);
 800db5a:	2028      	movs	r0, #40	; 0x28
 800db5c:	f000 fce2 	bl	800e524 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800db60:	20c7      	movs	r0, #199	; 0xc7
 800db62:	f000 fcad 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800db66:	2086      	movs	r0, #134	; 0x86
 800db68:	f000 fcdc 	bl	800e524 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800db6c:	2036      	movs	r0, #54	; 0x36
 800db6e:	f000 fca7 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800db72:	2048      	movs	r0, #72	; 0x48
 800db74:	f000 fcd6 	bl	800e524 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800db78:	203a      	movs	r0, #58	; 0x3a
 800db7a:	f000 fca1 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800db7e:	2055      	movs	r0, #85	; 0x55
 800db80:	f000 fcd0 	bl	800e524 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800db84:	20b1      	movs	r0, #177	; 0xb1
 800db86:	f000 fc9b 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800db8a:	2000      	movs	r0, #0
 800db8c:	f000 fcca 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x18);
 800db90:	2018      	movs	r0, #24
 800db92:	f000 fcc7 	bl	800e524 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800db96:	20b6      	movs	r0, #182	; 0xb6
 800db98:	f000 fc92 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800db9c:	2008      	movs	r0, #8
 800db9e:	f000 fcc1 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x82);
 800dba2:	2082      	movs	r0, #130	; 0x82
 800dba4:	f000 fcbe 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x27);
 800dba8:	2027      	movs	r0, #39	; 0x27
 800dbaa:	f000 fcbb 	bl	800e524 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800dbae:	20f2      	movs	r0, #242	; 0xf2
 800dbb0:	f000 fc86 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	f000 fcb5 	bl	800e524 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800dbba:	2026      	movs	r0, #38	; 0x26
 800dbbc:	f000 fc80 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800dbc0:	2001      	movs	r0, #1
 800dbc2:	f000 fcaf 	bl	800e524 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800dbc6:	20e0      	movs	r0, #224	; 0xe0
 800dbc8:	f000 fc7a 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800dbcc:	200f      	movs	r0, #15
 800dbce:	f000 fca9 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x31);
 800dbd2:	2031      	movs	r0, #49	; 0x31
 800dbd4:	f000 fca6 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800dbd8:	202b      	movs	r0, #43	; 0x2b
 800dbda:	f000 fca3 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800dbde:	200c      	movs	r0, #12
 800dbe0:	f000 fca0 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dbe4:	200e      	movs	r0, #14
 800dbe6:	f000 fc9d 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x08);
 800dbea:	2008      	movs	r0, #8
 800dbec:	f000 fc9a 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800dbf0:	204e      	movs	r0, #78	; 0x4e
 800dbf2:	f000 fc97 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800dbf6:	20f1      	movs	r0, #241	; 0xf1
 800dbf8:	f000 fc94 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x37);
 800dbfc:	2037      	movs	r0, #55	; 0x37
 800dbfe:	f000 fc91 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x07);
 800dc02:	2007      	movs	r0, #7
 800dc04:	f000 fc8e 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x10);
 800dc08:	2010      	movs	r0, #16
 800dc0a:	f000 fc8b 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x03);
 800dc0e:	2003      	movs	r0, #3
 800dc10:	f000 fc88 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dc14:	200e      	movs	r0, #14
 800dc16:	f000 fc85 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x09);
 800dc1a:	2009      	movs	r0, #9
 800dc1c:	f000 fc82 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dc20:	2000      	movs	r0, #0
 800dc22:	f000 fc7f 	bl	800e524 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800dc26:	20e1      	movs	r0, #225	; 0xe1
 800dc28:	f000 fc4a 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	f000 fc79 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dc32:	200e      	movs	r0, #14
 800dc34:	f000 fc76 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x14);
 800dc38:	2014      	movs	r0, #20
 800dc3a:	f000 fc73 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x03);
 800dc3e:	2003      	movs	r0, #3
 800dc40:	f000 fc70 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x11);
 800dc44:	2011      	movs	r0, #17
 800dc46:	f000 fc6d 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x07);
 800dc4a:	2007      	movs	r0, #7
 800dc4c:	f000 fc6a 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x31);
 800dc50:	2031      	movs	r0, #49	; 0x31
 800dc52:	f000 fc67 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800dc56:	20c1      	movs	r0, #193	; 0xc1
 800dc58:	f000 fc64 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x48);
 800dc5c:	2048      	movs	r0, #72	; 0x48
 800dc5e:	f000 fc61 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x08);
 800dc62:	2008      	movs	r0, #8
 800dc64:	f000 fc5e 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800dc68:	200f      	movs	r0, #15
 800dc6a:	f000 fc5b 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800dc6e:	200c      	movs	r0, #12
 800dc70:	f000 fc58 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x31);
 800dc74:	2031      	movs	r0, #49	; 0x31
 800dc76:	f000 fc55 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x36);
 800dc7a:	2036      	movs	r0, #54	; 0x36
 800dc7c:	f000 fc52 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800dc80:	200f      	movs	r0, #15
 800dc82:	f000 fc4f 	bl	800e524 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800dc86:	2011      	movs	r0, #17
 800dc88:	f000 fc1a 	bl	800e4c0 <_LCD_SendCommand>
	HAL_Delay(240);
 800dc8c:	20f0      	movs	r0, #240	; 0xf0
 800dc8e:	f7fa fd01 	bl	8008694 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800dc92:	2029      	movs	r0, #41	; 0x29
 800dc94:	f000 fc14 	bl	800e4c0 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800dc98:	2000      	movs	r0, #0
 800dc9a:	f000 fae5 	bl	800e268 <ILI9341_Set_Rotation>
}
 800dc9e:	bf00      	nop
 800dca0:	bd80      	pop	{r7, pc}
	...

0800dca4 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800dca4:	b480      	push	{r7}
 800dca6:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dca8:	4b0b      	ldr	r3, [pc, #44]	; (800dcd8 <ILI9341_SPI_Init+0x34>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcb0:	2b40      	cmp	r3, #64	; 0x40
 800dcb2:	d005      	beq.n	800dcc0 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800dcb4:	4b08      	ldr	r3, [pc, #32]	; (800dcd8 <ILI9341_SPI_Init+0x34>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a07      	ldr	r2, [pc, #28]	; (800dcd8 <ILI9341_SPI_Init+0x34>)
 800dcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcbe:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dcc0:	4b06      	ldr	r3, [pc, #24]	; (800dcdc <ILI9341_SPI_Init+0x38>)
 800dcc2:	695b      	ldr	r3, [r3, #20]
 800dcc4:	4a05      	ldr	r2, [pc, #20]	; (800dcdc <ILI9341_SPI_Init+0x38>)
 800dcc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcca:	6153      	str	r3, [r2, #20]
}
 800dccc:	bf00      	nop
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop
 800dcd8:	40003c00 	.word	0x40003c00
 800dcdc:	48000400 	.word	0x48000400

0800dce0 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800dce0:	b590      	push	{r4, r7, lr}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af02      	add	r7, sp, #8
 800dce6:	4604      	mov	r4, r0
 800dce8:	4608      	mov	r0, r1
 800dcea:	4611      	mov	r1, r2
 800dcec:	461a      	mov	r2, r3
 800dcee:	4623      	mov	r3, r4
 800dcf0:	80fb      	strh	r3, [r7, #6]
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	80bb      	strh	r3, [r7, #4]
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	807b      	strh	r3, [r7, #2]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dcfe:	4b1a      	ldr	r3, [pc, #104]	; (800dd68 <ILI9341_Draw_Horizontal_Line+0x88>)
 800dd00:	881b      	ldrh	r3, [r3, #0]
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	88fa      	ldrh	r2, [r7, #6]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d229      	bcs.n	800dd5e <ILI9341_Draw_Horizontal_Line+0x7e>
 800dd0a:	4b18      	ldr	r3, [pc, #96]	; (800dd6c <ILI9341_Draw_Horizontal_Line+0x8c>)
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	88ba      	ldrh	r2, [r7, #4]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d223      	bcs.n	800dd5e <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800dd16:	88fa      	ldrh	r2, [r7, #6]
 800dd18:	887b      	ldrh	r3, [r7, #2]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	4a12      	ldr	r2, [pc, #72]	; (800dd68 <ILI9341_Draw_Horizontal_Line+0x88>)
 800dd20:	8812      	ldrh	r2, [r2, #0]
 800dd22:	b292      	uxth	r2, r2
 800dd24:	4293      	cmp	r3, r2
 800dd26:	db05      	blt.n	800dd34 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800dd28:	4b0f      	ldr	r3, [pc, #60]	; (800dd68 <ILI9341_Draw_Horizontal_Line+0x88>)
 800dd2a:	881b      	ldrh	r3, [r3, #0]
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800dd34:	88fa      	ldrh	r2, [r7, #6]
 800dd36:	887b      	ldrh	r3, [r7, #2]
 800dd38:	4413      	add	r3, r2
 800dd3a:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	88bb      	ldrh	r3, [r7, #4]
 800dd42:	88b9      	ldrh	r1, [r7, #4]
 800dd44:	88f8      	ldrh	r0, [r7, #6]
 800dd46:	f000 f85b 	bl	800de00 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800dd4a:	887c      	ldrh	r4, [r7, #2]
 800dd4c:	883a      	ldrh	r2, [r7, #0]
 800dd4e:	88b9      	ldrh	r1, [r7, #4]
 800dd50:	88f8      	ldrh	r0, [r7, #6]
 800dd52:	2303      	movs	r3, #3
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	4623      	mov	r3, r4
 800dd58:	f000 fb02 	bl	800e360 <_LCD_Write_Frame>
 800dd5c:	e000      	b.n	800dd60 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dd5e:	bf00      	nop
}
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd90      	pop	{r4, r7, pc}
 800dd66:	bf00      	nop
 800dd68:	20000cb6 	.word	0x20000cb6
 800dd6c:	20000cb4 	.word	0x20000cb4

0800dd70 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800dd70:	b590      	push	{r4, r7, lr}
 800dd72:	b085      	sub	sp, #20
 800dd74:	af02      	add	r7, sp, #8
 800dd76:	4604      	mov	r4, r0
 800dd78:	4608      	mov	r0, r1
 800dd7a:	4611      	mov	r1, r2
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	4623      	mov	r3, r4
 800dd80:	80fb      	strh	r3, [r7, #6]
 800dd82:	4603      	mov	r3, r0
 800dd84:	80bb      	strh	r3, [r7, #4]
 800dd86:	460b      	mov	r3, r1
 800dd88:	807b      	strh	r3, [r7, #2]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800dd8e:	4b1a      	ldr	r3, [pc, #104]	; (800ddf8 <ILI9341_Draw_Vertical_Line+0x88>)
 800dd90:	881b      	ldrh	r3, [r3, #0]
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	88fa      	ldrh	r2, [r7, #6]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d229      	bcs.n	800ddee <ILI9341_Draw_Vertical_Line+0x7e>
 800dd9a:	4b18      	ldr	r3, [pc, #96]	; (800ddfc <ILI9341_Draw_Vertical_Line+0x8c>)
 800dd9c:	881b      	ldrh	r3, [r3, #0]
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	88ba      	ldrh	r2, [r7, #4]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d223      	bcs.n	800ddee <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800dda6:	88ba      	ldrh	r2, [r7, #4]
 800dda8:	887b      	ldrh	r3, [r7, #2]
 800ddaa:	4413      	add	r3, r2
 800ddac:	3b01      	subs	r3, #1
 800ddae:	4a13      	ldr	r2, [pc, #76]	; (800ddfc <ILI9341_Draw_Vertical_Line+0x8c>)
 800ddb0:	8812      	ldrh	r2, [r2, #0]
 800ddb2:	b292      	uxth	r2, r2
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	db05      	blt.n	800ddc4 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800ddb8:	4b10      	ldr	r3, [pc, #64]	; (800ddfc <ILI9341_Draw_Vertical_Line+0x8c>)
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	88bb      	ldrh	r3, [r7, #4]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800ddc4:	88ba      	ldrh	r2, [r7, #4]
 800ddc6:	887b      	ldrh	r3, [r7, #2]
 800ddc8:	4413      	add	r3, r2
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	88fa      	ldrh	r2, [r7, #6]
 800ddd2:	88b9      	ldrh	r1, [r7, #4]
 800ddd4:	88f8      	ldrh	r0, [r7, #6]
 800ddd6:	f000 f813 	bl	800de00 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800ddda:	887c      	ldrh	r4, [r7, #2]
 800dddc:	883a      	ldrh	r2, [r7, #0]
 800ddde:	88b9      	ldrh	r1, [r7, #4]
 800dde0:	88f8      	ldrh	r0, [r7, #6]
 800dde2:	2303      	movs	r3, #3
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	4623      	mov	r3, r4
 800dde8:	f000 faba 	bl	800e360 <_LCD_Write_Frame>
 800ddec:	e000      	b.n	800ddf0 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800ddee:	bf00      	nop
}
 800ddf0:	370c      	adds	r7, #12
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd90      	pop	{r4, r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20000cb6 	.word	0x20000cb6
 800ddfc:	20000cb4 	.word	0x20000cb4

0800de00 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800de00:	b590      	push	{r4, r7, lr}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	4604      	mov	r4, r0
 800de08:	4608      	mov	r0, r1
 800de0a:	4611      	mov	r1, r2
 800de0c:	461a      	mov	r2, r3
 800de0e:	4623      	mov	r3, r4
 800de10:	80fb      	strh	r3, [r7, #6]
 800de12:	4603      	mov	r3, r0
 800de14:	80bb      	strh	r3, [r7, #4]
 800de16:	460b      	mov	r3, r1
 800de18:	807b      	strh	r3, [r7, #2]
 800de1a:	4613      	mov	r3, r2
 800de1c:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800de1e:	202a      	movs	r0, #42	; 0x2a
 800de20:	f000 fb4e 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800de24:	88fb      	ldrh	r3, [r7, #6]
 800de26:	0a1b      	lsrs	r3, r3, #8
 800de28:	b29b      	uxth	r3, r3
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	4618      	mov	r0, r3
 800de2e:	f000 fb79 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(sc);
 800de32:	88fb      	ldrh	r3, [r7, #6]
 800de34:	b2db      	uxtb	r3, r3
 800de36:	4618      	mov	r0, r3
 800de38:	f000 fb74 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800de3c:	887b      	ldrh	r3, [r7, #2]
 800de3e:	0a1b      	lsrs	r3, r3, #8
 800de40:	b29b      	uxth	r3, r3
 800de42:	b2db      	uxtb	r3, r3
 800de44:	4618      	mov	r0, r3
 800de46:	f000 fb6d 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(ec);
 800de4a:	887b      	ldrh	r3, [r7, #2]
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	4618      	mov	r0, r3
 800de50:	f000 fb68 	bl	800e524 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800de54:	202b      	movs	r0, #43	; 0x2b
 800de56:	f000 fb33 	bl	800e4c0 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800de5a:	88bb      	ldrh	r3, [r7, #4]
 800de5c:	0a1b      	lsrs	r3, r3, #8
 800de5e:	b29b      	uxth	r3, r3
 800de60:	b2db      	uxtb	r3, r3
 800de62:	4618      	mov	r0, r3
 800de64:	f000 fb5e 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(sp);
 800de68:	88bb      	ldrh	r3, [r7, #4]
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	4618      	mov	r0, r3
 800de6e:	f000 fb59 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800de72:	883b      	ldrh	r3, [r7, #0]
 800de74:	0a1b      	lsrs	r3, r3, #8
 800de76:	b29b      	uxth	r3, r3
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	4618      	mov	r0, r3
 800de7c:	f000 fb52 	bl	800e524 <_LCD_SendData>
	_LCD_SendData(ep);
 800de80:	883b      	ldrh	r3, [r7, #0]
 800de82:	b2db      	uxtb	r3, r3
 800de84:	4618      	mov	r0, r3
 800de86:	f000 fb4d 	bl	800e524 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800de8a:	202c      	movs	r0, #44	; 0x2c
 800de8c:	f000 fb18 	bl	800e4c0 <_LCD_SendCommand>
}
 800de90:	bf00      	nop
 800de92:	370c      	adds	r7, #12
 800de94:	46bd      	mov	sp, r7
 800de96:	bd90      	pop	{r4, r7, pc}

0800de98 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af02      	add	r7, sp, #8
 800de9e:	4603      	mov	r3, r0
 800dea0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800dea2:	4b10      	ldr	r3, [pc, #64]	; (800dee4 <ILI9341_Fill_Screen+0x4c>)
 800dea4:	881b      	ldrh	r3, [r3, #0]
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	4b0f      	ldr	r3, [pc, #60]	; (800dee8 <ILI9341_Fill_Screen+0x50>)
 800deaa:	881b      	ldrh	r3, [r3, #0]
 800deac:	b29b      	uxth	r3, r3
 800deae:	2100      	movs	r1, #0
 800deb0:	2000      	movs	r0, #0
 800deb2:	f7ff ffa5 	bl	800de00 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800deb6:	4b0b      	ldr	r3, [pc, #44]	; (800dee4 <ILI9341_Fill_Screen+0x4c>)
 800deb8:	881b      	ldrh	r3, [r3, #0]
 800deba:	b29b      	uxth	r3, r3
 800debc:	461a      	mov	r2, r3
 800debe:	4b0a      	ldr	r3, [pc, #40]	; (800dee8 <ILI9341_Fill_Screen+0x50>)
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	fb03 f302 	mul.w	r3, r3, r2
 800dec8:	4619      	mov	r1, r3
 800deca:	88fa      	ldrh	r2, [r7, #6]
 800decc:	2304      	movs	r3, #4
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	460b      	mov	r3, r1
 800ded2:	2100      	movs	r1, #0
 800ded4:	2000      	movs	r0, #0
 800ded6:	f000 fa43 	bl	800e360 <_LCD_Write_Frame>
}
 800deda:	bf00      	nop
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	20000cb6 	.word	0x20000cb6
 800dee8:	20000cb4 	.word	0x20000cb4

0800deec <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08c      	sub	sp, #48	; 0x30
 800def0:	af00      	add	r7, sp, #0
 800def2:	4603      	mov	r3, r0
 800def4:	80fb      	strh	r3, [r7, #6]
 800def6:	460b      	mov	r3, r1
 800def8:	80bb      	strh	r3, [r7, #4]
 800defa:	4613      	mov	r3, r2
 800defc:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800defe:	4b94      	ldr	r3, [pc, #592]	; (800e150 <ILI9341_Draw_Pixel+0x264>)
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	b29b      	uxth	r3, r3
 800df04:	88fa      	ldrh	r2, [r7, #6]
 800df06:	429a      	cmp	r2, r3
 800df08:	f080 811e 	bcs.w	800e148 <ILI9341_Draw_Pixel+0x25c>
 800df0c:	4b91      	ldr	r3, [pc, #580]	; (800e154 <ILI9341_Draw_Pixel+0x268>)
 800df0e:	881b      	ldrh	r3, [r3, #0]
 800df10:	b29b      	uxth	r3, r3
 800df12:	88ba      	ldrh	r2, [r7, #4]
 800df14:	429a      	cmp	r2, r3
 800df16:	f080 8117 	bcs.w	800e148 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800df1a:	4b8f      	ldr	r3, [pc, #572]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df1c:	695b      	ldr	r3, [r3, #20]
 800df1e:	4a8e      	ldr	r2, [pc, #568]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df24:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df26:	4b8c      	ldr	r3, [pc, #560]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	4a8b      	ldr	r2, [pc, #556]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df30:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800df32:	2200      	movs	r2, #0
 800df34:	2100      	movs	r1, #0
 800df36:	202a      	movs	r0, #42	; 0x2a
 800df38:	f000 fb26 	bl	800e588 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df3c:	2300      	movs	r3, #0
 800df3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df40:	e008      	b.n	800df54 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df42:	4b85      	ldr	r3, [pc, #532]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df44:	695b      	ldr	r3, [r3, #20]
 800df46:	4a84      	ldr	r2, [pc, #528]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df4c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df50:	3301      	adds	r3, #1
 800df52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	2b02      	cmp	r3, #2
 800df58:	ddf3      	ble.n	800df42 <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800df5a:	4b7f      	ldr	r3, [pc, #508]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df5c:	695b      	ldr	r3, [r3, #20]
 800df5e:	4a7e      	ldr	r2, [pc, #504]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df64:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800df66:	4b7c      	ldr	r3, [pc, #496]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	4a7b      	ldr	r2, [pc, #492]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df70:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df72:	4b79      	ldr	r3, [pc, #484]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	4a78      	ldr	r2, [pc, #480]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800df78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df7c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800df7e:	88fb      	ldrh	r3, [r7, #6]
 800df80:	0a1b      	lsrs	r3, r3, #8
 800df82:	b29b      	uxth	r3, r3
 800df84:	b2db      	uxtb	r3, r3
 800df86:	753b      	strb	r3, [r7, #20]
 800df88:	88fb      	ldrh	r3, [r7, #6]
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800df8e:	88fb      	ldrh	r3, [r7, #6]
 800df90:	3301      	adds	r3, #1
 800df92:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800df94:	b2db      	uxtb	r3, r3
 800df96:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800df98:	88fb      	ldrh	r3, [r7, #6]
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	3301      	adds	r3, #1
 800df9e:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800dfa0:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800dfa2:	f107 0014 	add.w	r0, r7, #20
 800dfa6:	230a      	movs	r3, #10
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	2104      	movs	r1, #4
 800dfac:	f000 fb1e 	bl	800e5ec <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfb4:	e008      	b.n	800dfc8 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dfb6:	4b68      	ldr	r3, [pc, #416]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800dfb8:	695b      	ldr	r3, [r3, #20]
 800dfba:	4a67      	ldr	r2, [pc, #412]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800dfbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfc0:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	ddf3      	ble.n	800dfb6 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800dfce:	4b62      	ldr	r3, [pc, #392]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800dfd0:	695b      	ldr	r3, [r3, #20]
 800dfd2:	4a61      	ldr	r2, [pc, #388]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800dfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfd8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800dfda:	4b5f      	ldr	r3, [pc, #380]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800dfdc:	695b      	ldr	r3, [r3, #20]
 800dfde:	4a5e      	ldr	r2, [pc, #376]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800dfe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfe4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dfe6:	4b5c      	ldr	r3, [pc, #368]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800dfe8:	695b      	ldr	r3, [r3, #20]
 800dfea:	4a5b      	ldr	r2, [pc, #364]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800dfec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dff0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800dff2:	2200      	movs	r2, #0
 800dff4:	2100      	movs	r1, #0
 800dff6:	202b      	movs	r0, #43	; 0x2b
 800dff8:	f000 fac6 	bl	800e588 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dffc:	2300      	movs	r3, #0
 800dffe:	627b      	str	r3, [r7, #36]	; 0x24
 800e000:	e008      	b.n	800e014 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e002:	4b55      	ldr	r3, [pc, #340]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e004:	695b      	ldr	r3, [r3, #20]
 800e006:	4a54      	ldr	r2, [pc, #336]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e00c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e010:	3301      	adds	r3, #1
 800e012:	627b      	str	r3, [r7, #36]	; 0x24
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	2b02      	cmp	r3, #2
 800e018:	ddf3      	ble.n	800e002 <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e01a:	4b4f      	ldr	r3, [pc, #316]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	4a4e      	ldr	r2, [pc, #312]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e024:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e026:	4b4c      	ldr	r3, [pc, #304]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e028:	695b      	ldr	r3, [r3, #20]
 800e02a:	4a4b      	ldr	r2, [pc, #300]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e030:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e032:	4b49      	ldr	r3, [pc, #292]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e034:	695b      	ldr	r3, [r3, #20]
 800e036:	4a48      	ldr	r2, [pc, #288]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e03c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800e03e:	88bb      	ldrh	r3, [r7, #4]
 800e040:	0a1b      	lsrs	r3, r3, #8
 800e042:	b29b      	uxth	r3, r3
 800e044:	b2db      	uxtb	r3, r3
 800e046:	743b      	strb	r3, [r7, #16]
 800e048:	88bb      	ldrh	r3, [r7, #4]
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800e04e:	88bb      	ldrh	r3, [r7, #4]
 800e050:	3301      	adds	r3, #1
 800e052:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800e054:	b2db      	uxtb	r3, r3
 800e056:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800e058:	88bb      	ldrh	r3, [r7, #4]
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	3301      	adds	r3, #1
 800e05e:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800e060:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e062:	f107 0010 	add.w	r0, r7, #16
 800e066:	230a      	movs	r3, #10
 800e068:	2200      	movs	r2, #0
 800e06a:	2104      	movs	r1, #4
 800e06c:	f000 fabe 	bl	800e5ec <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e070:	2300      	movs	r3, #0
 800e072:	623b      	str	r3, [r7, #32]
 800e074:	e008      	b.n	800e088 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e076:	4b38      	ldr	r3, [pc, #224]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	4a37      	ldr	r2, [pc, #220]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e07c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e080:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	3301      	adds	r3, #1
 800e086:	623b      	str	r3, [r7, #32]
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	ddf3      	ble.n	800e076 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e08e:	4b32      	ldr	r3, [pc, #200]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	4a31      	ldr	r2, [pc, #196]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e098:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e09a:	4b2f      	ldr	r3, [pc, #188]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e09c:	695b      	ldr	r3, [r3, #20]
 800e09e:	4a2e      	ldr	r2, [pc, #184]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0a4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e0a6:	4b2c      	ldr	r3, [pc, #176]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	4a2b      	ldr	r2, [pc, #172]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0b0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	202c      	movs	r0, #44	; 0x2c
 800e0b8:	f000 fa66 	bl	800e588 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e0bc:	2300      	movs	r3, #0
 800e0be:	61fb      	str	r3, [r7, #28]
 800e0c0:	e008      	b.n	800e0d4 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e0c2:	4b25      	ldr	r3, [pc, #148]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	4a24      	ldr	r2, [pc, #144]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0cc:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	61fb      	str	r3, [r7, #28]
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	ddf3      	ble.n	800e0c2 <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e0da:	4b1f      	ldr	r3, [pc, #124]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0dc:	695b      	ldr	r3, [r3, #20]
 800e0de:	4a1e      	ldr	r2, [pc, #120]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0e4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e0e6:	4b1c      	ldr	r3, [pc, #112]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0e8:	695b      	ldr	r3, [r3, #20]
 800e0ea:	4a1b      	ldr	r2, [pc, #108]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0f0:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e0f2:	4b19      	ldr	r3, [pc, #100]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0f4:	695b      	ldr	r3, [r3, #20]
 800e0f6:	4a18      	ldr	r2, [pc, #96]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e0f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0fc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e0fe:	887b      	ldrh	r3, [r7, #2]
 800e100:	0a1b      	lsrs	r3, r3, #8
 800e102:	b29b      	uxth	r3, r3
 800e104:	b2db      	uxtb	r3, r3
 800e106:	733b      	strb	r3, [r7, #12]
 800e108:	887b      	ldrh	r3, [r7, #2]
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800e10e:	f107 000c 	add.w	r0, r7, #12
 800e112:	230a      	movs	r3, #10
 800e114:	2200      	movs	r2, #0
 800e116:	2104      	movs	r1, #4
 800e118:	f000 fa68 	bl	800e5ec <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e11c:	2300      	movs	r3, #0
 800e11e:	61bb      	str	r3, [r7, #24]
 800e120:	e008      	b.n	800e134 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e122:	4b0d      	ldr	r3, [pc, #52]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e124:	695b      	ldr	r3, [r3, #20]
 800e126:	4a0c      	ldr	r2, [pc, #48]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e12c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	3301      	adds	r3, #1
 800e132:	61bb      	str	r3, [r7, #24]
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	2b02      	cmp	r3, #2
 800e138:	ddf3      	ble.n	800e122 <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e13a:	4b07      	ldr	r3, [pc, #28]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e13c:	695b      	ldr	r3, [r3, #20]
 800e13e:	4a06      	ldr	r2, [pc, #24]	; (800e158 <ILI9341_Draw_Pixel+0x26c>)
 800e140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e144:	6153      	str	r3, [r2, #20]
 800e146:	e000      	b.n	800e14a <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e148:	bf00      	nop


}
 800e14a:	3730      	adds	r7, #48	; 0x30
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	20000cb6 	.word	0x20000cb6
 800e154:	20000cb4 	.word	0x20000cb4
 800e158:	48000400 	.word	0x48000400

0800e15c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800e15c:	b590      	push	{r4, r7, lr}
 800e15e:	b087      	sub	sp, #28
 800e160:	af02      	add	r7, sp, #8
 800e162:	4604      	mov	r4, r0
 800e164:	4608      	mov	r0, r1
 800e166:	4611      	mov	r1, r2
 800e168:	461a      	mov	r2, r3
 800e16a:	4623      	mov	r3, r4
 800e16c:	80fb      	strh	r3, [r7, #6]
 800e16e:	4603      	mov	r3, r0
 800e170:	80bb      	strh	r3, [r7, #4]
 800e172:	460b      	mov	r3, r1
 800e174:	807b      	strh	r3, [r7, #2]
 800e176:	4613      	mov	r3, r2
 800e178:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e17a:	4b39      	ldr	r3, [pc, #228]	; (800e260 <ILI9341_Draw_Rectangle+0x104>)
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	88fa      	ldrh	r2, [r7, #6]
 800e182:	429a      	cmp	r2, r3
 800e184:	d268      	bcs.n	800e258 <ILI9341_Draw_Rectangle+0xfc>
 800e186:	4b37      	ldr	r3, [pc, #220]	; (800e264 <ILI9341_Draw_Rectangle+0x108>)
 800e188:	881b      	ldrh	r3, [r3, #0]
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	88ba      	ldrh	r2, [r7, #4]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d262      	bcs.n	800e258 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800e192:	88fa      	ldrh	r2, [r7, #6]
 800e194:	887b      	ldrh	r3, [r7, #2]
 800e196:	4413      	add	r3, r2
 800e198:	3b01      	subs	r3, #1
 800e19a:	4a31      	ldr	r2, [pc, #196]	; (800e260 <ILI9341_Draw_Rectangle+0x104>)
 800e19c:	8812      	ldrh	r2, [r2, #0]
 800e19e:	b292      	uxth	r2, r2
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	db05      	blt.n	800e1b0 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e1a4:	4b2e      	ldr	r3, [pc, #184]	; (800e260 <ILI9341_Draw_Rectangle+0x104>)
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	88fb      	ldrh	r3, [r7, #6]
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e1b0:	88ba      	ldrh	r2, [r7, #4]
 800e1b2:	883b      	ldrh	r3, [r7, #0]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	4a2a      	ldr	r2, [pc, #168]	; (800e264 <ILI9341_Draw_Rectangle+0x108>)
 800e1ba:	8812      	ldrh	r2, [r2, #0]
 800e1bc:	b292      	uxth	r2, r2
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	db05      	blt.n	800e1ce <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e1c2:	4b28      	ldr	r3, [pc, #160]	; (800e264 <ILI9341_Draw_Rectangle+0x108>)
 800e1c4:	881b      	ldrh	r3, [r3, #0]
 800e1c6:	b29a      	uxth	r2, r3
 800e1c8:	88bb      	ldrh	r3, [r7, #4]
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e1ce:	88fa      	ldrh	r2, [r7, #6]
 800e1d0:	887b      	ldrh	r3, [r7, #2]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e1da:	88ba      	ldrh	r2, [r7, #4]
 800e1dc:	883b      	ldrh	r3, [r7, #0]
 800e1de:	4413      	add	r3, r2
 800e1e0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	88b9      	ldrh	r1, [r7, #4]
 800e1e8:	88f8      	ldrh	r0, [r7, #6]
 800e1ea:	4622      	mov	r2, r4
 800e1ec:	f7ff fe08 	bl	800de00 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e1f0:	883a      	ldrh	r2, [r7, #0]
 800e1f2:	887b      	ldrh	r3, [r7, #2]
 800e1f4:	fb12 f303 	smulbb	r3, r2, r3
 800e1f8:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e1fe:	89fb      	ldrh	r3, [r7, #14]
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b00      	cmp	r3, #0
 800e206:	d009      	beq.n	800e21c <ILI9341_Draw_Rectangle+0xc0>
 800e208:	89fb      	ldrh	r3, [r7, #14]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d906      	bls.n	800e21c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e20e:	2301      	movs	r3, #1
 800e210:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e212:	89fb      	ldrh	r3, [r7, #14]
 800e214:	085b      	lsrs	r3, r3, #1
 800e216:	b29b      	uxth	r3, r3
 800e218:	005b      	lsls	r3, r3, #1
 800e21a:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800e21c:	89fc      	ldrh	r4, [r7, #14]
 800e21e:	8c3a      	ldrh	r2, [r7, #32]
 800e220:	88b9      	ldrh	r1, [r7, #4]
 800e222:	88f8      	ldrh	r0, [r7, #6]
 800e224:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	4623      	mov	r3, r4
 800e22c:	f000 f898 	bl	800e360 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800e230:	7b7b      	ldrb	r3, [r7, #13]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d011      	beq.n	800e25a <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e236:	88fa      	ldrh	r2, [r7, #6]
 800e238:	887b      	ldrh	r3, [r7, #2]
 800e23a:	4413      	add	r3, r2
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	3b01      	subs	r3, #1
 800e240:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e242:	88ba      	ldrh	r2, [r7, #4]
 800e244:	883b      	ldrh	r3, [r7, #0]
 800e246:	4413      	add	r3, r2
 800e248:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e24a:	3b01      	subs	r3, #1
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	8c3a      	ldrh	r2, [r7, #32]
 800e250:	4619      	mov	r1, r3
 800e252:	f7ff fe4b 	bl	800deec <ILI9341_Draw_Pixel>
 800e256:	e000      	b.n	800e25a <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e258:	bf00      	nop
							colour);
	}
}
 800e25a:	3714      	adds	r7, #20
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd90      	pop	{r4, r7, pc}
 800e260:	20000cb6 	.word	0x20000cb6
 800e264:	20000cb4 	.word	0x20000cb4

0800e268 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800e272:	79fb      	ldrb	r3, [r7, #7]
 800e274:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800e276:	2036      	movs	r0, #54	; 0x36
 800e278:	f000 f922 	bl	800e4c0 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800e27c:	7bfb      	ldrb	r3, [r7, #15]
 800e27e:	2b03      	cmp	r3, #3
 800e280:	d836      	bhi.n	800e2f0 <ILI9341_Set_Rotation+0x88>
 800e282:	a201      	add	r2, pc, #4	; (adr r2, 800e288 <ILI9341_Set_Rotation+0x20>)
 800e284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e288:	0800e299 	.word	0x0800e299
 800e28c:	0800e2af 	.word	0x0800e2af
 800e290:	0800e2c5 	.word	0x0800e2c5
 800e294:	0800e2db 	.word	0x0800e2db
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800e298:	2048      	movs	r0, #72	; 0x48
 800e29a:	f000 f943 	bl	800e524 <_LCD_SendData>
			LCD_WIDTH = 240;
 800e29e:	4b17      	ldr	r3, [pc, #92]	; (800e2fc <ILI9341_Set_Rotation+0x94>)
 800e2a0:	22f0      	movs	r2, #240	; 0xf0
 800e2a2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e2a4:	4b16      	ldr	r3, [pc, #88]	; (800e300 <ILI9341_Set_Rotation+0x98>)
 800e2a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e2aa:	801a      	strh	r2, [r3, #0]
			break;
 800e2ac:	e021      	b.n	800e2f2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800e2ae:	2028      	movs	r0, #40	; 0x28
 800e2b0:	f000 f938 	bl	800e524 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e2b4:	4b11      	ldr	r3, [pc, #68]	; (800e2fc <ILI9341_Set_Rotation+0x94>)
 800e2b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e2ba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e2bc:	4b10      	ldr	r3, [pc, #64]	; (800e300 <ILI9341_Set_Rotation+0x98>)
 800e2be:	22f0      	movs	r2, #240	; 0xf0
 800e2c0:	801a      	strh	r2, [r3, #0]
			break;
 800e2c2:	e016      	b.n	800e2f2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800e2c4:	2088      	movs	r0, #136	; 0x88
 800e2c6:	f000 f92d 	bl	800e524 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800e2ca:	4b0c      	ldr	r3, [pc, #48]	; (800e2fc <ILI9341_Set_Rotation+0x94>)
 800e2cc:	22f0      	movs	r2, #240	; 0xf0
 800e2ce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e2d0:	4b0b      	ldr	r3, [pc, #44]	; (800e300 <ILI9341_Set_Rotation+0x98>)
 800e2d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e2d6:	801a      	strh	r2, [r3, #0]
			break;
 800e2d8:	e00b      	b.n	800e2f2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800e2da:	20e8      	movs	r0, #232	; 0xe8
 800e2dc:	f000 f922 	bl	800e524 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e2e0:	4b06      	ldr	r3, [pc, #24]	; (800e2fc <ILI9341_Set_Rotation+0x94>)
 800e2e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e2e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e2e8:	4b05      	ldr	r3, [pc, #20]	; (800e300 <ILI9341_Set_Rotation+0x98>)
 800e2ea:	22f0      	movs	r2, #240	; 0xf0
 800e2ec:	801a      	strh	r2, [r3, #0]
			break;
 800e2ee:	e000      	b.n	800e2f2 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800e2f0:	bf00      	nop
	}
}
 800e2f2:	bf00      	nop
 800e2f4:	3710      	adds	r7, #16
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	20000cb6 	.word	0x20000cb6
 800e300:	20000cb4 	.word	0x20000cb4

0800e304 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800e304:	b480      	push	{r7}
 800e306:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e308:	4b05      	ldr	r3, [pc, #20]	; (800e320 <_LCD_Enable+0x1c>)
 800e30a:	695b      	ldr	r3, [r3, #20]
 800e30c:	4a04      	ldr	r2, [pc, #16]	; (800e320 <_LCD_Enable+0x1c>)
 800e30e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e312:	6153      	str	r3, [r2, #20]
}
 800e314:	bf00      	nop
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop
 800e320:	48000400 	.word	0x48000400

0800e324 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800e324:	b580      	push	{r7, lr}
 800e326:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800e328:	4b0c      	ldr	r3, [pc, #48]	; (800e35c <_LCD_Reset+0x38>)
 800e32a:	695b      	ldr	r3, [r3, #20]
 800e32c:	4a0b      	ldr	r2, [pc, #44]	; (800e35c <_LCD_Reset+0x38>)
 800e32e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e332:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e334:	20c8      	movs	r0, #200	; 0xc8
 800e336:	f7fa f9ad 	bl	8008694 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e33a:	4b08      	ldr	r3, [pc, #32]	; (800e35c <_LCD_Reset+0x38>)
 800e33c:	695b      	ldr	r3, [r3, #20]
 800e33e:	4a07      	ldr	r2, [pc, #28]	; (800e35c <_LCD_Reset+0x38>)
 800e340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e344:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e346:	20c8      	movs	r0, #200	; 0xc8
 800e348:	f7fa f9a4 	bl	8008694 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e34c:	4b03      	ldr	r3, [pc, #12]	; (800e35c <_LCD_Reset+0x38>)
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	4a02      	ldr	r2, [pc, #8]	; (800e35c <_LCD_Reset+0x38>)
 800e352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e356:	6153      	str	r3, [r2, #20]
}
 800e358:	bf00      	nop
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	48000400 	.word	0x48000400

0800e360 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800e360:	b5b0      	push	{r4, r5, r7, lr}
 800e362:	b08e      	sub	sp, #56	; 0x38
 800e364:	af00      	add	r7, sp, #0
 800e366:	607b      	str	r3, [r7, #4]
 800e368:	4603      	mov	r3, r0
 800e36a:	81fb      	strh	r3, [r7, #14]
 800e36c:	460b      	mov	r3, r1
 800e36e:	81bb      	strh	r3, [r7, #12]
 800e370:	4613      	mov	r3, r2
 800e372:	817b      	strh	r3, [r7, #10]
 800e374:	466b      	mov	r3, sp
 800e376:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	005b      	lsls	r3, r3, #1
 800e380:	4a4d      	ldr	r2, [pc, #308]	; (800e4b8 <_LCD_Write_Frame+0x158>)
 800e382:	8812      	ldrh	r2, [r2, #0]
 800e384:	4293      	cmp	r3, r2
 800e386:	d202      	bcs.n	800e38e <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e38c:	e002      	b.n	800e394 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800e38e:	4b4a      	ldr	r3, [pc, #296]	; (800e4b8 <_LCD_Write_Frame+0x158>)
 800e390:	881b      	ldrh	r3, [r3, #0]
 800e392:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800e394:	897b      	ldrh	r3, [r7, #10]
 800e396:	0a1b      	lsrs	r3, r3, #8
 800e398:	b29b      	uxth	r3, r3
 800e39a:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800e39c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e39e:	4603      	mov	r3, r0
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	61bb      	str	r3, [r7, #24]
 800e3a4:	4601      	mov	r1, r0
 800e3a6:	f04f 0200 	mov.w	r2, #0
 800e3aa:	f04f 0300 	mov.w	r3, #0
 800e3ae:	f04f 0400 	mov.w	r4, #0
 800e3b2:	00d4      	lsls	r4, r2, #3
 800e3b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e3b8:	00cb      	lsls	r3, r1, #3
 800e3ba:	4601      	mov	r1, r0
 800e3bc:	f04f 0200 	mov.w	r2, #0
 800e3c0:	f04f 0300 	mov.w	r3, #0
 800e3c4:	f04f 0400 	mov.w	r4, #0
 800e3c8:	00d4      	lsls	r4, r2, #3
 800e3ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e3ce:	00cb      	lsls	r3, r1, #3
 800e3d0:	1dc3      	adds	r3, r0, #7
 800e3d2:	08db      	lsrs	r3, r3, #3
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	ebad 0d03 	sub.w	sp, sp, r3
 800e3da:	466b      	mov	r3, sp
 800e3dc:	3300      	adds	r3, #0
 800e3de:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	633b      	str	r3, [r7, #48]	; 0x30
 800e3e4:	e00d      	b.n	800e402 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ea:	4413      	add	r3, r2
 800e3ec:	7ffa      	ldrb	r2, [r7, #31]
 800e3ee:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800e3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	897a      	ldrh	r2, [r7, #10]
 800e3f6:	b2d1      	uxtb	r1, r2
 800e3f8:	697a      	ldr	r2, [r7, #20]
 800e3fa:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fe:	3302      	adds	r3, #2
 800e400:	633b      	str	r3, [r7, #48]	; 0x30
 800e402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	429a      	cmp	r2, r3
 800e408:	d3ed      	bcc.n	800e3e6 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	005b      	lsls	r3, r3, #1
 800e40e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800e410:	2301      	movs	r3, #1
 800e412:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800e414:	2300      	movs	r3, #0
 800e416:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00d      	beq.n	800e43a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800e41e:	693a      	ldr	r2, [r7, #16]
 800e420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e422:	fbb2 f3f3 	udiv	r3, r2, r3
 800e426:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e42c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e430:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e432:	fb01 f202 	mul.w	r2, r1, r2
 800e436:	1a9b      	subs	r3, r3, r2
 800e438:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e43a:	4b20      	ldr	r3, [pc, #128]	; (800e4bc <_LCD_Write_Frame+0x15c>)
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	4a1f      	ldr	r2, [pc, #124]	; (800e4bc <_LCD_Write_Frame+0x15c>)
 800e440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e444:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e446:	4b1d      	ldr	r3, [pc, #116]	; (800e4bc <_LCD_Write_Frame+0x15c>)
 800e448:	695b      	ldr	r3, [r3, #20]
 800e44a:	4a1c      	ldr	r2, [pc, #112]	; (800e4bc <_LCD_Write_Frame+0x15c>)
 800e44c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e450:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800e452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e454:	2b00      	cmp	r3, #0
 800e456:	d00f      	beq.n	800e478 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e458:	2300      	movs	r3, #0
 800e45a:	627b      	str	r3, [r7, #36]	; 0x24
 800e45c:	e008      	b.n	800e470 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800e45e:	6978      	ldr	r0, [r7, #20]
 800e460:	230a      	movs	r3, #10
 800e462:	2200      	movs	r2, #0
 800e464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e466:	f000 f8c1 	bl	800e5ec <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	3301      	adds	r3, #1
 800e46e:	627b      	str	r3, [r7, #36]	; 0x24
 800e470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e474:	429a      	cmp	r2, r3
 800e476:	d3f2      	bcc.n	800e45e <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800e478:	6978      	ldr	r0, [r7, #20]
 800e47a:	230a      	movs	r3, #10
 800e47c:	2200      	movs	r2, #0
 800e47e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e480:	f000 f8b4 	bl	800e5ec <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e484:	2300      	movs	r3, #0
 800e486:	623b      	str	r3, [r7, #32]
 800e488:	e008      	b.n	800e49c <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e48a:	4b0c      	ldr	r3, [pc, #48]	; (800e4bc <_LCD_Write_Frame+0x15c>)
 800e48c:	695b      	ldr	r3, [r3, #20]
 800e48e:	4a0b      	ldr	r2, [pc, #44]	; (800e4bc <_LCD_Write_Frame+0x15c>)
 800e490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e494:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	3301      	adds	r3, #1
 800e49a:	623b      	str	r3, [r7, #32]
 800e49c:	6a3b      	ldr	r3, [r7, #32]
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	ddf3      	ble.n	800e48a <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e4a2:	4b06      	ldr	r3, [pc, #24]	; (800e4bc <_LCD_Write_Frame+0x15c>)
 800e4a4:	695b      	ldr	r3, [r3, #20]
 800e4a6:	4a05      	ldr	r2, [pc, #20]	; (800e4bc <_LCD_Write_Frame+0x15c>)
 800e4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4ac:	6153      	str	r3, [r2, #20]
 800e4ae:	46ad      	mov	sp, r5

}
 800e4b0:	bf00      	nop
 800e4b2:	3738      	adds	r7, #56	; 0x38
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bdb0      	pop	{r4, r5, r7, pc}
 800e4b8:	20000cb8 	.word	0x20000cb8
 800e4bc:	48000400 	.word	0x48000400

0800e4c0 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e4ca:	4b15      	ldr	r3, [pc, #84]	; (800e520 <_LCD_SendCommand+0x60>)
 800e4cc:	695b      	ldr	r3, [r3, #20]
 800e4ce:	4a14      	ldr	r2, [pc, #80]	; (800e520 <_LCD_SendCommand+0x60>)
 800e4d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4d4:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e4d6:	4b12      	ldr	r3, [pc, #72]	; (800e520 <_LCD_SendCommand+0x60>)
 800e4d8:	695b      	ldr	r3, [r3, #20]
 800e4da:	4a11      	ldr	r2, [pc, #68]	; (800e520 <_LCD_SendCommand+0x60>)
 800e4dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4e0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800e4e2:	79fb      	ldrb	r3, [r7, #7]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f000 f84d 	bl	800e588 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	60fb      	str	r3, [r7, #12]
 800e4f2:	e008      	b.n	800e506 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e4f4:	4b0a      	ldr	r3, [pc, #40]	; (800e520 <_LCD_SendCommand+0x60>)
 800e4f6:	695b      	ldr	r3, [r3, #20]
 800e4f8:	4a09      	ldr	r2, [pc, #36]	; (800e520 <_LCD_SendCommand+0x60>)
 800e4fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4fe:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3301      	adds	r3, #1
 800e504:	60fb      	str	r3, [r7, #12]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2b02      	cmp	r3, #2
 800e50a:	ddf3      	ble.n	800e4f4 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e50c:	4b04      	ldr	r3, [pc, #16]	; (800e520 <_LCD_SendCommand+0x60>)
 800e50e:	695b      	ldr	r3, [r3, #20]
 800e510:	4a03      	ldr	r2, [pc, #12]	; (800e520 <_LCD_SendCommand+0x60>)
 800e512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e516:	6153      	str	r3, [r2, #20]
}
 800e518:	bf00      	nop
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	48000400 	.word	0x48000400

0800e524 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e52e:	4b15      	ldr	r3, [pc, #84]	; (800e584 <_LCD_SendData+0x60>)
 800e530:	695b      	ldr	r3, [r3, #20]
 800e532:	4a14      	ldr	r2, [pc, #80]	; (800e584 <_LCD_SendData+0x60>)
 800e534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e538:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e53a:	4b12      	ldr	r3, [pc, #72]	; (800e584 <_LCD_SendData+0x60>)
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	4a11      	ldr	r2, [pc, #68]	; (800e584 <_LCD_SendData+0x60>)
 800e540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e544:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800e546:	79fb      	ldrb	r3, [r7, #7]
 800e548:	2200      	movs	r2, #0
 800e54a:	2100      	movs	r1, #0
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 f81b 	bl	800e588 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e552:	2300      	movs	r3, #0
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	e008      	b.n	800e56a <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e558:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <_LCD_SendData+0x60>)
 800e55a:	695b      	ldr	r3, [r3, #20]
 800e55c:	4a09      	ldr	r2, [pc, #36]	; (800e584 <_LCD_SendData+0x60>)
 800e55e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e562:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	3301      	adds	r3, #1
 800e568:	60fb      	str	r3, [r7, #12]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	ddf3      	ble.n	800e558 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e570:	4b04      	ldr	r3, [pc, #16]	; (800e584 <_LCD_SendData+0x60>)
 800e572:	695b      	ldr	r3, [r3, #20]
 800e574:	4a03      	ldr	r2, [pc, #12]	; (800e584 <_LCD_SendData+0x60>)
 800e576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e57a:	6153      	str	r3, [r2, #20]
}
 800e57c:	bf00      	nop
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	48000400 	.word	0x48000400

0800e588 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	4603      	mov	r3, r0
 800e590:	71fb      	strb	r3, [r7, #7]
 800e592:	460b      	mov	r3, r1
 800e594:	71bb      	strb	r3, [r7, #6]
 800e596:	4613      	mov	r3, r2
 800e598:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e59a:	2300      	movs	r3, #0
 800e59c:	60fb      	str	r3, [r7, #12]
 800e59e:	e003      	b.n	800e5a8 <_SPI_SendByte+0x20>
   		asm("nop");
 800e5a0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	60fb      	str	r3, [r7, #12]
 800e5a8:	79bb      	ldrb	r3, [r7, #6]
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	dbf7      	blt.n	800e5a0 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e5b0:	4b0c      	ldr	r3, [pc, #48]	; (800e5e4 <_SPI_SendByte+0x5c>)
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	f003 0302 	and.w	r3, r3, #2
 800e5b8:	2b02      	cmp	r3, #2
 800e5ba:	d102      	bne.n	800e5c2 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800e5bc:	4a0a      	ldr	r2, [pc, #40]	; (800e5e8 <_SPI_SendByte+0x60>)
 800e5be:	79fb      	ldrb	r3, [r7, #7]
 800e5c0:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	60bb      	str	r3, [r7, #8]
 800e5c6:	e003      	b.n	800e5d0 <_SPI_SendByte+0x48>
   		asm("nop");
 800e5c8:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	60bb      	str	r3, [r7, #8]
 800e5d0:	797b      	ldrb	r3, [r7, #5]
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	dbf7      	blt.n	800e5c8 <_SPI_SendByte+0x40>

#endif

}
 800e5d8:	bf00      	nop
 800e5da:	3714      	adds	r7, #20
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr
 800e5e4:	40003c00 	.word	0x40003c00
 800e5e8:	40003c0c 	.word	0x40003c0c

0800e5ec <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b089      	sub	sp, #36	; 0x24
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	71fb      	strb	r3, [r7, #7]
 800e5fe:	4613      	mov	r3, r2
 800e600:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e602:	2300      	movs	r3, #0
 800e604:	61fb      	str	r3, [r7, #28]
 800e606:	e003      	b.n	800e610 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800e608:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	3301      	adds	r3, #1
 800e60e:	61fb      	str	r3, [r7, #28]
 800e610:	79fb      	ldrb	r3, [r7, #7]
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	429a      	cmp	r2, r3
 800e616:	dbf7      	blt.n	800e608 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800e61c:	e01d      	b.n	800e65a <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e61e:	4b1c      	ldr	r3, [pc, #112]	; (800e690 <_SPI_SendByteMultiByte+0xa4>)
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	f003 0302 	and.w	r3, r3, #2
 800e626:	2b02      	cmp	r3, #2
 800e628:	d117      	bne.n	800e65a <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d90a      	bls.n	800e646 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	881a      	ldrh	r2, [r3, #0]
 800e634:	4b16      	ldr	r3, [pc, #88]	; (800e690 <_SPI_SendByteMultiByte+0xa4>)
 800e636:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	3302      	adds	r3, #2
 800e63c:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	3b02      	subs	r3, #2
 800e642:	60bb      	str	r3, [r7, #8]
 800e644:	e009      	b.n	800e65a <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800e646:	4a13      	ldr	r2, [pc, #76]	; (800e694 <_SPI_SendByteMultiByte+0xa8>)
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	3301      	adds	r3, #1
 800e652:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	3b01      	subs	r3, #1
 800e658:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1de      	bne.n	800e61e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800e660:	4b0b      	ldr	r3, [pc, #44]	; (800e690 <_SPI_SendByteMultiByte+0xa4>)
 800e662:	689b      	ldr	r3, [r3, #8]
 800e664:	4a0a      	ldr	r2, [pc, #40]	; (800e690 <_SPI_SendByteMultiByte+0xa4>)
 800e666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e66a:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e66c:	2300      	movs	r3, #0
 800e66e:	617b      	str	r3, [r7, #20]
 800e670:	e003      	b.n	800e67a <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800e672:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	3301      	adds	r3, #1
 800e678:	617b      	str	r3, [r7, #20]
 800e67a:	79bb      	ldrb	r3, [r7, #6]
 800e67c:	697a      	ldr	r2, [r7, #20]
 800e67e:	429a      	cmp	r2, r3
 800e680:	dbf7      	blt.n	800e672 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800e682:	bf00      	nop
 800e684:	3724      	adds	r7, #36	; 0x24
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	40003c00 	.word	0x40003c00
 800e694:	40003c0c 	.word	0x40003c0c

0800e698 <__errno>:
 800e698:	4b01      	ldr	r3, [pc, #4]	; (800e6a0 <__errno+0x8>)
 800e69a:	6818      	ldr	r0, [r3, #0]
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	20001cfc 	.word	0x20001cfc

0800e6a4 <__libc_init_array>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	4e0d      	ldr	r6, [pc, #52]	; (800e6dc <__libc_init_array+0x38>)
 800e6a8:	4c0d      	ldr	r4, [pc, #52]	; (800e6e0 <__libc_init_array+0x3c>)
 800e6aa:	1ba4      	subs	r4, r4, r6
 800e6ac:	10a4      	asrs	r4, r4, #2
 800e6ae:	2500      	movs	r5, #0
 800e6b0:	42a5      	cmp	r5, r4
 800e6b2:	d109      	bne.n	800e6c8 <__libc_init_array+0x24>
 800e6b4:	4e0b      	ldr	r6, [pc, #44]	; (800e6e4 <__libc_init_array+0x40>)
 800e6b6:	4c0c      	ldr	r4, [pc, #48]	; (800e6e8 <__libc_init_array+0x44>)
 800e6b8:	f002 fc32 	bl	8010f20 <_init>
 800e6bc:	1ba4      	subs	r4, r4, r6
 800e6be:	10a4      	asrs	r4, r4, #2
 800e6c0:	2500      	movs	r5, #0
 800e6c2:	42a5      	cmp	r5, r4
 800e6c4:	d105      	bne.n	800e6d2 <__libc_init_array+0x2e>
 800e6c6:	bd70      	pop	{r4, r5, r6, pc}
 800e6c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e6cc:	4798      	blx	r3
 800e6ce:	3501      	adds	r5, #1
 800e6d0:	e7ee      	b.n	800e6b0 <__libc_init_array+0xc>
 800e6d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e6d6:	4798      	blx	r3
 800e6d8:	3501      	adds	r5, #1
 800e6da:	e7f2      	b.n	800e6c2 <__libc_init_array+0x1e>
 800e6dc:	080127e8 	.word	0x080127e8
 800e6e0:	080127e8 	.word	0x080127e8
 800e6e4:	080127e8 	.word	0x080127e8
 800e6e8:	080127ec 	.word	0x080127ec

0800e6ec <memset>:
 800e6ec:	4402      	add	r2, r0
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d100      	bne.n	800e6f6 <memset+0xa>
 800e6f4:	4770      	bx	lr
 800e6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e6fa:	e7f9      	b.n	800e6f0 <memset+0x4>

0800e6fc <__cvt>:
 800e6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e700:	ec55 4b10 	vmov	r4, r5, d0
 800e704:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e706:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e70a:	2d00      	cmp	r5, #0
 800e70c:	460e      	mov	r6, r1
 800e70e:	4691      	mov	r9, r2
 800e710:	4619      	mov	r1, r3
 800e712:	bfb8      	it	lt
 800e714:	4622      	movlt	r2, r4
 800e716:	462b      	mov	r3, r5
 800e718:	f027 0720 	bic.w	r7, r7, #32
 800e71c:	bfbb      	ittet	lt
 800e71e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e722:	461d      	movlt	r5, r3
 800e724:	2300      	movge	r3, #0
 800e726:	232d      	movlt	r3, #45	; 0x2d
 800e728:	bfb8      	it	lt
 800e72a:	4614      	movlt	r4, r2
 800e72c:	2f46      	cmp	r7, #70	; 0x46
 800e72e:	700b      	strb	r3, [r1, #0]
 800e730:	d004      	beq.n	800e73c <__cvt+0x40>
 800e732:	2f45      	cmp	r7, #69	; 0x45
 800e734:	d100      	bne.n	800e738 <__cvt+0x3c>
 800e736:	3601      	adds	r6, #1
 800e738:	2102      	movs	r1, #2
 800e73a:	e000      	b.n	800e73e <__cvt+0x42>
 800e73c:	2103      	movs	r1, #3
 800e73e:	ab03      	add	r3, sp, #12
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	ab02      	add	r3, sp, #8
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	4632      	mov	r2, r6
 800e748:	4653      	mov	r3, sl
 800e74a:	ec45 4b10 	vmov	d0, r4, r5
 800e74e:	f000 fe27 	bl	800f3a0 <_dtoa_r>
 800e752:	2f47      	cmp	r7, #71	; 0x47
 800e754:	4680      	mov	r8, r0
 800e756:	d102      	bne.n	800e75e <__cvt+0x62>
 800e758:	f019 0f01 	tst.w	r9, #1
 800e75c:	d026      	beq.n	800e7ac <__cvt+0xb0>
 800e75e:	2f46      	cmp	r7, #70	; 0x46
 800e760:	eb08 0906 	add.w	r9, r8, r6
 800e764:	d111      	bne.n	800e78a <__cvt+0x8e>
 800e766:	f898 3000 	ldrb.w	r3, [r8]
 800e76a:	2b30      	cmp	r3, #48	; 0x30
 800e76c:	d10a      	bne.n	800e784 <__cvt+0x88>
 800e76e:	2200      	movs	r2, #0
 800e770:	2300      	movs	r3, #0
 800e772:	4620      	mov	r0, r4
 800e774:	4629      	mov	r1, r5
 800e776:	f7f2 f9cf 	bl	8000b18 <__aeabi_dcmpeq>
 800e77a:	b918      	cbnz	r0, 800e784 <__cvt+0x88>
 800e77c:	f1c6 0601 	rsb	r6, r6, #1
 800e780:	f8ca 6000 	str.w	r6, [sl]
 800e784:	f8da 3000 	ldr.w	r3, [sl]
 800e788:	4499      	add	r9, r3
 800e78a:	2200      	movs	r2, #0
 800e78c:	2300      	movs	r3, #0
 800e78e:	4620      	mov	r0, r4
 800e790:	4629      	mov	r1, r5
 800e792:	f7f2 f9c1 	bl	8000b18 <__aeabi_dcmpeq>
 800e796:	b938      	cbnz	r0, 800e7a8 <__cvt+0xac>
 800e798:	2230      	movs	r2, #48	; 0x30
 800e79a:	9b03      	ldr	r3, [sp, #12]
 800e79c:	454b      	cmp	r3, r9
 800e79e:	d205      	bcs.n	800e7ac <__cvt+0xb0>
 800e7a0:	1c59      	adds	r1, r3, #1
 800e7a2:	9103      	str	r1, [sp, #12]
 800e7a4:	701a      	strb	r2, [r3, #0]
 800e7a6:	e7f8      	b.n	800e79a <__cvt+0x9e>
 800e7a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7ac:	9b03      	ldr	r3, [sp, #12]
 800e7ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7b0:	eba3 0308 	sub.w	r3, r3, r8
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	6013      	str	r3, [r2, #0]
 800e7b8:	b004      	add	sp, #16
 800e7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e7be <__exponent>:
 800e7be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7c0:	2900      	cmp	r1, #0
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	bfba      	itte	lt
 800e7c6:	4249      	neglt	r1, r1
 800e7c8:	232d      	movlt	r3, #45	; 0x2d
 800e7ca:	232b      	movge	r3, #43	; 0x2b
 800e7cc:	2909      	cmp	r1, #9
 800e7ce:	f804 2b02 	strb.w	r2, [r4], #2
 800e7d2:	7043      	strb	r3, [r0, #1]
 800e7d4:	dd20      	ble.n	800e818 <__exponent+0x5a>
 800e7d6:	f10d 0307 	add.w	r3, sp, #7
 800e7da:	461f      	mov	r7, r3
 800e7dc:	260a      	movs	r6, #10
 800e7de:	fb91 f5f6 	sdiv	r5, r1, r6
 800e7e2:	fb06 1115 	mls	r1, r6, r5, r1
 800e7e6:	3130      	adds	r1, #48	; 0x30
 800e7e8:	2d09      	cmp	r5, #9
 800e7ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e7ee:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	dc09      	bgt.n	800e80a <__exponent+0x4c>
 800e7f6:	3130      	adds	r1, #48	; 0x30
 800e7f8:	3b02      	subs	r3, #2
 800e7fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e7fe:	42bb      	cmp	r3, r7
 800e800:	4622      	mov	r2, r4
 800e802:	d304      	bcc.n	800e80e <__exponent+0x50>
 800e804:	1a10      	subs	r0, r2, r0
 800e806:	b003      	add	sp, #12
 800e808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e80a:	4613      	mov	r3, r2
 800e80c:	e7e7      	b.n	800e7de <__exponent+0x20>
 800e80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e812:	f804 2b01 	strb.w	r2, [r4], #1
 800e816:	e7f2      	b.n	800e7fe <__exponent+0x40>
 800e818:	2330      	movs	r3, #48	; 0x30
 800e81a:	4419      	add	r1, r3
 800e81c:	7083      	strb	r3, [r0, #2]
 800e81e:	1d02      	adds	r2, r0, #4
 800e820:	70c1      	strb	r1, [r0, #3]
 800e822:	e7ef      	b.n	800e804 <__exponent+0x46>

0800e824 <_printf_float>:
 800e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	b08d      	sub	sp, #52	; 0x34
 800e82a:	460c      	mov	r4, r1
 800e82c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e830:	4616      	mov	r6, r2
 800e832:	461f      	mov	r7, r3
 800e834:	4605      	mov	r5, r0
 800e836:	f001 fce5 	bl	8010204 <_localeconv_r>
 800e83a:	6803      	ldr	r3, [r0, #0]
 800e83c:	9304      	str	r3, [sp, #16]
 800e83e:	4618      	mov	r0, r3
 800e840:	f7f1 fcee 	bl	8000220 <strlen>
 800e844:	2300      	movs	r3, #0
 800e846:	930a      	str	r3, [sp, #40]	; 0x28
 800e848:	f8d8 3000 	ldr.w	r3, [r8]
 800e84c:	9005      	str	r0, [sp, #20]
 800e84e:	3307      	adds	r3, #7
 800e850:	f023 0307 	bic.w	r3, r3, #7
 800e854:	f103 0208 	add.w	r2, r3, #8
 800e858:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e85c:	f8d4 b000 	ldr.w	fp, [r4]
 800e860:	f8c8 2000 	str.w	r2, [r8]
 800e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e868:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e86c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e870:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e874:	9307      	str	r3, [sp, #28]
 800e876:	f8cd 8018 	str.w	r8, [sp, #24]
 800e87a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e87e:	4ba7      	ldr	r3, [pc, #668]	; (800eb1c <_printf_float+0x2f8>)
 800e880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e884:	f7f2 f97a 	bl	8000b7c <__aeabi_dcmpun>
 800e888:	bb70      	cbnz	r0, 800e8e8 <_printf_float+0xc4>
 800e88a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e88e:	4ba3      	ldr	r3, [pc, #652]	; (800eb1c <_printf_float+0x2f8>)
 800e890:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e894:	f7f2 f954 	bl	8000b40 <__aeabi_dcmple>
 800e898:	bb30      	cbnz	r0, 800e8e8 <_printf_float+0xc4>
 800e89a:	2200      	movs	r2, #0
 800e89c:	2300      	movs	r3, #0
 800e89e:	4640      	mov	r0, r8
 800e8a0:	4649      	mov	r1, r9
 800e8a2:	f7f2 f943 	bl	8000b2c <__aeabi_dcmplt>
 800e8a6:	b110      	cbz	r0, 800e8ae <_printf_float+0x8a>
 800e8a8:	232d      	movs	r3, #45	; 0x2d
 800e8aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8ae:	4a9c      	ldr	r2, [pc, #624]	; (800eb20 <_printf_float+0x2fc>)
 800e8b0:	4b9c      	ldr	r3, [pc, #624]	; (800eb24 <_printf_float+0x300>)
 800e8b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e8b6:	bf8c      	ite	hi
 800e8b8:	4690      	movhi	r8, r2
 800e8ba:	4698      	movls	r8, r3
 800e8bc:	2303      	movs	r3, #3
 800e8be:	f02b 0204 	bic.w	r2, fp, #4
 800e8c2:	6123      	str	r3, [r4, #16]
 800e8c4:	6022      	str	r2, [r4, #0]
 800e8c6:	f04f 0900 	mov.w	r9, #0
 800e8ca:	9700      	str	r7, [sp, #0]
 800e8cc:	4633      	mov	r3, r6
 800e8ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800e8d0:	4621      	mov	r1, r4
 800e8d2:	4628      	mov	r0, r5
 800e8d4:	f000 f9e6 	bl	800eca4 <_printf_common>
 800e8d8:	3001      	adds	r0, #1
 800e8da:	f040 808d 	bne.w	800e9f8 <_printf_float+0x1d4>
 800e8de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8e2:	b00d      	add	sp, #52	; 0x34
 800e8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e8:	4642      	mov	r2, r8
 800e8ea:	464b      	mov	r3, r9
 800e8ec:	4640      	mov	r0, r8
 800e8ee:	4649      	mov	r1, r9
 800e8f0:	f7f2 f944 	bl	8000b7c <__aeabi_dcmpun>
 800e8f4:	b110      	cbz	r0, 800e8fc <_printf_float+0xd8>
 800e8f6:	4a8c      	ldr	r2, [pc, #560]	; (800eb28 <_printf_float+0x304>)
 800e8f8:	4b8c      	ldr	r3, [pc, #560]	; (800eb2c <_printf_float+0x308>)
 800e8fa:	e7da      	b.n	800e8b2 <_printf_float+0x8e>
 800e8fc:	6861      	ldr	r1, [r4, #4]
 800e8fe:	1c4b      	adds	r3, r1, #1
 800e900:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e904:	a80a      	add	r0, sp, #40	; 0x28
 800e906:	d13e      	bne.n	800e986 <_printf_float+0x162>
 800e908:	2306      	movs	r3, #6
 800e90a:	6063      	str	r3, [r4, #4]
 800e90c:	2300      	movs	r3, #0
 800e90e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e912:	ab09      	add	r3, sp, #36	; 0x24
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	ec49 8b10 	vmov	d0, r8, r9
 800e91a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e91e:	6022      	str	r2, [r4, #0]
 800e920:	f8cd a004 	str.w	sl, [sp, #4]
 800e924:	6861      	ldr	r1, [r4, #4]
 800e926:	4628      	mov	r0, r5
 800e928:	f7ff fee8 	bl	800e6fc <__cvt>
 800e92c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e930:	2b47      	cmp	r3, #71	; 0x47
 800e932:	4680      	mov	r8, r0
 800e934:	d109      	bne.n	800e94a <_printf_float+0x126>
 800e936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e938:	1cd8      	adds	r0, r3, #3
 800e93a:	db02      	blt.n	800e942 <_printf_float+0x11e>
 800e93c:	6862      	ldr	r2, [r4, #4]
 800e93e:	4293      	cmp	r3, r2
 800e940:	dd47      	ble.n	800e9d2 <_printf_float+0x1ae>
 800e942:	f1aa 0a02 	sub.w	sl, sl, #2
 800e946:	fa5f fa8a 	uxtb.w	sl, sl
 800e94a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e94e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e950:	d824      	bhi.n	800e99c <_printf_float+0x178>
 800e952:	3901      	subs	r1, #1
 800e954:	4652      	mov	r2, sl
 800e956:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e95a:	9109      	str	r1, [sp, #36]	; 0x24
 800e95c:	f7ff ff2f 	bl	800e7be <__exponent>
 800e960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e962:	1813      	adds	r3, r2, r0
 800e964:	2a01      	cmp	r2, #1
 800e966:	4681      	mov	r9, r0
 800e968:	6123      	str	r3, [r4, #16]
 800e96a:	dc02      	bgt.n	800e972 <_printf_float+0x14e>
 800e96c:	6822      	ldr	r2, [r4, #0]
 800e96e:	07d1      	lsls	r1, r2, #31
 800e970:	d501      	bpl.n	800e976 <_printf_float+0x152>
 800e972:	3301      	adds	r3, #1
 800e974:	6123      	str	r3, [r4, #16]
 800e976:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d0a5      	beq.n	800e8ca <_printf_float+0xa6>
 800e97e:	232d      	movs	r3, #45	; 0x2d
 800e980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e984:	e7a1      	b.n	800e8ca <_printf_float+0xa6>
 800e986:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e98a:	f000 8177 	beq.w	800ec7c <_printf_float+0x458>
 800e98e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e992:	d1bb      	bne.n	800e90c <_printf_float+0xe8>
 800e994:	2900      	cmp	r1, #0
 800e996:	d1b9      	bne.n	800e90c <_printf_float+0xe8>
 800e998:	2301      	movs	r3, #1
 800e99a:	e7b6      	b.n	800e90a <_printf_float+0xe6>
 800e99c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e9a0:	d119      	bne.n	800e9d6 <_printf_float+0x1b2>
 800e9a2:	2900      	cmp	r1, #0
 800e9a4:	6863      	ldr	r3, [r4, #4]
 800e9a6:	dd0c      	ble.n	800e9c2 <_printf_float+0x19e>
 800e9a8:	6121      	str	r1, [r4, #16]
 800e9aa:	b913      	cbnz	r3, 800e9b2 <_printf_float+0x18e>
 800e9ac:	6822      	ldr	r2, [r4, #0]
 800e9ae:	07d2      	lsls	r2, r2, #31
 800e9b0:	d502      	bpl.n	800e9b8 <_printf_float+0x194>
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	440b      	add	r3, r1
 800e9b6:	6123      	str	r3, [r4, #16]
 800e9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ba:	65a3      	str	r3, [r4, #88]	; 0x58
 800e9bc:	f04f 0900 	mov.w	r9, #0
 800e9c0:	e7d9      	b.n	800e976 <_printf_float+0x152>
 800e9c2:	b913      	cbnz	r3, 800e9ca <_printf_float+0x1a6>
 800e9c4:	6822      	ldr	r2, [r4, #0]
 800e9c6:	07d0      	lsls	r0, r2, #31
 800e9c8:	d501      	bpl.n	800e9ce <_printf_float+0x1aa>
 800e9ca:	3302      	adds	r3, #2
 800e9cc:	e7f3      	b.n	800e9b6 <_printf_float+0x192>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e7f1      	b.n	800e9b6 <_printf_float+0x192>
 800e9d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e9d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	db05      	blt.n	800e9ea <_printf_float+0x1c6>
 800e9de:	6822      	ldr	r2, [r4, #0]
 800e9e0:	6123      	str	r3, [r4, #16]
 800e9e2:	07d1      	lsls	r1, r2, #31
 800e9e4:	d5e8      	bpl.n	800e9b8 <_printf_float+0x194>
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	e7e5      	b.n	800e9b6 <_printf_float+0x192>
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	bfd4      	ite	le
 800e9ee:	f1c3 0302 	rsble	r3, r3, #2
 800e9f2:	2301      	movgt	r3, #1
 800e9f4:	4413      	add	r3, r2
 800e9f6:	e7de      	b.n	800e9b6 <_printf_float+0x192>
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	055a      	lsls	r2, r3, #21
 800e9fc:	d407      	bmi.n	800ea0e <_printf_float+0x1ea>
 800e9fe:	6923      	ldr	r3, [r4, #16]
 800ea00:	4642      	mov	r2, r8
 800ea02:	4631      	mov	r1, r6
 800ea04:	4628      	mov	r0, r5
 800ea06:	47b8      	blx	r7
 800ea08:	3001      	adds	r0, #1
 800ea0a:	d12b      	bne.n	800ea64 <_printf_float+0x240>
 800ea0c:	e767      	b.n	800e8de <_printf_float+0xba>
 800ea0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ea12:	f240 80dc 	bls.w	800ebce <_printf_float+0x3aa>
 800ea16:	2200      	movs	r2, #0
 800ea18:	2300      	movs	r3, #0
 800ea1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea1e:	f7f2 f87b 	bl	8000b18 <__aeabi_dcmpeq>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d033      	beq.n	800ea8e <_printf_float+0x26a>
 800ea26:	2301      	movs	r3, #1
 800ea28:	4a41      	ldr	r2, [pc, #260]	; (800eb30 <_printf_float+0x30c>)
 800ea2a:	4631      	mov	r1, r6
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	47b8      	blx	r7
 800ea30:	3001      	adds	r0, #1
 800ea32:	f43f af54 	beq.w	800e8de <_printf_float+0xba>
 800ea36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	db02      	blt.n	800ea44 <_printf_float+0x220>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	07d8      	lsls	r0, r3, #31
 800ea42:	d50f      	bpl.n	800ea64 <_printf_float+0x240>
 800ea44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea48:	4631      	mov	r1, r6
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	47b8      	blx	r7
 800ea4e:	3001      	adds	r0, #1
 800ea50:	f43f af45 	beq.w	800e8de <_printf_float+0xba>
 800ea54:	f04f 0800 	mov.w	r8, #0
 800ea58:	f104 091a 	add.w	r9, r4, #26
 800ea5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	4543      	cmp	r3, r8
 800ea62:	dc09      	bgt.n	800ea78 <_printf_float+0x254>
 800ea64:	6823      	ldr	r3, [r4, #0]
 800ea66:	079b      	lsls	r3, r3, #30
 800ea68:	f100 8103 	bmi.w	800ec72 <_printf_float+0x44e>
 800ea6c:	68e0      	ldr	r0, [r4, #12]
 800ea6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea70:	4298      	cmp	r0, r3
 800ea72:	bfb8      	it	lt
 800ea74:	4618      	movlt	r0, r3
 800ea76:	e734      	b.n	800e8e2 <_printf_float+0xbe>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	464a      	mov	r2, r9
 800ea7c:	4631      	mov	r1, r6
 800ea7e:	4628      	mov	r0, r5
 800ea80:	47b8      	blx	r7
 800ea82:	3001      	adds	r0, #1
 800ea84:	f43f af2b 	beq.w	800e8de <_printf_float+0xba>
 800ea88:	f108 0801 	add.w	r8, r8, #1
 800ea8c:	e7e6      	b.n	800ea5c <_printf_float+0x238>
 800ea8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	dc2b      	bgt.n	800eaec <_printf_float+0x2c8>
 800ea94:	2301      	movs	r3, #1
 800ea96:	4a26      	ldr	r2, [pc, #152]	; (800eb30 <_printf_float+0x30c>)
 800ea98:	4631      	mov	r1, r6
 800ea9a:	4628      	mov	r0, r5
 800ea9c:	47b8      	blx	r7
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	f43f af1d 	beq.w	800e8de <_printf_float+0xba>
 800eaa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaa6:	b923      	cbnz	r3, 800eab2 <_printf_float+0x28e>
 800eaa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaaa:	b913      	cbnz	r3, 800eab2 <_printf_float+0x28e>
 800eaac:	6823      	ldr	r3, [r4, #0]
 800eaae:	07d9      	lsls	r1, r3, #31
 800eab0:	d5d8      	bpl.n	800ea64 <_printf_float+0x240>
 800eab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eab6:	4631      	mov	r1, r6
 800eab8:	4628      	mov	r0, r5
 800eaba:	47b8      	blx	r7
 800eabc:	3001      	adds	r0, #1
 800eabe:	f43f af0e 	beq.w	800e8de <_printf_float+0xba>
 800eac2:	f04f 0900 	mov.w	r9, #0
 800eac6:	f104 0a1a 	add.w	sl, r4, #26
 800eaca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eacc:	425b      	negs	r3, r3
 800eace:	454b      	cmp	r3, r9
 800ead0:	dc01      	bgt.n	800ead6 <_printf_float+0x2b2>
 800ead2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ead4:	e794      	b.n	800ea00 <_printf_float+0x1dc>
 800ead6:	2301      	movs	r3, #1
 800ead8:	4652      	mov	r2, sl
 800eada:	4631      	mov	r1, r6
 800eadc:	4628      	mov	r0, r5
 800eade:	47b8      	blx	r7
 800eae0:	3001      	adds	r0, #1
 800eae2:	f43f aefc 	beq.w	800e8de <_printf_float+0xba>
 800eae6:	f109 0901 	add.w	r9, r9, #1
 800eaea:	e7ee      	b.n	800eaca <_printf_float+0x2a6>
 800eaec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	bfa8      	it	ge
 800eaf4:	461a      	movge	r2, r3
 800eaf6:	2a00      	cmp	r2, #0
 800eaf8:	4691      	mov	r9, r2
 800eafa:	dd07      	ble.n	800eb0c <_printf_float+0x2e8>
 800eafc:	4613      	mov	r3, r2
 800eafe:	4631      	mov	r1, r6
 800eb00:	4642      	mov	r2, r8
 800eb02:	4628      	mov	r0, r5
 800eb04:	47b8      	blx	r7
 800eb06:	3001      	adds	r0, #1
 800eb08:	f43f aee9 	beq.w	800e8de <_printf_float+0xba>
 800eb0c:	f104 031a 	add.w	r3, r4, #26
 800eb10:	f04f 0b00 	mov.w	fp, #0
 800eb14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb18:	9306      	str	r3, [sp, #24]
 800eb1a:	e015      	b.n	800eb48 <_printf_float+0x324>
 800eb1c:	7fefffff 	.word	0x7fefffff
 800eb20:	08012530 	.word	0x08012530
 800eb24:	0801252c 	.word	0x0801252c
 800eb28:	08012538 	.word	0x08012538
 800eb2c:	08012534 	.word	0x08012534
 800eb30:	0801253c 	.word	0x0801253c
 800eb34:	2301      	movs	r3, #1
 800eb36:	9a06      	ldr	r2, [sp, #24]
 800eb38:	4631      	mov	r1, r6
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	47b8      	blx	r7
 800eb3e:	3001      	adds	r0, #1
 800eb40:	f43f aecd 	beq.w	800e8de <_printf_float+0xba>
 800eb44:	f10b 0b01 	add.w	fp, fp, #1
 800eb48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800eb4c:	ebaa 0309 	sub.w	r3, sl, r9
 800eb50:	455b      	cmp	r3, fp
 800eb52:	dcef      	bgt.n	800eb34 <_printf_float+0x310>
 800eb54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	44d0      	add	r8, sl
 800eb5c:	db15      	blt.n	800eb8a <_printf_float+0x366>
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	07da      	lsls	r2, r3, #31
 800eb62:	d412      	bmi.n	800eb8a <_printf_float+0x366>
 800eb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb68:	eba3 020a 	sub.w	r2, r3, sl
 800eb6c:	eba3 0a01 	sub.w	sl, r3, r1
 800eb70:	4592      	cmp	sl, r2
 800eb72:	bfa8      	it	ge
 800eb74:	4692      	movge	sl, r2
 800eb76:	f1ba 0f00 	cmp.w	sl, #0
 800eb7a:	dc0e      	bgt.n	800eb9a <_printf_float+0x376>
 800eb7c:	f04f 0800 	mov.w	r8, #0
 800eb80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb84:	f104 091a 	add.w	r9, r4, #26
 800eb88:	e019      	b.n	800ebbe <_printf_float+0x39a>
 800eb8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb8e:	4631      	mov	r1, r6
 800eb90:	4628      	mov	r0, r5
 800eb92:	47b8      	blx	r7
 800eb94:	3001      	adds	r0, #1
 800eb96:	d1e5      	bne.n	800eb64 <_printf_float+0x340>
 800eb98:	e6a1      	b.n	800e8de <_printf_float+0xba>
 800eb9a:	4653      	mov	r3, sl
 800eb9c:	4642      	mov	r2, r8
 800eb9e:	4631      	mov	r1, r6
 800eba0:	4628      	mov	r0, r5
 800eba2:	47b8      	blx	r7
 800eba4:	3001      	adds	r0, #1
 800eba6:	d1e9      	bne.n	800eb7c <_printf_float+0x358>
 800eba8:	e699      	b.n	800e8de <_printf_float+0xba>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	464a      	mov	r2, r9
 800ebae:	4631      	mov	r1, r6
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	47b8      	blx	r7
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	f43f ae92 	beq.w	800e8de <_printf_float+0xba>
 800ebba:	f108 0801 	add.w	r8, r8, #1
 800ebbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebc2:	1a9b      	subs	r3, r3, r2
 800ebc4:	eba3 030a 	sub.w	r3, r3, sl
 800ebc8:	4543      	cmp	r3, r8
 800ebca:	dcee      	bgt.n	800ebaa <_printf_float+0x386>
 800ebcc:	e74a      	b.n	800ea64 <_printf_float+0x240>
 800ebce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebd0:	2a01      	cmp	r2, #1
 800ebd2:	dc01      	bgt.n	800ebd8 <_printf_float+0x3b4>
 800ebd4:	07db      	lsls	r3, r3, #31
 800ebd6:	d53a      	bpl.n	800ec4e <_printf_float+0x42a>
 800ebd8:	2301      	movs	r3, #1
 800ebda:	4642      	mov	r2, r8
 800ebdc:	4631      	mov	r1, r6
 800ebde:	4628      	mov	r0, r5
 800ebe0:	47b8      	blx	r7
 800ebe2:	3001      	adds	r0, #1
 800ebe4:	f43f ae7b 	beq.w	800e8de <_printf_float+0xba>
 800ebe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebec:	4631      	mov	r1, r6
 800ebee:	4628      	mov	r0, r5
 800ebf0:	47b8      	blx	r7
 800ebf2:	3001      	adds	r0, #1
 800ebf4:	f108 0801 	add.w	r8, r8, #1
 800ebf8:	f43f ae71 	beq.w	800e8de <_printf_float+0xba>
 800ebfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800ec04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec08:	2300      	movs	r3, #0
 800ec0a:	f7f1 ff85 	bl	8000b18 <__aeabi_dcmpeq>
 800ec0e:	b9c8      	cbnz	r0, 800ec44 <_printf_float+0x420>
 800ec10:	4653      	mov	r3, sl
 800ec12:	4642      	mov	r2, r8
 800ec14:	4631      	mov	r1, r6
 800ec16:	4628      	mov	r0, r5
 800ec18:	47b8      	blx	r7
 800ec1a:	3001      	adds	r0, #1
 800ec1c:	d10e      	bne.n	800ec3c <_printf_float+0x418>
 800ec1e:	e65e      	b.n	800e8de <_printf_float+0xba>
 800ec20:	2301      	movs	r3, #1
 800ec22:	4652      	mov	r2, sl
 800ec24:	4631      	mov	r1, r6
 800ec26:	4628      	mov	r0, r5
 800ec28:	47b8      	blx	r7
 800ec2a:	3001      	adds	r0, #1
 800ec2c:	f43f ae57 	beq.w	800e8de <_printf_float+0xba>
 800ec30:	f108 0801 	add.w	r8, r8, #1
 800ec34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec36:	3b01      	subs	r3, #1
 800ec38:	4543      	cmp	r3, r8
 800ec3a:	dcf1      	bgt.n	800ec20 <_printf_float+0x3fc>
 800ec3c:	464b      	mov	r3, r9
 800ec3e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec42:	e6de      	b.n	800ea02 <_printf_float+0x1de>
 800ec44:	f04f 0800 	mov.w	r8, #0
 800ec48:	f104 0a1a 	add.w	sl, r4, #26
 800ec4c:	e7f2      	b.n	800ec34 <_printf_float+0x410>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e7df      	b.n	800ec12 <_printf_float+0x3ee>
 800ec52:	2301      	movs	r3, #1
 800ec54:	464a      	mov	r2, r9
 800ec56:	4631      	mov	r1, r6
 800ec58:	4628      	mov	r0, r5
 800ec5a:	47b8      	blx	r7
 800ec5c:	3001      	adds	r0, #1
 800ec5e:	f43f ae3e 	beq.w	800e8de <_printf_float+0xba>
 800ec62:	f108 0801 	add.w	r8, r8, #1
 800ec66:	68e3      	ldr	r3, [r4, #12]
 800ec68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec6a:	1a9b      	subs	r3, r3, r2
 800ec6c:	4543      	cmp	r3, r8
 800ec6e:	dcf0      	bgt.n	800ec52 <_printf_float+0x42e>
 800ec70:	e6fc      	b.n	800ea6c <_printf_float+0x248>
 800ec72:	f04f 0800 	mov.w	r8, #0
 800ec76:	f104 0919 	add.w	r9, r4, #25
 800ec7a:	e7f4      	b.n	800ec66 <_printf_float+0x442>
 800ec7c:	2900      	cmp	r1, #0
 800ec7e:	f43f ae8b 	beq.w	800e998 <_printf_float+0x174>
 800ec82:	2300      	movs	r3, #0
 800ec84:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ec88:	ab09      	add	r3, sp, #36	; 0x24
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	ec49 8b10 	vmov	d0, r8, r9
 800ec90:	6022      	str	r2, [r4, #0]
 800ec92:	f8cd a004 	str.w	sl, [sp, #4]
 800ec96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	f7ff fd2e 	bl	800e6fc <__cvt>
 800eca0:	4680      	mov	r8, r0
 800eca2:	e648      	b.n	800e936 <_printf_float+0x112>

0800eca4 <_printf_common>:
 800eca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eca8:	4691      	mov	r9, r2
 800ecaa:	461f      	mov	r7, r3
 800ecac:	688a      	ldr	r2, [r1, #8]
 800ecae:	690b      	ldr	r3, [r1, #16]
 800ecb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	bfb8      	it	lt
 800ecb8:	4613      	movlt	r3, r2
 800ecba:	f8c9 3000 	str.w	r3, [r9]
 800ecbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecc2:	4606      	mov	r6, r0
 800ecc4:	460c      	mov	r4, r1
 800ecc6:	b112      	cbz	r2, 800ecce <_printf_common+0x2a>
 800ecc8:	3301      	adds	r3, #1
 800ecca:	f8c9 3000 	str.w	r3, [r9]
 800ecce:	6823      	ldr	r3, [r4, #0]
 800ecd0:	0699      	lsls	r1, r3, #26
 800ecd2:	bf42      	ittt	mi
 800ecd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ecd8:	3302      	addmi	r3, #2
 800ecda:	f8c9 3000 	strmi.w	r3, [r9]
 800ecde:	6825      	ldr	r5, [r4, #0]
 800ece0:	f015 0506 	ands.w	r5, r5, #6
 800ece4:	d107      	bne.n	800ecf6 <_printf_common+0x52>
 800ece6:	f104 0a19 	add.w	sl, r4, #25
 800ecea:	68e3      	ldr	r3, [r4, #12]
 800ecec:	f8d9 2000 	ldr.w	r2, [r9]
 800ecf0:	1a9b      	subs	r3, r3, r2
 800ecf2:	42ab      	cmp	r3, r5
 800ecf4:	dc28      	bgt.n	800ed48 <_printf_common+0xa4>
 800ecf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ecfa:	6822      	ldr	r2, [r4, #0]
 800ecfc:	3300      	adds	r3, #0
 800ecfe:	bf18      	it	ne
 800ed00:	2301      	movne	r3, #1
 800ed02:	0692      	lsls	r2, r2, #26
 800ed04:	d42d      	bmi.n	800ed62 <_printf_common+0xbe>
 800ed06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	47c0      	blx	r8
 800ed10:	3001      	adds	r0, #1
 800ed12:	d020      	beq.n	800ed56 <_printf_common+0xb2>
 800ed14:	6823      	ldr	r3, [r4, #0]
 800ed16:	68e5      	ldr	r5, [r4, #12]
 800ed18:	f8d9 2000 	ldr.w	r2, [r9]
 800ed1c:	f003 0306 	and.w	r3, r3, #6
 800ed20:	2b04      	cmp	r3, #4
 800ed22:	bf08      	it	eq
 800ed24:	1aad      	subeq	r5, r5, r2
 800ed26:	68a3      	ldr	r3, [r4, #8]
 800ed28:	6922      	ldr	r2, [r4, #16]
 800ed2a:	bf0c      	ite	eq
 800ed2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed30:	2500      	movne	r5, #0
 800ed32:	4293      	cmp	r3, r2
 800ed34:	bfc4      	itt	gt
 800ed36:	1a9b      	subgt	r3, r3, r2
 800ed38:	18ed      	addgt	r5, r5, r3
 800ed3a:	f04f 0900 	mov.w	r9, #0
 800ed3e:	341a      	adds	r4, #26
 800ed40:	454d      	cmp	r5, r9
 800ed42:	d11a      	bne.n	800ed7a <_printf_common+0xd6>
 800ed44:	2000      	movs	r0, #0
 800ed46:	e008      	b.n	800ed5a <_printf_common+0xb6>
 800ed48:	2301      	movs	r3, #1
 800ed4a:	4652      	mov	r2, sl
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	4630      	mov	r0, r6
 800ed50:	47c0      	blx	r8
 800ed52:	3001      	adds	r0, #1
 800ed54:	d103      	bne.n	800ed5e <_printf_common+0xba>
 800ed56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5e:	3501      	adds	r5, #1
 800ed60:	e7c3      	b.n	800ecea <_printf_common+0x46>
 800ed62:	18e1      	adds	r1, r4, r3
 800ed64:	1c5a      	adds	r2, r3, #1
 800ed66:	2030      	movs	r0, #48	; 0x30
 800ed68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed6c:	4422      	add	r2, r4
 800ed6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed76:	3302      	adds	r3, #2
 800ed78:	e7c5      	b.n	800ed06 <_printf_common+0x62>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	4622      	mov	r2, r4
 800ed7e:	4639      	mov	r1, r7
 800ed80:	4630      	mov	r0, r6
 800ed82:	47c0      	blx	r8
 800ed84:	3001      	adds	r0, #1
 800ed86:	d0e6      	beq.n	800ed56 <_printf_common+0xb2>
 800ed88:	f109 0901 	add.w	r9, r9, #1
 800ed8c:	e7d8      	b.n	800ed40 <_printf_common+0x9c>
	...

0800ed90 <_printf_i>:
 800ed90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ed98:	460c      	mov	r4, r1
 800ed9a:	7e09      	ldrb	r1, [r1, #24]
 800ed9c:	b085      	sub	sp, #20
 800ed9e:	296e      	cmp	r1, #110	; 0x6e
 800eda0:	4617      	mov	r7, r2
 800eda2:	4606      	mov	r6, r0
 800eda4:	4698      	mov	r8, r3
 800eda6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eda8:	f000 80b3 	beq.w	800ef12 <_printf_i+0x182>
 800edac:	d822      	bhi.n	800edf4 <_printf_i+0x64>
 800edae:	2963      	cmp	r1, #99	; 0x63
 800edb0:	d036      	beq.n	800ee20 <_printf_i+0x90>
 800edb2:	d80a      	bhi.n	800edca <_printf_i+0x3a>
 800edb4:	2900      	cmp	r1, #0
 800edb6:	f000 80b9 	beq.w	800ef2c <_printf_i+0x19c>
 800edba:	2958      	cmp	r1, #88	; 0x58
 800edbc:	f000 8083 	beq.w	800eec6 <_printf_i+0x136>
 800edc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800edc8:	e032      	b.n	800ee30 <_printf_i+0xa0>
 800edca:	2964      	cmp	r1, #100	; 0x64
 800edcc:	d001      	beq.n	800edd2 <_printf_i+0x42>
 800edce:	2969      	cmp	r1, #105	; 0x69
 800edd0:	d1f6      	bne.n	800edc0 <_printf_i+0x30>
 800edd2:	6820      	ldr	r0, [r4, #0]
 800edd4:	6813      	ldr	r3, [r2, #0]
 800edd6:	0605      	lsls	r5, r0, #24
 800edd8:	f103 0104 	add.w	r1, r3, #4
 800eddc:	d52a      	bpl.n	800ee34 <_printf_i+0xa4>
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	6011      	str	r1, [r2, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	da03      	bge.n	800edee <_printf_i+0x5e>
 800ede6:	222d      	movs	r2, #45	; 0x2d
 800ede8:	425b      	negs	r3, r3
 800edea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800edee:	486f      	ldr	r0, [pc, #444]	; (800efac <_printf_i+0x21c>)
 800edf0:	220a      	movs	r2, #10
 800edf2:	e039      	b.n	800ee68 <_printf_i+0xd8>
 800edf4:	2973      	cmp	r1, #115	; 0x73
 800edf6:	f000 809d 	beq.w	800ef34 <_printf_i+0x1a4>
 800edfa:	d808      	bhi.n	800ee0e <_printf_i+0x7e>
 800edfc:	296f      	cmp	r1, #111	; 0x6f
 800edfe:	d020      	beq.n	800ee42 <_printf_i+0xb2>
 800ee00:	2970      	cmp	r1, #112	; 0x70
 800ee02:	d1dd      	bne.n	800edc0 <_printf_i+0x30>
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	f043 0320 	orr.w	r3, r3, #32
 800ee0a:	6023      	str	r3, [r4, #0]
 800ee0c:	e003      	b.n	800ee16 <_printf_i+0x86>
 800ee0e:	2975      	cmp	r1, #117	; 0x75
 800ee10:	d017      	beq.n	800ee42 <_printf_i+0xb2>
 800ee12:	2978      	cmp	r1, #120	; 0x78
 800ee14:	d1d4      	bne.n	800edc0 <_printf_i+0x30>
 800ee16:	2378      	movs	r3, #120	; 0x78
 800ee18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee1c:	4864      	ldr	r0, [pc, #400]	; (800efb0 <_printf_i+0x220>)
 800ee1e:	e055      	b.n	800eecc <_printf_i+0x13c>
 800ee20:	6813      	ldr	r3, [r2, #0]
 800ee22:	1d19      	adds	r1, r3, #4
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	6011      	str	r1, [r2, #0]
 800ee28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee30:	2301      	movs	r3, #1
 800ee32:	e08c      	b.n	800ef4e <_printf_i+0x1be>
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6011      	str	r1, [r2, #0]
 800ee38:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee3c:	bf18      	it	ne
 800ee3e:	b21b      	sxthne	r3, r3
 800ee40:	e7cf      	b.n	800ede2 <_printf_i+0x52>
 800ee42:	6813      	ldr	r3, [r2, #0]
 800ee44:	6825      	ldr	r5, [r4, #0]
 800ee46:	1d18      	adds	r0, r3, #4
 800ee48:	6010      	str	r0, [r2, #0]
 800ee4a:	0628      	lsls	r0, r5, #24
 800ee4c:	d501      	bpl.n	800ee52 <_printf_i+0xc2>
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	e002      	b.n	800ee58 <_printf_i+0xc8>
 800ee52:	0668      	lsls	r0, r5, #25
 800ee54:	d5fb      	bpl.n	800ee4e <_printf_i+0xbe>
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	4854      	ldr	r0, [pc, #336]	; (800efac <_printf_i+0x21c>)
 800ee5a:	296f      	cmp	r1, #111	; 0x6f
 800ee5c:	bf14      	ite	ne
 800ee5e:	220a      	movne	r2, #10
 800ee60:	2208      	moveq	r2, #8
 800ee62:	2100      	movs	r1, #0
 800ee64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee68:	6865      	ldr	r5, [r4, #4]
 800ee6a:	60a5      	str	r5, [r4, #8]
 800ee6c:	2d00      	cmp	r5, #0
 800ee6e:	f2c0 8095 	blt.w	800ef9c <_printf_i+0x20c>
 800ee72:	6821      	ldr	r1, [r4, #0]
 800ee74:	f021 0104 	bic.w	r1, r1, #4
 800ee78:	6021      	str	r1, [r4, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d13d      	bne.n	800eefa <_printf_i+0x16a>
 800ee7e:	2d00      	cmp	r5, #0
 800ee80:	f040 808e 	bne.w	800efa0 <_printf_i+0x210>
 800ee84:	4665      	mov	r5, ip
 800ee86:	2a08      	cmp	r2, #8
 800ee88:	d10b      	bne.n	800eea2 <_printf_i+0x112>
 800ee8a:	6823      	ldr	r3, [r4, #0]
 800ee8c:	07db      	lsls	r3, r3, #31
 800ee8e:	d508      	bpl.n	800eea2 <_printf_i+0x112>
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	6862      	ldr	r2, [r4, #4]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	bfde      	ittt	le
 800ee98:	2330      	movle	r3, #48	; 0x30
 800ee9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800eea2:	ebac 0305 	sub.w	r3, ip, r5
 800eea6:	6123      	str	r3, [r4, #16]
 800eea8:	f8cd 8000 	str.w	r8, [sp]
 800eeac:	463b      	mov	r3, r7
 800eeae:	aa03      	add	r2, sp, #12
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7ff fef6 	bl	800eca4 <_printf_common>
 800eeb8:	3001      	adds	r0, #1
 800eeba:	d14d      	bne.n	800ef58 <_printf_i+0x1c8>
 800eebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eec0:	b005      	add	sp, #20
 800eec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eec6:	4839      	ldr	r0, [pc, #228]	; (800efac <_printf_i+0x21c>)
 800eec8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800eecc:	6813      	ldr	r3, [r2, #0]
 800eece:	6821      	ldr	r1, [r4, #0]
 800eed0:	1d1d      	adds	r5, r3, #4
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	6015      	str	r5, [r2, #0]
 800eed6:	060a      	lsls	r2, r1, #24
 800eed8:	d50b      	bpl.n	800eef2 <_printf_i+0x162>
 800eeda:	07ca      	lsls	r2, r1, #31
 800eedc:	bf44      	itt	mi
 800eede:	f041 0120 	orrmi.w	r1, r1, #32
 800eee2:	6021      	strmi	r1, [r4, #0]
 800eee4:	b91b      	cbnz	r3, 800eeee <_printf_i+0x15e>
 800eee6:	6822      	ldr	r2, [r4, #0]
 800eee8:	f022 0220 	bic.w	r2, r2, #32
 800eeec:	6022      	str	r2, [r4, #0]
 800eeee:	2210      	movs	r2, #16
 800eef0:	e7b7      	b.n	800ee62 <_printf_i+0xd2>
 800eef2:	064d      	lsls	r5, r1, #25
 800eef4:	bf48      	it	mi
 800eef6:	b29b      	uxthmi	r3, r3
 800eef8:	e7ef      	b.n	800eeda <_printf_i+0x14a>
 800eefa:	4665      	mov	r5, ip
 800eefc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef00:	fb02 3311 	mls	r3, r2, r1, r3
 800ef04:	5cc3      	ldrb	r3, [r0, r3]
 800ef06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	2900      	cmp	r1, #0
 800ef0e:	d1f5      	bne.n	800eefc <_printf_i+0x16c>
 800ef10:	e7b9      	b.n	800ee86 <_printf_i+0xf6>
 800ef12:	6813      	ldr	r3, [r2, #0]
 800ef14:	6825      	ldr	r5, [r4, #0]
 800ef16:	6961      	ldr	r1, [r4, #20]
 800ef18:	1d18      	adds	r0, r3, #4
 800ef1a:	6010      	str	r0, [r2, #0]
 800ef1c:	0628      	lsls	r0, r5, #24
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	d501      	bpl.n	800ef26 <_printf_i+0x196>
 800ef22:	6019      	str	r1, [r3, #0]
 800ef24:	e002      	b.n	800ef2c <_printf_i+0x19c>
 800ef26:	066a      	lsls	r2, r5, #25
 800ef28:	d5fb      	bpl.n	800ef22 <_printf_i+0x192>
 800ef2a:	8019      	strh	r1, [r3, #0]
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	6123      	str	r3, [r4, #16]
 800ef30:	4665      	mov	r5, ip
 800ef32:	e7b9      	b.n	800eea8 <_printf_i+0x118>
 800ef34:	6813      	ldr	r3, [r2, #0]
 800ef36:	1d19      	adds	r1, r3, #4
 800ef38:	6011      	str	r1, [r2, #0]
 800ef3a:	681d      	ldr	r5, [r3, #0]
 800ef3c:	6862      	ldr	r2, [r4, #4]
 800ef3e:	2100      	movs	r1, #0
 800ef40:	4628      	mov	r0, r5
 800ef42:	f7f1 f975 	bl	8000230 <memchr>
 800ef46:	b108      	cbz	r0, 800ef4c <_printf_i+0x1bc>
 800ef48:	1b40      	subs	r0, r0, r5
 800ef4a:	6060      	str	r0, [r4, #4]
 800ef4c:	6863      	ldr	r3, [r4, #4]
 800ef4e:	6123      	str	r3, [r4, #16]
 800ef50:	2300      	movs	r3, #0
 800ef52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef56:	e7a7      	b.n	800eea8 <_printf_i+0x118>
 800ef58:	6923      	ldr	r3, [r4, #16]
 800ef5a:	462a      	mov	r2, r5
 800ef5c:	4639      	mov	r1, r7
 800ef5e:	4630      	mov	r0, r6
 800ef60:	47c0      	blx	r8
 800ef62:	3001      	adds	r0, #1
 800ef64:	d0aa      	beq.n	800eebc <_printf_i+0x12c>
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	079b      	lsls	r3, r3, #30
 800ef6a:	d413      	bmi.n	800ef94 <_printf_i+0x204>
 800ef6c:	68e0      	ldr	r0, [r4, #12]
 800ef6e:	9b03      	ldr	r3, [sp, #12]
 800ef70:	4298      	cmp	r0, r3
 800ef72:	bfb8      	it	lt
 800ef74:	4618      	movlt	r0, r3
 800ef76:	e7a3      	b.n	800eec0 <_printf_i+0x130>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	464a      	mov	r2, r9
 800ef7c:	4639      	mov	r1, r7
 800ef7e:	4630      	mov	r0, r6
 800ef80:	47c0      	blx	r8
 800ef82:	3001      	adds	r0, #1
 800ef84:	d09a      	beq.n	800eebc <_printf_i+0x12c>
 800ef86:	3501      	adds	r5, #1
 800ef88:	68e3      	ldr	r3, [r4, #12]
 800ef8a:	9a03      	ldr	r2, [sp, #12]
 800ef8c:	1a9b      	subs	r3, r3, r2
 800ef8e:	42ab      	cmp	r3, r5
 800ef90:	dcf2      	bgt.n	800ef78 <_printf_i+0x1e8>
 800ef92:	e7eb      	b.n	800ef6c <_printf_i+0x1dc>
 800ef94:	2500      	movs	r5, #0
 800ef96:	f104 0919 	add.w	r9, r4, #25
 800ef9a:	e7f5      	b.n	800ef88 <_printf_i+0x1f8>
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d1ac      	bne.n	800eefa <_printf_i+0x16a>
 800efa0:	7803      	ldrb	r3, [r0, #0]
 800efa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efaa:	e76c      	b.n	800ee86 <_printf_i+0xf6>
 800efac:	0801253e 	.word	0x0801253e
 800efb0:	0801254f 	.word	0x0801254f

0800efb4 <_puts_r>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	460e      	mov	r6, r1
 800efb8:	4605      	mov	r5, r0
 800efba:	b118      	cbz	r0, 800efc4 <_puts_r+0x10>
 800efbc:	6983      	ldr	r3, [r0, #24]
 800efbe:	b90b      	cbnz	r3, 800efc4 <_puts_r+0x10>
 800efc0:	f001 f896 	bl	80100f0 <__sinit>
 800efc4:	69ab      	ldr	r3, [r5, #24]
 800efc6:	68ac      	ldr	r4, [r5, #8]
 800efc8:	b913      	cbnz	r3, 800efd0 <_puts_r+0x1c>
 800efca:	4628      	mov	r0, r5
 800efcc:	f001 f890 	bl	80100f0 <__sinit>
 800efd0:	4b23      	ldr	r3, [pc, #140]	; (800f060 <_puts_r+0xac>)
 800efd2:	429c      	cmp	r4, r3
 800efd4:	d117      	bne.n	800f006 <_puts_r+0x52>
 800efd6:	686c      	ldr	r4, [r5, #4]
 800efd8:	89a3      	ldrh	r3, [r4, #12]
 800efda:	071b      	lsls	r3, r3, #28
 800efdc:	d51d      	bpl.n	800f01a <_puts_r+0x66>
 800efde:	6923      	ldr	r3, [r4, #16]
 800efe0:	b1db      	cbz	r3, 800f01a <_puts_r+0x66>
 800efe2:	3e01      	subs	r6, #1
 800efe4:	68a3      	ldr	r3, [r4, #8]
 800efe6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800efea:	3b01      	subs	r3, #1
 800efec:	60a3      	str	r3, [r4, #8]
 800efee:	b9e9      	cbnz	r1, 800f02c <_puts_r+0x78>
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	da2e      	bge.n	800f052 <_puts_r+0x9e>
 800eff4:	4622      	mov	r2, r4
 800eff6:	210a      	movs	r1, #10
 800eff8:	4628      	mov	r0, r5
 800effa:	f000 f883 	bl	800f104 <__swbuf_r>
 800effe:	3001      	adds	r0, #1
 800f000:	d011      	beq.n	800f026 <_puts_r+0x72>
 800f002:	200a      	movs	r0, #10
 800f004:	e011      	b.n	800f02a <_puts_r+0x76>
 800f006:	4b17      	ldr	r3, [pc, #92]	; (800f064 <_puts_r+0xb0>)
 800f008:	429c      	cmp	r4, r3
 800f00a:	d101      	bne.n	800f010 <_puts_r+0x5c>
 800f00c:	68ac      	ldr	r4, [r5, #8]
 800f00e:	e7e3      	b.n	800efd8 <_puts_r+0x24>
 800f010:	4b15      	ldr	r3, [pc, #84]	; (800f068 <_puts_r+0xb4>)
 800f012:	429c      	cmp	r4, r3
 800f014:	bf08      	it	eq
 800f016:	68ec      	ldreq	r4, [r5, #12]
 800f018:	e7de      	b.n	800efd8 <_puts_r+0x24>
 800f01a:	4621      	mov	r1, r4
 800f01c:	4628      	mov	r0, r5
 800f01e:	f000 f8c3 	bl	800f1a8 <__swsetup_r>
 800f022:	2800      	cmp	r0, #0
 800f024:	d0dd      	beq.n	800efe2 <_puts_r+0x2e>
 800f026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f02a:	bd70      	pop	{r4, r5, r6, pc}
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	da04      	bge.n	800f03a <_puts_r+0x86>
 800f030:	69a2      	ldr	r2, [r4, #24]
 800f032:	429a      	cmp	r2, r3
 800f034:	dc06      	bgt.n	800f044 <_puts_r+0x90>
 800f036:	290a      	cmp	r1, #10
 800f038:	d004      	beq.n	800f044 <_puts_r+0x90>
 800f03a:	6823      	ldr	r3, [r4, #0]
 800f03c:	1c5a      	adds	r2, r3, #1
 800f03e:	6022      	str	r2, [r4, #0]
 800f040:	7019      	strb	r1, [r3, #0]
 800f042:	e7cf      	b.n	800efe4 <_puts_r+0x30>
 800f044:	4622      	mov	r2, r4
 800f046:	4628      	mov	r0, r5
 800f048:	f000 f85c 	bl	800f104 <__swbuf_r>
 800f04c:	3001      	adds	r0, #1
 800f04e:	d1c9      	bne.n	800efe4 <_puts_r+0x30>
 800f050:	e7e9      	b.n	800f026 <_puts_r+0x72>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	200a      	movs	r0, #10
 800f056:	1c5a      	adds	r2, r3, #1
 800f058:	6022      	str	r2, [r4, #0]
 800f05a:	7018      	strb	r0, [r3, #0]
 800f05c:	e7e5      	b.n	800f02a <_puts_r+0x76>
 800f05e:	bf00      	nop
 800f060:	08012590 	.word	0x08012590
 800f064:	080125b0 	.word	0x080125b0
 800f068:	08012570 	.word	0x08012570

0800f06c <puts>:
 800f06c:	4b02      	ldr	r3, [pc, #8]	; (800f078 <puts+0xc>)
 800f06e:	4601      	mov	r1, r0
 800f070:	6818      	ldr	r0, [r3, #0]
 800f072:	f7ff bf9f 	b.w	800efb4 <_puts_r>
 800f076:	bf00      	nop
 800f078:	20001cfc 	.word	0x20001cfc

0800f07c <sniprintf>:
 800f07c:	b40c      	push	{r2, r3}
 800f07e:	b530      	push	{r4, r5, lr}
 800f080:	4b17      	ldr	r3, [pc, #92]	; (800f0e0 <sniprintf+0x64>)
 800f082:	1e0c      	subs	r4, r1, #0
 800f084:	b09d      	sub	sp, #116	; 0x74
 800f086:	681d      	ldr	r5, [r3, #0]
 800f088:	da08      	bge.n	800f09c <sniprintf+0x20>
 800f08a:	238b      	movs	r3, #139	; 0x8b
 800f08c:	602b      	str	r3, [r5, #0]
 800f08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f092:	b01d      	add	sp, #116	; 0x74
 800f094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f098:	b002      	add	sp, #8
 800f09a:	4770      	bx	lr
 800f09c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f0a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f0a4:	bf14      	ite	ne
 800f0a6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f0aa:	4623      	moveq	r3, r4
 800f0ac:	9304      	str	r3, [sp, #16]
 800f0ae:	9307      	str	r3, [sp, #28]
 800f0b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0b4:	9002      	str	r0, [sp, #8]
 800f0b6:	9006      	str	r0, [sp, #24]
 800f0b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f0bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f0be:	ab21      	add	r3, sp, #132	; 0x84
 800f0c0:	a902      	add	r1, sp, #8
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	9301      	str	r3, [sp, #4]
 800f0c6:	f001 fd0d 	bl	8010ae4 <_svfiprintf_r>
 800f0ca:	1c43      	adds	r3, r0, #1
 800f0cc:	bfbc      	itt	lt
 800f0ce:	238b      	movlt	r3, #139	; 0x8b
 800f0d0:	602b      	strlt	r3, [r5, #0]
 800f0d2:	2c00      	cmp	r4, #0
 800f0d4:	d0dd      	beq.n	800f092 <sniprintf+0x16>
 800f0d6:	9b02      	ldr	r3, [sp, #8]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	701a      	strb	r2, [r3, #0]
 800f0dc:	e7d9      	b.n	800f092 <sniprintf+0x16>
 800f0de:	bf00      	nop
 800f0e0:	20001cfc 	.word	0x20001cfc

0800f0e4 <strcat>:
 800f0e4:	b510      	push	{r4, lr}
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	781a      	ldrb	r2, [r3, #0]
 800f0ea:	1c5c      	adds	r4, r3, #1
 800f0ec:	b93a      	cbnz	r2, 800f0fe <strcat+0x1a>
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0f8:	2a00      	cmp	r2, #0
 800f0fa:	d1f9      	bne.n	800f0f0 <strcat+0xc>
 800f0fc:	bd10      	pop	{r4, pc}
 800f0fe:	4623      	mov	r3, r4
 800f100:	e7f2      	b.n	800f0e8 <strcat+0x4>
	...

0800f104 <__swbuf_r>:
 800f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f106:	460e      	mov	r6, r1
 800f108:	4614      	mov	r4, r2
 800f10a:	4605      	mov	r5, r0
 800f10c:	b118      	cbz	r0, 800f116 <__swbuf_r+0x12>
 800f10e:	6983      	ldr	r3, [r0, #24]
 800f110:	b90b      	cbnz	r3, 800f116 <__swbuf_r+0x12>
 800f112:	f000 ffed 	bl	80100f0 <__sinit>
 800f116:	4b21      	ldr	r3, [pc, #132]	; (800f19c <__swbuf_r+0x98>)
 800f118:	429c      	cmp	r4, r3
 800f11a:	d12a      	bne.n	800f172 <__swbuf_r+0x6e>
 800f11c:	686c      	ldr	r4, [r5, #4]
 800f11e:	69a3      	ldr	r3, [r4, #24]
 800f120:	60a3      	str	r3, [r4, #8]
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	071a      	lsls	r2, r3, #28
 800f126:	d52e      	bpl.n	800f186 <__swbuf_r+0x82>
 800f128:	6923      	ldr	r3, [r4, #16]
 800f12a:	b363      	cbz	r3, 800f186 <__swbuf_r+0x82>
 800f12c:	6923      	ldr	r3, [r4, #16]
 800f12e:	6820      	ldr	r0, [r4, #0]
 800f130:	1ac0      	subs	r0, r0, r3
 800f132:	6963      	ldr	r3, [r4, #20]
 800f134:	b2f6      	uxtb	r6, r6
 800f136:	4283      	cmp	r3, r0
 800f138:	4637      	mov	r7, r6
 800f13a:	dc04      	bgt.n	800f146 <__swbuf_r+0x42>
 800f13c:	4621      	mov	r1, r4
 800f13e:	4628      	mov	r0, r5
 800f140:	f000 ff6c 	bl	801001c <_fflush_r>
 800f144:	bb28      	cbnz	r0, 800f192 <__swbuf_r+0x8e>
 800f146:	68a3      	ldr	r3, [r4, #8]
 800f148:	3b01      	subs	r3, #1
 800f14a:	60a3      	str	r3, [r4, #8]
 800f14c:	6823      	ldr	r3, [r4, #0]
 800f14e:	1c5a      	adds	r2, r3, #1
 800f150:	6022      	str	r2, [r4, #0]
 800f152:	701e      	strb	r6, [r3, #0]
 800f154:	6963      	ldr	r3, [r4, #20]
 800f156:	3001      	adds	r0, #1
 800f158:	4283      	cmp	r3, r0
 800f15a:	d004      	beq.n	800f166 <__swbuf_r+0x62>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	07db      	lsls	r3, r3, #31
 800f160:	d519      	bpl.n	800f196 <__swbuf_r+0x92>
 800f162:	2e0a      	cmp	r6, #10
 800f164:	d117      	bne.n	800f196 <__swbuf_r+0x92>
 800f166:	4621      	mov	r1, r4
 800f168:	4628      	mov	r0, r5
 800f16a:	f000 ff57 	bl	801001c <_fflush_r>
 800f16e:	b190      	cbz	r0, 800f196 <__swbuf_r+0x92>
 800f170:	e00f      	b.n	800f192 <__swbuf_r+0x8e>
 800f172:	4b0b      	ldr	r3, [pc, #44]	; (800f1a0 <__swbuf_r+0x9c>)
 800f174:	429c      	cmp	r4, r3
 800f176:	d101      	bne.n	800f17c <__swbuf_r+0x78>
 800f178:	68ac      	ldr	r4, [r5, #8]
 800f17a:	e7d0      	b.n	800f11e <__swbuf_r+0x1a>
 800f17c:	4b09      	ldr	r3, [pc, #36]	; (800f1a4 <__swbuf_r+0xa0>)
 800f17e:	429c      	cmp	r4, r3
 800f180:	bf08      	it	eq
 800f182:	68ec      	ldreq	r4, [r5, #12]
 800f184:	e7cb      	b.n	800f11e <__swbuf_r+0x1a>
 800f186:	4621      	mov	r1, r4
 800f188:	4628      	mov	r0, r5
 800f18a:	f000 f80d 	bl	800f1a8 <__swsetup_r>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d0cc      	beq.n	800f12c <__swbuf_r+0x28>
 800f192:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f196:	4638      	mov	r0, r7
 800f198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f19a:	bf00      	nop
 800f19c:	08012590 	.word	0x08012590
 800f1a0:	080125b0 	.word	0x080125b0
 800f1a4:	08012570 	.word	0x08012570

0800f1a8 <__swsetup_r>:
 800f1a8:	4b32      	ldr	r3, [pc, #200]	; (800f274 <__swsetup_r+0xcc>)
 800f1aa:	b570      	push	{r4, r5, r6, lr}
 800f1ac:	681d      	ldr	r5, [r3, #0]
 800f1ae:	4606      	mov	r6, r0
 800f1b0:	460c      	mov	r4, r1
 800f1b2:	b125      	cbz	r5, 800f1be <__swsetup_r+0x16>
 800f1b4:	69ab      	ldr	r3, [r5, #24]
 800f1b6:	b913      	cbnz	r3, 800f1be <__swsetup_r+0x16>
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	f000 ff99 	bl	80100f0 <__sinit>
 800f1be:	4b2e      	ldr	r3, [pc, #184]	; (800f278 <__swsetup_r+0xd0>)
 800f1c0:	429c      	cmp	r4, r3
 800f1c2:	d10f      	bne.n	800f1e4 <__swsetup_r+0x3c>
 800f1c4:	686c      	ldr	r4, [r5, #4]
 800f1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1ca:	b29a      	uxth	r2, r3
 800f1cc:	0715      	lsls	r5, r2, #28
 800f1ce:	d42c      	bmi.n	800f22a <__swsetup_r+0x82>
 800f1d0:	06d0      	lsls	r0, r2, #27
 800f1d2:	d411      	bmi.n	800f1f8 <__swsetup_r+0x50>
 800f1d4:	2209      	movs	r2, #9
 800f1d6:	6032      	str	r2, [r6, #0]
 800f1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1dc:	81a3      	strh	r3, [r4, #12]
 800f1de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1e2:	e03e      	b.n	800f262 <__swsetup_r+0xba>
 800f1e4:	4b25      	ldr	r3, [pc, #148]	; (800f27c <__swsetup_r+0xd4>)
 800f1e6:	429c      	cmp	r4, r3
 800f1e8:	d101      	bne.n	800f1ee <__swsetup_r+0x46>
 800f1ea:	68ac      	ldr	r4, [r5, #8]
 800f1ec:	e7eb      	b.n	800f1c6 <__swsetup_r+0x1e>
 800f1ee:	4b24      	ldr	r3, [pc, #144]	; (800f280 <__swsetup_r+0xd8>)
 800f1f0:	429c      	cmp	r4, r3
 800f1f2:	bf08      	it	eq
 800f1f4:	68ec      	ldreq	r4, [r5, #12]
 800f1f6:	e7e6      	b.n	800f1c6 <__swsetup_r+0x1e>
 800f1f8:	0751      	lsls	r1, r2, #29
 800f1fa:	d512      	bpl.n	800f222 <__swsetup_r+0x7a>
 800f1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1fe:	b141      	cbz	r1, 800f212 <__swsetup_r+0x6a>
 800f200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f204:	4299      	cmp	r1, r3
 800f206:	d002      	beq.n	800f20e <__swsetup_r+0x66>
 800f208:	4630      	mov	r0, r6
 800f20a:	f001 fb69 	bl	80108e0 <_free_r>
 800f20e:	2300      	movs	r3, #0
 800f210:	6363      	str	r3, [r4, #52]	; 0x34
 800f212:	89a3      	ldrh	r3, [r4, #12]
 800f214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f218:	81a3      	strh	r3, [r4, #12]
 800f21a:	2300      	movs	r3, #0
 800f21c:	6063      	str	r3, [r4, #4]
 800f21e:	6923      	ldr	r3, [r4, #16]
 800f220:	6023      	str	r3, [r4, #0]
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	f043 0308 	orr.w	r3, r3, #8
 800f228:	81a3      	strh	r3, [r4, #12]
 800f22a:	6923      	ldr	r3, [r4, #16]
 800f22c:	b94b      	cbnz	r3, 800f242 <__swsetup_r+0x9a>
 800f22e:	89a3      	ldrh	r3, [r4, #12]
 800f230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f238:	d003      	beq.n	800f242 <__swsetup_r+0x9a>
 800f23a:	4621      	mov	r1, r4
 800f23c:	4630      	mov	r0, r6
 800f23e:	f001 f813 	bl	8010268 <__smakebuf_r>
 800f242:	89a2      	ldrh	r2, [r4, #12]
 800f244:	f012 0301 	ands.w	r3, r2, #1
 800f248:	d00c      	beq.n	800f264 <__swsetup_r+0xbc>
 800f24a:	2300      	movs	r3, #0
 800f24c:	60a3      	str	r3, [r4, #8]
 800f24e:	6963      	ldr	r3, [r4, #20]
 800f250:	425b      	negs	r3, r3
 800f252:	61a3      	str	r3, [r4, #24]
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	b953      	cbnz	r3, 800f26e <__swsetup_r+0xc6>
 800f258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f25c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f260:	d1ba      	bne.n	800f1d8 <__swsetup_r+0x30>
 800f262:	bd70      	pop	{r4, r5, r6, pc}
 800f264:	0792      	lsls	r2, r2, #30
 800f266:	bf58      	it	pl
 800f268:	6963      	ldrpl	r3, [r4, #20]
 800f26a:	60a3      	str	r3, [r4, #8]
 800f26c:	e7f2      	b.n	800f254 <__swsetup_r+0xac>
 800f26e:	2000      	movs	r0, #0
 800f270:	e7f7      	b.n	800f262 <__swsetup_r+0xba>
 800f272:	bf00      	nop
 800f274:	20001cfc 	.word	0x20001cfc
 800f278:	08012590 	.word	0x08012590
 800f27c:	080125b0 	.word	0x080125b0
 800f280:	08012570 	.word	0x08012570

0800f284 <quorem>:
 800f284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f288:	6903      	ldr	r3, [r0, #16]
 800f28a:	690c      	ldr	r4, [r1, #16]
 800f28c:	42a3      	cmp	r3, r4
 800f28e:	4680      	mov	r8, r0
 800f290:	f2c0 8082 	blt.w	800f398 <quorem+0x114>
 800f294:	3c01      	subs	r4, #1
 800f296:	f101 0714 	add.w	r7, r1, #20
 800f29a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f29e:	f100 0614 	add.w	r6, r0, #20
 800f2a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f2a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f2aa:	eb06 030c 	add.w	r3, r6, ip
 800f2ae:	3501      	adds	r5, #1
 800f2b0:	eb07 090c 	add.w	r9, r7, ip
 800f2b4:	9301      	str	r3, [sp, #4]
 800f2b6:	fbb0 f5f5 	udiv	r5, r0, r5
 800f2ba:	b395      	cbz	r5, 800f322 <quorem+0x9e>
 800f2bc:	f04f 0a00 	mov.w	sl, #0
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	46b6      	mov	lr, r6
 800f2c4:	46d3      	mov	fp, sl
 800f2c6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f2ca:	b293      	uxth	r3, r2
 800f2cc:	fb05 a303 	mla	r3, r5, r3, sl
 800f2d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	ebab 0303 	sub.w	r3, fp, r3
 800f2da:	0c12      	lsrs	r2, r2, #16
 800f2dc:	f8de b000 	ldr.w	fp, [lr]
 800f2e0:	fb05 a202 	mla	r2, r5, r2, sl
 800f2e4:	fa13 f38b 	uxtah	r3, r3, fp
 800f2e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f2ec:	fa1f fb82 	uxth.w	fp, r2
 800f2f0:	f8de 2000 	ldr.w	r2, [lr]
 800f2f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f2f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f302:	4581      	cmp	r9, r0
 800f304:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f308:	f84e 3b04 	str.w	r3, [lr], #4
 800f30c:	d2db      	bcs.n	800f2c6 <quorem+0x42>
 800f30e:	f856 300c 	ldr.w	r3, [r6, ip]
 800f312:	b933      	cbnz	r3, 800f322 <quorem+0x9e>
 800f314:	9b01      	ldr	r3, [sp, #4]
 800f316:	3b04      	subs	r3, #4
 800f318:	429e      	cmp	r6, r3
 800f31a:	461a      	mov	r2, r3
 800f31c:	d330      	bcc.n	800f380 <quorem+0xfc>
 800f31e:	f8c8 4010 	str.w	r4, [r8, #16]
 800f322:	4640      	mov	r0, r8
 800f324:	f001 fa08 	bl	8010738 <__mcmp>
 800f328:	2800      	cmp	r0, #0
 800f32a:	db25      	blt.n	800f378 <quorem+0xf4>
 800f32c:	3501      	adds	r5, #1
 800f32e:	4630      	mov	r0, r6
 800f330:	f04f 0c00 	mov.w	ip, #0
 800f334:	f857 2b04 	ldr.w	r2, [r7], #4
 800f338:	f8d0 e000 	ldr.w	lr, [r0]
 800f33c:	b293      	uxth	r3, r2
 800f33e:	ebac 0303 	sub.w	r3, ip, r3
 800f342:	0c12      	lsrs	r2, r2, #16
 800f344:	fa13 f38e 	uxtah	r3, r3, lr
 800f348:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f34c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f350:	b29b      	uxth	r3, r3
 800f352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f356:	45b9      	cmp	r9, r7
 800f358:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f35c:	f840 3b04 	str.w	r3, [r0], #4
 800f360:	d2e8      	bcs.n	800f334 <quorem+0xb0>
 800f362:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f366:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f36a:	b92a      	cbnz	r2, 800f378 <quorem+0xf4>
 800f36c:	3b04      	subs	r3, #4
 800f36e:	429e      	cmp	r6, r3
 800f370:	461a      	mov	r2, r3
 800f372:	d30b      	bcc.n	800f38c <quorem+0x108>
 800f374:	f8c8 4010 	str.w	r4, [r8, #16]
 800f378:	4628      	mov	r0, r5
 800f37a:	b003      	add	sp, #12
 800f37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f380:	6812      	ldr	r2, [r2, #0]
 800f382:	3b04      	subs	r3, #4
 800f384:	2a00      	cmp	r2, #0
 800f386:	d1ca      	bne.n	800f31e <quorem+0x9a>
 800f388:	3c01      	subs	r4, #1
 800f38a:	e7c5      	b.n	800f318 <quorem+0x94>
 800f38c:	6812      	ldr	r2, [r2, #0]
 800f38e:	3b04      	subs	r3, #4
 800f390:	2a00      	cmp	r2, #0
 800f392:	d1ef      	bne.n	800f374 <quorem+0xf0>
 800f394:	3c01      	subs	r4, #1
 800f396:	e7ea      	b.n	800f36e <quorem+0xea>
 800f398:	2000      	movs	r0, #0
 800f39a:	e7ee      	b.n	800f37a <quorem+0xf6>
 800f39c:	0000      	movs	r0, r0
	...

0800f3a0 <_dtoa_r>:
 800f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a4:	ec57 6b10 	vmov	r6, r7, d0
 800f3a8:	b097      	sub	sp, #92	; 0x5c
 800f3aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f3ac:	9106      	str	r1, [sp, #24]
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800f3b2:	9312      	str	r3, [sp, #72]	; 0x48
 800f3b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f3b8:	e9cd 6700 	strd	r6, r7, [sp]
 800f3bc:	b93d      	cbnz	r5, 800f3ce <_dtoa_r+0x2e>
 800f3be:	2010      	movs	r0, #16
 800f3c0:	f000 ff92 	bl	80102e8 <malloc>
 800f3c4:	6260      	str	r0, [r4, #36]	; 0x24
 800f3c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f3ca:	6005      	str	r5, [r0, #0]
 800f3cc:	60c5      	str	r5, [r0, #12]
 800f3ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3d0:	6819      	ldr	r1, [r3, #0]
 800f3d2:	b151      	cbz	r1, 800f3ea <_dtoa_r+0x4a>
 800f3d4:	685a      	ldr	r2, [r3, #4]
 800f3d6:	604a      	str	r2, [r1, #4]
 800f3d8:	2301      	movs	r3, #1
 800f3da:	4093      	lsls	r3, r2
 800f3dc:	608b      	str	r3, [r1, #8]
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f000 ffc9 	bl	8010376 <_Bfree>
 800f3e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	601a      	str	r2, [r3, #0]
 800f3ea:	1e3b      	subs	r3, r7, #0
 800f3ec:	bfbb      	ittet	lt
 800f3ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f3f2:	9301      	strlt	r3, [sp, #4]
 800f3f4:	2300      	movge	r3, #0
 800f3f6:	2201      	movlt	r2, #1
 800f3f8:	bfac      	ite	ge
 800f3fa:	f8c8 3000 	strge.w	r3, [r8]
 800f3fe:	f8c8 2000 	strlt.w	r2, [r8]
 800f402:	4baf      	ldr	r3, [pc, #700]	; (800f6c0 <_dtoa_r+0x320>)
 800f404:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f408:	ea33 0308 	bics.w	r3, r3, r8
 800f40c:	d114      	bne.n	800f438 <_dtoa_r+0x98>
 800f40e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f410:	f242 730f 	movw	r3, #9999	; 0x270f
 800f414:	6013      	str	r3, [r2, #0]
 800f416:	9b00      	ldr	r3, [sp, #0]
 800f418:	b923      	cbnz	r3, 800f424 <_dtoa_r+0x84>
 800f41a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f41e:	2800      	cmp	r0, #0
 800f420:	f000 8542 	beq.w	800fea8 <_dtoa_r+0xb08>
 800f424:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f426:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f6d4 <_dtoa_r+0x334>
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f000 8544 	beq.w	800feb8 <_dtoa_r+0xb18>
 800f430:	f10b 0303 	add.w	r3, fp, #3
 800f434:	f000 bd3e 	b.w	800feb4 <_dtoa_r+0xb14>
 800f438:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f43c:	2200      	movs	r2, #0
 800f43e:	2300      	movs	r3, #0
 800f440:	4630      	mov	r0, r6
 800f442:	4639      	mov	r1, r7
 800f444:	f7f1 fb68 	bl	8000b18 <__aeabi_dcmpeq>
 800f448:	4681      	mov	r9, r0
 800f44a:	b168      	cbz	r0, 800f468 <_dtoa_r+0xc8>
 800f44c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f44e:	2301      	movs	r3, #1
 800f450:	6013      	str	r3, [r2, #0]
 800f452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f454:	2b00      	cmp	r3, #0
 800f456:	f000 8524 	beq.w	800fea2 <_dtoa_r+0xb02>
 800f45a:	4b9a      	ldr	r3, [pc, #616]	; (800f6c4 <_dtoa_r+0x324>)
 800f45c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f45e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800f462:	6013      	str	r3, [r2, #0]
 800f464:	f000 bd28 	b.w	800feb8 <_dtoa_r+0xb18>
 800f468:	aa14      	add	r2, sp, #80	; 0x50
 800f46a:	a915      	add	r1, sp, #84	; 0x54
 800f46c:	ec47 6b10 	vmov	d0, r6, r7
 800f470:	4620      	mov	r0, r4
 800f472:	f001 f9d8 	bl	8010826 <__d2b>
 800f476:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f47a:	9004      	str	r0, [sp, #16]
 800f47c:	2d00      	cmp	r5, #0
 800f47e:	d07c      	beq.n	800f57a <_dtoa_r+0x1da>
 800f480:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f484:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f488:	46b2      	mov	sl, r6
 800f48a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f48e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f492:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f496:	2200      	movs	r2, #0
 800f498:	4b8b      	ldr	r3, [pc, #556]	; (800f6c8 <_dtoa_r+0x328>)
 800f49a:	4650      	mov	r0, sl
 800f49c:	4659      	mov	r1, fp
 800f49e:	f7f0 ff1b 	bl	80002d8 <__aeabi_dsub>
 800f4a2:	a381      	add	r3, pc, #516	; (adr r3, 800f6a8 <_dtoa_r+0x308>)
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f7f1 f8ce 	bl	8000648 <__aeabi_dmul>
 800f4ac:	a380      	add	r3, pc, #512	; (adr r3, 800f6b0 <_dtoa_r+0x310>)
 800f4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b2:	f7f0 ff13 	bl	80002dc <__adddf3>
 800f4b6:	4606      	mov	r6, r0
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	460f      	mov	r7, r1
 800f4bc:	f7f1 f85a 	bl	8000574 <__aeabi_i2d>
 800f4c0:	a37d      	add	r3, pc, #500	; (adr r3, 800f6b8 <_dtoa_r+0x318>)
 800f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c6:	f7f1 f8bf 	bl	8000648 <__aeabi_dmul>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	4639      	mov	r1, r7
 800f4d2:	f7f0 ff03 	bl	80002dc <__adddf3>
 800f4d6:	4606      	mov	r6, r0
 800f4d8:	460f      	mov	r7, r1
 800f4da:	f7f1 fb65 	bl	8000ba8 <__aeabi_d2iz>
 800f4de:	2200      	movs	r2, #0
 800f4e0:	4682      	mov	sl, r0
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	4639      	mov	r1, r7
 800f4e8:	f7f1 fb20 	bl	8000b2c <__aeabi_dcmplt>
 800f4ec:	b148      	cbz	r0, 800f502 <_dtoa_r+0x162>
 800f4ee:	4650      	mov	r0, sl
 800f4f0:	f7f1 f840 	bl	8000574 <__aeabi_i2d>
 800f4f4:	4632      	mov	r2, r6
 800f4f6:	463b      	mov	r3, r7
 800f4f8:	f7f1 fb0e 	bl	8000b18 <__aeabi_dcmpeq>
 800f4fc:	b908      	cbnz	r0, 800f502 <_dtoa_r+0x162>
 800f4fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f502:	f1ba 0f16 	cmp.w	sl, #22
 800f506:	d859      	bhi.n	800f5bc <_dtoa_r+0x21c>
 800f508:	4970      	ldr	r1, [pc, #448]	; (800f6cc <_dtoa_r+0x32c>)
 800f50a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f50e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f512:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f516:	f7f1 fb27 	bl	8000b68 <__aeabi_dcmpgt>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d050      	beq.n	800f5c0 <_dtoa_r+0x220>
 800f51e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f522:	2300      	movs	r3, #0
 800f524:	930f      	str	r3, [sp, #60]	; 0x3c
 800f526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f528:	1b5d      	subs	r5, r3, r5
 800f52a:	f1b5 0801 	subs.w	r8, r5, #1
 800f52e:	bf49      	itett	mi
 800f530:	f1c5 0301 	rsbmi	r3, r5, #1
 800f534:	2300      	movpl	r3, #0
 800f536:	9305      	strmi	r3, [sp, #20]
 800f538:	f04f 0800 	movmi.w	r8, #0
 800f53c:	bf58      	it	pl
 800f53e:	9305      	strpl	r3, [sp, #20]
 800f540:	f1ba 0f00 	cmp.w	sl, #0
 800f544:	db3e      	blt.n	800f5c4 <_dtoa_r+0x224>
 800f546:	2300      	movs	r3, #0
 800f548:	44d0      	add	r8, sl
 800f54a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f54e:	9307      	str	r3, [sp, #28]
 800f550:	9b06      	ldr	r3, [sp, #24]
 800f552:	2b09      	cmp	r3, #9
 800f554:	f200 8090 	bhi.w	800f678 <_dtoa_r+0x2d8>
 800f558:	2b05      	cmp	r3, #5
 800f55a:	bfc4      	itt	gt
 800f55c:	3b04      	subgt	r3, #4
 800f55e:	9306      	strgt	r3, [sp, #24]
 800f560:	9b06      	ldr	r3, [sp, #24]
 800f562:	f1a3 0302 	sub.w	r3, r3, #2
 800f566:	bfcc      	ite	gt
 800f568:	2500      	movgt	r5, #0
 800f56a:	2501      	movle	r5, #1
 800f56c:	2b03      	cmp	r3, #3
 800f56e:	f200 808f 	bhi.w	800f690 <_dtoa_r+0x2f0>
 800f572:	e8df f003 	tbb	[pc, r3]
 800f576:	7f7d      	.short	0x7f7d
 800f578:	7131      	.short	0x7131
 800f57a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f57e:	441d      	add	r5, r3
 800f580:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f584:	2820      	cmp	r0, #32
 800f586:	dd13      	ble.n	800f5b0 <_dtoa_r+0x210>
 800f588:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f58c:	9b00      	ldr	r3, [sp, #0]
 800f58e:	fa08 f800 	lsl.w	r8, r8, r0
 800f592:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f596:	fa23 f000 	lsr.w	r0, r3, r0
 800f59a:	ea48 0000 	orr.w	r0, r8, r0
 800f59e:	f7f0 ffd9 	bl	8000554 <__aeabi_ui2d>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	4682      	mov	sl, r0
 800f5a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f5aa:	3d01      	subs	r5, #1
 800f5ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800f5ae:	e772      	b.n	800f496 <_dtoa_r+0xf6>
 800f5b0:	9b00      	ldr	r3, [sp, #0]
 800f5b2:	f1c0 0020 	rsb	r0, r0, #32
 800f5b6:	fa03 f000 	lsl.w	r0, r3, r0
 800f5ba:	e7f0      	b.n	800f59e <_dtoa_r+0x1fe>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e7b1      	b.n	800f524 <_dtoa_r+0x184>
 800f5c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f5c2:	e7b0      	b.n	800f526 <_dtoa_r+0x186>
 800f5c4:	9b05      	ldr	r3, [sp, #20]
 800f5c6:	eba3 030a 	sub.w	r3, r3, sl
 800f5ca:	9305      	str	r3, [sp, #20]
 800f5cc:	f1ca 0300 	rsb	r3, sl, #0
 800f5d0:	9307      	str	r3, [sp, #28]
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	930e      	str	r3, [sp, #56]	; 0x38
 800f5d6:	e7bb      	b.n	800f550 <_dtoa_r+0x1b0>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	930a      	str	r3, [sp, #40]	; 0x28
 800f5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	dd59      	ble.n	800f696 <_dtoa_r+0x2f6>
 800f5e2:	9302      	str	r3, [sp, #8]
 800f5e4:	4699      	mov	r9, r3
 800f5e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	6072      	str	r2, [r6, #4]
 800f5ec:	2204      	movs	r2, #4
 800f5ee:	f102 0014 	add.w	r0, r2, #20
 800f5f2:	4298      	cmp	r0, r3
 800f5f4:	6871      	ldr	r1, [r6, #4]
 800f5f6:	d953      	bls.n	800f6a0 <_dtoa_r+0x300>
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f000 fe88 	bl	801030e <_Balloc>
 800f5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f600:	6030      	str	r0, [r6, #0]
 800f602:	f1b9 0f0e 	cmp.w	r9, #14
 800f606:	f8d3 b000 	ldr.w	fp, [r3]
 800f60a:	f200 80e6 	bhi.w	800f7da <_dtoa_r+0x43a>
 800f60e:	2d00      	cmp	r5, #0
 800f610:	f000 80e3 	beq.w	800f7da <_dtoa_r+0x43a>
 800f614:	ed9d 7b00 	vldr	d7, [sp]
 800f618:	f1ba 0f00 	cmp.w	sl, #0
 800f61c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f620:	dd74      	ble.n	800f70c <_dtoa_r+0x36c>
 800f622:	4a2a      	ldr	r2, [pc, #168]	; (800f6cc <_dtoa_r+0x32c>)
 800f624:	f00a 030f 	and.w	r3, sl, #15
 800f628:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f62c:	ed93 7b00 	vldr	d7, [r3]
 800f630:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f634:	06f0      	lsls	r0, r6, #27
 800f636:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f63a:	d565      	bpl.n	800f708 <_dtoa_r+0x368>
 800f63c:	4b24      	ldr	r3, [pc, #144]	; (800f6d0 <_dtoa_r+0x330>)
 800f63e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f642:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f646:	f7f1 f929 	bl	800089c <__aeabi_ddiv>
 800f64a:	e9cd 0100 	strd	r0, r1, [sp]
 800f64e:	f006 060f 	and.w	r6, r6, #15
 800f652:	2503      	movs	r5, #3
 800f654:	4f1e      	ldr	r7, [pc, #120]	; (800f6d0 <_dtoa_r+0x330>)
 800f656:	e04c      	b.n	800f6f2 <_dtoa_r+0x352>
 800f658:	2301      	movs	r3, #1
 800f65a:	930a      	str	r3, [sp, #40]	; 0x28
 800f65c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f65e:	4453      	add	r3, sl
 800f660:	f103 0901 	add.w	r9, r3, #1
 800f664:	9302      	str	r3, [sp, #8]
 800f666:	464b      	mov	r3, r9
 800f668:	2b01      	cmp	r3, #1
 800f66a:	bfb8      	it	lt
 800f66c:	2301      	movlt	r3, #1
 800f66e:	e7ba      	b.n	800f5e6 <_dtoa_r+0x246>
 800f670:	2300      	movs	r3, #0
 800f672:	e7b2      	b.n	800f5da <_dtoa_r+0x23a>
 800f674:	2300      	movs	r3, #0
 800f676:	e7f0      	b.n	800f65a <_dtoa_r+0x2ba>
 800f678:	2501      	movs	r5, #1
 800f67a:	2300      	movs	r3, #0
 800f67c:	9306      	str	r3, [sp, #24]
 800f67e:	950a      	str	r5, [sp, #40]	; 0x28
 800f680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f684:	9302      	str	r3, [sp, #8]
 800f686:	4699      	mov	r9, r3
 800f688:	2200      	movs	r2, #0
 800f68a:	2312      	movs	r3, #18
 800f68c:	920b      	str	r2, [sp, #44]	; 0x2c
 800f68e:	e7aa      	b.n	800f5e6 <_dtoa_r+0x246>
 800f690:	2301      	movs	r3, #1
 800f692:	930a      	str	r3, [sp, #40]	; 0x28
 800f694:	e7f4      	b.n	800f680 <_dtoa_r+0x2e0>
 800f696:	2301      	movs	r3, #1
 800f698:	9302      	str	r3, [sp, #8]
 800f69a:	4699      	mov	r9, r3
 800f69c:	461a      	mov	r2, r3
 800f69e:	e7f5      	b.n	800f68c <_dtoa_r+0x2ec>
 800f6a0:	3101      	adds	r1, #1
 800f6a2:	6071      	str	r1, [r6, #4]
 800f6a4:	0052      	lsls	r2, r2, #1
 800f6a6:	e7a2      	b.n	800f5ee <_dtoa_r+0x24e>
 800f6a8:	636f4361 	.word	0x636f4361
 800f6ac:	3fd287a7 	.word	0x3fd287a7
 800f6b0:	8b60c8b3 	.word	0x8b60c8b3
 800f6b4:	3fc68a28 	.word	0x3fc68a28
 800f6b8:	509f79fb 	.word	0x509f79fb
 800f6bc:	3fd34413 	.word	0x3fd34413
 800f6c0:	7ff00000 	.word	0x7ff00000
 800f6c4:	0801253d 	.word	0x0801253d
 800f6c8:	3ff80000 	.word	0x3ff80000
 800f6cc:	080125f8 	.word	0x080125f8
 800f6d0:	080125d0 	.word	0x080125d0
 800f6d4:	08012569 	.word	0x08012569
 800f6d8:	07f1      	lsls	r1, r6, #31
 800f6da:	d508      	bpl.n	800f6ee <_dtoa_r+0x34e>
 800f6dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6e4:	f7f0 ffb0 	bl	8000648 <__aeabi_dmul>
 800f6e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f6ec:	3501      	adds	r5, #1
 800f6ee:	1076      	asrs	r6, r6, #1
 800f6f0:	3708      	adds	r7, #8
 800f6f2:	2e00      	cmp	r6, #0
 800f6f4:	d1f0      	bne.n	800f6d8 <_dtoa_r+0x338>
 800f6f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f6fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6fe:	f7f1 f8cd 	bl	800089c <__aeabi_ddiv>
 800f702:	e9cd 0100 	strd	r0, r1, [sp]
 800f706:	e01a      	b.n	800f73e <_dtoa_r+0x39e>
 800f708:	2502      	movs	r5, #2
 800f70a:	e7a3      	b.n	800f654 <_dtoa_r+0x2b4>
 800f70c:	f000 80a0 	beq.w	800f850 <_dtoa_r+0x4b0>
 800f710:	f1ca 0600 	rsb	r6, sl, #0
 800f714:	4b9f      	ldr	r3, [pc, #636]	; (800f994 <_dtoa_r+0x5f4>)
 800f716:	4fa0      	ldr	r7, [pc, #640]	; (800f998 <_dtoa_r+0x5f8>)
 800f718:	f006 020f 	and.w	r2, r6, #15
 800f71c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f724:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f728:	f7f0 ff8e 	bl	8000648 <__aeabi_dmul>
 800f72c:	e9cd 0100 	strd	r0, r1, [sp]
 800f730:	1136      	asrs	r6, r6, #4
 800f732:	2300      	movs	r3, #0
 800f734:	2502      	movs	r5, #2
 800f736:	2e00      	cmp	r6, #0
 800f738:	d17f      	bne.n	800f83a <_dtoa_r+0x49a>
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1e1      	bne.n	800f702 <_dtoa_r+0x362>
 800f73e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f740:	2b00      	cmp	r3, #0
 800f742:	f000 8087 	beq.w	800f854 <_dtoa_r+0x4b4>
 800f746:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f74a:	2200      	movs	r2, #0
 800f74c:	4b93      	ldr	r3, [pc, #588]	; (800f99c <_dtoa_r+0x5fc>)
 800f74e:	4630      	mov	r0, r6
 800f750:	4639      	mov	r1, r7
 800f752:	f7f1 f9eb 	bl	8000b2c <__aeabi_dcmplt>
 800f756:	2800      	cmp	r0, #0
 800f758:	d07c      	beq.n	800f854 <_dtoa_r+0x4b4>
 800f75a:	f1b9 0f00 	cmp.w	r9, #0
 800f75e:	d079      	beq.n	800f854 <_dtoa_r+0x4b4>
 800f760:	9b02      	ldr	r3, [sp, #8]
 800f762:	2b00      	cmp	r3, #0
 800f764:	dd35      	ble.n	800f7d2 <_dtoa_r+0x432>
 800f766:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f76a:	9308      	str	r3, [sp, #32]
 800f76c:	4639      	mov	r1, r7
 800f76e:	2200      	movs	r2, #0
 800f770:	4b8b      	ldr	r3, [pc, #556]	; (800f9a0 <_dtoa_r+0x600>)
 800f772:	4630      	mov	r0, r6
 800f774:	f7f0 ff68 	bl	8000648 <__aeabi_dmul>
 800f778:	e9cd 0100 	strd	r0, r1, [sp]
 800f77c:	9f02      	ldr	r7, [sp, #8]
 800f77e:	3501      	adds	r5, #1
 800f780:	4628      	mov	r0, r5
 800f782:	f7f0 fef7 	bl	8000574 <__aeabi_i2d>
 800f786:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f78a:	f7f0 ff5d 	bl	8000648 <__aeabi_dmul>
 800f78e:	2200      	movs	r2, #0
 800f790:	4b84      	ldr	r3, [pc, #528]	; (800f9a4 <_dtoa_r+0x604>)
 800f792:	f7f0 fda3 	bl	80002dc <__adddf3>
 800f796:	4605      	mov	r5, r0
 800f798:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f79c:	2f00      	cmp	r7, #0
 800f79e:	d15d      	bne.n	800f85c <_dtoa_r+0x4bc>
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	4b81      	ldr	r3, [pc, #516]	; (800f9a8 <_dtoa_r+0x608>)
 800f7a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7a8:	f7f0 fd96 	bl	80002d8 <__aeabi_dsub>
 800f7ac:	462a      	mov	r2, r5
 800f7ae:	4633      	mov	r3, r6
 800f7b0:	e9cd 0100 	strd	r0, r1, [sp]
 800f7b4:	f7f1 f9d8 	bl	8000b68 <__aeabi_dcmpgt>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	f040 8288 	bne.w	800fcce <_dtoa_r+0x92e>
 800f7be:	462a      	mov	r2, r5
 800f7c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f7c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7c8:	f7f1 f9b0 	bl	8000b2c <__aeabi_dcmplt>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	f040 827c 	bne.w	800fcca <_dtoa_r+0x92a>
 800f7d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f7d6:	e9cd 2300 	strd	r2, r3, [sp]
 800f7da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	f2c0 8150 	blt.w	800fa82 <_dtoa_r+0x6e2>
 800f7e2:	f1ba 0f0e 	cmp.w	sl, #14
 800f7e6:	f300 814c 	bgt.w	800fa82 <_dtoa_r+0x6e2>
 800f7ea:	4b6a      	ldr	r3, [pc, #424]	; (800f994 <_dtoa_r+0x5f4>)
 800f7ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f7f0:	ed93 7b00 	vldr	d7, [r3]
 800f7f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7fc:	f280 80d8 	bge.w	800f9b0 <_dtoa_r+0x610>
 800f800:	f1b9 0f00 	cmp.w	r9, #0
 800f804:	f300 80d4 	bgt.w	800f9b0 <_dtoa_r+0x610>
 800f808:	f040 825e 	bne.w	800fcc8 <_dtoa_r+0x928>
 800f80c:	2200      	movs	r2, #0
 800f80e:	4b66      	ldr	r3, [pc, #408]	; (800f9a8 <_dtoa_r+0x608>)
 800f810:	ec51 0b17 	vmov	r0, r1, d7
 800f814:	f7f0 ff18 	bl	8000648 <__aeabi_dmul>
 800f818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f81c:	f7f1 f99a 	bl	8000b54 <__aeabi_dcmpge>
 800f820:	464f      	mov	r7, r9
 800f822:	464e      	mov	r6, r9
 800f824:	2800      	cmp	r0, #0
 800f826:	f040 8234 	bne.w	800fc92 <_dtoa_r+0x8f2>
 800f82a:	2331      	movs	r3, #49	; 0x31
 800f82c:	f10b 0501 	add.w	r5, fp, #1
 800f830:	f88b 3000 	strb.w	r3, [fp]
 800f834:	f10a 0a01 	add.w	sl, sl, #1
 800f838:	e22f      	b.n	800fc9a <_dtoa_r+0x8fa>
 800f83a:	07f2      	lsls	r2, r6, #31
 800f83c:	d505      	bpl.n	800f84a <_dtoa_r+0x4aa>
 800f83e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f842:	f7f0 ff01 	bl	8000648 <__aeabi_dmul>
 800f846:	3501      	adds	r5, #1
 800f848:	2301      	movs	r3, #1
 800f84a:	1076      	asrs	r6, r6, #1
 800f84c:	3708      	adds	r7, #8
 800f84e:	e772      	b.n	800f736 <_dtoa_r+0x396>
 800f850:	2502      	movs	r5, #2
 800f852:	e774      	b.n	800f73e <_dtoa_r+0x39e>
 800f854:	f8cd a020 	str.w	sl, [sp, #32]
 800f858:	464f      	mov	r7, r9
 800f85a:	e791      	b.n	800f780 <_dtoa_r+0x3e0>
 800f85c:	4b4d      	ldr	r3, [pc, #308]	; (800f994 <_dtoa_r+0x5f4>)
 800f85e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f862:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d047      	beq.n	800f8fc <_dtoa_r+0x55c>
 800f86c:	4602      	mov	r2, r0
 800f86e:	460b      	mov	r3, r1
 800f870:	2000      	movs	r0, #0
 800f872:	494e      	ldr	r1, [pc, #312]	; (800f9ac <_dtoa_r+0x60c>)
 800f874:	f7f1 f812 	bl	800089c <__aeabi_ddiv>
 800f878:	462a      	mov	r2, r5
 800f87a:	4633      	mov	r3, r6
 800f87c:	f7f0 fd2c 	bl	80002d8 <__aeabi_dsub>
 800f880:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f884:	465d      	mov	r5, fp
 800f886:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f88a:	f7f1 f98d 	bl	8000ba8 <__aeabi_d2iz>
 800f88e:	4606      	mov	r6, r0
 800f890:	f7f0 fe70 	bl	8000574 <__aeabi_i2d>
 800f894:	4602      	mov	r2, r0
 800f896:	460b      	mov	r3, r1
 800f898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f89c:	f7f0 fd1c 	bl	80002d8 <__aeabi_dsub>
 800f8a0:	3630      	adds	r6, #48	; 0x30
 800f8a2:	f805 6b01 	strb.w	r6, [r5], #1
 800f8a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f8aa:	e9cd 0100 	strd	r0, r1, [sp]
 800f8ae:	f7f1 f93d 	bl	8000b2c <__aeabi_dcmplt>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	d163      	bne.n	800f97e <_dtoa_r+0x5de>
 800f8b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8ba:	2000      	movs	r0, #0
 800f8bc:	4937      	ldr	r1, [pc, #220]	; (800f99c <_dtoa_r+0x5fc>)
 800f8be:	f7f0 fd0b 	bl	80002d8 <__aeabi_dsub>
 800f8c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f8c6:	f7f1 f931 	bl	8000b2c <__aeabi_dcmplt>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	f040 80b7 	bne.w	800fa3e <_dtoa_r+0x69e>
 800f8d0:	eba5 030b 	sub.w	r3, r5, fp
 800f8d4:	429f      	cmp	r7, r3
 800f8d6:	f77f af7c 	ble.w	800f7d2 <_dtoa_r+0x432>
 800f8da:	2200      	movs	r2, #0
 800f8dc:	4b30      	ldr	r3, [pc, #192]	; (800f9a0 <_dtoa_r+0x600>)
 800f8de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f8e2:	f7f0 feb1 	bl	8000648 <__aeabi_dmul>
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f8ec:	4b2c      	ldr	r3, [pc, #176]	; (800f9a0 <_dtoa_r+0x600>)
 800f8ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8f2:	f7f0 fea9 	bl	8000648 <__aeabi_dmul>
 800f8f6:	e9cd 0100 	strd	r0, r1, [sp]
 800f8fa:	e7c4      	b.n	800f886 <_dtoa_r+0x4e6>
 800f8fc:	462a      	mov	r2, r5
 800f8fe:	4633      	mov	r3, r6
 800f900:	f7f0 fea2 	bl	8000648 <__aeabi_dmul>
 800f904:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f908:	eb0b 0507 	add.w	r5, fp, r7
 800f90c:	465e      	mov	r6, fp
 800f90e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f912:	f7f1 f949 	bl	8000ba8 <__aeabi_d2iz>
 800f916:	4607      	mov	r7, r0
 800f918:	f7f0 fe2c 	bl	8000574 <__aeabi_i2d>
 800f91c:	3730      	adds	r7, #48	; 0x30
 800f91e:	4602      	mov	r2, r0
 800f920:	460b      	mov	r3, r1
 800f922:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f926:	f7f0 fcd7 	bl	80002d8 <__aeabi_dsub>
 800f92a:	f806 7b01 	strb.w	r7, [r6], #1
 800f92e:	42ae      	cmp	r6, r5
 800f930:	e9cd 0100 	strd	r0, r1, [sp]
 800f934:	f04f 0200 	mov.w	r2, #0
 800f938:	d126      	bne.n	800f988 <_dtoa_r+0x5e8>
 800f93a:	4b1c      	ldr	r3, [pc, #112]	; (800f9ac <_dtoa_r+0x60c>)
 800f93c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f940:	f7f0 fccc 	bl	80002dc <__adddf3>
 800f944:	4602      	mov	r2, r0
 800f946:	460b      	mov	r3, r1
 800f948:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f94c:	f7f1 f90c 	bl	8000b68 <__aeabi_dcmpgt>
 800f950:	2800      	cmp	r0, #0
 800f952:	d174      	bne.n	800fa3e <_dtoa_r+0x69e>
 800f954:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f958:	2000      	movs	r0, #0
 800f95a:	4914      	ldr	r1, [pc, #80]	; (800f9ac <_dtoa_r+0x60c>)
 800f95c:	f7f0 fcbc 	bl	80002d8 <__aeabi_dsub>
 800f960:	4602      	mov	r2, r0
 800f962:	460b      	mov	r3, r1
 800f964:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f968:	f7f1 f8e0 	bl	8000b2c <__aeabi_dcmplt>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	f43f af30 	beq.w	800f7d2 <_dtoa_r+0x432>
 800f972:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f976:	2b30      	cmp	r3, #48	; 0x30
 800f978:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f97c:	d002      	beq.n	800f984 <_dtoa_r+0x5e4>
 800f97e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f982:	e04a      	b.n	800fa1a <_dtoa_r+0x67a>
 800f984:	4615      	mov	r5, r2
 800f986:	e7f4      	b.n	800f972 <_dtoa_r+0x5d2>
 800f988:	4b05      	ldr	r3, [pc, #20]	; (800f9a0 <_dtoa_r+0x600>)
 800f98a:	f7f0 fe5d 	bl	8000648 <__aeabi_dmul>
 800f98e:	e9cd 0100 	strd	r0, r1, [sp]
 800f992:	e7bc      	b.n	800f90e <_dtoa_r+0x56e>
 800f994:	080125f8 	.word	0x080125f8
 800f998:	080125d0 	.word	0x080125d0
 800f99c:	3ff00000 	.word	0x3ff00000
 800f9a0:	40240000 	.word	0x40240000
 800f9a4:	401c0000 	.word	0x401c0000
 800f9a8:	40140000 	.word	0x40140000
 800f9ac:	3fe00000 	.word	0x3fe00000
 800f9b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f9b4:	465d      	mov	r5, fp
 800f9b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	4639      	mov	r1, r7
 800f9be:	f7f0 ff6d 	bl	800089c <__aeabi_ddiv>
 800f9c2:	f7f1 f8f1 	bl	8000ba8 <__aeabi_d2iz>
 800f9c6:	4680      	mov	r8, r0
 800f9c8:	f7f0 fdd4 	bl	8000574 <__aeabi_i2d>
 800f9cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9d0:	f7f0 fe3a 	bl	8000648 <__aeabi_dmul>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	4630      	mov	r0, r6
 800f9da:	4639      	mov	r1, r7
 800f9dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f9e0:	f7f0 fc7a 	bl	80002d8 <__aeabi_dsub>
 800f9e4:	f805 6b01 	strb.w	r6, [r5], #1
 800f9e8:	eba5 060b 	sub.w	r6, r5, fp
 800f9ec:	45b1      	cmp	r9, r6
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	d139      	bne.n	800fa68 <_dtoa_r+0x6c8>
 800f9f4:	f7f0 fc72 	bl	80002dc <__adddf3>
 800f9f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9fc:	4606      	mov	r6, r0
 800f9fe:	460f      	mov	r7, r1
 800fa00:	f7f1 f8b2 	bl	8000b68 <__aeabi_dcmpgt>
 800fa04:	b9c8      	cbnz	r0, 800fa3a <_dtoa_r+0x69a>
 800fa06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	4639      	mov	r1, r7
 800fa0e:	f7f1 f883 	bl	8000b18 <__aeabi_dcmpeq>
 800fa12:	b110      	cbz	r0, 800fa1a <_dtoa_r+0x67a>
 800fa14:	f018 0f01 	tst.w	r8, #1
 800fa18:	d10f      	bne.n	800fa3a <_dtoa_r+0x69a>
 800fa1a:	9904      	ldr	r1, [sp, #16]
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f000 fcaa 	bl	8010376 <_Bfree>
 800fa22:	2300      	movs	r3, #0
 800fa24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa26:	702b      	strb	r3, [r5, #0]
 800fa28:	f10a 0301 	add.w	r3, sl, #1
 800fa2c:	6013      	str	r3, [r2, #0]
 800fa2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 8241 	beq.w	800feb8 <_dtoa_r+0xb18>
 800fa36:	601d      	str	r5, [r3, #0]
 800fa38:	e23e      	b.n	800feb8 <_dtoa_r+0xb18>
 800fa3a:	f8cd a020 	str.w	sl, [sp, #32]
 800fa3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fa42:	2a39      	cmp	r2, #57	; 0x39
 800fa44:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800fa48:	d108      	bne.n	800fa5c <_dtoa_r+0x6bc>
 800fa4a:	459b      	cmp	fp, r3
 800fa4c:	d10a      	bne.n	800fa64 <_dtoa_r+0x6c4>
 800fa4e:	9b08      	ldr	r3, [sp, #32]
 800fa50:	3301      	adds	r3, #1
 800fa52:	9308      	str	r3, [sp, #32]
 800fa54:	2330      	movs	r3, #48	; 0x30
 800fa56:	f88b 3000 	strb.w	r3, [fp]
 800fa5a:	465b      	mov	r3, fp
 800fa5c:	781a      	ldrb	r2, [r3, #0]
 800fa5e:	3201      	adds	r2, #1
 800fa60:	701a      	strb	r2, [r3, #0]
 800fa62:	e78c      	b.n	800f97e <_dtoa_r+0x5de>
 800fa64:	461d      	mov	r5, r3
 800fa66:	e7ea      	b.n	800fa3e <_dtoa_r+0x69e>
 800fa68:	2200      	movs	r2, #0
 800fa6a:	4b9b      	ldr	r3, [pc, #620]	; (800fcd8 <_dtoa_r+0x938>)
 800fa6c:	f7f0 fdec 	bl	8000648 <__aeabi_dmul>
 800fa70:	2200      	movs	r2, #0
 800fa72:	2300      	movs	r3, #0
 800fa74:	4606      	mov	r6, r0
 800fa76:	460f      	mov	r7, r1
 800fa78:	f7f1 f84e 	bl	8000b18 <__aeabi_dcmpeq>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d09a      	beq.n	800f9b6 <_dtoa_r+0x616>
 800fa80:	e7cb      	b.n	800fa1a <_dtoa_r+0x67a>
 800fa82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa84:	2a00      	cmp	r2, #0
 800fa86:	f000 808b 	beq.w	800fba0 <_dtoa_r+0x800>
 800fa8a:	9a06      	ldr	r2, [sp, #24]
 800fa8c:	2a01      	cmp	r2, #1
 800fa8e:	dc6e      	bgt.n	800fb6e <_dtoa_r+0x7ce>
 800fa90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa92:	2a00      	cmp	r2, #0
 800fa94:	d067      	beq.n	800fb66 <_dtoa_r+0x7c6>
 800fa96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fa9a:	9f07      	ldr	r7, [sp, #28]
 800fa9c:	9d05      	ldr	r5, [sp, #20]
 800fa9e:	9a05      	ldr	r2, [sp, #20]
 800faa0:	2101      	movs	r1, #1
 800faa2:	441a      	add	r2, r3
 800faa4:	4620      	mov	r0, r4
 800faa6:	9205      	str	r2, [sp, #20]
 800faa8:	4498      	add	r8, r3
 800faaa:	f000 fd04 	bl	80104b6 <__i2b>
 800faae:	4606      	mov	r6, r0
 800fab0:	2d00      	cmp	r5, #0
 800fab2:	dd0c      	ble.n	800face <_dtoa_r+0x72e>
 800fab4:	f1b8 0f00 	cmp.w	r8, #0
 800fab8:	dd09      	ble.n	800face <_dtoa_r+0x72e>
 800faba:	4545      	cmp	r5, r8
 800fabc:	9a05      	ldr	r2, [sp, #20]
 800fabe:	462b      	mov	r3, r5
 800fac0:	bfa8      	it	ge
 800fac2:	4643      	movge	r3, r8
 800fac4:	1ad2      	subs	r2, r2, r3
 800fac6:	9205      	str	r2, [sp, #20]
 800fac8:	1aed      	subs	r5, r5, r3
 800faca:	eba8 0803 	sub.w	r8, r8, r3
 800face:	9b07      	ldr	r3, [sp, #28]
 800fad0:	b1eb      	cbz	r3, 800fb0e <_dtoa_r+0x76e>
 800fad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d067      	beq.n	800fba8 <_dtoa_r+0x808>
 800fad8:	b18f      	cbz	r7, 800fafe <_dtoa_r+0x75e>
 800fada:	4631      	mov	r1, r6
 800fadc:	463a      	mov	r2, r7
 800fade:	4620      	mov	r0, r4
 800fae0:	f000 fd88 	bl	80105f4 <__pow5mult>
 800fae4:	9a04      	ldr	r2, [sp, #16]
 800fae6:	4601      	mov	r1, r0
 800fae8:	4606      	mov	r6, r0
 800faea:	4620      	mov	r0, r4
 800faec:	f000 fcec 	bl	80104c8 <__multiply>
 800faf0:	9904      	ldr	r1, [sp, #16]
 800faf2:	9008      	str	r0, [sp, #32]
 800faf4:	4620      	mov	r0, r4
 800faf6:	f000 fc3e 	bl	8010376 <_Bfree>
 800fafa:	9b08      	ldr	r3, [sp, #32]
 800fafc:	9304      	str	r3, [sp, #16]
 800fafe:	9b07      	ldr	r3, [sp, #28]
 800fb00:	1bda      	subs	r2, r3, r7
 800fb02:	d004      	beq.n	800fb0e <_dtoa_r+0x76e>
 800fb04:	9904      	ldr	r1, [sp, #16]
 800fb06:	4620      	mov	r0, r4
 800fb08:	f000 fd74 	bl	80105f4 <__pow5mult>
 800fb0c:	9004      	str	r0, [sp, #16]
 800fb0e:	2101      	movs	r1, #1
 800fb10:	4620      	mov	r0, r4
 800fb12:	f000 fcd0 	bl	80104b6 <__i2b>
 800fb16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb18:	4607      	mov	r7, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	f000 81d0 	beq.w	800fec0 <_dtoa_r+0xb20>
 800fb20:	461a      	mov	r2, r3
 800fb22:	4601      	mov	r1, r0
 800fb24:	4620      	mov	r0, r4
 800fb26:	f000 fd65 	bl	80105f4 <__pow5mult>
 800fb2a:	9b06      	ldr	r3, [sp, #24]
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	4607      	mov	r7, r0
 800fb30:	dc40      	bgt.n	800fbb4 <_dtoa_r+0x814>
 800fb32:	9b00      	ldr	r3, [sp, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d139      	bne.n	800fbac <_dtoa_r+0x80c>
 800fb38:	9b01      	ldr	r3, [sp, #4]
 800fb3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d136      	bne.n	800fbb0 <_dtoa_r+0x810>
 800fb42:	9b01      	ldr	r3, [sp, #4]
 800fb44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb48:	0d1b      	lsrs	r3, r3, #20
 800fb4a:	051b      	lsls	r3, r3, #20
 800fb4c:	b12b      	cbz	r3, 800fb5a <_dtoa_r+0x7ba>
 800fb4e:	9b05      	ldr	r3, [sp, #20]
 800fb50:	3301      	adds	r3, #1
 800fb52:	9305      	str	r3, [sp, #20]
 800fb54:	f108 0801 	add.w	r8, r8, #1
 800fb58:	2301      	movs	r3, #1
 800fb5a:	9307      	str	r3, [sp, #28]
 800fb5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d12a      	bne.n	800fbb8 <_dtoa_r+0x818>
 800fb62:	2001      	movs	r0, #1
 800fb64:	e030      	b.n	800fbc8 <_dtoa_r+0x828>
 800fb66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fb6c:	e795      	b.n	800fa9a <_dtoa_r+0x6fa>
 800fb6e:	9b07      	ldr	r3, [sp, #28]
 800fb70:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800fb74:	42bb      	cmp	r3, r7
 800fb76:	bfbf      	itttt	lt
 800fb78:	9b07      	ldrlt	r3, [sp, #28]
 800fb7a:	9707      	strlt	r7, [sp, #28]
 800fb7c:	1afa      	sublt	r2, r7, r3
 800fb7e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fb80:	bfbb      	ittet	lt
 800fb82:	189b      	addlt	r3, r3, r2
 800fb84:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fb86:	1bdf      	subge	r7, r3, r7
 800fb88:	2700      	movlt	r7, #0
 800fb8a:	f1b9 0f00 	cmp.w	r9, #0
 800fb8e:	bfb5      	itete	lt
 800fb90:	9b05      	ldrlt	r3, [sp, #20]
 800fb92:	9d05      	ldrge	r5, [sp, #20]
 800fb94:	eba3 0509 	sublt.w	r5, r3, r9
 800fb98:	464b      	movge	r3, r9
 800fb9a:	bfb8      	it	lt
 800fb9c:	2300      	movlt	r3, #0
 800fb9e:	e77e      	b.n	800fa9e <_dtoa_r+0x6fe>
 800fba0:	9f07      	ldr	r7, [sp, #28]
 800fba2:	9d05      	ldr	r5, [sp, #20]
 800fba4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fba6:	e783      	b.n	800fab0 <_dtoa_r+0x710>
 800fba8:	9a07      	ldr	r2, [sp, #28]
 800fbaa:	e7ab      	b.n	800fb04 <_dtoa_r+0x764>
 800fbac:	2300      	movs	r3, #0
 800fbae:	e7d4      	b.n	800fb5a <_dtoa_r+0x7ba>
 800fbb0:	9b00      	ldr	r3, [sp, #0]
 800fbb2:	e7d2      	b.n	800fb5a <_dtoa_r+0x7ba>
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	9307      	str	r3, [sp, #28]
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fbbe:	6918      	ldr	r0, [r3, #16]
 800fbc0:	f000 fc2b 	bl	801041a <__hi0bits>
 800fbc4:	f1c0 0020 	rsb	r0, r0, #32
 800fbc8:	4440      	add	r0, r8
 800fbca:	f010 001f 	ands.w	r0, r0, #31
 800fbce:	d047      	beq.n	800fc60 <_dtoa_r+0x8c0>
 800fbd0:	f1c0 0320 	rsb	r3, r0, #32
 800fbd4:	2b04      	cmp	r3, #4
 800fbd6:	dd3b      	ble.n	800fc50 <_dtoa_r+0x8b0>
 800fbd8:	9b05      	ldr	r3, [sp, #20]
 800fbda:	f1c0 001c 	rsb	r0, r0, #28
 800fbde:	4403      	add	r3, r0
 800fbe0:	9305      	str	r3, [sp, #20]
 800fbe2:	4405      	add	r5, r0
 800fbe4:	4480      	add	r8, r0
 800fbe6:	9b05      	ldr	r3, [sp, #20]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	dd05      	ble.n	800fbf8 <_dtoa_r+0x858>
 800fbec:	461a      	mov	r2, r3
 800fbee:	9904      	ldr	r1, [sp, #16]
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f000 fd4d 	bl	8010690 <__lshift>
 800fbf6:	9004      	str	r0, [sp, #16]
 800fbf8:	f1b8 0f00 	cmp.w	r8, #0
 800fbfc:	dd05      	ble.n	800fc0a <_dtoa_r+0x86a>
 800fbfe:	4639      	mov	r1, r7
 800fc00:	4642      	mov	r2, r8
 800fc02:	4620      	mov	r0, r4
 800fc04:	f000 fd44 	bl	8010690 <__lshift>
 800fc08:	4607      	mov	r7, r0
 800fc0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc0c:	b353      	cbz	r3, 800fc64 <_dtoa_r+0x8c4>
 800fc0e:	4639      	mov	r1, r7
 800fc10:	9804      	ldr	r0, [sp, #16]
 800fc12:	f000 fd91 	bl	8010738 <__mcmp>
 800fc16:	2800      	cmp	r0, #0
 800fc18:	da24      	bge.n	800fc64 <_dtoa_r+0x8c4>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	220a      	movs	r2, #10
 800fc1e:	9904      	ldr	r1, [sp, #16]
 800fc20:	4620      	mov	r0, r4
 800fc22:	f000 fbbf 	bl	80103a4 <__multadd>
 800fc26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc28:	9004      	str	r0, [sp, #16]
 800fc2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f000 814d 	beq.w	800fece <_dtoa_r+0xb2e>
 800fc34:	2300      	movs	r3, #0
 800fc36:	4631      	mov	r1, r6
 800fc38:	220a      	movs	r2, #10
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f000 fbb2 	bl	80103a4 <__multadd>
 800fc40:	9b02      	ldr	r3, [sp, #8]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	4606      	mov	r6, r0
 800fc46:	dc4f      	bgt.n	800fce8 <_dtoa_r+0x948>
 800fc48:	9b06      	ldr	r3, [sp, #24]
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	dd4c      	ble.n	800fce8 <_dtoa_r+0x948>
 800fc4e:	e011      	b.n	800fc74 <_dtoa_r+0x8d4>
 800fc50:	d0c9      	beq.n	800fbe6 <_dtoa_r+0x846>
 800fc52:	9a05      	ldr	r2, [sp, #20]
 800fc54:	331c      	adds	r3, #28
 800fc56:	441a      	add	r2, r3
 800fc58:	9205      	str	r2, [sp, #20]
 800fc5a:	441d      	add	r5, r3
 800fc5c:	4498      	add	r8, r3
 800fc5e:	e7c2      	b.n	800fbe6 <_dtoa_r+0x846>
 800fc60:	4603      	mov	r3, r0
 800fc62:	e7f6      	b.n	800fc52 <_dtoa_r+0x8b2>
 800fc64:	f1b9 0f00 	cmp.w	r9, #0
 800fc68:	dc38      	bgt.n	800fcdc <_dtoa_r+0x93c>
 800fc6a:	9b06      	ldr	r3, [sp, #24]
 800fc6c:	2b02      	cmp	r3, #2
 800fc6e:	dd35      	ble.n	800fcdc <_dtoa_r+0x93c>
 800fc70:	f8cd 9008 	str.w	r9, [sp, #8]
 800fc74:	9b02      	ldr	r3, [sp, #8]
 800fc76:	b963      	cbnz	r3, 800fc92 <_dtoa_r+0x8f2>
 800fc78:	4639      	mov	r1, r7
 800fc7a:	2205      	movs	r2, #5
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f000 fb91 	bl	80103a4 <__multadd>
 800fc82:	4601      	mov	r1, r0
 800fc84:	4607      	mov	r7, r0
 800fc86:	9804      	ldr	r0, [sp, #16]
 800fc88:	f000 fd56 	bl	8010738 <__mcmp>
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	f73f adcc 	bgt.w	800f82a <_dtoa_r+0x48a>
 800fc92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc94:	465d      	mov	r5, fp
 800fc96:	ea6f 0a03 	mvn.w	sl, r3
 800fc9a:	f04f 0900 	mov.w	r9, #0
 800fc9e:	4639      	mov	r1, r7
 800fca0:	4620      	mov	r0, r4
 800fca2:	f000 fb68 	bl	8010376 <_Bfree>
 800fca6:	2e00      	cmp	r6, #0
 800fca8:	f43f aeb7 	beq.w	800fa1a <_dtoa_r+0x67a>
 800fcac:	f1b9 0f00 	cmp.w	r9, #0
 800fcb0:	d005      	beq.n	800fcbe <_dtoa_r+0x91e>
 800fcb2:	45b1      	cmp	r9, r6
 800fcb4:	d003      	beq.n	800fcbe <_dtoa_r+0x91e>
 800fcb6:	4649      	mov	r1, r9
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f000 fb5c 	bl	8010376 <_Bfree>
 800fcbe:	4631      	mov	r1, r6
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f000 fb58 	bl	8010376 <_Bfree>
 800fcc6:	e6a8      	b.n	800fa1a <_dtoa_r+0x67a>
 800fcc8:	2700      	movs	r7, #0
 800fcca:	463e      	mov	r6, r7
 800fccc:	e7e1      	b.n	800fc92 <_dtoa_r+0x8f2>
 800fcce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fcd2:	463e      	mov	r6, r7
 800fcd4:	e5a9      	b.n	800f82a <_dtoa_r+0x48a>
 800fcd6:	bf00      	nop
 800fcd8:	40240000 	.word	0x40240000
 800fcdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcde:	f8cd 9008 	str.w	r9, [sp, #8]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f000 80fa 	beq.w	800fedc <_dtoa_r+0xb3c>
 800fce8:	2d00      	cmp	r5, #0
 800fcea:	dd05      	ble.n	800fcf8 <_dtoa_r+0x958>
 800fcec:	4631      	mov	r1, r6
 800fcee:	462a      	mov	r2, r5
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f000 fccd 	bl	8010690 <__lshift>
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	9b07      	ldr	r3, [sp, #28]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d04c      	beq.n	800fd98 <_dtoa_r+0x9f8>
 800fcfe:	6871      	ldr	r1, [r6, #4]
 800fd00:	4620      	mov	r0, r4
 800fd02:	f000 fb04 	bl	801030e <_Balloc>
 800fd06:	6932      	ldr	r2, [r6, #16]
 800fd08:	3202      	adds	r2, #2
 800fd0a:	4605      	mov	r5, r0
 800fd0c:	0092      	lsls	r2, r2, #2
 800fd0e:	f106 010c 	add.w	r1, r6, #12
 800fd12:	300c      	adds	r0, #12
 800fd14:	f000 faf0 	bl	80102f8 <memcpy>
 800fd18:	2201      	movs	r2, #1
 800fd1a:	4629      	mov	r1, r5
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f000 fcb7 	bl	8010690 <__lshift>
 800fd22:	9b00      	ldr	r3, [sp, #0]
 800fd24:	f8cd b014 	str.w	fp, [sp, #20]
 800fd28:	f003 0301 	and.w	r3, r3, #1
 800fd2c:	46b1      	mov	r9, r6
 800fd2e:	9307      	str	r3, [sp, #28]
 800fd30:	4606      	mov	r6, r0
 800fd32:	4639      	mov	r1, r7
 800fd34:	9804      	ldr	r0, [sp, #16]
 800fd36:	f7ff faa5 	bl	800f284 <quorem>
 800fd3a:	4649      	mov	r1, r9
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fd42:	9804      	ldr	r0, [sp, #16]
 800fd44:	f000 fcf8 	bl	8010738 <__mcmp>
 800fd48:	4632      	mov	r2, r6
 800fd4a:	9000      	str	r0, [sp, #0]
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f000 fd0c 	bl	801076c <__mdiff>
 800fd54:	68c3      	ldr	r3, [r0, #12]
 800fd56:	4602      	mov	r2, r0
 800fd58:	bb03      	cbnz	r3, 800fd9c <_dtoa_r+0x9fc>
 800fd5a:	4601      	mov	r1, r0
 800fd5c:	9008      	str	r0, [sp, #32]
 800fd5e:	9804      	ldr	r0, [sp, #16]
 800fd60:	f000 fcea 	bl	8010738 <__mcmp>
 800fd64:	9a08      	ldr	r2, [sp, #32]
 800fd66:	4603      	mov	r3, r0
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	9308      	str	r3, [sp, #32]
 800fd6e:	f000 fb02 	bl	8010376 <_Bfree>
 800fd72:	9b08      	ldr	r3, [sp, #32]
 800fd74:	b9a3      	cbnz	r3, 800fda0 <_dtoa_r+0xa00>
 800fd76:	9a06      	ldr	r2, [sp, #24]
 800fd78:	b992      	cbnz	r2, 800fda0 <_dtoa_r+0xa00>
 800fd7a:	9a07      	ldr	r2, [sp, #28]
 800fd7c:	b982      	cbnz	r2, 800fda0 <_dtoa_r+0xa00>
 800fd7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fd82:	d029      	beq.n	800fdd8 <_dtoa_r+0xa38>
 800fd84:	9b00      	ldr	r3, [sp, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	dd01      	ble.n	800fd8e <_dtoa_r+0x9ee>
 800fd8a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fd8e:	9b05      	ldr	r3, [sp, #20]
 800fd90:	1c5d      	adds	r5, r3, #1
 800fd92:	f883 8000 	strb.w	r8, [r3]
 800fd96:	e782      	b.n	800fc9e <_dtoa_r+0x8fe>
 800fd98:	4630      	mov	r0, r6
 800fd9a:	e7c2      	b.n	800fd22 <_dtoa_r+0x982>
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	e7e3      	b.n	800fd68 <_dtoa_r+0x9c8>
 800fda0:	9a00      	ldr	r2, [sp, #0]
 800fda2:	2a00      	cmp	r2, #0
 800fda4:	db04      	blt.n	800fdb0 <_dtoa_r+0xa10>
 800fda6:	d125      	bne.n	800fdf4 <_dtoa_r+0xa54>
 800fda8:	9a06      	ldr	r2, [sp, #24]
 800fdaa:	bb1a      	cbnz	r2, 800fdf4 <_dtoa_r+0xa54>
 800fdac:	9a07      	ldr	r2, [sp, #28]
 800fdae:	bb0a      	cbnz	r2, 800fdf4 <_dtoa_r+0xa54>
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	ddec      	ble.n	800fd8e <_dtoa_r+0x9ee>
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	9904      	ldr	r1, [sp, #16]
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f000 fc69 	bl	8010690 <__lshift>
 800fdbe:	4639      	mov	r1, r7
 800fdc0:	9004      	str	r0, [sp, #16]
 800fdc2:	f000 fcb9 	bl	8010738 <__mcmp>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	dc03      	bgt.n	800fdd2 <_dtoa_r+0xa32>
 800fdca:	d1e0      	bne.n	800fd8e <_dtoa_r+0x9ee>
 800fdcc:	f018 0f01 	tst.w	r8, #1
 800fdd0:	d0dd      	beq.n	800fd8e <_dtoa_r+0x9ee>
 800fdd2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fdd6:	d1d8      	bne.n	800fd8a <_dtoa_r+0x9ea>
 800fdd8:	9b05      	ldr	r3, [sp, #20]
 800fdda:	9a05      	ldr	r2, [sp, #20]
 800fddc:	1c5d      	adds	r5, r3, #1
 800fdde:	2339      	movs	r3, #57	; 0x39
 800fde0:	7013      	strb	r3, [r2, #0]
 800fde2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fde6:	2b39      	cmp	r3, #57	; 0x39
 800fde8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fdec:	d04f      	beq.n	800fe8e <_dtoa_r+0xaee>
 800fdee:	3301      	adds	r3, #1
 800fdf0:	7013      	strb	r3, [r2, #0]
 800fdf2:	e754      	b.n	800fc9e <_dtoa_r+0x8fe>
 800fdf4:	9a05      	ldr	r2, [sp, #20]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f102 0501 	add.w	r5, r2, #1
 800fdfc:	dd06      	ble.n	800fe0c <_dtoa_r+0xa6c>
 800fdfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fe02:	d0e9      	beq.n	800fdd8 <_dtoa_r+0xa38>
 800fe04:	f108 0801 	add.w	r8, r8, #1
 800fe08:	9b05      	ldr	r3, [sp, #20]
 800fe0a:	e7c2      	b.n	800fd92 <_dtoa_r+0x9f2>
 800fe0c:	9a02      	ldr	r2, [sp, #8]
 800fe0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fe12:	eba5 030b 	sub.w	r3, r5, fp
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d021      	beq.n	800fe5e <_dtoa_r+0xabe>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	220a      	movs	r2, #10
 800fe1e:	9904      	ldr	r1, [sp, #16]
 800fe20:	4620      	mov	r0, r4
 800fe22:	f000 fabf 	bl	80103a4 <__multadd>
 800fe26:	45b1      	cmp	r9, r6
 800fe28:	9004      	str	r0, [sp, #16]
 800fe2a:	f04f 0300 	mov.w	r3, #0
 800fe2e:	f04f 020a 	mov.w	r2, #10
 800fe32:	4649      	mov	r1, r9
 800fe34:	4620      	mov	r0, r4
 800fe36:	d105      	bne.n	800fe44 <_dtoa_r+0xaa4>
 800fe38:	f000 fab4 	bl	80103a4 <__multadd>
 800fe3c:	4681      	mov	r9, r0
 800fe3e:	4606      	mov	r6, r0
 800fe40:	9505      	str	r5, [sp, #20]
 800fe42:	e776      	b.n	800fd32 <_dtoa_r+0x992>
 800fe44:	f000 faae 	bl	80103a4 <__multadd>
 800fe48:	4631      	mov	r1, r6
 800fe4a:	4681      	mov	r9, r0
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	220a      	movs	r2, #10
 800fe50:	4620      	mov	r0, r4
 800fe52:	f000 faa7 	bl	80103a4 <__multadd>
 800fe56:	4606      	mov	r6, r0
 800fe58:	e7f2      	b.n	800fe40 <_dtoa_r+0xaa0>
 800fe5a:	f04f 0900 	mov.w	r9, #0
 800fe5e:	2201      	movs	r2, #1
 800fe60:	9904      	ldr	r1, [sp, #16]
 800fe62:	4620      	mov	r0, r4
 800fe64:	f000 fc14 	bl	8010690 <__lshift>
 800fe68:	4639      	mov	r1, r7
 800fe6a:	9004      	str	r0, [sp, #16]
 800fe6c:	f000 fc64 	bl	8010738 <__mcmp>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	dcb6      	bgt.n	800fde2 <_dtoa_r+0xa42>
 800fe74:	d102      	bne.n	800fe7c <_dtoa_r+0xadc>
 800fe76:	f018 0f01 	tst.w	r8, #1
 800fe7a:	d1b2      	bne.n	800fde2 <_dtoa_r+0xa42>
 800fe7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fe80:	2b30      	cmp	r3, #48	; 0x30
 800fe82:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fe86:	f47f af0a 	bne.w	800fc9e <_dtoa_r+0x8fe>
 800fe8a:	4615      	mov	r5, r2
 800fe8c:	e7f6      	b.n	800fe7c <_dtoa_r+0xadc>
 800fe8e:	4593      	cmp	fp, r2
 800fe90:	d105      	bne.n	800fe9e <_dtoa_r+0xafe>
 800fe92:	2331      	movs	r3, #49	; 0x31
 800fe94:	f10a 0a01 	add.w	sl, sl, #1
 800fe98:	f88b 3000 	strb.w	r3, [fp]
 800fe9c:	e6ff      	b.n	800fc9e <_dtoa_r+0x8fe>
 800fe9e:	4615      	mov	r5, r2
 800fea0:	e79f      	b.n	800fde2 <_dtoa_r+0xa42>
 800fea2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ff08 <_dtoa_r+0xb68>
 800fea6:	e007      	b.n	800feb8 <_dtoa_r+0xb18>
 800fea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800feaa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ff0c <_dtoa_r+0xb6c>
 800feae:	b11b      	cbz	r3, 800feb8 <_dtoa_r+0xb18>
 800feb0:	f10b 0308 	add.w	r3, fp, #8
 800feb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800feb6:	6013      	str	r3, [r2, #0]
 800feb8:	4658      	mov	r0, fp
 800feba:	b017      	add	sp, #92	; 0x5c
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	9b06      	ldr	r3, [sp, #24]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	f77f ae35 	ble.w	800fb32 <_dtoa_r+0x792>
 800fec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800feca:	9307      	str	r3, [sp, #28]
 800fecc:	e649      	b.n	800fb62 <_dtoa_r+0x7c2>
 800fece:	9b02      	ldr	r3, [sp, #8]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	dc03      	bgt.n	800fedc <_dtoa_r+0xb3c>
 800fed4:	9b06      	ldr	r3, [sp, #24]
 800fed6:	2b02      	cmp	r3, #2
 800fed8:	f73f aecc 	bgt.w	800fc74 <_dtoa_r+0x8d4>
 800fedc:	465d      	mov	r5, fp
 800fede:	4639      	mov	r1, r7
 800fee0:	9804      	ldr	r0, [sp, #16]
 800fee2:	f7ff f9cf 	bl	800f284 <quorem>
 800fee6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800feea:	f805 8b01 	strb.w	r8, [r5], #1
 800feee:	9a02      	ldr	r2, [sp, #8]
 800fef0:	eba5 030b 	sub.w	r3, r5, fp
 800fef4:	429a      	cmp	r2, r3
 800fef6:	ddb0      	ble.n	800fe5a <_dtoa_r+0xaba>
 800fef8:	2300      	movs	r3, #0
 800fefa:	220a      	movs	r2, #10
 800fefc:	9904      	ldr	r1, [sp, #16]
 800fefe:	4620      	mov	r0, r4
 800ff00:	f000 fa50 	bl	80103a4 <__multadd>
 800ff04:	9004      	str	r0, [sp, #16]
 800ff06:	e7ea      	b.n	800fede <_dtoa_r+0xb3e>
 800ff08:	0801253c 	.word	0x0801253c
 800ff0c:	08012560 	.word	0x08012560

0800ff10 <__sflush_r>:
 800ff10:	898a      	ldrh	r2, [r1, #12]
 800ff12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff16:	4605      	mov	r5, r0
 800ff18:	0710      	lsls	r0, r2, #28
 800ff1a:	460c      	mov	r4, r1
 800ff1c:	d458      	bmi.n	800ffd0 <__sflush_r+0xc0>
 800ff1e:	684b      	ldr	r3, [r1, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	dc05      	bgt.n	800ff30 <__sflush_r+0x20>
 800ff24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	dc02      	bgt.n	800ff30 <__sflush_r+0x20>
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff32:	2e00      	cmp	r6, #0
 800ff34:	d0f9      	beq.n	800ff2a <__sflush_r+0x1a>
 800ff36:	2300      	movs	r3, #0
 800ff38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff3c:	682f      	ldr	r7, [r5, #0]
 800ff3e:	6a21      	ldr	r1, [r4, #32]
 800ff40:	602b      	str	r3, [r5, #0]
 800ff42:	d032      	beq.n	800ffaa <__sflush_r+0x9a>
 800ff44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff46:	89a3      	ldrh	r3, [r4, #12]
 800ff48:	075a      	lsls	r2, r3, #29
 800ff4a:	d505      	bpl.n	800ff58 <__sflush_r+0x48>
 800ff4c:	6863      	ldr	r3, [r4, #4]
 800ff4e:	1ac0      	subs	r0, r0, r3
 800ff50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff52:	b10b      	cbz	r3, 800ff58 <__sflush_r+0x48>
 800ff54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff56:	1ac0      	subs	r0, r0, r3
 800ff58:	2300      	movs	r3, #0
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff5e:	6a21      	ldr	r1, [r4, #32]
 800ff60:	4628      	mov	r0, r5
 800ff62:	47b0      	blx	r6
 800ff64:	1c43      	adds	r3, r0, #1
 800ff66:	89a3      	ldrh	r3, [r4, #12]
 800ff68:	d106      	bne.n	800ff78 <__sflush_r+0x68>
 800ff6a:	6829      	ldr	r1, [r5, #0]
 800ff6c:	291d      	cmp	r1, #29
 800ff6e:	d848      	bhi.n	8010002 <__sflush_r+0xf2>
 800ff70:	4a29      	ldr	r2, [pc, #164]	; (8010018 <__sflush_r+0x108>)
 800ff72:	40ca      	lsrs	r2, r1
 800ff74:	07d6      	lsls	r6, r2, #31
 800ff76:	d544      	bpl.n	8010002 <__sflush_r+0xf2>
 800ff78:	2200      	movs	r2, #0
 800ff7a:	6062      	str	r2, [r4, #4]
 800ff7c:	04d9      	lsls	r1, r3, #19
 800ff7e:	6922      	ldr	r2, [r4, #16]
 800ff80:	6022      	str	r2, [r4, #0]
 800ff82:	d504      	bpl.n	800ff8e <__sflush_r+0x7e>
 800ff84:	1c42      	adds	r2, r0, #1
 800ff86:	d101      	bne.n	800ff8c <__sflush_r+0x7c>
 800ff88:	682b      	ldr	r3, [r5, #0]
 800ff8a:	b903      	cbnz	r3, 800ff8e <__sflush_r+0x7e>
 800ff8c:	6560      	str	r0, [r4, #84]	; 0x54
 800ff8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff90:	602f      	str	r7, [r5, #0]
 800ff92:	2900      	cmp	r1, #0
 800ff94:	d0c9      	beq.n	800ff2a <__sflush_r+0x1a>
 800ff96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff9a:	4299      	cmp	r1, r3
 800ff9c:	d002      	beq.n	800ffa4 <__sflush_r+0x94>
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f000 fc9e 	bl	80108e0 <_free_r>
 800ffa4:	2000      	movs	r0, #0
 800ffa6:	6360      	str	r0, [r4, #52]	; 0x34
 800ffa8:	e7c0      	b.n	800ff2c <__sflush_r+0x1c>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	4628      	mov	r0, r5
 800ffae:	47b0      	blx	r6
 800ffb0:	1c41      	adds	r1, r0, #1
 800ffb2:	d1c8      	bne.n	800ff46 <__sflush_r+0x36>
 800ffb4:	682b      	ldr	r3, [r5, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d0c5      	beq.n	800ff46 <__sflush_r+0x36>
 800ffba:	2b1d      	cmp	r3, #29
 800ffbc:	d001      	beq.n	800ffc2 <__sflush_r+0xb2>
 800ffbe:	2b16      	cmp	r3, #22
 800ffc0:	d101      	bne.n	800ffc6 <__sflush_r+0xb6>
 800ffc2:	602f      	str	r7, [r5, #0]
 800ffc4:	e7b1      	b.n	800ff2a <__sflush_r+0x1a>
 800ffc6:	89a3      	ldrh	r3, [r4, #12]
 800ffc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffcc:	81a3      	strh	r3, [r4, #12]
 800ffce:	e7ad      	b.n	800ff2c <__sflush_r+0x1c>
 800ffd0:	690f      	ldr	r7, [r1, #16]
 800ffd2:	2f00      	cmp	r7, #0
 800ffd4:	d0a9      	beq.n	800ff2a <__sflush_r+0x1a>
 800ffd6:	0793      	lsls	r3, r2, #30
 800ffd8:	680e      	ldr	r6, [r1, #0]
 800ffda:	bf08      	it	eq
 800ffdc:	694b      	ldreq	r3, [r1, #20]
 800ffde:	600f      	str	r7, [r1, #0]
 800ffe0:	bf18      	it	ne
 800ffe2:	2300      	movne	r3, #0
 800ffe4:	eba6 0807 	sub.w	r8, r6, r7
 800ffe8:	608b      	str	r3, [r1, #8]
 800ffea:	f1b8 0f00 	cmp.w	r8, #0
 800ffee:	dd9c      	ble.n	800ff2a <__sflush_r+0x1a>
 800fff0:	4643      	mov	r3, r8
 800fff2:	463a      	mov	r2, r7
 800fff4:	6a21      	ldr	r1, [r4, #32]
 800fff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fff8:	4628      	mov	r0, r5
 800fffa:	47b0      	blx	r6
 800fffc:	2800      	cmp	r0, #0
 800fffe:	dc06      	bgt.n	801000e <__sflush_r+0xfe>
 8010000:	89a3      	ldrh	r3, [r4, #12]
 8010002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010006:	81a3      	strh	r3, [r4, #12]
 8010008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801000c:	e78e      	b.n	800ff2c <__sflush_r+0x1c>
 801000e:	4407      	add	r7, r0
 8010010:	eba8 0800 	sub.w	r8, r8, r0
 8010014:	e7e9      	b.n	800ffea <__sflush_r+0xda>
 8010016:	bf00      	nop
 8010018:	20400001 	.word	0x20400001

0801001c <_fflush_r>:
 801001c:	b538      	push	{r3, r4, r5, lr}
 801001e:	690b      	ldr	r3, [r1, #16]
 8010020:	4605      	mov	r5, r0
 8010022:	460c      	mov	r4, r1
 8010024:	b1db      	cbz	r3, 801005e <_fflush_r+0x42>
 8010026:	b118      	cbz	r0, 8010030 <_fflush_r+0x14>
 8010028:	6983      	ldr	r3, [r0, #24]
 801002a:	b90b      	cbnz	r3, 8010030 <_fflush_r+0x14>
 801002c:	f000 f860 	bl	80100f0 <__sinit>
 8010030:	4b0c      	ldr	r3, [pc, #48]	; (8010064 <_fflush_r+0x48>)
 8010032:	429c      	cmp	r4, r3
 8010034:	d109      	bne.n	801004a <_fflush_r+0x2e>
 8010036:	686c      	ldr	r4, [r5, #4]
 8010038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801003c:	b17b      	cbz	r3, 801005e <_fflush_r+0x42>
 801003e:	4621      	mov	r1, r4
 8010040:	4628      	mov	r0, r5
 8010042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010046:	f7ff bf63 	b.w	800ff10 <__sflush_r>
 801004a:	4b07      	ldr	r3, [pc, #28]	; (8010068 <_fflush_r+0x4c>)
 801004c:	429c      	cmp	r4, r3
 801004e:	d101      	bne.n	8010054 <_fflush_r+0x38>
 8010050:	68ac      	ldr	r4, [r5, #8]
 8010052:	e7f1      	b.n	8010038 <_fflush_r+0x1c>
 8010054:	4b05      	ldr	r3, [pc, #20]	; (801006c <_fflush_r+0x50>)
 8010056:	429c      	cmp	r4, r3
 8010058:	bf08      	it	eq
 801005a:	68ec      	ldreq	r4, [r5, #12]
 801005c:	e7ec      	b.n	8010038 <_fflush_r+0x1c>
 801005e:	2000      	movs	r0, #0
 8010060:	bd38      	pop	{r3, r4, r5, pc}
 8010062:	bf00      	nop
 8010064:	08012590 	.word	0x08012590
 8010068:	080125b0 	.word	0x080125b0
 801006c:	08012570 	.word	0x08012570

08010070 <std>:
 8010070:	2300      	movs	r3, #0
 8010072:	b510      	push	{r4, lr}
 8010074:	4604      	mov	r4, r0
 8010076:	e9c0 3300 	strd	r3, r3, [r0]
 801007a:	6083      	str	r3, [r0, #8]
 801007c:	8181      	strh	r1, [r0, #12]
 801007e:	6643      	str	r3, [r0, #100]	; 0x64
 8010080:	81c2      	strh	r2, [r0, #14]
 8010082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010086:	6183      	str	r3, [r0, #24]
 8010088:	4619      	mov	r1, r3
 801008a:	2208      	movs	r2, #8
 801008c:	305c      	adds	r0, #92	; 0x5c
 801008e:	f7fe fb2d 	bl	800e6ec <memset>
 8010092:	4b05      	ldr	r3, [pc, #20]	; (80100a8 <std+0x38>)
 8010094:	6263      	str	r3, [r4, #36]	; 0x24
 8010096:	4b05      	ldr	r3, [pc, #20]	; (80100ac <std+0x3c>)
 8010098:	62a3      	str	r3, [r4, #40]	; 0x28
 801009a:	4b05      	ldr	r3, [pc, #20]	; (80100b0 <std+0x40>)
 801009c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801009e:	4b05      	ldr	r3, [pc, #20]	; (80100b4 <std+0x44>)
 80100a0:	6224      	str	r4, [r4, #32]
 80100a2:	6323      	str	r3, [r4, #48]	; 0x30
 80100a4:	bd10      	pop	{r4, pc}
 80100a6:	bf00      	nop
 80100a8:	08010cf5 	.word	0x08010cf5
 80100ac:	08010d17 	.word	0x08010d17
 80100b0:	08010d4f 	.word	0x08010d4f
 80100b4:	08010d73 	.word	0x08010d73

080100b8 <_cleanup_r>:
 80100b8:	4901      	ldr	r1, [pc, #4]	; (80100c0 <_cleanup_r+0x8>)
 80100ba:	f000 b885 	b.w	80101c8 <_fwalk_reent>
 80100be:	bf00      	nop
 80100c0:	0801001d 	.word	0x0801001d

080100c4 <__sfmoreglue>:
 80100c4:	b570      	push	{r4, r5, r6, lr}
 80100c6:	1e4a      	subs	r2, r1, #1
 80100c8:	2568      	movs	r5, #104	; 0x68
 80100ca:	4355      	muls	r5, r2
 80100cc:	460e      	mov	r6, r1
 80100ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80100d2:	f000 fc53 	bl	801097c <_malloc_r>
 80100d6:	4604      	mov	r4, r0
 80100d8:	b140      	cbz	r0, 80100ec <__sfmoreglue+0x28>
 80100da:	2100      	movs	r1, #0
 80100dc:	e9c0 1600 	strd	r1, r6, [r0]
 80100e0:	300c      	adds	r0, #12
 80100e2:	60a0      	str	r0, [r4, #8]
 80100e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80100e8:	f7fe fb00 	bl	800e6ec <memset>
 80100ec:	4620      	mov	r0, r4
 80100ee:	bd70      	pop	{r4, r5, r6, pc}

080100f0 <__sinit>:
 80100f0:	6983      	ldr	r3, [r0, #24]
 80100f2:	b510      	push	{r4, lr}
 80100f4:	4604      	mov	r4, r0
 80100f6:	bb33      	cbnz	r3, 8010146 <__sinit+0x56>
 80100f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80100fc:	6503      	str	r3, [r0, #80]	; 0x50
 80100fe:	4b12      	ldr	r3, [pc, #72]	; (8010148 <__sinit+0x58>)
 8010100:	4a12      	ldr	r2, [pc, #72]	; (801014c <__sinit+0x5c>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	6282      	str	r2, [r0, #40]	; 0x28
 8010106:	4298      	cmp	r0, r3
 8010108:	bf04      	itt	eq
 801010a:	2301      	moveq	r3, #1
 801010c:	6183      	streq	r3, [r0, #24]
 801010e:	f000 f81f 	bl	8010150 <__sfp>
 8010112:	6060      	str	r0, [r4, #4]
 8010114:	4620      	mov	r0, r4
 8010116:	f000 f81b 	bl	8010150 <__sfp>
 801011a:	60a0      	str	r0, [r4, #8]
 801011c:	4620      	mov	r0, r4
 801011e:	f000 f817 	bl	8010150 <__sfp>
 8010122:	2200      	movs	r2, #0
 8010124:	60e0      	str	r0, [r4, #12]
 8010126:	2104      	movs	r1, #4
 8010128:	6860      	ldr	r0, [r4, #4]
 801012a:	f7ff ffa1 	bl	8010070 <std>
 801012e:	2201      	movs	r2, #1
 8010130:	2109      	movs	r1, #9
 8010132:	68a0      	ldr	r0, [r4, #8]
 8010134:	f7ff ff9c 	bl	8010070 <std>
 8010138:	2202      	movs	r2, #2
 801013a:	2112      	movs	r1, #18
 801013c:	68e0      	ldr	r0, [r4, #12]
 801013e:	f7ff ff97 	bl	8010070 <std>
 8010142:	2301      	movs	r3, #1
 8010144:	61a3      	str	r3, [r4, #24]
 8010146:	bd10      	pop	{r4, pc}
 8010148:	08012528 	.word	0x08012528
 801014c:	080100b9 	.word	0x080100b9

08010150 <__sfp>:
 8010150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010152:	4b1b      	ldr	r3, [pc, #108]	; (80101c0 <__sfp+0x70>)
 8010154:	681e      	ldr	r6, [r3, #0]
 8010156:	69b3      	ldr	r3, [r6, #24]
 8010158:	4607      	mov	r7, r0
 801015a:	b913      	cbnz	r3, 8010162 <__sfp+0x12>
 801015c:	4630      	mov	r0, r6
 801015e:	f7ff ffc7 	bl	80100f0 <__sinit>
 8010162:	3648      	adds	r6, #72	; 0x48
 8010164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010168:	3b01      	subs	r3, #1
 801016a:	d503      	bpl.n	8010174 <__sfp+0x24>
 801016c:	6833      	ldr	r3, [r6, #0]
 801016e:	b133      	cbz	r3, 801017e <__sfp+0x2e>
 8010170:	6836      	ldr	r6, [r6, #0]
 8010172:	e7f7      	b.n	8010164 <__sfp+0x14>
 8010174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010178:	b16d      	cbz	r5, 8010196 <__sfp+0x46>
 801017a:	3468      	adds	r4, #104	; 0x68
 801017c:	e7f4      	b.n	8010168 <__sfp+0x18>
 801017e:	2104      	movs	r1, #4
 8010180:	4638      	mov	r0, r7
 8010182:	f7ff ff9f 	bl	80100c4 <__sfmoreglue>
 8010186:	6030      	str	r0, [r6, #0]
 8010188:	2800      	cmp	r0, #0
 801018a:	d1f1      	bne.n	8010170 <__sfp+0x20>
 801018c:	230c      	movs	r3, #12
 801018e:	603b      	str	r3, [r7, #0]
 8010190:	4604      	mov	r4, r0
 8010192:	4620      	mov	r0, r4
 8010194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010196:	4b0b      	ldr	r3, [pc, #44]	; (80101c4 <__sfp+0x74>)
 8010198:	6665      	str	r5, [r4, #100]	; 0x64
 801019a:	e9c4 5500 	strd	r5, r5, [r4]
 801019e:	60a5      	str	r5, [r4, #8]
 80101a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80101a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80101a8:	2208      	movs	r2, #8
 80101aa:	4629      	mov	r1, r5
 80101ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80101b0:	f7fe fa9c 	bl	800e6ec <memset>
 80101b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80101b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80101bc:	e7e9      	b.n	8010192 <__sfp+0x42>
 80101be:	bf00      	nop
 80101c0:	08012528 	.word	0x08012528
 80101c4:	ffff0001 	.word	0xffff0001

080101c8 <_fwalk_reent>:
 80101c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101cc:	4680      	mov	r8, r0
 80101ce:	4689      	mov	r9, r1
 80101d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80101d4:	2600      	movs	r6, #0
 80101d6:	b914      	cbnz	r4, 80101de <_fwalk_reent+0x16>
 80101d8:	4630      	mov	r0, r6
 80101da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80101e2:	3f01      	subs	r7, #1
 80101e4:	d501      	bpl.n	80101ea <_fwalk_reent+0x22>
 80101e6:	6824      	ldr	r4, [r4, #0]
 80101e8:	e7f5      	b.n	80101d6 <_fwalk_reent+0xe>
 80101ea:	89ab      	ldrh	r3, [r5, #12]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d907      	bls.n	8010200 <_fwalk_reent+0x38>
 80101f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101f4:	3301      	adds	r3, #1
 80101f6:	d003      	beq.n	8010200 <_fwalk_reent+0x38>
 80101f8:	4629      	mov	r1, r5
 80101fa:	4640      	mov	r0, r8
 80101fc:	47c8      	blx	r9
 80101fe:	4306      	orrs	r6, r0
 8010200:	3568      	adds	r5, #104	; 0x68
 8010202:	e7ee      	b.n	80101e2 <_fwalk_reent+0x1a>

08010204 <_localeconv_r>:
 8010204:	4b04      	ldr	r3, [pc, #16]	; (8010218 <_localeconv_r+0x14>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	6a18      	ldr	r0, [r3, #32]
 801020a:	4b04      	ldr	r3, [pc, #16]	; (801021c <_localeconv_r+0x18>)
 801020c:	2800      	cmp	r0, #0
 801020e:	bf08      	it	eq
 8010210:	4618      	moveq	r0, r3
 8010212:	30f0      	adds	r0, #240	; 0xf0
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	20001cfc 	.word	0x20001cfc
 801021c:	20001d60 	.word	0x20001d60

08010220 <__swhatbuf_r>:
 8010220:	b570      	push	{r4, r5, r6, lr}
 8010222:	460e      	mov	r6, r1
 8010224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010228:	2900      	cmp	r1, #0
 801022a:	b096      	sub	sp, #88	; 0x58
 801022c:	4614      	mov	r4, r2
 801022e:	461d      	mov	r5, r3
 8010230:	da07      	bge.n	8010242 <__swhatbuf_r+0x22>
 8010232:	2300      	movs	r3, #0
 8010234:	602b      	str	r3, [r5, #0]
 8010236:	89b3      	ldrh	r3, [r6, #12]
 8010238:	061a      	lsls	r2, r3, #24
 801023a:	d410      	bmi.n	801025e <__swhatbuf_r+0x3e>
 801023c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010240:	e00e      	b.n	8010260 <__swhatbuf_r+0x40>
 8010242:	466a      	mov	r2, sp
 8010244:	f000 fdbc 	bl	8010dc0 <_fstat_r>
 8010248:	2800      	cmp	r0, #0
 801024a:	dbf2      	blt.n	8010232 <__swhatbuf_r+0x12>
 801024c:	9a01      	ldr	r2, [sp, #4]
 801024e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010256:	425a      	negs	r2, r3
 8010258:	415a      	adcs	r2, r3
 801025a:	602a      	str	r2, [r5, #0]
 801025c:	e7ee      	b.n	801023c <__swhatbuf_r+0x1c>
 801025e:	2340      	movs	r3, #64	; 0x40
 8010260:	2000      	movs	r0, #0
 8010262:	6023      	str	r3, [r4, #0]
 8010264:	b016      	add	sp, #88	; 0x58
 8010266:	bd70      	pop	{r4, r5, r6, pc}

08010268 <__smakebuf_r>:
 8010268:	898b      	ldrh	r3, [r1, #12]
 801026a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801026c:	079d      	lsls	r5, r3, #30
 801026e:	4606      	mov	r6, r0
 8010270:	460c      	mov	r4, r1
 8010272:	d507      	bpl.n	8010284 <__smakebuf_r+0x1c>
 8010274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010278:	6023      	str	r3, [r4, #0]
 801027a:	6123      	str	r3, [r4, #16]
 801027c:	2301      	movs	r3, #1
 801027e:	6163      	str	r3, [r4, #20]
 8010280:	b002      	add	sp, #8
 8010282:	bd70      	pop	{r4, r5, r6, pc}
 8010284:	ab01      	add	r3, sp, #4
 8010286:	466a      	mov	r2, sp
 8010288:	f7ff ffca 	bl	8010220 <__swhatbuf_r>
 801028c:	9900      	ldr	r1, [sp, #0]
 801028e:	4605      	mov	r5, r0
 8010290:	4630      	mov	r0, r6
 8010292:	f000 fb73 	bl	801097c <_malloc_r>
 8010296:	b948      	cbnz	r0, 80102ac <__smakebuf_r+0x44>
 8010298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801029c:	059a      	lsls	r2, r3, #22
 801029e:	d4ef      	bmi.n	8010280 <__smakebuf_r+0x18>
 80102a0:	f023 0303 	bic.w	r3, r3, #3
 80102a4:	f043 0302 	orr.w	r3, r3, #2
 80102a8:	81a3      	strh	r3, [r4, #12]
 80102aa:	e7e3      	b.n	8010274 <__smakebuf_r+0xc>
 80102ac:	4b0d      	ldr	r3, [pc, #52]	; (80102e4 <__smakebuf_r+0x7c>)
 80102ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	6020      	str	r0, [r4, #0]
 80102b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102b8:	81a3      	strh	r3, [r4, #12]
 80102ba:	9b00      	ldr	r3, [sp, #0]
 80102bc:	6163      	str	r3, [r4, #20]
 80102be:	9b01      	ldr	r3, [sp, #4]
 80102c0:	6120      	str	r0, [r4, #16]
 80102c2:	b15b      	cbz	r3, 80102dc <__smakebuf_r+0x74>
 80102c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102c8:	4630      	mov	r0, r6
 80102ca:	f000 fd8b 	bl	8010de4 <_isatty_r>
 80102ce:	b128      	cbz	r0, 80102dc <__smakebuf_r+0x74>
 80102d0:	89a3      	ldrh	r3, [r4, #12]
 80102d2:	f023 0303 	bic.w	r3, r3, #3
 80102d6:	f043 0301 	orr.w	r3, r3, #1
 80102da:	81a3      	strh	r3, [r4, #12]
 80102dc:	89a3      	ldrh	r3, [r4, #12]
 80102de:	431d      	orrs	r5, r3
 80102e0:	81a5      	strh	r5, [r4, #12]
 80102e2:	e7cd      	b.n	8010280 <__smakebuf_r+0x18>
 80102e4:	080100b9 	.word	0x080100b9

080102e8 <malloc>:
 80102e8:	4b02      	ldr	r3, [pc, #8]	; (80102f4 <malloc+0xc>)
 80102ea:	4601      	mov	r1, r0
 80102ec:	6818      	ldr	r0, [r3, #0]
 80102ee:	f000 bb45 	b.w	801097c <_malloc_r>
 80102f2:	bf00      	nop
 80102f4:	20001cfc 	.word	0x20001cfc

080102f8 <memcpy>:
 80102f8:	b510      	push	{r4, lr}
 80102fa:	1e43      	subs	r3, r0, #1
 80102fc:	440a      	add	r2, r1
 80102fe:	4291      	cmp	r1, r2
 8010300:	d100      	bne.n	8010304 <memcpy+0xc>
 8010302:	bd10      	pop	{r4, pc}
 8010304:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010308:	f803 4f01 	strb.w	r4, [r3, #1]!
 801030c:	e7f7      	b.n	80102fe <memcpy+0x6>

0801030e <_Balloc>:
 801030e:	b570      	push	{r4, r5, r6, lr}
 8010310:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010312:	4604      	mov	r4, r0
 8010314:	460e      	mov	r6, r1
 8010316:	b93d      	cbnz	r5, 8010328 <_Balloc+0x1a>
 8010318:	2010      	movs	r0, #16
 801031a:	f7ff ffe5 	bl	80102e8 <malloc>
 801031e:	6260      	str	r0, [r4, #36]	; 0x24
 8010320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010324:	6005      	str	r5, [r0, #0]
 8010326:	60c5      	str	r5, [r0, #12]
 8010328:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801032a:	68eb      	ldr	r3, [r5, #12]
 801032c:	b183      	cbz	r3, 8010350 <_Balloc+0x42>
 801032e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010336:	b9b8      	cbnz	r0, 8010368 <_Balloc+0x5a>
 8010338:	2101      	movs	r1, #1
 801033a:	fa01 f506 	lsl.w	r5, r1, r6
 801033e:	1d6a      	adds	r2, r5, #5
 8010340:	0092      	lsls	r2, r2, #2
 8010342:	4620      	mov	r0, r4
 8010344:	f000 fabe 	bl	80108c4 <_calloc_r>
 8010348:	b160      	cbz	r0, 8010364 <_Balloc+0x56>
 801034a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801034e:	e00e      	b.n	801036e <_Balloc+0x60>
 8010350:	2221      	movs	r2, #33	; 0x21
 8010352:	2104      	movs	r1, #4
 8010354:	4620      	mov	r0, r4
 8010356:	f000 fab5 	bl	80108c4 <_calloc_r>
 801035a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801035c:	60e8      	str	r0, [r5, #12]
 801035e:	68db      	ldr	r3, [r3, #12]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d1e4      	bne.n	801032e <_Balloc+0x20>
 8010364:	2000      	movs	r0, #0
 8010366:	bd70      	pop	{r4, r5, r6, pc}
 8010368:	6802      	ldr	r2, [r0, #0]
 801036a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801036e:	2300      	movs	r3, #0
 8010370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010374:	e7f7      	b.n	8010366 <_Balloc+0x58>

08010376 <_Bfree>:
 8010376:	b570      	push	{r4, r5, r6, lr}
 8010378:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801037a:	4606      	mov	r6, r0
 801037c:	460d      	mov	r5, r1
 801037e:	b93c      	cbnz	r4, 8010390 <_Bfree+0x1a>
 8010380:	2010      	movs	r0, #16
 8010382:	f7ff ffb1 	bl	80102e8 <malloc>
 8010386:	6270      	str	r0, [r6, #36]	; 0x24
 8010388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801038c:	6004      	str	r4, [r0, #0]
 801038e:	60c4      	str	r4, [r0, #12]
 8010390:	b13d      	cbz	r5, 80103a2 <_Bfree+0x2c>
 8010392:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010394:	686a      	ldr	r2, [r5, #4]
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801039c:	6029      	str	r1, [r5, #0]
 801039e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80103a2:	bd70      	pop	{r4, r5, r6, pc}

080103a4 <__multadd>:
 80103a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a8:	690d      	ldr	r5, [r1, #16]
 80103aa:	461f      	mov	r7, r3
 80103ac:	4606      	mov	r6, r0
 80103ae:	460c      	mov	r4, r1
 80103b0:	f101 0c14 	add.w	ip, r1, #20
 80103b4:	2300      	movs	r3, #0
 80103b6:	f8dc 0000 	ldr.w	r0, [ip]
 80103ba:	b281      	uxth	r1, r0
 80103bc:	fb02 7101 	mla	r1, r2, r1, r7
 80103c0:	0c0f      	lsrs	r7, r1, #16
 80103c2:	0c00      	lsrs	r0, r0, #16
 80103c4:	fb02 7000 	mla	r0, r2, r0, r7
 80103c8:	b289      	uxth	r1, r1
 80103ca:	3301      	adds	r3, #1
 80103cc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80103d0:	429d      	cmp	r5, r3
 80103d2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80103d6:	f84c 1b04 	str.w	r1, [ip], #4
 80103da:	dcec      	bgt.n	80103b6 <__multadd+0x12>
 80103dc:	b1d7      	cbz	r7, 8010414 <__multadd+0x70>
 80103de:	68a3      	ldr	r3, [r4, #8]
 80103e0:	42ab      	cmp	r3, r5
 80103e2:	dc12      	bgt.n	801040a <__multadd+0x66>
 80103e4:	6861      	ldr	r1, [r4, #4]
 80103e6:	4630      	mov	r0, r6
 80103e8:	3101      	adds	r1, #1
 80103ea:	f7ff ff90 	bl	801030e <_Balloc>
 80103ee:	6922      	ldr	r2, [r4, #16]
 80103f0:	3202      	adds	r2, #2
 80103f2:	f104 010c 	add.w	r1, r4, #12
 80103f6:	4680      	mov	r8, r0
 80103f8:	0092      	lsls	r2, r2, #2
 80103fa:	300c      	adds	r0, #12
 80103fc:	f7ff ff7c 	bl	80102f8 <memcpy>
 8010400:	4621      	mov	r1, r4
 8010402:	4630      	mov	r0, r6
 8010404:	f7ff ffb7 	bl	8010376 <_Bfree>
 8010408:	4644      	mov	r4, r8
 801040a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801040e:	3501      	adds	r5, #1
 8010410:	615f      	str	r7, [r3, #20]
 8010412:	6125      	str	r5, [r4, #16]
 8010414:	4620      	mov	r0, r4
 8010416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801041a <__hi0bits>:
 801041a:	0c02      	lsrs	r2, r0, #16
 801041c:	0412      	lsls	r2, r2, #16
 801041e:	4603      	mov	r3, r0
 8010420:	b9b2      	cbnz	r2, 8010450 <__hi0bits+0x36>
 8010422:	0403      	lsls	r3, r0, #16
 8010424:	2010      	movs	r0, #16
 8010426:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801042a:	bf04      	itt	eq
 801042c:	021b      	lsleq	r3, r3, #8
 801042e:	3008      	addeq	r0, #8
 8010430:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010434:	bf04      	itt	eq
 8010436:	011b      	lsleq	r3, r3, #4
 8010438:	3004      	addeq	r0, #4
 801043a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801043e:	bf04      	itt	eq
 8010440:	009b      	lsleq	r3, r3, #2
 8010442:	3002      	addeq	r0, #2
 8010444:	2b00      	cmp	r3, #0
 8010446:	db06      	blt.n	8010456 <__hi0bits+0x3c>
 8010448:	005b      	lsls	r3, r3, #1
 801044a:	d503      	bpl.n	8010454 <__hi0bits+0x3a>
 801044c:	3001      	adds	r0, #1
 801044e:	4770      	bx	lr
 8010450:	2000      	movs	r0, #0
 8010452:	e7e8      	b.n	8010426 <__hi0bits+0xc>
 8010454:	2020      	movs	r0, #32
 8010456:	4770      	bx	lr

08010458 <__lo0bits>:
 8010458:	6803      	ldr	r3, [r0, #0]
 801045a:	f013 0207 	ands.w	r2, r3, #7
 801045e:	4601      	mov	r1, r0
 8010460:	d00b      	beq.n	801047a <__lo0bits+0x22>
 8010462:	07da      	lsls	r2, r3, #31
 8010464:	d423      	bmi.n	80104ae <__lo0bits+0x56>
 8010466:	0798      	lsls	r0, r3, #30
 8010468:	bf49      	itett	mi
 801046a:	085b      	lsrmi	r3, r3, #1
 801046c:	089b      	lsrpl	r3, r3, #2
 801046e:	2001      	movmi	r0, #1
 8010470:	600b      	strmi	r3, [r1, #0]
 8010472:	bf5c      	itt	pl
 8010474:	600b      	strpl	r3, [r1, #0]
 8010476:	2002      	movpl	r0, #2
 8010478:	4770      	bx	lr
 801047a:	b298      	uxth	r0, r3
 801047c:	b9a8      	cbnz	r0, 80104aa <__lo0bits+0x52>
 801047e:	0c1b      	lsrs	r3, r3, #16
 8010480:	2010      	movs	r0, #16
 8010482:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010486:	bf04      	itt	eq
 8010488:	0a1b      	lsreq	r3, r3, #8
 801048a:	3008      	addeq	r0, #8
 801048c:	071a      	lsls	r2, r3, #28
 801048e:	bf04      	itt	eq
 8010490:	091b      	lsreq	r3, r3, #4
 8010492:	3004      	addeq	r0, #4
 8010494:	079a      	lsls	r2, r3, #30
 8010496:	bf04      	itt	eq
 8010498:	089b      	lsreq	r3, r3, #2
 801049a:	3002      	addeq	r0, #2
 801049c:	07da      	lsls	r2, r3, #31
 801049e:	d402      	bmi.n	80104a6 <__lo0bits+0x4e>
 80104a0:	085b      	lsrs	r3, r3, #1
 80104a2:	d006      	beq.n	80104b2 <__lo0bits+0x5a>
 80104a4:	3001      	adds	r0, #1
 80104a6:	600b      	str	r3, [r1, #0]
 80104a8:	4770      	bx	lr
 80104aa:	4610      	mov	r0, r2
 80104ac:	e7e9      	b.n	8010482 <__lo0bits+0x2a>
 80104ae:	2000      	movs	r0, #0
 80104b0:	4770      	bx	lr
 80104b2:	2020      	movs	r0, #32
 80104b4:	4770      	bx	lr

080104b6 <__i2b>:
 80104b6:	b510      	push	{r4, lr}
 80104b8:	460c      	mov	r4, r1
 80104ba:	2101      	movs	r1, #1
 80104bc:	f7ff ff27 	bl	801030e <_Balloc>
 80104c0:	2201      	movs	r2, #1
 80104c2:	6144      	str	r4, [r0, #20]
 80104c4:	6102      	str	r2, [r0, #16]
 80104c6:	bd10      	pop	{r4, pc}

080104c8 <__multiply>:
 80104c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104cc:	4614      	mov	r4, r2
 80104ce:	690a      	ldr	r2, [r1, #16]
 80104d0:	6923      	ldr	r3, [r4, #16]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	bfb8      	it	lt
 80104d6:	460b      	movlt	r3, r1
 80104d8:	4688      	mov	r8, r1
 80104da:	bfbc      	itt	lt
 80104dc:	46a0      	movlt	r8, r4
 80104de:	461c      	movlt	r4, r3
 80104e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80104e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80104e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80104ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80104f0:	eb07 0609 	add.w	r6, r7, r9
 80104f4:	42b3      	cmp	r3, r6
 80104f6:	bfb8      	it	lt
 80104f8:	3101      	addlt	r1, #1
 80104fa:	f7ff ff08 	bl	801030e <_Balloc>
 80104fe:	f100 0514 	add.w	r5, r0, #20
 8010502:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010506:	462b      	mov	r3, r5
 8010508:	2200      	movs	r2, #0
 801050a:	4573      	cmp	r3, lr
 801050c:	d316      	bcc.n	801053c <__multiply+0x74>
 801050e:	f104 0214 	add.w	r2, r4, #20
 8010512:	f108 0114 	add.w	r1, r8, #20
 8010516:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801051a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	9b00      	ldr	r3, [sp, #0]
 8010522:	9201      	str	r2, [sp, #4]
 8010524:	4293      	cmp	r3, r2
 8010526:	d80c      	bhi.n	8010542 <__multiply+0x7a>
 8010528:	2e00      	cmp	r6, #0
 801052a:	dd03      	ble.n	8010534 <__multiply+0x6c>
 801052c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010530:	2b00      	cmp	r3, #0
 8010532:	d05d      	beq.n	80105f0 <__multiply+0x128>
 8010534:	6106      	str	r6, [r0, #16]
 8010536:	b003      	add	sp, #12
 8010538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801053c:	f843 2b04 	str.w	r2, [r3], #4
 8010540:	e7e3      	b.n	801050a <__multiply+0x42>
 8010542:	f8b2 b000 	ldrh.w	fp, [r2]
 8010546:	f1bb 0f00 	cmp.w	fp, #0
 801054a:	d023      	beq.n	8010594 <__multiply+0xcc>
 801054c:	4689      	mov	r9, r1
 801054e:	46ac      	mov	ip, r5
 8010550:	f04f 0800 	mov.w	r8, #0
 8010554:	f859 4b04 	ldr.w	r4, [r9], #4
 8010558:	f8dc a000 	ldr.w	sl, [ip]
 801055c:	b2a3      	uxth	r3, r4
 801055e:	fa1f fa8a 	uxth.w	sl, sl
 8010562:	fb0b a303 	mla	r3, fp, r3, sl
 8010566:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801056a:	f8dc 4000 	ldr.w	r4, [ip]
 801056e:	4443      	add	r3, r8
 8010570:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010574:	fb0b 840a 	mla	r4, fp, sl, r8
 8010578:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801057c:	46e2      	mov	sl, ip
 801057e:	b29b      	uxth	r3, r3
 8010580:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010584:	454f      	cmp	r7, r9
 8010586:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801058a:	f84a 3b04 	str.w	r3, [sl], #4
 801058e:	d82b      	bhi.n	80105e8 <__multiply+0x120>
 8010590:	f8cc 8004 	str.w	r8, [ip, #4]
 8010594:	9b01      	ldr	r3, [sp, #4]
 8010596:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801059a:	3204      	adds	r2, #4
 801059c:	f1ba 0f00 	cmp.w	sl, #0
 80105a0:	d020      	beq.n	80105e4 <__multiply+0x11c>
 80105a2:	682b      	ldr	r3, [r5, #0]
 80105a4:	4689      	mov	r9, r1
 80105a6:	46a8      	mov	r8, r5
 80105a8:	f04f 0b00 	mov.w	fp, #0
 80105ac:	f8b9 c000 	ldrh.w	ip, [r9]
 80105b0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80105b4:	fb0a 440c 	mla	r4, sl, ip, r4
 80105b8:	445c      	add	r4, fp
 80105ba:	46c4      	mov	ip, r8
 80105bc:	b29b      	uxth	r3, r3
 80105be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80105c2:	f84c 3b04 	str.w	r3, [ip], #4
 80105c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80105ca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80105ce:	0c1b      	lsrs	r3, r3, #16
 80105d0:	fb0a b303 	mla	r3, sl, r3, fp
 80105d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80105d8:	454f      	cmp	r7, r9
 80105da:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80105de:	d805      	bhi.n	80105ec <__multiply+0x124>
 80105e0:	f8c8 3004 	str.w	r3, [r8, #4]
 80105e4:	3504      	adds	r5, #4
 80105e6:	e79b      	b.n	8010520 <__multiply+0x58>
 80105e8:	46d4      	mov	ip, sl
 80105ea:	e7b3      	b.n	8010554 <__multiply+0x8c>
 80105ec:	46e0      	mov	r8, ip
 80105ee:	e7dd      	b.n	80105ac <__multiply+0xe4>
 80105f0:	3e01      	subs	r6, #1
 80105f2:	e799      	b.n	8010528 <__multiply+0x60>

080105f4 <__pow5mult>:
 80105f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105f8:	4615      	mov	r5, r2
 80105fa:	f012 0203 	ands.w	r2, r2, #3
 80105fe:	4606      	mov	r6, r0
 8010600:	460f      	mov	r7, r1
 8010602:	d007      	beq.n	8010614 <__pow5mult+0x20>
 8010604:	3a01      	subs	r2, #1
 8010606:	4c21      	ldr	r4, [pc, #132]	; (801068c <__pow5mult+0x98>)
 8010608:	2300      	movs	r3, #0
 801060a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801060e:	f7ff fec9 	bl	80103a4 <__multadd>
 8010612:	4607      	mov	r7, r0
 8010614:	10ad      	asrs	r5, r5, #2
 8010616:	d035      	beq.n	8010684 <__pow5mult+0x90>
 8010618:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801061a:	b93c      	cbnz	r4, 801062c <__pow5mult+0x38>
 801061c:	2010      	movs	r0, #16
 801061e:	f7ff fe63 	bl	80102e8 <malloc>
 8010622:	6270      	str	r0, [r6, #36]	; 0x24
 8010624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010628:	6004      	str	r4, [r0, #0]
 801062a:	60c4      	str	r4, [r0, #12]
 801062c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010634:	b94c      	cbnz	r4, 801064a <__pow5mult+0x56>
 8010636:	f240 2171 	movw	r1, #625	; 0x271
 801063a:	4630      	mov	r0, r6
 801063c:	f7ff ff3b 	bl	80104b6 <__i2b>
 8010640:	2300      	movs	r3, #0
 8010642:	f8c8 0008 	str.w	r0, [r8, #8]
 8010646:	4604      	mov	r4, r0
 8010648:	6003      	str	r3, [r0, #0]
 801064a:	f04f 0800 	mov.w	r8, #0
 801064e:	07eb      	lsls	r3, r5, #31
 8010650:	d50a      	bpl.n	8010668 <__pow5mult+0x74>
 8010652:	4639      	mov	r1, r7
 8010654:	4622      	mov	r2, r4
 8010656:	4630      	mov	r0, r6
 8010658:	f7ff ff36 	bl	80104c8 <__multiply>
 801065c:	4639      	mov	r1, r7
 801065e:	4681      	mov	r9, r0
 8010660:	4630      	mov	r0, r6
 8010662:	f7ff fe88 	bl	8010376 <_Bfree>
 8010666:	464f      	mov	r7, r9
 8010668:	106d      	asrs	r5, r5, #1
 801066a:	d00b      	beq.n	8010684 <__pow5mult+0x90>
 801066c:	6820      	ldr	r0, [r4, #0]
 801066e:	b938      	cbnz	r0, 8010680 <__pow5mult+0x8c>
 8010670:	4622      	mov	r2, r4
 8010672:	4621      	mov	r1, r4
 8010674:	4630      	mov	r0, r6
 8010676:	f7ff ff27 	bl	80104c8 <__multiply>
 801067a:	6020      	str	r0, [r4, #0]
 801067c:	f8c0 8000 	str.w	r8, [r0]
 8010680:	4604      	mov	r4, r0
 8010682:	e7e4      	b.n	801064e <__pow5mult+0x5a>
 8010684:	4638      	mov	r0, r7
 8010686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801068a:	bf00      	nop
 801068c:	080126c0 	.word	0x080126c0

08010690 <__lshift>:
 8010690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010694:	460c      	mov	r4, r1
 8010696:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801069a:	6923      	ldr	r3, [r4, #16]
 801069c:	6849      	ldr	r1, [r1, #4]
 801069e:	eb0a 0903 	add.w	r9, sl, r3
 80106a2:	68a3      	ldr	r3, [r4, #8]
 80106a4:	4607      	mov	r7, r0
 80106a6:	4616      	mov	r6, r2
 80106a8:	f109 0501 	add.w	r5, r9, #1
 80106ac:	42ab      	cmp	r3, r5
 80106ae:	db32      	blt.n	8010716 <__lshift+0x86>
 80106b0:	4638      	mov	r0, r7
 80106b2:	f7ff fe2c 	bl	801030e <_Balloc>
 80106b6:	2300      	movs	r3, #0
 80106b8:	4680      	mov	r8, r0
 80106ba:	f100 0114 	add.w	r1, r0, #20
 80106be:	461a      	mov	r2, r3
 80106c0:	4553      	cmp	r3, sl
 80106c2:	db2b      	blt.n	801071c <__lshift+0x8c>
 80106c4:	6920      	ldr	r0, [r4, #16]
 80106c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80106ca:	f104 0314 	add.w	r3, r4, #20
 80106ce:	f016 021f 	ands.w	r2, r6, #31
 80106d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80106d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80106da:	d025      	beq.n	8010728 <__lshift+0x98>
 80106dc:	f1c2 0e20 	rsb	lr, r2, #32
 80106e0:	2000      	movs	r0, #0
 80106e2:	681e      	ldr	r6, [r3, #0]
 80106e4:	468a      	mov	sl, r1
 80106e6:	4096      	lsls	r6, r2
 80106e8:	4330      	orrs	r0, r6
 80106ea:	f84a 0b04 	str.w	r0, [sl], #4
 80106ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80106f2:	459c      	cmp	ip, r3
 80106f4:	fa20 f00e 	lsr.w	r0, r0, lr
 80106f8:	d814      	bhi.n	8010724 <__lshift+0x94>
 80106fa:	6048      	str	r0, [r1, #4]
 80106fc:	b108      	cbz	r0, 8010702 <__lshift+0x72>
 80106fe:	f109 0502 	add.w	r5, r9, #2
 8010702:	3d01      	subs	r5, #1
 8010704:	4638      	mov	r0, r7
 8010706:	f8c8 5010 	str.w	r5, [r8, #16]
 801070a:	4621      	mov	r1, r4
 801070c:	f7ff fe33 	bl	8010376 <_Bfree>
 8010710:	4640      	mov	r0, r8
 8010712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010716:	3101      	adds	r1, #1
 8010718:	005b      	lsls	r3, r3, #1
 801071a:	e7c7      	b.n	80106ac <__lshift+0x1c>
 801071c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010720:	3301      	adds	r3, #1
 8010722:	e7cd      	b.n	80106c0 <__lshift+0x30>
 8010724:	4651      	mov	r1, sl
 8010726:	e7dc      	b.n	80106e2 <__lshift+0x52>
 8010728:	3904      	subs	r1, #4
 801072a:	f853 2b04 	ldr.w	r2, [r3], #4
 801072e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010732:	459c      	cmp	ip, r3
 8010734:	d8f9      	bhi.n	801072a <__lshift+0x9a>
 8010736:	e7e4      	b.n	8010702 <__lshift+0x72>

08010738 <__mcmp>:
 8010738:	6903      	ldr	r3, [r0, #16]
 801073a:	690a      	ldr	r2, [r1, #16]
 801073c:	1a9b      	subs	r3, r3, r2
 801073e:	b530      	push	{r4, r5, lr}
 8010740:	d10c      	bne.n	801075c <__mcmp+0x24>
 8010742:	0092      	lsls	r2, r2, #2
 8010744:	3014      	adds	r0, #20
 8010746:	3114      	adds	r1, #20
 8010748:	1884      	adds	r4, r0, r2
 801074a:	4411      	add	r1, r2
 801074c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010750:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010754:	4295      	cmp	r5, r2
 8010756:	d003      	beq.n	8010760 <__mcmp+0x28>
 8010758:	d305      	bcc.n	8010766 <__mcmp+0x2e>
 801075a:	2301      	movs	r3, #1
 801075c:	4618      	mov	r0, r3
 801075e:	bd30      	pop	{r4, r5, pc}
 8010760:	42a0      	cmp	r0, r4
 8010762:	d3f3      	bcc.n	801074c <__mcmp+0x14>
 8010764:	e7fa      	b.n	801075c <__mcmp+0x24>
 8010766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801076a:	e7f7      	b.n	801075c <__mcmp+0x24>

0801076c <__mdiff>:
 801076c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010770:	460d      	mov	r5, r1
 8010772:	4607      	mov	r7, r0
 8010774:	4611      	mov	r1, r2
 8010776:	4628      	mov	r0, r5
 8010778:	4614      	mov	r4, r2
 801077a:	f7ff ffdd 	bl	8010738 <__mcmp>
 801077e:	1e06      	subs	r6, r0, #0
 8010780:	d108      	bne.n	8010794 <__mdiff+0x28>
 8010782:	4631      	mov	r1, r6
 8010784:	4638      	mov	r0, r7
 8010786:	f7ff fdc2 	bl	801030e <_Balloc>
 801078a:	2301      	movs	r3, #1
 801078c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010794:	bfa4      	itt	ge
 8010796:	4623      	movge	r3, r4
 8010798:	462c      	movge	r4, r5
 801079a:	4638      	mov	r0, r7
 801079c:	6861      	ldr	r1, [r4, #4]
 801079e:	bfa6      	itte	ge
 80107a0:	461d      	movge	r5, r3
 80107a2:	2600      	movge	r6, #0
 80107a4:	2601      	movlt	r6, #1
 80107a6:	f7ff fdb2 	bl	801030e <_Balloc>
 80107aa:	692b      	ldr	r3, [r5, #16]
 80107ac:	60c6      	str	r6, [r0, #12]
 80107ae:	6926      	ldr	r6, [r4, #16]
 80107b0:	f105 0914 	add.w	r9, r5, #20
 80107b4:	f104 0214 	add.w	r2, r4, #20
 80107b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80107bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80107c0:	f100 0514 	add.w	r5, r0, #20
 80107c4:	f04f 0e00 	mov.w	lr, #0
 80107c8:	f852 ab04 	ldr.w	sl, [r2], #4
 80107cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80107d0:	fa1e f18a 	uxtah	r1, lr, sl
 80107d4:	b2a3      	uxth	r3, r4
 80107d6:	1ac9      	subs	r1, r1, r3
 80107d8:	0c23      	lsrs	r3, r4, #16
 80107da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80107de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80107e2:	b289      	uxth	r1, r1
 80107e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80107e8:	45c8      	cmp	r8, r9
 80107ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80107ee:	4694      	mov	ip, r2
 80107f0:	f845 3b04 	str.w	r3, [r5], #4
 80107f4:	d8e8      	bhi.n	80107c8 <__mdiff+0x5c>
 80107f6:	45bc      	cmp	ip, r7
 80107f8:	d304      	bcc.n	8010804 <__mdiff+0x98>
 80107fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80107fe:	b183      	cbz	r3, 8010822 <__mdiff+0xb6>
 8010800:	6106      	str	r6, [r0, #16]
 8010802:	e7c5      	b.n	8010790 <__mdiff+0x24>
 8010804:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010808:	fa1e f381 	uxtah	r3, lr, r1
 801080c:	141a      	asrs	r2, r3, #16
 801080e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010812:	b29b      	uxth	r3, r3
 8010814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010818:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801081c:	f845 3b04 	str.w	r3, [r5], #4
 8010820:	e7e9      	b.n	80107f6 <__mdiff+0x8a>
 8010822:	3e01      	subs	r6, #1
 8010824:	e7e9      	b.n	80107fa <__mdiff+0x8e>

08010826 <__d2b>:
 8010826:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801082a:	460e      	mov	r6, r1
 801082c:	2101      	movs	r1, #1
 801082e:	ec59 8b10 	vmov	r8, r9, d0
 8010832:	4615      	mov	r5, r2
 8010834:	f7ff fd6b 	bl	801030e <_Balloc>
 8010838:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801083c:	4607      	mov	r7, r0
 801083e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010842:	bb34      	cbnz	r4, 8010892 <__d2b+0x6c>
 8010844:	9301      	str	r3, [sp, #4]
 8010846:	f1b8 0300 	subs.w	r3, r8, #0
 801084a:	d027      	beq.n	801089c <__d2b+0x76>
 801084c:	a802      	add	r0, sp, #8
 801084e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010852:	f7ff fe01 	bl	8010458 <__lo0bits>
 8010856:	9900      	ldr	r1, [sp, #0]
 8010858:	b1f0      	cbz	r0, 8010898 <__d2b+0x72>
 801085a:	9a01      	ldr	r2, [sp, #4]
 801085c:	f1c0 0320 	rsb	r3, r0, #32
 8010860:	fa02 f303 	lsl.w	r3, r2, r3
 8010864:	430b      	orrs	r3, r1
 8010866:	40c2      	lsrs	r2, r0
 8010868:	617b      	str	r3, [r7, #20]
 801086a:	9201      	str	r2, [sp, #4]
 801086c:	9b01      	ldr	r3, [sp, #4]
 801086e:	61bb      	str	r3, [r7, #24]
 8010870:	2b00      	cmp	r3, #0
 8010872:	bf14      	ite	ne
 8010874:	2102      	movne	r1, #2
 8010876:	2101      	moveq	r1, #1
 8010878:	6139      	str	r1, [r7, #16]
 801087a:	b1c4      	cbz	r4, 80108ae <__d2b+0x88>
 801087c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010880:	4404      	add	r4, r0
 8010882:	6034      	str	r4, [r6, #0]
 8010884:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010888:	6028      	str	r0, [r5, #0]
 801088a:	4638      	mov	r0, r7
 801088c:	b003      	add	sp, #12
 801088e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010896:	e7d5      	b.n	8010844 <__d2b+0x1e>
 8010898:	6179      	str	r1, [r7, #20]
 801089a:	e7e7      	b.n	801086c <__d2b+0x46>
 801089c:	a801      	add	r0, sp, #4
 801089e:	f7ff fddb 	bl	8010458 <__lo0bits>
 80108a2:	9b01      	ldr	r3, [sp, #4]
 80108a4:	617b      	str	r3, [r7, #20]
 80108a6:	2101      	movs	r1, #1
 80108a8:	6139      	str	r1, [r7, #16]
 80108aa:	3020      	adds	r0, #32
 80108ac:	e7e5      	b.n	801087a <__d2b+0x54>
 80108ae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80108b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80108b6:	6030      	str	r0, [r6, #0]
 80108b8:	6918      	ldr	r0, [r3, #16]
 80108ba:	f7ff fdae 	bl	801041a <__hi0bits>
 80108be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80108c2:	e7e1      	b.n	8010888 <__d2b+0x62>

080108c4 <_calloc_r>:
 80108c4:	b538      	push	{r3, r4, r5, lr}
 80108c6:	fb02 f401 	mul.w	r4, r2, r1
 80108ca:	4621      	mov	r1, r4
 80108cc:	f000 f856 	bl	801097c <_malloc_r>
 80108d0:	4605      	mov	r5, r0
 80108d2:	b118      	cbz	r0, 80108dc <_calloc_r+0x18>
 80108d4:	4622      	mov	r2, r4
 80108d6:	2100      	movs	r1, #0
 80108d8:	f7fd ff08 	bl	800e6ec <memset>
 80108dc:	4628      	mov	r0, r5
 80108de:	bd38      	pop	{r3, r4, r5, pc}

080108e0 <_free_r>:
 80108e0:	b538      	push	{r3, r4, r5, lr}
 80108e2:	4605      	mov	r5, r0
 80108e4:	2900      	cmp	r1, #0
 80108e6:	d045      	beq.n	8010974 <_free_r+0x94>
 80108e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108ec:	1f0c      	subs	r4, r1, #4
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	bfb8      	it	lt
 80108f2:	18e4      	addlt	r4, r4, r3
 80108f4:	f000 fac3 	bl	8010e7e <__malloc_lock>
 80108f8:	4a1f      	ldr	r2, [pc, #124]	; (8010978 <_free_r+0x98>)
 80108fa:	6813      	ldr	r3, [r2, #0]
 80108fc:	4610      	mov	r0, r2
 80108fe:	b933      	cbnz	r3, 801090e <_free_r+0x2e>
 8010900:	6063      	str	r3, [r4, #4]
 8010902:	6014      	str	r4, [r2, #0]
 8010904:	4628      	mov	r0, r5
 8010906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801090a:	f000 bab9 	b.w	8010e80 <__malloc_unlock>
 801090e:	42a3      	cmp	r3, r4
 8010910:	d90c      	bls.n	801092c <_free_r+0x4c>
 8010912:	6821      	ldr	r1, [r4, #0]
 8010914:	1862      	adds	r2, r4, r1
 8010916:	4293      	cmp	r3, r2
 8010918:	bf04      	itt	eq
 801091a:	681a      	ldreq	r2, [r3, #0]
 801091c:	685b      	ldreq	r3, [r3, #4]
 801091e:	6063      	str	r3, [r4, #4]
 8010920:	bf04      	itt	eq
 8010922:	1852      	addeq	r2, r2, r1
 8010924:	6022      	streq	r2, [r4, #0]
 8010926:	6004      	str	r4, [r0, #0]
 8010928:	e7ec      	b.n	8010904 <_free_r+0x24>
 801092a:	4613      	mov	r3, r2
 801092c:	685a      	ldr	r2, [r3, #4]
 801092e:	b10a      	cbz	r2, 8010934 <_free_r+0x54>
 8010930:	42a2      	cmp	r2, r4
 8010932:	d9fa      	bls.n	801092a <_free_r+0x4a>
 8010934:	6819      	ldr	r1, [r3, #0]
 8010936:	1858      	adds	r0, r3, r1
 8010938:	42a0      	cmp	r0, r4
 801093a:	d10b      	bne.n	8010954 <_free_r+0x74>
 801093c:	6820      	ldr	r0, [r4, #0]
 801093e:	4401      	add	r1, r0
 8010940:	1858      	adds	r0, r3, r1
 8010942:	4282      	cmp	r2, r0
 8010944:	6019      	str	r1, [r3, #0]
 8010946:	d1dd      	bne.n	8010904 <_free_r+0x24>
 8010948:	6810      	ldr	r0, [r2, #0]
 801094a:	6852      	ldr	r2, [r2, #4]
 801094c:	605a      	str	r2, [r3, #4]
 801094e:	4401      	add	r1, r0
 8010950:	6019      	str	r1, [r3, #0]
 8010952:	e7d7      	b.n	8010904 <_free_r+0x24>
 8010954:	d902      	bls.n	801095c <_free_r+0x7c>
 8010956:	230c      	movs	r3, #12
 8010958:	602b      	str	r3, [r5, #0]
 801095a:	e7d3      	b.n	8010904 <_free_r+0x24>
 801095c:	6820      	ldr	r0, [r4, #0]
 801095e:	1821      	adds	r1, r4, r0
 8010960:	428a      	cmp	r2, r1
 8010962:	bf04      	itt	eq
 8010964:	6811      	ldreq	r1, [r2, #0]
 8010966:	6852      	ldreq	r2, [r2, #4]
 8010968:	6062      	str	r2, [r4, #4]
 801096a:	bf04      	itt	eq
 801096c:	1809      	addeq	r1, r1, r0
 801096e:	6021      	streq	r1, [r4, #0]
 8010970:	605c      	str	r4, [r3, #4]
 8010972:	e7c7      	b.n	8010904 <_free_r+0x24>
 8010974:	bd38      	pop	{r3, r4, r5, pc}
 8010976:	bf00      	nop
 8010978:	20001f2c 	.word	0x20001f2c

0801097c <_malloc_r>:
 801097c:	b570      	push	{r4, r5, r6, lr}
 801097e:	1ccd      	adds	r5, r1, #3
 8010980:	f025 0503 	bic.w	r5, r5, #3
 8010984:	3508      	adds	r5, #8
 8010986:	2d0c      	cmp	r5, #12
 8010988:	bf38      	it	cc
 801098a:	250c      	movcc	r5, #12
 801098c:	2d00      	cmp	r5, #0
 801098e:	4606      	mov	r6, r0
 8010990:	db01      	blt.n	8010996 <_malloc_r+0x1a>
 8010992:	42a9      	cmp	r1, r5
 8010994:	d903      	bls.n	801099e <_malloc_r+0x22>
 8010996:	230c      	movs	r3, #12
 8010998:	6033      	str	r3, [r6, #0]
 801099a:	2000      	movs	r0, #0
 801099c:	bd70      	pop	{r4, r5, r6, pc}
 801099e:	f000 fa6e 	bl	8010e7e <__malloc_lock>
 80109a2:	4a21      	ldr	r2, [pc, #132]	; (8010a28 <_malloc_r+0xac>)
 80109a4:	6814      	ldr	r4, [r2, #0]
 80109a6:	4621      	mov	r1, r4
 80109a8:	b991      	cbnz	r1, 80109d0 <_malloc_r+0x54>
 80109aa:	4c20      	ldr	r4, [pc, #128]	; (8010a2c <_malloc_r+0xb0>)
 80109ac:	6823      	ldr	r3, [r4, #0]
 80109ae:	b91b      	cbnz	r3, 80109b8 <_malloc_r+0x3c>
 80109b0:	4630      	mov	r0, r6
 80109b2:	f000 f98f 	bl	8010cd4 <_sbrk_r>
 80109b6:	6020      	str	r0, [r4, #0]
 80109b8:	4629      	mov	r1, r5
 80109ba:	4630      	mov	r0, r6
 80109bc:	f000 f98a 	bl	8010cd4 <_sbrk_r>
 80109c0:	1c43      	adds	r3, r0, #1
 80109c2:	d124      	bne.n	8010a0e <_malloc_r+0x92>
 80109c4:	230c      	movs	r3, #12
 80109c6:	6033      	str	r3, [r6, #0]
 80109c8:	4630      	mov	r0, r6
 80109ca:	f000 fa59 	bl	8010e80 <__malloc_unlock>
 80109ce:	e7e4      	b.n	801099a <_malloc_r+0x1e>
 80109d0:	680b      	ldr	r3, [r1, #0]
 80109d2:	1b5b      	subs	r3, r3, r5
 80109d4:	d418      	bmi.n	8010a08 <_malloc_r+0x8c>
 80109d6:	2b0b      	cmp	r3, #11
 80109d8:	d90f      	bls.n	80109fa <_malloc_r+0x7e>
 80109da:	600b      	str	r3, [r1, #0]
 80109dc:	50cd      	str	r5, [r1, r3]
 80109de:	18cc      	adds	r4, r1, r3
 80109e0:	4630      	mov	r0, r6
 80109e2:	f000 fa4d 	bl	8010e80 <__malloc_unlock>
 80109e6:	f104 000b 	add.w	r0, r4, #11
 80109ea:	1d23      	adds	r3, r4, #4
 80109ec:	f020 0007 	bic.w	r0, r0, #7
 80109f0:	1ac3      	subs	r3, r0, r3
 80109f2:	d0d3      	beq.n	801099c <_malloc_r+0x20>
 80109f4:	425a      	negs	r2, r3
 80109f6:	50e2      	str	r2, [r4, r3]
 80109f8:	e7d0      	b.n	801099c <_malloc_r+0x20>
 80109fa:	428c      	cmp	r4, r1
 80109fc:	684b      	ldr	r3, [r1, #4]
 80109fe:	bf16      	itet	ne
 8010a00:	6063      	strne	r3, [r4, #4]
 8010a02:	6013      	streq	r3, [r2, #0]
 8010a04:	460c      	movne	r4, r1
 8010a06:	e7eb      	b.n	80109e0 <_malloc_r+0x64>
 8010a08:	460c      	mov	r4, r1
 8010a0a:	6849      	ldr	r1, [r1, #4]
 8010a0c:	e7cc      	b.n	80109a8 <_malloc_r+0x2c>
 8010a0e:	1cc4      	adds	r4, r0, #3
 8010a10:	f024 0403 	bic.w	r4, r4, #3
 8010a14:	42a0      	cmp	r0, r4
 8010a16:	d005      	beq.n	8010a24 <_malloc_r+0xa8>
 8010a18:	1a21      	subs	r1, r4, r0
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f000 f95a 	bl	8010cd4 <_sbrk_r>
 8010a20:	3001      	adds	r0, #1
 8010a22:	d0cf      	beq.n	80109c4 <_malloc_r+0x48>
 8010a24:	6025      	str	r5, [r4, #0]
 8010a26:	e7db      	b.n	80109e0 <_malloc_r+0x64>
 8010a28:	20001f2c 	.word	0x20001f2c
 8010a2c:	20001f30 	.word	0x20001f30

08010a30 <__ssputs_r>:
 8010a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a34:	688e      	ldr	r6, [r1, #8]
 8010a36:	429e      	cmp	r6, r3
 8010a38:	4682      	mov	sl, r0
 8010a3a:	460c      	mov	r4, r1
 8010a3c:	4690      	mov	r8, r2
 8010a3e:	4699      	mov	r9, r3
 8010a40:	d837      	bhi.n	8010ab2 <__ssputs_r+0x82>
 8010a42:	898a      	ldrh	r2, [r1, #12]
 8010a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a48:	d031      	beq.n	8010aae <__ssputs_r+0x7e>
 8010a4a:	6825      	ldr	r5, [r4, #0]
 8010a4c:	6909      	ldr	r1, [r1, #16]
 8010a4e:	1a6f      	subs	r7, r5, r1
 8010a50:	6965      	ldr	r5, [r4, #20]
 8010a52:	2302      	movs	r3, #2
 8010a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a58:	fb95 f5f3 	sdiv	r5, r5, r3
 8010a5c:	f109 0301 	add.w	r3, r9, #1
 8010a60:	443b      	add	r3, r7
 8010a62:	429d      	cmp	r5, r3
 8010a64:	bf38      	it	cc
 8010a66:	461d      	movcc	r5, r3
 8010a68:	0553      	lsls	r3, r2, #21
 8010a6a:	d530      	bpl.n	8010ace <__ssputs_r+0x9e>
 8010a6c:	4629      	mov	r1, r5
 8010a6e:	f7ff ff85 	bl	801097c <_malloc_r>
 8010a72:	4606      	mov	r6, r0
 8010a74:	b950      	cbnz	r0, 8010a8c <__ssputs_r+0x5c>
 8010a76:	230c      	movs	r3, #12
 8010a78:	f8ca 3000 	str.w	r3, [sl]
 8010a7c:	89a3      	ldrh	r3, [r4, #12]
 8010a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a82:	81a3      	strh	r3, [r4, #12]
 8010a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a8c:	463a      	mov	r2, r7
 8010a8e:	6921      	ldr	r1, [r4, #16]
 8010a90:	f7ff fc32 	bl	80102f8 <memcpy>
 8010a94:	89a3      	ldrh	r3, [r4, #12]
 8010a96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a9e:	81a3      	strh	r3, [r4, #12]
 8010aa0:	6126      	str	r6, [r4, #16]
 8010aa2:	6165      	str	r5, [r4, #20]
 8010aa4:	443e      	add	r6, r7
 8010aa6:	1bed      	subs	r5, r5, r7
 8010aa8:	6026      	str	r6, [r4, #0]
 8010aaa:	60a5      	str	r5, [r4, #8]
 8010aac:	464e      	mov	r6, r9
 8010aae:	454e      	cmp	r6, r9
 8010ab0:	d900      	bls.n	8010ab4 <__ssputs_r+0x84>
 8010ab2:	464e      	mov	r6, r9
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	4641      	mov	r1, r8
 8010ab8:	6820      	ldr	r0, [r4, #0]
 8010aba:	f000 f9c7 	bl	8010e4c <memmove>
 8010abe:	68a3      	ldr	r3, [r4, #8]
 8010ac0:	1b9b      	subs	r3, r3, r6
 8010ac2:	60a3      	str	r3, [r4, #8]
 8010ac4:	6823      	ldr	r3, [r4, #0]
 8010ac6:	441e      	add	r6, r3
 8010ac8:	6026      	str	r6, [r4, #0]
 8010aca:	2000      	movs	r0, #0
 8010acc:	e7dc      	b.n	8010a88 <__ssputs_r+0x58>
 8010ace:	462a      	mov	r2, r5
 8010ad0:	f000 f9d7 	bl	8010e82 <_realloc_r>
 8010ad4:	4606      	mov	r6, r0
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d1e2      	bne.n	8010aa0 <__ssputs_r+0x70>
 8010ada:	6921      	ldr	r1, [r4, #16]
 8010adc:	4650      	mov	r0, sl
 8010ade:	f7ff feff 	bl	80108e0 <_free_r>
 8010ae2:	e7c8      	b.n	8010a76 <__ssputs_r+0x46>

08010ae4 <_svfiprintf_r>:
 8010ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae8:	461d      	mov	r5, r3
 8010aea:	898b      	ldrh	r3, [r1, #12]
 8010aec:	061f      	lsls	r7, r3, #24
 8010aee:	b09d      	sub	sp, #116	; 0x74
 8010af0:	4680      	mov	r8, r0
 8010af2:	460c      	mov	r4, r1
 8010af4:	4616      	mov	r6, r2
 8010af6:	d50f      	bpl.n	8010b18 <_svfiprintf_r+0x34>
 8010af8:	690b      	ldr	r3, [r1, #16]
 8010afa:	b96b      	cbnz	r3, 8010b18 <_svfiprintf_r+0x34>
 8010afc:	2140      	movs	r1, #64	; 0x40
 8010afe:	f7ff ff3d 	bl	801097c <_malloc_r>
 8010b02:	6020      	str	r0, [r4, #0]
 8010b04:	6120      	str	r0, [r4, #16]
 8010b06:	b928      	cbnz	r0, 8010b14 <_svfiprintf_r+0x30>
 8010b08:	230c      	movs	r3, #12
 8010b0a:	f8c8 3000 	str.w	r3, [r8]
 8010b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b12:	e0c8      	b.n	8010ca6 <_svfiprintf_r+0x1c2>
 8010b14:	2340      	movs	r3, #64	; 0x40
 8010b16:	6163      	str	r3, [r4, #20]
 8010b18:	2300      	movs	r3, #0
 8010b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010b1c:	2320      	movs	r3, #32
 8010b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b22:	2330      	movs	r3, #48	; 0x30
 8010b24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b28:	9503      	str	r5, [sp, #12]
 8010b2a:	f04f 0b01 	mov.w	fp, #1
 8010b2e:	4637      	mov	r7, r6
 8010b30:	463d      	mov	r5, r7
 8010b32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010b36:	b10b      	cbz	r3, 8010b3c <_svfiprintf_r+0x58>
 8010b38:	2b25      	cmp	r3, #37	; 0x25
 8010b3a:	d13e      	bne.n	8010bba <_svfiprintf_r+0xd6>
 8010b3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010b40:	d00b      	beq.n	8010b5a <_svfiprintf_r+0x76>
 8010b42:	4653      	mov	r3, sl
 8010b44:	4632      	mov	r2, r6
 8010b46:	4621      	mov	r1, r4
 8010b48:	4640      	mov	r0, r8
 8010b4a:	f7ff ff71 	bl	8010a30 <__ssputs_r>
 8010b4e:	3001      	adds	r0, #1
 8010b50:	f000 80a4 	beq.w	8010c9c <_svfiprintf_r+0x1b8>
 8010b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b56:	4453      	add	r3, sl
 8010b58:	9309      	str	r3, [sp, #36]	; 0x24
 8010b5a:	783b      	ldrb	r3, [r7, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f000 809d 	beq.w	8010c9c <_svfiprintf_r+0x1b8>
 8010b62:	2300      	movs	r3, #0
 8010b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b6c:	9304      	str	r3, [sp, #16]
 8010b6e:	9307      	str	r3, [sp, #28]
 8010b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b74:	931a      	str	r3, [sp, #104]	; 0x68
 8010b76:	462f      	mov	r7, r5
 8010b78:	2205      	movs	r2, #5
 8010b7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010b7e:	4850      	ldr	r0, [pc, #320]	; (8010cc0 <_svfiprintf_r+0x1dc>)
 8010b80:	f7ef fb56 	bl	8000230 <memchr>
 8010b84:	9b04      	ldr	r3, [sp, #16]
 8010b86:	b9d0      	cbnz	r0, 8010bbe <_svfiprintf_r+0xda>
 8010b88:	06d9      	lsls	r1, r3, #27
 8010b8a:	bf44      	itt	mi
 8010b8c:	2220      	movmi	r2, #32
 8010b8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010b92:	071a      	lsls	r2, r3, #28
 8010b94:	bf44      	itt	mi
 8010b96:	222b      	movmi	r2, #43	; 0x2b
 8010b98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010b9c:	782a      	ldrb	r2, [r5, #0]
 8010b9e:	2a2a      	cmp	r2, #42	; 0x2a
 8010ba0:	d015      	beq.n	8010bce <_svfiprintf_r+0xea>
 8010ba2:	9a07      	ldr	r2, [sp, #28]
 8010ba4:	462f      	mov	r7, r5
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	250a      	movs	r5, #10
 8010baa:	4639      	mov	r1, r7
 8010bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bb0:	3b30      	subs	r3, #48	; 0x30
 8010bb2:	2b09      	cmp	r3, #9
 8010bb4:	d94d      	bls.n	8010c52 <_svfiprintf_r+0x16e>
 8010bb6:	b1b8      	cbz	r0, 8010be8 <_svfiprintf_r+0x104>
 8010bb8:	e00f      	b.n	8010bda <_svfiprintf_r+0xf6>
 8010bba:	462f      	mov	r7, r5
 8010bbc:	e7b8      	b.n	8010b30 <_svfiprintf_r+0x4c>
 8010bbe:	4a40      	ldr	r2, [pc, #256]	; (8010cc0 <_svfiprintf_r+0x1dc>)
 8010bc0:	1a80      	subs	r0, r0, r2
 8010bc2:	fa0b f000 	lsl.w	r0, fp, r0
 8010bc6:	4318      	orrs	r0, r3
 8010bc8:	9004      	str	r0, [sp, #16]
 8010bca:	463d      	mov	r5, r7
 8010bcc:	e7d3      	b.n	8010b76 <_svfiprintf_r+0x92>
 8010bce:	9a03      	ldr	r2, [sp, #12]
 8010bd0:	1d11      	adds	r1, r2, #4
 8010bd2:	6812      	ldr	r2, [r2, #0]
 8010bd4:	9103      	str	r1, [sp, #12]
 8010bd6:	2a00      	cmp	r2, #0
 8010bd8:	db01      	blt.n	8010bde <_svfiprintf_r+0xfa>
 8010bda:	9207      	str	r2, [sp, #28]
 8010bdc:	e004      	b.n	8010be8 <_svfiprintf_r+0x104>
 8010bde:	4252      	negs	r2, r2
 8010be0:	f043 0302 	orr.w	r3, r3, #2
 8010be4:	9207      	str	r2, [sp, #28]
 8010be6:	9304      	str	r3, [sp, #16]
 8010be8:	783b      	ldrb	r3, [r7, #0]
 8010bea:	2b2e      	cmp	r3, #46	; 0x2e
 8010bec:	d10c      	bne.n	8010c08 <_svfiprintf_r+0x124>
 8010bee:	787b      	ldrb	r3, [r7, #1]
 8010bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8010bf2:	d133      	bne.n	8010c5c <_svfiprintf_r+0x178>
 8010bf4:	9b03      	ldr	r3, [sp, #12]
 8010bf6:	1d1a      	adds	r2, r3, #4
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	9203      	str	r2, [sp, #12]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	bfb8      	it	lt
 8010c00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010c04:	3702      	adds	r7, #2
 8010c06:	9305      	str	r3, [sp, #20]
 8010c08:	4d2e      	ldr	r5, [pc, #184]	; (8010cc4 <_svfiprintf_r+0x1e0>)
 8010c0a:	7839      	ldrb	r1, [r7, #0]
 8010c0c:	2203      	movs	r2, #3
 8010c0e:	4628      	mov	r0, r5
 8010c10:	f7ef fb0e 	bl	8000230 <memchr>
 8010c14:	b138      	cbz	r0, 8010c26 <_svfiprintf_r+0x142>
 8010c16:	2340      	movs	r3, #64	; 0x40
 8010c18:	1b40      	subs	r0, r0, r5
 8010c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8010c1e:	9b04      	ldr	r3, [sp, #16]
 8010c20:	4303      	orrs	r3, r0
 8010c22:	3701      	adds	r7, #1
 8010c24:	9304      	str	r3, [sp, #16]
 8010c26:	7839      	ldrb	r1, [r7, #0]
 8010c28:	4827      	ldr	r0, [pc, #156]	; (8010cc8 <_svfiprintf_r+0x1e4>)
 8010c2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c2e:	2206      	movs	r2, #6
 8010c30:	1c7e      	adds	r6, r7, #1
 8010c32:	f7ef fafd 	bl	8000230 <memchr>
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d038      	beq.n	8010cac <_svfiprintf_r+0x1c8>
 8010c3a:	4b24      	ldr	r3, [pc, #144]	; (8010ccc <_svfiprintf_r+0x1e8>)
 8010c3c:	bb13      	cbnz	r3, 8010c84 <_svfiprintf_r+0x1a0>
 8010c3e:	9b03      	ldr	r3, [sp, #12]
 8010c40:	3307      	adds	r3, #7
 8010c42:	f023 0307 	bic.w	r3, r3, #7
 8010c46:	3308      	adds	r3, #8
 8010c48:	9303      	str	r3, [sp, #12]
 8010c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c4c:	444b      	add	r3, r9
 8010c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c50:	e76d      	b.n	8010b2e <_svfiprintf_r+0x4a>
 8010c52:	fb05 3202 	mla	r2, r5, r2, r3
 8010c56:	2001      	movs	r0, #1
 8010c58:	460f      	mov	r7, r1
 8010c5a:	e7a6      	b.n	8010baa <_svfiprintf_r+0xc6>
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	3701      	adds	r7, #1
 8010c60:	9305      	str	r3, [sp, #20]
 8010c62:	4619      	mov	r1, r3
 8010c64:	250a      	movs	r5, #10
 8010c66:	4638      	mov	r0, r7
 8010c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c6c:	3a30      	subs	r2, #48	; 0x30
 8010c6e:	2a09      	cmp	r2, #9
 8010c70:	d903      	bls.n	8010c7a <_svfiprintf_r+0x196>
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d0c8      	beq.n	8010c08 <_svfiprintf_r+0x124>
 8010c76:	9105      	str	r1, [sp, #20]
 8010c78:	e7c6      	b.n	8010c08 <_svfiprintf_r+0x124>
 8010c7a:	fb05 2101 	mla	r1, r5, r1, r2
 8010c7e:	2301      	movs	r3, #1
 8010c80:	4607      	mov	r7, r0
 8010c82:	e7f0      	b.n	8010c66 <_svfiprintf_r+0x182>
 8010c84:	ab03      	add	r3, sp, #12
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	4622      	mov	r2, r4
 8010c8a:	4b11      	ldr	r3, [pc, #68]	; (8010cd0 <_svfiprintf_r+0x1ec>)
 8010c8c:	a904      	add	r1, sp, #16
 8010c8e:	4640      	mov	r0, r8
 8010c90:	f7fd fdc8 	bl	800e824 <_printf_float>
 8010c94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010c98:	4681      	mov	r9, r0
 8010c9a:	d1d6      	bne.n	8010c4a <_svfiprintf_r+0x166>
 8010c9c:	89a3      	ldrh	r3, [r4, #12]
 8010c9e:	065b      	lsls	r3, r3, #25
 8010ca0:	f53f af35 	bmi.w	8010b0e <_svfiprintf_r+0x2a>
 8010ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ca6:	b01d      	add	sp, #116	; 0x74
 8010ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cac:	ab03      	add	r3, sp, #12
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	4622      	mov	r2, r4
 8010cb2:	4b07      	ldr	r3, [pc, #28]	; (8010cd0 <_svfiprintf_r+0x1ec>)
 8010cb4:	a904      	add	r1, sp, #16
 8010cb6:	4640      	mov	r0, r8
 8010cb8:	f7fe f86a 	bl	800ed90 <_printf_i>
 8010cbc:	e7ea      	b.n	8010c94 <_svfiprintf_r+0x1b0>
 8010cbe:	bf00      	nop
 8010cc0:	080126cc 	.word	0x080126cc
 8010cc4:	080126d2 	.word	0x080126d2
 8010cc8:	080126d6 	.word	0x080126d6
 8010ccc:	0800e825 	.word	0x0800e825
 8010cd0:	08010a31 	.word	0x08010a31

08010cd4 <_sbrk_r>:
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	4c06      	ldr	r4, [pc, #24]	; (8010cf0 <_sbrk_r+0x1c>)
 8010cd8:	2300      	movs	r3, #0
 8010cda:	4605      	mov	r5, r0
 8010cdc:	4608      	mov	r0, r1
 8010cde:	6023      	str	r3, [r4, #0]
 8010ce0:	f7f7 f8ba 	bl	8007e58 <_sbrk>
 8010ce4:	1c43      	adds	r3, r0, #1
 8010ce6:	d102      	bne.n	8010cee <_sbrk_r+0x1a>
 8010ce8:	6823      	ldr	r3, [r4, #0]
 8010cea:	b103      	cbz	r3, 8010cee <_sbrk_r+0x1a>
 8010cec:	602b      	str	r3, [r5, #0]
 8010cee:	bd38      	pop	{r3, r4, r5, pc}
 8010cf0:	20002964 	.word	0x20002964

08010cf4 <__sread>:
 8010cf4:	b510      	push	{r4, lr}
 8010cf6:	460c      	mov	r4, r1
 8010cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cfc:	f000 f8e8 	bl	8010ed0 <_read_r>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	bfab      	itete	ge
 8010d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d06:	89a3      	ldrhlt	r3, [r4, #12]
 8010d08:	181b      	addge	r3, r3, r0
 8010d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d0e:	bfac      	ite	ge
 8010d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d12:	81a3      	strhlt	r3, [r4, #12]
 8010d14:	bd10      	pop	{r4, pc}

08010d16 <__swrite>:
 8010d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d1a:	461f      	mov	r7, r3
 8010d1c:	898b      	ldrh	r3, [r1, #12]
 8010d1e:	05db      	lsls	r3, r3, #23
 8010d20:	4605      	mov	r5, r0
 8010d22:	460c      	mov	r4, r1
 8010d24:	4616      	mov	r6, r2
 8010d26:	d505      	bpl.n	8010d34 <__swrite+0x1e>
 8010d28:	2302      	movs	r3, #2
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d30:	f000 f868 	bl	8010e04 <_lseek_r>
 8010d34:	89a3      	ldrh	r3, [r4, #12]
 8010d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d3e:	81a3      	strh	r3, [r4, #12]
 8010d40:	4632      	mov	r2, r6
 8010d42:	463b      	mov	r3, r7
 8010d44:	4628      	mov	r0, r5
 8010d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d4a:	f000 b817 	b.w	8010d7c <_write_r>

08010d4e <__sseek>:
 8010d4e:	b510      	push	{r4, lr}
 8010d50:	460c      	mov	r4, r1
 8010d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d56:	f000 f855 	bl	8010e04 <_lseek_r>
 8010d5a:	1c43      	adds	r3, r0, #1
 8010d5c:	89a3      	ldrh	r3, [r4, #12]
 8010d5e:	bf15      	itete	ne
 8010d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d6a:	81a3      	strheq	r3, [r4, #12]
 8010d6c:	bf18      	it	ne
 8010d6e:	81a3      	strhne	r3, [r4, #12]
 8010d70:	bd10      	pop	{r4, pc}

08010d72 <__sclose>:
 8010d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d76:	f000 b813 	b.w	8010da0 <_close_r>
	...

08010d7c <_write_r>:
 8010d7c:	b538      	push	{r3, r4, r5, lr}
 8010d7e:	4c07      	ldr	r4, [pc, #28]	; (8010d9c <_write_r+0x20>)
 8010d80:	4605      	mov	r5, r0
 8010d82:	4608      	mov	r0, r1
 8010d84:	4611      	mov	r1, r2
 8010d86:	2200      	movs	r2, #0
 8010d88:	6022      	str	r2, [r4, #0]
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	f7f6 fd39 	bl	8007802 <_write>
 8010d90:	1c43      	adds	r3, r0, #1
 8010d92:	d102      	bne.n	8010d9a <_write_r+0x1e>
 8010d94:	6823      	ldr	r3, [r4, #0]
 8010d96:	b103      	cbz	r3, 8010d9a <_write_r+0x1e>
 8010d98:	602b      	str	r3, [r5, #0]
 8010d9a:	bd38      	pop	{r3, r4, r5, pc}
 8010d9c:	20002964 	.word	0x20002964

08010da0 <_close_r>:
 8010da0:	b538      	push	{r3, r4, r5, lr}
 8010da2:	4c06      	ldr	r4, [pc, #24]	; (8010dbc <_close_r+0x1c>)
 8010da4:	2300      	movs	r3, #0
 8010da6:	4605      	mov	r5, r0
 8010da8:	4608      	mov	r0, r1
 8010daa:	6023      	str	r3, [r4, #0]
 8010dac:	f7f7 f81f 	bl	8007dee <_close>
 8010db0:	1c43      	adds	r3, r0, #1
 8010db2:	d102      	bne.n	8010dba <_close_r+0x1a>
 8010db4:	6823      	ldr	r3, [r4, #0]
 8010db6:	b103      	cbz	r3, 8010dba <_close_r+0x1a>
 8010db8:	602b      	str	r3, [r5, #0]
 8010dba:	bd38      	pop	{r3, r4, r5, pc}
 8010dbc:	20002964 	.word	0x20002964

08010dc0 <_fstat_r>:
 8010dc0:	b538      	push	{r3, r4, r5, lr}
 8010dc2:	4c07      	ldr	r4, [pc, #28]	; (8010de0 <_fstat_r+0x20>)
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	4605      	mov	r5, r0
 8010dc8:	4608      	mov	r0, r1
 8010dca:	4611      	mov	r1, r2
 8010dcc:	6023      	str	r3, [r4, #0]
 8010dce:	f7f7 f81a 	bl	8007e06 <_fstat>
 8010dd2:	1c43      	adds	r3, r0, #1
 8010dd4:	d102      	bne.n	8010ddc <_fstat_r+0x1c>
 8010dd6:	6823      	ldr	r3, [r4, #0]
 8010dd8:	b103      	cbz	r3, 8010ddc <_fstat_r+0x1c>
 8010dda:	602b      	str	r3, [r5, #0]
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop
 8010de0:	20002964 	.word	0x20002964

08010de4 <_isatty_r>:
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	4c06      	ldr	r4, [pc, #24]	; (8010e00 <_isatty_r+0x1c>)
 8010de8:	2300      	movs	r3, #0
 8010dea:	4605      	mov	r5, r0
 8010dec:	4608      	mov	r0, r1
 8010dee:	6023      	str	r3, [r4, #0]
 8010df0:	f7f7 f819 	bl	8007e26 <_isatty>
 8010df4:	1c43      	adds	r3, r0, #1
 8010df6:	d102      	bne.n	8010dfe <_isatty_r+0x1a>
 8010df8:	6823      	ldr	r3, [r4, #0]
 8010dfa:	b103      	cbz	r3, 8010dfe <_isatty_r+0x1a>
 8010dfc:	602b      	str	r3, [r5, #0]
 8010dfe:	bd38      	pop	{r3, r4, r5, pc}
 8010e00:	20002964 	.word	0x20002964

08010e04 <_lseek_r>:
 8010e04:	b538      	push	{r3, r4, r5, lr}
 8010e06:	4c07      	ldr	r4, [pc, #28]	; (8010e24 <_lseek_r+0x20>)
 8010e08:	4605      	mov	r5, r0
 8010e0a:	4608      	mov	r0, r1
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	2200      	movs	r2, #0
 8010e10:	6022      	str	r2, [r4, #0]
 8010e12:	461a      	mov	r2, r3
 8010e14:	f7f7 f812 	bl	8007e3c <_lseek>
 8010e18:	1c43      	adds	r3, r0, #1
 8010e1a:	d102      	bne.n	8010e22 <_lseek_r+0x1e>
 8010e1c:	6823      	ldr	r3, [r4, #0]
 8010e1e:	b103      	cbz	r3, 8010e22 <_lseek_r+0x1e>
 8010e20:	602b      	str	r3, [r5, #0]
 8010e22:	bd38      	pop	{r3, r4, r5, pc}
 8010e24:	20002964 	.word	0x20002964

08010e28 <__ascii_mbtowc>:
 8010e28:	b082      	sub	sp, #8
 8010e2a:	b901      	cbnz	r1, 8010e2e <__ascii_mbtowc+0x6>
 8010e2c:	a901      	add	r1, sp, #4
 8010e2e:	b142      	cbz	r2, 8010e42 <__ascii_mbtowc+0x1a>
 8010e30:	b14b      	cbz	r3, 8010e46 <__ascii_mbtowc+0x1e>
 8010e32:	7813      	ldrb	r3, [r2, #0]
 8010e34:	600b      	str	r3, [r1, #0]
 8010e36:	7812      	ldrb	r2, [r2, #0]
 8010e38:	1c10      	adds	r0, r2, #0
 8010e3a:	bf18      	it	ne
 8010e3c:	2001      	movne	r0, #1
 8010e3e:	b002      	add	sp, #8
 8010e40:	4770      	bx	lr
 8010e42:	4610      	mov	r0, r2
 8010e44:	e7fb      	b.n	8010e3e <__ascii_mbtowc+0x16>
 8010e46:	f06f 0001 	mvn.w	r0, #1
 8010e4a:	e7f8      	b.n	8010e3e <__ascii_mbtowc+0x16>

08010e4c <memmove>:
 8010e4c:	4288      	cmp	r0, r1
 8010e4e:	b510      	push	{r4, lr}
 8010e50:	eb01 0302 	add.w	r3, r1, r2
 8010e54:	d807      	bhi.n	8010e66 <memmove+0x1a>
 8010e56:	1e42      	subs	r2, r0, #1
 8010e58:	4299      	cmp	r1, r3
 8010e5a:	d00a      	beq.n	8010e72 <memmove+0x26>
 8010e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e60:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010e64:	e7f8      	b.n	8010e58 <memmove+0xc>
 8010e66:	4283      	cmp	r3, r0
 8010e68:	d9f5      	bls.n	8010e56 <memmove+0xa>
 8010e6a:	1881      	adds	r1, r0, r2
 8010e6c:	1ad2      	subs	r2, r2, r3
 8010e6e:	42d3      	cmn	r3, r2
 8010e70:	d100      	bne.n	8010e74 <memmove+0x28>
 8010e72:	bd10      	pop	{r4, pc}
 8010e74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e78:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010e7c:	e7f7      	b.n	8010e6e <memmove+0x22>

08010e7e <__malloc_lock>:
 8010e7e:	4770      	bx	lr

08010e80 <__malloc_unlock>:
 8010e80:	4770      	bx	lr

08010e82 <_realloc_r>:
 8010e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e84:	4607      	mov	r7, r0
 8010e86:	4614      	mov	r4, r2
 8010e88:	460e      	mov	r6, r1
 8010e8a:	b921      	cbnz	r1, 8010e96 <_realloc_r+0x14>
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010e92:	f7ff bd73 	b.w	801097c <_malloc_r>
 8010e96:	b922      	cbnz	r2, 8010ea2 <_realloc_r+0x20>
 8010e98:	f7ff fd22 	bl	80108e0 <_free_r>
 8010e9c:	4625      	mov	r5, r4
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ea2:	f000 f834 	bl	8010f0e <_malloc_usable_size_r>
 8010ea6:	42a0      	cmp	r0, r4
 8010ea8:	d20f      	bcs.n	8010eca <_realloc_r+0x48>
 8010eaa:	4621      	mov	r1, r4
 8010eac:	4638      	mov	r0, r7
 8010eae:	f7ff fd65 	bl	801097c <_malloc_r>
 8010eb2:	4605      	mov	r5, r0
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d0f2      	beq.n	8010e9e <_realloc_r+0x1c>
 8010eb8:	4631      	mov	r1, r6
 8010eba:	4622      	mov	r2, r4
 8010ebc:	f7ff fa1c 	bl	80102f8 <memcpy>
 8010ec0:	4631      	mov	r1, r6
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	f7ff fd0c 	bl	80108e0 <_free_r>
 8010ec8:	e7e9      	b.n	8010e9e <_realloc_r+0x1c>
 8010eca:	4635      	mov	r5, r6
 8010ecc:	e7e7      	b.n	8010e9e <_realloc_r+0x1c>
	...

08010ed0 <_read_r>:
 8010ed0:	b538      	push	{r3, r4, r5, lr}
 8010ed2:	4c07      	ldr	r4, [pc, #28]	; (8010ef0 <_read_r+0x20>)
 8010ed4:	4605      	mov	r5, r0
 8010ed6:	4608      	mov	r0, r1
 8010ed8:	4611      	mov	r1, r2
 8010eda:	2200      	movs	r2, #0
 8010edc:	6022      	str	r2, [r4, #0]
 8010ede:	461a      	mov	r2, r3
 8010ee0:	f7f6 ff68 	bl	8007db4 <_read>
 8010ee4:	1c43      	adds	r3, r0, #1
 8010ee6:	d102      	bne.n	8010eee <_read_r+0x1e>
 8010ee8:	6823      	ldr	r3, [r4, #0]
 8010eea:	b103      	cbz	r3, 8010eee <_read_r+0x1e>
 8010eec:	602b      	str	r3, [r5, #0]
 8010eee:	bd38      	pop	{r3, r4, r5, pc}
 8010ef0:	20002964 	.word	0x20002964

08010ef4 <__ascii_wctomb>:
 8010ef4:	b149      	cbz	r1, 8010f0a <__ascii_wctomb+0x16>
 8010ef6:	2aff      	cmp	r2, #255	; 0xff
 8010ef8:	bf85      	ittet	hi
 8010efa:	238a      	movhi	r3, #138	; 0x8a
 8010efc:	6003      	strhi	r3, [r0, #0]
 8010efe:	700a      	strbls	r2, [r1, #0]
 8010f00:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010f04:	bf98      	it	ls
 8010f06:	2001      	movls	r0, #1
 8010f08:	4770      	bx	lr
 8010f0a:	4608      	mov	r0, r1
 8010f0c:	4770      	bx	lr

08010f0e <_malloc_usable_size_r>:
 8010f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f12:	1f18      	subs	r0, r3, #4
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	bfbc      	itt	lt
 8010f18:	580b      	ldrlt	r3, [r1, r0]
 8010f1a:	18c0      	addlt	r0, r0, r3
 8010f1c:	4770      	bx	lr
	...

08010f20 <_init>:
 8010f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f22:	bf00      	nop
 8010f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f26:	bc08      	pop	{r3}
 8010f28:	469e      	mov	lr, r3
 8010f2a:	4770      	bx	lr

08010f2c <_fini>:
 8010f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f2e:	bf00      	nop
 8010f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f32:	bc08      	pop	{r3}
 8010f34:	469e      	mov	lr, r3
 8010f36:	4770      	bx	lr
