
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c84  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac8  08011e68  08011e68  00021e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013930  08013930  000319c8  2**0
                  CONTENTS
  4 .ARM          00000000  08013930  08013930  000319c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013930  08013930  000319c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013930  08013930  00023930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013934  08013934  00023934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000019c8  20000000  08013938  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  200019c8  08015300  000319c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002464  08015300  00032464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000319c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ffcf  00000000  00000000  000319f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000072aa  00000000  00000000  000719c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002140  00000000  00000000  00078c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d70  00000000  00000000  0007adb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000340be  00000000  00000000  0007cb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002bc18  00000000  00000000  000b0be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125fc1  00000000  00000000  000dc7fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002027bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009350  00000000  00000000  0020283c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200019c8 	.word	0x200019c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011e4c 	.word	0x08011e4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200019cc 	.word	0x200019cc
 800021c:	08011e4c 	.word	0x08011e4c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d000      	beq.n	8000c4a <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000c48:	e002      	b.n	8000c50 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000c4a:	f000 f805 	bl	8000c58 <BiasMenu_DrawMainMenu>
			break;
 8000c4e:	bf00      	nop

	}
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	2302      	movs	r3, #2
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	220a      	movs	r2, #10
 8000c6c:	210a      	movs	r1, #10
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <BiasMenu_DrawMainMenu+0x28>)
 8000c70:	f00c fdc2 	bl	800d7f8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000c74:	f000 f936 	bl	8000ee4 <DM_DisplayFormattedOutput>

}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	08011e68 	.word	0x08011e68

08000c84 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c88:	f00c fdf7 	bl	800d87a <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f00d fa2b 	bl	800e0e8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c96:	f00d f82f 	bl	800dcf8 <ILI9341_Fill_Screen>

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	2301      	movs	r3, #1
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000cb2:	220a      	movs	r2, #10
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <DM_PostInit+0x34>)
 8000cb8:	f00c fd9e 	bl	800d7f8 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f007 fbf8 	bl	80084b4 <HAL_Delay>

	  DM_RefreshScreen();
 8000cc4:	f000 fa96 	bl	80011f4 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <DM_PostInit+0x38>)
 8000cca:	f00e f90f 	bl	800eeec <puts>
#endif


}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08011e74 	.word	0x08011e74
 8000cd8:	08011e84 	.word	0x08011e84

08000cdc <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	; 0x70
 8000ce0:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000ce2:	f003 fbf3 	bl	80044cc <ToplevelMenu_getStatus>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d018      	beq.n	8000d1e <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000cec:	4872      	ldr	r0, [pc, #456]	; (8000eb8 <DM_UpdateDisplay+0x1dc>)
 8000cee:	f00e f8fd 	bl	800eeec <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000cf2:	f003 fbeb 	bl	80044cc <ToplevelMenu_getStatus>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d008      	beq.n	8000d0e <DM_UpdateDisplay+0x32>
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d00a      	beq.n	8000d16 <DM_UpdateDisplay+0x3a>
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d000      	beq.n	8000d06 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000d04:	e089      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f002 faf6 	bl	80032f8 <ToplevelMenu_DrawMenu>
				break;
 8000d0c:	e085      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f002 faf2 	bl	80032f8 <ToplevelMenu_DrawMenu>
				break;
 8000d14:	e081      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f002 faee 	bl	80032f8 <ToplevelMenu_DrawMenu>
				break;
 8000d1c:	e07d      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000d1e:	f003 f9d5 	bl	80040cc <FuncMenu_getStatus>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d018      	beq.n	8000d5a <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d28:	4863      	ldr	r0, [pc, #396]	; (8000eb8 <DM_UpdateDisplay+0x1dc>)
 8000d2a:	f00e f8df 	bl	800eeec <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000d2e:	f003 f9cd 	bl	80040cc <FuncMenu_getStatus>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d008      	beq.n	8000d4a <DM_UpdateDisplay+0x6e>
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d00a      	beq.n	8000d52 <DM_UpdateDisplay+0x76>
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d000      	beq.n	8000d42 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000d40:	e06b      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f002 f804 	bl	8002d50 <FuncMenu_DrawMenu>
				break;
 8000d48:	e067      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f002 f800 	bl	8002d50 <FuncMenu_DrawMenu>
				break;
 8000d50:	e063      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000d52:	2003      	movs	r0, #3
 8000d54:	f001 fffc 	bl	8002d50 <FuncMenu_DrawMenu>
				break;
 8000d58:	e05f      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000d5a:	f003 fab9 	bl	80042d0 <GainMenu_getStatus>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d018      	beq.n	8000d96 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000d64:	4855      	ldr	r0, [pc, #340]	; (8000ebc <DM_UpdateDisplay+0x1e0>)
 8000d66:	f00e f8c1 	bl	800eeec <puts>
		#endif

		switch(GainMenu_getStatus())
 8000d6a:	f003 fab1 	bl	80042d0 <GainMenu_getStatus>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d008      	beq.n	8000d86 <DM_UpdateDisplay+0xaa>
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d00a      	beq.n	8000d8e <DM_UpdateDisplay+0xb2>
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d000      	beq.n	8000d7e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000d7c:	e04d      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f002 fa2c 	bl	80031dc <GainMenu_DrawMenu>
				break;
 8000d84:	e049      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000d86:	2002      	movs	r0, #2
 8000d88:	f002 fa28 	bl	80031dc <GainMenu_DrawMenu>
				break;
 8000d8c:	e045      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f002 fa24 	bl	80031dc <GainMenu_DrawMenu>
				break;
 8000d94:	e041      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000d96:	f003 f98d 	bl	80040b4 <FreqMenu_getStatus>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d023      	beq.n	8000de8 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000da0:	4847      	ldr	r0, [pc, #284]	; (8000ec0 <DM_UpdateDisplay+0x1e4>)
 8000da2:	f00e f8a3 	bl	800eeec <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000da6:	f003 f985 	bl	80040b4 <FreqMenu_getStatus>
 8000daa:	4603      	mov	r3, r0
 8000dac:	3b01      	subs	r3, #1
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d832      	bhi.n	8000e18 <DM_UpdateDisplay+0x13c>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <DM_UpdateDisplay+0xdc>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000dc9 	.word	0x08000dc9
 8000dbc:	08000dd1 	.word	0x08000dd1
 8000dc0:	08000dd9 	.word	0x08000dd9
 8000dc4:	08000de1 	.word	0x08000de1
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f000 fa6b 	bl	80012a4 <FreqMenu_DrawMenu>

				break;
 8000dce:	e024      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f000 fa67 	bl	80012a4 <FreqMenu_DrawMenu>
				break;
 8000dd6:	e020      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 fa63 	bl	80012a4 <FreqMenu_DrawMenu>

				break;
 8000dde:	e01c      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000de0:	2004      	movs	r0, #4
 8000de2:	f000 fa5f 	bl	80012a4 <FreqMenu_DrawMenu>
				break;
 8000de6:	e018      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000de8:	f002 fb40 	bl	800346c <BiasMenu_getStatus>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000df2:	4834      	ldr	r0, [pc, #208]	; (8000ec4 <DM_UpdateDisplay+0x1e8>)
 8000df4:	f00e f87a 	bl	800eeec <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff ff1d 	bl	8000c38 <BiasMenu_DrawMenu>
 8000dfe:	e00c      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e00:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2232      	movs	r2, #50	; 0x32
 8000e0e:	210a      	movs	r1, #10
 8000e10:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <DM_UpdateDisplay+0x1ec>)
 8000e12:	f00c fcf1 	bl	800d7f8 <ILI9341_Draw_Text>
 8000e16:	e000      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				break;
 8000e18:	bf00      	nop

	/*
	 * 	Debug messages
	 */
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e22:	222e      	movs	r2, #46	; 0x2e
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00d fba0 	bl	800e56c <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OUTPUT_TIMER->ARR: %5lu", OUTPUT_TIMER->ARR);
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <DM_UpdateDisplay+0x1f0>)
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000e34:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <DM_UpdateDisplay+0x1f4>)
 8000e36:	2132      	movs	r1, #50	; 0x32
 8000e38:	f00e f860 	bl	800eefc <sniprintf>
		ILI9341_Draw_Text(tim5_text, 10, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e3c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000e40:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2301      	movs	r3, #1
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	22b4      	movs	r2, #180	; 0xb4
 8000e4e:	210a      	movs	r1, #10
 8000e50:	f00c fcd2 	bl	800d7f8 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	222e      	movs	r2, #46	; 0x2e
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00d fb84 	bl	800e56c <memset>
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <DM_UpdateDisplay+0x1f8>)
 8000e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <DM_UpdateDisplay+0x1fc>)
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <DM_UpdateDisplay+0x200>)
 8000e74:	2132      	movs	r1, #50	; 0x32
 8000e76:	f00e f841 	bl	800eefc <sniprintf>
		ILI9341_Draw_Text(encoder_value, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	2301      	movs	r3, #1
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2300      	movs	r3, #0
 8000e88:	22be      	movs	r2, #190	; 0xbe
 8000e8a:	210a      	movs	r1, #10
 8000e8c:	f00c fcb4 	bl	800d7f8 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <DM_UpdateDisplay+0x204>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00a      	beq.n	8000eae <DM_UpdateDisplay+0x1d2>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e98:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	22be      	movs	r2, #190	; 0xbe
 8000ea6:	210a      	movs	r1, #10
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <DM_UpdateDisplay+0x204>)
 8000eaa:	f00c fca5 	bl	800d7f8 <ILI9341_Draw_Text>

}
 8000eae:	bf00      	nop
 8000eb0:	3768      	adds	r7, #104	; 0x68
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	08011e94 	.word	0x08011e94
 8000ebc:	08011ea8 	.word	0x08011ea8
 8000ec0:	08011ebc 	.word	0x08011ebc
 8000ec4:	08011ed0 	.word	0x08011ed0
 8000ec8:	08011ee4 	.word	0x08011ee4
 8000ecc:	40013400 	.word	0x40013400
 8000ed0:	08011f08 	.word	0x08011f08
 8000ed4:	40000c00 	.word	0x40000c00
 8000ed8:	40012c00 	.word	0x40012c00
 8000edc:	08011f20 	.word	0x08011f20
 8000ee0:	200019e4 	.word	0x200019e4

08000ee4 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b09b      	sub	sp, #108	; 0x6c
 8000ee8:	af02      	add	r7, sp, #8
	uint8_t text_size = 2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	char out_hertz[15] = "";
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f02:	238c      	movs	r3, #140	; 0x8c
 8000f04:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	uint8_t out_hertz_y = 40;
 8000f08:	2328      	movs	r3, #40	; 0x28
 8000f0a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	char out_vpp[18] = "";
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f20:	23af      	movs	r3, #175	; 0xaf
 8000f22:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	uint8_t out_vpp_y = 70;
 8000f26:	2346      	movs	r3, #70	; 0x46
 8000f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char out_decibels[13] = "";
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	721a      	strb	r2, [r3, #8]
	uint8_t out_decibels_x = 140;
 8000f3c:	238c      	movs	r3, #140	; 0x8c
 8000f3e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t out_decibels_y = 100;
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55


	float volts_per_thou = 0.00075;
 8000f48:	4b9e      	ldr	r3, [pc, #632]	; (80011c4 <DM_DisplayFormattedOutput+0x2e0>)
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
	char out_dcvolts[12] = "";
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 152;
 8000f5a:	2398      	movs	r3, #152	; 0x98
 8000f5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_dcvolts_y = 130;
 8000f60:	2382      	movs	r3, #130	; 0x82
 8000f62:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f66:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	9201      	str	r2, [sp, #4]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	4891      	ldr	r0, [pc, #580]	; (80011c8 <DM_DisplayFormattedOutput+0x2e4>)
 8000f82:	f00c fc39 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	2200      	movs	r2, #0
 8000f94:	9201      	str	r2, [sp, #4]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	488a      	ldr	r0, [pc, #552]	; (80011cc <DM_DisplayFormattedOutput+0x2e8>)
 8000fa2:	f00c fc29 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fa6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000faa:	b299      	uxth	r1, r3
 8000fac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	9201      	str	r2, [sp, #4]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	4883      	ldr	r0, [pc, #524]	; (80011d0 <DM_DisplayFormattedOutput+0x2ec>)
 8000fc2:	f00c fc19 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fc6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fca:	b299      	uxth	r1, r3
 8000fcc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	9201      	str	r2, [sp, #4]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	2103      	movs	r1, #3
 8000fe0:	487c      	ldr	r0, [pc, #496]	; (80011d4 <DM_DisplayFormattedOutput+0x2f0>)
 8000fe2:	f00c fc09 	bl	800d7f8 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000fe6:	f004 fa09 	bl	80053fc <SM_GetOutputInHertz>
 8000fea:	ee10 3a10 	vmov	r3, s0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fad2 	bl	8000598 <__aeabi_f2d>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	460c      	mov	r4, r1
 8000ff8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000ffc:	e9cd 3400 	strd	r3, r4, [sp]
 8001000:	4a75      	ldr	r2, [pc, #468]	; (80011d8 <DM_DisplayFormattedOutput+0x2f4>)
 8001002:	210f      	movs	r1, #15
 8001004:	f00d ff7a 	bl	800eefc <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001008:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800100c:	b299      	uxth	r1, r3
 800100e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001012:	b29c      	uxth	r4, r3
 8001014:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001018:	b29b      	uxth	r3, r3
 800101a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800101e:	2200      	movs	r2, #0
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001028:	4622      	mov	r2, r4
 800102a:	f00c fbe5 	bl	800d7f8 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800102e:	2000      	movs	r0, #0
 8001030:	f004 f9b2 	bl	8005398 <SM_GetOutputChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48

	if(pTmpVppPreset)
 800103c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800103e:	2b00      	cmp	r3, #0
 8001040:	d016      	beq.n	8001070 <DM_DisplayFormattedOutput+0x18c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff faa6 	bl	8000598 <__aeabi_f2d>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001054:	e9cd 3400 	strd	r3, r4, [sp]
 8001058:	4a60      	ldr	r2, [pc, #384]	; (80011dc <DM_DisplayFormattedOutput+0x2f8>)
 800105a:	2112      	movs	r1, #18
 800105c:	f00d ff4e 	bl	800eefc <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels)-4, " %s ", pTmpVppPreset->gain_decibels);
 8001060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f107 0014 	add.w	r0, r7, #20
 8001068:	4a5d      	ldr	r2, [pc, #372]	; (80011e0 <DM_DisplayFormattedOutput+0x2fc>)
 800106a:	2109      	movs	r1, #9
 800106c:	f00d ff46 	bl	800eefc <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001070:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001074:	b299      	uxth	r1, r3
 8001076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800107a:	b29c      	uxth	r4, r3
 800107c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001080:	b29b      	uxth	r3, r3
 8001082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001086:	2200      	movs	r2, #0
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001090:	4622      	mov	r2, r4
 8001092:	f00c fbb1 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001096:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800109a:	b299      	uxth	r1, r3
 800109c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80010a0:	b29c      	uxth	r4, r3
 80010a2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f107 0014 	add.w	r0, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	9201      	str	r2, [sp, #4]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b6:	4622      	mov	r2, r4
 80010b8:	f00c fb9e 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010bc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3380      	adds	r3, #128	; 0x80
 80010c4:	b299      	uxth	r1, r3
 80010c6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80010ca:	b298      	uxth	r0, r3
 80010cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010dc:	4602      	mov	r2, r0
 80010de:	4841      	ldr	r0, [pc, #260]	; (80011e4 <DM_DisplayFormattedOutput+0x300>)
 80010e0:	f00c fb8a 	bl	800d7f8 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 80010e4:	f003 fc22 	bl	800492c <BO_GetOutputBias>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <DM_DisplayFormattedOutput+0x212>
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010f4:	e00b      	b.n	800110e <DM_DisplayFormattedOutput+0x22a>
 80010f6:	f003 fc19 	bl	800492c <BO_GetOutputBias>
 80010fa:	ee07 0a90 	vmov	s15, r0
 80010fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001102:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	snprintf(out_dcvolts, sizeof(out_dcvolts), "  %1.4f v ", dc_volts);
 800110e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001110:	f7ff fa42 	bl	8000598 <__aeabi_f2d>
 8001114:	4603      	mov	r3, r0
 8001116:	460c      	mov	r4, r1
 8001118:	f107 0008 	add.w	r0, r7, #8
 800111c:	e9cd 3400 	strd	r3, r4, [sp]
 8001120:	4a31      	ldr	r2, [pc, #196]	; (80011e8 <DM_DisplayFormattedOutput+0x304>)
 8001122:	210c      	movs	r1, #12
 8001124:	f00d feea 	bl	800eefc <sniprintf>
	if(BO_GetBiasPolarity())
 8001128:	f003 fba0 	bl	800486c <BO_GetBiasPolarity>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d022      	beq.n	8001178 <DM_DisplayFormattedOutput+0x294>
	{
		char symbol[3] = "+\0";
 8001132:	4a2e      	ldr	r2, [pc, #184]	; (80011ec <DM_DisplayFormattedOutput+0x308>)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	4611      	mov	r1, r2
 800113a:	8019      	strh	r1, [r3, #0]
 800113c:	3302      	adds	r3, #2
 800113e:	0c12      	lsrs	r2, r2, #16
 8001140:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001142:	f107 0208 	add.w	r2, r7, #8
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f00d ff0a 	bl	800ef64 <strcat>
 8001150:	4604      	mov	r4, r0
 8001152:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001156:	b299      	uxth	r1, r3
 8001158:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800115c:	b298      	uxth	r0, r3
 800115e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001162:	b29b      	uxth	r3, r3
 8001164:	2200      	movs	r2, #0
 8001166:	9201      	str	r2, [sp, #4]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800116e:	4602      	mov	r2, r0
 8001170:	4620      	mov	r0, r4
 8001172:	f00c fb41 	bl	800d7f8 <ILI9341_Draw_Text>
	{
		char symbol[3] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
	}

}
 8001176:	e021      	b.n	80011bc <DM_DisplayFormattedOutput+0x2d8>
		char symbol[3] = "-\0";
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <DM_DisplayFormattedOutput+0x30c>)
 800117a:	463b      	mov	r3, r7
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	4611      	mov	r1, r2
 8001180:	8019      	strh	r1, [r3, #0]
 8001182:	3302      	adds	r3, #2
 8001184:	0c12      	lsrs	r2, r2, #16
 8001186:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001188:	f107 0208 	add.w	r2, r7, #8
 800118c:	463b      	mov	r3, r7
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f00d fee7 	bl	800ef64 <strcat>
 8001196:	4604      	mov	r4, r0
 8001198:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800119c:	b299      	uxth	r1, r3
 800119e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80011a2:	b298      	uxth	r0, r3
 80011a4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2200      	movs	r2, #0
 80011ac:	9201      	str	r2, [sp, #4]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011b4:	4602      	mov	r2, r0
 80011b6:	4620      	mov	r0, r4
 80011b8:	f00c fb1e 	bl	800d7f8 <ILI9341_Draw_Text>
}
 80011bc:	bf00      	nop
 80011be:	3764      	adds	r7, #100	; 0x64
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	3a449ba6 	.word	0x3a449ba6
 80011c8:	08011f48 	.word	0x08011f48
 80011cc:	08011f58 	.word	0x08011f58
 80011d0:	08011f68 	.word	0x08011f68
 80011d4:	08011f78 	.word	0x08011f78
 80011d8:	08011f88 	.word	0x08011f88
 80011dc:	08011f98 	.word	0x08011f98
 80011e0:	08011fa4 	.word	0x08011fa4
 80011e4:	08011fac 	.word	0x08011fac
 80011e8:	08011fb4 	.word	0x08011fb4
 80011ec:	08011fc0 	.word	0x08011fc0
 80011f0:	08011fc4 	.word	0x08011fc4

080011f4 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80011fa:	4820      	ldr	r0, [pc, #128]	; (800127c <DM_RefreshScreen+0x88>)
 80011fc:	f00a ffbe 	bl	800c17c <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001200:	2000      	movs	r0, #0
 8001202:	f00c fd79 	bl	800dcf8 <ILI9341_Fill_Screen>
	//ILI9341_FillScreenGradient();


	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001206:	2300      	movs	r3, #0
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	2302      	movs	r3, #2
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2328      	movs	r3, #40	; 0x28
 8001216:	2250      	movs	r2, #80	; 0x50
 8001218:	21c8      	movs	r1, #200	; 0xc8
 800121a:	2000      	movs	r0, #0
 800121c:	f00c f988 	bl	800d530 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001220:	2300      	movs	r3, #0
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	2302      	movs	r3, #2
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2328      	movs	r3, #40	; 0x28
 8001230:	2250      	movs	r2, #80	; 0x50
 8001232:	21c8      	movs	r1, #200	; 0xc8
 8001234:	2050      	movs	r0, #80	; 0x50
 8001236:	f00c f97b 	bl	800d530 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 800123a:	2300      	movs	r3, #0
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2302      	movs	r3, #2
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2328      	movs	r3, #40	; 0x28
 800124a:	2250      	movs	r2, #80	; 0x50
 800124c:	21c8      	movs	r1, #200	; 0xc8
 800124e:	20a0      	movs	r0, #160	; 0xa0
 8001250:	f00c f96e 	bl	800d530 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001254:	2300      	movs	r3, #0
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2302      	movs	r3, #2
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2328      	movs	r3, #40	; 0x28
 8001264:	2250      	movs	r2, #80	; 0x50
 8001266:	21c8      	movs	r1, #200	; 0xc8
 8001268:	20f0      	movs	r0, #240	; 0xf0
 800126a:	f00c f961 	bl	800d530 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <DM_RefreshScreen+0x88>)
 8001270:	f00a ff4e 	bl	800c110 <HAL_TIM_Base_Start_IT>


}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20002294 	.word	0x20002294

08001280 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <DM_SetErrorDebugMsg+0x1c>)
 800128c:	212d      	movs	r1, #45	; 0x2d
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <DM_SetErrorDebugMsg+0x20>)
 8001290:	f00d fe34 	bl	800eefc <sniprintf>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	08012044 	.word	0x08012044
 80012a0:	200019e4 	.word	0x200019e4

080012a4 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d816      	bhi.n	80012e4 <FreqMenu_DrawMenu+0x40>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <FreqMenu_DrawMenu+0x18>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012d3 	.word	0x080012d3
 80012c4:	080012d9 	.word	0x080012d9
 80012c8:	080012df 	.word	0x080012df
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 80012cc:	f000 f810 	bl	80012f0 <FreqMenu_DrawMainMenu>
			break;
 80012d0:	e009      	b.n	80012e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80012d2:	f000 f849 	bl	8001368 <FreqMenu_DrawPresetMenu>
			break;
 80012d6:	e006      	b.n	80012e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80012d8:	f001 faf4 	bl	80028c4 <FreqMenu_DrawAdjustMenu>
			break;
 80012dc:	e003      	b.n	80012e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80012de:	f001 fb07 	bl	80028f0 <FreqMenu_DrawSweepMenu>
			break;
 80012e2:	e000      	b.n	80012e6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80012e4:	bf00      	nop

	}
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop

080012f0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80012f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	2302      	movs	r3, #2
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	220a      	movs	r2, #10
 8001304:	2105      	movs	r1, #5
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <FreqMenu_DrawMainMenu+0x68>)
 8001308:	f00c fa76 	bl	800d7f8 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 800130c:	f7ff fdea 	bl	8000ee4 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001310:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2302      	movs	r3, #2
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	22d2      	movs	r2, #210	; 0xd2
 800131e:	2105      	movs	r1, #5
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <FreqMenu_DrawMainMenu+0x6c>)
 8001322:	f00c fa69 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8001326:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	2302      	movs	r3, #2
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	22d2      	movs	r2, #210	; 0xd2
 8001334:	2157      	movs	r1, #87	; 0x57
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <FreqMenu_DrawMainMenu+0x70>)
 8001338:	f00c fa5e 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800133c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	2302      	movs	r3, #2
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	22d2      	movs	r2, #210	; 0xd2
 800134a:	21ae      	movs	r1, #174	; 0xae
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <FreqMenu_DrawMainMenu+0x74>)
 800134e:	f00c fa53 	bl	800d7f8 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08012048 	.word	0x08012048
 800135c:	08012054 	.word	0x08012054
 8001360:	0801205c 	.word	0x0801205c
 8001364:	08012064 	.word	0x08012064

08001368 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800136e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	2302      	movs	r3, #2
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2300      	movs	r3, #0
 800137a:	220a      	movs	r2, #10
 800137c:	2105      	movs	r1, #5
 800137e:	4886      	ldr	r0, [pc, #536]	; (8001598 <FreqMenu_DrawPresetMenu+0x230>)
 8001380:	f00c fa3a 	bl	800d7f8 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001384:	2328      	movs	r3, #40	; 0x28
 8001386:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001388:	233c      	movs	r3, #60	; 0x3c
 800138a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800138c:	2350      	movs	r3, #80	; 0x50
 800138e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001394:	2378      	movs	r3, #120	; 0x78
 8001396:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001398:	238c      	movs	r3, #140	; 0x8c
 800139a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800139c:	23a0      	movs	r3, #160	; 0xa0
 800139e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80013a0:	f003 fc7a 	bl	8004c98 <FreqO_GetFPresetObject>
 80013a4:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f001 825d 	beq.w	8002868 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013b6:	4293      	cmp	r3, r2
 80013b8:	f000 849a 	beq.w	8001cf0 <FreqMenu_DrawPresetMenu+0x988>
 80013bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d817      	bhi.n	80013f4 <FreqMenu_DrawPresetMenu+0x8c>
 80013c4:	2b32      	cmp	r3, #50	; 0x32
 80013c6:	f000 81b3 	beq.w	8001730 <FreqMenu_DrawPresetMenu+0x3c8>
 80013ca:	2b32      	cmp	r3, #50	; 0x32
 80013cc:	d806      	bhi.n	80013dc <FreqMenu_DrawPresetMenu+0x74>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d038      	beq.n	8001444 <FreqMenu_DrawPresetMenu+0xdc>
 80013d2:	2b0a      	cmp	r3, #10
 80013d4:	f000 8102 	beq.w	80015dc <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 80013d8:	f001 ba52 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80013dc:	2bfa      	cmp	r3, #250	; 0xfa
 80013de:	f000 8317 	beq.w	8001a10 <FreqMenu_DrawPresetMenu+0x6a8>
 80013e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013e6:	f000 83d9 	beq.w	8001b9c <FreqMenu_DrawPresetMenu+0x834>
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	f000 8266 	beq.w	80018bc <FreqMenu_DrawPresetMenu+0x554>
}
 80013f0:	f001 ba46 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80013f4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80013f8:	4293      	cmp	r3, r2
 80013fa:	f000 8758 	beq.w	80022ae <FreqMenu_DrawPresetMenu+0xf46>
 80013fe:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001402:	4293      	cmp	r3, r2
 8001404:	d80f      	bhi.n	8001426 <FreqMenu_DrawPresetMenu+0xbe>
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	f000 85e0 	beq.w	8001fd0 <FreqMenu_DrawPresetMenu+0xc68>
 8001410:	f242 7210 	movw	r2, #10000	; 0x2710
 8001414:	4293      	cmp	r3, r2
 8001416:	f000 86a1 	beq.w	800215c <FreqMenu_DrawPresetMenu+0xdf4>
 800141a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141e:	f000 852d 	beq.w	8001e7c <FreqMenu_DrawPresetMenu+0xb14>
}
 8001422:	f001 ba2d 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001426:	4a5d      	ldr	r2, [pc, #372]	; (800159c <FreqMenu_DrawPresetMenu+0x234>)
 8001428:	4293      	cmp	r3, r2
 800142a:	f001 80ae 	beq.w	800258a <FreqMenu_DrawPresetMenu+0x1222>
 800142e:	4a5c      	ldr	r2, [pc, #368]	; (80015a0 <FreqMenu_DrawPresetMenu+0x238>)
 8001430:	4293      	cmp	r3, r2
 8001432:	f001 816f 	beq.w	8002714 <FreqMenu_DrawPresetMenu+0x13ac>
 8001436:	f24c 3250 	movw	r2, #50000	; 0xc350
 800143a:	4293      	cmp	r3, r2
 800143c:	f000 87fc 	beq.w	8002438 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001440:	f001 ba1e 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	b29a      	uxth	r2, r3
 8001448:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	2302      	movs	r3, #2
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2300      	movs	r3, #0
 8001454:	2105      	movs	r1, #5
 8001456:	4853      	ldr	r0, [pc, #332]	; (80015a4 <FreqMenu_DrawPresetMenu+0x23c>)
 8001458:	f00c f9ce 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	b29a      	uxth	r2, r3
 8001460:	2300      	movs	r3, #0
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	2302      	movs	r3, #2
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800146c:	2105      	movs	r1, #5
 800146e:	484e      	ldr	r0, [pc, #312]	; (80015a8 <FreqMenu_DrawPresetMenu+0x240>)
 8001470:	f00c f9c2 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	b29a      	uxth	r2, r3
 8001478:	2300      	movs	r3, #0
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	2302      	movs	r3, #2
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001484:	2105      	movs	r1, #5
 8001486:	4849      	ldr	r0, [pc, #292]	; (80015ac <FreqMenu_DrawPresetMenu+0x244>)
 8001488:	f00c f9b6 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800148c:	7b3b      	ldrb	r3, [r7, #12]
 800148e:	b29a      	uxth	r2, r3
 8001490:	2300      	movs	r3, #0
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	2302      	movs	r3, #2
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800149c:	2105      	movs	r1, #5
 800149e:	4844      	ldr	r0, [pc, #272]	; (80015b0 <FreqMenu_DrawPresetMenu+0x248>)
 80014a0:	f00c f9aa 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	2300      	movs	r3, #0
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2302      	movs	r3, #2
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014b4:	2105      	movs	r1, #5
 80014b6:	483f      	ldr	r0, [pc, #252]	; (80015b4 <FreqMenu_DrawPresetMenu+0x24c>)
 80014b8:	f00c f99e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80014bc:	7abb      	ldrb	r3, [r7, #10]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	2300      	movs	r3, #0
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	2302      	movs	r3, #2
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014cc:	2105      	movs	r1, #5
 80014ce:	483a      	ldr	r0, [pc, #232]	; (80015b8 <FreqMenu_DrawPresetMenu+0x250>)
 80014d0:	f00c f992 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80014d4:	7a7b      	ldrb	r3, [r7, #9]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	2302      	movs	r3, #2
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014e4:	2105      	movs	r1, #5
 80014e6:	4835      	ldr	r0, [pc, #212]	; (80015bc <FreqMenu_DrawPresetMenu+0x254>)
 80014e8:	f00c f986 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	2300      	movs	r3, #0
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	2302      	movs	r3, #2
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014fc:	2178      	movs	r1, #120	; 0x78
 80014fe:	4830      	ldr	r0, [pc, #192]	; (80015c0 <FreqMenu_DrawPresetMenu+0x258>)
 8001500:	f00c f97a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	b29a      	uxth	r2, r3
 8001508:	2300      	movs	r3, #0
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	2302      	movs	r3, #2
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001514:	2178      	movs	r1, #120	; 0x78
 8001516:	482b      	ldr	r0, [pc, #172]	; (80015c4 <FreqMenu_DrawPresetMenu+0x25c>)
 8001518:	f00c f96e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800151c:	7b7b      	ldrb	r3, [r7, #13]
 800151e:	b29a      	uxth	r2, r3
 8001520:	2300      	movs	r3, #0
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	2302      	movs	r3, #2
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800152c:	2178      	movs	r1, #120	; 0x78
 800152e:	4826      	ldr	r0, [pc, #152]	; (80015c8 <FreqMenu_DrawPresetMenu+0x260>)
 8001530:	f00c f962 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b29a      	uxth	r2, r3
 8001538:	2300      	movs	r3, #0
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	2302      	movs	r3, #2
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001544:	2178      	movs	r1, #120	; 0x78
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <FreqMenu_DrawPresetMenu+0x264>)
 8001548:	f00c f956 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	b29a      	uxth	r2, r3
 8001550:	2300      	movs	r3, #0
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	2302      	movs	r3, #2
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800155c:	2178      	movs	r1, #120	; 0x78
 800155e:	481c      	ldr	r0, [pc, #112]	; (80015d0 <FreqMenu_DrawPresetMenu+0x268>)
 8001560:	f00c f94a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001564:	7abb      	ldrb	r3, [r7, #10]
 8001566:	b29a      	uxth	r2, r3
 8001568:	2300      	movs	r3, #0
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2302      	movs	r3, #2
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001574:	2178      	movs	r1, #120	; 0x78
 8001576:	4817      	ldr	r0, [pc, #92]	; (80015d4 <FreqMenu_DrawPresetMenu+0x26c>)
 8001578:	f00c f93e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800157c:	7a7b      	ldrb	r3, [r7, #9]
 800157e:	b29a      	uxth	r2, r3
 8001580:	2300      	movs	r3, #0
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	2302      	movs	r3, #2
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800158c:	2178      	movs	r1, #120	; 0x78
 800158e:	4812      	ldr	r0, [pc, #72]	; (80015d8 <FreqMenu_DrawPresetMenu+0x270>)
 8001590:	f00c f932 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8001594:	f001 b974 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8001598:	0801206c 	.word	0x0801206c
 800159c:	000124f8 	.word	0x000124f8
 80015a0:	000186a0 	.word	0x000186a0
 80015a4:	08012080 	.word	0x08012080
 80015a8:	08012088 	.word	0x08012088
 80015ac:	08012090 	.word	0x08012090
 80015b0:	08012098 	.word	0x08012098
 80015b4:	080120a0 	.word	0x080120a0
 80015b8:	080120a8 	.word	0x080120a8
 80015bc:	080120b0 	.word	0x080120b0
 80015c0:	080120b8 	.word	0x080120b8
 80015c4:	080120c0 	.word	0x080120c0
 80015c8:	080120c8 	.word	0x080120c8
 80015cc:	080120d0 	.word	0x080120d0
 80015d0:	080120d8 	.word	0x080120d8
 80015d4:	080120e0 	.word	0x080120e0
 80015d8:	080120e8 	.word	0x080120e8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	2300      	movs	r3, #0
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	2302      	movs	r3, #2
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015ec:	2105      	movs	r1, #5
 80015ee:	48a5      	ldr	r0, [pc, #660]	; (8001884 <FreqMenu_DrawPresetMenu+0x51c>)
 80015f0:	f00c f902 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	2302      	movs	r3, #2
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	2105      	movs	r1, #5
 8001606:	48a0      	ldr	r0, [pc, #640]	; (8001888 <FreqMenu_DrawPresetMenu+0x520>)
 8001608:	f00c f8f6 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800160c:	7b7b      	ldrb	r3, [r7, #13]
 800160e:	b29a      	uxth	r2, r3
 8001610:	2300      	movs	r3, #0
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	2302      	movs	r3, #2
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800161c:	2105      	movs	r1, #5
 800161e:	489b      	ldr	r0, [pc, #620]	; (800188c <FreqMenu_DrawPresetMenu+0x524>)
 8001620:	f00c f8ea 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	b29a      	uxth	r2, r3
 8001628:	2300      	movs	r3, #0
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2302      	movs	r3, #2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001634:	2105      	movs	r1, #5
 8001636:	4896      	ldr	r0, [pc, #600]	; (8001890 <FreqMenu_DrawPresetMenu+0x528>)
 8001638:	f00c f8de 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800163c:	7afb      	ldrb	r3, [r7, #11]
 800163e:	b29a      	uxth	r2, r3
 8001640:	2300      	movs	r3, #0
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	2302      	movs	r3, #2
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800164c:	2105      	movs	r1, #5
 800164e:	4891      	ldr	r0, [pc, #580]	; (8001894 <FreqMenu_DrawPresetMenu+0x52c>)
 8001650:	f00c f8d2 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001654:	7abb      	ldrb	r3, [r7, #10]
 8001656:	b29a      	uxth	r2, r3
 8001658:	2300      	movs	r3, #0
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2302      	movs	r3, #2
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001664:	2105      	movs	r1, #5
 8001666:	488c      	ldr	r0, [pc, #560]	; (8001898 <FreqMenu_DrawPresetMenu+0x530>)
 8001668:	f00c f8c6 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800166c:	7a7b      	ldrb	r3, [r7, #9]
 800166e:	b29a      	uxth	r2, r3
 8001670:	2300      	movs	r3, #0
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2302      	movs	r3, #2
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800167c:	2105      	movs	r1, #5
 800167e:	4887      	ldr	r0, [pc, #540]	; (800189c <FreqMenu_DrawPresetMenu+0x534>)
 8001680:	f00c f8ba 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	b29a      	uxth	r2, r3
 8001688:	2300      	movs	r3, #0
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2302      	movs	r3, #2
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001694:	2178      	movs	r1, #120	; 0x78
 8001696:	4882      	ldr	r0, [pc, #520]	; (80018a0 <FreqMenu_DrawPresetMenu+0x538>)
 8001698:	f00c f8ae 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800169c:	7bbb      	ldrb	r3, [r7, #14]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	2300      	movs	r3, #0
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2302      	movs	r3, #2
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016ac:	2178      	movs	r1, #120	; 0x78
 80016ae:	487d      	ldr	r0, [pc, #500]	; (80018a4 <FreqMenu_DrawPresetMenu+0x53c>)
 80016b0:	f00c f8a2 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016b4:	7b7b      	ldrb	r3, [r7, #13]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	2302      	movs	r3, #2
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016c4:	2178      	movs	r1, #120	; 0x78
 80016c6:	4878      	ldr	r0, [pc, #480]	; (80018a8 <FreqMenu_DrawPresetMenu+0x540>)
 80016c8:	f00c f896 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016cc:	7b3b      	ldrb	r3, [r7, #12]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	2300      	movs	r3, #0
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	2302      	movs	r3, #2
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016dc:	2178      	movs	r1, #120	; 0x78
 80016de:	4873      	ldr	r0, [pc, #460]	; (80018ac <FreqMenu_DrawPresetMenu+0x544>)
 80016e0:	f00c f88a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	2302      	movs	r3, #2
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016f4:	2178      	movs	r1, #120	; 0x78
 80016f6:	486e      	ldr	r0, [pc, #440]	; (80018b0 <FreqMenu_DrawPresetMenu+0x548>)
 80016f8:	f00c f87e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016fc:	7abb      	ldrb	r3, [r7, #10]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	2300      	movs	r3, #0
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2302      	movs	r3, #2
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800170c:	2178      	movs	r1, #120	; 0x78
 800170e:	4869      	ldr	r0, [pc, #420]	; (80018b4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001710:	f00c f872 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001714:	7a7b      	ldrb	r3, [r7, #9]
 8001716:	b29a      	uxth	r2, r3
 8001718:	2300      	movs	r3, #0
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	2302      	movs	r3, #2
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001724:	2178      	movs	r1, #120	; 0x78
 8001726:	4864      	ldr	r0, [pc, #400]	; (80018b8 <FreqMenu_DrawPresetMenu+0x550>)
 8001728:	f00c f866 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 800172c:	f001 b8a8 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	b29a      	uxth	r2, r3
 8001734:	2300      	movs	r3, #0
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	2302      	movs	r3, #2
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001740:	2105      	movs	r1, #5
 8001742:	4850      	ldr	r0, [pc, #320]	; (8001884 <FreqMenu_DrawPresetMenu+0x51c>)
 8001744:	f00c f858 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	b29a      	uxth	r2, r3
 800174c:	2300      	movs	r3, #0
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	2302      	movs	r3, #2
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001758:	2105      	movs	r1, #5
 800175a:	484b      	ldr	r0, [pc, #300]	; (8001888 <FreqMenu_DrawPresetMenu+0x520>)
 800175c:	f00c f84c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001760:	7b7b      	ldrb	r3, [r7, #13]
 8001762:	b29a      	uxth	r2, r3
 8001764:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	2302      	movs	r3, #2
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	2105      	movs	r1, #5
 8001772:	4846      	ldr	r0, [pc, #280]	; (800188c <FreqMenu_DrawPresetMenu+0x524>)
 8001774:	f00c f840 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001778:	7b3b      	ldrb	r3, [r7, #12]
 800177a:	b29a      	uxth	r2, r3
 800177c:	2300      	movs	r3, #0
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	2302      	movs	r3, #2
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001788:	2105      	movs	r1, #5
 800178a:	4841      	ldr	r0, [pc, #260]	; (8001890 <FreqMenu_DrawPresetMenu+0x528>)
 800178c:	f00c f834 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	b29a      	uxth	r2, r3
 8001794:	2300      	movs	r3, #0
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	2302      	movs	r3, #2
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a0:	2105      	movs	r1, #5
 80017a2:	483c      	ldr	r0, [pc, #240]	; (8001894 <FreqMenu_DrawPresetMenu+0x52c>)
 80017a4:	f00c f828 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a8:	7abb      	ldrb	r3, [r7, #10]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	2302      	movs	r3, #2
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b8:	2105      	movs	r1, #5
 80017ba:	4837      	ldr	r0, [pc, #220]	; (8001898 <FreqMenu_DrawPresetMenu+0x530>)
 80017bc:	f00c f81c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017c0:	7a7b      	ldrb	r3, [r7, #9]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	2300      	movs	r3, #0
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	2302      	movs	r3, #2
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017d0:	2105      	movs	r1, #5
 80017d2:	4832      	ldr	r0, [pc, #200]	; (800189c <FreqMenu_DrawPresetMenu+0x534>)
 80017d4:	f00c f810 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	2300      	movs	r3, #0
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	2302      	movs	r3, #2
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e8:	2178      	movs	r1, #120	; 0x78
 80017ea:	482d      	ldr	r0, [pc, #180]	; (80018a0 <FreqMenu_DrawPresetMenu+0x538>)
 80017ec:	f00c f804 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2302      	movs	r3, #2
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001800:	2178      	movs	r1, #120	; 0x78
 8001802:	4828      	ldr	r0, [pc, #160]	; (80018a4 <FreqMenu_DrawPresetMenu+0x53c>)
 8001804:	f00b fff8 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	b29a      	uxth	r2, r3
 800180c:	2300      	movs	r3, #0
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2302      	movs	r3, #2
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001818:	2178      	movs	r1, #120	; 0x78
 800181a:	4823      	ldr	r0, [pc, #140]	; (80018a8 <FreqMenu_DrawPresetMenu+0x540>)
 800181c:	f00b ffec 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001820:	7b3b      	ldrb	r3, [r7, #12]
 8001822:	b29a      	uxth	r2, r3
 8001824:	2300      	movs	r3, #0
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	2302      	movs	r3, #2
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001830:	2178      	movs	r1, #120	; 0x78
 8001832:	481e      	ldr	r0, [pc, #120]	; (80018ac <FreqMenu_DrawPresetMenu+0x544>)
 8001834:	f00b ffe0 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001838:	7afb      	ldrb	r3, [r7, #11]
 800183a:	b29a      	uxth	r2, r3
 800183c:	2300      	movs	r3, #0
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	2302      	movs	r3, #2
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001848:	2178      	movs	r1, #120	; 0x78
 800184a:	4819      	ldr	r0, [pc, #100]	; (80018b0 <FreqMenu_DrawPresetMenu+0x548>)
 800184c:	f00b ffd4 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001850:	7abb      	ldrb	r3, [r7, #10]
 8001852:	b29a      	uxth	r2, r3
 8001854:	2300      	movs	r3, #0
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	2302      	movs	r3, #2
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001860:	2178      	movs	r1, #120	; 0x78
 8001862:	4814      	ldr	r0, [pc, #80]	; (80018b4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001864:	f00b ffc8 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001868:	7a7b      	ldrb	r3, [r7, #9]
 800186a:	b29a      	uxth	r2, r3
 800186c:	2300      	movs	r3, #0
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	2302      	movs	r3, #2
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001878:	2178      	movs	r1, #120	; 0x78
 800187a:	480f      	ldr	r0, [pc, #60]	; (80018b8 <FreqMenu_DrawPresetMenu+0x550>)
 800187c:	f00b ffbc 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8001880:	f000 bffe 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8001884:	08012080 	.word	0x08012080
 8001888:	08012088 	.word	0x08012088
 800188c:	08012090 	.word	0x08012090
 8001890:	08012098 	.word	0x08012098
 8001894:	080120a0 	.word	0x080120a0
 8001898:	080120a8 	.word	0x080120a8
 800189c:	080120b0 	.word	0x080120b0
 80018a0:	080120b8 	.word	0x080120b8
 80018a4:	080120c0 	.word	0x080120c0
 80018a8:	080120c8 	.word	0x080120c8
 80018ac:	080120d0 	.word	0x080120d0
 80018b0:	080120d8 	.word	0x080120d8
 80018b4:	080120e0 	.word	0x080120e0
 80018b8:	080120e8 	.word	0x080120e8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018cc:	2105      	movs	r1, #5
 80018ce:	48a5      	ldr	r0, [pc, #660]	; (8001b64 <FreqMenu_DrawPresetMenu+0x7fc>)
 80018d0:	f00b ff92 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e4:	2105      	movs	r1, #5
 80018e6:	48a0      	ldr	r0, [pc, #640]	; (8001b68 <FreqMenu_DrawPresetMenu+0x800>)
 80018e8:	f00b ff86 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	2302      	movs	r3, #2
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018fc:	2105      	movs	r1, #5
 80018fe:	489b      	ldr	r0, [pc, #620]	; (8001b6c <FreqMenu_DrawPresetMenu+0x804>)
 8001900:	f00b ff7a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	b29a      	uxth	r2, r3
 8001908:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2302      	movs	r3, #2
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	2105      	movs	r1, #5
 8001916:	4896      	ldr	r0, [pc, #600]	; (8001b70 <FreqMenu_DrawPresetMenu+0x808>)
 8001918:	f00b ff6e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	b29a      	uxth	r2, r3
 8001920:	2300      	movs	r3, #0
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	2302      	movs	r3, #2
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800192c:	2105      	movs	r1, #5
 800192e:	4891      	ldr	r0, [pc, #580]	; (8001b74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001930:	f00b ff62 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001934:	7abb      	ldrb	r3, [r7, #10]
 8001936:	b29a      	uxth	r2, r3
 8001938:	2300      	movs	r3, #0
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	2302      	movs	r3, #2
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001944:	2105      	movs	r1, #5
 8001946:	488c      	ldr	r0, [pc, #560]	; (8001b78 <FreqMenu_DrawPresetMenu+0x810>)
 8001948:	f00b ff56 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800194c:	7a7b      	ldrb	r3, [r7, #9]
 800194e:	b29a      	uxth	r2, r3
 8001950:	2300      	movs	r3, #0
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2302      	movs	r3, #2
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800195c:	2105      	movs	r1, #5
 800195e:	4887      	ldr	r0, [pc, #540]	; (8001b7c <FreqMenu_DrawPresetMenu+0x814>)
 8001960:	f00b ff4a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	b29a      	uxth	r2, r3
 8001968:	2300      	movs	r3, #0
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	2302      	movs	r3, #2
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001974:	2178      	movs	r1, #120	; 0x78
 8001976:	4882      	ldr	r0, [pc, #520]	; (8001b80 <FreqMenu_DrawPresetMenu+0x818>)
 8001978:	f00b ff3e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	b29a      	uxth	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	2302      	movs	r3, #2
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800198c:	2178      	movs	r1, #120	; 0x78
 800198e:	487d      	ldr	r0, [pc, #500]	; (8001b84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001990:	f00b ff32 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001994:	7b7b      	ldrb	r3, [r7, #13]
 8001996:	b29a      	uxth	r2, r3
 8001998:	2300      	movs	r3, #0
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2302      	movs	r3, #2
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a4:	2178      	movs	r1, #120	; 0x78
 80019a6:	4878      	ldr	r0, [pc, #480]	; (8001b88 <FreqMenu_DrawPresetMenu+0x820>)
 80019a8:	f00b ff26 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019ac:	7b3b      	ldrb	r3, [r7, #12]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2302      	movs	r3, #2
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019bc:	2178      	movs	r1, #120	; 0x78
 80019be:	4873      	ldr	r0, [pc, #460]	; (8001b8c <FreqMenu_DrawPresetMenu+0x824>)
 80019c0:	f00b ff1a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2302      	movs	r3, #2
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019d4:	2178      	movs	r1, #120	; 0x78
 80019d6:	486e      	ldr	r0, [pc, #440]	; (8001b90 <FreqMenu_DrawPresetMenu+0x828>)
 80019d8:	f00b ff0e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019dc:	7abb      	ldrb	r3, [r7, #10]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019ec:	2178      	movs	r1, #120	; 0x78
 80019ee:	4869      	ldr	r0, [pc, #420]	; (8001b94 <FreqMenu_DrawPresetMenu+0x82c>)
 80019f0:	f00b ff02 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f4:	7a7b      	ldrb	r3, [r7, #9]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	2302      	movs	r3, #2
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a04:	2178      	movs	r1, #120	; 0x78
 8001a06:	4864      	ldr	r0, [pc, #400]	; (8001b98 <FreqMenu_DrawPresetMenu+0x830>)
 8001a08:	f00b fef6 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8001a0c:	f000 bf38 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	2300      	movs	r3, #0
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a20:	2105      	movs	r1, #5
 8001a22:	4850      	ldr	r0, [pc, #320]	; (8001b64 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001a24:	f00b fee8 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	2302      	movs	r3, #2
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a38:	2105      	movs	r1, #5
 8001a3a:	484b      	ldr	r0, [pc, #300]	; (8001b68 <FreqMenu_DrawPresetMenu+0x800>)
 8001a3c:	f00b fedc 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a40:	7b7b      	ldrb	r3, [r7, #13]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2302      	movs	r3, #2
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a50:	2105      	movs	r1, #5
 8001a52:	4846      	ldr	r0, [pc, #280]	; (8001b6c <FreqMenu_DrawPresetMenu+0x804>)
 8001a54:	f00b fed0 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a58:	7b3b      	ldrb	r3, [r7, #12]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	2302      	movs	r3, #2
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a68:	2105      	movs	r1, #5
 8001a6a:	4841      	ldr	r0, [pc, #260]	; (8001b70 <FreqMenu_DrawPresetMenu+0x808>)
 8001a6c:	f00b fec4 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2105      	movs	r1, #5
 8001a82:	483c      	ldr	r0, [pc, #240]	; (8001b74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001a84:	f00b feb8 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a88:	7abb      	ldrb	r3, [r7, #10]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2302      	movs	r3, #2
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a98:	2105      	movs	r1, #5
 8001a9a:	4837      	ldr	r0, [pc, #220]	; (8001b78 <FreqMenu_DrawPresetMenu+0x810>)
 8001a9c:	f00b feac 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa0:	7a7b      	ldrb	r3, [r7, #9]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	4832      	ldr	r0, [pc, #200]	; (8001b7c <FreqMenu_DrawPresetMenu+0x814>)
 8001ab4:	f00b fea0 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac8:	2178      	movs	r1, #120	; 0x78
 8001aca:	482d      	ldr	r0, [pc, #180]	; (8001b80 <FreqMenu_DrawPresetMenu+0x818>)
 8001acc:	f00b fe94 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2302      	movs	r3, #2
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae0:	2178      	movs	r1, #120	; 0x78
 8001ae2:	4828      	ldr	r0, [pc, #160]	; (8001b84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001ae4:	f00b fe88 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae8:	7b7b      	ldrb	r3, [r7, #13]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2302      	movs	r3, #2
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af8:	2178      	movs	r1, #120	; 0x78
 8001afa:	4823      	ldr	r0, [pc, #140]	; (8001b88 <FreqMenu_DrawPresetMenu+0x820>)
 8001afc:	f00b fe7c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b00:	7b3b      	ldrb	r3, [r7, #12]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b10:	2178      	movs	r1, #120	; 0x78
 8001b12:	481e      	ldr	r0, [pc, #120]	; (8001b8c <FreqMenu_DrawPresetMenu+0x824>)
 8001b14:	f00b fe70 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	2302      	movs	r3, #2
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b28:	2178      	movs	r1, #120	; 0x78
 8001b2a:	4819      	ldr	r0, [pc, #100]	; (8001b90 <FreqMenu_DrawPresetMenu+0x828>)
 8001b2c:	f00b fe64 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b30:	7abb      	ldrb	r3, [r7, #10]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	2300      	movs	r3, #0
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b40:	2178      	movs	r1, #120	; 0x78
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <FreqMenu_DrawPresetMenu+0x82c>)
 8001b44:	f00b fe58 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b48:	7a7b      	ldrb	r3, [r7, #9]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b58:	2178      	movs	r1, #120	; 0x78
 8001b5a:	480f      	ldr	r0, [pc, #60]	; (8001b98 <FreqMenu_DrawPresetMenu+0x830>)
 8001b5c:	f00b fe4c 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8001b60:	f000 be8e 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8001b64:	08012080 	.word	0x08012080
 8001b68:	08012088 	.word	0x08012088
 8001b6c:	08012090 	.word	0x08012090
 8001b70:	08012098 	.word	0x08012098
 8001b74:	080120a0 	.word	0x080120a0
 8001b78:	080120a8 	.word	0x080120a8
 8001b7c:	080120b0 	.word	0x080120b0
 8001b80:	080120b8 	.word	0x080120b8
 8001b84:	080120c0 	.word	0x080120c0
 8001b88:	080120c8 	.word	0x080120c8
 8001b8c:	080120d0 	.word	0x080120d0
 8001b90:	080120d8 	.word	0x080120d8
 8001b94:	080120e0 	.word	0x080120e0
 8001b98:	080120e8 	.word	0x080120e8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bac:	2105      	movs	r1, #5
 8001bae:	48a5      	ldr	r0, [pc, #660]	; (8001e44 <FreqMenu_DrawPresetMenu+0xadc>)
 8001bb0:	f00b fe22 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	48a0      	ldr	r0, [pc, #640]	; (8001e48 <FreqMenu_DrawPresetMenu+0xae0>)
 8001bc8:	f00b fe16 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bcc:	7b7b      	ldrb	r3, [r7, #13]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bdc:	2105      	movs	r1, #5
 8001bde:	489b      	ldr	r0, [pc, #620]	; (8001e4c <FreqMenu_DrawPresetMenu+0xae4>)
 8001be0:	f00b fe0a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be4:	7b3b      	ldrb	r3, [r7, #12]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2302      	movs	r3, #2
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf4:	2105      	movs	r1, #5
 8001bf6:	4896      	ldr	r0, [pc, #600]	; (8001e50 <FreqMenu_DrawPresetMenu+0xae8>)
 8001bf8:	f00b fdfe 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	2300      	movs	r3, #0
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	2302      	movs	r3, #2
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	4891      	ldr	r0, [pc, #580]	; (8001e54 <FreqMenu_DrawPresetMenu+0xaec>)
 8001c10:	f00b fdf2 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001c14:	7abb      	ldrb	r3, [r7, #10]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2302      	movs	r3, #2
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	2105      	movs	r1, #5
 8001c26:	488c      	ldr	r0, [pc, #560]	; (8001e58 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001c28:	f00b fde6 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c2c:	7a7b      	ldrb	r3, [r7, #9]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	2302      	movs	r3, #2
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c3c:	2105      	movs	r1, #5
 8001c3e:	4887      	ldr	r0, [pc, #540]	; (8001e5c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001c40:	f00b fdda 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c54:	2178      	movs	r1, #120	; 0x78
 8001c56:	4882      	ldr	r0, [pc, #520]	; (8001e60 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001c58:	f00b fdce 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c5c:	7bbb      	ldrb	r3, [r7, #14]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	2300      	movs	r3, #0
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2302      	movs	r3, #2
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c6c:	2178      	movs	r1, #120	; 0x78
 8001c6e:	487d      	ldr	r0, [pc, #500]	; (8001e64 <FreqMenu_DrawPresetMenu+0xafc>)
 8001c70:	f00b fdc2 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c74:	7b7b      	ldrb	r3, [r7, #13]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c84:	2178      	movs	r1, #120	; 0x78
 8001c86:	4878      	ldr	r0, [pc, #480]	; (8001e68 <FreqMenu_DrawPresetMenu+0xb00>)
 8001c88:	f00b fdb6 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c8c:	7b3b      	ldrb	r3, [r7, #12]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2302      	movs	r3, #2
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c9c:	2178      	movs	r1, #120	; 0x78
 8001c9e:	4873      	ldr	r0, [pc, #460]	; (8001e6c <FreqMenu_DrawPresetMenu+0xb04>)
 8001ca0:	f00b fdaa 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2302      	movs	r3, #2
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cb4:	2178      	movs	r1, #120	; 0x78
 8001cb6:	486e      	ldr	r0, [pc, #440]	; (8001e70 <FreqMenu_DrawPresetMenu+0xb08>)
 8001cb8:	f00b fd9e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cbc:	7abb      	ldrb	r3, [r7, #10]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ccc:	2178      	movs	r1, #120	; 0x78
 8001cce:	4869      	ldr	r0, [pc, #420]	; (8001e74 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001cd0:	f00b fd92 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd4:	7a7b      	ldrb	r3, [r7, #9]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce4:	2178      	movs	r1, #120	; 0x78
 8001ce6:	4864      	ldr	r0, [pc, #400]	; (8001e78 <FreqMenu_DrawPresetMenu+0xb10>)
 8001ce8:	f00b fd86 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8001cec:	f000 bdc8 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d00:	2105      	movs	r1, #5
 8001d02:	4850      	ldr	r0, [pc, #320]	; (8001e44 <FreqMenu_DrawPresetMenu+0xadc>)
 8001d04:	f00b fd78 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	2302      	movs	r3, #2
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d18:	2105      	movs	r1, #5
 8001d1a:	484b      	ldr	r0, [pc, #300]	; (8001e48 <FreqMenu_DrawPresetMenu+0xae0>)
 8001d1c:	f00b fd6c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d20:	7b7b      	ldrb	r3, [r7, #13]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	2302      	movs	r3, #2
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d30:	2105      	movs	r1, #5
 8001d32:	4846      	ldr	r0, [pc, #280]	; (8001e4c <FreqMenu_DrawPresetMenu+0xae4>)
 8001d34:	f00b fd60 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d38:	7b3b      	ldrb	r3, [r7, #12]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	2302      	movs	r3, #2
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d48:	2105      	movs	r1, #5
 8001d4a:	4841      	ldr	r0, [pc, #260]	; (8001e50 <FreqMenu_DrawPresetMenu+0xae8>)
 8001d4c:	f00b fd54 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d60:	2105      	movs	r1, #5
 8001d62:	483c      	ldr	r0, [pc, #240]	; (8001e54 <FreqMenu_DrawPresetMenu+0xaec>)
 8001d64:	f00b fd48 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d68:	7abb      	ldrb	r3, [r7, #10]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	2302      	movs	r3, #2
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	4837      	ldr	r0, [pc, #220]	; (8001e58 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001d7c:	f00b fd3c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d80:	7a7b      	ldrb	r3, [r7, #9]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2105      	movs	r1, #5
 8001d92:	4832      	ldr	r0, [pc, #200]	; (8001e5c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001d94:	f00b fd30 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	2302      	movs	r3, #2
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da8:	2178      	movs	r1, #120	; 0x78
 8001daa:	482d      	ldr	r0, [pc, #180]	; (8001e60 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001dac:	f00b fd24 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	2300      	movs	r3, #0
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	2302      	movs	r3, #2
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc0:	2178      	movs	r1, #120	; 0x78
 8001dc2:	4828      	ldr	r0, [pc, #160]	; (8001e64 <FreqMenu_DrawPresetMenu+0xafc>)
 8001dc4:	f00b fd18 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc8:	7b7b      	ldrb	r3, [r7, #13]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd8:	2178      	movs	r1, #120	; 0x78
 8001dda:	4823      	ldr	r0, [pc, #140]	; (8001e68 <FreqMenu_DrawPresetMenu+0xb00>)
 8001ddc:	f00b fd0c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de0:	7b3b      	ldrb	r3, [r7, #12]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2302      	movs	r3, #2
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df0:	2178      	movs	r1, #120	; 0x78
 8001df2:	481e      	ldr	r0, [pc, #120]	; (8001e6c <FreqMenu_DrawPresetMenu+0xb04>)
 8001df4:	f00b fd00 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df8:	7afb      	ldrb	r3, [r7, #11]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2302      	movs	r3, #2
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e08:	2178      	movs	r1, #120	; 0x78
 8001e0a:	4819      	ldr	r0, [pc, #100]	; (8001e70 <FreqMenu_DrawPresetMenu+0xb08>)
 8001e0c:	f00b fcf4 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e10:	7abb      	ldrb	r3, [r7, #10]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2300      	movs	r3, #0
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2302      	movs	r3, #2
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e20:	2178      	movs	r1, #120	; 0x78
 8001e22:	4814      	ldr	r0, [pc, #80]	; (8001e74 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001e24:	f00b fce8 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e28:	7a7b      	ldrb	r3, [r7, #9]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	2302      	movs	r3, #2
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e38:	2178      	movs	r1, #120	; 0x78
 8001e3a:	480f      	ldr	r0, [pc, #60]	; (8001e78 <FreqMenu_DrawPresetMenu+0xb10>)
 8001e3c:	f00b fcdc 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8001e40:	f000 bd1e 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8001e44:	08012080 	.word	0x08012080
 8001e48:	08012088 	.word	0x08012088
 8001e4c:	08012090 	.word	0x08012090
 8001e50:	08012098 	.word	0x08012098
 8001e54:	080120a0 	.word	0x080120a0
 8001e58:	080120a8 	.word	0x080120a8
 8001e5c:	080120b0 	.word	0x080120b0
 8001e60:	080120b8 	.word	0x080120b8
 8001e64:	080120c0 	.word	0x080120c0
 8001e68:	080120c8 	.word	0x080120c8
 8001e6c:	080120d0 	.word	0x080120d0
 8001e70:	080120d8 	.word	0x080120d8
 8001e74:	080120e0 	.word	0x080120e0
 8001e78:	080120e8 	.word	0x080120e8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	2300      	movs	r3, #0
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	2302      	movs	r3, #2
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	48a5      	ldr	r0, [pc, #660]	; (8002124 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001e90:	f00b fcb2 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	48a0      	ldr	r0, [pc, #640]	; (8002128 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001ea8:	f00b fca6 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eac:	7b7b      	ldrb	r3, [r7, #13]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ebc:	2105      	movs	r1, #5
 8001ebe:	489b      	ldr	r0, [pc, #620]	; (800212c <FreqMenu_DrawPresetMenu+0xdc4>)
 8001ec0:	f00b fc9a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ec4:	7b3b      	ldrb	r3, [r7, #12]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	2302      	movs	r3, #2
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	4896      	ldr	r0, [pc, #600]	; (8002130 <FreqMenu_DrawPresetMenu+0xdc8>)
 8001ed8:	f00b fc8e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eec:	2105      	movs	r1, #5
 8001eee:	4891      	ldr	r0, [pc, #580]	; (8002134 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001ef0:	f00b fc82 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ef4:	7abb      	ldrb	r3, [r7, #10]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	2302      	movs	r3, #2
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f04:	2105      	movs	r1, #5
 8001f06:	488c      	ldr	r0, [pc, #560]	; (8002138 <FreqMenu_DrawPresetMenu+0xdd0>)
 8001f08:	f00b fc76 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f0c:	7a7b      	ldrb	r3, [r7, #9]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	2300      	movs	r3, #0
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	2302      	movs	r3, #2
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	4887      	ldr	r0, [pc, #540]	; (800213c <FreqMenu_DrawPresetMenu+0xdd4>)
 8001f20:	f00b fc6a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	2178      	movs	r1, #120	; 0x78
 8001f36:	4882      	ldr	r0, [pc, #520]	; (8002140 <FreqMenu_DrawPresetMenu+0xdd8>)
 8001f38:	f00b fc5e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	2302      	movs	r3, #2
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f4c:	2178      	movs	r1, #120	; 0x78
 8001f4e:	487d      	ldr	r0, [pc, #500]	; (8002144 <FreqMenu_DrawPresetMenu+0xddc>)
 8001f50:	f00b fc52 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f54:	7b7b      	ldrb	r3, [r7, #13]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f64:	2178      	movs	r1, #120	; 0x78
 8001f66:	4878      	ldr	r0, [pc, #480]	; (8002148 <FreqMenu_DrawPresetMenu+0xde0>)
 8001f68:	f00b fc46 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f6c:	7b3b      	ldrb	r3, [r7, #12]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2302      	movs	r3, #2
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f7c:	2178      	movs	r1, #120	; 0x78
 8001f7e:	4873      	ldr	r0, [pc, #460]	; (800214c <FreqMenu_DrawPresetMenu+0xde4>)
 8001f80:	f00b fc3a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f94:	2178      	movs	r1, #120	; 0x78
 8001f96:	486e      	ldr	r0, [pc, #440]	; (8002150 <FreqMenu_DrawPresetMenu+0xde8>)
 8001f98:	f00b fc2e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f9c:	7abb      	ldrb	r3, [r7, #10]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fac:	2178      	movs	r1, #120	; 0x78
 8001fae:	4869      	ldr	r0, [pc, #420]	; (8002154 <FreqMenu_DrawPresetMenu+0xdec>)
 8001fb0:	f00b fc22 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb4:	7a7b      	ldrb	r3, [r7, #9]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc4:	2178      	movs	r1, #120	; 0x78
 8001fc6:	4864      	ldr	r0, [pc, #400]	; (8002158 <FreqMenu_DrawPresetMenu+0xdf0>)
 8001fc8:	f00b fc16 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8001fcc:	f000 bc58 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	2302      	movs	r3, #2
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	4850      	ldr	r0, [pc, #320]	; (8002124 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001fe4:	f00b fc08 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	2300      	movs	r3, #0
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	484b      	ldr	r0, [pc, #300]	; (8002128 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001ffc:	f00b fbfc 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002000:	7b7b      	ldrb	r3, [r7, #13]
 8002002:	b29a      	uxth	r2, r3
 8002004:	2300      	movs	r3, #0
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	2302      	movs	r3, #2
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002010:	2105      	movs	r1, #5
 8002012:	4846      	ldr	r0, [pc, #280]	; (800212c <FreqMenu_DrawPresetMenu+0xdc4>)
 8002014:	f00b fbf0 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002018:	7b3b      	ldrb	r3, [r7, #12]
 800201a:	b29a      	uxth	r2, r3
 800201c:	2300      	movs	r3, #0
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	2302      	movs	r3, #2
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002028:	2105      	movs	r1, #5
 800202a:	4841      	ldr	r0, [pc, #260]	; (8002130 <FreqMenu_DrawPresetMenu+0xdc8>)
 800202c:	f00b fbe4 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	b29a      	uxth	r2, r3
 8002034:	2300      	movs	r3, #0
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	2302      	movs	r3, #2
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002040:	2105      	movs	r1, #5
 8002042:	483c      	ldr	r0, [pc, #240]	; (8002134 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002044:	f00b fbd8 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002048:	7abb      	ldrb	r3, [r7, #10]
 800204a:	b29a      	uxth	r2, r3
 800204c:	2300      	movs	r3, #0
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	2302      	movs	r3, #2
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002058:	2105      	movs	r1, #5
 800205a:	4837      	ldr	r0, [pc, #220]	; (8002138 <FreqMenu_DrawPresetMenu+0xdd0>)
 800205c:	f00b fbcc 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002060:	7a7b      	ldrb	r3, [r7, #9]
 8002062:	b29a      	uxth	r2, r3
 8002064:	2300      	movs	r3, #0
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	2302      	movs	r3, #2
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002070:	2105      	movs	r1, #5
 8002072:	4832      	ldr	r0, [pc, #200]	; (800213c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002074:	f00b fbc0 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	b29a      	uxth	r2, r3
 800207c:	2300      	movs	r3, #0
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2302      	movs	r3, #2
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002088:	2178      	movs	r1, #120	; 0x78
 800208a:	482d      	ldr	r0, [pc, #180]	; (8002140 <FreqMenu_DrawPresetMenu+0xdd8>)
 800208c:	f00b fbb4 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002090:	7bbb      	ldrb	r3, [r7, #14]
 8002092:	b29a      	uxth	r2, r3
 8002094:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	2302      	movs	r3, #2
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	2178      	movs	r1, #120	; 0x78
 80020a2:	4828      	ldr	r0, [pc, #160]	; (8002144 <FreqMenu_DrawPresetMenu+0xddc>)
 80020a4:	f00b fba8 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a8:	7b7b      	ldrb	r3, [r7, #13]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b8:	2178      	movs	r1, #120	; 0x78
 80020ba:	4823      	ldr	r0, [pc, #140]	; (8002148 <FreqMenu_DrawPresetMenu+0xde0>)
 80020bc:	f00b fb9c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c0:	7b3b      	ldrb	r3, [r7, #12]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d0:	2178      	movs	r1, #120	; 0x78
 80020d2:	481e      	ldr	r0, [pc, #120]	; (800214c <FreqMenu_DrawPresetMenu+0xde4>)
 80020d4:	f00b fb90 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2302      	movs	r3, #2
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e8:	2178      	movs	r1, #120	; 0x78
 80020ea:	4819      	ldr	r0, [pc, #100]	; (8002150 <FreqMenu_DrawPresetMenu+0xde8>)
 80020ec:	f00b fb84 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f0:	7abb      	ldrb	r3, [r7, #10]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	2302      	movs	r3, #2
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002100:	2178      	movs	r1, #120	; 0x78
 8002102:	4814      	ldr	r0, [pc, #80]	; (8002154 <FreqMenu_DrawPresetMenu+0xdec>)
 8002104:	f00b fb78 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002108:	7a7b      	ldrb	r3, [r7, #9]
 800210a:	b29a      	uxth	r2, r3
 800210c:	2300      	movs	r3, #0
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2302      	movs	r3, #2
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002118:	2178      	movs	r1, #120	; 0x78
 800211a:	480f      	ldr	r0, [pc, #60]	; (8002158 <FreqMenu_DrawPresetMenu+0xdf0>)
 800211c:	f00b fb6c 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8002120:	e3ae      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8002122:	bf00      	nop
 8002124:	08012080 	.word	0x08012080
 8002128:	08012088 	.word	0x08012088
 800212c:	08012090 	.word	0x08012090
 8002130:	08012098 	.word	0x08012098
 8002134:	080120a0 	.word	0x080120a0
 8002138:	080120a8 	.word	0x080120a8
 800213c:	080120b0 	.word	0x080120b0
 8002140:	080120b8 	.word	0x080120b8
 8002144:	080120c0 	.word	0x080120c0
 8002148:	080120c8 	.word	0x080120c8
 800214c:	080120d0 	.word	0x080120d0
 8002150:	080120d8 	.word	0x080120d8
 8002154:	080120e0 	.word	0x080120e0
 8002158:	080120e8 	.word	0x080120e8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	b29a      	uxth	r2, r3
 8002160:	2300      	movs	r3, #0
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2302      	movs	r3, #2
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800216c:	2105      	movs	r1, #5
 800216e:	48a4      	ldr	r0, [pc, #656]	; (8002400 <FreqMenu_DrawPresetMenu+0x1098>)
 8002170:	f00b fb42 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002174:	7bbb      	ldrb	r3, [r7, #14]
 8002176:	b29a      	uxth	r2, r3
 8002178:	2300      	movs	r3, #0
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2302      	movs	r3, #2
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002184:	2105      	movs	r1, #5
 8002186:	489f      	ldr	r0, [pc, #636]	; (8002404 <FreqMenu_DrawPresetMenu+0x109c>)
 8002188:	f00b fb36 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800218c:	7b7b      	ldrb	r3, [r7, #13]
 800218e:	b29a      	uxth	r2, r3
 8002190:	2300      	movs	r3, #0
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	2302      	movs	r3, #2
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800219c:	2105      	movs	r1, #5
 800219e:	489a      	ldr	r0, [pc, #616]	; (8002408 <FreqMenu_DrawPresetMenu+0x10a0>)
 80021a0:	f00b fb2a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021a4:	7b3b      	ldrb	r3, [r7, #12]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	2300      	movs	r3, #0
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2302      	movs	r3, #2
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021b4:	2105      	movs	r1, #5
 80021b6:	4895      	ldr	r0, [pc, #596]	; (800240c <FreqMenu_DrawPresetMenu+0x10a4>)
 80021b8:	f00b fb1e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	2300      	movs	r3, #0
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2302      	movs	r3, #2
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021cc:	2105      	movs	r1, #5
 80021ce:	4890      	ldr	r0, [pc, #576]	; (8002410 <FreqMenu_DrawPresetMenu+0x10a8>)
 80021d0:	f00b fb12 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021d4:	7abb      	ldrb	r3, [r7, #10]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	2300      	movs	r3, #0
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	2302      	movs	r3, #2
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021e4:	2105      	movs	r1, #5
 80021e6:	488b      	ldr	r0, [pc, #556]	; (8002414 <FreqMenu_DrawPresetMenu+0x10ac>)
 80021e8:	f00b fb06 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021ec:	7a7b      	ldrb	r3, [r7, #9]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2302      	movs	r3, #2
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021fc:	2105      	movs	r1, #5
 80021fe:	4886      	ldr	r0, [pc, #536]	; (8002418 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002200:	f00b fafa 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	b29a      	uxth	r2, r3
 8002208:	2300      	movs	r3, #0
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	2302      	movs	r3, #2
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002214:	2178      	movs	r1, #120	; 0x78
 8002216:	4881      	ldr	r0, [pc, #516]	; (800241c <FreqMenu_DrawPresetMenu+0x10b4>)
 8002218:	f00b faee 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800221c:	7bbb      	ldrb	r3, [r7, #14]
 800221e:	b29a      	uxth	r2, r3
 8002220:	2300      	movs	r3, #0
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2302      	movs	r3, #2
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800222c:	2178      	movs	r1, #120	; 0x78
 800222e:	487c      	ldr	r0, [pc, #496]	; (8002420 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002230:	f00b fae2 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002234:	7b7b      	ldrb	r3, [r7, #13]
 8002236:	b29a      	uxth	r2, r3
 8002238:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	2302      	movs	r3, #2
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	2178      	movs	r1, #120	; 0x78
 8002246:	4877      	ldr	r0, [pc, #476]	; (8002424 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002248:	f00b fad6 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800224c:	7b3b      	ldrb	r3, [r7, #12]
 800224e:	b29a      	uxth	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800225c:	2178      	movs	r1, #120	; 0x78
 800225e:	4872      	ldr	r0, [pc, #456]	; (8002428 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002260:	f00b faca 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002264:	7afb      	ldrb	r3, [r7, #11]
 8002266:	b29a      	uxth	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002274:	2178      	movs	r1, #120	; 0x78
 8002276:	486d      	ldr	r0, [pc, #436]	; (800242c <FreqMenu_DrawPresetMenu+0x10c4>)
 8002278:	f00b fabe 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800227c:	7abb      	ldrb	r3, [r7, #10]
 800227e:	b29a      	uxth	r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2302      	movs	r3, #2
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800228c:	2178      	movs	r1, #120	; 0x78
 800228e:	4868      	ldr	r0, [pc, #416]	; (8002430 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002290:	f00b fab2 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002294:	7a7b      	ldrb	r3, [r7, #9]
 8002296:	b29a      	uxth	r2, r3
 8002298:	2300      	movs	r3, #0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2302      	movs	r3, #2
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a4:	2178      	movs	r1, #120	; 0x78
 80022a6:	4863      	ldr	r0, [pc, #396]	; (8002434 <FreqMenu_DrawPresetMenu+0x10cc>)
 80022a8:	f00b faa6 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 80022ac:	e2e8      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2302      	movs	r3, #2
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022be:	2105      	movs	r1, #5
 80022c0:	484f      	ldr	r0, [pc, #316]	; (8002400 <FreqMenu_DrawPresetMenu+0x1098>)
 80022c2:	f00b fa99 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	2300      	movs	r3, #0
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	2302      	movs	r3, #2
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d6:	2105      	movs	r1, #5
 80022d8:	484a      	ldr	r0, [pc, #296]	; (8002404 <FreqMenu_DrawPresetMenu+0x109c>)
 80022da:	f00b fa8d 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022de:	7b7b      	ldrb	r3, [r7, #13]
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	2300      	movs	r3, #0
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2302      	movs	r3, #2
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ee:	2105      	movs	r1, #5
 80022f0:	4845      	ldr	r0, [pc, #276]	; (8002408 <FreqMenu_DrawPresetMenu+0x10a0>)
 80022f2:	f00b fa81 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f6:	7b3b      	ldrb	r3, [r7, #12]
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	2300      	movs	r3, #0
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2302      	movs	r3, #2
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002306:	2105      	movs	r1, #5
 8002308:	4840      	ldr	r0, [pc, #256]	; (800240c <FreqMenu_DrawPresetMenu+0x10a4>)
 800230a:	f00b fa75 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800230e:	7afb      	ldrb	r3, [r7, #11]
 8002310:	b29a      	uxth	r2, r3
 8002312:	2300      	movs	r3, #0
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	2302      	movs	r3, #2
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800231e:	2105      	movs	r1, #5
 8002320:	483b      	ldr	r0, [pc, #236]	; (8002410 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002322:	f00b fa69 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002326:	7abb      	ldrb	r3, [r7, #10]
 8002328:	b29a      	uxth	r2, r3
 800232a:	2300      	movs	r3, #0
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	2302      	movs	r3, #2
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002336:	2105      	movs	r1, #5
 8002338:	4836      	ldr	r0, [pc, #216]	; (8002414 <FreqMenu_DrawPresetMenu+0x10ac>)
 800233a:	f00b fa5d 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800233e:	7a7b      	ldrb	r3, [r7, #9]
 8002340:	b29a      	uxth	r2, r3
 8002342:	2300      	movs	r3, #0
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	2302      	movs	r3, #2
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800234e:	2105      	movs	r1, #5
 8002350:	4831      	ldr	r0, [pc, #196]	; (8002418 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002352:	f00b fa51 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	b29a      	uxth	r2, r3
 800235a:	2300      	movs	r3, #0
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	2302      	movs	r3, #2
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002366:	2178      	movs	r1, #120	; 0x78
 8002368:	482c      	ldr	r0, [pc, #176]	; (800241c <FreqMenu_DrawPresetMenu+0x10b4>)
 800236a:	f00b fa45 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800236e:	7bbb      	ldrb	r3, [r7, #14]
 8002370:	b29a      	uxth	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2302      	movs	r3, #2
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800237e:	2178      	movs	r1, #120	; 0x78
 8002380:	4827      	ldr	r0, [pc, #156]	; (8002420 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002382:	f00b fa39 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002386:	7b7b      	ldrb	r3, [r7, #13]
 8002388:	b29a      	uxth	r2, r3
 800238a:	2300      	movs	r3, #0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2302      	movs	r3, #2
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002396:	2178      	movs	r1, #120	; 0x78
 8002398:	4822      	ldr	r0, [pc, #136]	; (8002424 <FreqMenu_DrawPresetMenu+0x10bc>)
 800239a:	f00b fa2d 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800239e:	7b3b      	ldrb	r3, [r7, #12]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2302      	movs	r3, #2
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2300      	movs	r3, #0
 80023ae:	2178      	movs	r1, #120	; 0x78
 80023b0:	481d      	ldr	r0, [pc, #116]	; (8002428 <FreqMenu_DrawPresetMenu+0x10c0>)
 80023b2:	f00b fa21 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	2300      	movs	r3, #0
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2302      	movs	r3, #2
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c6:	2178      	movs	r1, #120	; 0x78
 80023c8:	4818      	ldr	r0, [pc, #96]	; (800242c <FreqMenu_DrawPresetMenu+0x10c4>)
 80023ca:	f00b fa15 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023ce:	7abb      	ldrb	r3, [r7, #10]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	2300      	movs	r3, #0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023de:	2178      	movs	r1, #120	; 0x78
 80023e0:	4813      	ldr	r0, [pc, #76]	; (8002430 <FreqMenu_DrawPresetMenu+0x10c8>)
 80023e2:	f00b fa09 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e6:	7a7b      	ldrb	r3, [r7, #9]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	2300      	movs	r3, #0
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2302      	movs	r3, #2
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f6:	2178      	movs	r1, #120	; 0x78
 80023f8:	480e      	ldr	r0, [pc, #56]	; (8002434 <FreqMenu_DrawPresetMenu+0x10cc>)
 80023fa:	f00b f9fd 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 80023fe:	e23f      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8002400:	08012080 	.word	0x08012080
 8002404:	08012088 	.word	0x08012088
 8002408:	08012090 	.word	0x08012090
 800240c:	08012098 	.word	0x08012098
 8002410:	080120a0 	.word	0x080120a0
 8002414:	080120a8 	.word	0x080120a8
 8002418:	080120b0 	.word	0x080120b0
 800241c:	080120b8 	.word	0x080120b8
 8002420:	080120c0 	.word	0x080120c0
 8002424:	080120c8 	.word	0x080120c8
 8002428:	080120d0 	.word	0x080120d0
 800242c:	080120d8 	.word	0x080120d8
 8002430:	080120e0 	.word	0x080120e0
 8002434:	080120e8 	.word	0x080120e8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	b29a      	uxth	r2, r3
 800243c:	2300      	movs	r3, #0
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	2302      	movs	r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002448:	2105      	movs	r1, #5
 800244a:	48a4      	ldr	r0, [pc, #656]	; (80026dc <FreqMenu_DrawPresetMenu+0x1374>)
 800244c:	f00b f9d4 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002450:	7bbb      	ldrb	r3, [r7, #14]
 8002452:	b29a      	uxth	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2302      	movs	r3, #2
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002460:	2105      	movs	r1, #5
 8002462:	489f      	ldr	r0, [pc, #636]	; (80026e0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002464:	f00b f9c8 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002468:	7b7b      	ldrb	r3, [r7, #13]
 800246a:	b29a      	uxth	r2, r3
 800246c:	2300      	movs	r3, #0
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2302      	movs	r3, #2
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002478:	2105      	movs	r1, #5
 800247a:	489a      	ldr	r0, [pc, #616]	; (80026e4 <FreqMenu_DrawPresetMenu+0x137c>)
 800247c:	f00b f9bc 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002480:	7b3b      	ldrb	r3, [r7, #12]
 8002482:	b29a      	uxth	r2, r3
 8002484:	2300      	movs	r3, #0
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2302      	movs	r3, #2
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002490:	2105      	movs	r1, #5
 8002492:	4895      	ldr	r0, [pc, #596]	; (80026e8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002494:	f00b f9b0 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	b29a      	uxth	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2302      	movs	r3, #2
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a8:	2105      	movs	r1, #5
 80024aa:	4890      	ldr	r0, [pc, #576]	; (80026ec <FreqMenu_DrawPresetMenu+0x1384>)
 80024ac:	f00b f9a4 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024b0:	7abb      	ldrb	r3, [r7, #10]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	2300      	movs	r3, #0
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2302      	movs	r3, #2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024c0:	2105      	movs	r1, #5
 80024c2:	488b      	ldr	r0, [pc, #556]	; (80026f0 <FreqMenu_DrawPresetMenu+0x1388>)
 80024c4:	f00b f998 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c8:	7a7b      	ldrb	r3, [r7, #9]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	2300      	movs	r3, #0
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2302      	movs	r3, #2
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d8:	2105      	movs	r1, #5
 80024da:	4886      	ldr	r0, [pc, #536]	; (80026f4 <FreqMenu_DrawPresetMenu+0x138c>)
 80024dc:	f00b f98c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	2300      	movs	r3, #0
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2302      	movs	r3, #2
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024f0:	2178      	movs	r1, #120	; 0x78
 80024f2:	4881      	ldr	r0, [pc, #516]	; (80026f8 <FreqMenu_DrawPresetMenu+0x1390>)
 80024f4:	f00b f980 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024f8:	7bbb      	ldrb	r3, [r7, #14]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	2300      	movs	r3, #0
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002508:	2178      	movs	r1, #120	; 0x78
 800250a:	487c      	ldr	r0, [pc, #496]	; (80026fc <FreqMenu_DrawPresetMenu+0x1394>)
 800250c:	f00b f974 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002510:	7b7b      	ldrb	r3, [r7, #13]
 8002512:	b29a      	uxth	r2, r3
 8002514:	2300      	movs	r3, #0
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	2302      	movs	r3, #2
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002520:	2178      	movs	r1, #120	; 0x78
 8002522:	4877      	ldr	r0, [pc, #476]	; (8002700 <FreqMenu_DrawPresetMenu+0x1398>)
 8002524:	f00b f968 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002528:	7b3b      	ldrb	r3, [r7, #12]
 800252a:	b29a      	uxth	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002538:	2178      	movs	r1, #120	; 0x78
 800253a:	4872      	ldr	r0, [pc, #456]	; (8002704 <FreqMenu_DrawPresetMenu+0x139c>)
 800253c:	f00b f95c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2302      	movs	r3, #2
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2300      	movs	r3, #0
 8002550:	2178      	movs	r1, #120	; 0x78
 8002552:	486d      	ldr	r0, [pc, #436]	; (8002708 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002554:	f00b f950 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002558:	7abb      	ldrb	r3, [r7, #10]
 800255a:	b29a      	uxth	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002568:	2178      	movs	r1, #120	; 0x78
 800256a:	4868      	ldr	r0, [pc, #416]	; (800270c <FreqMenu_DrawPresetMenu+0x13a4>)
 800256c:	f00b f944 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002570:	7a7b      	ldrb	r3, [r7, #9]
 8002572:	b29a      	uxth	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002580:	2178      	movs	r1, #120	; 0x78
 8002582:	4863      	ldr	r0, [pc, #396]	; (8002710 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002584:	f00b f938 	bl	800d7f8 <ILI9341_Draw_Text>
			break;
 8002588:	e17a      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	b29a      	uxth	r2, r3
 800258e:	2300      	movs	r3, #0
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	2302      	movs	r3, #2
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800259a:	2105      	movs	r1, #5
 800259c:	484f      	ldr	r0, [pc, #316]	; (80026dc <FreqMenu_DrawPresetMenu+0x1374>)
 800259e:	f00b f92b 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	2300      	movs	r3, #0
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	2302      	movs	r3, #2
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b2:	2105      	movs	r1, #5
 80025b4:	484a      	ldr	r0, [pc, #296]	; (80026e0 <FreqMenu_DrawPresetMenu+0x1378>)
 80025b6:	f00b f91f 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ba:	7b7b      	ldrb	r3, [r7, #13]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	2300      	movs	r3, #0
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	2302      	movs	r3, #2
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ca:	2105      	movs	r1, #5
 80025cc:	4845      	ldr	r0, [pc, #276]	; (80026e4 <FreqMenu_DrawPresetMenu+0x137c>)
 80025ce:	f00b f913 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025d2:	7b3b      	ldrb	r3, [r7, #12]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	2300      	movs	r3, #0
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2302      	movs	r3, #2
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025e2:	2105      	movs	r1, #5
 80025e4:	4840      	ldr	r0, [pc, #256]	; (80026e8 <FreqMenu_DrawPresetMenu+0x1380>)
 80025e6:	f00b f907 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ea:	7afb      	ldrb	r3, [r7, #11]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	2300      	movs	r3, #0
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	2302      	movs	r3, #2
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025fa:	2105      	movs	r1, #5
 80025fc:	483b      	ldr	r0, [pc, #236]	; (80026ec <FreqMenu_DrawPresetMenu+0x1384>)
 80025fe:	f00b f8fb 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002602:	7abb      	ldrb	r3, [r7, #10]
 8002604:	b29a      	uxth	r2, r3
 8002606:	2300      	movs	r3, #0
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	2302      	movs	r3, #2
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002612:	2105      	movs	r1, #5
 8002614:	4836      	ldr	r0, [pc, #216]	; (80026f0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002616:	f00b f8ef 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800261a:	7a7b      	ldrb	r3, [r7, #9]
 800261c:	b29a      	uxth	r2, r3
 800261e:	2300      	movs	r3, #0
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2302      	movs	r3, #2
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800262a:	2105      	movs	r1, #5
 800262c:	4831      	ldr	r0, [pc, #196]	; (80026f4 <FreqMenu_DrawPresetMenu+0x138c>)
 800262e:	f00b f8e3 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	b29a      	uxth	r2, r3
 8002636:	2300      	movs	r3, #0
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	2302      	movs	r3, #2
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002642:	2178      	movs	r1, #120	; 0x78
 8002644:	482c      	ldr	r0, [pc, #176]	; (80026f8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002646:	f00b f8d7 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800264a:	7bbb      	ldrb	r3, [r7, #14]
 800264c:	b29a      	uxth	r2, r3
 800264e:	2300      	movs	r3, #0
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2302      	movs	r3, #2
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800265a:	2178      	movs	r1, #120	; 0x78
 800265c:	4827      	ldr	r0, [pc, #156]	; (80026fc <FreqMenu_DrawPresetMenu+0x1394>)
 800265e:	f00b f8cb 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002662:	7b7b      	ldrb	r3, [r7, #13]
 8002664:	b29a      	uxth	r2, r3
 8002666:	2300      	movs	r3, #0
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	2302      	movs	r3, #2
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002672:	2178      	movs	r1, #120	; 0x78
 8002674:	4822      	ldr	r0, [pc, #136]	; (8002700 <FreqMenu_DrawPresetMenu+0x1398>)
 8002676:	f00b f8bf 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267a:	7b3b      	ldrb	r3, [r7, #12]
 800267c:	b29a      	uxth	r2, r3
 800267e:	2300      	movs	r3, #0
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2302      	movs	r3, #2
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268a:	2178      	movs	r1, #120	; 0x78
 800268c:	481d      	ldr	r0, [pc, #116]	; (8002704 <FreqMenu_DrawPresetMenu+0x139c>)
 800268e:	f00b f8b3 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002692:	7afb      	ldrb	r3, [r7, #11]
 8002694:	b29a      	uxth	r2, r3
 8002696:	2300      	movs	r3, #0
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2302      	movs	r3, #2
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a2:	2178      	movs	r1, #120	; 0x78
 80026a4:	4818      	ldr	r0, [pc, #96]	; (8002708 <FreqMenu_DrawPresetMenu+0x13a0>)
 80026a6:	f00b f8a7 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80026aa:	7abb      	ldrb	r3, [r7, #10]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2302      	movs	r3, #2
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2300      	movs	r3, #0
 80026ba:	2178      	movs	r1, #120	; 0x78
 80026bc:	4813      	ldr	r0, [pc, #76]	; (800270c <FreqMenu_DrawPresetMenu+0x13a4>)
 80026be:	f00b f89b 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c2:	7a7b      	ldrb	r3, [r7, #9]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	2300      	movs	r3, #0
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	2302      	movs	r3, #2
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d2:	2178      	movs	r1, #120	; 0x78
 80026d4:	480e      	ldr	r0, [pc, #56]	; (8002710 <FreqMenu_DrawPresetMenu+0x13a8>)
 80026d6:	f00b f88f 	bl	800d7f8 <ILI9341_Draw_Text>
			break;
 80026da:	e0d1      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 80026dc:	08012080 	.word	0x08012080
 80026e0:	08012088 	.word	0x08012088
 80026e4:	08012090 	.word	0x08012090
 80026e8:	08012098 	.word	0x08012098
 80026ec:	080120a0 	.word	0x080120a0
 80026f0:	080120a8 	.word	0x080120a8
 80026f4:	080120b0 	.word	0x080120b0
 80026f8:	080120b8 	.word	0x080120b8
 80026fc:	080120c0 	.word	0x080120c0
 8002700:	080120c8 	.word	0x080120c8
 8002704:	080120d0 	.word	0x080120d0
 8002708:	080120d8 	.word	0x080120d8
 800270c:	080120e0 	.word	0x080120e0
 8002710:	080120e8 	.word	0x080120e8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	b29a      	uxth	r2, r3
 8002718:	2300      	movs	r3, #0
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2302      	movs	r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002724:	2105      	movs	r1, #5
 8002726:	4858      	ldr	r0, [pc, #352]	; (8002888 <FreqMenu_DrawPresetMenu+0x1520>)
 8002728:	f00b f866 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800272c:	7bbb      	ldrb	r3, [r7, #14]
 800272e:	b29a      	uxth	r2, r3
 8002730:	2300      	movs	r3, #0
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2302      	movs	r3, #2
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800273c:	2105      	movs	r1, #5
 800273e:	4853      	ldr	r0, [pc, #332]	; (800288c <FreqMenu_DrawPresetMenu+0x1524>)
 8002740:	f00b f85a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002744:	7b7b      	ldrb	r3, [r7, #13]
 8002746:	b29a      	uxth	r2, r3
 8002748:	2300      	movs	r3, #0
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2302      	movs	r3, #2
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002754:	2105      	movs	r1, #5
 8002756:	484e      	ldr	r0, [pc, #312]	; (8002890 <FreqMenu_DrawPresetMenu+0x1528>)
 8002758:	f00b f84e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800275c:	7b3b      	ldrb	r3, [r7, #12]
 800275e:	b29a      	uxth	r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	2302      	movs	r3, #2
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800276c:	2105      	movs	r1, #5
 800276e:	4849      	ldr	r0, [pc, #292]	; (8002894 <FreqMenu_DrawPresetMenu+0x152c>)
 8002770:	f00b f842 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002774:	7afb      	ldrb	r3, [r7, #11]
 8002776:	b29a      	uxth	r2, r3
 8002778:	2300      	movs	r3, #0
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2302      	movs	r3, #2
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002784:	2105      	movs	r1, #5
 8002786:	4844      	ldr	r0, [pc, #272]	; (8002898 <FreqMenu_DrawPresetMenu+0x1530>)
 8002788:	f00b f836 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800278c:	7abb      	ldrb	r3, [r7, #10]
 800278e:	b29a      	uxth	r2, r3
 8002790:	2300      	movs	r3, #0
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800279c:	2105      	movs	r1, #5
 800279e:	483f      	ldr	r0, [pc, #252]	; (800289c <FreqMenu_DrawPresetMenu+0x1534>)
 80027a0:	f00b f82a 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a4:	7a7b      	ldrb	r3, [r7, #9]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2302      	movs	r3, #2
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b4:	2105      	movs	r1, #5
 80027b6:	483a      	ldr	r0, [pc, #232]	; (80028a0 <FreqMenu_DrawPresetMenu+0x1538>)
 80027b8:	f00b f81e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	2300      	movs	r3, #0
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027cc:	2178      	movs	r1, #120	; 0x78
 80027ce:	4835      	ldr	r0, [pc, #212]	; (80028a4 <FreqMenu_DrawPresetMenu+0x153c>)
 80027d0:	f00b f812 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d4:	7bbb      	ldrb	r3, [r7, #14]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e4:	2178      	movs	r1, #120	; 0x78
 80027e6:	4830      	ldr	r0, [pc, #192]	; (80028a8 <FreqMenu_DrawPresetMenu+0x1540>)
 80027e8:	f00b f806 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ec:	7b7b      	ldrb	r3, [r7, #13]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027fc:	2178      	movs	r1, #120	; 0x78
 80027fe:	482b      	ldr	r0, [pc, #172]	; (80028ac <FreqMenu_DrawPresetMenu+0x1544>)
 8002800:	f00a fffa 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002804:	7b3b      	ldrb	r3, [r7, #12]
 8002806:	b29a      	uxth	r2, r3
 8002808:	2300      	movs	r3, #0
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2302      	movs	r3, #2
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002814:	2178      	movs	r1, #120	; 0x78
 8002816:	4826      	ldr	r0, [pc, #152]	; (80028b0 <FreqMenu_DrawPresetMenu+0x1548>)
 8002818:	f00a ffee 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800281c:	7afb      	ldrb	r3, [r7, #11]
 800281e:	b29a      	uxth	r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2302      	movs	r3, #2
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800282c:	2178      	movs	r1, #120	; 0x78
 800282e:	4821      	ldr	r0, [pc, #132]	; (80028b4 <FreqMenu_DrawPresetMenu+0x154c>)
 8002830:	f00a ffe2 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002834:	7abb      	ldrb	r3, [r7, #10]
 8002836:	b29a      	uxth	r2, r3
 8002838:	2300      	movs	r3, #0
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2302      	movs	r3, #2
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002844:	2178      	movs	r1, #120	; 0x78
 8002846:	481c      	ldr	r0, [pc, #112]	; (80028b8 <FreqMenu_DrawPresetMenu+0x1550>)
 8002848:	f00a ffd6 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800284c:	7a7b      	ldrb	r3, [r7, #9]
 800284e:	b29a      	uxth	r2, r3
 8002850:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2302      	movs	r3, #2
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	2178      	movs	r1, #120	; 0x78
 800285e:	4817      	ldr	r0, [pc, #92]	; (80028bc <FreqMenu_DrawPresetMenu+0x1554>)
 8002860:	f00a ffca 	bl	800d7f8 <ILI9341_Draw_Text>
			break;
 8002864:	bf00      	nop
 8002866:	e00b      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002868:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2301      	movs	r3, #1
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	22b4      	movs	r2, #180	; 0xb4
 8002876:	2105      	movs	r1, #5
 8002878:	4811      	ldr	r0, [pc, #68]	; (80028c0 <FreqMenu_DrawPresetMenu+0x1558>)
 800287a:	f00a ffbd 	bl	800d7f8 <ILI9341_Draw_Text>
}
 800287e:	e7ff      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	08012080 	.word	0x08012080
 800288c:	08012088 	.word	0x08012088
 8002890:	08012090 	.word	0x08012090
 8002894:	08012098 	.word	0x08012098
 8002898:	080120a0 	.word	0x080120a0
 800289c:	080120a8 	.word	0x080120a8
 80028a0:	080120b0 	.word	0x080120b0
 80028a4:	080120b8 	.word	0x080120b8
 80028a8:	080120c0 	.word	0x080120c0
 80028ac:	080120c8 	.word	0x080120c8
 80028b0:	080120d0 	.word	0x080120d0
 80028b4:	080120d8 	.word	0x080120d8
 80028b8:	080120e0 	.word	0x080120e0
 80028bc:	080120e8 	.word	0x080120e8
 80028c0:	080120f4 	.word	0x080120f4

080028c4 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80028ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2302      	movs	r3, #2
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2300      	movs	r3, #0
 80028d6:	220a      	movs	r2, #10
 80028d8:	2105      	movs	r1, #5
 80028da:	4804      	ldr	r0, [pc, #16]	; (80028ec <FreqMenu_DrawAdjustMenu+0x28>)
 80028dc:	f00a ff8c 	bl	800d7f8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80028e0:	f7fe fb00 	bl	8000ee4 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	08012124 	.word	0x08012124

080028f0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b0a0      	sub	sp, #128	; 0x80
 80028f4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80028f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2302      	movs	r3, #2
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2300      	movs	r3, #0
 8002902:	220a      	movs	r2, #10
 8002904:	2105      	movs	r1, #5
 8002906:	48a1      	ldr	r0, [pc, #644]	; (8002b8c <FreqMenu_DrawSweepMenu+0x29c>)
 8002908:	f00a ff76 	bl	800d7f8 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 800290c:	2300      	movs	r3, #0
 800290e:	667b      	str	r3, [r7, #100]	; 0x64
 8002910:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 800291e:	4b9c      	ldr	r3, [pc, #624]	; (8002b90 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d109      	bne.n	800293e <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 800292a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800292e:	4a99      	ldr	r2, [pc, #612]	; (8002b94 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002930:	461c      	mov	r4, r3
 8002932:	4615      	mov	r5, r2
 8002934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002938:	682b      	ldr	r3, [r5, #0]
 800293a:	7023      	strb	r3, [r4, #0]
 800293c:	e008      	b.n	8002950 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 800293e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002942:	4a95      	ldr	r2, [pc, #596]	; (8002b98 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002944:	461c      	mov	r4, r3
 8002946:	4615      	mov	r5, r2
 8002948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800294a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002950:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002954:	2300      	movs	r3, #0
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	2302      	movs	r3, #2
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002960:	2228      	movs	r2, #40	; 0x28
 8002962:	2105      	movs	r1, #5
 8002964:	f00a ff48 	bl	800d7f8 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002968:	2300      	movs	r3, #0
 800296a:	64bb      	str	r3, [r7, #72]	; 0x48
 800296c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
 800297c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 800297e:	f002 fd3d 	bl	80053fc <SM_GetOutputInHertz>
 8002982:	ee10 3a10 	vmov	r3, s0
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fe06 	bl	8000598 <__aeabi_f2d>
 800298c:	4603      	mov	r3, r0
 800298e:	460c      	mov	r4, r1
 8002990:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002994:	e9cd 3400 	strd	r3, r4, [sp]
 8002998:	4a80      	ldr	r2, [pc, #512]	; (8002b9c <FreqMenu_DrawSweepMenu+0x2ac>)
 800299a:	2119      	movs	r1, #25
 800299c:	f00c faae 	bl	800eefc <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80029a4:	2300      	movs	r3, #0
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	2302      	movs	r3, #2
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029b0:	223c      	movs	r2, #60	; 0x3c
 80029b2:	2105      	movs	r1, #5
 80029b4:	f00a ff20 	bl	800d7f8 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029b8:	2300      	movs	r3, #0
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	2302      	movs	r3, #2
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029c4:	2264      	movs	r2, #100	; 0x64
 80029c6:	2105      	movs	r1, #5
 80029c8:	4875      	ldr	r0, [pc, #468]	; (8002ba0 <FreqMenu_DrawSweepMenu+0x2b0>)
 80029ca:	f00a ff15 	bl	800d7f8 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80029ce:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <FreqMenu_DrawSweepMenu+0x2a0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d117      	bne.n	8002a0a <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029da:	2300      	movs	r3, #0
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	2302      	movs	r3, #2
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e6:	2264      	movs	r2, #100	; 0x64
 80029e8:	21eb      	movs	r1, #235	; 0xeb
 80029ea:	486e      	ldr	r0, [pc, #440]	; (8002ba4 <FreqMenu_DrawSweepMenu+0x2b4>)
 80029ec:	f00a ff04 	bl	800d7f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80029f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2302      	movs	r3, #2
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2300      	movs	r3, #0
 80029fc:	2264      	movs	r2, #100	; 0x64
 80029fe:	f240 1109 	movw	r1, #265	; 0x109
 8002a02:	4869      	ldr	r0, [pc, #420]	; (8002ba8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002a04:	f00a fef8 	bl	800d7f8 <ILI9341_Draw_Text>
 8002a08:	e016      	b.n	8002a38 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	2302      	movs	r3, #2
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a16:	2264      	movs	r2, #100	; 0x64
 8002a18:	f240 1109 	movw	r1, #265	; 0x109
 8002a1c:	4862      	ldr	r0, [pc, #392]	; (8002ba8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002a1e:	f00a feeb 	bl	800d7f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a22:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	2302      	movs	r3, #2
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2264      	movs	r2, #100	; 0x64
 8002a30:	21eb      	movs	r1, #235	; 0xeb
 8002a32:	485c      	ldr	r0, [pc, #368]	; (8002ba4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002a34:	f00a fee0 	bl	800d7f8 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002a38:	4b5c      	ldr	r3, [pc, #368]	; (8002bac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a40:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	2302      	movs	r3, #2
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2278      	movs	r2, #120	; 0x78
 8002a4e:	2105      	movs	r1, #5
 8002a50:	4857      	ldr	r0, [pc, #348]	; (8002bb0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002a52:	f00a fed1 	bl	800d7f8 <ILI9341_Draw_Text>
 8002a56:	e00a      	b.n	8002a6e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a64:	2278      	movs	r2, #120	; 0x78
 8002a66:	2105      	movs	r1, #5
 8002a68:	4851      	ldr	r0, [pc, #324]	; (8002bb0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002a6a:	f00a fec5 	bl	800d7f8 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	611a      	str	r2, [r3, #16]
 8002a82:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002a84:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fd85 	bl	8000598 <__aeabi_f2d>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	460c      	mov	r4, r1
 8002a92:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002a96:	e9cd 3400 	strd	r3, r4, [sp]
 8002a9a:	4a47      	ldr	r2, [pc, #284]	; (8002bb8 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002a9c:	2119      	movs	r1, #25
 8002a9e:	f00c fa2d 	bl	800eefc <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	2302      	movs	r3, #2
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab2:	2278      	movs	r2, #120	; 0x78
 8002ab4:	21b6      	movs	r1, #182	; 0xb6
 8002ab6:	f00a fe9f 	bl	800d7f8 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002aba:	4b3c      	ldr	r3, [pc, #240]	; (8002bac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10f      	bne.n	8002ae2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10b      	bne.n	8002ae2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002aca:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	228c      	movs	r2, #140	; 0x8c
 8002ad8:	2105      	movs	r1, #5
 8002ada:	4839      	ldr	r0, [pc, #228]	; (8002bc0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002adc:	f00a fe8c 	bl	800d7f8 <ILI9341_Draw_Text>
 8002ae0:	e00a      	b.n	8002af8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aee:	228c      	movs	r2, #140	; 0x8c
 8002af0:	2105      	movs	r1, #5
 8002af2:	4833      	ldr	r0, [pc, #204]	; (8002bc0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002af4:	f00a fe80 	bl	800d7f8 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b14:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	ee17 0a90 	vmov	r0, s15
 8002b20:	f002 fcb0 	bl	8005484 <SM_ConvertPeriodToHertz>
 8002b24:	eeb0 7a40 	vmov.f32	s14, s0
 8002b28:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002bcc <FreqMenu_DrawSweepMenu+0x2dc>
 8002b2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b30:	ee16 0a90 	vmov	r0, s13
 8002b34:	f7fd fd30 	bl	8000598 <__aeabi_f2d>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	f107 0018 	add.w	r0, r7, #24
 8002b40:	e9cd 3400 	strd	r3, r4, [sp]
 8002b44:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002b46:	2114      	movs	r1, #20
 8002b48:	f00c f9d8 	bl	800eefc <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b4c:	f107 0018 	add.w	r0, r7, #24
 8002b50:	2300      	movs	r3, #0
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2302      	movs	r3, #2
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b5c:	228c      	movs	r2, #140	; 0x8c
 8002b5e:	219e      	movs	r1, #158	; 0x9e
 8002b60:	f00a fe4a 	bl	800d7f8 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d135      	bne.n	8002bd8 <FreqMenu_DrawSweepMenu+0x2e8>
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d131      	bne.n	8002bd8 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002b74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	22a0      	movs	r2, #160	; 0xa0
 8002b82:	2105      	movs	r1, #5
 8002b84:	4813      	ldr	r0, [pc, #76]	; (8002bd4 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002b86:	f00a fe37 	bl	800d7f8 <ILI9341_Draw_Text>
 8002b8a:	e030      	b.n	8002bee <FreqMenu_DrawSweepMenu+0x2fe>
 8002b8c:	08012138 	.word	0x08012138
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	0801214c 	.word	0x0801214c
 8002b98:	08012160 	.word	0x08012160
 8002b9c:	08012174 	.word	0x08012174
 8002ba0:	08012188 	.word	0x08012188
 8002ba4:	08012194 	.word	0x08012194
 8002ba8:	08012198 	.word	0x08012198
 8002bac:	20001a15 	.word	0x20001a15
 8002bb0:	080121a0 	.word	0x080121a0
 8002bb4:	20001a30 	.word	0x20001a30
 8002bb8:	080121b0 	.word	0x080121b0
 8002bbc:	20001a14 	.word	0x20001a14
 8002bc0:	080121bc 	.word	0x080121bc
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	40013400 	.word	0x40013400
 8002bcc:	42f00000 	.word	0x42f00000
 8002bd0:	080121cc 	.word	0x080121cc
 8002bd4:	080121d8 	.word	0x080121d8
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	22a0      	movs	r2, #160	; 0xa0
 8002be6:	2105      	movs	r1, #5
 8002be8:	484d      	ldr	r0, [pc, #308]	; (8002d20 <FreqMenu_DrawSweepMenu+0x430>)
 8002bea:	f00a fe05 	bl	800d7f8 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	f107 0308 	add.w	r3, r7, #8
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002c00:	4b48      	ldr	r3, [pc, #288]	; (8002d24 <FreqMenu_DrawSweepMenu+0x434>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <FreqMenu_DrawSweepMenu+0x438>)
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4619      	mov	r1, r3
 8002c12:	ee17 0a90 	vmov	r0, s15
 8002c16:	f002 fc35 	bl	8005484 <SM_ConvertPeriodToHertz>
 8002c1a:	eeb0 7a40 	vmov.f32	s14, s0
 8002c1e:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002d2c <FreqMenu_DrawSweepMenu+0x43c>
 8002c22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c26:	ee16 0a90 	vmov	r0, s13
 8002c2a:	f7fd fcb5 	bl	8000598 <__aeabi_f2d>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	460c      	mov	r4, r1
 8002c32:	1d38      	adds	r0, r7, #4
 8002c34:	e9cd 3400 	strd	r3, r4, [sp]
 8002c38:	4a3d      	ldr	r2, [pc, #244]	; (8002d30 <FreqMenu_DrawSweepMenu+0x440>)
 8002c3a:	2114      	movs	r1, #20
 8002c3c:	f00c f95e 	bl	800eefc <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c40:	1d38      	adds	r0, r7, #4
 8002c42:	2300      	movs	r3, #0
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	2302      	movs	r3, #2
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c4e:	22a0      	movs	r2, #160	; 0xa0
 8002c50:	21aa      	movs	r1, #170	; 0xaa
 8002c52:	f00a fdd1 	bl	800d7f8 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002c56:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <FreqMenu_DrawSweepMenu+0x444>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d10b      	bne.n	8002c7a <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002c62:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	22d5      	movs	r2, #213	; 0xd5
 8002c70:	2106      	movs	r1, #6
 8002c72:	4831      	ldr	r0, [pc, #196]	; (8002d38 <FreqMenu_DrawSweepMenu+0x448>)
 8002c74:	f00a fdc0 	bl	800d7f8 <ILI9341_Draw_Text>
 8002c78:	e00a      	b.n	8002c90 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002c7a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2302      	movs	r3, #2
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	22d5      	movs	r2, #213	; 0xd5
 8002c88:	2105      	movs	r1, #5
 8002c8a:	482c      	ldr	r0, [pc, #176]	; (8002d3c <FreqMenu_DrawSweepMenu+0x44c>)
 8002c8c:	f00a fdb4 	bl	800d7f8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002c90:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	2302      	movs	r3, #2
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	22cc      	movs	r2, #204	; 0xcc
 8002c9e:	2169      	movs	r1, #105	; 0x69
 8002ca0:	4827      	ldr	r0, [pc, #156]	; (8002d40 <FreqMenu_DrawSweepMenu+0x450>)
 8002ca2:	f00a fda9 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002ca6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2302      	movs	r3, #2
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	22de      	movs	r2, #222	; 0xde
 8002cb4:	2162      	movs	r1, #98	; 0x62
 8002cb6:	4823      	ldr	r0, [pc, #140]	; (8002d44 <FreqMenu_DrawSweepMenu+0x454>)
 8002cb8:	f00a fd9e 	bl	800d7f8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002cbc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	22cc      	movs	r2, #204	; 0xcc
 8002cca:	21b7      	movs	r1, #183	; 0xb7
 8002ccc:	481c      	ldr	r0, [pc, #112]	; (8002d40 <FreqMenu_DrawSweepMenu+0x450>)
 8002cce:	f00a fd93 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002cd2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	2302      	movs	r3, #2
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	22de      	movs	r2, #222	; 0xde
 8002ce0:	21ad      	movs	r1, #173	; 0xad
 8002ce2:	4819      	ldr	r0, [pc, #100]	; (8002d48 <FreqMenu_DrawSweepMenu+0x458>)
 8002ce4:	f00a fd88 	bl	800d7f8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002ce8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2302      	movs	r3, #2
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	22cc      	movs	r2, #204	; 0xcc
 8002cf6:	f240 1107 	movw	r1, #263	; 0x107
 8002cfa:	4811      	ldr	r0, [pc, #68]	; (8002d40 <FreqMenu_DrawSweepMenu+0x450>)
 8002cfc:	f00a fd7c 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002d00:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2302      	movs	r3, #2
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	22de      	movs	r2, #222	; 0xde
 8002d0e:	21fc      	movs	r1, #252	; 0xfc
 8002d10:	480e      	ldr	r0, [pc, #56]	; (8002d4c <FreqMenu_DrawSweepMenu+0x45c>)
 8002d12:	f00a fd71 	bl	800d7f8 <ILI9341_Draw_Text>
}
 8002d16:	bf00      	nop
 8002d18:	3778      	adds	r7, #120	; 0x78
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	080121d8 	.word	0x080121d8
 8002d24:	20000004 	.word	0x20000004
 8002d28:	40013400 	.word	0x40013400
 8002d2c:	42f00000 	.word	0x42f00000
 8002d30:	080121e8 	.word	0x080121e8
 8002d34:	40000c00 	.word	0x40000c00
 8002d38:	080121f4 	.word	0x080121f4
 8002d3c:	080121fc 	.word	0x080121fc
 8002d40:	08012204 	.word	0x08012204
 8002d44:	08012208 	.word	0x08012208
 8002d48:	08012210 	.word	0x08012210
 8002d4c:	08012218 	.word	0x08012218

08002d50 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d007      	beq.n	8002d70 <FuncMenu_DrawMenu+0x20>
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d009      	beq.n	8002d78 <FuncMenu_DrawMenu+0x28>
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d000      	beq.n	8002d6a <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8002d68:	e00a      	b.n	8002d80 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8002d6a:	f000 f80d 	bl	8002d88 <FuncMenu_DrawMainMenu>
			break;
 8002d6e:	e007      	b.n	8002d80 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f000 f851 	bl	8002e18 <FuncMenu_DrawOutputMenu>
			break;
 8002d76:	e003      	b.n	8002d80 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f000 f84d 	bl	8002e18 <FuncMenu_DrawOutputMenu>
			break;
 8002d7e:	bf00      	nop

	}
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	2302      	movs	r3, #2
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	220a      	movs	r2, #10
 8002d9c:	210a      	movs	r1, #10
 8002d9e:	481a      	ldr	r0, [pc, #104]	; (8002e08 <FuncMenu_DrawMainMenu+0x80>)
 8002da0:	f00a fd2a 	bl	800d7f8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002da4:	f7fe f89e 	bl	8000ee4 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002da8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	2302      	movs	r3, #2
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	22d2      	movs	r2, #210	; 0xd2
 8002db6:	2105      	movs	r1, #5
 8002db8:	4814      	ldr	r0, [pc, #80]	; (8002e0c <FuncMenu_DrawMainMenu+0x84>)
 8002dba:	f00a fd1d 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002dbe:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	22d2      	movs	r2, #210	; 0xd2
 8002dcc:	2161      	movs	r1, #97	; 0x61
 8002dce:	4810      	ldr	r0, [pc, #64]	; (8002e10 <FuncMenu_DrawMainMenu+0x88>)
 8002dd0:	f00a fd12 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002dd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	2302      	movs	r3, #2
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2300      	movs	r3, #0
 8002de0:	22d2      	movs	r2, #210	; 0xd2
 8002de2:	21af      	movs	r1, #175	; 0xaf
 8002de4:	480b      	ldr	r0, [pc, #44]	; (8002e14 <FuncMenu_DrawMainMenu+0x8c>)
 8002de6:	f00a fd07 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002dea:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	2302      	movs	r3, #2
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2300      	movs	r3, #0
 8002df6:	22d2      	movs	r2, #210	; 0xd2
 8002df8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002dfc:	4805      	ldr	r0, [pc, #20]	; (8002e14 <FuncMenu_DrawMainMenu+0x8c>)
 8002dfe:	f00a fcfb 	bl	800d7f8 <ILI9341_Draw_Text>
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	08012220 	.word	0x08012220
 8002e0c:	0801222c 	.word	0x0801222c
 8002e10:	08012234 	.word	0x08012234
 8002e14:	0801223c 	.word	0x0801223c

08002e18 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
	if(SYNC_CHANNEL)
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2302      	movs	r3, #2
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	220a      	movs	r2, #10
 8002e30:	210a      	movs	r1, #10
 8002e32:	48b9      	ldr	r0, [pc, #740]	; (8003118 <FuncMenu_DrawOutputMenu+0x300>)
 8002e34:	f00a fce0 	bl	800d7f8 <ILI9341_Draw_Text>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 faac 	bl	8005398 <SM_GetOutputChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002e46:	60fb      	str	r3, [r7, #12]
	if(func_profileTmp)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 81b5 	beq.w	80031ba <FuncMenu_DrawOutputMenu+0x3a2>
	{
		switch(func_profileTmp->func)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	f200 81b0 	bhi.w	80031ba <FuncMenu_DrawOutputMenu+0x3a2>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <FuncMenu_DrawOutputMenu+0x48>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e79 	.word	0x08002e79
 8002e64:	08002eff 	.word	0x08002eff
 8002e68:	08002f85 	.word	0x08002f85
 8002e6c:	0800300b 	.word	0x0800300b
 8002e70:	08003091 	.word	0x08003091
 8002e74:	08003135 	.word	0x08003135
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002e78:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	2302      	movs	r3, #2
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2300      	movs	r3, #0
 8002e84:	2232      	movs	r2, #50	; 0x32
 8002e86:	210a      	movs	r1, #10
 8002e88:	48a4      	ldr	r0, [pc, #656]	; (800311c <FuncMenu_DrawOutputMenu+0x304>)
 8002e8a:	f00a fcb5 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	2302      	movs	r3, #2
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e9a:	2246      	movs	r2, #70	; 0x46
 8002e9c:	210a      	movs	r1, #10
 8002e9e:	48a0      	ldr	r0, [pc, #640]	; (8003120 <FuncMenu_DrawOutputMenu+0x308>)
 8002ea0:	f00a fcaa 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002eb0:	225a      	movs	r2, #90	; 0x5a
 8002eb2:	210a      	movs	r1, #10
 8002eb4:	489b      	ldr	r0, [pc, #620]	; (8003124 <FuncMenu_DrawOutputMenu+0x30c>)
 8002eb6:	f00a fc9f 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ec6:	226e      	movs	r2, #110	; 0x6e
 8002ec8:	210a      	movs	r1, #10
 8002eca:	4897      	ldr	r0, [pc, #604]	; (8003128 <FuncMenu_DrawOutputMenu+0x310>)
 8002ecc:	f00a fc94 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002edc:	2282      	movs	r2, #130	; 0x82
 8002ede:	210a      	movs	r1, #10
 8002ee0:	4892      	ldr	r0, [pc, #584]	; (800312c <FuncMenu_DrawOutputMenu+0x314>)
 8002ee2:	f00a fc89 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	2302      	movs	r3, #2
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ef2:	2296      	movs	r2, #150	; 0x96
 8002ef4:	210a      	movs	r1, #10
 8002ef6:	488e      	ldr	r0, [pc, #568]	; (8003130 <FuncMenu_DrawOutputMenu+0x318>)
 8002ef8:	f00a fc7e 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8002efc:	e15d      	b.n	80031ba <FuncMenu_DrawOutputMenu+0x3a2>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002efe:	2300      	movs	r3, #0
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2302      	movs	r3, #2
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f0a:	2232      	movs	r2, #50	; 0x32
 8002f0c:	210a      	movs	r1, #10
 8002f0e:	4883      	ldr	r0, [pc, #524]	; (800311c <FuncMenu_DrawOutputMenu+0x304>)
 8002f10:	f00a fc72 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002f14:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2246      	movs	r2, #70	; 0x46
 8002f22:	210a      	movs	r1, #10
 8002f24:	487e      	ldr	r0, [pc, #504]	; (8003120 <FuncMenu_DrawOutputMenu+0x308>)
 8002f26:	f00a fc67 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	2302      	movs	r3, #2
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f36:	225a      	movs	r2, #90	; 0x5a
 8002f38:	210a      	movs	r1, #10
 8002f3a:	487a      	ldr	r0, [pc, #488]	; (8003124 <FuncMenu_DrawOutputMenu+0x30c>)
 8002f3c:	f00a fc5c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f40:	2300      	movs	r3, #0
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	2302      	movs	r3, #2
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f4c:	226e      	movs	r2, #110	; 0x6e
 8002f4e:	210a      	movs	r1, #10
 8002f50:	4875      	ldr	r0, [pc, #468]	; (8003128 <FuncMenu_DrawOutputMenu+0x310>)
 8002f52:	f00a fc51 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f56:	2300      	movs	r3, #0
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f62:	2282      	movs	r2, #130	; 0x82
 8002f64:	210a      	movs	r1, #10
 8002f66:	4871      	ldr	r0, [pc, #452]	; (800312c <FuncMenu_DrawOutputMenu+0x314>)
 8002f68:	f00a fc46 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	2302      	movs	r3, #2
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f78:	2296      	movs	r2, #150	; 0x96
 8002f7a:	210a      	movs	r1, #10
 8002f7c:	486c      	ldr	r0, [pc, #432]	; (8003130 <FuncMenu_DrawOutputMenu+0x318>)
 8002f7e:	f00a fc3b 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8002f82:	e11a      	b.n	80031ba <FuncMenu_DrawOutputMenu+0x3a2>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f84:	2300      	movs	r3, #0
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	2302      	movs	r3, #2
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f90:	2232      	movs	r2, #50	; 0x32
 8002f92:	210a      	movs	r1, #10
 8002f94:	4861      	ldr	r0, [pc, #388]	; (800311c <FuncMenu_DrawOutputMenu+0x304>)
 8002f96:	f00a fc2f 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fa6:	2246      	movs	r2, #70	; 0x46
 8002fa8:	210a      	movs	r1, #10
 8002faa:	485d      	ldr	r0, [pc, #372]	; (8003120 <FuncMenu_DrawOutputMenu+0x308>)
 8002fac:	f00a fc24 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002fb0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	225a      	movs	r2, #90	; 0x5a
 8002fbe:	210a      	movs	r1, #10
 8002fc0:	4858      	ldr	r0, [pc, #352]	; (8003124 <FuncMenu_DrawOutputMenu+0x30c>)
 8002fc2:	f00a fc19 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	2302      	movs	r3, #2
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fd2:	226e      	movs	r2, #110	; 0x6e
 8002fd4:	210a      	movs	r1, #10
 8002fd6:	4854      	ldr	r0, [pc, #336]	; (8003128 <FuncMenu_DrawOutputMenu+0x310>)
 8002fd8:	f00a fc0e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fe8:	2282      	movs	r2, #130	; 0x82
 8002fea:	210a      	movs	r1, #10
 8002fec:	484f      	ldr	r0, [pc, #316]	; (800312c <FuncMenu_DrawOutputMenu+0x314>)
 8002fee:	f00a fc03 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ffe:	2296      	movs	r2, #150	; 0x96
 8003000:	210a      	movs	r1, #10
 8003002:	484b      	ldr	r0, [pc, #300]	; (8003130 <FuncMenu_DrawOutputMenu+0x318>)
 8003004:	f00a fbf8 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8003008:	e0d7      	b.n	80031ba <FuncMenu_DrawOutputMenu+0x3a2>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800300a:	2300      	movs	r3, #0
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	2302      	movs	r3, #2
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003016:	2232      	movs	r2, #50	; 0x32
 8003018:	210a      	movs	r1, #10
 800301a:	4840      	ldr	r0, [pc, #256]	; (800311c <FuncMenu_DrawOutputMenu+0x304>)
 800301c:	f00a fbec 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003020:	2300      	movs	r3, #0
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2302      	movs	r3, #2
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800302c:	2246      	movs	r2, #70	; 0x46
 800302e:	210a      	movs	r1, #10
 8003030:	483b      	ldr	r0, [pc, #236]	; (8003120 <FuncMenu_DrawOutputMenu+0x308>)
 8003032:	f00a fbe1 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003036:	2300      	movs	r3, #0
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	2302      	movs	r3, #2
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003042:	225a      	movs	r2, #90	; 0x5a
 8003044:	210a      	movs	r1, #10
 8003046:	4837      	ldr	r0, [pc, #220]	; (8003124 <FuncMenu_DrawOutputMenu+0x30c>)
 8003048:	f00a fbd6 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800304c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2302      	movs	r3, #2
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	226e      	movs	r2, #110	; 0x6e
 800305a:	210a      	movs	r1, #10
 800305c:	4832      	ldr	r0, [pc, #200]	; (8003128 <FuncMenu_DrawOutputMenu+0x310>)
 800305e:	f00a fbcb 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003062:	2300      	movs	r3, #0
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	2302      	movs	r3, #2
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800306e:	2282      	movs	r2, #130	; 0x82
 8003070:	210a      	movs	r1, #10
 8003072:	482e      	ldr	r0, [pc, #184]	; (800312c <FuncMenu_DrawOutputMenu+0x314>)
 8003074:	f00a fbc0 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003078:	2300      	movs	r3, #0
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	2302      	movs	r3, #2
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003084:	2296      	movs	r2, #150	; 0x96
 8003086:	210a      	movs	r1, #10
 8003088:	4829      	ldr	r0, [pc, #164]	; (8003130 <FuncMenu_DrawOutputMenu+0x318>)
 800308a:	f00a fbb5 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 800308e:	e094      	b.n	80031ba <FuncMenu_DrawOutputMenu+0x3a2>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003090:	2300      	movs	r3, #0
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2302      	movs	r3, #2
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800309c:	2232      	movs	r2, #50	; 0x32
 800309e:	210a      	movs	r1, #10
 80030a0:	481e      	ldr	r0, [pc, #120]	; (800311c <FuncMenu_DrawOutputMenu+0x304>)
 80030a2:	f00a fba9 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030a6:	2300      	movs	r3, #0
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2302      	movs	r3, #2
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030b2:	2246      	movs	r2, #70	; 0x46
 80030b4:	210a      	movs	r1, #10
 80030b6:	481a      	ldr	r0, [pc, #104]	; (8003120 <FuncMenu_DrawOutputMenu+0x308>)
 80030b8:	f00a fb9e 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030bc:	2300      	movs	r3, #0
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	2302      	movs	r3, #2
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030c8:	225a      	movs	r2, #90	; 0x5a
 80030ca:	210a      	movs	r1, #10
 80030cc:	4815      	ldr	r0, [pc, #84]	; (8003124 <FuncMenu_DrawOutputMenu+0x30c>)
 80030ce:	f00a fb93 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030d2:	2300      	movs	r3, #0
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	2302      	movs	r3, #2
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030de:	226e      	movs	r2, #110	; 0x6e
 80030e0:	210a      	movs	r1, #10
 80030e2:	4811      	ldr	r0, [pc, #68]	; (8003128 <FuncMenu_DrawOutputMenu+0x310>)
 80030e4:	f00a fb88 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	2302      	movs	r3, #2
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2300      	movs	r3, #0
 80030f4:	2282      	movs	r2, #130	; 0x82
 80030f6:	210a      	movs	r1, #10
 80030f8:	480c      	ldr	r0, [pc, #48]	; (800312c <FuncMenu_DrawOutputMenu+0x314>)
 80030fa:	f00a fb7d 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030fe:	2300      	movs	r3, #0
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2302      	movs	r3, #2
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800310a:	2296      	movs	r2, #150	; 0x96
 800310c:	210a      	movs	r1, #10
 800310e:	4808      	ldr	r0, [pc, #32]	; (8003130 <FuncMenu_DrawOutputMenu+0x318>)
 8003110:	f00a fb72 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 8003114:	e051      	b.n	80031ba <FuncMenu_DrawOutputMenu+0x3a2>
 8003116:	bf00      	nop
 8003118:	08012244 	.word	0x08012244
 800311c:	08012254 	.word	0x08012254
 8003120:	0801225c 	.word	0x0801225c
 8003124:	08012268 	.word	0x08012268
 8003128:	08012270 	.word	0x08012270
 800312c:	0801227c 	.word	0x0801227c
 8003130:	08012288 	.word	0x08012288
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003134:	2300      	movs	r3, #0
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	2302      	movs	r3, #2
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003140:	2232      	movs	r2, #50	; 0x32
 8003142:	210a      	movs	r1, #10
 8003144:	481f      	ldr	r0, [pc, #124]	; (80031c4 <FuncMenu_DrawOutputMenu+0x3ac>)
 8003146:	f00a fb57 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800314a:	2300      	movs	r3, #0
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	2302      	movs	r3, #2
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003156:	2246      	movs	r2, #70	; 0x46
 8003158:	210a      	movs	r1, #10
 800315a:	481b      	ldr	r0, [pc, #108]	; (80031c8 <FuncMenu_DrawOutputMenu+0x3b0>)
 800315c:	f00a fb4c 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003160:	2300      	movs	r3, #0
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	2302      	movs	r3, #2
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800316c:	225a      	movs	r2, #90	; 0x5a
 800316e:	210a      	movs	r1, #10
 8003170:	4816      	ldr	r0, [pc, #88]	; (80031cc <FuncMenu_DrawOutputMenu+0x3b4>)
 8003172:	f00a fb41 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003176:	2300      	movs	r3, #0
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	2302      	movs	r3, #2
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003182:	226e      	movs	r2, #110	; 0x6e
 8003184:	210a      	movs	r1, #10
 8003186:	4812      	ldr	r0, [pc, #72]	; (80031d0 <FuncMenu_DrawOutputMenu+0x3b8>)
 8003188:	f00a fb36 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800318c:	2300      	movs	r3, #0
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	2302      	movs	r3, #2
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003198:	2282      	movs	r2, #130	; 0x82
 800319a:	210a      	movs	r1, #10
 800319c:	480d      	ldr	r0, [pc, #52]	; (80031d4 <FuncMenu_DrawOutputMenu+0x3bc>)
 800319e:	f00a fb2b 	bl	800d7f8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80031a2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	2302      	movs	r3, #2
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2300      	movs	r3, #0
 80031ae:	2296      	movs	r2, #150	; 0x96
 80031b0:	210a      	movs	r1, #10
 80031b2:	4809      	ldr	r0, [pc, #36]	; (80031d8 <FuncMenu_DrawOutputMenu+0x3c0>)
 80031b4:	f00a fb20 	bl	800d7f8 <ILI9341_Draw_Text>
				break;
 80031b8:	bf00      	nop
		}
	}
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	08012254 	.word	0x08012254
 80031c8:	0801225c 	.word	0x0801225c
 80031cc:	08012268 	.word	0x08012268
 80031d0:	08012270 	.word	0x08012270
 80031d4:	0801227c 	.word	0x0801227c
 80031d8:	08012288 	.word	0x08012288

080031dc <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d007      	beq.n	80031fc <GainMenu_DrawMenu+0x20>
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d008      	beq.n	8003202 <GainMenu_DrawMenu+0x26>
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d000      	beq.n	80031f6 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 80031f4:	e008      	b.n	8003208 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80031f6:	f000 f80b 	bl	8003210 <GainMenu_DrawMainMenu>
			break;
 80031fa:	e005      	b.n	8003208 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80031fc:	f000 f850 	bl	80032a0 <GainMenu_DrawSignalMenu>
			break;
 8003200:	e002      	b.n	8003208 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003202:	f000 f863 	bl	80032cc <GainMenu_DrawSyncMenu>
			break;
 8003206:	bf00      	nop

	}
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	2302      	movs	r3, #2
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2300      	movs	r3, #0
 8003222:	220a      	movs	r2, #10
 8003224:	210a      	movs	r1, #10
 8003226:	481a      	ldr	r0, [pc, #104]	; (8003290 <GainMenu_DrawMainMenu+0x80>)
 8003228:	f00a fae6 	bl	800d7f8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800322c:	f7fd fe5a 	bl	8000ee4 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003230:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	2302      	movs	r3, #2
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2300      	movs	r3, #0
 800323c:	22d2      	movs	r2, #210	; 0xd2
 800323e:	2105      	movs	r1, #5
 8003240:	4814      	ldr	r0, [pc, #80]	; (8003294 <GainMenu_DrawMainMenu+0x84>)
 8003242:	f00a fad9 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003246:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	2302      	movs	r3, #2
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	22d2      	movs	r2, #210	; 0xd2
 8003254:	2161      	movs	r1, #97	; 0x61
 8003256:	4810      	ldr	r0, [pc, #64]	; (8003298 <GainMenu_DrawMainMenu+0x88>)
 8003258:	f00a face 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800325c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	2302      	movs	r3, #2
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2300      	movs	r3, #0
 8003268:	22d2      	movs	r2, #210	; 0xd2
 800326a:	21af      	movs	r1, #175	; 0xaf
 800326c:	480b      	ldr	r0, [pc, #44]	; (800329c <GainMenu_DrawMainMenu+0x8c>)
 800326e:	f00a fac3 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003272:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	2302      	movs	r3, #2
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2300      	movs	r3, #0
 800327e:	22d2      	movs	r2, #210	; 0xd2
 8003280:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003284:	4805      	ldr	r0, [pc, #20]	; (800329c <GainMenu_DrawMainMenu+0x8c>)
 8003286:	f00a fab7 	bl	800d7f8 <ILI9341_Draw_Text>
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	08012290 	.word	0x08012290
 8003294:	0801229c 	.word	0x0801229c
 8003298:	080122a4 	.word	0x080122a4
 800329c:	080122ac 	.word	0x080122ac

080032a0 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80032a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	2302      	movs	r3, #2
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2300      	movs	r3, #0
 80032b2:	220a      	movs	r2, #10
 80032b4:	210a      	movs	r1, #10
 80032b6:	4804      	ldr	r0, [pc, #16]	; (80032c8 <GainMenu_DrawSignalMenu+0x28>)
 80032b8:	f00a fa9e 	bl	800d7f8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80032bc:	f7fd fe12 	bl	8000ee4 <DM_DisplayFormattedOutput>
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	080122b4 	.word	0x080122b4

080032cc <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80032d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2302      	movs	r3, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	220a      	movs	r2, #10
 80032e0:	210a      	movs	r1, #10
 80032e2:	4804      	ldr	r0, [pc, #16]	; (80032f4 <GainMenu_DrawSyncMenu+0x28>)
 80032e4:	f00a fa88 	bl	800d7f8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80032e8:	f7fd fdfc 	bl	8000ee4 <DM_DisplayFormattedOutput>
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	080122c4 	.word	0x080122c4

080032f8 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d007      	beq.n	8003318 <ToplevelMenu_DrawMenu+0x20>
 8003308:	2b03      	cmp	r3, #3
 800330a:	d008      	beq.n	800331e <ToplevelMenu_DrawMenu+0x26>
 800330c:	2b01      	cmp	r3, #1
 800330e:	d000      	beq.n	8003312 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003310:	e008      	b.n	8003324 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003312:	f000 f80b 	bl	800332c <ToplevelMenu_DrawMainMenu>
			break;
 8003316:	e005      	b.n	8003324 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003318:	f000 f848 	bl	80033ac <ToplevelMenu_DrawOutputMenu>
			break;
 800331c:	e002      	b.n	8003324 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 800331e:	f000 f88f 	bl	8003440 <ToplevelMenu_DrawInputMenu>
			break;
 8003322:	bf00      	nop

	}
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 8003332:	481a      	ldr	r0, [pc, #104]	; (800339c <ToplevelMenu_DrawMainMenu+0x70>)
 8003334:	f00b fdda 	bl	800eeec <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003338:	f7fd fdd4 	bl	8000ee4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800333c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2302      	movs	r3, #2
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2300      	movs	r3, #0
 8003348:	22d2      	movs	r2, #210	; 0xd2
 800334a:	2106      	movs	r1, #6
 800334c:	4814      	ldr	r0, [pc, #80]	; (80033a0 <ToplevelMenu_DrawMainMenu+0x74>)
 800334e:	f00a fa53 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003352:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	2302      	movs	r3, #2
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2300      	movs	r3, #0
 800335e:	22d2      	movs	r2, #210	; 0xd2
 8003360:	215d      	movs	r1, #93	; 0x5d
 8003362:	4810      	ldr	r0, [pc, #64]	; (80033a4 <ToplevelMenu_DrawMainMenu+0x78>)
 8003364:	f00a fa48 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003368:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	2302      	movs	r3, #2
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	2300      	movs	r3, #0
 8003374:	22d2      	movs	r2, #210	; 0xd2
 8003376:	21af      	movs	r1, #175	; 0xaf
 8003378:	480b      	ldr	r0, [pc, #44]	; (80033a8 <ToplevelMenu_DrawMainMenu+0x7c>)
 800337a:	f00a fa3d 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800337e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	2302      	movs	r3, #2
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	22d2      	movs	r2, #210	; 0xd2
 800338c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003390:	4805      	ldr	r0, [pc, #20]	; (80033a8 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003392:	f00a fa31 	bl	800d7f8 <ILI9341_Draw_Text>


}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	080122d4 	.word	0x080122d4
 80033a0:	080122e8 	.word	0x080122e8
 80033a4:	080122f0 	.word	0x080122f0
 80033a8:	080122f8 	.word	0x080122f8

080033ac <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80033b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	2302      	movs	r3, #2
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2300      	movs	r3, #0
 80033be:	220a      	movs	r2, #10
 80033c0:	210a      	movs	r1, #10
 80033c2:	481a      	ldr	r0, [pc, #104]	; (800342c <ToplevelMenu_DrawOutputMenu+0x80>)
 80033c4:	f00a fa18 	bl	800d7f8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80033c8:	f7fd fd8c 	bl	8000ee4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033cc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	2302      	movs	r3, #2
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2300      	movs	r3, #0
 80033d8:	22d2      	movs	r2, #210	; 0xd2
 80033da:	210d      	movs	r1, #13
 80033dc:	4814      	ldr	r0, [pc, #80]	; (8003430 <ToplevelMenu_DrawOutputMenu+0x84>)
 80033de:	f00a fa0b 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80033e2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	2302      	movs	r3, #2
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2300      	movs	r3, #0
 80033ee:	22d2      	movs	r2, #210	; 0xd2
 80033f0:	2163      	movs	r1, #99	; 0x63
 80033f2:	4810      	ldr	r0, [pc, #64]	; (8003434 <ToplevelMenu_DrawOutputMenu+0x88>)
 80033f4:	f00a fa00 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80033f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	2302      	movs	r3, #2
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	2300      	movs	r3, #0
 8003404:	22d2      	movs	r2, #210	; 0xd2
 8003406:	21b0      	movs	r1, #176	; 0xb0
 8003408:	480b      	ldr	r0, [pc, #44]	; (8003438 <ToplevelMenu_DrawOutputMenu+0x8c>)
 800340a:	f00a f9f5 	bl	800d7f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800340e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	2302      	movs	r3, #2
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2300      	movs	r3, #0
 800341a:	22d2      	movs	r2, #210	; 0xd2
 800341c:	21f5      	movs	r1, #245	; 0xf5
 800341e:	4807      	ldr	r0, [pc, #28]	; (800343c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003420:	f00a f9ea 	bl	800d7f8 <ILI9341_Draw_Text>
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	08012300 	.word	0x08012300
 8003430:	08012308 	.word	0x08012308
 8003434:	08012310 	.word	0x08012310
 8003438:	08012318 	.word	0x08012318
 800343c:	08012320 	.word	0x08012320

08003440 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	2302      	movs	r3, #2
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	220a      	movs	r2, #10
 8003454:	210a      	movs	r1, #10
 8003456:	4804      	ldr	r0, [pc, #16]	; (8003468 <ToplevelMenu_DrawInputMenu+0x28>)
 8003458:	f00a f9ce 	bl	800d7f8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800345c:	f7fd fd42 	bl	8000ee4 <DM_DisplayFormattedOutput>
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	08012328 	.word	0x08012328

0800346c <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <BiasMenu_getStatus+0x14>)
 8003472:	781b      	ldrb	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20001a11 	.word	0x20001a11

08003484 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <BiasMenuEntryHandler+0x34>)
 800348a:	f00b fd2f 	bl	800eeec <puts>
#endif

	DM_RefreshScreen();
 800348e:	f7fd feb1 	bl	80011f4 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <BiasMenuEntryHandler+0x38>)
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <BiasMenuEntryHandler+0x3c>)
 800349a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80034a0:	f001 f9f0 	bl	8004884 <BO_GetDcBiasEncoderValue>
 80034a4:	4603      	mov	r3, r0
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <BiasMenuEntryHandler+0x3c>)
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <BiasMenuEntryHandler+0x40>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80034b2:	230e      	movs	r3, #14
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	08012330 	.word	0x08012330
 80034bc:	20001a11 	.word	0x20001a11
 80034c0:	40012c00 	.word	0x40012c00
 80034c4:	20001a13 	.word	0x20001a13

080034c8 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 80034cc:	4807      	ldr	r0, [pc, #28]	; (80034ec <BiasMenuInputHandler+0x24>)
 80034ce:	f00b fd0d 	bl	800eeec <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80034d2:	2001      	movs	r0, #1
 80034d4:	f001 ff76 	bl	80053c4 <SM_GetEncoderValue>
 80034d8:	4603      	mov	r3, r0
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 f9de 	bl	800489c <BO_ModifyOutput>

	eNewEvent = evIdle;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <BiasMenuInputHandler+0x28>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80034e6:	230e      	movs	r3, #14
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	08012354 	.word	0x08012354
 80034f0:	20001a13 	.word	0x20001a13

080034f4 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 80034f8:	4808      	ldr	r0, [pc, #32]	; (800351c <BiasMenuExitHandler+0x28>)
 80034fa:	f00b fcf7 	bl	800eeec <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <BiasMenuExitHandler+0x2c>)
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003504:	f7fd fe76 	bl	80011f4 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003508:	4806      	ldr	r0, [pc, #24]	; (8003524 <BiasMenuExitHandler+0x30>)
 800350a:	f00b fcef 	bl	800eeec <puts>
#endif

	eNewEvent = evIdle;
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <BiasMenuExitHandler+0x34>)
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003514:	2301      	movs	r3, #1
}
 8003516:	4618      	mov	r0, r3
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	08012378 	.word	0x08012378
 8003520:	20001a11 	.word	0x20001a11
 8003524:	0801239c 	.word	0x0801239c
 8003528:	20001a13 	.word	0x20001a13

0800352c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003530:	4bb8      	ldr	r3, [pc, #736]	; (8003814 <EM_ProcessEvent+0x2e8>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b0e      	cmp	r3, #14
 8003536:	f200 8216 	bhi.w	8003966 <EM_ProcessEvent+0x43a>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <EM_ProcessEvent+0x14>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	0800357d 	.word	0x0800357d
 8003544:	080035af 	.word	0x080035af
 8003548:	08003635 	.word	0x08003635
 800354c:	08003653 	.word	0x08003653
 8003550:	0800369f 	.word	0x0800369f
 8003554:	080036d1 	.word	0x080036d1
 8003558:	08003703 	.word	0x08003703
 800355c:	0800374f 	.word	0x0800374f
 8003560:	08003781 	.word	0x08003781
 8003564:	08003967 	.word	0x08003967
 8003568:	080037b3 	.word	0x080037b3
 800356c:	08003845 	.word	0x08003845
 8003570:	08003877 	.word	0x08003877
 8003574:	080038a7 	.word	0x080038a7
 8003578:	08003931 	.word	0x08003931
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 800357c:	48a6      	ldr	r0, [pc, #664]	; (8003818 <EM_ProcessEvent+0x2ec>)
 800357e:	f00b fcb5 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003582:	4ba6      	ldr	r3, [pc, #664]	; (800381c <EM_ProcessEvent+0x2f0>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 800358a:	f000 ffbb 	bl	8004504 <ToplevelOutputMenuEntryHandler>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	4ba0      	ldr	r3, [pc, #640]	; (8003814 <EM_ProcessEvent+0x2e8>)
 8003594:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003596:	4ba1      	ldr	r3, [pc, #644]	; (800381c <EM_ProcessEvent+0x2f0>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 81e5 	bne.w	800396a <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 80035a0:	f000 ffdc 	bl	800455c <ToplevelInputMenuEntryHandler>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b9a      	ldr	r3, [pc, #616]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80035aa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 80035ac:	e1dd      	b.n	800396a <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 80035ae:	489c      	ldr	r0, [pc, #624]	; (8003820 <EM_ProcessEvent+0x2f4>)
 80035b0:	f00b fc9c 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80035b4:	4b99      	ldr	r3, [pc, #612]	; (800381c <EM_ProcessEvent+0x2f0>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b06      	cmp	r3, #6
 80035ba:	d105      	bne.n	80035c8 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 80035bc:	f000 ffb8 	bl	8004530 <ToplevelOutputMenuExitHandler>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b93      	ldr	r3, [pc, #588]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80035c6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 80035c8:	4b94      	ldr	r3, [pc, #592]	; (800381c <EM_ProcessEvent+0x2f0>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d108      	bne.n	80035e2 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80035d0:	2000      	movs	r0, #0
 80035d2:	f000 ff87 	bl	80044e4 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 80035d6:	f000 fd85 	bl	80040e4 <FuncMainMenuEntryHandler>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	4b8d      	ldr	r3, [pc, #564]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80035e0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80035e2:	4b8e      	ldr	r3, [pc, #568]	; (800381c <EM_ProcessEvent+0x2f0>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d108      	bne.n	80035fc <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80035ea:	2000      	movs	r0, #0
 80035ec:	f000 ff7a 	bl	80044e4 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 80035f0:	f000 fb5c 	bl	8003cac <FreqMainMenuEntryHandler>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	4b86      	ldr	r3, [pc, #536]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80035fa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80035fc:	4b87      	ldr	r3, [pc, #540]	; (800381c <EM_ProcessEvent+0x2f0>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d108      	bne.n	8003616 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003604:	2000      	movs	r0, #0
 8003606:	f000 ff6d 	bl	80044e4 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 800360a:	f000 fe6d 	bl	80042e8 <GainMainMenuEntryHandler>
 800360e:	4603      	mov	r3, r0
 8003610:	461a      	mov	r2, r3
 8003612:	4b80      	ldr	r3, [pc, #512]	; (8003814 <EM_ProcessEvent+0x2e8>)
 8003614:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003616:	4b81      	ldr	r3, [pc, #516]	; (800381c <EM_ProcessEvent+0x2f0>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b04      	cmp	r3, #4
 800361c:	f040 81a7 	bne.w	800396e <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003620:	2000      	movs	r0, #0
 8003622:	f000 ff5f 	bl	80044e4 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003626:	f7ff ff2d 	bl	8003484 <BiasMenuEntryHandler>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	4b79      	ldr	r3, [pc, #484]	; (8003814 <EM_ProcessEvent+0x2e8>)
 8003630:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003632:	e19c      	b.n	800396e <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003634:	487b      	ldr	r0, [pc, #492]	; (8003824 <EM_ProcessEvent+0x2f8>)
 8003636:	f00b fc59 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 800363a:	4b78      	ldr	r3, [pc, #480]	; (800381c <EM_ProcessEvent+0x2f0>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b06      	cmp	r3, #6
 8003640:	f040 8197 	bne.w	8003972 <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003644:	f000 ffa0 	bl	8004588 <ToplevelInputMenuExitHandler>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	4b71      	ldr	r3, [pc, #452]	; (8003814 <EM_ProcessEvent+0x2e8>)
 800364e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003650:	e18f      	b.n	8003972 <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003652:	4875      	ldr	r0, [pc, #468]	; (8003828 <EM_ProcessEvent+0x2fc>)
 8003654:	f00b fc4a 	bl	800eeec <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003658:	4b70      	ldr	r3, [pc, #448]	; (800381c <EM_ProcessEvent+0x2f0>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b06      	cmp	r3, #6
 800365e:	d108      	bne.n	8003672 <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 8003660:	f000 fd56 	bl	8004110 <FuncMainMenuExitHandler>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	4b6a      	ldr	r3, [pc, #424]	; (8003814 <EM_ProcessEvent+0x2e8>)
 800366a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800366c:	2002      	movs	r0, #2
 800366e:	f000 ff39 	bl	80044e4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003672:	4b6a      	ldr	r3, [pc, #424]	; (800381c <EM_ProcessEvent+0x2f0>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 800367a:	f000 fd65 	bl	8004148 <FuncSignalMenuEntryHandler>
 800367e:	4603      	mov	r3, r0
 8003680:	461a      	mov	r2, r3
 8003682:	4b64      	ldr	r3, [pc, #400]	; (8003814 <EM_ProcessEvent+0x2e8>)
 8003684:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003686:	4b65      	ldr	r3, [pc, #404]	; (800381c <EM_ProcessEvent+0x2f0>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	f040 8173 	bne.w	8003976 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003690:	f000 fdbc 	bl	800420c <FuncSyncMenuEntryHandler>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	4b5e      	ldr	r3, [pc, #376]	; (8003814 <EM_ProcessEvent+0x2e8>)
 800369a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800369c:	e16b      	b.n	8003976 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 800369e:	4863      	ldr	r0, [pc, #396]	; (800382c <EM_ProcessEvent+0x300>)
 80036a0:	f00b fc24 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80036a4:	4b5d      	ldr	r3, [pc, #372]	; (800381c <EM_ProcessEvent+0x2f0>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d105      	bne.n	80036b8 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 80036ac:	f000 fd82 	bl	80041b4 <FuncSignalMenuInputHandler>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b57      	ldr	r3, [pc, #348]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80036b6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <EM_ProcessEvent+0x2f0>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	f040 815c 	bne.w	800397a <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 80036c2:	f000 fd8d 	bl	80041e0 <FuncSignalMenuExitHandler>
 80036c6:	4603      	mov	r3, r0
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b52      	ldr	r3, [pc, #328]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80036cc:	701a      	strb	r2, [r3, #0]

			}

			break;
 80036ce:	e154      	b.n	800397a <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 80036d0:	4857      	ldr	r0, [pc, #348]	; (8003830 <EM_ProcessEvent+0x304>)
 80036d2:	f00b fc0b 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80036d6:	4b51      	ldr	r3, [pc, #324]	; (800381c <EM_ProcessEvent+0x2f0>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d105      	bne.n	80036ea <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 80036de:	f000 fdcb 	bl	8004278 <FuncSyncMenuInputHandler>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80036e8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80036ea:	4b4c      	ldr	r3, [pc, #304]	; (800381c <EM_ProcessEvent+0x2f0>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	f040 8145 	bne.w	800397e <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 80036f4:	f000 fdd6 	bl	80042a4 <FuncSyncMenuExitHandler>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b45      	ldr	r3, [pc, #276]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80036fe:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003700:	e13d      	b.n	800397e <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003702:	484c      	ldr	r0, [pc, #304]	; (8003834 <EM_ProcessEvent+0x308>)
 8003704:	f00b fbf2 	bl	800eeec <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003708:	4b44      	ldr	r3, [pc, #272]	; (800381c <EM_ProcessEvent+0x2f0>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d108      	bne.n	8003722 <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 8003710:	f000 fe00 	bl	8004314 <GainMainMenuExitHandler>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	4b3e      	ldr	r3, [pc, #248]	; (8003814 <EM_ProcessEvent+0x2e8>)
 800371a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800371c:	2002      	movs	r0, #2
 800371e:	f000 fee1 	bl	80044e4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <EM_ProcessEvent+0x2f0>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 800372a:	f000 fe0f 	bl	800434c <GainSignalMenuEntryHandler>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	4b38      	ldr	r3, [pc, #224]	; (8003814 <EM_ProcessEvent+0x2e8>)
 8003734:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003736:	4b39      	ldr	r3, [pc, #228]	; (800381c <EM_ProcessEvent+0x2f0>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	f040 8121 	bne.w	8003982 <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003740:	f000 fe64 	bl	800440c <GainSyncMenuEntryHandler>
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	4b32      	ldr	r3, [pc, #200]	; (8003814 <EM_ProcessEvent+0x2e8>)
 800374a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800374c:	e119      	b.n	8003982 <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 800374e:	483a      	ldr	r0, [pc, #232]	; (8003838 <EM_ProcessEvent+0x30c>)
 8003750:	f00b fbcc 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003754:	4b31      	ldr	r3, [pc, #196]	; (800381c <EM_ProcessEvent+0x2f0>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b05      	cmp	r3, #5
 800375a:	d105      	bne.n	8003768 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 800375c:	f000 fe2a 	bl	80043b4 <GainSignalMenuInputHandler>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <EM_ProcessEvent+0x2e8>)
 8003766:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <EM_ProcessEvent+0x2f0>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b06      	cmp	r3, #6
 800376e:	f040 810a 	bne.w	8003986 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 8003772:	f000 fe35 	bl	80043e0 <GainSignalMenuExitHandler>
 8003776:	4603      	mov	r3, r0
 8003778:	461a      	mov	r2, r3
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <EM_ProcessEvent+0x2e8>)
 800377c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800377e:	e102      	b.n	8003986 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 8003780:	482e      	ldr	r0, [pc, #184]	; (800383c <EM_ProcessEvent+0x310>)
 8003782:	f00b fbb3 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003786:	4b25      	ldr	r3, [pc, #148]	; (800381c <EM_ProcessEvent+0x2f0>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b05      	cmp	r3, #5
 800378c:	d105      	bne.n	800379a <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 800378e:	f000 fe71 	bl	8004474 <GainSyncMenuInputHandler>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <EM_ProcessEvent+0x2e8>)
 8003798:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <EM_ProcessEvent+0x2f0>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	f040 80f3 	bne.w	800398a <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 80037a4:	f000 fe7c 	bl	80044a0 <GainSyncMenuExitHandler>
 80037a8:	4603      	mov	r3, r0
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80037ae:	701a      	strb	r2, [r3, #0]
			}

			break;
 80037b0:	e0eb      	b.n	800398a <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 80037b2:	4823      	ldr	r0, [pc, #140]	; (8003840 <EM_ProcessEvent+0x314>)
 80037b4:	f00b fb9a 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80037b8:	4b18      	ldr	r3, [pc, #96]	; (800381c <EM_ProcessEvent+0x2f0>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b06      	cmp	r3, #6
 80037be:	d108      	bne.n	80037d2 <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 80037c0:	f000 fa8a 	bl	8003cd8 <FreqMainMenuExitHandler>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80037ca:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80037cc:	2002      	movs	r0, #2
 80037ce:	f000 fe89 	bl	80044e4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <EM_ProcessEvent+0x2f0>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d105      	bne.n	80037e6 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 80037da:	f000 fa9f 	bl	8003d1c <FreqPresetMenuEntryHandler>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80037e4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <EM_ProcessEvent+0x2f0>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d105      	bne.n	80037fa <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 80037ee:	f000 faf3 	bl	8003dd8 <FreqAdjustMenuEntryHandler>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	4b07      	ldr	r3, [pc, #28]	; (8003814 <EM_ProcessEvent+0x2e8>)
 80037f8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <EM_ProcessEvent+0x2f0>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	f040 80c5 	bne.w	800398e <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003804:	f000 f8ea 	bl	80039dc <FreqSweepMenuEntryHandler>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	4b01      	ldr	r3, [pc, #4]	; (8003814 <EM_ProcessEvent+0x2e8>)
 800380e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003810:	e0bd      	b.n	800398e <EM_ProcessEvent+0x462>
 8003812:	bf00      	nop
 8003814:	20001a12 	.word	0x20001a12
 8003818:	080123b4 	.word	0x080123b4
 800381c:	20001a13 	.word	0x20001a13
 8003820:	080123c0 	.word	0x080123c0
 8003824:	080123dc 	.word	0x080123dc
 8003828:	080123f8 	.word	0x080123f8
 800382c:	08012410 	.word	0x08012410
 8003830:	08012428 	.word	0x08012428
 8003834:	08012440 	.word	0x08012440
 8003838:	08012458 	.word	0x08012458
 800383c:	08012470 	.word	0x08012470
 8003840:	08012488 	.word	0x08012488

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003844:	4857      	ldr	r0, [pc, #348]	; (80039a4 <EM_ProcessEvent+0x478>)
 8003846:	f00b fb51 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 800384a:	4b57      	ldr	r3, [pc, #348]	; (80039a8 <EM_ProcessEvent+0x47c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b05      	cmp	r3, #5
 8003850:	d105      	bne.n	800385e <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003852:	f000 fa95 	bl	8003d80 <FreqPresetMenuInputHandler>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	4b54      	ldr	r3, [pc, #336]	; (80039ac <EM_ProcessEvent+0x480>)
 800385c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800385e:	4b52      	ldr	r3, [pc, #328]	; (80039a8 <EM_ProcessEvent+0x47c>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b06      	cmp	r3, #6
 8003864:	f040 8095 	bne.w	8003992 <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003868:	f000 faa0 	bl	8003dac <FreqPresetMenuExitHandler>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	4b4e      	ldr	r3, [pc, #312]	; (80039ac <EM_ProcessEvent+0x480>)
 8003872:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003874:	e08d      	b.n	8003992 <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003876:	484e      	ldr	r0, [pc, #312]	; (80039b0 <EM_ProcessEvent+0x484>)
 8003878:	f00b fb38 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 800387c:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <EM_ProcessEvent+0x47c>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b05      	cmp	r3, #5
 8003882:	d105      	bne.n	8003890 <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003884:	f000 faca 	bl	8003e1c <FreqAdjustMenuInputHandler>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	4b47      	ldr	r3, [pc, #284]	; (80039ac <EM_ProcessEvent+0x480>)
 800388e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003890:	4b45      	ldr	r3, [pc, #276]	; (80039a8 <EM_ProcessEvent+0x47c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b06      	cmp	r3, #6
 8003896:	d17e      	bne.n	8003996 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003898:	f000 fad2 	bl	8003e40 <FreqAdjustMenuExitHandler>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	4b42      	ldr	r3, [pc, #264]	; (80039ac <EM_ProcessEvent+0x480>)
 80038a2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80038a4:	e077      	b.n	8003996 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 80038a6:	4843      	ldr	r0, [pc, #268]	; (80039b4 <EM_ProcessEvent+0x488>)
 80038a8:	f00b fb20 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 80038ac:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <EM_ProcessEvent+0x47c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d106      	bne.n	80038c2 <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 80038b4:	2007      	movs	r0, #7
 80038b6:	f000 f8ed 	bl	8003a94 <FreqSweepMenuInputHandler>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <EM_ProcessEvent+0x480>)
 80038c0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <EM_ProcessEvent+0x47c>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d106      	bne.n	80038d8 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 80038ca:	2008      	movs	r0, #8
 80038cc:	f000 f8e2 	bl	8003a94 <FreqSweepMenuInputHandler>
 80038d0:	4603      	mov	r3, r0
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b35      	ldr	r3, [pc, #212]	; (80039ac <EM_ProcessEvent+0x480>)
 80038d6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80038d8:	4b33      	ldr	r3, [pc, #204]	; (80039a8 <EM_ProcessEvent+0x47c>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d106      	bne.n	80038ee <EM_ProcessEvent+0x3c2>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80038e0:	2009      	movs	r0, #9
 80038e2:	f000 f8d7 	bl	8003a94 <FreqSweepMenuInputHandler>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <EM_ProcessEvent+0x480>)
 80038ec:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80038ee:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <EM_ProcessEvent+0x47c>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d106      	bne.n	8003904 <EM_ProcessEvent+0x3d8>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80038f6:	200a      	movs	r0, #10
 80038f8:	f000 f8cc 	bl	8003a94 <FreqSweepMenuInputHandler>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	4b2a      	ldr	r3, [pc, #168]	; (80039ac <EM_ProcessEvent+0x480>)
 8003902:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8003904:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <EM_ProcessEvent+0x47c>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b05      	cmp	r3, #5
 800390a:	d106      	bne.n	800391a <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 800390c:	200b      	movs	r0, #11
 800390e:	f000 f8c1 	bl	8003a94 <FreqSweepMenuInputHandler>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	4b25      	ldr	r3, [pc, #148]	; (80039ac <EM_ProcessEvent+0x480>)
 8003918:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <EM_ProcessEvent+0x47c>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b06      	cmp	r3, #6
 8003920:	d13b      	bne.n	800399a <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 8003922:	f000 f99f 	bl	8003c64 <FreqSweepMenuExitHandler>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	4b20      	ldr	r3, [pc, #128]	; (80039ac <EM_ProcessEvent+0x480>)
 800392c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800392e:	e034      	b.n	800399a <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 8003930:	4821      	ldr	r0, [pc, #132]	; (80039b8 <EM_ProcessEvent+0x48c>)
 8003932:	f00b fadb 	bl	800eeec <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <EM_ProcessEvent+0x47c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d105      	bne.n	800394a <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 800393e:	f7ff fdc3 	bl	80034c8 <BiasMenuInputHandler>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	4b19      	ldr	r3, [pc, #100]	; (80039ac <EM_ProcessEvent+0x480>)
 8003948:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800394a:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <EM_ProcessEvent+0x47c>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b06      	cmp	r3, #6
 8003950:	d125      	bne.n	800399e <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 8003952:	f7ff fdcf 	bl	80034f4 <BiasMenuExitHandler>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <EM_ProcessEvent+0x480>)
 800395c:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800395e:	2002      	movs	r0, #2
 8003960:	f000 fdc0 	bl	80044e4 <ToplevelMenu_setStatus>
			}

			break;
 8003964:	e01b      	b.n	800399e <EM_ProcessEvent+0x472>

		default:
			break;
 8003966:	bf00      	nop
 8003968:	e01a      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 800396a:	bf00      	nop
 800396c:	e018      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 800396e:	bf00      	nop
 8003970:	e016      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 8003972:	bf00      	nop
 8003974:	e014      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 8003976:	bf00      	nop
 8003978:	e012      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 800397a:	bf00      	nop
 800397c:	e010      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 800397e:	bf00      	nop
 8003980:	e00e      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 8003982:	bf00      	nop
 8003984:	e00c      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 8003986:	bf00      	nop
 8003988:	e00a      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 800398a:	bf00      	nop
 800398c:	e008      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 800398e:	bf00      	nop
 8003990:	e006      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 8003992:	bf00      	nop
 8003994:	e004      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 8003996:	bf00      	nop
 8003998:	e002      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <EM_ProcessEvent+0x474>
			break;
 800399e:	bf00      	nop
	}

}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	080124a0 	.word	0x080124a0
 80039a8:	20001a13 	.word	0x20001a13
 80039ac:	20001a12 	.word	0x20001a12
 80039b0:	080124b8 	.word	0x080124b8
 80039b4:	080124d0 	.word	0x080124d0
 80039b8:	080124e8 	.word	0x080124e8

080039bc <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80039c6:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <EM_SetNewEvent+0x1c>)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	7013      	strb	r3, [r2, #0]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	20001a13 	.word	0x20001a13

080039dc <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 80039e0:	4825      	ldr	r0, [pc, #148]	; (8003a78 <FreqSweepMenuEntryHandler+0x9c>)
 80039e2:	f00b fa83 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 80039e6:	f7fd fc05 	bl	80011f4 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <FreqSweepMenuEntryHandler+0xa0>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <FreqSweepMenuEntryHandler+0xa4>)
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a04:	d008      	beq.n	8003a18 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <FreqSweepMenuEntryHandler+0xa0>)
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <FreqSweepMenuEntryHandler+0xa4>)
 8003a14:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8003a18:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <FreqSweepMenuEntryHandler+0xa4>)
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003a22:	eef4 7a47 	vcmp.f32	s15, s14
 8003a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2a:	d101      	bne.n	8003a30 <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 8003a2c:	f000 fa1e 	bl	8003e6c <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003a30:	2000      	movs	r0, #0
 8003a32:	f000 fa75 	bl	8003f20 <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f000 fad2 	bl	8003fe0 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003a3c:	f000 fb0c 	bl	8004058 <_getCalculatedSweepFrequencyInHertz>
 8003a40:	eef0 7a40 	vmov.f32	s15, s0
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <FreqSweepMenuEntryHandler+0xa8>)
 8003a46:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <FreqSweepMenuEntryHandler+0xac>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003a50:	2009      	movs	r0, #9
 8003a52:	f000 f81f 	bl	8003a94 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <FreqSweepMenuEntryHandler+0xac>)
 8003a58:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <FreqSweepMenuEntryHandler+0xac>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <FreqSweepMenuEntryHandler+0xb0>)
 8003a66:	2204      	movs	r2, #4
 8003a68:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <FreqSweepMenuEntryHandler+0xb4>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003a70:	230d      	movs	r3, #13
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	080124f8 	.word	0x080124f8
 8003a7c:	40013400 	.word	0x40013400
 8003a80:	20000004 	.word	0x20000004
 8003a84:	20001a30 	.word	0x20001a30
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	20001a16 	.word	0x20001a16
 8003a90:	20001a13 	.word	0x20001a13

08003a94 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003a9e:	4865      	ldr	r0, [pc, #404]	; (8003c34 <FreqSweepMenuInputHandler+0x1a0>)
 8003aa0:	f00b fa24 	bl	800eeec <puts>
	#endif



	switch(pEvent)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	3b07      	subs	r3, #7
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	f200 80ba 	bhi.w	8003c22 <FreqSweepMenuInputHandler+0x18e>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <FreqSweepMenuInputHandler+0x20>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ac9 	.word	0x08003ac9
 8003ab8:	08003ae9 	.word	0x08003ae9
 8003abc:	08003c13 	.word	0x08003c13
 8003ac0:	08003c1b 	.word	0x08003c1b
 8003ac4:	08003b29 	.word	0x08003b29
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8003ac8:	485b      	ldr	r0, [pc, #364]	; (8003c38 <FreqSweepMenuInputHandler+0x1a4>)
 8003aca:	f00b fa0f 	bl	800eeec <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8003ace:	4b5b      	ldr	r3, [pc, #364]	; (8003c3c <FreqSweepMenuInputHandler+0x1a8>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a5a      	ldr	r2, [pc, #360]	; (8003c3c <FreqSweepMenuInputHandler+0x1a8>)
 8003ad4:	f083 0301 	eor.w	r3, r3, #1
 8003ad8:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8003ada:	4b58      	ldr	r3, [pc, #352]	; (8003c3c <FreqSweepMenuInputHandler+0x1a8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a57      	ldr	r2, [pc, #348]	; (8003c3c <FreqSweepMenuInputHandler+0x1a8>)
 8003ae0:	f083 0301 	eor.w	r3, r3, #1
 8003ae4:	6013      	str	r3, [r2, #0]
			break;
 8003ae6:	e09d      	b.n	8003c24 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8003ae8:	4855      	ldr	r0, [pc, #340]	; (8003c40 <FreqSweepMenuInputHandler+0x1ac>)
 8003aea:	f00b f9ff 	bl	800eeec <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8003aee:	4b55      	ldr	r3, [pc, #340]	; (8003c44 <FreqSweepMenuInputHandler+0x1b0>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	f083 0301 	eor.w	r3, r3, #1
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	4b52      	ldr	r3, [pc, #328]	; (8003c44 <FreqSweepMenuInputHandler+0x1b0>)
 8003afa:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8003afc:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <FreqSweepMenuInputHandler+0x1b0>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d004      	beq.n	8003b0e <FreqSweepMenuInputHandler+0x7a>
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d008      	beq.n	8003b1a <FreqSweepMenuInputHandler+0x86>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <FreqSweepMenuInputHandler+0x80>
 8003b0c:	e006      	b.n	8003b1c <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 8003b0e:	f000 f9ad 	bl	8003e6c <_setSweepModeDown>
					break;
 8003b12:	e003      	b.n	8003b1c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 8003b14:	f000 f9da 	bl	8003ecc <_setSweepModeUp>
					break;
 8003b18:	e000      	b.n	8003b1c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8003b1a:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 8003b1c:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <FreqSweepMenuInputHandler+0x1b4>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 f9fd 	bl	8003f20 <_setEncoderControlMode>

			break;
 8003b26:	e07d      	b.n	8003c24 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8003b28:	4848      	ldr	r0, [pc, #288]	; (8003c4c <FreqSweepMenuInputHandler+0x1b8>)
 8003b2a:	f00b f9df 	bl	800eeec <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 8003b2e:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <FreqSweepMenuInputHandler+0x1b4>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <FreqSweepMenuInputHandler+0xa8>
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d00b      	beq.n	8003b52 <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8003b3a:	e073      	b.n	8003c24 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f000 fa4f 	bl	8003fe0 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003b42:	f000 fa89 	bl	8004058 <_getCalculatedSweepFrequencyInHertz>
 8003b46:	eef0 7a40 	vmov.f32	s15, s0
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <FreqSweepMenuInputHandler+0x1bc>)
 8003b4c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8003b50:	e05e      	b.n	8003c10 <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 8003b52:	4b3c      	ldr	r3, [pc, #240]	; (8003c44 <FreqSweepMenuInputHandler+0x1b0>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <FreqSweepMenuInputHandler+0xcc>
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d02a      	beq.n	8003bb4 <FreqSweepMenuInputHandler+0x120>
							break;
 8003b5e:	e056      	b.n	8003c0e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8003b60:	4b3c      	ldr	r3, [pc, #240]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b0c      	cmp	r3, #12
 8003b66:	d803      	bhi.n	8003b70 <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8003b68:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003b6a:	220d      	movs	r2, #13
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003b6e:	e04e      	b.n	8003c0e <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8003b70:	4b38      	ldr	r3, [pc, #224]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <FreqSweepMenuInputHandler+0x1c4>)
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8a:	dd09      	ble.n	8003ba0 <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8003b8c:	4b32      	ldr	r3, [pc, #200]	; (8003c58 <FreqSweepMenuInputHandler+0x1c4>)
 8003b8e:	edd3 7a00 	vldr	s15, [r3]
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b98:	ee17 2a90 	vmov	r2, s15
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003b9e:	e036      	b.n	8003c0e <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8003ba0:	4b2c      	ldr	r3, [pc, #176]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bac:	4b2b      	ldr	r3, [pc, #172]	; (8003c5c <FreqSweepMenuInputHandler+0x1c8>)
 8003bae:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003bb2:	e02c      	b.n	8003c0e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8003bb4:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d904      	bls.n	8003bca <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003bc8:	e020      	b.n	8003c0c <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bd6:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <FreqSweepMenuInputHandler+0x1c8>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be4:	d509      	bpl.n	8003bfa <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <FreqSweepMenuInputHandler+0x1c8>)
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf2:	ee17 2a90 	vmov	r2, s15
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003bf8:	e008      	b.n	8003c0c <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <FreqSweepMenuInputHandler+0x1c0>)
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <FreqSweepMenuInputHandler+0x1c4>)
 8003c08:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003c0c:	bf00      	nop
					break;
 8003c0e:	bf00      	nop
			break;
 8003c10:	e008      	b.n	8003c24 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003c12:	2000      	movs	r0, #0
 8003c14:	f000 f984 	bl	8003f20 <_setEncoderControlMode>

			break;
 8003c18:	e004      	b.n	8003c24 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f000 f980 	bl	8003f20 <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8003c20:	e000      	b.n	8003c24 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 8003c22:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <FreqSweepMenuInputHandler+0x1cc>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003c2a:	230d      	movs	r3, #13
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	0801251c 	.word	0x0801251c
 8003c38:	08012548 	.word	0x08012548
 8003c3c:	40000c00 	.word	0x40000c00
 8003c40:	08012560 	.word	0x08012560
 8003c44:	20001a14 	.word	0x20001a14
 8003c48:	20001a15 	.word	0x20001a15
 8003c4c:	08012578 	.word	0x08012578
 8003c50:	20001a30 	.word	0x20001a30
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	20000004 	.word	0x20000004
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	20001a13 	.word	0x20001a13

08003c64 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8003c68:	480c      	ldr	r0, [pc, #48]	; (8003c9c <FreqSweepMenuExitHandler+0x38>)
 8003c6a:	f00b f93f 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 8003c6e:	f7fd fac1 	bl	80011f4 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <FreqSweepMenuExitHandler+0x3c>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <FreqSweepMenuExitHandler+0x3c>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <FreqSweepMenuExitHandler+0x3c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <FreqSweepMenuExitHandler+0x3c>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <FreqSweepMenuExitHandler+0x40>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <FreqSweepMenuExitHandler+0x44>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003c96:	230a      	movs	r3, #10
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	08012590 	.word	0x08012590
 8003ca0:	40000c00 	.word	0x40000c00
 8003ca4:	20001a16 	.word	0x20001a16
 8003ca8:	20001a13 	.word	0x20001a13

08003cac <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8003cb0:	4806      	ldr	r0, [pc, #24]	; (8003ccc <FreqMainMenuEntryHandler+0x20>)
 8003cb2:	f00b f91b 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 8003cb6:	f7fd fa9d 	bl	80011f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <FreqMainMenuEntryHandler+0x24>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <FreqMainMenuEntryHandler+0x28>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003cc6:	230a      	movs	r3, #10
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	080125b8 	.word	0x080125b8
 8003cd0:	20001a16 	.word	0x20001a16
 8003cd4:	20001a13 	.word	0x20001a13

08003cd8 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 8003cdc:	480a      	ldr	r0, [pc, #40]	; (8003d08 <FreqMainMenuExitHandler+0x30>)
 8003cde:	f00b f905 	bl	800eeec <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <FreqMainMenuExitHandler+0x34>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <FreqMainMenuExitHandler+0x38>)
 8003cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003cf0:	f7fd fa80 	bl	80011f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003cf4:	4807      	ldr	r0, [pc, #28]	; (8003d14 <FreqMainMenuExitHandler+0x3c>)
 8003cf6:	f00b f8f9 	bl	800eeec <puts>
	#endif

	eNewEvent = evIdle;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <FreqMainMenuExitHandler+0x40>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	08012608 	.word	0x08012608
 8003d0c:	20001a16 	.word	0x20001a16
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	08012630 	.word	0x08012630
 8003d18:	20001a13 	.word	0x20001a13

08003d1c <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8003d22:	4812      	ldr	r0, [pc, #72]	; (8003d6c <FreqPresetMenuEntryHandler+0x50>)
 8003d24:	f00b f8e2 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 8003d28:	f7fd fa64 	bl	80011f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8003d2c:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <FreqPresetMenuEntryHandler+0x54>)
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003d32:	f000 ffb1 	bl	8004c98 <FreqO_GetFPresetObject>
 8003d36:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	791a      	ldrb	r2, [r3, #4]
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <FreqPresetMenuEntryHandler+0x58>)
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003d46:	f000 ffd9 	bl	8004cfc <FreqO_GetFreqPresetEncoderRange>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <FreqPresetMenuEntryHandler+0x58>)
 8003d50:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d52:	e002      	b.n	8003d5a <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003d54:	4808      	ldr	r0, [pc, #32]	; (8003d78 <FreqPresetMenuEntryHandler+0x5c>)
 8003d56:	f7fd fa93 	bl	8001280 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <FreqPresetMenuEntryHandler+0x60>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003d60:	230b      	movs	r3, #11
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08012648 	.word	0x08012648
 8003d70:	20001a16 	.word	0x20001a16
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	08012674 	.word	0x08012674
 8003d7c:	20001a13 	.word	0x20001a13

08003d80 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8003d84:	4807      	ldr	r0, [pc, #28]	; (8003da4 <FreqPresetMenuInputHandler+0x24>)
 8003d86:	f00b f8b1 	bl	800eeec <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	f001 fb1a 	bl	80053c4 <SM_GetEncoderValue>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fe8e 	bl	8004ab4 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <FreqPresetMenuInputHandler+0x28>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003d9e:	230b      	movs	r3, #11
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	080126b0 	.word	0x080126b0
 8003da8:	20001a13 	.word	0x20001a13

08003dac <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8003db0:	4806      	ldr	r0, [pc, #24]	; (8003dcc <FreqPresetMenuExitHandler+0x20>)
 8003db2:	f00b f89b 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 8003db6:	f7fd fa1d 	bl	80011f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <FreqPresetMenuExitHandler+0x24>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <FreqPresetMenuExitHandler+0x28>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003dc6:	230a      	movs	r3, #10
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	080126dc 	.word	0x080126dc
 8003dd0:	20001a16 	.word	0x20001a16
 8003dd4:	20001a13 	.word	0x20001a13

08003dd8 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8003ddc:	480a      	ldr	r0, [pc, #40]	; (8003e08 <FreqAdjustMenuEntryHandler+0x30>)
 8003dde:	f00b f885 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 8003de2:	f7fd fa07 	bl	80011f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <FreqAdjustMenuEntryHandler+0x34>)
 8003de8:	2203      	movs	r2, #3
 8003dea:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <FreqAdjustMenuEntryHandler+0x38>)
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <FreqAdjustMenuEntryHandler+0x3c>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8003df4:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <FreqAdjustMenuEntryHandler+0x3c>)
 8003df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <FreqAdjustMenuEntryHandler+0x40>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003e02:	230c      	movs	r3, #12
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	08012708 	.word	0x08012708
 8003e0c:	20001a16 	.word	0x20001a16
 8003e10:	40013400 	.word	0x40013400
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	20001a13 	.word	0x20001a13

08003e1c <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003e20:	4805      	ldr	r0, [pc, #20]	; (8003e38 <FreqAdjustMenuInputHandler+0x1c>)
 8003e22:	f00b f863 	bl	800eeec <puts>
	#endif

	FreqO_AdjustFreq();
 8003e26:	f000 fe37 	bl	8004a98 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <FreqAdjustMenuInputHandler+0x20>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003e30:	230c      	movs	r3, #12
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	0801251c 	.word	0x0801251c
 8003e3c:	20001a13 	.word	0x20001a13

08003e40 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8003e44:	4806      	ldr	r0, [pc, #24]	; (8003e60 <FreqAdjustMenuExitHandler+0x20>)
 8003e46:	f00b f851 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 8003e4a:	f7fd f9d3 	bl	80011f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <FreqAdjustMenuExitHandler+0x24>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <FreqAdjustMenuExitHandler+0x28>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003e5a:	230a      	movs	r3, #10
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	08012734 	.word	0x08012734
 8003e64:	20001a16 	.word	0x20001a16
 8003e68:	20001a13 	.word	0x20001a13

08003e6c <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <_setSweepModeDown+0x48>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <_setSweepModeDown+0x48>)
 8003e76:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003e7a:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <_setSweepModeDown+0x48>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <_setSweepModeDown+0x48>)
 8003e82:	f043 0310 	orr.w	r3, r3, #16
 8003e86:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <_setSweepModeDown+0x4c>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <_setSweepModeDown+0x50>)
 8003e96:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <_setSweepModeDown+0x54>)
 8003e9c:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <_setSweepModeDown+0x58>)
 8003e9e:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8003ea0:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <_setSweepModeDown+0x5c>)
 8003ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40000c00 	.word	0x40000c00
 8003eb8:	40013400 	.word	0x40013400
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	20000004 	.word	0x20000004
 8003ec4:	477fff00 	.word	0x477fff00
 8003ec8:	40012c00 	.word	0x40012c00

08003ecc <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <_setSweepModeUp+0x40>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <_setSweepModeUp+0x40>)
 8003ed6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003eda:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <_setSweepModeUp+0x40>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <_setSweepModeUp+0x40>)
 8003ee2:	f023 0310 	bic.w	r3, r3, #16
 8003ee6:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <_setSweepModeUp+0x44>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <_setSweepModeUp+0x48>)
 8003ef6:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <_setSweepModeUp+0x4c>)
 8003efc:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <_setSweepModeUp+0x50>)
 8003efe:	601a      	str	r2, [r3, #0]


}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	20000004 	.word	0x20000004
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	41500000 	.word	0x41500000

08003f20 <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d038      	beq.n	8003fa2 <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8003f30:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <_setEncoderControlMode+0xa4>)
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <_setEncoderControlMode+0xa8>)
 8003f38:	220d      	movs	r2, #13
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8003f3c:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <_setEncoderControlMode+0xa8>)
 8003f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8003f44:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <_setEncoderControlMode+0xac>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <_setEncoderControlMode+0x32>
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d014      	beq.n	8003f7a <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8003f50:	e031      	b.n	8003fb6 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <_setEncoderControlMode+0xa8>)
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <_setEncoderControlMode+0xb0>)
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6c:	dc00      	bgt.n	8003f70 <_setEncoderControlMode+0x50>
				break;
 8003f6e:	e022      	b.n	8003fb6 <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003f70:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <_setEncoderControlMode+0xb4>)
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <_setEncoderControlMode+0xa8>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8003f78:	e01d      	b.n	8003fb6 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <_setEncoderControlMode+0xa8>)
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <_setEncoderControlMode+0xb8>)
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f94:	d400      	bmi.n	8003f98 <_setEncoderControlMode+0x78>
				break;
 8003f96:	e00e      	b.n	8003fb6 <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <_setEncoderControlMode+0xb4>)
 8003f9a:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <_setEncoderControlMode+0xa8>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8003fa0:	e009      	b.n	8003fb6 <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <_setEncoderControlMode+0xa4>)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <_setEncoderControlMode+0xa8>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8003fae:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <_setEncoderControlMode+0xa8>)
 8003fb0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003fb4:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20001a15 	.word	0x20001a15
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	20001a14 	.word	0x20001a14
 8003fd0:	20000004 	.word	0x20000004
 8003fd4:	40013400 	.word	0x40013400
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	00000000 	.word	0x00000000

08003fe0 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d122      	bne.n	8004036 <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8003ff0:	4b17      	ldr	r3, [pc, #92]	; (8004050 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc faad 	bl	8000554 <__aeabi_ui2d>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004040 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 8004002:	ec44 3b10 	vmov	d0, r3, r4
 8004006:	f00c fecb 	bl	8010da0 <pow>
 800400a:	ec51 0b10 	vmov	r0, r1, d0
 800400e:	a30e      	add	r3, pc, #56	; (adr r3, 8004048 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f7fc f962 	bl	80002dc <__adddf3>
 8004018:	4603      	mov	r3, r0
 800401a:	460c      	mov	r4, r1
 800401c:	4618      	mov	r0, r3
 800401e:	4621      	mov	r1, r4
 8004020:	f7fc fdea 	bl	8000bf8 <__aeabi_d2uiz>
 8004024:	4603      	mov	r3, r0
 8004026:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402e:	d002      	beq.n	8004036 <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004030:	4a08      	ldr	r2, [pc, #32]	; (8004054 <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bd90      	pop	{r4, r7, pc}
 800403e:	bf00      	nop
 8004040:	00000000 	.word	0x00000000
 8004044:	40080000 	.word	0x40080000
 8004048:	00000000 	.word	0x00000000
 800404c:	40d06800 	.word	0x40d06800
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40000c00 	.word	0x40000c00

08004058 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <_getCalculatedSweepFrequencyInHertz+0x54>)
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004070:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80040b0 <_getCalculatedSweepFrequencyInHertz+0x58>
 8004074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004078:	e011      	b.n	800409e <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <_getCalculatedSweepFrequencyInHertz+0x54>)
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004096:	eddf 6a06 	vldr	s13, [pc, #24]	; 80040b0 <_getCalculatedSweepFrequencyInHertz+0x58>
 800409a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 800409e:	eeb0 0a67 	vmov.f32	s0, s15
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40000c00 	.word	0x40000c00
 80040b0:	4d2037a0 	.word	0x4d2037a0

080040b4 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <FreqMenu_getStatus+0x14>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20001a16 	.word	0x20001a16

080040cc <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <FuncMenu_getStatus+0x14>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20001a17 	.word	0x20001a17

080040e4 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 80040e8:	4806      	ldr	r0, [pc, #24]	; (8004104 <FuncMainMenuEntryHandler+0x20>)
 80040ea:	f00a feff 	bl	800eeec <puts>
#endif

	DM_RefreshScreen();
 80040ee:	f7fd f881 	bl	80011f4 <DM_RefreshScreen>


	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <FuncMainMenuEntryHandler+0x24>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <FuncMainMenuEntryHandler+0x28>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80040fe:	2303      	movs	r3, #3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	08012760 	.word	0x08012760
 8004108:	20001a17 	.word	0x20001a17
 800410c:	20001a13 	.word	0x20001a13

08004110 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 8004114:	4808      	ldr	r0, [pc, #32]	; (8004138 <FuncMainMenuExitHandler+0x28>)
 8004116:	f00a fee9 	bl	800eeec <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <FuncMainMenuExitHandler+0x2c>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004120:	f7fd f868 	bl	80011f4 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004124:	4806      	ldr	r0, [pc, #24]	; (8004140 <FuncMainMenuExitHandler+0x30>)
 8004126:	f00a fee1 	bl	800eeec <puts>
#endif

	eNewEvent = evIdle;
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <FuncMainMenuExitHandler+0x34>)
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004130:	2301      	movs	r3, #1
}
 8004132:	4618      	mov	r0, r3
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	080127b0 	.word	0x080127b0
 800413c:	20001a17 	.word	0x20001a17
 8004140:	080127d8 	.word	0x080127d8
 8004144:	20001a13 	.word	0x20001a13

08004148 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 800414e:	4814      	ldr	r0, [pc, #80]	; (80041a0 <FuncSignalMenuEntryHandler+0x58>)
 8004150:	f00a fecc 	bl	800eeec <puts>
#endif

	DM_RefreshScreen();
 8004154:	f7fd f84e 	bl	80011f4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004158:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <FuncSignalMenuEntryHandler+0x5c>)
 800415a:	2202      	movs	r2, #2
 800415c:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 800415e:	2000      	movs	r0, #0
 8004160:	f001 f91a 	bl	8005398 <SM_GetOutputChannel>
 8004164:	4603      	mov	r3, r0
 8004166:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800416a:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	785a      	ldrb	r2, [r3, #1]
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <FuncSignalMenuEntryHandler+0x60>)
 8004178:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 800417a:	f000 ff3d 	bl	8004ff8 <FuncO_GetFuncPresetEncoderRange>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <FuncSignalMenuEntryHandler+0x60>)
 8004184:	62da      	str	r2, [r3, #44]	; 0x2c
 8004186:	e002      	b.n	800418e <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004188:	4808      	ldr	r0, [pc, #32]	; (80041ac <FuncSignalMenuEntryHandler+0x64>)
 800418a:	f7fd f879 	bl	8001280 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800418e:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <FuncSignalMenuEntryHandler+0x68>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004194:	2304      	movs	r3, #4
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	080127f0 	.word	0x080127f0
 80041a4:	20001a17 	.word	0x20001a17
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	0801281c 	.word	0x0801281c
 80041b0:	20001a13 	.word	0x20001a13

080041b4 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 80041b8:	4807      	ldr	r0, [pc, #28]	; (80041d8 <FuncSignalMenuInputHandler+0x24>)
 80041ba:	f00a fe97 	bl	800eeec <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80041be:	2001      	movs	r0, #1
 80041c0:	f001 f900 	bl	80053c4 <SM_GetEncoderValue>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fdac 	bl	8004d24 <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <FuncSignalMenuInputHandler+0x28>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80041d2:	2304      	movs	r3, #4
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	08012850 	.word	0x08012850
 80041dc:	20001a13 	.word	0x20001a13

080041e0 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 80041e4:	4806      	ldr	r0, [pc, #24]	; (8004200 <FuncSignalMenuExitHandler+0x20>)
 80041e6:	f00a fe81 	bl	800eeec <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <FuncSignalMenuExitHandler+0x24>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80041f0:	f7fd f800 	bl	80011f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <FuncSignalMenuExitHandler+0x28>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80041fa:	2303      	movs	r3, #3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	0801287c 	.word	0x0801287c
 8004204:	20001a17 	.word	0x20001a17
 8004208:	20001a13 	.word	0x20001a13

0800420c <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 8004212:	4814      	ldr	r0, [pc, #80]	; (8004264 <FuncSyncMenuEntryHandler+0x58>)
 8004214:	f00a fe6a 	bl	800eeec <puts>
#endif

	DM_RefreshScreen();
 8004218:	f7fc ffec 	bl	80011f4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 800421c:	4b12      	ldr	r3, [pc, #72]	; (8004268 <FuncSyncMenuEntryHandler+0x5c>)
 800421e:	2203      	movs	r2, #3
 8004220:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8004222:	2001      	movs	r0, #1
 8004224:	f001 f8b8 	bl	8005398 <SM_GetOutputChannel>
 8004228:	4603      	mov	r3, r0
 800422a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800422e:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	785a      	ldrb	r2, [r3, #1]
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <FuncSyncMenuEntryHandler+0x60>)
 800423c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 800423e:	f000 fedb 	bl	8004ff8 <FuncO_GetFuncPresetEncoderRange>
 8004242:	4603      	mov	r3, r0
 8004244:	461a      	mov	r2, r3
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <FuncSyncMenuEntryHandler+0x60>)
 8004248:	62da      	str	r2, [r3, #44]	; 0x2c
 800424a:	e002      	b.n	8004252 <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 800424c:	4808      	ldr	r0, [pc, #32]	; (8004270 <FuncSyncMenuEntryHandler+0x64>)
 800424e:	f7fd f817 	bl	8001280 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <FuncSyncMenuEntryHandler+0x68>)
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004258:	2305      	movs	r3, #5
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	080128a8 	.word	0x080128a8
 8004268:	20001a17 	.word	0x20001a17
 800426c:	40012c00 	.word	0x40012c00
 8004270:	0801281c 	.word	0x0801281c
 8004274:	20001a13 	.word	0x20001a13

08004278 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 800427c:	4807      	ldr	r0, [pc, #28]	; (800429c <FuncSyncMenuInputHandler+0x24>)
 800427e:	f00a fe35 	bl	800eeec <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004282:	2001      	movs	r0, #1
 8004284:	f001 f89e 	bl	80053c4 <SM_GetEncoderValue>
 8004288:	4603      	mov	r3, r0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fda2 	bl	8004dd4 <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <FuncSyncMenuInputHandler+0x28>)
 8004292:	2201      	movs	r2, #1
 8004294:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004296:	2305      	movs	r3, #5
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	080128d0 	.word	0x080128d0
 80042a0:	20001a13 	.word	0x20001a13

080042a4 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 80042a8:	4806      	ldr	r0, [pc, #24]	; (80042c4 <FuncSyncMenuExitHandler+0x20>)
 80042aa:	f00a fe1f 	bl	800eeec <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <FuncSyncMenuExitHandler+0x24>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80042b4:	f7fc ff9e 	bl	80011f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <FuncSyncMenuExitHandler+0x28>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80042be:	2303      	movs	r3, #3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	080128f8 	.word	0x080128f8
 80042c8:	20001a17 	.word	0x20001a17
 80042cc:	20001a13 	.word	0x20001a13

080042d0 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <GainMenu_getStatus+0x14>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20001a18 	.word	0x20001a18

080042e8 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 80042ec:	4806      	ldr	r0, [pc, #24]	; (8004308 <GainMainMenuEntryHandler+0x20>)
 80042ee:	f00a fdfd 	bl	800eeec <puts>
#endif

	DM_RefreshScreen();
 80042f2:	f7fc ff7f 	bl	80011f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <GainMainMenuEntryHandler+0x24>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <GainMainMenuEntryHandler+0x28>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004302:	2306      	movs	r3, #6
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	08012920 	.word	0x08012920
 800430c:	20001a18 	.word	0x20001a18
 8004310:	20001a13 	.word	0x20001a13

08004314 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 8004318:	4808      	ldr	r0, [pc, #32]	; (800433c <GainMainMenuExitHandler+0x28>)
 800431a:	f00a fde7 	bl	800eeec <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <GainMainMenuExitHandler+0x2c>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004324:	f7fc ff66 	bl	80011f4 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004328:	4806      	ldr	r0, [pc, #24]	; (8004344 <GainMainMenuExitHandler+0x30>)
 800432a:	f00a fddf 	bl	800eeec <puts>
#endif

	eNewEvent = evIdle;
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <GainMainMenuExitHandler+0x34>)
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004334:	2301      	movs	r3, #1
}
 8004336:	4618      	mov	r0, r3
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	08012970 	.word	0x08012970
 8004340:	20001a18 	.word	0x20001a18
 8004344:	08012998 	.word	0x08012998
 8004348:	20001a13 	.word	0x20001a13

0800434c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 8004352:	4813      	ldr	r0, [pc, #76]	; (80043a0 <GainSignalMenuEntryHandler+0x54>)
 8004354:	f00a fdca 	bl	800eeec <puts>
#endif

	DM_RefreshScreen();
 8004358:	f7fc ff4c 	bl	80011f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <GainSignalMenuEntryHandler+0x58>)
 800435e:	2202      	movs	r2, #2
 8004360:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004362:	2000      	movs	r0, #0
 8004364:	f001 f818 	bl	8005398 <SM_GetOutputChannel>
 8004368:	4603      	mov	r3, r0
 800436a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800436e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8b1a      	ldrh	r2, [r3, #24]
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <GainSignalMenuEntryHandler+0x5c>)
 800437c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <GainSignalMenuEntryHandler+0x5c>)
 8004380:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004384:	62da      	str	r2, [r3, #44]	; 0x2c
 8004386:	e002      	b.n	800438e <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004388:	4808      	ldr	r0, [pc, #32]	; (80043ac <GainSignalMenuEntryHandler+0x60>)
 800438a:	f7fc ff79 	bl	8001280 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <GainSignalMenuEntryHandler+0x64>)
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004394:	2307      	movs	r3, #7
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	080129b0 	.word	0x080129b0
 80043a4:	20001a18 	.word	0x20001a18
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	080129dc 	.word	0x080129dc
 80043b0:	20001a13 	.word	0x20001a13

080043b4 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 80043b8:	4807      	ldr	r0, [pc, #28]	; (80043d8 <GainSignalMenuInputHandler+0x24>)
 80043ba:	f00a fd97 	bl	800eeec <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80043be:	2001      	movs	r0, #1
 80043c0:	f001 f800 	bl	80053c4 <SM_GetEncoderValue>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 f9da 	bl	8005780 <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <GainSignalMenuInputHandler+0x28>)
 80043ce:	2203      	movs	r2, #3
 80043d0:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80043d2:	2307      	movs	r3, #7
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	08012a14 	.word	0x08012a14
 80043dc:	20001a13 	.word	0x20001a13

080043e0 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 80043e4:	4806      	ldr	r0, [pc, #24]	; (8004400 <GainSignalMenuExitHandler+0x20>)
 80043e6:	f00a fd81 	bl	800eeec <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <GainSignalMenuExitHandler+0x24>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80043f0:	f7fc ff00 	bl	80011f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <GainSignalMenuExitHandler+0x28>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80043fa:	2306      	movs	r3, #6
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	08012a40 	.word	0x08012a40
 8004404:	20001a18 	.word	0x20001a18
 8004408:	20001a13 	.word	0x20001a13

0800440c <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 8004412:	4813      	ldr	r0, [pc, #76]	; (8004460 <GainSyncMenuEntryHandler+0x54>)
 8004414:	f00a fd6a 	bl	800eeec <puts>
#endif

	DM_RefreshScreen();
 8004418:	f7fc feec 	bl	80011f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <GainSyncMenuEntryHandler+0x58>)
 800441e:	2203      	movs	r2, #3
 8004420:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8004422:	2001      	movs	r0, #1
 8004424:	f000 ffb8 	bl	8005398 <SM_GetOutputChannel>
 8004428:	4603      	mov	r3, r0
 800442a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800442e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8b1a      	ldrh	r2, [r3, #24]
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <GainSyncMenuEntryHandler+0x5c>)
 800443c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <GainSyncMenuEntryHandler+0x5c>)
 8004440:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c
 8004446:	e002      	b.n	800444e <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004448:	4808      	ldr	r0, [pc, #32]	; (800446c <GainSyncMenuEntryHandler+0x60>)
 800444a:	f7fc ff19 	bl	8001280 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800444e:	4b08      	ldr	r3, [pc, #32]	; (8004470 <GainSyncMenuEntryHandler+0x64>)
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004454:	2308      	movs	r3, #8
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	08012a6c 	.word	0x08012a6c
 8004464:	20001a18 	.word	0x20001a18
 8004468:	40012c00 	.word	0x40012c00
 800446c:	080129dc 	.word	0x080129dc
 8004470:	20001a13 	.word	0x20001a13

08004474 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 8004478:	4807      	ldr	r0, [pc, #28]	; (8004498 <GainSyncMenuInputHandler+0x24>)
 800447a:	f00a fd37 	bl	800eeec <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800447e:	2001      	movs	r0, #1
 8004480:	f000 ffa0 	bl	80053c4 <SM_GetEncoderValue>
 8004484:	4603      	mov	r3, r0
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fe24 	bl	80060d4 <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <GainSyncMenuInputHandler+0x28>)
 800448e:	2203      	movs	r2, #3
 8004490:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004492:	2308      	movs	r3, #8
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	08012a94 	.word	0x08012a94
 800449c:	20001a13 	.word	0x20001a13

080044a0 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 80044a4:	4806      	ldr	r0, [pc, #24]	; (80044c0 <GainSyncMenuExitHandler+0x20>)
 80044a6:	f00a fd21 	bl	800eeec <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <GainSyncMenuExitHandler+0x24>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80044b0:	f7fc fea0 	bl	80011f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <GainSyncMenuExitHandler+0x28>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80044ba:	2306      	movs	r3, #6
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	08012abc 	.word	0x08012abc
 80044c4:	20001a18 	.word	0x20001a18
 80044c8:	20001a13 	.word	0x20001a13

080044cc <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <ToplevelMenu_getStatus+0x14>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000008 	.word	0x20000008

080044e4 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <ToplevelMenu_setStatus+0x1c>)
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	7013      	strb	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000008 	.word	0x20000008

08004504 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004508:	4806      	ldr	r0, [pc, #24]	; (8004524 <ToplevelOutputMenuEntryHandler+0x20>)
 800450a:	f00a fcef 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 800450e:	f7fc fe71 	bl	80011f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <ToplevelOutputMenuEntryHandler+0x24>)
 8004514:	2202      	movs	r2, #2
 8004516:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004518:	4b04      	ldr	r3, [pc, #16]	; (800452c <ToplevelOutputMenuEntryHandler+0x28>)
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800451e:	2301      	movs	r3, #1
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	08012b80 	.word	0x08012b80
 8004528:	20000008 	.word	0x20000008
 800452c:	20001a13 	.word	0x20001a13

08004530 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004534:	4806      	ldr	r0, [pc, #24]	; (8004550 <ToplevelOutputMenuExitHandler+0x20>)
 8004536:	f00a fcd9 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 800453a:	f7fc fe5b 	bl	80011f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <ToplevelOutputMenuExitHandler+0x24>)
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <ToplevelOutputMenuExitHandler+0x28>)
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	08012be0 	.word	0x08012be0
 8004554:	20000008 	.word	0x20000008
 8004558:	20001a13 	.word	0x20001a13

0800455c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004560:	4806      	ldr	r0, [pc, #24]	; (800457c <ToplevelInputMenuEntryHandler+0x20>)
 8004562:	f00a fcc3 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 8004566:	f7fc fe45 	bl	80011f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <ToplevelInputMenuEntryHandler+0x24>)
 800456c:	2203      	movs	r2, #3
 800456e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <ToplevelInputMenuEntryHandler+0x28>)
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004576:	2302      	movs	r3, #2
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	08012c10 	.word	0x08012c10
 8004580:	20000008 	.word	0x20000008
 8004584:	20001a13 	.word	0x20001a13

08004588 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 800458c:	4806      	ldr	r0, [pc, #24]	; (80045a8 <ToplevelInputMenuExitHandler+0x20>)
 800458e:	f00a fcad 	bl	800eeec <puts>
	#endif

	DM_RefreshScreen();
 8004592:	f7fc fe2f 	bl	80011f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <ToplevelInputMenuExitHandler+0x24>)
 8004598:	2201      	movs	r2, #1
 800459a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <ToplevelInputMenuExitHandler+0x28>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	08012c70 	.word	0x08012c70
 80045ac:	20000008 	.word	0x20000008
 80045b0:	20001a13 	.word	0x20001a13

080045b4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80045bc:	4b07      	ldr	r3, [pc, #28]	; (80045dc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4013      	ands	r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d101      	bne.n	80045ce <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	40010400 	.word	0x40010400

080045e0 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <IM_Init+0x1c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a04      	ldr	r2, [pc, #16]	; (80045fc <IM_Init+0x1c>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40014400 	.word	0x40014400

08004600 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004604:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b10      	cmp	r3, #16
 800460e:	d11c      	bne.n	800464a <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004610:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	ee07 3a90 	vmov	s15, r3
 8004618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800461c:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800461e:	edd3 7a00 	vldr	s15, [r3]
 8004622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462a:	db09      	blt.n	8004640 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 800462c:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800462e:	edd3 7a00 	vldr	s15, [r3]
 8004632:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004638:	ee17 2a90 	vmov	r2, s15
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 800463e:	e029      	b.n	8004694 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004640:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	3201      	adds	r2, #1
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004648:	e024      	b.n	8004694 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 800464a:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d104      	bne.n	800465c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800465a:	e01b      	b.n	8004694 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004668:	4b10      	ldr	r3, [pc, #64]	; (80046ac <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800466a:	edd3 7a00 	vldr	s15, [r3]
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	d809      	bhi.n	800468c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800467a:	edd3 7a00 	vldr	s15, [r3]
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004684:	ee17 2a90 	vmov	r2, s15
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800468a:	e003      	b.n	8004694 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	3a01      	subs	r2, #1
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40000c00 	.word	0x40000c00
 80046a4:	40013400 	.word	0x40013400
 80046a8:	20000004 	.word	0x20000004
 80046ac:	20000000 	.word	0x20000000

080046b0 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80046b6:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <IM_BTN1_EXTI14_Handler+0x44>)
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <IM_BTN1_EXTI14_Handler+0x48>)
 80046c0:	8812      	ldrh	r2, [r2, #0]
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c8:	dd0c      	ble.n	80046e4 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 80046ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80046ce:	f7ff ff71 	bl	80045b4 <LL_EXTI_IsActiveFlag_0_31>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 80046d8:	2001      	movs	r0, #1
 80046da:	f7ff f96f 	bl	80039bc <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 80046de:	4807      	ldr	r0, [pc, #28]	; (80046fc <IM_BTN1_EXTI14_Handler+0x4c>)
 80046e0:	f00a fc04 	bl	800eeec <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 80046e4:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <IM_BTN1_EXTI14_Handler+0x48>)
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	8013      	strh	r3, [r2, #0]


}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40014400 	.word	0x40014400
 80046f8:	20001a1a 	.word	0x20001a1a
 80046fc:	08012c9c 	.word	0x08012c9c

08004700 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <IM_BTN2_EXTI15_Handler+0x44>)
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <IM_BTN2_EXTI15_Handler+0x48>)
 8004710:	8812      	ldrh	r2, [r2, #0]
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004718:	dd0c      	ble.n	8004734 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 800471a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800471e:	f7ff ff49 	bl	80045b4 <LL_EXTI_IsActiveFlag_0_31>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004728:	2003      	movs	r0, #3
 800472a:	f7ff f947 	bl	80039bc <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 800472e:	4807      	ldr	r0, [pc, #28]	; (800474c <IM_BTN2_EXTI15_Handler+0x4c>)
 8004730:	f00a fbdc 	bl	800eeec <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <IM_BTN2_EXTI15_Handler+0x48>)
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	8013      	strh	r3, [r2, #0]


}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40014400 	.word	0x40014400
 8004748:	20001a1c 	.word	0x20001a1c
 800474c:	08012cb4 	.word	0x08012cb4

08004750 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004756:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <IM_BTN3_EXTI0_Handler+0x40>)
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	4a0d      	ldr	r2, [pc, #52]	; (8004794 <IM_BTN3_EXTI0_Handler+0x44>)
 8004760:	8812      	ldrh	r2, [r2, #0]
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004768:	dd0b      	ble.n	8004782 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800476a:	2001      	movs	r0, #1
 800476c:	f7ff ff22 	bl	80045b4 <LL_EXTI_IsActiveFlag_0_31>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004776:	2004      	movs	r0, #4
 8004778:	f7ff f920 	bl	80039bc <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 800477c:	4806      	ldr	r0, [pc, #24]	; (8004798 <IM_BTN3_EXTI0_Handler+0x48>)
 800477e:	f00a fbb5 	bl	800eeec <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004782:	4a04      	ldr	r2, [pc, #16]	; (8004794 <IM_BTN3_EXTI0_Handler+0x44>)
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	8013      	strh	r3, [r2, #0]


}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40014400 	.word	0x40014400
 8004794:	20001a1e 	.word	0x20001a1e
 8004798:	08012cd0 	.word	0x08012cd0

0800479c <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <IM_BTN4_EXTI1_Handler+0x40>)
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	4a0d      	ldr	r2, [pc, #52]	; (80047e0 <IM_BTN4_EXTI1_Handler+0x44>)
 80047ac:	8812      	ldrh	r2, [r2, #0]
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b4:	dd0b      	ble.n	80047ce <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 80047b6:	2002      	movs	r0, #2
 80047b8:	f7ff fefc 	bl	80045b4 <LL_EXTI_IsActiveFlag_0_31>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 80047c2:	2002      	movs	r0, #2
 80047c4:	f7ff f8fa 	bl	80039bc <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 80047c8:	4806      	ldr	r0, [pc, #24]	; (80047e4 <IM_BTN4_EXTI1_Handler+0x48>)
 80047ca:	f00a fb8f 	bl	800eeec <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 80047ce:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <IM_BTN4_EXTI1_Handler+0x44>)
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	8013      	strh	r3, [r2, #0]


}
 80047d4:	bf00      	nop
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40014400 	.word	0x40014400
 80047e0:	20001a20 	.word	0x20001a20
 80047e4:	08012ce8 	.word	0x08012ce8

080047e8 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80047ee:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <IM_ENC_EXTI2_Handler+0x40>)
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	4a0d      	ldr	r2, [pc, #52]	; (800482c <IM_ENC_EXTI2_Handler+0x44>)
 80047f8:	8812      	ldrh	r2, [r2, #0]
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004800:	dd0b      	ble.n	800481a <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004802:	2004      	movs	r0, #4
 8004804:	f7ff fed6 	bl	80045b4 <LL_EXTI_IsActiveFlag_0_31>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 800480e:	2006      	movs	r0, #6
 8004810:	f7ff f8d4 	bl	80039bc <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004814:	4806      	ldr	r0, [pc, #24]	; (8004830 <IM_ENC_EXTI2_Handler+0x48>)
 8004816:	f00a fb69 	bl	800eeec <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 800481a:	4a04      	ldr	r2, [pc, #16]	; (800482c <IM_ENC_EXTI2_Handler+0x44>)
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	8013      	strh	r3, [r2, #0]


}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40014400 	.word	0x40014400
 800482c:	20001a22 	.word	0x20001a22
 8004830:	08012d00 	.word	0x08012d00

08004834 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004838:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <IM_ENC_DIRF_Handler+0x30>)
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004844:	d10b      	bne.n	800485e <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8004846:	2005      	movs	r0, #5
 8004848:	f7ff f8b8 	bl	80039bc <EM_SetNewEvent>
		printf("Encoder new direction\n");
 800484c:	4806      	ldr	r0, [pc, #24]	; (8004868 <IM_ENC_DIRF_Handler+0x34>)
 800484e:	f00a fb4d 	bl	800eeec <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004852:	4b04      	ldr	r3, [pc, #16]	; (8004864 <IM_ENC_DIRF_Handler+0x30>)
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	4a03      	ldr	r2, [pc, #12]	; (8004864 <IM_ENC_DIRF_Handler+0x30>)
 8004858:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800485c:	6113      	str	r3, [r2, #16]

	}
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40012c00 	.word	0x40012c00
 8004868:	08012d1c 	.word	0x08012d1c

0800486c <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <BO_GetBiasPolarity+0x14>)
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000009 	.word	0x20000009

08004884 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <BO_GetDcBiasEncoderValue+0x14>)
 800488a:	881b      	ldrh	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	2000000a 	.word	0x2000000a

0800489c <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80048a6:	2000      	movs	r0, #0
 80048a8:	f000 fd8c 	bl	80053c4 <SM_GetEncoderValue>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <BO_ModifyOutput+0x84>)
 80048b2:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80048ba:	d214      	bcs.n	80048e6 <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <BO_ModifyOutput+0x88>)
 80048be:	2200      	movs	r2, #0
 80048c0:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80048d0:	2200      	movs	r2, #0
 80048d2:	2110      	movs	r1, #16
 80048d4:	4814      	ldr	r0, [pc, #80]	; (8004928 <BO_ModifyOutput+0x8c>)
 80048d6:	f005 fbeb 	bl	800a0b0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80048da:	2201      	movs	r2, #1
 80048dc:	2108      	movs	r1, #8
 80048de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048e2:	f006 fac5 	bl	800ae70 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80048e6:	88fb      	ldrh	r3, [r7, #6]
 80048e8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80048ec:	d314      	bcc.n	8004918 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <BO_ModifyOutput+0x88>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004902:	2200      	movs	r2, #0
 8004904:	2110      	movs	r1, #16
 8004906:	4808      	ldr	r0, [pc, #32]	; (8004928 <BO_ModifyOutput+0x8c>)
 8004908:	f005 fbd2 	bl	800a0b0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800490c:	2200      	movs	r2, #0
 800490e:	2108      	movs	r1, #8
 8004910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004914:	f006 faac 	bl	800ae70 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	2000000a 	.word	0x2000000a
 8004924:	20000009 	.word	0x20000009
 8004928:	20002110 	.word	0x20002110

0800492c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004930:	2110      	movs	r1, #16
 8004932:	4803      	ldr	r0, [pc, #12]	; (8004940 <BO_GetOutputBias+0x14>)
 8004934:	f005 fc02 	bl	800a13c <HAL_DAC_GetValue>
 8004938:	4603      	mov	r3, r0
}
 800493a:	4618      	mov	r0, r3
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20002110 	.word	0x20002110

08004944 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	e06b      	b.n	8004a28 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004950:	493a      	ldr	r1, [pc, #232]	; (8004a3c <DT_InitRegister+0xf8>)
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	3308      	adds	r3, #8
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d129      	bne.n	80049ba <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8004966:	4935      	ldr	r1, [pc, #212]	; (8004a3c <DT_InitRegister+0xf8>)
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	3304      	adds	r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a31      	ldr	r2, [pc, #196]	; (8004a40 <DT_InitRegister+0xfc>)
 800497a:	fbb2 f3f3 	udiv	r3, r2, r3
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004986:	492d      	ldr	r1, [pc, #180]	; (8004a3c <DT_InitRegister+0xf8>)
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	3310      	adds	r3, #16
 8004996:	edd3 7a00 	vldr	s15, [r3]
 800499a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a2:	ee17 0a90 	vmov	r0, s15
 80049a6:	4925      	ldr	r1, [pc, #148]	; (8004a3c <DT_InitRegister+0xf8>)
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	330c      	adds	r3, #12
 80049b6:	6018      	str	r0, [r3, #0]
 80049b8:	e033      	b.n	8004a22 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 80049ba:	4920      	ldr	r1, [pc, #128]	; (8004a3c <DT_InitRegister+0xf8>)
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3304      	adds	r3, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <DT_InitRegister+0xfc>)
 80049ce:	fbb2 f1f3 	udiv	r1, r2, r3
 80049d2:	481a      	ldr	r0, [pc, #104]	; (8004a3c <DT_InitRegister+0xf8>)
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4403      	add	r3, r0
 80049e0:	3308      	adds	r3, #8
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049f0:	4912      	ldr	r1, [pc, #72]	; (8004a3c <DT_InitRegister+0xf8>)
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	3310      	adds	r3, #16
 8004a00:	edd3 7a00 	vldr	s15, [r3]
 8004a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a0c:	ee17 0a90 	vmov	r0, s15
 8004a10:	490a      	ldr	r1, [pc, #40]	; (8004a3c <DT_InitRegister+0xf8>)
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	330c      	adds	r3, #12
 8004a20:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3301      	adds	r3, #1
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b0d      	cmp	r3, #13
 8004a2c:	dd90      	ble.n	8004950 <DT_InitRegister+0xc>
	}
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	2000000c 	.word	0x2000000c
 8004a40:	00155cc0 	.word	0x00155cc0

08004a44 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e016      	b.n	8004a80 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8004a52:	4910      	ldr	r1, [pc, #64]	; (8004a94 <DT_GetRegisterByEnum+0x50>)
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3304      	adds	r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d107      	bne.n	8004a7a <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4a07      	ldr	r2, [pc, #28]	; (8004a94 <DT_GetRegisterByEnum+0x50>)
 8004a76:	4413      	add	r3, r2
 8004a78:	e006      	b.n	8004a88 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b0d      	cmp	r3, #13
 8004a84:	dde5      	ble.n	8004a52 <DT_GetRegisterByEnum+0xe>

	return 0;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	2000000c 	.word	0x2000000c

08004a98 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	f000 fc91 	bl	80053c4 <SM_GetEncoderValue>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b02      	ldr	r3, [pc, #8]	; (8004ab0 <FreqO_AdjustFreq+0x18>)
 8004aa8:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40013400 	.word	0x40013400

08004ab4 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	2b38      	cmp	r3, #56	; 0x38
 8004ac2:	f200 80b4 	bhi.w	8004c2e <FreqO_ModifyOutput+0x17a>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <FreqO_ModifyOutput+0x18>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004bb1 	.word	0x08004bb1
 8004ad0:	08004bb1 	.word	0x08004bb1
 8004ad4:	08004bb1 	.word	0x08004bb1
 8004ad8:	08004bb1 	.word	0x08004bb1
 8004adc:	08004bb9 	.word	0x08004bb9
 8004ae0:	08004bb9 	.word	0x08004bb9
 8004ae4:	08004bb9 	.word	0x08004bb9
 8004ae8:	08004bb9 	.word	0x08004bb9
 8004aec:	08004bc1 	.word	0x08004bc1
 8004af0:	08004bc1 	.word	0x08004bc1
 8004af4:	08004bc1 	.word	0x08004bc1
 8004af8:	08004bc1 	.word	0x08004bc1
 8004afc:	08004bc9 	.word	0x08004bc9
 8004b00:	08004bc9 	.word	0x08004bc9
 8004b04:	08004bc9 	.word	0x08004bc9
 8004b08:	08004bc9 	.word	0x08004bc9
 8004b0c:	08004bd1 	.word	0x08004bd1
 8004b10:	08004bd1 	.word	0x08004bd1
 8004b14:	08004bd1 	.word	0x08004bd1
 8004b18:	08004bd1 	.word	0x08004bd1
 8004b1c:	08004bd9 	.word	0x08004bd9
 8004b20:	08004bd9 	.word	0x08004bd9
 8004b24:	08004bd9 	.word	0x08004bd9
 8004b28:	08004bd9 	.word	0x08004bd9
 8004b2c:	08004be3 	.word	0x08004be3
 8004b30:	08004be3 	.word	0x08004be3
 8004b34:	08004be3 	.word	0x08004be3
 8004b38:	08004be3 	.word	0x08004be3
 8004b3c:	08004bed 	.word	0x08004bed
 8004b40:	08004bed 	.word	0x08004bed
 8004b44:	08004bed 	.word	0x08004bed
 8004b48:	08004c2f 	.word	0x08004c2f
 8004b4c:	08004bed 	.word	0x08004bed
 8004b50:	08004bf7 	.word	0x08004bf7
 8004b54:	08004bf7 	.word	0x08004bf7
 8004b58:	08004bf7 	.word	0x08004bf7
 8004b5c:	08004bf7 	.word	0x08004bf7
 8004b60:	08004c01 	.word	0x08004c01
 8004b64:	08004c01 	.word	0x08004c01
 8004b68:	08004c01 	.word	0x08004c01
 8004b6c:	08004c01 	.word	0x08004c01
 8004b70:	08004c0b 	.word	0x08004c0b
 8004b74:	08004c0b 	.word	0x08004c0b
 8004b78:	08004c0b 	.word	0x08004c0b
 8004b7c:	08004c0b 	.word	0x08004c0b
 8004b80:	08004c15 	.word	0x08004c15
 8004b84:	08004c15 	.word	0x08004c15
 8004b88:	08004c15 	.word	0x08004c15
 8004b8c:	08004c15 	.word	0x08004c15
 8004b90:	08004c1f 	.word	0x08004c1f
 8004b94:	08004c1f 	.word	0x08004c1f
 8004b98:	08004c1f 	.word	0x08004c1f
 8004b9c:	08004c1f 	.word	0x08004c1f
 8004ba0:	08004c27 	.word	0x08004c27
 8004ba4:	08004c27 	.word	0x08004c27
 8004ba8:	08004c27 	.word	0x08004c27
 8004bac:	08004c27 	.word	0x08004c27
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	f000 f845 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004bb6:	e03a      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8004bb8:	200a      	movs	r0, #10
 8004bba:	f000 f841 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004bbe:	e036      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004bc0:	2032      	movs	r0, #50	; 0x32
 8004bc2:	f000 f83d 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004bc6:	e032      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8004bc8:	2064      	movs	r0, #100	; 0x64
 8004bca:	f000 f839 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004bce:	e02e      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004bd0:	20fa      	movs	r0, #250	; 0xfa
 8004bd2:	f000 f835 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004bd6:	e02a      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8004bd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bdc:	f000 f830 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004be0:	e025      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004be2:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004be6:	f000 f82b 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004bea:	e020      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8004bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bf0:	f000 f826 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004bf4:	e01b      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8004bf6:	f241 3088 	movw	r0, #5000	; 0x1388
 8004bfa:	f000 f821 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004bfe:	e016      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8004c00:	f242 7010 	movw	r0, #10000	; 0x2710
 8004c04:	f000 f81c 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004c08:	e011      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8004c0a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8004c0e:	f000 f817 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004c12:	e00c      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8004c14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c18:	f000 f812 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004c1c:	e007      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8004c1e:	4806      	ldr	r0, [pc, #24]	; (8004c38 <FreqO_ModifyOutput+0x184>)
 8004c20:	f000 f80e 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004c24:	e003      	b.n	8004c2e <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8004c26:	4805      	ldr	r0, [pc, #20]	; (8004c3c <FreqO_ModifyOutput+0x188>)
 8004c28:	f000 f80a 	bl	8004c40 <FreqO_ApplyPreset>
			break;
 8004c2c:	bf00      	nop
	}

}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	000124f8 	.word	0x000124f8
 8004c3c:	000186a0 	.word	0x000186a0

08004c40 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fefb 	bl	8004a44 <DT_GetRegisterByEnum>
 8004c4e:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d015      	beq.n	8004c82 <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 8004c56:	4a0d      	ldr	r2, [pc, #52]	; (8004c8c <FreqO_ApplyPreset+0x4c>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 8004c5e:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <FreqO_ApplyPreset+0x4c>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f822 	bl	8004cb0 <FreqO_FindFPresetObject>
 8004c6c:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 8004c74:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <FreqO_ApplyPreset+0x50>)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8004c7a:	e002      	b.n	8004c82 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8004c7c:	4805      	ldr	r0, [pc, #20]	; (8004c94 <FreqO_ApplyPreset+0x54>)
 8004c7e:	f7fc faff 	bl	8001280 <DM_SetErrorDebugMsg>
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40013400 	.word	0x40013400
 8004c90:	20000198 	.word	0x20000198
 8004c94:	08012d34 	.word	0x08012d34

08004c98 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
	return freq_profile;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <FreqO_GetFPresetObject+0x14>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000198 	.word	0x20000198

08004cb0 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e00e      	b.n	8004cdc <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8004cbe:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <FreqO_FindFPresetObject+0x44>)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d104      	bne.n	8004cd6 <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4a08      	ldr	r2, [pc, #32]	; (8004cf4 <FreqO_FindFPresetObject+0x44>)
 8004cd2:	4413      	add	r3, r2
 8004cd4:	e009      	b.n	8004cea <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b0d      	cmp	r3, #13
 8004ce0:	dded      	ble.n	8004cbe <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004ce2:	4805      	ldr	r0, [pc, #20]	; (8004cf8 <FreqO_FindFPresetObject+0x48>)
 8004ce4:	f7fc facc 	bl	8001280 <DM_SetErrorDebugMsg>
	return 0;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000128 	.word	0x20000128
 8004cf8:	08012d5c 	.word	0x08012d5c

08004cfc <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000124 	.word	0x20000124

08004d14 <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b17      	cmp	r3, #23
 8004d32:	d84b      	bhi.n	8004dcc <FuncO_ModifySignalOutput+0xa8>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <FuncO_ModifySignalOutput+0x18>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d9d 	.word	0x08004d9d
 8004d40:	08004d9d 	.word	0x08004d9d
 8004d44:	08004d9d 	.word	0x08004d9d
 8004d48:	08004da5 	.word	0x08004da5
 8004d4c:	08004da5 	.word	0x08004da5
 8004d50:	08004da5 	.word	0x08004da5
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004dad 	.word	0x08004dad
 8004d5c:	08004dad 	.word	0x08004dad
 8004d60:	08004dad 	.word	0x08004dad
 8004d64:	08004dad 	.word	0x08004dad
 8004d68:	08004db5 	.word	0x08004db5
 8004d6c:	08004db5 	.word	0x08004db5
 8004d70:	08004db5 	.word	0x08004db5
 8004d74:	08004db5 	.word	0x08004db5
 8004d78:	08004dbd 	.word	0x08004dbd
 8004d7c:	08004dbd 	.word	0x08004dbd
 8004d80:	08004dbd 	.word	0x08004dbd
 8004d84:	08004dbd 	.word	0x08004dbd
 8004d88:	08004dc5 	.word	0x08004dc5
 8004d8c:	08004dc5 	.word	0x08004dc5
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08004dc5 	.word	0x08004dc5
 8004d98:	08004dc5 	.word	0x08004dc5
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f000 f871 	bl	8004e84 <FuncO_ApplyPresetToSignal>
			break;
 8004da2:	e013      	b.n	8004dcc <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 8004da4:	2001      	movs	r0, #1
 8004da6:	f000 f86d 	bl	8004e84 <FuncO_ApplyPresetToSignal>
			break;
 8004daa:	e00f      	b.n	8004dcc <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004dac:	2002      	movs	r0, #2
 8004dae:	f000 f869 	bl	8004e84 <FuncO_ApplyPresetToSignal>
			break;
 8004db2:	e00b      	b.n	8004dcc <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 8004db4:	2003      	movs	r0, #3
 8004db6:	f000 f865 	bl	8004e84 <FuncO_ApplyPresetToSignal>
			break;
 8004dba:	e007      	b.n	8004dcc <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004dbc:	2004      	movs	r0, #4
 8004dbe:	f000 f861 	bl	8004e84 <FuncO_ApplyPresetToSignal>
			break;
 8004dc2:	e003      	b.n	8004dcc <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 8004dc4:	2005      	movs	r0, #5
 8004dc6:	f000 f85d 	bl	8004e84 <FuncO_ApplyPresetToSignal>
			break;
 8004dca:	bf00      	nop

	}
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	2b17      	cmp	r3, #23
 8004de2:	d84b      	bhi.n	8004e7c <FuncO_ModifySyncOutput+0xa8>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <FuncO_ModifySyncOutput+0x18>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e4d 	.word	0x08004e4d
 8004df0:	08004e4d 	.word	0x08004e4d
 8004df4:	08004e4d 	.word	0x08004e4d
 8004df8:	08004e55 	.word	0x08004e55
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004e55 	.word	0x08004e55
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004e5d 	.word	0x08004e5d
 8004e10:	08004e5d 	.word	0x08004e5d
 8004e14:	08004e5d 	.word	0x08004e5d
 8004e18:	08004e65 	.word	0x08004e65
 8004e1c:	08004e65 	.word	0x08004e65
 8004e20:	08004e65 	.word	0x08004e65
 8004e24:	08004e65 	.word	0x08004e65
 8004e28:	08004e6d 	.word	0x08004e6d
 8004e2c:	08004e6d 	.word	0x08004e6d
 8004e30:	08004e6d 	.word	0x08004e6d
 8004e34:	08004e6d 	.word	0x08004e6d
 8004e38:	08004e75 	.word	0x08004e75
 8004e3c:	08004e75 	.word	0x08004e75
 8004e40:	08004e75 	.word	0x08004e75
 8004e44:	08004e75 	.word	0x08004e75
 8004e48:	08004e75 	.word	0x08004e75
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f000 f873 	bl	8004f38 <FuncO_ApplyPresetToSync>
			break;
 8004e52:	e013      	b.n	8004e7c <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 8004e54:	2001      	movs	r0, #1
 8004e56:	f000 f86f 	bl	8004f38 <FuncO_ApplyPresetToSync>
			break;
 8004e5a:	e00f      	b.n	8004e7c <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 8004e5c:	2002      	movs	r0, #2
 8004e5e:	f000 f86b 	bl	8004f38 <FuncO_ApplyPresetToSync>
			break;
 8004e62:	e00b      	b.n	8004e7c <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 8004e64:	2003      	movs	r0, #3
 8004e66:	f000 f867 	bl	8004f38 <FuncO_ApplyPresetToSync>
			break;
 8004e6a:	e007      	b.n	8004e7c <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 8004e6c:	2004      	movs	r0, #4
 8004e6e:	f000 f863 	bl	8004f38 <FuncO_ApplyPresetToSync>
			break;
 8004e72:	e003      	b.n	8004e7c <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 8004e74:	2005      	movs	r0, #5
 8004e76:	f000 f85f 	bl	8004f38 <FuncO_ApplyPresetToSync>
			break;
 8004e7a:	bf00      	nop

	}
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004e8e:	79fc      	ldrb	r4, [r7, #7]
 8004e90:	2000      	movs	r0, #0
 8004e92:	f000 fa81 	bl	8005398 <SM_GetOutputChannel>
 8004e96:	4601      	mov	r1, r0
 8004e98:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <FuncO_ApplyPresetToSignal+0xa4>)
 8004e9a:	00e3      	lsls	r3, r4, #3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f000 fa78 	bl	8005398 <SM_GetOutputChannel>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fb0b 	bl	80054d0 <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004eba:	79fc      	ldrb	r4, [r7, #7]
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f000 fa6b 	bl	8005398 <SM_GetOutputChannel>
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	00e3      	lsls	r3, r4, #3
 8004ec6:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <FuncO_ApplyPresetToSignal+0xa4>)
 8004ec8:	4413      	add	r3, r2
 8004eca:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 8004ece:	4817      	ldr	r0, [pc, #92]	; (8004f2c <FuncO_ApplyPresetToSignal+0xa8>)
 8004ed0:	f007 f8f6 	bl	800c0c0 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4816      	ldr	r0, [pc, #88]	; (8004f30 <FuncO_ApplyPresetToSignal+0xac>)
 8004ed8:	f005 f894 	bl	800a004 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004edc:	2000      	movs	r0, #0
 8004ede:	f000 fa5b 	bl	8005398 <SM_GetOutputChannel>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f103 0208 	add.w	r2, r3, #8
 8004ee8:	2300      	movs	r3, #0
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	2378      	movs	r3, #120	; 0x78
 8004eee:	2100      	movs	r1, #0
 8004ef0:	480f      	ldr	r0, [pc, #60]	; (8004f30 <FuncO_ApplyPresetToSignal+0xac>)
 8004ef2:	f004 ffc5 	bl	8009e80 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	480e      	ldr	r0, [pc, #56]	; (8004f34 <FuncO_ApplyPresetToSignal+0xb0>)
 8004efa:	f005 f883 	bl	800a004 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004efe:	2001      	movs	r0, #1
 8004f00:	f000 fa4a 	bl	8005398 <SM_GetOutputChannel>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f103 0208 	add.w	r2, r3, #8
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	2378      	movs	r3, #120	; 0x78
 8004f10:	2100      	movs	r1, #0
 8004f12:	4808      	ldr	r0, [pc, #32]	; (8004f34 <FuncO_ApplyPresetToSignal+0xb0>)
 8004f14:	f004 ffb4 	bl	8009e80 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8004f18:	4804      	ldr	r0, [pc, #16]	; (8004f2c <FuncO_ApplyPresetToSignal+0xa8>)
 8004f1a:	f007 f8a3 	bl	800c064 <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd90      	pop	{r4, r7, pc}
 8004f26:	bf00      	nop
 8004f28:	200001a0 	.word	0x200001a0
 8004f2c:	20002248 	.word	0x20002248
 8004f30:	20002110 	.word	0x20002110
 8004f34:	200020fc 	.word	0x200020fc

08004f38 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004f42:	79fc      	ldrb	r4, [r7, #7]
 8004f44:	2001      	movs	r0, #1
 8004f46:	f000 fa27 	bl	8005398 <SM_GetOutputChannel>
 8004f4a:	4601      	mov	r1, r0
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <FuncO_ApplyPresetToSync+0xb0>)
 8004f4e:	00e3      	lsls	r3, r4, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8004f56:	2001      	movs	r0, #1
 8004f58:	f000 fa1e 	bl	8005398 <SM_GetOutputChannel>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fadf 	bl	800552c <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004f6e:	79fc      	ldrb	r4, [r7, #7]
 8004f70:	2001      	movs	r0, #1
 8004f72:	f000 fa11 	bl	8005398 <SM_GetOutputChannel>
 8004f76:	4601      	mov	r1, r0
 8004f78:	00e3      	lsls	r3, r4, #3
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	; (8004fe8 <FuncO_ApplyPresetToSync+0xb0>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8004f82:	4b1a      	ldr	r3, [pc, #104]	; (8004fec <FuncO_ApplyPresetToSync+0xb4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a19      	ldr	r2, [pc, #100]	; (8004fec <FuncO_ApplyPresetToSync+0xb4>)
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4817      	ldr	r0, [pc, #92]	; (8004ff0 <FuncO_ApplyPresetToSync+0xb8>)
 8004f92:	f005 f837 	bl	800a004 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004f96:	2001      	movs	r0, #1
 8004f98:	f000 f9fe 	bl	8005398 <SM_GetOutputChannel>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f103 0208 	add.w	r2, r3, #8
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2378      	movs	r3, #120	; 0x78
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4811      	ldr	r0, [pc, #68]	; (8004ff0 <FuncO_ApplyPresetToSync+0xb8>)
 8004fac:	f004 ff68 	bl	8009e80 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4810      	ldr	r0, [pc, #64]	; (8004ff4 <FuncO_ApplyPresetToSync+0xbc>)
 8004fb4:	f005 f826 	bl	800a004 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f000 f9ed 	bl	8005398 <SM_GetOutputChannel>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f103 0208 	add.w	r2, r3, #8
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	2378      	movs	r3, #120	; 0x78
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4809      	ldr	r0, [pc, #36]	; (8004ff4 <FuncO_ApplyPresetToSync+0xbc>)
 8004fce:	f004 ff57 	bl	8009e80 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <FuncO_ApplyPresetToSync+0xb4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <FuncO_ApplyPresetToSync+0xb4>)
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	6013      	str	r3, [r2, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd90      	pop	{r4, r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200001a0 	.word	0x200001a0
 8004fec:	40013400 	.word	0x40013400
 8004ff0:	200020fc 	.word	0x200020fc
 8004ff4:	20002110 	.word	0x20002110

08004ff8 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <FuncO_GetFuncPresetEncoderRange+0x14>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
}
 8005000:	4618      	mov	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	2000019c 	.word	0x2000019c

08005010 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800501a:	79fc      	ldrb	r4, [r7, #7]
 800501c:	2000      	movs	r0, #0
 800501e:	f000 f9bb 	bl	8005398 <SM_GetOutputChannel>
 8005022:	4601      	mov	r1, r0
 8005024:	4623      	mov	r3, r4
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4423      	add	r3, r4
 800502a:	4a4f      	ldr	r2, [pc, #316]	; (8005168 <GO_ApplyPresetToSignal+0x158>)
 800502c:	4413      	add	r3, r2
 800502e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	2b07      	cmp	r3, #7
 8005036:	f200 8093 	bhi.w	8005160 <GO_ApplyPresetToSignal+0x150>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <GO_ApplyPresetToSignal+0x30>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005061 	.word	0x08005061
 8005044:	08005081 	.word	0x08005081
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050c1 	.word	0x080050c1
 8005050:	080050e1 	.word	0x080050e1
 8005054:	08005101 	.word	0x08005101
 8005058:	08005121 	.word	0x08005121
 800505c:	08005141 	.word	0x08005141
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005060:	2200      	movs	r2, #0
 8005062:	2101      	movs	r1, #1
 8005064:	4841      	ldr	r0, [pc, #260]	; (800516c <GO_ApplyPresetToSignal+0x15c>)
 8005066:	f005 ff03 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800506a:	2200      	movs	r2, #0
 800506c:	2120      	movs	r1, #32
 800506e:	4840      	ldr	r0, [pc, #256]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 8005070:	f005 fefe 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005074:	2200      	movs	r2, #0
 8005076:	2110      	movs	r1, #16
 8005078:	483d      	ldr	r0, [pc, #244]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 800507a:	f005 fef9 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 800507e:	e06f      	b.n	8005160 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005080:	2201      	movs	r2, #1
 8005082:	2101      	movs	r1, #1
 8005084:	4839      	ldr	r0, [pc, #228]	; (800516c <GO_ApplyPresetToSignal+0x15c>)
 8005086:	f005 fef3 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800508a:	2200      	movs	r2, #0
 800508c:	2120      	movs	r1, #32
 800508e:	4838      	ldr	r0, [pc, #224]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 8005090:	f005 feee 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005094:	2200      	movs	r2, #0
 8005096:	2110      	movs	r1, #16
 8005098:	4835      	ldr	r0, [pc, #212]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 800509a:	f005 fee9 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 800509e:	e05f      	b.n	8005160 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80050a0:	2200      	movs	r2, #0
 80050a2:	2101      	movs	r1, #1
 80050a4:	4831      	ldr	r0, [pc, #196]	; (800516c <GO_ApplyPresetToSignal+0x15c>)
 80050a6:	f005 fee3 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80050aa:	2201      	movs	r2, #1
 80050ac:	2120      	movs	r1, #32
 80050ae:	4830      	ldr	r0, [pc, #192]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 80050b0:	f005 fede 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80050b4:	2200      	movs	r2, #0
 80050b6:	2110      	movs	r1, #16
 80050b8:	482d      	ldr	r0, [pc, #180]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 80050ba:	f005 fed9 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 80050be:	e04f      	b.n	8005160 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80050c0:	2201      	movs	r2, #1
 80050c2:	2101      	movs	r1, #1
 80050c4:	4829      	ldr	r0, [pc, #164]	; (800516c <GO_ApplyPresetToSignal+0x15c>)
 80050c6:	f005 fed3 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80050ca:	2201      	movs	r2, #1
 80050cc:	2120      	movs	r1, #32
 80050ce:	4828      	ldr	r0, [pc, #160]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 80050d0:	f005 fece 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80050d4:	2200      	movs	r2, #0
 80050d6:	2110      	movs	r1, #16
 80050d8:	4825      	ldr	r0, [pc, #148]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 80050da:	f005 fec9 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 80050de:	e03f      	b.n	8005160 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80050e0:	2200      	movs	r2, #0
 80050e2:	2101      	movs	r1, #1
 80050e4:	4821      	ldr	r0, [pc, #132]	; (800516c <GO_ApplyPresetToSignal+0x15c>)
 80050e6:	f005 fec3 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80050ea:	2200      	movs	r2, #0
 80050ec:	2120      	movs	r1, #32
 80050ee:	4820      	ldr	r0, [pc, #128]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 80050f0:	f005 febe 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80050f4:	2201      	movs	r2, #1
 80050f6:	2110      	movs	r1, #16
 80050f8:	481d      	ldr	r0, [pc, #116]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 80050fa:	f005 feb9 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 80050fe:	e02f      	b.n	8005160 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005100:	2201      	movs	r2, #1
 8005102:	2101      	movs	r1, #1
 8005104:	4819      	ldr	r0, [pc, #100]	; (800516c <GO_ApplyPresetToSignal+0x15c>)
 8005106:	f005 feb3 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800510a:	2200      	movs	r2, #0
 800510c:	2120      	movs	r1, #32
 800510e:	4818      	ldr	r0, [pc, #96]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 8005110:	f005 feae 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005114:	2201      	movs	r2, #1
 8005116:	2110      	movs	r1, #16
 8005118:	4815      	ldr	r0, [pc, #84]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 800511a:	f005 fea9 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 800511e:	e01f      	b.n	8005160 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005120:	2200      	movs	r2, #0
 8005122:	2101      	movs	r1, #1
 8005124:	4811      	ldr	r0, [pc, #68]	; (800516c <GO_ApplyPresetToSignal+0x15c>)
 8005126:	f005 fea3 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800512a:	2201      	movs	r2, #1
 800512c:	2120      	movs	r1, #32
 800512e:	4810      	ldr	r0, [pc, #64]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 8005130:	f005 fe9e 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005134:	2201      	movs	r2, #1
 8005136:	2110      	movs	r1, #16
 8005138:	480d      	ldr	r0, [pc, #52]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 800513a:	f005 fe99 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 800513e:	e00f      	b.n	8005160 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005140:	2201      	movs	r2, #1
 8005142:	2101      	movs	r1, #1
 8005144:	4809      	ldr	r0, [pc, #36]	; (800516c <GO_ApplyPresetToSignal+0x15c>)
 8005146:	f005 fe93 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800514a:	2201      	movs	r2, #1
 800514c:	2120      	movs	r1, #32
 800514e:	4808      	ldr	r0, [pc, #32]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 8005150:	f005 fe8e 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005154:	2201      	movs	r2, #1
 8005156:	2110      	movs	r1, #16
 8005158:	4805      	ldr	r0, [pc, #20]	; (8005170 <GO_ApplyPresetToSignal+0x160>)
 800515a:	f005 fe89 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 800515e:	bf00      	nop
	}
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	200001d0 	.word	0x200001d0
 800516c:	48000400 	.word	0x48000400
 8005170:	48000800 	.word	0x48000800

08005174 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800517e:	79fc      	ldrb	r4, [r7, #7]
 8005180:	2001      	movs	r0, #1
 8005182:	f000 f909 	bl	8005398 <SM_GetOutputChannel>
 8005186:	4601      	mov	r1, r0
 8005188:	4623      	mov	r3, r4
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4423      	add	r3, r4
 800518e:	4a4f      	ldr	r2, [pc, #316]	; (80052cc <GO_ApplyPresetToSync+0x158>)
 8005190:	4413      	add	r3, r2
 8005192:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	2b07      	cmp	r3, #7
 800519a:	f200 8093 	bhi.w	80052c4 <GO_ApplyPresetToSync+0x150>
 800519e:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <GO_ApplyPresetToSync+0x30>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051c5 	.word	0x080051c5
 80051a8:	080051e5 	.word	0x080051e5
 80051ac:	08005205 	.word	0x08005205
 80051b0:	08005225 	.word	0x08005225
 80051b4:	08005245 	.word	0x08005245
 80051b8:	08005265 	.word	0x08005265
 80051bc:	08005285 	.word	0x08005285
 80051c0:	080052a5 	.word	0x080052a5
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80051c4:	2200      	movs	r2, #0
 80051c6:	2101      	movs	r1, #1
 80051c8:	4841      	ldr	r0, [pc, #260]	; (80052d0 <GO_ApplyPresetToSync+0x15c>)
 80051ca:	f005 fe51 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80051ce:	2200      	movs	r2, #0
 80051d0:	2120      	movs	r1, #32
 80051d2:	4840      	ldr	r0, [pc, #256]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 80051d4:	f005 fe4c 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80051d8:	2200      	movs	r2, #0
 80051da:	2110      	movs	r1, #16
 80051dc:	483d      	ldr	r0, [pc, #244]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 80051de:	f005 fe47 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 80051e2:	e06f      	b.n	80052c4 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80051e4:	2201      	movs	r2, #1
 80051e6:	2101      	movs	r1, #1
 80051e8:	4839      	ldr	r0, [pc, #228]	; (80052d0 <GO_ApplyPresetToSync+0x15c>)
 80051ea:	f005 fe41 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80051ee:	2200      	movs	r2, #0
 80051f0:	2120      	movs	r1, #32
 80051f2:	4838      	ldr	r0, [pc, #224]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 80051f4:	f005 fe3c 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80051f8:	2200      	movs	r2, #0
 80051fa:	2110      	movs	r1, #16
 80051fc:	4835      	ldr	r0, [pc, #212]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 80051fe:	f005 fe37 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 8005202:	e05f      	b.n	80052c4 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005204:	2200      	movs	r2, #0
 8005206:	2101      	movs	r1, #1
 8005208:	4831      	ldr	r0, [pc, #196]	; (80052d0 <GO_ApplyPresetToSync+0x15c>)
 800520a:	f005 fe31 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800520e:	2201      	movs	r2, #1
 8005210:	2120      	movs	r1, #32
 8005212:	4830      	ldr	r0, [pc, #192]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 8005214:	f005 fe2c 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005218:	2200      	movs	r2, #0
 800521a:	2110      	movs	r1, #16
 800521c:	482d      	ldr	r0, [pc, #180]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 800521e:	f005 fe27 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 8005222:	e04f      	b.n	80052c4 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005224:	2201      	movs	r2, #1
 8005226:	2101      	movs	r1, #1
 8005228:	4829      	ldr	r0, [pc, #164]	; (80052d0 <GO_ApplyPresetToSync+0x15c>)
 800522a:	f005 fe21 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800522e:	2201      	movs	r2, #1
 8005230:	2120      	movs	r1, #32
 8005232:	4828      	ldr	r0, [pc, #160]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 8005234:	f005 fe1c 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005238:	2200      	movs	r2, #0
 800523a:	2110      	movs	r1, #16
 800523c:	4825      	ldr	r0, [pc, #148]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 800523e:	f005 fe17 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 8005242:	e03f      	b.n	80052c4 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005244:	2200      	movs	r2, #0
 8005246:	2101      	movs	r1, #1
 8005248:	4821      	ldr	r0, [pc, #132]	; (80052d0 <GO_ApplyPresetToSync+0x15c>)
 800524a:	f005 fe11 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800524e:	2200      	movs	r2, #0
 8005250:	2120      	movs	r1, #32
 8005252:	4820      	ldr	r0, [pc, #128]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 8005254:	f005 fe0c 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005258:	2201      	movs	r2, #1
 800525a:	2110      	movs	r1, #16
 800525c:	481d      	ldr	r0, [pc, #116]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 800525e:	f005 fe07 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 8005262:	e02f      	b.n	80052c4 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005264:	2201      	movs	r2, #1
 8005266:	2101      	movs	r1, #1
 8005268:	4819      	ldr	r0, [pc, #100]	; (80052d0 <GO_ApplyPresetToSync+0x15c>)
 800526a:	f005 fe01 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800526e:	2200      	movs	r2, #0
 8005270:	2120      	movs	r1, #32
 8005272:	4818      	ldr	r0, [pc, #96]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 8005274:	f005 fdfc 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005278:	2201      	movs	r2, #1
 800527a:	2110      	movs	r1, #16
 800527c:	4815      	ldr	r0, [pc, #84]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 800527e:	f005 fdf7 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 8005282:	e01f      	b.n	80052c4 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005284:	2200      	movs	r2, #0
 8005286:	2101      	movs	r1, #1
 8005288:	4811      	ldr	r0, [pc, #68]	; (80052d0 <GO_ApplyPresetToSync+0x15c>)
 800528a:	f005 fdf1 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800528e:	2201      	movs	r2, #1
 8005290:	2120      	movs	r1, #32
 8005292:	4810      	ldr	r0, [pc, #64]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 8005294:	f005 fdec 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005298:	2201      	movs	r2, #1
 800529a:	2110      	movs	r1, #16
 800529c:	480d      	ldr	r0, [pc, #52]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 800529e:	f005 fde7 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 80052a2:	e00f      	b.n	80052c4 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80052a4:	2201      	movs	r2, #1
 80052a6:	2101      	movs	r1, #1
 80052a8:	4809      	ldr	r0, [pc, #36]	; (80052d0 <GO_ApplyPresetToSync+0x15c>)
 80052aa:	f005 fde1 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80052ae:	2201      	movs	r2, #1
 80052b0:	2120      	movs	r1, #32
 80052b2:	4808      	ldr	r0, [pc, #32]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 80052b4:	f005 fddc 	bl	800ae70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80052b8:	2201      	movs	r2, #1
 80052ba:	2110      	movs	r1, #16
 80052bc:	4805      	ldr	r0, [pc, #20]	; (80052d4 <GO_ApplyPresetToSync+0x160>)
 80052be:	f005 fdd7 	bl	800ae70 <HAL_GPIO_WritePin>
			break;
 80052c2:	bf00      	nop
	}
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd90      	pop	{r4, r7, pc}
 80052cc:	200001d0 	.word	0x200001d0
 80052d0:	48000400 	.word	0x48000400
 80052d4:	48000800 	.word	0x48000800

080052d8 <SM_Init>:
sOutputChannel_t SyncChannel;



void SM_Init()
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0

	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 80052de:	4b28      	ldr	r3, [pc, #160]	; (8005380 <SM_Init+0xa8>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80052e4:	4b27      	ldr	r3, [pc, #156]	; (8005384 <SM_Init+0xac>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a25      	ldr	r2, [pc, #148]	; (8005380 <SM_Init+0xa8>)
 80052ea:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80052ec:	4b24      	ldr	r3, [pc, #144]	; (8005380 <SM_Init+0xa8>)
 80052ee:	4a25      	ldr	r2, [pc, #148]	; (8005384 <SM_Init+0xac>)
 80052f0:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80052f4:	2300      	movs	r3, #0
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	e00b      	b.n	8005312 <SM_Init+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80052fa:	4a23      	ldr	r2, [pc, #140]	; (8005388 <SM_Init+0xb0>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005302:	491f      	ldr	r1, [pc, #124]	; (8005380 <SM_Init+0xa8>)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3302      	adds	r3, #2
 8005308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3301      	adds	r3, #1
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b77      	cmp	r3, #119	; 0x77
 8005316:	ddf0      	ble.n	80052fa <SM_Init+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <SM_Init+0xa8>)
 800531a:	4a1c      	ldr	r2, [pc, #112]	; (800538c <SM_Init+0xb4>)
 800531c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005320:	4b17      	ldr	r3, [pc, #92]	; (8005380 <SM_Init+0xa8>)
 8005322:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <SM_Init+0xb8>)
 8005324:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005328:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <SM_Init+0xbc>)
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800532e:	4b15      	ldr	r3, [pc, #84]	; (8005384 <SM_Init+0xac>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <SM_Init+0xbc>)
 8005334:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <SM_Init+0xbc>)
 8005338:	4a12      	ldr	r2, [pc, #72]	; (8005384 <SM_Init+0xac>)
 800533a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800533e:	2300      	movs	r3, #0
 8005340:	603b      	str	r3, [r7, #0]
 8005342:	e00b      	b.n	800535c <SM_Init+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005344:	4a10      	ldr	r2, [pc, #64]	; (8005388 <SM_Init+0xb0>)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800534c:	4911      	ldr	r1, [pc, #68]	; (8005394 <SM_Init+0xbc>)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	3302      	adds	r3, #2
 8005352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b77      	cmp	r3, #119	; 0x77
 8005360:	ddf0      	ble.n	8005344 <SM_Init+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005362:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <SM_Init+0xbc>)
 8005364:	4a09      	ldr	r2, [pc, #36]	; (800538c <SM_Init+0xb4>)
 8005366:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <SM_Init+0xbc>)
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <SM_Init+0xb8>)
 800536e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20001c38 	.word	0x20001c38
 8005384:	200001a0 	.word	0x200001a0
 8005388:	20001074 	.word	0x20001074
 800538c:	20000ba4 	.word	0x20000ba4
 8005390:	200001d3 	.word	0x200001d3
 8005394:	20001a44 	.word	0x20001a44

08005398 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <SM_GetOutputChannel+0x24>)
 80053aa:	e000      	b.n	80053ae <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <SM_GetOutputChannel+0x28>)
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20001c38 	.word	0x20001c38
 80053c0:	20001a44 	.word	0x20001a44

080053c4 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <SM_GetEncoderValue+0x34>)
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	b29a      	uxth	r2, r3
 80053da:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <SM_GetEncoderValue+0x34>)
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	b29b      	uxth	r3, r3
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	e002      	b.n	80053ec <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80053e6:	4b04      	ldr	r3, [pc, #16]	; (80053f8 <SM_GetEncoderValue+0x34>)
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	b29b      	uxth	r3, r3
	}
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40012c00 	.word	0x40012c00

080053fc <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8005402:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <SM_GetOutputInHertz+0x7c>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d103      	bne.n	8005412 <SM_GetOutputInHertz+0x16>
 800540a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	e007      	b.n	8005422 <SM_GetOutputInHertz+0x26>
 8005412:	4b19      	ldr	r3, [pc, #100]	; (8005478 <SM_GetOutputInHertz+0x7c>)
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541e:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <SM_GetOutputInHertz+0x7c>)
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <SM_GetOutputInHertz+0x36>
 800542a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	e007      	b.n	8005442 <SM_GetOutputInHertz+0x46>
 8005432:	4b11      	ldr	r3, [pc, #68]	; (8005478 <SM_GetOutputInHertz+0x7c>)
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543e:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8005442:	ed97 7a02 	vldr	s14, [r7, #8]
 8005446:	edd7 7a01 	vldr	s15, [r7, #4]
 800544a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800544e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800547c <SM_GetOutputInHertz+0x80>
 8005452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005456:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 800545a:	edd7 7a03 	vldr	s15, [r7, #12]
 800545e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005480 <SM_GetOutputInHertz+0x84>
 8005462:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005466:	eef0 7a66 	vmov.f32	s15, s13
}
 800546a:	eeb0 0a67 	vmov.f32	s0, s15
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40013400 	.word	0x40013400
 800547c:	4d2037a0 	.word	0x4d2037a0
 8005480:	42f00000 	.word	0x42f00000

08005484 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8005490:	887b      	ldrh	r3, [r7, #2]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <SM_ConvertPeriodToHertz+0x16>
 8005496:	2301      	movs	r3, #1
 8005498:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 800549a:	887b      	ldrh	r3, [r7, #2]
 800549c:	ee07 3a90 	vmov	s15, r3
 80054a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80054cc <SM_ConvertPeriodToHertz+0x48>
 80054b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80054ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80054be:	eeb0 0a67 	vmov.f32	s0, s15
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	4d2037a0 	.word	0x4d2037a0

080054d0 <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80054da:	79fa      	ldrb	r2, [r7, #7]
 80054dc:	4613      	mov	r3, r2
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4a10      	ldr	r2, [pc, #64]	; (8005528 <VPP_ApplyPresetToSignal+0x58>)
 80054e6:	4413      	add	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80054ea:	2000      	movs	r0, #0
 80054ec:	f7ff ff54 	bl	8005398 <SM_GetOutputChannel>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	7a1b      	ldrb	r3, [r3, #8]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fd87 	bl	8005010 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	edd3 7a04 	vldr	s15, [r3, #16]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	ed93 7a05 	vldr	s14, [r3, #20]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8b1b      	ldrh	r3, [r3, #24]
 8005512:	4618      	mov	r0, r3
 8005514:	eef0 0a47 	vmov.f32	s1, s14
 8005518:	eeb0 0a67 	vmov.f32	s0, s15
 800551c:	f000 f834 	bl	8005588 <_ProcessSignalDataTable>


}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	200001e8 	.word	0x200001e8

0800552c <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005536:	79fa      	ldrb	r2, [r7, #7]
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4a10      	ldr	r2, [pc, #64]	; (8005584 <VPP_ApplyPresetToSync+0x58>)
 8005542:	4413      	add	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 8005546:	2001      	movs	r0, #1
 8005548:	f7ff ff26 	bl	8005398 <SM_GetOutputChannel>
 800554c:	4602      	mov	r2, r0
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	7a1b      	ldrb	r3, [r3, #8]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fe0b 	bl	8005174 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	edd3 7a04 	vldr	s15, [r3, #16]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	ed93 7a05 	vldr	s14, [r3, #20]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8b1b      	ldrh	r3, [r3, #24]
 800556e:	4618      	mov	r0, r3
 8005570:	eef0 0a47 	vmov.f32	s1, s14
 8005574:	eeb0 0a67 	vmov.f32	s0, s15
 8005578:	f000 f884 	bl	8005684 <_ProcessSyncDataTable>



}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	200001e8 	.word	0x200001e8

08005588 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005592:	edc7 0a02 	vstr	s1, [r7, #8]
 8005596:	4603      	mov	r3, r0
 8005598:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	e00f      	b.n	80055c0 <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 80055a0:	2000      	movs	r0, #0
 80055a2:	f7ff fef9 	bl	8005398 <SM_GetOutputChannel>
 80055a6:	4603      	mov	r3, r0
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4933      	ldr	r1, [pc, #204]	; (8005680 <_ProcessSignalDataTable+0xf8>)
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	3301      	adds	r3, #1
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b77      	cmp	r3, #119	; 0x77
 80055c4:	ddec      	ble.n	80055a0 <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80055c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80055ca:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d008      	beq.n	80055e4 <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	089b      	lsrs	r3, r3, #2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e0:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e02e      	b.n	8005648 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80055ea:	4a25      	ldr	r2, [pc, #148]	; (8005680 <_ProcessSignalDataTable+0xf8>)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80055fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005606:	ee17 1a90 	vmov	r1, s15
 800560a:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <_ProcessSignalDataTable+0xf8>)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <_ProcessSignalDataTable+0xf8>)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005622:	edd7 7a06 	vldr	s15, [r7, #24]
 8005626:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800562a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800562e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005636:	ee17 1a90 	vmov	r1, s15
 800563a:	4a11      	ldr	r2, [pc, #68]	; (8005680 <_ProcessSignalDataTable+0xf8>)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	3301      	adds	r3, #1
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b77      	cmp	r3, #119	; 0x77
 800564c:	ddcd      	ble.n	80055ea <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e00e      	b.n	8005672 <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005654:	2000      	movs	r0, #0
 8005656:	f7ff fe9f 	bl	8005398 <SM_GetOutputChannel>
 800565a:	4601      	mov	r1, r0
 800565c:	4a08      	ldr	r2, [pc, #32]	; (8005680 <_ProcessSignalDataTable+0xf8>)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3302      	adds	r3, #2
 8005668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3301      	adds	r3, #1
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b77      	cmp	r3, #119	; 0x77
 8005676:	dded      	ble.n	8005654 <_ProcessSignalDataTable+0xcc>
	}
}
 8005678:	bf00      	nop
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20001e2c 	.word	0x20001e2c

08005684 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	ed87 0a03 	vstr	s0, [r7, #12]
 800568e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005692:	4603      	mov	r3, r0
 8005694:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	e00f      	b.n	80056bc <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 800569c:	2001      	movs	r0, #1
 800569e:	f7ff fe7b 	bl	8005398 <SM_GetOutputChannel>
 80056a2:	4603      	mov	r3, r0
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4933      	ldr	r1, [pc, #204]	; (800577c <_ProcessSyncDataTable+0xf8>)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	3301      	adds	r3, #1
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b77      	cmp	r3, #119	; 0x77
 80056c0:	ddec      	ble.n	800569c <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80056c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80056c6:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 80056c8:	88fb      	ldrh	r3, [r7, #6]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056dc:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	e02e      	b.n	8005744 <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80056e6:	4a25      	ldr	r2, [pc, #148]	; (800577c <_ProcessSyncDataTable+0xf8>)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80056fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005702:	ee17 1a90 	vmov	r1, s15
 8005706:	4a1d      	ldr	r2, [pc, #116]	; (800577c <_ProcessSyncDataTable+0xf8>)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800570e:	4a1b      	ldr	r2, [pc, #108]	; (800577c <_ProcessSyncDataTable+0xf8>)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800571e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005722:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005726:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800572a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800572e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005732:	ee17 1a90 	vmov	r1, s15
 8005736:	4a11      	ldr	r2, [pc, #68]	; (800577c <_ProcessSyncDataTable+0xf8>)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	3301      	adds	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2b77      	cmp	r3, #119	; 0x77
 8005748:	ddcd      	ble.n	80056e6 <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	e00e      	b.n	800576e <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005750:	2001      	movs	r0, #1
 8005752:	f7ff fe21 	bl	8005398 <SM_GetOutputChannel>
 8005756:	4601      	mov	r1, r0
 8005758:	4a08      	ldr	r2, [pc, #32]	; (800577c <_ProcessSyncDataTable+0xf8>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	3302      	adds	r3, #2
 8005764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3301      	adds	r3, #1
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b77      	cmp	r3, #119	; 0x77
 8005772:	dded      	ble.n	8005750 <_ProcessSyncDataTable+0xcc>
	}
}
 8005774:	bf00      	nop
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20001e2c 	.word	0x20001e2c

08005780 <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005790:	f200 849a 	bhi.w	80060c8 <VPP_ModifySignalOutput+0x948>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <VPP_ModifySignalOutput+0x1c>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	08005db9 	.word	0x08005db9
 80057a0:	08005db9 	.word	0x08005db9
 80057a4:	08005db9 	.word	0x08005db9
 80057a8:	08005dc1 	.word	0x08005dc1
 80057ac:	08005dc1 	.word	0x08005dc1
 80057b0:	08005dc1 	.word	0x08005dc1
 80057b4:	08005dc1 	.word	0x08005dc1
 80057b8:	08005dc9 	.word	0x08005dc9
 80057bc:	08005dc9 	.word	0x08005dc9
 80057c0:	08005dc9 	.word	0x08005dc9
 80057c4:	08005dc9 	.word	0x08005dc9
 80057c8:	08005dd1 	.word	0x08005dd1
 80057cc:	08005dd1 	.word	0x08005dd1
 80057d0:	08005dd1 	.word	0x08005dd1
 80057d4:	08005dd1 	.word	0x08005dd1
 80057d8:	08005dd9 	.word	0x08005dd9
 80057dc:	08005dd9 	.word	0x08005dd9
 80057e0:	08005dd9 	.word	0x08005dd9
 80057e4:	08005dd9 	.word	0x08005dd9
 80057e8:	08005de1 	.word	0x08005de1
 80057ec:	08005de1 	.word	0x08005de1
 80057f0:	08005de1 	.word	0x08005de1
 80057f4:	08005de1 	.word	0x08005de1
 80057f8:	08005de9 	.word	0x08005de9
 80057fc:	08005de9 	.word	0x08005de9
 8005800:	08005de9 	.word	0x08005de9
 8005804:	08005de9 	.word	0x08005de9
 8005808:	08005df1 	.word	0x08005df1
 800580c:	08005df1 	.word	0x08005df1
 8005810:	08005df1 	.word	0x08005df1
 8005814:	08005df1 	.word	0x08005df1
 8005818:	08005df9 	.word	0x08005df9
 800581c:	08005df9 	.word	0x08005df9
 8005820:	08005df9 	.word	0x08005df9
 8005824:	08005df9 	.word	0x08005df9
 8005828:	08005e01 	.word	0x08005e01
 800582c:	08005e01 	.word	0x08005e01
 8005830:	08005e01 	.word	0x08005e01
 8005834:	08005e01 	.word	0x08005e01
 8005838:	08005e09 	.word	0x08005e09
 800583c:	08005e09 	.word	0x08005e09
 8005840:	08005e09 	.word	0x08005e09
 8005844:	08005e09 	.word	0x08005e09
 8005848:	08005e11 	.word	0x08005e11
 800584c:	08005e11 	.word	0x08005e11
 8005850:	08005e11 	.word	0x08005e11
 8005854:	08005e11 	.word	0x08005e11
 8005858:	08005e19 	.word	0x08005e19
 800585c:	08005e19 	.word	0x08005e19
 8005860:	08005e19 	.word	0x08005e19
 8005864:	08005e19 	.word	0x08005e19
 8005868:	08005e21 	.word	0x08005e21
 800586c:	08005e21 	.word	0x08005e21
 8005870:	08005e21 	.word	0x08005e21
 8005874:	08005e21 	.word	0x08005e21
 8005878:	08005e29 	.word	0x08005e29
 800587c:	08005e29 	.word	0x08005e29
 8005880:	08005e29 	.word	0x08005e29
 8005884:	08005e29 	.word	0x08005e29
 8005888:	08005e31 	.word	0x08005e31
 800588c:	08005e31 	.word	0x08005e31
 8005890:	08005e31 	.word	0x08005e31
 8005894:	08005e31 	.word	0x08005e31
 8005898:	08005e39 	.word	0x08005e39
 800589c:	08005e39 	.word	0x08005e39
 80058a0:	08005e39 	.word	0x08005e39
 80058a4:	08005e39 	.word	0x08005e39
 80058a8:	08005e41 	.word	0x08005e41
 80058ac:	08005e41 	.word	0x08005e41
 80058b0:	08005e41 	.word	0x08005e41
 80058b4:	08005e41 	.word	0x08005e41
 80058b8:	08005e49 	.word	0x08005e49
 80058bc:	08005e49 	.word	0x08005e49
 80058c0:	08005e49 	.word	0x08005e49
 80058c4:	08005e49 	.word	0x08005e49
 80058c8:	08005e51 	.word	0x08005e51
 80058cc:	08005e51 	.word	0x08005e51
 80058d0:	08005e51 	.word	0x08005e51
 80058d4:	08005e51 	.word	0x08005e51
 80058d8:	08005e59 	.word	0x08005e59
 80058dc:	08005e59 	.word	0x08005e59
 80058e0:	08005e59 	.word	0x08005e59
 80058e4:	08005e59 	.word	0x08005e59
 80058e8:	08005e61 	.word	0x08005e61
 80058ec:	08005e61 	.word	0x08005e61
 80058f0:	08005e61 	.word	0x08005e61
 80058f4:	08005e61 	.word	0x08005e61
 80058f8:	08005e69 	.word	0x08005e69
 80058fc:	08005e69 	.word	0x08005e69
 8005900:	08005e69 	.word	0x08005e69
 8005904:	08005e69 	.word	0x08005e69
 8005908:	08005e71 	.word	0x08005e71
 800590c:	08005e71 	.word	0x08005e71
 8005910:	08005e71 	.word	0x08005e71
 8005914:	08005e71 	.word	0x08005e71
 8005918:	08005e79 	.word	0x08005e79
 800591c:	08005e79 	.word	0x08005e79
 8005920:	08005e79 	.word	0x08005e79
 8005924:	08005e79 	.word	0x08005e79
 8005928:	08005e81 	.word	0x08005e81
 800592c:	08005e81 	.word	0x08005e81
 8005930:	08005e81 	.word	0x08005e81
 8005934:	08005e81 	.word	0x08005e81
 8005938:	08005e89 	.word	0x08005e89
 800593c:	08005e89 	.word	0x08005e89
 8005940:	08005e89 	.word	0x08005e89
 8005944:	08005e89 	.word	0x08005e89
 8005948:	08005e91 	.word	0x08005e91
 800594c:	08005e91 	.word	0x08005e91
 8005950:	08005e91 	.word	0x08005e91
 8005954:	08005e91 	.word	0x08005e91
 8005958:	08005e99 	.word	0x08005e99
 800595c:	08005e99 	.word	0x08005e99
 8005960:	08005e99 	.word	0x08005e99
 8005964:	08005e99 	.word	0x08005e99
 8005968:	08005ea1 	.word	0x08005ea1
 800596c:	08005ea1 	.word	0x08005ea1
 8005970:	08005ea1 	.word	0x08005ea1
 8005974:	08005ea1 	.word	0x08005ea1
 8005978:	08005ea9 	.word	0x08005ea9
 800597c:	08005ea9 	.word	0x08005ea9
 8005980:	08005ea9 	.word	0x08005ea9
 8005984:	08005ea9 	.word	0x08005ea9
 8005988:	08005eb1 	.word	0x08005eb1
 800598c:	08005eb1 	.word	0x08005eb1
 8005990:	08005eb1 	.word	0x08005eb1
 8005994:	08005eb1 	.word	0x08005eb1
 8005998:	08005eb9 	.word	0x08005eb9
 800599c:	08005eb9 	.word	0x08005eb9
 80059a0:	08005eb9 	.word	0x08005eb9
 80059a4:	08005eb9 	.word	0x08005eb9
 80059a8:	08005ec1 	.word	0x08005ec1
 80059ac:	08005ec1 	.word	0x08005ec1
 80059b0:	08005ec1 	.word	0x08005ec1
 80059b4:	08005ec1 	.word	0x08005ec1
 80059b8:	08005ec9 	.word	0x08005ec9
 80059bc:	08005ec9 	.word	0x08005ec9
 80059c0:	08005ec9 	.word	0x08005ec9
 80059c4:	08005ec9 	.word	0x08005ec9
 80059c8:	08005ed1 	.word	0x08005ed1
 80059cc:	08005ed1 	.word	0x08005ed1
 80059d0:	08005ed1 	.word	0x08005ed1
 80059d4:	08005ed1 	.word	0x08005ed1
 80059d8:	08005ed9 	.word	0x08005ed9
 80059dc:	08005ed9 	.word	0x08005ed9
 80059e0:	08005ed9 	.word	0x08005ed9
 80059e4:	08005ed9 	.word	0x08005ed9
 80059e8:	08005ee1 	.word	0x08005ee1
 80059ec:	08005ee1 	.word	0x08005ee1
 80059f0:	08005ee1 	.word	0x08005ee1
 80059f4:	08005ee1 	.word	0x08005ee1
 80059f8:	08005ee9 	.word	0x08005ee9
 80059fc:	08005ee9 	.word	0x08005ee9
 8005a00:	08005ee9 	.word	0x08005ee9
 8005a04:	08005ee9 	.word	0x08005ee9
 8005a08:	08005ef1 	.word	0x08005ef1
 8005a0c:	08005ef1 	.word	0x08005ef1
 8005a10:	08005ef1 	.word	0x08005ef1
 8005a14:	08005ef1 	.word	0x08005ef1
 8005a18:	08005ef9 	.word	0x08005ef9
 8005a1c:	08005ef9 	.word	0x08005ef9
 8005a20:	08005ef9 	.word	0x08005ef9
 8005a24:	08005ef9 	.word	0x08005ef9
 8005a28:	08005f01 	.word	0x08005f01
 8005a2c:	08005f01 	.word	0x08005f01
 8005a30:	08005f01 	.word	0x08005f01
 8005a34:	08005f01 	.word	0x08005f01
 8005a38:	08005f09 	.word	0x08005f09
 8005a3c:	08005f09 	.word	0x08005f09
 8005a40:	08005f09 	.word	0x08005f09
 8005a44:	08005f09 	.word	0x08005f09
 8005a48:	08005f11 	.word	0x08005f11
 8005a4c:	08005f11 	.word	0x08005f11
 8005a50:	08005f11 	.word	0x08005f11
 8005a54:	08005f11 	.word	0x08005f11
 8005a58:	08005f19 	.word	0x08005f19
 8005a5c:	08005f19 	.word	0x08005f19
 8005a60:	08005f19 	.word	0x08005f19
 8005a64:	08005f19 	.word	0x08005f19
 8005a68:	08005f21 	.word	0x08005f21
 8005a6c:	08005f21 	.word	0x08005f21
 8005a70:	08005f21 	.word	0x08005f21
 8005a74:	08005f21 	.word	0x08005f21
 8005a78:	08005f29 	.word	0x08005f29
 8005a7c:	08005f29 	.word	0x08005f29
 8005a80:	08005f29 	.word	0x08005f29
 8005a84:	08005f29 	.word	0x08005f29
 8005a88:	08005f31 	.word	0x08005f31
 8005a8c:	08005f31 	.word	0x08005f31
 8005a90:	08005f31 	.word	0x08005f31
 8005a94:	08005f31 	.word	0x08005f31
 8005a98:	08005f39 	.word	0x08005f39
 8005a9c:	08005f39 	.word	0x08005f39
 8005aa0:	08005f39 	.word	0x08005f39
 8005aa4:	08005f39 	.word	0x08005f39
 8005aa8:	08005f41 	.word	0x08005f41
 8005aac:	08005f41 	.word	0x08005f41
 8005ab0:	08005f41 	.word	0x08005f41
 8005ab4:	08005f41 	.word	0x08005f41
 8005ab8:	08005f49 	.word	0x08005f49
 8005abc:	08005f49 	.word	0x08005f49
 8005ac0:	08005f49 	.word	0x08005f49
 8005ac4:	08005f49 	.word	0x08005f49
 8005ac8:	08005f51 	.word	0x08005f51
 8005acc:	08005f51 	.word	0x08005f51
 8005ad0:	08005f51 	.word	0x08005f51
 8005ad4:	08005f51 	.word	0x08005f51
 8005ad8:	08005f59 	.word	0x08005f59
 8005adc:	08005f59 	.word	0x08005f59
 8005ae0:	08005f59 	.word	0x08005f59
 8005ae4:	08005f59 	.word	0x08005f59
 8005ae8:	08005f61 	.word	0x08005f61
 8005aec:	08005f61 	.word	0x08005f61
 8005af0:	08005f61 	.word	0x08005f61
 8005af4:	08005f61 	.word	0x08005f61
 8005af8:	08005f69 	.word	0x08005f69
 8005afc:	08005f69 	.word	0x08005f69
 8005b00:	08005f69 	.word	0x08005f69
 8005b04:	08005f69 	.word	0x08005f69
 8005b08:	08005f71 	.word	0x08005f71
 8005b0c:	08005f71 	.word	0x08005f71
 8005b10:	08005f71 	.word	0x08005f71
 8005b14:	08005f71 	.word	0x08005f71
 8005b18:	08005f79 	.word	0x08005f79
 8005b1c:	08005f79 	.word	0x08005f79
 8005b20:	08005f79 	.word	0x08005f79
 8005b24:	08005f79 	.word	0x08005f79
 8005b28:	08005f81 	.word	0x08005f81
 8005b2c:	08005f81 	.word	0x08005f81
 8005b30:	08005f81 	.word	0x08005f81
 8005b34:	08005f81 	.word	0x08005f81
 8005b38:	08005f89 	.word	0x08005f89
 8005b3c:	08005f89 	.word	0x08005f89
 8005b40:	08005f89 	.word	0x08005f89
 8005b44:	08005f89 	.word	0x08005f89
 8005b48:	08005f91 	.word	0x08005f91
 8005b4c:	08005f91 	.word	0x08005f91
 8005b50:	08005f91 	.word	0x08005f91
 8005b54:	08005f91 	.word	0x08005f91
 8005b58:	08005f99 	.word	0x08005f99
 8005b5c:	08005f99 	.word	0x08005f99
 8005b60:	08005f99 	.word	0x08005f99
 8005b64:	08005f99 	.word	0x08005f99
 8005b68:	08005fa1 	.word	0x08005fa1
 8005b6c:	08005fa1 	.word	0x08005fa1
 8005b70:	08005fa1 	.word	0x08005fa1
 8005b74:	08005fa1 	.word	0x08005fa1
 8005b78:	08005fa9 	.word	0x08005fa9
 8005b7c:	08005fa9 	.word	0x08005fa9
 8005b80:	08005fa9 	.word	0x08005fa9
 8005b84:	08005fa9 	.word	0x08005fa9
 8005b88:	08005fb1 	.word	0x08005fb1
 8005b8c:	08005fb1 	.word	0x08005fb1
 8005b90:	08005fb1 	.word	0x08005fb1
 8005b94:	08005fb1 	.word	0x08005fb1
 8005b98:	08005fb9 	.word	0x08005fb9
 8005b9c:	08005fb9 	.word	0x08005fb9
 8005ba0:	08005fb9 	.word	0x08005fb9
 8005ba4:	08005fb9 	.word	0x08005fb9
 8005ba8:	08005fc1 	.word	0x08005fc1
 8005bac:	08005fc1 	.word	0x08005fc1
 8005bb0:	08005fc1 	.word	0x08005fc1
 8005bb4:	08005fc1 	.word	0x08005fc1
 8005bb8:	08005fc9 	.word	0x08005fc9
 8005bbc:	08005fc9 	.word	0x08005fc9
 8005bc0:	08005fc9 	.word	0x08005fc9
 8005bc4:	08005fc9 	.word	0x08005fc9
 8005bc8:	08005fd1 	.word	0x08005fd1
 8005bcc:	08005fd1 	.word	0x08005fd1
 8005bd0:	08005fd1 	.word	0x08005fd1
 8005bd4:	08005fd1 	.word	0x08005fd1
 8005bd8:	08005fd9 	.word	0x08005fd9
 8005bdc:	08005fd9 	.word	0x08005fd9
 8005be0:	08005fd9 	.word	0x08005fd9
 8005be4:	08005fd9 	.word	0x08005fd9
 8005be8:	08005fe1 	.word	0x08005fe1
 8005bec:	08005fe1 	.word	0x08005fe1
 8005bf0:	08005fe1 	.word	0x08005fe1
 8005bf4:	08005fe1 	.word	0x08005fe1
 8005bf8:	08005fe9 	.word	0x08005fe9
 8005bfc:	08005fe9 	.word	0x08005fe9
 8005c00:	08005fe9 	.word	0x08005fe9
 8005c04:	08005fe9 	.word	0x08005fe9
 8005c08:	08005ff1 	.word	0x08005ff1
 8005c0c:	08005ff1 	.word	0x08005ff1
 8005c10:	08005ff1 	.word	0x08005ff1
 8005c14:	08005ff1 	.word	0x08005ff1
 8005c18:	08005ff9 	.word	0x08005ff9
 8005c1c:	08005ff9 	.word	0x08005ff9
 8005c20:	08005ff9 	.word	0x08005ff9
 8005c24:	08005ff9 	.word	0x08005ff9
 8005c28:	08006001 	.word	0x08006001
 8005c2c:	08006001 	.word	0x08006001
 8005c30:	08006001 	.word	0x08006001
 8005c34:	08006001 	.word	0x08006001
 8005c38:	08006009 	.word	0x08006009
 8005c3c:	08006009 	.word	0x08006009
 8005c40:	08006009 	.word	0x08006009
 8005c44:	08006009 	.word	0x08006009
 8005c48:	08006011 	.word	0x08006011
 8005c4c:	08006011 	.word	0x08006011
 8005c50:	08006011 	.word	0x08006011
 8005c54:	08006011 	.word	0x08006011
 8005c58:	08006019 	.word	0x08006019
 8005c5c:	08006019 	.word	0x08006019
 8005c60:	08006019 	.word	0x08006019
 8005c64:	08006019 	.word	0x08006019
 8005c68:	08006021 	.word	0x08006021
 8005c6c:	08006021 	.word	0x08006021
 8005c70:	08006021 	.word	0x08006021
 8005c74:	08006021 	.word	0x08006021
 8005c78:	08006029 	.word	0x08006029
 8005c7c:	08006029 	.word	0x08006029
 8005c80:	08006029 	.word	0x08006029
 8005c84:	08006029 	.word	0x08006029
 8005c88:	08006031 	.word	0x08006031
 8005c8c:	08006031 	.word	0x08006031
 8005c90:	08006031 	.word	0x08006031
 8005c94:	08006031 	.word	0x08006031
 8005c98:	08006039 	.word	0x08006039
 8005c9c:	08006039 	.word	0x08006039
 8005ca0:	08006039 	.word	0x08006039
 8005ca4:	08006039 	.word	0x08006039
 8005ca8:	08006041 	.word	0x08006041
 8005cac:	08006041 	.word	0x08006041
 8005cb0:	08006041 	.word	0x08006041
 8005cb4:	08006041 	.word	0x08006041
 8005cb8:	08006049 	.word	0x08006049
 8005cbc:	08006049 	.word	0x08006049
 8005cc0:	08006049 	.word	0x08006049
 8005cc4:	08006049 	.word	0x08006049
 8005cc8:	08006051 	.word	0x08006051
 8005ccc:	08006051 	.word	0x08006051
 8005cd0:	08006051 	.word	0x08006051
 8005cd4:	08006051 	.word	0x08006051
 8005cd8:	08006059 	.word	0x08006059
 8005cdc:	08006059 	.word	0x08006059
 8005ce0:	08006059 	.word	0x08006059
 8005ce4:	08006059 	.word	0x08006059
 8005ce8:	08006061 	.word	0x08006061
 8005cec:	08006061 	.word	0x08006061
 8005cf0:	08006061 	.word	0x08006061
 8005cf4:	08006061 	.word	0x08006061
 8005cf8:	08006069 	.word	0x08006069
 8005cfc:	08006069 	.word	0x08006069
 8005d00:	08006069 	.word	0x08006069
 8005d04:	08006069 	.word	0x08006069
 8005d08:	08006071 	.word	0x08006071
 8005d0c:	08006071 	.word	0x08006071
 8005d10:	08006071 	.word	0x08006071
 8005d14:	08006071 	.word	0x08006071
 8005d18:	08006079 	.word	0x08006079
 8005d1c:	08006079 	.word	0x08006079
 8005d20:	08006079 	.word	0x08006079
 8005d24:	08006079 	.word	0x08006079
 8005d28:	08006081 	.word	0x08006081
 8005d2c:	08006081 	.word	0x08006081
 8005d30:	08006081 	.word	0x08006081
 8005d34:	08006081 	.word	0x08006081
 8005d38:	08006089 	.word	0x08006089
 8005d3c:	08006089 	.word	0x08006089
 8005d40:	08006089 	.word	0x08006089
 8005d44:	08006089 	.word	0x08006089
 8005d48:	08006091 	.word	0x08006091
 8005d4c:	08006091 	.word	0x08006091
 8005d50:	08006091 	.word	0x08006091
 8005d54:	08006091 	.word	0x08006091
 8005d58:	08006099 	.word	0x08006099
 8005d5c:	08006099 	.word	0x08006099
 8005d60:	08006099 	.word	0x08006099
 8005d64:	08006099 	.word	0x08006099
 8005d68:	080060a1 	.word	0x080060a1
 8005d6c:	080060a1 	.word	0x080060a1
 8005d70:	080060a1 	.word	0x080060a1
 8005d74:	080060a1 	.word	0x080060a1
 8005d78:	080060a9 	.word	0x080060a9
 8005d7c:	080060a9 	.word	0x080060a9
 8005d80:	080060a9 	.word	0x080060a9
 8005d84:	080060a9 	.word	0x080060a9
 8005d88:	080060b1 	.word	0x080060b1
 8005d8c:	080060b1 	.word	0x080060b1
 8005d90:	080060b1 	.word	0x080060b1
 8005d94:	080060b1 	.word	0x080060b1
 8005d98:	080060b9 	.word	0x080060b9
 8005d9c:	080060b9 	.word	0x080060b9
 8005da0:	080060b9 	.word	0x080060b9
 8005da4:	080060b9 	.word	0x080060b9
 8005da8:	080060c1 	.word	0x080060c1
 8005dac:	080060c1 	.word	0x080060c1
 8005db0:	080060c1 	.word	0x080060c1
 8005db4:	080060c1 	.word	0x080060c1
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8005db8:	2000      	movs	r0, #0
 8005dba:	f7ff fb89 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005dbe:	e184      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	f7ff fb85 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005dc6:	e180      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8005dc8:	2002      	movs	r0, #2
 8005dca:	f7ff fb81 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005dce:	e17c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8005dd0:	2003      	movs	r0, #3
 8005dd2:	f7ff fb7d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005dd6:	e178      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8005dd8:	2004      	movs	r0, #4
 8005dda:	f7ff fb79 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005dde:	e174      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8005de0:	2005      	movs	r0, #5
 8005de2:	f7ff fb75 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005de6:	e170      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8005de8:	2006      	movs	r0, #6
 8005dea:	f7ff fb71 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005dee:	e16c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 8005df0:	2007      	movs	r0, #7
 8005df2:	f7ff fb6d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005df6:	e168      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8005df8:	2008      	movs	r0, #8
 8005dfa:	f7ff fb69 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005dfe:	e164      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 8005e00:	2009      	movs	r0, #9
 8005e02:	f7ff fb65 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e06:	e160      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8005e08:	200a      	movs	r0, #10
 8005e0a:	f7ff fb61 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e0e:	e15c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 8005e10:	200b      	movs	r0, #11
 8005e12:	f7ff fb5d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e16:	e158      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8005e18:	200c      	movs	r0, #12
 8005e1a:	f7ff fb59 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e1e:	e154      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 8005e20:	200d      	movs	r0, #13
 8005e22:	f7ff fb55 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e26:	e150      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8005e28:	200e      	movs	r0, #14
 8005e2a:	f7ff fb51 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e2e:	e14c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 8005e30:	200f      	movs	r0, #15
 8005e32:	f7ff fb4d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e36:	e148      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 8005e38:	2010      	movs	r0, #16
 8005e3a:	f7ff fb49 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e3e:	e144      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 8005e40:	2011      	movs	r0, #17
 8005e42:	f7ff fb45 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e46:	e140      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 8005e48:	2012      	movs	r0, #18
 8005e4a:	f7ff fb41 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e4e:	e13c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 8005e50:	2013      	movs	r0, #19
 8005e52:	f7ff fb3d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e56:	e138      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 8005e58:	2014      	movs	r0, #20
 8005e5a:	f7ff fb39 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e5e:	e134      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 8005e60:	2015      	movs	r0, #21
 8005e62:	f7ff fb35 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e66:	e130      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 8005e68:	2016      	movs	r0, #22
 8005e6a:	f7ff fb31 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e6e:	e12c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 8005e70:	2017      	movs	r0, #23
 8005e72:	f7ff fb2d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e76:	e128      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 8005e78:	2018      	movs	r0, #24
 8005e7a:	f7ff fb29 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e7e:	e124      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 8005e80:	2019      	movs	r0, #25
 8005e82:	f7ff fb25 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e86:	e120      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 8005e88:	201a      	movs	r0, #26
 8005e8a:	f7ff fb21 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e8e:	e11c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 8005e90:	201b      	movs	r0, #27
 8005e92:	f7ff fb1d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e96:	e118      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 8005e98:	201c      	movs	r0, #28
 8005e9a:	f7ff fb19 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005e9e:	e114      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 8005ea0:	201d      	movs	r0, #29
 8005ea2:	f7ff fb15 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ea6:	e110      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 8005ea8:	201e      	movs	r0, #30
 8005eaa:	f7ff fb11 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005eae:	e10c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 8005eb0:	201f      	movs	r0, #31
 8005eb2:	f7ff fb0d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005eb6:	e108      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 8005eb8:	2020      	movs	r0, #32
 8005eba:	f7ff fb09 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ebe:	e104      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 8005ec0:	2021      	movs	r0, #33	; 0x21
 8005ec2:	f7ff fb05 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ec6:	e100      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 8005ec8:	2022      	movs	r0, #34	; 0x22
 8005eca:	f7ff fb01 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ece:	e0fc      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 8005ed0:	2023      	movs	r0, #35	; 0x23
 8005ed2:	f7ff fafd 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ed6:	e0f8      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 8005ed8:	2024      	movs	r0, #36	; 0x24
 8005eda:	f7ff faf9 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ede:	e0f4      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 8005ee0:	2025      	movs	r0, #37	; 0x25
 8005ee2:	f7ff faf5 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ee6:	e0f0      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 8005ee8:	2026      	movs	r0, #38	; 0x26
 8005eea:	f7ff faf1 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005eee:	e0ec      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 8005ef0:	2027      	movs	r0, #39	; 0x27
 8005ef2:	f7ff faed 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ef6:	e0e8      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 8005ef8:	2028      	movs	r0, #40	; 0x28
 8005efa:	f7ff fae9 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005efe:	e0e4      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 8005f00:	2029      	movs	r0, #41	; 0x29
 8005f02:	f7ff fae5 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f06:	e0e0      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 8005f08:	202a      	movs	r0, #42	; 0x2a
 8005f0a:	f7ff fae1 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f0e:	e0dc      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 8005f10:	202b      	movs	r0, #43	; 0x2b
 8005f12:	f7ff fadd 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f16:	e0d8      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 8005f18:	202c      	movs	r0, #44	; 0x2c
 8005f1a:	f7ff fad9 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f1e:	e0d4      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 8005f20:	202d      	movs	r0, #45	; 0x2d
 8005f22:	f7ff fad5 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f26:	e0d0      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 8005f28:	202e      	movs	r0, #46	; 0x2e
 8005f2a:	f7ff fad1 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f2e:	e0cc      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 8005f30:	202f      	movs	r0, #47	; 0x2f
 8005f32:	f7ff facd 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f36:	e0c8      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 8005f38:	2030      	movs	r0, #48	; 0x30
 8005f3a:	f7ff fac9 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f3e:	e0c4      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 8005f40:	2031      	movs	r0, #49	; 0x31
 8005f42:	f7ff fac5 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f46:	e0c0      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 8005f48:	2032      	movs	r0, #50	; 0x32
 8005f4a:	f7ff fac1 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f4e:	e0bc      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 8005f50:	2033      	movs	r0, #51	; 0x33
 8005f52:	f7ff fabd 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f56:	e0b8      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 8005f58:	2034      	movs	r0, #52	; 0x34
 8005f5a:	f7ff fab9 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f5e:	e0b4      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 8005f60:	2035      	movs	r0, #53	; 0x35
 8005f62:	f7ff fab5 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f66:	e0b0      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 8005f68:	2036      	movs	r0, #54	; 0x36
 8005f6a:	f7ff fab1 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f6e:	e0ac      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 8005f70:	2037      	movs	r0, #55	; 0x37
 8005f72:	f7ff faad 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f76:	e0a8      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 8005f78:	2038      	movs	r0, #56	; 0x38
 8005f7a:	f7ff faa9 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f7e:	e0a4      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 8005f80:	2039      	movs	r0, #57	; 0x39
 8005f82:	f7ff faa5 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f86:	e0a0      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 8005f88:	203a      	movs	r0, #58	; 0x3a
 8005f8a:	f7ff faa1 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f8e:	e09c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 8005f90:	203b      	movs	r0, #59	; 0x3b
 8005f92:	f7ff fa9d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f96:	e098      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 8005f98:	203c      	movs	r0, #60	; 0x3c
 8005f9a:	f7ff fa99 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005f9e:	e094      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 8005fa0:	203d      	movs	r0, #61	; 0x3d
 8005fa2:	f7ff fa95 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fa6:	e090      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 8005fa8:	203e      	movs	r0, #62	; 0x3e
 8005faa:	f7ff fa91 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fae:	e08c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 8005fb0:	203f      	movs	r0, #63	; 0x3f
 8005fb2:	f7ff fa8d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fb6:	e088      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 8005fb8:	2040      	movs	r0, #64	; 0x40
 8005fba:	f7ff fa89 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fbe:	e084      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 8005fc0:	2041      	movs	r0, #65	; 0x41
 8005fc2:	f7ff fa85 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fc6:	e080      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 8005fc8:	2042      	movs	r0, #66	; 0x42
 8005fca:	f7ff fa81 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fce:	e07c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 8005fd0:	2043      	movs	r0, #67	; 0x43
 8005fd2:	f7ff fa7d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fd6:	e078      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 8005fd8:	2044      	movs	r0, #68	; 0x44
 8005fda:	f7ff fa79 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fde:	e074      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 8005fe0:	2045      	movs	r0, #69	; 0x45
 8005fe2:	f7ff fa75 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fe6:	e070      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 8005fe8:	2046      	movs	r0, #70	; 0x46
 8005fea:	f7ff fa71 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005fee:	e06c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 8005ff0:	2047      	movs	r0, #71	; 0x47
 8005ff2:	f7ff fa6d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ff6:	e068      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 8005ff8:	2048      	movs	r0, #72	; 0x48
 8005ffa:	f7ff fa69 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8005ffe:	e064      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 8006000:	2049      	movs	r0, #73	; 0x49
 8006002:	f7ff fa65 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006006:	e060      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 8006008:	204a      	movs	r0, #74	; 0x4a
 800600a:	f7ff fa61 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800600e:	e05c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 8006010:	204b      	movs	r0, #75	; 0x4b
 8006012:	f7ff fa5d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006016:	e058      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 8006018:	204c      	movs	r0, #76	; 0x4c
 800601a:	f7ff fa59 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800601e:	e054      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 8006020:	204d      	movs	r0, #77	; 0x4d
 8006022:	f7ff fa55 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006026:	e050      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 8006028:	204e      	movs	r0, #78	; 0x4e
 800602a:	f7ff fa51 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800602e:	e04c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 8006030:	204f      	movs	r0, #79	; 0x4f
 8006032:	f7ff fa4d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006036:	e048      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 8006038:	2050      	movs	r0, #80	; 0x50
 800603a:	f7ff fa49 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800603e:	e044      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 8006040:	2051      	movs	r0, #81	; 0x51
 8006042:	f7ff fa45 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006046:	e040      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 8006048:	2052      	movs	r0, #82	; 0x52
 800604a:	f7ff fa41 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800604e:	e03c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 8006050:	2053      	movs	r0, #83	; 0x53
 8006052:	f7ff fa3d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006056:	e038      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 8006058:	2054      	movs	r0, #84	; 0x54
 800605a:	f7ff fa39 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800605e:	e034      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 8006060:	2055      	movs	r0, #85	; 0x55
 8006062:	f7ff fa35 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006066:	e030      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 8006068:	2056      	movs	r0, #86	; 0x56
 800606a:	f7ff fa31 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800606e:	e02c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 8006070:	2057      	movs	r0, #87	; 0x57
 8006072:	f7ff fa2d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006076:	e028      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 8006078:	2058      	movs	r0, #88	; 0x58
 800607a:	f7ff fa29 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800607e:	e024      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 8006080:	2059      	movs	r0, #89	; 0x59
 8006082:	f7ff fa25 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006086:	e020      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 8006088:	205a      	movs	r0, #90	; 0x5a
 800608a:	f7ff fa21 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800608e:	e01c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 8006090:	205b      	movs	r0, #91	; 0x5b
 8006092:	f7ff fa1d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 8006096:	e018      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 8006098:	205c      	movs	r0, #92	; 0x5c
 800609a:	f7ff fa19 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 800609e:	e014      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 80060a0:	205d      	movs	r0, #93	; 0x5d
 80060a2:	f7ff fa15 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 80060a6:	e010      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 80060a8:	205e      	movs	r0, #94	; 0x5e
 80060aa:	f7ff fa11 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 80060ae:	e00c      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 80060b0:	205f      	movs	r0, #95	; 0x5f
 80060b2:	f7ff fa0d 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 80060b6:	e008      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 80060b8:	2060      	movs	r0, #96	; 0x60
 80060ba:	f7ff fa09 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 80060be:	e004      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 80060c0:	2061      	movs	r0, #97	; 0x61
 80060c2:	f7ff fa05 	bl	80054d0 <VPP_ApplyPresetToSignal>
			break;
 80060c6:	e000      	b.n	80060ca <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 80060c8:	bf00      	nop
	}
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop

080060d4 <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80060e4:	f200 849a 	bhi.w	8006a1c <VPP_ModifySyncOutput+0x948>
 80060e8:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <VPP_ModifySyncOutput+0x1c>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	0800670d 	.word	0x0800670d
 80060f4:	0800670d 	.word	0x0800670d
 80060f8:	0800670d 	.word	0x0800670d
 80060fc:	08006715 	.word	0x08006715
 8006100:	08006715 	.word	0x08006715
 8006104:	08006715 	.word	0x08006715
 8006108:	08006715 	.word	0x08006715
 800610c:	0800671d 	.word	0x0800671d
 8006110:	0800671d 	.word	0x0800671d
 8006114:	0800671d 	.word	0x0800671d
 8006118:	0800671d 	.word	0x0800671d
 800611c:	08006725 	.word	0x08006725
 8006120:	08006725 	.word	0x08006725
 8006124:	08006725 	.word	0x08006725
 8006128:	08006725 	.word	0x08006725
 800612c:	0800672d 	.word	0x0800672d
 8006130:	0800672d 	.word	0x0800672d
 8006134:	0800672d 	.word	0x0800672d
 8006138:	0800672d 	.word	0x0800672d
 800613c:	08006735 	.word	0x08006735
 8006140:	08006735 	.word	0x08006735
 8006144:	08006735 	.word	0x08006735
 8006148:	08006735 	.word	0x08006735
 800614c:	0800673d 	.word	0x0800673d
 8006150:	0800673d 	.word	0x0800673d
 8006154:	0800673d 	.word	0x0800673d
 8006158:	0800673d 	.word	0x0800673d
 800615c:	08006745 	.word	0x08006745
 8006160:	08006745 	.word	0x08006745
 8006164:	08006745 	.word	0x08006745
 8006168:	08006745 	.word	0x08006745
 800616c:	0800674d 	.word	0x0800674d
 8006170:	0800674d 	.word	0x0800674d
 8006174:	0800674d 	.word	0x0800674d
 8006178:	0800674d 	.word	0x0800674d
 800617c:	08006755 	.word	0x08006755
 8006180:	08006755 	.word	0x08006755
 8006184:	08006755 	.word	0x08006755
 8006188:	08006755 	.word	0x08006755
 800618c:	0800675d 	.word	0x0800675d
 8006190:	0800675d 	.word	0x0800675d
 8006194:	0800675d 	.word	0x0800675d
 8006198:	0800675d 	.word	0x0800675d
 800619c:	08006765 	.word	0x08006765
 80061a0:	08006765 	.word	0x08006765
 80061a4:	08006765 	.word	0x08006765
 80061a8:	08006765 	.word	0x08006765
 80061ac:	0800676d 	.word	0x0800676d
 80061b0:	0800676d 	.word	0x0800676d
 80061b4:	0800676d 	.word	0x0800676d
 80061b8:	0800676d 	.word	0x0800676d
 80061bc:	08006775 	.word	0x08006775
 80061c0:	08006775 	.word	0x08006775
 80061c4:	08006775 	.word	0x08006775
 80061c8:	08006775 	.word	0x08006775
 80061cc:	0800677d 	.word	0x0800677d
 80061d0:	0800677d 	.word	0x0800677d
 80061d4:	0800677d 	.word	0x0800677d
 80061d8:	0800677d 	.word	0x0800677d
 80061dc:	08006785 	.word	0x08006785
 80061e0:	08006785 	.word	0x08006785
 80061e4:	08006785 	.word	0x08006785
 80061e8:	08006785 	.word	0x08006785
 80061ec:	0800678d 	.word	0x0800678d
 80061f0:	0800678d 	.word	0x0800678d
 80061f4:	0800678d 	.word	0x0800678d
 80061f8:	0800678d 	.word	0x0800678d
 80061fc:	08006795 	.word	0x08006795
 8006200:	08006795 	.word	0x08006795
 8006204:	08006795 	.word	0x08006795
 8006208:	08006795 	.word	0x08006795
 800620c:	0800679d 	.word	0x0800679d
 8006210:	0800679d 	.word	0x0800679d
 8006214:	0800679d 	.word	0x0800679d
 8006218:	0800679d 	.word	0x0800679d
 800621c:	080067a5 	.word	0x080067a5
 8006220:	080067a5 	.word	0x080067a5
 8006224:	080067a5 	.word	0x080067a5
 8006228:	080067a5 	.word	0x080067a5
 800622c:	080067ad 	.word	0x080067ad
 8006230:	080067ad 	.word	0x080067ad
 8006234:	080067ad 	.word	0x080067ad
 8006238:	080067ad 	.word	0x080067ad
 800623c:	080067b5 	.word	0x080067b5
 8006240:	080067b5 	.word	0x080067b5
 8006244:	080067b5 	.word	0x080067b5
 8006248:	080067b5 	.word	0x080067b5
 800624c:	080067bd 	.word	0x080067bd
 8006250:	080067bd 	.word	0x080067bd
 8006254:	080067bd 	.word	0x080067bd
 8006258:	080067bd 	.word	0x080067bd
 800625c:	080067c5 	.word	0x080067c5
 8006260:	080067c5 	.word	0x080067c5
 8006264:	080067c5 	.word	0x080067c5
 8006268:	080067c5 	.word	0x080067c5
 800626c:	080067cd 	.word	0x080067cd
 8006270:	080067cd 	.word	0x080067cd
 8006274:	080067cd 	.word	0x080067cd
 8006278:	080067cd 	.word	0x080067cd
 800627c:	080067d5 	.word	0x080067d5
 8006280:	080067d5 	.word	0x080067d5
 8006284:	080067d5 	.word	0x080067d5
 8006288:	080067d5 	.word	0x080067d5
 800628c:	080067dd 	.word	0x080067dd
 8006290:	080067dd 	.word	0x080067dd
 8006294:	080067dd 	.word	0x080067dd
 8006298:	080067dd 	.word	0x080067dd
 800629c:	080067e5 	.word	0x080067e5
 80062a0:	080067e5 	.word	0x080067e5
 80062a4:	080067e5 	.word	0x080067e5
 80062a8:	080067e5 	.word	0x080067e5
 80062ac:	080067ed 	.word	0x080067ed
 80062b0:	080067ed 	.word	0x080067ed
 80062b4:	080067ed 	.word	0x080067ed
 80062b8:	080067ed 	.word	0x080067ed
 80062bc:	080067f5 	.word	0x080067f5
 80062c0:	080067f5 	.word	0x080067f5
 80062c4:	080067f5 	.word	0x080067f5
 80062c8:	080067f5 	.word	0x080067f5
 80062cc:	080067fd 	.word	0x080067fd
 80062d0:	080067fd 	.word	0x080067fd
 80062d4:	080067fd 	.word	0x080067fd
 80062d8:	080067fd 	.word	0x080067fd
 80062dc:	08006805 	.word	0x08006805
 80062e0:	08006805 	.word	0x08006805
 80062e4:	08006805 	.word	0x08006805
 80062e8:	08006805 	.word	0x08006805
 80062ec:	0800680d 	.word	0x0800680d
 80062f0:	0800680d 	.word	0x0800680d
 80062f4:	0800680d 	.word	0x0800680d
 80062f8:	0800680d 	.word	0x0800680d
 80062fc:	08006815 	.word	0x08006815
 8006300:	08006815 	.word	0x08006815
 8006304:	08006815 	.word	0x08006815
 8006308:	08006815 	.word	0x08006815
 800630c:	0800681d 	.word	0x0800681d
 8006310:	0800681d 	.word	0x0800681d
 8006314:	0800681d 	.word	0x0800681d
 8006318:	0800681d 	.word	0x0800681d
 800631c:	08006825 	.word	0x08006825
 8006320:	08006825 	.word	0x08006825
 8006324:	08006825 	.word	0x08006825
 8006328:	08006825 	.word	0x08006825
 800632c:	0800682d 	.word	0x0800682d
 8006330:	0800682d 	.word	0x0800682d
 8006334:	0800682d 	.word	0x0800682d
 8006338:	0800682d 	.word	0x0800682d
 800633c:	08006835 	.word	0x08006835
 8006340:	08006835 	.word	0x08006835
 8006344:	08006835 	.word	0x08006835
 8006348:	08006835 	.word	0x08006835
 800634c:	0800683d 	.word	0x0800683d
 8006350:	0800683d 	.word	0x0800683d
 8006354:	0800683d 	.word	0x0800683d
 8006358:	0800683d 	.word	0x0800683d
 800635c:	08006845 	.word	0x08006845
 8006360:	08006845 	.word	0x08006845
 8006364:	08006845 	.word	0x08006845
 8006368:	08006845 	.word	0x08006845
 800636c:	0800684d 	.word	0x0800684d
 8006370:	0800684d 	.word	0x0800684d
 8006374:	0800684d 	.word	0x0800684d
 8006378:	0800684d 	.word	0x0800684d
 800637c:	08006855 	.word	0x08006855
 8006380:	08006855 	.word	0x08006855
 8006384:	08006855 	.word	0x08006855
 8006388:	08006855 	.word	0x08006855
 800638c:	0800685d 	.word	0x0800685d
 8006390:	0800685d 	.word	0x0800685d
 8006394:	0800685d 	.word	0x0800685d
 8006398:	0800685d 	.word	0x0800685d
 800639c:	08006865 	.word	0x08006865
 80063a0:	08006865 	.word	0x08006865
 80063a4:	08006865 	.word	0x08006865
 80063a8:	08006865 	.word	0x08006865
 80063ac:	0800686d 	.word	0x0800686d
 80063b0:	0800686d 	.word	0x0800686d
 80063b4:	0800686d 	.word	0x0800686d
 80063b8:	0800686d 	.word	0x0800686d
 80063bc:	08006875 	.word	0x08006875
 80063c0:	08006875 	.word	0x08006875
 80063c4:	08006875 	.word	0x08006875
 80063c8:	08006875 	.word	0x08006875
 80063cc:	0800687d 	.word	0x0800687d
 80063d0:	0800687d 	.word	0x0800687d
 80063d4:	0800687d 	.word	0x0800687d
 80063d8:	0800687d 	.word	0x0800687d
 80063dc:	08006885 	.word	0x08006885
 80063e0:	08006885 	.word	0x08006885
 80063e4:	08006885 	.word	0x08006885
 80063e8:	08006885 	.word	0x08006885
 80063ec:	0800688d 	.word	0x0800688d
 80063f0:	0800688d 	.word	0x0800688d
 80063f4:	0800688d 	.word	0x0800688d
 80063f8:	0800688d 	.word	0x0800688d
 80063fc:	08006895 	.word	0x08006895
 8006400:	08006895 	.word	0x08006895
 8006404:	08006895 	.word	0x08006895
 8006408:	08006895 	.word	0x08006895
 800640c:	0800689d 	.word	0x0800689d
 8006410:	0800689d 	.word	0x0800689d
 8006414:	0800689d 	.word	0x0800689d
 8006418:	0800689d 	.word	0x0800689d
 800641c:	080068a5 	.word	0x080068a5
 8006420:	080068a5 	.word	0x080068a5
 8006424:	080068a5 	.word	0x080068a5
 8006428:	080068a5 	.word	0x080068a5
 800642c:	080068ad 	.word	0x080068ad
 8006430:	080068ad 	.word	0x080068ad
 8006434:	080068ad 	.word	0x080068ad
 8006438:	080068ad 	.word	0x080068ad
 800643c:	080068b5 	.word	0x080068b5
 8006440:	080068b5 	.word	0x080068b5
 8006444:	080068b5 	.word	0x080068b5
 8006448:	080068b5 	.word	0x080068b5
 800644c:	080068bd 	.word	0x080068bd
 8006450:	080068bd 	.word	0x080068bd
 8006454:	080068bd 	.word	0x080068bd
 8006458:	080068bd 	.word	0x080068bd
 800645c:	080068c5 	.word	0x080068c5
 8006460:	080068c5 	.word	0x080068c5
 8006464:	080068c5 	.word	0x080068c5
 8006468:	080068c5 	.word	0x080068c5
 800646c:	080068cd 	.word	0x080068cd
 8006470:	080068cd 	.word	0x080068cd
 8006474:	080068cd 	.word	0x080068cd
 8006478:	080068cd 	.word	0x080068cd
 800647c:	080068d5 	.word	0x080068d5
 8006480:	080068d5 	.word	0x080068d5
 8006484:	080068d5 	.word	0x080068d5
 8006488:	080068d5 	.word	0x080068d5
 800648c:	080068dd 	.word	0x080068dd
 8006490:	080068dd 	.word	0x080068dd
 8006494:	080068dd 	.word	0x080068dd
 8006498:	080068dd 	.word	0x080068dd
 800649c:	080068e5 	.word	0x080068e5
 80064a0:	080068e5 	.word	0x080068e5
 80064a4:	080068e5 	.word	0x080068e5
 80064a8:	080068e5 	.word	0x080068e5
 80064ac:	080068ed 	.word	0x080068ed
 80064b0:	080068ed 	.word	0x080068ed
 80064b4:	080068ed 	.word	0x080068ed
 80064b8:	080068ed 	.word	0x080068ed
 80064bc:	080068f5 	.word	0x080068f5
 80064c0:	080068f5 	.word	0x080068f5
 80064c4:	080068f5 	.word	0x080068f5
 80064c8:	080068f5 	.word	0x080068f5
 80064cc:	080068fd 	.word	0x080068fd
 80064d0:	080068fd 	.word	0x080068fd
 80064d4:	080068fd 	.word	0x080068fd
 80064d8:	080068fd 	.word	0x080068fd
 80064dc:	08006905 	.word	0x08006905
 80064e0:	08006905 	.word	0x08006905
 80064e4:	08006905 	.word	0x08006905
 80064e8:	08006905 	.word	0x08006905
 80064ec:	0800690d 	.word	0x0800690d
 80064f0:	0800690d 	.word	0x0800690d
 80064f4:	0800690d 	.word	0x0800690d
 80064f8:	0800690d 	.word	0x0800690d
 80064fc:	08006915 	.word	0x08006915
 8006500:	08006915 	.word	0x08006915
 8006504:	08006915 	.word	0x08006915
 8006508:	08006915 	.word	0x08006915
 800650c:	0800691d 	.word	0x0800691d
 8006510:	0800691d 	.word	0x0800691d
 8006514:	0800691d 	.word	0x0800691d
 8006518:	0800691d 	.word	0x0800691d
 800651c:	08006925 	.word	0x08006925
 8006520:	08006925 	.word	0x08006925
 8006524:	08006925 	.word	0x08006925
 8006528:	08006925 	.word	0x08006925
 800652c:	0800692d 	.word	0x0800692d
 8006530:	0800692d 	.word	0x0800692d
 8006534:	0800692d 	.word	0x0800692d
 8006538:	0800692d 	.word	0x0800692d
 800653c:	08006935 	.word	0x08006935
 8006540:	08006935 	.word	0x08006935
 8006544:	08006935 	.word	0x08006935
 8006548:	08006935 	.word	0x08006935
 800654c:	0800693d 	.word	0x0800693d
 8006550:	0800693d 	.word	0x0800693d
 8006554:	0800693d 	.word	0x0800693d
 8006558:	0800693d 	.word	0x0800693d
 800655c:	08006945 	.word	0x08006945
 8006560:	08006945 	.word	0x08006945
 8006564:	08006945 	.word	0x08006945
 8006568:	08006945 	.word	0x08006945
 800656c:	0800694d 	.word	0x0800694d
 8006570:	0800694d 	.word	0x0800694d
 8006574:	0800694d 	.word	0x0800694d
 8006578:	0800694d 	.word	0x0800694d
 800657c:	08006955 	.word	0x08006955
 8006580:	08006955 	.word	0x08006955
 8006584:	08006955 	.word	0x08006955
 8006588:	08006955 	.word	0x08006955
 800658c:	0800695d 	.word	0x0800695d
 8006590:	0800695d 	.word	0x0800695d
 8006594:	0800695d 	.word	0x0800695d
 8006598:	0800695d 	.word	0x0800695d
 800659c:	08006965 	.word	0x08006965
 80065a0:	08006965 	.word	0x08006965
 80065a4:	08006965 	.word	0x08006965
 80065a8:	08006965 	.word	0x08006965
 80065ac:	0800696d 	.word	0x0800696d
 80065b0:	0800696d 	.word	0x0800696d
 80065b4:	0800696d 	.word	0x0800696d
 80065b8:	0800696d 	.word	0x0800696d
 80065bc:	08006975 	.word	0x08006975
 80065c0:	08006975 	.word	0x08006975
 80065c4:	08006975 	.word	0x08006975
 80065c8:	08006975 	.word	0x08006975
 80065cc:	0800697d 	.word	0x0800697d
 80065d0:	0800697d 	.word	0x0800697d
 80065d4:	0800697d 	.word	0x0800697d
 80065d8:	0800697d 	.word	0x0800697d
 80065dc:	08006985 	.word	0x08006985
 80065e0:	08006985 	.word	0x08006985
 80065e4:	08006985 	.word	0x08006985
 80065e8:	08006985 	.word	0x08006985
 80065ec:	0800698d 	.word	0x0800698d
 80065f0:	0800698d 	.word	0x0800698d
 80065f4:	0800698d 	.word	0x0800698d
 80065f8:	0800698d 	.word	0x0800698d
 80065fc:	08006995 	.word	0x08006995
 8006600:	08006995 	.word	0x08006995
 8006604:	08006995 	.word	0x08006995
 8006608:	08006995 	.word	0x08006995
 800660c:	0800699d 	.word	0x0800699d
 8006610:	0800699d 	.word	0x0800699d
 8006614:	0800699d 	.word	0x0800699d
 8006618:	0800699d 	.word	0x0800699d
 800661c:	080069a5 	.word	0x080069a5
 8006620:	080069a5 	.word	0x080069a5
 8006624:	080069a5 	.word	0x080069a5
 8006628:	080069a5 	.word	0x080069a5
 800662c:	080069ad 	.word	0x080069ad
 8006630:	080069ad 	.word	0x080069ad
 8006634:	080069ad 	.word	0x080069ad
 8006638:	080069ad 	.word	0x080069ad
 800663c:	080069b5 	.word	0x080069b5
 8006640:	080069b5 	.word	0x080069b5
 8006644:	080069b5 	.word	0x080069b5
 8006648:	080069b5 	.word	0x080069b5
 800664c:	080069bd 	.word	0x080069bd
 8006650:	080069bd 	.word	0x080069bd
 8006654:	080069bd 	.word	0x080069bd
 8006658:	080069bd 	.word	0x080069bd
 800665c:	080069c5 	.word	0x080069c5
 8006660:	080069c5 	.word	0x080069c5
 8006664:	080069c5 	.word	0x080069c5
 8006668:	080069c5 	.word	0x080069c5
 800666c:	080069cd 	.word	0x080069cd
 8006670:	080069cd 	.word	0x080069cd
 8006674:	080069cd 	.word	0x080069cd
 8006678:	080069cd 	.word	0x080069cd
 800667c:	080069d5 	.word	0x080069d5
 8006680:	080069d5 	.word	0x080069d5
 8006684:	080069d5 	.word	0x080069d5
 8006688:	080069d5 	.word	0x080069d5
 800668c:	080069dd 	.word	0x080069dd
 8006690:	080069dd 	.word	0x080069dd
 8006694:	080069dd 	.word	0x080069dd
 8006698:	080069dd 	.word	0x080069dd
 800669c:	080069e5 	.word	0x080069e5
 80066a0:	080069e5 	.word	0x080069e5
 80066a4:	080069e5 	.word	0x080069e5
 80066a8:	080069e5 	.word	0x080069e5
 80066ac:	080069ed 	.word	0x080069ed
 80066b0:	080069ed 	.word	0x080069ed
 80066b4:	080069ed 	.word	0x080069ed
 80066b8:	080069ed 	.word	0x080069ed
 80066bc:	080069f5 	.word	0x080069f5
 80066c0:	080069f5 	.word	0x080069f5
 80066c4:	080069f5 	.word	0x080069f5
 80066c8:	080069f5 	.word	0x080069f5
 80066cc:	080069fd 	.word	0x080069fd
 80066d0:	080069fd 	.word	0x080069fd
 80066d4:	080069fd 	.word	0x080069fd
 80066d8:	080069fd 	.word	0x080069fd
 80066dc:	08006a05 	.word	0x08006a05
 80066e0:	08006a05 	.word	0x08006a05
 80066e4:	08006a05 	.word	0x08006a05
 80066e8:	08006a05 	.word	0x08006a05
 80066ec:	08006a0d 	.word	0x08006a0d
 80066f0:	08006a0d 	.word	0x08006a0d
 80066f4:	08006a0d 	.word	0x08006a0d
 80066f8:	08006a0d 	.word	0x08006a0d
 80066fc:	08006a15 	.word	0x08006a15
 8006700:	08006a15 	.word	0x08006a15
 8006704:	08006a15 	.word	0x08006a15
 8006708:	08006a15 	.word	0x08006a15
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 800670c:	2000      	movs	r0, #0
 800670e:	f7fe ff0d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006712:	e184      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 8006714:	2001      	movs	r0, #1
 8006716:	f7fe ff09 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800671a:	e180      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 800671c:	2002      	movs	r0, #2
 800671e:	f7fe ff05 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006722:	e17c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 8006724:	2003      	movs	r0, #3
 8006726:	f7fe ff01 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800672a:	e178      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 800672c:	2004      	movs	r0, #4
 800672e:	f7fe fefd 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006732:	e174      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 8006734:	2005      	movs	r0, #5
 8006736:	f7fe fef9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800673a:	e170      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 800673c:	2006      	movs	r0, #6
 800673e:	f7fe fef5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006742:	e16c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 8006744:	2007      	movs	r0, #7
 8006746:	f7fe fef1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800674a:	e168      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 800674c:	2008      	movs	r0, #8
 800674e:	f7fe feed 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006752:	e164      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8006754:	2009      	movs	r0, #9
 8006756:	f7fe fee9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800675a:	e160      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 800675c:	200a      	movs	r0, #10
 800675e:	f7fe fee5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006762:	e15c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8006764:	200b      	movs	r0, #11
 8006766:	f7fe fee1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800676a:	e158      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 800676c:	200c      	movs	r0, #12
 800676e:	f7fe fedd 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006772:	e154      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8006774:	200d      	movs	r0, #13
 8006776:	f7fe fed9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800677a:	e150      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 800677c:	200e      	movs	r0, #14
 800677e:	f7fe fed5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006782:	e14c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8006784:	200f      	movs	r0, #15
 8006786:	f7fe fed1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800678a:	e148      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 800678c:	2010      	movs	r0, #16
 800678e:	f7fe fecd 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006792:	e144      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 8006794:	2011      	movs	r0, #17
 8006796:	f7fe fec9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800679a:	e140      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 800679c:	2012      	movs	r0, #18
 800679e:	f7fe fec5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067a2:	e13c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 80067a4:	2013      	movs	r0, #19
 80067a6:	f7fe fec1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067aa:	e138      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 80067ac:	2014      	movs	r0, #20
 80067ae:	f7fe febd 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067b2:	e134      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 80067b4:	2015      	movs	r0, #21
 80067b6:	f7fe feb9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067ba:	e130      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 80067bc:	2016      	movs	r0, #22
 80067be:	f7fe feb5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067c2:	e12c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 80067c4:	2017      	movs	r0, #23
 80067c6:	f7fe feb1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067ca:	e128      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 80067cc:	2018      	movs	r0, #24
 80067ce:	f7fe fead 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067d2:	e124      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 80067d4:	2019      	movs	r0, #25
 80067d6:	f7fe fea9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067da:	e120      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 80067dc:	201a      	movs	r0, #26
 80067de:	f7fe fea5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067e2:	e11c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 80067e4:	201b      	movs	r0, #27
 80067e6:	f7fe fea1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067ea:	e118      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 80067ec:	201c      	movs	r0, #28
 80067ee:	f7fe fe9d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067f2:	e114      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 80067f4:	201d      	movs	r0, #29
 80067f6:	f7fe fe99 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80067fa:	e110      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 80067fc:	201e      	movs	r0, #30
 80067fe:	f7fe fe95 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006802:	e10c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 8006804:	201f      	movs	r0, #31
 8006806:	f7fe fe91 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800680a:	e108      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 800680c:	2020      	movs	r0, #32
 800680e:	f7fe fe8d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006812:	e104      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 8006814:	2021      	movs	r0, #33	; 0x21
 8006816:	f7fe fe89 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800681a:	e100      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 800681c:	2022      	movs	r0, #34	; 0x22
 800681e:	f7fe fe85 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006822:	e0fc      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 8006824:	2023      	movs	r0, #35	; 0x23
 8006826:	f7fe fe81 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800682a:	e0f8      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 800682c:	2024      	movs	r0, #36	; 0x24
 800682e:	f7fe fe7d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006832:	e0f4      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8006834:	2025      	movs	r0, #37	; 0x25
 8006836:	f7fe fe79 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800683a:	e0f0      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 800683c:	2026      	movs	r0, #38	; 0x26
 800683e:	f7fe fe75 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006842:	e0ec      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8006844:	2027      	movs	r0, #39	; 0x27
 8006846:	f7fe fe71 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800684a:	e0e8      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 800684c:	2028      	movs	r0, #40	; 0x28
 800684e:	f7fe fe6d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006852:	e0e4      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8006854:	2029      	movs	r0, #41	; 0x29
 8006856:	f7fe fe69 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800685a:	e0e0      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 800685c:	202a      	movs	r0, #42	; 0x2a
 800685e:	f7fe fe65 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006862:	e0dc      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8006864:	202b      	movs	r0, #43	; 0x2b
 8006866:	f7fe fe61 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800686a:	e0d8      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 800686c:	202c      	movs	r0, #44	; 0x2c
 800686e:	f7fe fe5d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006872:	e0d4      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8006874:	202d      	movs	r0, #45	; 0x2d
 8006876:	f7fe fe59 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800687a:	e0d0      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 800687c:	202e      	movs	r0, #46	; 0x2e
 800687e:	f7fe fe55 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006882:	e0cc      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8006884:	202f      	movs	r0, #47	; 0x2f
 8006886:	f7fe fe51 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800688a:	e0c8      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 800688c:	2030      	movs	r0, #48	; 0x30
 800688e:	f7fe fe4d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006892:	e0c4      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 8006894:	2031      	movs	r0, #49	; 0x31
 8006896:	f7fe fe49 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800689a:	e0c0      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 800689c:	2032      	movs	r0, #50	; 0x32
 800689e:	f7fe fe45 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068a2:	e0bc      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 80068a4:	2033      	movs	r0, #51	; 0x33
 80068a6:	f7fe fe41 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068aa:	e0b8      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 80068ac:	2034      	movs	r0, #52	; 0x34
 80068ae:	f7fe fe3d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068b2:	e0b4      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 80068b4:	2035      	movs	r0, #53	; 0x35
 80068b6:	f7fe fe39 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068ba:	e0b0      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 80068bc:	2036      	movs	r0, #54	; 0x36
 80068be:	f7fe fe35 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068c2:	e0ac      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 80068c4:	2037      	movs	r0, #55	; 0x37
 80068c6:	f7fe fe31 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068ca:	e0a8      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 80068cc:	2038      	movs	r0, #56	; 0x38
 80068ce:	f7fe fe2d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068d2:	e0a4      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 80068d4:	2039      	movs	r0, #57	; 0x39
 80068d6:	f7fe fe29 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068da:	e0a0      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 80068dc:	203a      	movs	r0, #58	; 0x3a
 80068de:	f7fe fe25 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068e2:	e09c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 80068e4:	203b      	movs	r0, #59	; 0x3b
 80068e6:	f7fe fe21 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068ea:	e098      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 80068ec:	203c      	movs	r0, #60	; 0x3c
 80068ee:	f7fe fe1d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068f2:	e094      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 80068f4:	203d      	movs	r0, #61	; 0x3d
 80068f6:	f7fe fe19 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80068fa:	e090      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 80068fc:	203e      	movs	r0, #62	; 0x3e
 80068fe:	f7fe fe15 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006902:	e08c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8006904:	203f      	movs	r0, #63	; 0x3f
 8006906:	f7fe fe11 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800690a:	e088      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 800690c:	2040      	movs	r0, #64	; 0x40
 800690e:	f7fe fe0d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006912:	e084      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8006914:	2041      	movs	r0, #65	; 0x41
 8006916:	f7fe fe09 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800691a:	e080      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 800691c:	2042      	movs	r0, #66	; 0x42
 800691e:	f7fe fe05 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006922:	e07c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8006924:	2043      	movs	r0, #67	; 0x43
 8006926:	f7fe fe01 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800692a:	e078      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 800692c:	2044      	movs	r0, #68	; 0x44
 800692e:	f7fe fdfd 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006932:	e074      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 8006934:	2045      	movs	r0, #69	; 0x45
 8006936:	f7fe fdf9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800693a:	e070      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 800693c:	2046      	movs	r0, #70	; 0x46
 800693e:	f7fe fdf5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006942:	e06c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 8006944:	2047      	movs	r0, #71	; 0x47
 8006946:	f7fe fdf1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800694a:	e068      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 800694c:	2048      	movs	r0, #72	; 0x48
 800694e:	f7fe fded 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006952:	e064      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 8006954:	2049      	movs	r0, #73	; 0x49
 8006956:	f7fe fde9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800695a:	e060      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 800695c:	204a      	movs	r0, #74	; 0x4a
 800695e:	f7fe fde5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006962:	e05c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 8006964:	204b      	movs	r0, #75	; 0x4b
 8006966:	f7fe fde1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800696a:	e058      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 800696c:	204c      	movs	r0, #76	; 0x4c
 800696e:	f7fe fddd 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006972:	e054      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 8006974:	204d      	movs	r0, #77	; 0x4d
 8006976:	f7fe fdd9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800697a:	e050      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 800697c:	204e      	movs	r0, #78	; 0x4e
 800697e:	f7fe fdd5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006982:	e04c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 8006984:	204f      	movs	r0, #79	; 0x4f
 8006986:	f7fe fdd1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800698a:	e048      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 800698c:	2050      	movs	r0, #80	; 0x50
 800698e:	f7fe fdcd 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006992:	e044      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 8006994:	2051      	movs	r0, #81	; 0x51
 8006996:	f7fe fdc9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 800699a:	e040      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 800699c:	2052      	movs	r0, #82	; 0x52
 800699e:	f7fe fdc5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069a2:	e03c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 80069a4:	2053      	movs	r0, #83	; 0x53
 80069a6:	f7fe fdc1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069aa:	e038      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 80069ac:	2054      	movs	r0, #84	; 0x54
 80069ae:	f7fe fdbd 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069b2:	e034      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 80069b4:	2055      	movs	r0, #85	; 0x55
 80069b6:	f7fe fdb9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069ba:	e030      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 80069bc:	2056      	movs	r0, #86	; 0x56
 80069be:	f7fe fdb5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069c2:	e02c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 80069c4:	2057      	movs	r0, #87	; 0x57
 80069c6:	f7fe fdb1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069ca:	e028      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 80069cc:	2058      	movs	r0, #88	; 0x58
 80069ce:	f7fe fdad 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069d2:	e024      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 80069d4:	2059      	movs	r0, #89	; 0x59
 80069d6:	f7fe fda9 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069da:	e020      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 80069dc:	205a      	movs	r0, #90	; 0x5a
 80069de:	f7fe fda5 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069e2:	e01c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 80069e4:	205b      	movs	r0, #91	; 0x5b
 80069e6:	f7fe fda1 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069ea:	e018      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 80069ec:	205c      	movs	r0, #92	; 0x5c
 80069ee:	f7fe fd9d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069f2:	e014      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 80069f4:	205d      	movs	r0, #93	; 0x5d
 80069f6:	f7fe fd99 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 80069fa:	e010      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 80069fc:	205e      	movs	r0, #94	; 0x5e
 80069fe:	f7fe fd95 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006a02:	e00c      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8006a04:	205f      	movs	r0, #95	; 0x5f
 8006a06:	f7fe fd91 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006a0a:	e008      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8006a0c:	2060      	movs	r0, #96	; 0x60
 8006a0e:	f7fe fd8d 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006a12:	e004      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8006a14:	2061      	movs	r0, #97	; 0x61
 8006a16:	f7fe fd89 	bl	800552c <VPP_ApplyPresetToSync>
			break;
 8006a1a:	e000      	b.n	8006a1e <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8006a1c:	bf00      	nop
	}
}
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop

08006a28 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	; 0x30
 8006a2c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006a3a:	1d3b      	adds	r3, r7, #4
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f007 fd93 	bl	800e56c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006a46:	4b32      	ldr	r3, [pc, #200]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006a4e:	4b30      	ldr	r3, [pc, #192]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006a56:	4b2e      	ldr	r3, [pc, #184]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006a5c:	4b2c      	ldr	r3, [pc, #176]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006a62:	4b2b      	ldr	r3, [pc, #172]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006a68:	4b29      	ldr	r3, [pc, #164]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006a6e:	4b28      	ldr	r3, [pc, #160]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a70:	2204      	movs	r2, #4
 8006a72:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006a74:	4b26      	ldr	r3, [pc, #152]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006a7a:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006a80:	4b23      	ldr	r3, [pc, #140]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006a86:	4b22      	ldr	r3, [pc, #136]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006a8e:	4b20      	ldr	r3, [pc, #128]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006a94:	4b1e      	ldr	r3, [pc, #120]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006aa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006aa8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006aaa:	4b19      	ldr	r3, [pc, #100]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006ab2:	4817      	ldr	r0, [pc, #92]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006ab4:	f001 fee2 	bl	800887c <HAL_ADC_Init>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006abe:	f000 feaf 	bl	8007820 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aca:	4619      	mov	r1, r3
 8006acc:	4810      	ldr	r0, [pc, #64]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006ace:	f002 fc6b 	bl	80093a8 <HAL_ADCEx_MultiModeConfigChannel>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006ad8:	f000 fea2 	bl	8007820 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <MX_ADC1_Init+0xec>)
 8006ade:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006ae0:	2306      	movs	r3, #6
 8006ae2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006ae8:	237f      	movs	r3, #127	; 0x7f
 8006aea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006aec:	2304      	movs	r3, #4
 8006aee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006af4:	1d3b      	adds	r3, r7, #4
 8006af6:	4619      	mov	r1, r3
 8006af8:	4805      	ldr	r0, [pc, #20]	; (8006b10 <MX_ADC1_Init+0xe8>)
 8006afa:	f002 f87f 	bl	8008bfc <HAL_ADC_ConfigChannel>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006b04:	f000 fe8c 	bl	8007820 <Error_Handler>
  }

}
 8006b08:	bf00      	nop
 8006b0a:	3730      	adds	r7, #48	; 0x30
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	2000200c 	.word	0x2000200c
 8006b14:	0c900008 	.word	0x0c900008

08006b18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b20:	f107 0314 	add.w	r3, r7, #20
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	60da      	str	r2, [r3, #12]
 8006b2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b38:	d14f      	bne.n	8006bda <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006b3a:	4b2a      	ldr	r3, [pc, #168]	; (8006be4 <HAL_ADC_MspInit+0xcc>)
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3e:	4a29      	ldr	r2, [pc, #164]	; (8006be4 <HAL_ADC_MspInit+0xcc>)
 8006b40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b46:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <HAL_ADC_MspInit+0xcc>)
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b52:	4b24      	ldr	r3, [pc, #144]	; (8006be4 <HAL_ADC_MspInit+0xcc>)
 8006b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b56:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <HAL_ADC_MspInit+0xcc>)
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b5e:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <HAL_ADC_MspInit+0xcc>)
 8006b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b6a:	2304      	movs	r3, #4
 8006b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b76:	f107 0314 	add.w	r3, r7, #20
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b80:	f003 fff4 	bl	800ab6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006b84:	4b18      	ldr	r3, [pc, #96]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006b86:	4a19      	ldr	r2, [pc, #100]	; (8006bec <HAL_ADC_MspInit+0xd4>)
 8006b88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006b8a:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006b8c:	2205      	movs	r2, #5
 8006b8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b90:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006b9c:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006b9e:	2280      	movs	r2, #128	; 0x80
 8006ba0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ba2:	4b11      	ldr	r3, [pc, #68]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ba8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006baa:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006bb8:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006bbe:	480a      	ldr	r0, [pc, #40]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006bc0:	f003 fd08 	bl	800a5d4 <HAL_DMA_Init>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006bca:	f000 fe29 	bl	8007820 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a05      	ldr	r2, [pc, #20]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006bd2:	655a      	str	r2, [r3, #84]	; 0x54
 8006bd4:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <HAL_ADC_MspInit+0xd0>)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3728      	adds	r7, #40	; 0x28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40021000 	.word	0x40021000
 8006be8:	20002078 	.word	0x20002078
 8006bec:	40020008 	.word	0x40020008

08006bf0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <MX_COMP1_Init+0x44>)
 8006bf6:	4a10      	ldr	r2, [pc, #64]	; (8006c38 <MX_COMP1_Init+0x48>)
 8006bf8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006bfa:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <MX_COMP1_Init+0x44>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006c00:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <MX_COMP1_Init+0x44>)
 8006c02:	4a0e      	ldr	r2, [pc, #56]	; (8006c3c <MX_COMP1_Init+0x4c>)
 8006c04:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <MX_COMP1_Init+0x44>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006c0c:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <MX_COMP1_Init+0x44>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006c12:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <MX_COMP1_Init+0x44>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <MX_COMP1_Init+0x44>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006c1e:	4805      	ldr	r0, [pc, #20]	; (8006c34 <MX_COMP1_Init+0x44>)
 8006c20:	f002 fe16 	bl	8009850 <HAL_COMP_Init>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006c2a:	f000 fdf9 	bl	8007820 <Error_Handler>
  }

}
 8006c2e:	bf00      	nop
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200020d8 	.word	0x200020d8
 8006c38:	40010200 	.word	0x40010200
 8006c3c:	00800030 	.word	0x00800030

08006c40 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c48:	f107 030c 	add.w	r3, r7, #12
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	609a      	str	r2, [r3, #8]
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a0f      	ldr	r2, [pc, #60]	; (8006c9c <HAL_COMP_MspInit+0x5c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d118      	bne.n	8006c94 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c62:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <HAL_COMP_MspInit+0x60>)
 8006c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c66:	4a0e      	ldr	r2, [pc, #56]	; (8006ca0 <HAL_COMP_MspInit+0x60>)
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <HAL_COMP_MspInit+0x60>)
 8006c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	60bb      	str	r3, [r7, #8]
 8006c78:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c86:	f107 030c 	add.w	r3, r7, #12
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c90:	f003 ff6c 	bl	800ab6c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006c94:	bf00      	nop
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40010200 	.word	0x40010200
 8006ca0:	40021000 	.word	0x40021000

08006ca4 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08c      	sub	sp, #48	; 0x30
 8006ca8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006caa:	463b      	mov	r3, r7
 8006cac:	2230      	movs	r2, #48	; 0x30
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f007 fc5b 	bl	800e56c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006cb6:	4b1e      	ldr	r3, [pc, #120]	; (8006d30 <MX_DAC1_Init+0x8c>)
 8006cb8:	4a1e      	ldr	r2, [pc, #120]	; (8006d34 <MX_DAC1_Init+0x90>)
 8006cba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006cbc:	481c      	ldr	r0, [pc, #112]	; (8006d30 <MX_DAC1_Init+0x8c>)
 8006cbe:	f003 f86a 	bl	8009d96 <HAL_DAC_Init>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006cc8:	f000 fdaa 	bl	8007820 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006ccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cd0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006cde:	2306      	movs	r3, #6
 8006ce0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006cea:	2301      	movs	r3, #1
 8006cec:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	480d      	ldr	r0, [pc, #52]	; (8006d30 <MX_DAC1_Init+0x8c>)
 8006cfa:	f003 fa35 	bl	800a168 <HAL_DAC_ConfigChannel>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006d04:	f000 fd8c 	bl	8007820 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006d10:	463b      	mov	r3, r7
 8006d12:	2210      	movs	r2, #16
 8006d14:	4619      	mov	r1, r3
 8006d16:	4806      	ldr	r0, [pc, #24]	; (8006d30 <MX_DAC1_Init+0x8c>)
 8006d18:	f003 fa26 	bl	800a168 <HAL_DAC_ConfigChannel>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006d22:	f000 fd7d 	bl	8007820 <Error_Handler>
  }

}
 8006d26:	bf00      	nop
 8006d28:	3730      	adds	r7, #48	; 0x30
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20002110 	.word	0x20002110
 8006d34:	50000800 	.word	0x50000800

08006d38 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08c      	sub	sp, #48	; 0x30
 8006d3c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006d3e:	463b      	mov	r3, r7
 8006d40:	2230      	movs	r2, #48	; 0x30
 8006d42:	2100      	movs	r1, #0
 8006d44:	4618      	mov	r0, r3
 8006d46:	f007 fc11 	bl	800e56c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006d4a:	4b16      	ldr	r3, [pc, #88]	; (8006da4 <MX_DAC2_Init+0x6c>)
 8006d4c:	4a16      	ldr	r2, [pc, #88]	; (8006da8 <MX_DAC2_Init+0x70>)
 8006d4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006d50:	4814      	ldr	r0, [pc, #80]	; (8006da4 <MX_DAC2_Init+0x6c>)
 8006d52:	f003 f820 	bl	8009d96 <HAL_DAC_Init>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006d5c:	f000 fd60 	bl	8007820 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d64:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006d72:	2306      	movs	r3, #6
 8006d74:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006d86:	463b      	mov	r3, r7
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4805      	ldr	r0, [pc, #20]	; (8006da4 <MX_DAC2_Init+0x6c>)
 8006d8e:	f003 f9eb 	bl	800a168 <HAL_DAC_ConfigChannel>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006d98:	f000 fd42 	bl	8007820 <Error_Handler>
  }

}
 8006d9c:	bf00      	nop
 8006d9e:	3730      	adds	r7, #48	; 0x30
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200020fc 	.word	0x200020fc
 8006da8:	50000c00 	.word	0x50000c00

08006dac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08c      	sub	sp, #48	; 0x30
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006db4:	f107 031c 	add.w	r3, r7, #28
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	605a      	str	r2, [r3, #4]
 8006dbe:	609a      	str	r2, [r3, #8]
 8006dc0:	60da      	str	r2, [r3, #12]
 8006dc2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a56      	ldr	r2, [pc, #344]	; (8006f24 <HAL_DAC_MspInit+0x178>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d150      	bne.n	8006e70 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006dce:	4b56      	ldr	r3, [pc, #344]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd2:	4a55      	ldr	r2, [pc, #340]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dda:	4b53      	ldr	r3, [pc, #332]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006de6:	4b50      	ldr	r3, [pc, #320]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dea:	4a4f      	ldr	r2, [pc, #316]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006df2:	4b4d      	ldr	r3, [pc, #308]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006dfe:	2330      	movs	r3, #48	; 0x30
 8006e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e02:	2303      	movs	r3, #3
 8006e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e0a:	f107 031c 	add.w	r3, r7, #28
 8006e0e:	4619      	mov	r1, r3
 8006e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e14:	f003 feaa 	bl	800ab6c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006e18:	4b44      	ldr	r3, [pc, #272]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e1a:	4a45      	ldr	r2, [pc, #276]	; (8006f30 <HAL_DAC_MspInit+0x184>)
 8006e1c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006e1e:	4b43      	ldr	r3, [pc, #268]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e20:	2206      	movs	r2, #6
 8006e22:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e24:	4b41      	ldr	r3, [pc, #260]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e26:	2210      	movs	r2, #16
 8006e28:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e2a:	4b40      	ldr	r3, [pc, #256]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006e30:	4b3e      	ldr	r3, [pc, #248]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e36:	4b3d      	ldr	r3, [pc, #244]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e3c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e3e:	4b3b      	ldr	r3, [pc, #236]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e44:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006e46:	4b39      	ldr	r3, [pc, #228]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e48:	2220      	movs	r2, #32
 8006e4a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006e4c:	4b37      	ldr	r3, [pc, #220]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006e52:	4836      	ldr	r0, [pc, #216]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e54:	f003 fbbe 	bl	800a5d4 <HAL_DMA_Init>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006e5e:	f000 fcdf 	bl	8007820 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a31      	ldr	r2, [pc, #196]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e66:	609a      	str	r2, [r3, #8]
 8006e68:	4a30      	ldr	r2, [pc, #192]	; (8006f2c <HAL_DAC_MspInit+0x180>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8006e6e:	e054      	b.n	8006f1a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a2f      	ldr	r2, [pc, #188]	; (8006f34 <HAL_DAC_MspInit+0x188>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d14f      	bne.n	8006f1a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006e7a:	4b2b      	ldr	r3, [pc, #172]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7e:	4a2a      	ldr	r2, [pc, #168]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e86:	4b28      	ldr	r3, [pc, #160]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e92:	4b25      	ldr	r3, [pc, #148]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e96:	4a24      	ldr	r2, [pc, #144]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e9e:	4b22      	ldr	r3, [pc, #136]	; (8006f28 <HAL_DAC_MspInit+0x17c>)
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006eaa:	2340      	movs	r3, #64	; 0x40
 8006eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eb6:	f107 031c 	add.w	r3, r7, #28
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ec0:	f003 fe54 	bl	800ab6c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006ec4:	4b1c      	ldr	r3, [pc, #112]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006ec6:	4a1d      	ldr	r2, [pc, #116]	; (8006f3c <HAL_DAC_MspInit+0x190>)
 8006ec8:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006eca:	4b1b      	ldr	r3, [pc, #108]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006ecc:	2229      	movs	r2, #41	; 0x29
 8006ece:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ed0:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ed6:	4b18      	ldr	r3, [pc, #96]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006edc:	4b16      	ldr	r3, [pc, #88]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006ede:	2280      	movs	r2, #128	; 0x80
 8006ee0:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ee2:	4b15      	ldr	r3, [pc, #84]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee8:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006eea:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006ef2:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006ef8:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006efe:	480e      	ldr	r0, [pc, #56]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006f00:	f003 fb68 	bl	800a5d4 <HAL_DMA_Init>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8006f0a:	f000 fc89 	bl	8007820 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	4a08      	ldr	r2, [pc, #32]	; (8006f38 <HAL_DAC_MspInit+0x18c>)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006f1a:	bf00      	nop
 8006f1c:	3730      	adds	r7, #48	; 0x30
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	50000800 	.word	0x50000800
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	20002124 	.word	0x20002124
 8006f30:	4002001c 	.word	0x4002001c
 8006f34:	50000c00 	.word	0x50000c00
 8006f38:	20002184 	.word	0x20002184
 8006f3c:	40020030 	.word	0x40020030

08006f40 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006f46:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <MX_DMA_Init+0x70>)
 8006f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4a:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <MX_DMA_Init+0x70>)
 8006f4c:	f043 0304 	orr.w	r3, r3, #4
 8006f50:	6493      	str	r3, [r2, #72]	; 0x48
 8006f52:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <MX_DMA_Init+0x70>)
 8006f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	607b      	str	r3, [r7, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f5e:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <MX_DMA_Init+0x70>)
 8006f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <MX_DMA_Init+0x70>)
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	6493      	str	r3, [r2, #72]	; 0x48
 8006f6a:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <MX_DMA_Init+0x70>)
 8006f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006f76:	2200      	movs	r2, #0
 8006f78:	2101      	movs	r1, #1
 8006f7a:	200b      	movs	r0, #11
 8006f7c:	f002 fed7 	bl	8009d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006f80:	200b      	movs	r0, #11
 8006f82:	f002 feee 	bl	8009d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006f86:	2200      	movs	r2, #0
 8006f88:	2100      	movs	r1, #0
 8006f8a:	200c      	movs	r0, #12
 8006f8c:	f002 fecf 	bl	8009d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006f90:	200c      	movs	r0, #12
 8006f92:	f002 fee6 	bl	8009d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	200d      	movs	r0, #13
 8006f9c:	f002 fec7 	bl	8009d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006fa0:	200d      	movs	r0, #13
 8006fa2:	f002 fede 	bl	8009d62 <HAL_NVIC_EnableIRQ>

}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	40021000 	.word	0x40021000

08006fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <__NVIC_GetPriorityGrouping+0x18>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	0a1b      	lsrs	r3, r3, #8
 8006fbe:	f003 0307 	and.w	r3, r3, #7
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	e000ed00 	.word	0xe000ed00

08006fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	db0b      	blt.n	8006ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	f003 021f 	and.w	r2, r3, #31
 8006fe8:	4907      	ldr	r1, [pc, #28]	; (8007008 <__NVIC_EnableIRQ+0x38>)
 8006fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	e000e100 	.word	0xe000e100

0800700c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701c:	2b00      	cmp	r3, #0
 800701e:	db0a      	blt.n	8007036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	b2da      	uxtb	r2, r3
 8007024:	490c      	ldr	r1, [pc, #48]	; (8007058 <__NVIC_SetPriority+0x4c>)
 8007026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702a:	0112      	lsls	r2, r2, #4
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	440b      	add	r3, r1
 8007030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007034:	e00a      	b.n	800704c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	b2da      	uxtb	r2, r3
 800703a:	4908      	ldr	r1, [pc, #32]	; (800705c <__NVIC_SetPriority+0x50>)
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	3b04      	subs	r3, #4
 8007044:	0112      	lsls	r2, r2, #4
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	440b      	add	r3, r1
 800704a:	761a      	strb	r2, [r3, #24]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	e000e100 	.word	0xe000e100
 800705c:	e000ed00 	.word	0xe000ed00

08007060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007060:	b480      	push	{r7}
 8007062:	b089      	sub	sp, #36	; 0x24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f1c3 0307 	rsb	r3, r3, #7
 800707a:	2b04      	cmp	r3, #4
 800707c:	bf28      	it	cs
 800707e:	2304      	movcs	r3, #4
 8007080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	3304      	adds	r3, #4
 8007086:	2b06      	cmp	r3, #6
 8007088:	d902      	bls.n	8007090 <NVIC_EncodePriority+0x30>
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	3b03      	subs	r3, #3
 800708e:	e000      	b.n	8007092 <NVIC_EncodePriority+0x32>
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	fa02 f303 	lsl.w	r3, r2, r3
 800709e:	43da      	mvns	r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	401a      	ands	r2, r3
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	fa01 f303 	lsl.w	r3, r1, r3
 80070b2:	43d9      	mvns	r1, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070b8:	4313      	orrs	r3, r2
         );
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3724      	adds	r7, #36	; 0x24
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80070d2:	4a14      	ldr	r2, [pc, #80]	; (8007124 <LL_SYSCFG_SetEXTISource+0x5c>)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	3302      	adds	r3, #2
 80070dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	0c1b      	lsrs	r3, r3, #16
 80070e4:	43db      	mvns	r3, r3
 80070e6:	ea02 0103 	and.w	r1, r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	0c1b      	lsrs	r3, r3, #16
 80070ee:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	fa93 f3a3 	rbit	r3, r3
 80070f6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	fab3 f383 	clz	r3, r3
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 031f 	and.w	r3, r3, #31
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	409a      	lsls	r2, r3
 8007108:	4806      	ldr	r0, [pc, #24]	; (8007124 <LL_SYSCFG_SetEXTISource+0x5c>)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	430a      	orrs	r2, r1
 8007112:	3302      	adds	r3, #2
 8007114:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007118:	bf00      	nop
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40010000 	.word	0x40010000

08007128 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007128:	b480      	push	{r7}
 800712a:	b089      	sub	sp, #36	; 0x24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	fa93 f3a3 	rbit	r3, r3
 8007142:	613b      	str	r3, [r7, #16]
  return result;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	fab3 f383 	clz	r3, r3
 800714a:	b2db      	uxtb	r3, r3
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	2103      	movs	r1, #3
 8007150:	fa01 f303 	lsl.w	r3, r1, r3
 8007154:	43db      	mvns	r3, r3
 8007156:	401a      	ands	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	fa93 f3a3 	rbit	r3, r3
 8007162:	61bb      	str	r3, [r7, #24]
  return result;
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	fab3 f383 	clz	r3, r3
 800716a:	b2db      	uxtb	r3, r3
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	431a      	orrs	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	bf00      	nop
 800717c:	3724      	adds	r7, #36	; 0x24
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007186:	b480      	push	{r7}
 8007188:	b089      	sub	sp, #36	; 0x24
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	fa93 f3a3 	rbit	r3, r3
 80071a0:	613b      	str	r3, [r7, #16]
  return result;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	fab3 f383 	clz	r3, r3
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	2103      	movs	r1, #3
 80071ae:	fa01 f303 	lsl.w	r3, r1, r3
 80071b2:	43db      	mvns	r3, r3
 80071b4:	401a      	ands	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	fa93 f3a3 	rbit	r3, r3
 80071c0:	61bb      	str	r3, [r7, #24]
  return result;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	fab3 f383 	clz	r3, r3
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	fa01 f303 	lsl.w	r3, r1, r3
 80071d2:	431a      	orrs	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	60da      	str	r2, [r3, #12]
}
 80071d8:	bf00      	nop
 80071da:	3724      	adds	r7, #36	; 0x24
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007208:	4b08      	ldr	r3, [pc, #32]	; (800722c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800720a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800720c:	4907      	ldr	r1, [pc, #28]	; (800722c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4313      	orrs	r3, r2
 8007212:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4013      	ands	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800721e:	68fb      	ldr	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	40021000 	.word	0x40021000

08007230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	; 0x28
 8007234:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007236:	f107 031c 	add.w	r3, r7, #28
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	605a      	str	r2, [r3, #4]
 8007240:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007242:	1d3b      	adds	r3, r7, #4
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	605a      	str	r2, [r3, #4]
 800724a:	609a      	str	r2, [r3, #8]
 800724c:	60da      	str	r2, [r3, #12]
 800724e:	611a      	str	r2, [r3, #16]
 8007250:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007252:	2004      	movs	r0, #4
 8007254:	f7ff ffd4 	bl	8007200 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007258:	2020      	movs	r0, #32
 800725a:	f7ff ffd1 	bl	8007200 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800725e:	2001      	movs	r0, #1
 8007260:	f7ff ffce 	bl	8007200 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007264:	2002      	movs	r0, #2
 8007266:	f7ff ffcb 	bl	8007200 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800726a:	2108      	movs	r1, #8
 800726c:	48d3      	ldr	r0, [pc, #844]	; (80075bc <MX_GPIO_Init+0x38c>)
 800726e:	f7ff ffb9 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8007272:	2108      	movs	r1, #8
 8007274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007278:	f7ff ffb4 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 800727c:	2110      	movs	r1, #16
 800727e:	48cf      	ldr	r0, [pc, #828]	; (80075bc <MX_GPIO_Init+0x38c>)
 8007280:	f7ff ffb0 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8007284:	2120      	movs	r1, #32
 8007286:	48cd      	ldr	r0, [pc, #820]	; (80075bc <MX_GPIO_Init+0x38c>)
 8007288:	f7ff ffac 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 800728c:	2101      	movs	r1, #1
 800728e:	48cc      	ldr	r0, [pc, #816]	; (80075c0 <MX_GPIO_Init+0x390>)
 8007290:	f7ff ffa8 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007298:	48c8      	ldr	r0, [pc, #800]	; (80075bc <MX_GPIO_Init+0x38c>)
 800729a:	f7ff ffa3 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800729e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072a2:	48c6      	ldr	r0, [pc, #792]	; (80075bc <MX_GPIO_Init+0x38c>)
 80072a4:	f7ff ff9e 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80072a8:	2140      	movs	r1, #64	; 0x40
 80072aa:	48c5      	ldr	r0, [pc, #788]	; (80075c0 <MX_GPIO_Init+0x390>)
 80072ac:	f7ff ff9a 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80072b0:	2180      	movs	r1, #128	; 0x80
 80072b2:	48c3      	ldr	r0, [pc, #780]	; (80075c0 <MX_GPIO_Init+0x390>)
 80072b4:	f7ff ff96 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80072b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072bc:	48c0      	ldr	r0, [pc, #768]	; (80075c0 <MX_GPIO_Init+0x390>)
 80072be:	f7ff ff91 	bl	80071e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80072c2:	49c0      	ldr	r1, [pc, #768]	; (80075c4 <MX_GPIO_Init+0x394>)
 80072c4:	2002      	movs	r0, #2
 80072c6:	f7ff feff 	bl	80070c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80072ca:	49bf      	ldr	r1, [pc, #764]	; (80075c8 <MX_GPIO_Init+0x398>)
 80072cc:	2002      	movs	r0, #2
 80072ce:	f7ff fefb 	bl	80070c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80072d2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80072d6:	2005      	movs	r0, #5
 80072d8:	f7ff fef6 	bl	80070c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80072dc:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80072e0:	2005      	movs	r0, #5
 80072e2:	f7ff fef1 	bl	80070c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80072e6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80072ea:	2002      	movs	r0, #2
 80072ec:	f7ff feec 	bl	80070c8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80072f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072f4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80072fc:	2300      	movs	r3, #0
 80072fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007302:	2302      	movs	r3, #2
 8007304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007308:	f107 031c 	add.w	r3, r7, #28
 800730c:	4618      	mov	r0, r3
 800730e:	f005 fead 	bl	800d06c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007316:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800731e:	2300      	movs	r3, #0
 8007320:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007324:	2302      	movs	r3, #2
 8007326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800732a:	f107 031c 	add.w	r3, r7, #28
 800732e:	4618      	mov	r0, r3
 8007330:	f005 fe9c 	bl	800d06c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007334:	2301      	movs	r3, #1
 8007336:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007338:	2301      	movs	r3, #1
 800733a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800733e:	2300      	movs	r3, #0
 8007340:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007344:	2302      	movs	r3, #2
 8007346:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800734a:	f107 031c 	add.w	r3, r7, #28
 800734e:	4618      	mov	r0, r3
 8007350:	f005 fe8c 	bl	800d06c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007354:	2302      	movs	r3, #2
 8007356:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800735e:	2300      	movs	r3, #0
 8007360:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007364:	2302      	movs	r3, #2
 8007366:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800736a:	f107 031c 	add.w	r3, r7, #28
 800736e:	4618      	mov	r0, r3
 8007370:	f005 fe7c 	bl	800d06c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007374:	2304      	movs	r3, #4
 8007376:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800737e:	2300      	movs	r3, #0
 8007380:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007384:	2302      	movs	r3, #2
 8007386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800738a:	f107 031c 	add.w	r3, r7, #28
 800738e:	4618      	mov	r0, r3
 8007390:	f005 fe6c 	bl	800d06c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007394:	2201      	movs	r2, #1
 8007396:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800739a:	4888      	ldr	r0, [pc, #544]	; (80075bc <MX_GPIO_Init+0x38c>)
 800739c:	f7ff fef3 	bl	8007186 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80073a0:	2201      	movs	r2, #1
 80073a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073a6:	4885      	ldr	r0, [pc, #532]	; (80075bc <MX_GPIO_Init+0x38c>)
 80073a8:	f7ff feed 	bl	8007186 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80073ac:	2201      	movs	r2, #1
 80073ae:	2101      	movs	r1, #1
 80073b0:	4886      	ldr	r0, [pc, #536]	; (80075cc <MX_GPIO_Init+0x39c>)
 80073b2:	f7ff fee8 	bl	8007186 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80073b6:	2201      	movs	r2, #1
 80073b8:	2102      	movs	r1, #2
 80073ba:	4884      	ldr	r0, [pc, #528]	; (80075cc <MX_GPIO_Init+0x39c>)
 80073bc:	f7ff fee3 	bl	8007186 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 80073c0:	2201      	movs	r2, #1
 80073c2:	2104      	movs	r1, #4
 80073c4:	487d      	ldr	r0, [pc, #500]	; (80075bc <MX_GPIO_Init+0x38c>)
 80073c6:	f7ff fede 	bl	8007186 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80073ca:	2200      	movs	r2, #0
 80073cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073d0:	487a      	ldr	r0, [pc, #488]	; (80075bc <MX_GPIO_Init+0x38c>)
 80073d2:	f7ff fea9 	bl	8007128 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80073d6:	2200      	movs	r2, #0
 80073d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073dc:	4877      	ldr	r0, [pc, #476]	; (80075bc <MX_GPIO_Init+0x38c>)
 80073de:	f7ff fea3 	bl	8007128 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80073e2:	2200      	movs	r2, #0
 80073e4:	2101      	movs	r1, #1
 80073e6:	4879      	ldr	r0, [pc, #484]	; (80075cc <MX_GPIO_Init+0x39c>)
 80073e8:	f7ff fe9e 	bl	8007128 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80073ec:	2200      	movs	r2, #0
 80073ee:	2102      	movs	r1, #2
 80073f0:	4876      	ldr	r0, [pc, #472]	; (80075cc <MX_GPIO_Init+0x39c>)
 80073f2:	f7ff fe99 	bl	8007128 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80073f6:	2200      	movs	r2, #0
 80073f8:	2104      	movs	r1, #4
 80073fa:	4870      	ldr	r0, [pc, #448]	; (80075bc <MX_GPIO_Init+0x38c>)
 80073fc:	f7ff fe94 	bl	8007128 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007400:	2308      	movs	r3, #8
 8007402:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007404:	2301      	movs	r3, #1
 8007406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007410:	2302      	movs	r3, #2
 8007412:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007414:	1d3b      	adds	r3, r7, #4
 8007416:	4619      	mov	r1, r3
 8007418:	4868      	ldr	r0, [pc, #416]	; (80075bc <MX_GPIO_Init+0x38c>)
 800741a:	f006 f81a 	bl	800d452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 800741e:	2308      	movs	r3, #8
 8007420:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007422:	2301      	movs	r3, #1
 8007424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800742a:	2300      	movs	r3, #0
 800742c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800742e:	2300      	movs	r3, #0
 8007430:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8007432:	1d3b      	adds	r3, r7, #4
 8007434:	4619      	mov	r1, r3
 8007436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800743a:	f006 f80a 	bl	800d452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 800743e:	2310      	movs	r3, #16
 8007440:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007442:	2301      	movs	r3, #1
 8007444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8007452:	1d3b      	adds	r3, r7, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4859      	ldr	r0, [pc, #356]	; (80075bc <MX_GPIO_Init+0x38c>)
 8007458:	f005 fffb 	bl	800d452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 800745c:	2320      	movs	r3, #32
 800745e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007460:	2301      	movs	r3, #1
 8007462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8007470:	1d3b      	adds	r3, r7, #4
 8007472:	4619      	mov	r1, r3
 8007474:	4851      	ldr	r0, [pc, #324]	; (80075bc <MX_GPIO_Init+0x38c>)
 8007476:	f005 ffec 	bl	800d452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 800747a:	2301      	movs	r3, #1
 800747c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800747e:	2301      	movs	r3, #1
 8007480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007486:	2300      	movs	r3, #0
 8007488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800748e:	1d3b      	adds	r3, r7, #4
 8007490:	4619      	mov	r1, r3
 8007492:	484b      	ldr	r0, [pc, #300]	; (80075c0 <MX_GPIO_Init+0x390>)
 8007494:	f005 ffdd 	bl	800d452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800749c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800749e:	2301      	movs	r3, #1
 80074a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4842      	ldr	r0, [pc, #264]	; (80075bc <MX_GPIO_Init+0x38c>)
 80074b4:	f005 ffcd 	bl	800d452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80074b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074be:	2301      	movs	r3, #1
 80074c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	4619      	mov	r1, r3
 80074d2:	483a      	ldr	r0, [pc, #232]	; (80075bc <MX_GPIO_Init+0x38c>)
 80074d4:	f005 ffbd 	bl	800d452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80074d8:	2340      	movs	r3, #64	; 0x40
 80074da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074dc:	2301      	movs	r3, #1
 80074de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80074e0:	2303      	movs	r3, #3
 80074e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80074ec:	1d3b      	adds	r3, r7, #4
 80074ee:	4619      	mov	r1, r3
 80074f0:	4833      	ldr	r0, [pc, #204]	; (80075c0 <MX_GPIO_Init+0x390>)
 80074f2:	f005 ffae 	bl	800d452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80074f6:	2380      	movs	r3, #128	; 0x80
 80074f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074fa:	2301      	movs	r3, #1
 80074fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80074fe:	2303      	movs	r3, #3
 8007500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007502:	2300      	movs	r3, #0
 8007504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	4619      	mov	r1, r3
 800750e:	482c      	ldr	r0, [pc, #176]	; (80075c0 <MX_GPIO_Init+0x390>)
 8007510:	f005 ff9f 	bl	800d452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007518:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800751a:	2301      	movs	r3, #1
 800751c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800751e:	2303      	movs	r3, #3
 8007520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007522:	2300      	movs	r3, #0
 8007524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800752a:	1d3b      	adds	r3, r7, #4
 800752c:	4619      	mov	r1, r3
 800752e:	4824      	ldr	r0, [pc, #144]	; (80075c0 <MX_GPIO_Init+0x390>)
 8007530:	f005 ff8f 	bl	800d452 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007534:	f7ff fd3e 	bl	8006fb4 <__NVIC_GetPriorityGrouping>
 8007538:	4603      	mov	r3, r0
 800753a:	2200      	movs	r2, #0
 800753c:	2100      	movs	r1, #0
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff fd8e 	bl	8007060 <NVIC_EncodePriority>
 8007544:	4603      	mov	r3, r0
 8007546:	4619      	mov	r1, r3
 8007548:	2006      	movs	r0, #6
 800754a:	f7ff fd5f 	bl	800700c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800754e:	2006      	movs	r0, #6
 8007550:	f7ff fd3e 	bl	8006fd0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007554:	f7ff fd2e 	bl	8006fb4 <__NVIC_GetPriorityGrouping>
 8007558:	4603      	mov	r3, r0
 800755a:	2200      	movs	r2, #0
 800755c:	2100      	movs	r1, #0
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff fd7e 	bl	8007060 <NVIC_EncodePriority>
 8007564:	4603      	mov	r3, r0
 8007566:	4619      	mov	r1, r3
 8007568:	2007      	movs	r0, #7
 800756a:	f7ff fd4f 	bl	800700c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800756e:	2007      	movs	r0, #7
 8007570:	f7ff fd2e 	bl	8006fd0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007574:	f7ff fd1e 	bl	8006fb4 <__NVIC_GetPriorityGrouping>
 8007578:	4603      	mov	r3, r0
 800757a:	2200      	movs	r2, #0
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fd6e 	bl	8007060 <NVIC_EncodePriority>
 8007584:	4603      	mov	r3, r0
 8007586:	4619      	mov	r1, r3
 8007588:	2008      	movs	r0, #8
 800758a:	f7ff fd3f 	bl	800700c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800758e:	2008      	movs	r0, #8
 8007590:	f7ff fd1e 	bl	8006fd0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007594:	f7ff fd0e 	bl	8006fb4 <__NVIC_GetPriorityGrouping>
 8007598:	4603      	mov	r3, r0
 800759a:	2200      	movs	r2, #0
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fd5e 	bl	8007060 <NVIC_EncodePriority>
 80075a4:	4603      	mov	r3, r0
 80075a6:	4619      	mov	r1, r3
 80075a8:	2028      	movs	r0, #40	; 0x28
 80075aa:	f7ff fd2f 	bl	800700c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80075ae:	2028      	movs	r0, #40	; 0x28
 80075b0:	f7ff fd0e 	bl	8006fd0 <__NVIC_EnableIRQ>

}
 80075b4:	bf00      	nop
 80075b6:	3728      	adds	r7, #40	; 0x28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	e009      	b.n	80075d0 <MX_GPIO_Init+0x3a0>
 80075bc:	48000800 	.word	0x48000800
 80075c0:	48000400 	.word	0x48000400
 80075c4:	0f000003 	.word	0x0f000003
 80075c8:	f0000003 	.word	0xf0000003
 80075cc:	48001400 	.word	0x48001400
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop

080075d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80075dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80075e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d013      	beq.n	8007614 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80075ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80075f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80075f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80075fc:	e000      	b.n	8007600 <ITM_SendChar+0x2c>
    {
      __NOP();
 80075fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007600:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f9      	beq.n	80075fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800760a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007614:	687b      	ldr	r3, [r7, #4]
}
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
  int i=0;
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	e009      	b.n	800764c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	60ba      	str	r2, [r7, #8]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff ffc7 	bl	80075d4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	3301      	adds	r3, #1
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	dbf1      	blt.n	8007638 <_write+0x16>
  return len;
 8007654:	687b      	ldr	r3, [r7, #4]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007664:	f000 feb5 	bl	80083d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007668:	f000 f86c 	bl	8007744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800766c:	f7ff fde0 	bl	8007230 <MX_GPIO_Init>
  MX_DMA_Init();
 8007670:	f7ff fc66 	bl	8006f40 <MX_DMA_Init>
  MX_DAC1_Init();
 8007674:	f7ff fb16 	bl	8006ca4 <MX_DAC1_Init>
  MX_DAC2_Init();
 8007678:	f7ff fb5e 	bl	8006d38 <MX_DAC2_Init>
  MX_ADC1_Init();
 800767c:	f7ff f9d4 	bl	8006a28 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007680:	f7ff fab6 	bl	8006bf0 <MX_COMP1_Init>
  MX_TIM2_Init();
 8007684:	f000 fbaa 	bl	8007ddc <MX_TIM2_Init>
  MX_SPI3_Init();
 8007688:	f000 f908 	bl	800789c <MX_SPI3_Init>
  MX_RNG_Init();
 800768c:	f000 f8f8 	bl	8007880 <MX_RNG_Init>
  MX_TIM1_Init();
 8007690:	f000 fb34 	bl	8007cfc <MX_TIM1_Init>
  MX_TIM8_Init();
 8007694:	f000 fc8a 	bl	8007fac <MX_TIM8_Init>
  MX_TIM16_Init();
 8007698:	f000 fd42 	bl	8008120 <MX_TIM16_Init>
  MX_TIM15_Init();
 800769c:	f000 fcee 	bl	800807c <MX_TIM15_Init>
  MX_TIM5_Init();
 80076a0:	f000 fc36 	bl	8007f10 <MX_TIM5_Init>
  MX_TIM3_Init();
 80076a4:	f000 fbe6 	bl	8007e74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 80076a8:	f7fd f94c 	bl	8004944 <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 80076ac:	f7fd fe14 	bl	80052d8 <SM_Init>
  FuncO_Init();
 80076b0:	f7fd fb30 	bl	8004d14 <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 80076b4:	2000      	movs	r0, #0
 80076b6:	f7fd fbe5 	bl	8004e84 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 80076ba:	2000      	movs	r0, #0
 80076bc:	f7fd fc3c 	bl	8004f38 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_MAX_OUTPUT_ARR;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80076c0:	2110      	movs	r1, #16
 80076c2:	481b      	ldr	r0, [pc, #108]	; (8007730 <main+0xd0>)
 80076c4:	f002 fb89 	bl	8009dda <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80076c8:	4b1a      	ldr	r3, [pc, #104]	; (8007734 <main+0xd4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a19      	ldr	r2, [pc, #100]	; (8007734 <main+0xd4>)
 80076ce:	f043 0301 	orr.w	r3, r3, #1
 80076d2:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 80076d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076d8:	f7fd fab2 	bl	8004c40 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80076dc:	2201      	movs	r2, #1
 80076de:	2108      	movs	r1, #8
 80076e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076e4:	f003 fbc4 	bl	800ae70 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 80076e8:	2059      	movs	r0, #89	; 0x59
 80076ea:	f7fd fef1 	bl	80054d0 <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80076ee:	2200      	movs	r2, #0
 80076f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076f4:	4810      	ldr	r0, [pc, #64]	; (8007738 <main+0xd8>)
 80076f6:	f003 fbbb 	bl	800ae70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80076fa:	2200      	movs	r2, #0
 80076fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007700:	480d      	ldr	r0, [pc, #52]	; (8007738 <main+0xd8>)
 8007702:	f003 fbb5 	bl	800ae70 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007706:	480d      	ldr	r0, [pc, #52]	; (800773c <main+0xdc>)
 8007708:	f004 fcac 	bl	800c064 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 800770c:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <main+0xe0>)
 800770e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007712:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <main+0xe0>)
 8007716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800771a:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 800771c:	f7f9 fab2 	bl	8000c84 <DM_Init>
  DM_PostInit();
 8007720:	f7f9 fabe 	bl	8000ca0 <DM_PostInit>

  IM_Init();
 8007724:	f7fc ff5c 	bl	80045e0 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007728:	f7fb ff00 	bl	800352c <EM_ProcessEvent>
 800772c:	e7fc      	b.n	8007728 <main+0xc8>
 800772e:	bf00      	nop
 8007730:	20002110 	.word	0x20002110
 8007734:	40013400 	.word	0x40013400
 8007738:	48000800 	.word	0x48000800
 800773c:	20002378 	.word	0x20002378
 8007740:	40001000 	.word	0x40001000

08007744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b0a8      	sub	sp, #160	; 0xa0
 8007748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800774a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800774e:	2238      	movs	r2, #56	; 0x38
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f006 ff0a 	bl	800e56c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007758:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	609a      	str	r2, [r3, #8]
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007768:	463b      	mov	r3, r7
 800776a:	2254      	movs	r2, #84	; 0x54
 800776c:	2100      	movs	r1, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f006 fefc 	bl	800e56c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007774:	2000      	movs	r0, #0
 8007776:	f003 fb93 	bl	800aea0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800777a:	2322      	movs	r3, #34	; 0x22
 800777c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800777e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007782:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007784:	2340      	movs	r3, #64	; 0x40
 8007786:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007788:	2301      	movs	r3, #1
 800778a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800778e:	2302      	movs	r3, #2
 8007790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007794:	2302      	movs	r3, #2
 8007796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800779a:	2302      	movs	r3, #2
 800779c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80077a0:	232a      	movs	r3, #42	; 0x2a
 80077a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 80077a6:	231e      	movs	r3, #30
 80077a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80077ac:	2304      	movs	r3, #4
 80077ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80077b2:	2302      	movs	r3, #2
 80077b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80077b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80077bc:	4618      	mov	r0, r3
 80077be:	f003 fc13 	bl	800afe8 <HAL_RCC_OscConfig>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80077c8:	f000 f82a 	bl	8007820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80077cc:	230f      	movs	r3, #15
 80077ce:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80077d0:	2303      	movs	r3, #3
 80077d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80077d4:	2300      	movs	r3, #0
 80077d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80077d8:	2300      	movs	r3, #0
 80077da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80077dc:	2300      	movs	r3, #0
 80077de:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80077e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80077e4:	2108      	movs	r1, #8
 80077e6:	4618      	mov	r0, r3
 80077e8:	f003 ff16 	bl	800b618 <HAL_RCC_ClockConfig>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80077f2:	f000 f815 	bl	8007820 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80077f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80077fa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80077fc:	2300      	movs	r3, #0
 80077fe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007800:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007804:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007806:	463b      	mov	r3, r7
 8007808:	4618      	mov	r0, r3
 800780a:	f004 f8f5 	bl	800b9f8 <HAL_RCCEx_PeriphCLKConfig>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007814:	f000 f804 	bl	8007820 <Error_Handler>
  }
}
 8007818:	bf00      	nop
 800781a:	37a0      	adds	r7, #160	; 0xa0
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007824:	bf00      	nop
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f043 0204 	orr.w	r2, r3, #4
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	601a      	str	r2, [r3, #0]
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
	...

08007850 <LL_AHB2_GRP1_EnableClock>:
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007858:	4b08      	ldr	r3, [pc, #32]	; (800787c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800785a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800785c:	4907      	ldr	r1, [pc, #28]	; (800787c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4313      	orrs	r3, r2
 8007862:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007864:	4b05      	ldr	r3, [pc, #20]	; (800787c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4013      	ands	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800786e:	68fb      	ldr	r3, [r7, #12]
}
 8007870:	bf00      	nop
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	40021000 	.word	0x40021000

08007880 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007884:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007888:	f7ff ffe2 	bl	8007850 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 800788c:	4802      	ldr	r0, [pc, #8]	; (8007898 <MX_RNG_Init+0x18>)
 800788e:	f7ff ffce 	bl	800782e <LL_RNG_Enable>

}
 8007892:	bf00      	nop
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	50060800 	.word	0x50060800

0800789c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80078a0:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <MX_SPI3_Init+0x74>)
 80078a2:	4a1c      	ldr	r2, [pc, #112]	; (8007914 <MX_SPI3_Init+0x78>)
 80078a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80078a6:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <MX_SPI3_Init+0x74>)
 80078a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80078ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80078ae:	4b18      	ldr	r3, [pc, #96]	; (8007910 <MX_SPI3_Init+0x74>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80078b4:	4b16      	ldr	r3, [pc, #88]	; (8007910 <MX_SPI3_Init+0x74>)
 80078b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80078ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80078bc:	4b14      	ldr	r3, [pc, #80]	; (8007910 <MX_SPI3_Init+0x74>)
 80078be:	2200      	movs	r2, #0
 80078c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80078c2:	4b13      	ldr	r3, [pc, #76]	; (8007910 <MX_SPI3_Init+0x74>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80078c8:	4b11      	ldr	r3, [pc, #68]	; (8007910 <MX_SPI3_Init+0x74>)
 80078ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80078d0:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <MX_SPI3_Init+0x74>)
 80078d2:	2210      	movs	r2, #16
 80078d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80078d6:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <MX_SPI3_Init+0x74>)
 80078d8:	2200      	movs	r2, #0
 80078da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80078dc:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <MX_SPI3_Init+0x74>)
 80078de:	2200      	movs	r2, #0
 80078e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078e2:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <MX_SPI3_Init+0x74>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80078e8:	4b09      	ldr	r3, [pc, #36]	; (8007910 <MX_SPI3_Init+0x74>)
 80078ea:	2207      	movs	r2, #7
 80078ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80078ee:	4b08      	ldr	r3, [pc, #32]	; (8007910 <MX_SPI3_Init+0x74>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <MX_SPI3_Init+0x74>)
 80078f6:	2208      	movs	r2, #8
 80078f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80078fa:	4805      	ldr	r0, [pc, #20]	; (8007910 <MX_SPI3_Init+0x74>)
 80078fc:	f004 fac8 	bl	800be90 <HAL_SPI_Init>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007906:	f7ff ff8b 	bl	8007820 <Error_Handler>
  }

}
 800790a:	bf00      	nop
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200021e4 	.word	0x200021e4
 8007914:	40003c00 	.word	0x40003c00

08007918 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	; 0x28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007920:	f107 0314 	add.w	r3, r7, #20
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	609a      	str	r2, [r3, #8]
 800792c:	60da      	str	r2, [r3, #12]
 800792e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a17      	ldr	r2, [pc, #92]	; (8007994 <HAL_SPI_MspInit+0x7c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d128      	bne.n	800798c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800793a:	4b17      	ldr	r3, [pc, #92]	; (8007998 <HAL_SPI_MspInit+0x80>)
 800793c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793e:	4a16      	ldr	r2, [pc, #88]	; (8007998 <HAL_SPI_MspInit+0x80>)
 8007940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007944:	6593      	str	r3, [r2, #88]	; 0x58
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <HAL_SPI_MspInit+0x80>)
 8007948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800794e:	613b      	str	r3, [r7, #16]
 8007950:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007952:	4b11      	ldr	r3, [pc, #68]	; (8007998 <HAL_SPI_MspInit+0x80>)
 8007954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007956:	4a10      	ldr	r2, [pc, #64]	; (8007998 <HAL_SPI_MspInit+0x80>)
 8007958:	f043 0304 	orr.w	r3, r3, #4
 800795c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800795e:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <HAL_SPI_MspInit+0x80>)
 8007960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007962:	f003 0304 	and.w	r3, r3, #4
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800796a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800796e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007970:	2302      	movs	r3, #2
 8007972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007974:	2300      	movs	r3, #0
 8007976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007978:	2300      	movs	r3, #0
 800797a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800797c:	2306      	movs	r3, #6
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007980:	f107 0314 	add.w	r3, r7, #20
 8007984:	4619      	mov	r1, r3
 8007986:	4805      	ldr	r0, [pc, #20]	; (800799c <HAL_SPI_MspInit+0x84>)
 8007988:	f003 f8f0 	bl	800ab6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800798c:	bf00      	nop
 800798e:	3728      	adds	r7, #40	; 0x28
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40003c00 	.word	0x40003c00
 8007998:	40021000 	.word	0x40021000
 800799c:	48000800 	.word	0x48000800

080079a0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	4a04      	ldr	r2, [pc, #16]	; (80079bc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80079aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079ae:	6093      	str	r3, [r2, #8]
}
 80079b0:	bf00      	nop
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	40007000 	.word	0x40007000

080079c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079c6:	4b0f      	ldr	r3, [pc, #60]	; (8007a04 <HAL_MspInit+0x44>)
 80079c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ca:	4a0e      	ldr	r2, [pc, #56]	; (8007a04 <HAL_MspInit+0x44>)
 80079cc:	f043 0301 	orr.w	r3, r3, #1
 80079d0:	6613      	str	r3, [r2, #96]	; 0x60
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <HAL_MspInit+0x44>)
 80079d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	607b      	str	r3, [r7, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <HAL_MspInit+0x44>)
 80079e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e2:	4a08      	ldr	r2, [pc, #32]	; (8007a04 <HAL_MspInit+0x44>)
 80079e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e8:	6593      	str	r3, [r2, #88]	; 0x58
 80079ea:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <HAL_MspInit+0x44>)
 80079ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80079f6:	f7ff ffd3 	bl	80079a0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40021000 	.word	0x40021000

08007a08 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007a10:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007a12:	695a      	ldr	r2, [r3, #20]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4013      	ands	r3, r2
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d101      	bne.n	8007a22 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	40010400 	.word	0x40010400

08007a34 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007a3c:	4a04      	ldr	r2, [pc, #16]	; (8007a50 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6153      	str	r3, [r2, #20]
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	40010400 	.word	0x40010400

08007a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007a58:	bf00      	nop
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a62:	b480      	push	{r7}
 8007a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a66:	e7fe      	b.n	8007a66 <HardFault_Handler+0x4>

08007a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a6c:	e7fe      	b.n	8007a6c <MemManage_Handler+0x4>

08007a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a72:	e7fe      	b.n	8007a72 <BusFault_Handler+0x4>

08007a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a78:	e7fe      	b.n	8007a78 <UsageFault_Handler+0x4>

08007a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a7e:	bf00      	nop
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a8c:	bf00      	nop
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a96:	b480      	push	{r7}
 8007a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a9a:	bf00      	nop
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007aa8:	f000 fce6 	bl	8008478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007aac:	bf00      	nop
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007ab4:	f7fc fe4c 	bl	8004750 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007ab8:	2001      	movs	r0, #1
 8007aba:	f7ff ffa5 	bl	8007a08 <LL_EXTI_IsActiveFlag_0_31>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	f7ff ffb5 	bl	8007a34 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007aca:	bf00      	nop
 8007acc:	bd80      	pop	{r7, pc}

08007ace <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007ad2:	f7fc fe63 	bl	800479c <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007ad6:	2002      	movs	r0, #2
 8007ad8:	f7ff ff96 	bl	8007a08 <LL_EXTI_IsActiveFlag_0_31>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007ae2:	2002      	movs	r0, #2
 8007ae4:	f7ff ffa6 	bl	8007a34 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007ae8:	bf00      	nop
 8007aea:	bd80      	pop	{r7, pc}

08007aec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007af0:	f7fc fe7a 	bl	80047e8 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007af4:	2004      	movs	r0, #4
 8007af6:	f7ff ff87 	bl	8007a08 <LL_EXTI_IsActiveFlag_0_31>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007b00:	2004      	movs	r0, #4
 8007b02:	f7ff ff97 	bl	8007a34 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007b06:	bf00      	nop
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007b10:	4802      	ldr	r0, [pc, #8]	; (8007b1c <DMA1_Channel1_IRQHandler+0x10>)
 8007b12:	f002 fedb 	bl	800a8cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007b16:	bf00      	nop
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20002078 	.word	0x20002078

08007b20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007b24:	4802      	ldr	r0, [pc, #8]	; (8007b30 <DMA1_Channel2_IRQHandler+0x10>)
 8007b26:	f002 fed1 	bl	800a8cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007b2a:	bf00      	nop
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20002124 	.word	0x20002124

08007b34 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007b38:	4802      	ldr	r0, [pc, #8]	; (8007b44 <DMA1_Channel3_IRQHandler+0x10>)
 8007b3a:	f002 fec7 	bl	800a8cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007b3e:	bf00      	nop
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20002184 	.word	0x20002184

08007b48 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007b4c:	f7f9 f8c6 	bl	8000cdc <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007b50:	f7fc fe70 	bl	8004834 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007b54:	4803      	ldr	r0, [pc, #12]	; (8007b64 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007b56:	f004 fbe6 	bl	800c326 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007b5a:	4803      	ldr	r0, [pc, #12]	; (8007b68 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007b5c:	f004 fbe3 	bl	800c326 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007b60:	bf00      	nop
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20002378 	.word	0x20002378
 8007b68:	20002294 	.word	0x20002294

08007b6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007b70:	4802      	ldr	r0, [pc, #8]	; (8007b7c <TIM3_IRQHandler+0x10>)
 8007b72:	f004 fbd8 	bl	800c326 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007b76:	bf00      	nop
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	2000232c 	.word	0x2000232c

08007b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007b84:	f7fc fd94 	bl	80046b0 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007b88:	f7fc fdba 	bl	8004700 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007b8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007b90:	f7ff ff3a 	bl	8007a08 <LL_EXTI_IsActiveFlag_0_31>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007b9a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007b9e:	f7ff ff49 	bl	8007a34 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007ba2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007ba6:	f7ff ff2f 	bl	8007a08 <LL_EXTI_IsActiveFlag_0_31>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007bb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007bb4:	f7ff ff3e 	bl	8007a34 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007bb8:	bf00      	nop
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007bc0:	f7fc fd1e 	bl	8004600 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007bc4:	4802      	ldr	r0, [pc, #8]	; (8007bd0 <TIM5_IRQHandler+0x14>)
 8007bc6:	f004 fbae 	bl	800c326 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007bca:	bf00      	nop
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	200022e0 	.word	0x200022e0

08007bd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	e00a      	b.n	8007bfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007be6:	f3af 8000 	nop.w
 8007bea:	4601      	mov	r1, r0
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	60ba      	str	r2, [r7, #8]
 8007bf2:	b2ca      	uxtb	r2, r1
 8007bf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	dbf0      	blt.n	8007be6 <_read+0x12>
	}

return len;
 8007c04:	687b      	ldr	r3, [r7, #4]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <_close>:
	}
	return len;
}

int _close(int file)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
	return -1;
 8007c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007c36:	605a      	str	r2, [r3, #4]
	return 0;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <_isatty>:

int _isatty(int file)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8007c4e:	2301      	movs	r3, #1
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
	return 0;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007c80:	4b11      	ldr	r3, [pc, #68]	; (8007cc8 <_sbrk+0x50>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d102      	bne.n	8007c8e <_sbrk+0x16>
		heap_end = &end;
 8007c88:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <_sbrk+0x50>)
 8007c8a:	4a10      	ldr	r2, [pc, #64]	; (8007ccc <_sbrk+0x54>)
 8007c8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007c8e:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <_sbrk+0x50>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007c94:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <_sbrk+0x50>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	466a      	mov	r2, sp
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d907      	bls.n	8007cb2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007ca2:	f006 fc39 	bl	800e518 <__errno>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	230c      	movs	r3, #12
 8007caa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cb0:	e006      	b.n	8007cc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <_sbrk+0x50>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4413      	add	r3, r2
 8007cba:	4a03      	ldr	r2, [pc, #12]	; (8007cc8 <_sbrk+0x50>)
 8007cbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20001a24 	.word	0x20001a24
 8007ccc:	20002468 	.word	0x20002468

08007cd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007cd4:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <SystemInit+0x28>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cda:	4a07      	ldr	r2, [pc, #28]	; (8007cf8 <SystemInit+0x28>)
 8007cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ce4:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <SystemInit+0x28>)
 8007ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007cea:	609a      	str	r2, [r3, #8]
#endif
}
 8007cec:	bf00      	nop
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	e000ed00 	.word	0xe000ed00

08007cfc <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b09a      	sub	sp, #104	; 0x68
 8007d00:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007d02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007d06:	2224      	movs	r2, #36	; 0x24
 8007d08:	2100      	movs	r1, #0
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f006 fc2e 	bl	800e56c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	605a      	str	r2, [r3, #4]
 8007d1a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007d1c:	1d3b      	adds	r3, r7, #4
 8007d1e:	2234      	movs	r2, #52	; 0x34
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f006 fc22 	bl	800e56c <memset>

  htim1.Instance = TIM1;
 8007d28:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007d2a:	4a2b      	ldr	r2, [pc, #172]	; (8007dd8 <MX_TIM1_Init+0xdc>)
 8007d2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007d2e:	4b29      	ldr	r3, [pc, #164]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8007d34:	4b27      	ldr	r3, [pc, #156]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007d36:	2240      	movs	r2, #64	; 0x40
 8007d38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007d3a:	4b26      	ldr	r3, [pc, #152]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d42:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007d48:	4b22      	ldr	r3, [pc, #136]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007d4e:	4b21      	ldr	r3, [pc, #132]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007d50:	2280      	movs	r2, #128	; 0x80
 8007d52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007d54:	2303      	movs	r3, #3
 8007d56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007d60:	2300      	movs	r3, #0
 8007d62:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007d70:	2300      	movs	r3, #0
 8007d72:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007d78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4815      	ldr	r0, [pc, #84]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007d80:	f004 fa2b 	bl	800c1da <HAL_TIM_Encoder_Init>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007d8a:	f7ff fd49 	bl	8007820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007d8e:	2320      	movs	r3, #32
 8007d90:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d96:	2300      	movs	r3, #0
 8007d98:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007d9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d9e:	4619      	mov	r1, r3
 8007da0:	480c      	ldr	r0, [pc, #48]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007da2:	f004 fea5 	bl	800caf0 <HAL_TIMEx_MasterConfigSynchronization>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007dac:	f7ff fd38 	bl	8007820 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007db0:	2300      	movs	r3, #0
 8007db2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007db4:	2300      	movs	r3, #0
 8007db6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007db8:	1d3b      	adds	r3, r7, #4
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4805      	ldr	r0, [pc, #20]	; (8007dd4 <MX_TIM1_Init+0xd8>)
 8007dbe:	f004 ff2d 	bl	800cc1c <HAL_TIMEx_ConfigBreakDeadTime>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007dc8:	f7ff fd2a 	bl	8007820 <Error_Handler>
  }

}
 8007dcc:	bf00      	nop
 8007dce:	3768      	adds	r7, #104	; 0x68
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20002378 	.word	0x20002378
 8007dd8:	40012c00 	.word	0x40012c00

08007ddc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007de2:	f107 0310 	add.w	r3, r7, #16
 8007de6:	2200      	movs	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	605a      	str	r2, [r3, #4]
 8007dec:	609a      	str	r2, [r3, #8]
 8007dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007df0:	1d3b      	adds	r3, r7, #4
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	605a      	str	r2, [r3, #4]
 8007df8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007dfa:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <MX_TIM2_Init+0x94>)
 8007dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007e00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007e02:	4b1b      	ldr	r3, [pc, #108]	; (8007e70 <MX_TIM2_Init+0x94>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e08:	4b19      	ldr	r3, [pc, #100]	; (8007e70 <MX_TIM2_Init+0x94>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007e0e:	4b18      	ldr	r3, [pc, #96]	; (8007e70 <MX_TIM2_Init+0x94>)
 8007e10:	2201      	movs	r2, #1
 8007e12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e14:	4b16      	ldr	r3, [pc, #88]	; (8007e70 <MX_TIM2_Init+0x94>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007e1a:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <MX_TIM2_Init+0x94>)
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007e20:	4813      	ldr	r0, [pc, #76]	; (8007e70 <MX_TIM2_Init+0x94>)
 8007e22:	f004 f8c7 	bl	800bfb4 <HAL_TIM_Base_Init>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007e2c:	f7ff fcf8 	bl	8007820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007e36:	f107 0310 	add.w	r3, r7, #16
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	480c      	ldr	r0, [pc, #48]	; (8007e70 <MX_TIM2_Init+0x94>)
 8007e3e:	f004 fbf1 	bl	800c624 <HAL_TIM_ConfigClockSource>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007e48:	f7ff fcea 	bl	8007820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007e4c:	2320      	movs	r3, #32
 8007e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007e54:	1d3b      	adds	r3, r7, #4
 8007e56:	4619      	mov	r1, r3
 8007e58:	4805      	ldr	r0, [pc, #20]	; (8007e70 <MX_TIM2_Init+0x94>)
 8007e5a:	f004 fe49 	bl	800caf0 <HAL_TIMEx_MasterConfigSynchronization>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007e64:	f7ff fcdc 	bl	8007820 <Error_Handler>
  }

}
 8007e68:	bf00      	nop
 8007e6a:	3720      	adds	r7, #32
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	200023c4 	.word	0x200023c4

08007e74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e7a:	f107 0310 	add.w	r3, r7, #16
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	605a      	str	r2, [r3, #4]
 8007e84:	609a      	str	r2, [r3, #8]
 8007e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e88:	1d3b      	adds	r3, r7, #4
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	605a      	str	r2, [r3, #4]
 8007e90:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007e92:	4b1d      	ldr	r3, [pc, #116]	; (8007f08 <MX_TIM3_Init+0x94>)
 8007e94:	4a1d      	ldr	r2, [pc, #116]	; (8007f0c <MX_TIM3_Init+0x98>)
 8007e96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007e98:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <MX_TIM3_Init+0x94>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8007e9e:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <MX_TIM3_Init+0x94>)
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007ea4:	4b18      	ldr	r3, [pc, #96]	; (8007f08 <MX_TIM3_Init+0x94>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007eaa:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <MX_TIM3_Init+0x94>)
 8007eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <MX_TIM3_Init+0x94>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007eb8:	4813      	ldr	r0, [pc, #76]	; (8007f08 <MX_TIM3_Init+0x94>)
 8007eba:	f004 f87b 	bl	800bfb4 <HAL_TIM_Base_Init>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007ec4:	f7ff fcac 	bl	8007820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ecc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007ece:	f107 0310 	add.w	r3, r7, #16
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	480c      	ldr	r0, [pc, #48]	; (8007f08 <MX_TIM3_Init+0x94>)
 8007ed6:	f004 fba5 	bl	800c624 <HAL_TIM_ConfigClockSource>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007ee0:	f7ff fc9e 	bl	8007820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007eec:	1d3b      	adds	r3, r7, #4
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4805      	ldr	r0, [pc, #20]	; (8007f08 <MX_TIM3_Init+0x94>)
 8007ef2:	f004 fdfd 	bl	800caf0 <HAL_TIMEx_MasterConfigSynchronization>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007efc:	f7ff fc90 	bl	8007820 <Error_Handler>
  }

}
 8007f00:	bf00      	nop
 8007f02:	3720      	adds	r7, #32
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	2000232c 	.word	0x2000232c
 8007f0c:	40000400 	.word	0x40000400

08007f10 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f16:	f107 0310 	add.w	r3, r7, #16
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	605a      	str	r2, [r3, #4]
 8007f20:	609a      	str	r2, [r3, #8]
 8007f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f24:	1d3b      	adds	r3, r7, #4
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	605a      	str	r2, [r3, #4]
 8007f2c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8007f2e:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <MX_TIM5_Init+0x94>)
 8007f30:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <MX_TIM5_Init+0x98>)
 8007f32:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007f34:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <MX_TIM5_Init+0x94>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f3a:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <MX_TIM5_Init+0x94>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8007f40:	4b18      	ldr	r3, [pc, #96]	; (8007fa4 <MX_TIM5_Init+0x94>)
 8007f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f48:	4b16      	ldr	r3, [pc, #88]	; (8007fa4 <MX_TIM5_Init+0x94>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f4e:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <MX_TIM5_Init+0x94>)
 8007f50:	2280      	movs	r2, #128	; 0x80
 8007f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007f54:	4813      	ldr	r0, [pc, #76]	; (8007fa4 <MX_TIM5_Init+0x94>)
 8007f56:	f004 f82d 	bl	800bfb4 <HAL_TIM_Base_Init>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007f60:	f7ff fc5e 	bl	8007820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007f6a:	f107 0310 	add.w	r3, r7, #16
 8007f6e:	4619      	mov	r1, r3
 8007f70:	480c      	ldr	r0, [pc, #48]	; (8007fa4 <MX_TIM5_Init+0x94>)
 8007f72:	f004 fb57 	bl	800c624 <HAL_TIM_ConfigClockSource>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007f7c:	f7ff fc50 	bl	8007820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f80:	2300      	movs	r3, #0
 8007f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007f88:	1d3b      	adds	r3, r7, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4805      	ldr	r0, [pc, #20]	; (8007fa4 <MX_TIM5_Init+0x94>)
 8007f8e:	f004 fdaf 	bl	800caf0 <HAL_TIMEx_MasterConfigSynchronization>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007f98:	f7ff fc42 	bl	8007820 <Error_Handler>
  }

}
 8007f9c:	bf00      	nop
 8007f9e:	3720      	adds	r7, #32
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	200022e0 	.word	0x200022e0
 8007fa8:	40000c00 	.word	0x40000c00

08007fac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b094      	sub	sp, #80	; 0x50
 8007fb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	609a      	str	r2, [r3, #8]
 8007fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	605a      	str	r2, [r3, #4]
 8007fca:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007fcc:	463b      	mov	r3, r7
 8007fce:	2234      	movs	r2, #52	; 0x34
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f006 faca 	bl	800e56c <memset>

  htim8.Instance = TIM8;
 8007fd8:	4b26      	ldr	r3, [pc, #152]	; (8008074 <MX_TIM8_Init+0xc8>)
 8007fda:	4a27      	ldr	r2, [pc, #156]	; (8008078 <MX_TIM8_Init+0xcc>)
 8007fdc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007fde:	4b25      	ldr	r3, [pc, #148]	; (8008074 <MX_TIM8_Init+0xc8>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fe4:	4b23      	ldr	r3, [pc, #140]	; (8008074 <MX_TIM8_Init+0xc8>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8007fea:	4b22      	ldr	r3, [pc, #136]	; (8008074 <MX_TIM8_Init+0xc8>)
 8007fec:	2201      	movs	r2, #1
 8007fee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ff0:	4b20      	ldr	r3, [pc, #128]	; (8008074 <MX_TIM8_Init+0xc8>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007ff6:	4b1f      	ldr	r3, [pc, #124]	; (8008074 <MX_TIM8_Init+0xc8>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007ffc:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <MX_TIM8_Init+0xc8>)
 8007ffe:	2280      	movs	r2, #128	; 0x80
 8008000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008002:	481c      	ldr	r0, [pc, #112]	; (8008074 <MX_TIM8_Init+0xc8>)
 8008004:	f003 ffd6 	bl	800bfb4 <HAL_TIM_Base_Init>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800800e:	f7ff fc07 	bl	8007820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008016:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800801c:	4619      	mov	r1, r3
 800801e:	4815      	ldr	r0, [pc, #84]	; (8008074 <MX_TIM8_Init+0xc8>)
 8008020:	f004 fb00 	bl	800c624 <HAL_TIM_ConfigClockSource>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800802a:	f7ff fbf9 	bl	8007820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800802e:	2320      	movs	r3, #32
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008032:	2300      	movs	r3, #0
 8008034:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008036:	2300      	movs	r3, #0
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800803a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800803e:	4619      	mov	r1, r3
 8008040:	480c      	ldr	r0, [pc, #48]	; (8008074 <MX_TIM8_Init+0xc8>)
 8008042:	f004 fd55 	bl	800caf0 <HAL_TIMEx_MasterConfigSynchronization>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800804c:	f7ff fbe8 	bl	8007820 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008050:	2300      	movs	r3, #0
 8008052:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008054:	2300      	movs	r3, #0
 8008056:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008058:	463b      	mov	r3, r7
 800805a:	4619      	mov	r1, r3
 800805c:	4805      	ldr	r0, [pc, #20]	; (8008074 <MX_TIM8_Init+0xc8>)
 800805e:	f004 fddd 	bl	800cc1c <HAL_TIMEx_ConfigBreakDeadTime>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008068:	f7ff fbda 	bl	8007820 <Error_Handler>
  }

}
 800806c:	bf00      	nop
 800806e:	3750      	adds	r7, #80	; 0x50
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20002248 	.word	0x20002248
 8008078:	40013400 	.word	0x40013400

0800807c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008082:	f107 0310 	add.w	r3, r7, #16
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	609a      	str	r2, [r3, #8]
 800808e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008090:	1d3b      	adds	r3, r7, #4
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	605a      	str	r2, [r3, #4]
 8008098:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800809a:	4b1f      	ldr	r3, [pc, #124]	; (8008118 <MX_TIM15_Init+0x9c>)
 800809c:	4a1f      	ldr	r2, [pc, #124]	; (800811c <MX_TIM15_Init+0xa0>)
 800809e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80080a0:	4b1d      	ldr	r3, [pc, #116]	; (8008118 <MX_TIM15_Init+0x9c>)
 80080a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080a6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080a8:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <MX_TIM15_Init+0x9c>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80080ae:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <MX_TIM15_Init+0x9c>)
 80080b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080b4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080b6:	4b18      	ldr	r3, [pc, #96]	; (8008118 <MX_TIM15_Init+0x9c>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80080bc:	4b16      	ldr	r3, [pc, #88]	; (8008118 <MX_TIM15_Init+0x9c>)
 80080be:	2200      	movs	r2, #0
 80080c0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <MX_TIM15_Init+0x9c>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80080c8:	4813      	ldr	r0, [pc, #76]	; (8008118 <MX_TIM15_Init+0x9c>)
 80080ca:	f003 ff73 	bl	800bfb4 <HAL_TIM_Base_Init>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80080d4:	f7ff fba4 	bl	8007820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80080de:	f107 0310 	add.w	r3, r7, #16
 80080e2:	4619      	mov	r1, r3
 80080e4:	480c      	ldr	r0, [pc, #48]	; (8008118 <MX_TIM15_Init+0x9c>)
 80080e6:	f004 fa9d 	bl	800c624 <HAL_TIM_ConfigClockSource>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80080f0:	f7ff fb96 	bl	8007820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080f4:	2300      	movs	r3, #0
 80080f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80080fc:	1d3b      	adds	r3, r7, #4
 80080fe:	4619      	mov	r1, r3
 8008100:	4805      	ldr	r0, [pc, #20]	; (8008118 <MX_TIM15_Init+0x9c>)
 8008102:	f004 fcf5 	bl	800caf0 <HAL_TIMEx_MasterConfigSynchronization>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800810c:	f7ff fb88 	bl	8007820 <Error_Handler>
  }

}
 8008110:	bf00      	nop
 8008112:	3720      	adds	r7, #32
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20002294 	.word	0x20002294
 800811c:	40014000 	.word	0x40014000

08008120 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008124:	4b10      	ldr	r3, [pc, #64]	; (8008168 <MX_TIM16_Init+0x48>)
 8008126:	4a11      	ldr	r2, [pc, #68]	; (800816c <MX_TIM16_Init+0x4c>)
 8008128:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 800812a:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <MX_TIM16_Init+0x48>)
 800812c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008130:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008132:	4b0d      	ldr	r3, [pc, #52]	; (8008168 <MX_TIM16_Init+0x48>)
 8008134:	2200      	movs	r2, #0
 8008136:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008138:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <MX_TIM16_Init+0x48>)
 800813a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800813e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008140:	4b09      	ldr	r3, [pc, #36]	; (8008168 <MX_TIM16_Init+0x48>)
 8008142:	2200      	movs	r2, #0
 8008144:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008146:	4b08      	ldr	r3, [pc, #32]	; (8008168 <MX_TIM16_Init+0x48>)
 8008148:	2200      	movs	r2, #0
 800814a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800814c:	4b06      	ldr	r3, [pc, #24]	; (8008168 <MX_TIM16_Init+0x48>)
 800814e:	2200      	movs	r2, #0
 8008150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008152:	4805      	ldr	r0, [pc, #20]	; (8008168 <MX_TIM16_Init+0x48>)
 8008154:	f003 ff2e 	bl	800bfb4 <HAL_TIM_Base_Init>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800815e:	f7ff fb5f 	bl	8007820 <Error_Handler>
  }

}
 8008162:	bf00      	nop
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20002410 	.word	0x20002410
 800816c:	40014400 	.word	0x40014400

08008170 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	; 0x28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008178:	f107 0314 	add.w	r3, r7, #20
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	605a      	str	r2, [r3, #4]
 8008182:	609a      	str	r2, [r3, #8]
 8008184:	60da      	str	r2, [r3, #12]
 8008186:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a1b      	ldr	r2, [pc, #108]	; (80081fc <HAL_TIM_Encoder_MspInit+0x8c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d12f      	bne.n	80081f2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008192:	4b1b      	ldr	r3, [pc, #108]	; (8008200 <HAL_TIM_Encoder_MspInit+0x90>)
 8008194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008196:	4a1a      	ldr	r2, [pc, #104]	; (8008200 <HAL_TIM_Encoder_MspInit+0x90>)
 8008198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800819c:	6613      	str	r3, [r2, #96]	; 0x60
 800819e:	4b18      	ldr	r3, [pc, #96]	; (8008200 <HAL_TIM_Encoder_MspInit+0x90>)
 80081a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081aa:	4b15      	ldr	r3, [pc, #84]	; (8008200 <HAL_TIM_Encoder_MspInit+0x90>)
 80081ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ae:	4a14      	ldr	r2, [pc, #80]	; (8008200 <HAL_TIM_Encoder_MspInit+0x90>)
 80081b0:	f043 0304 	orr.w	r3, r3, #4
 80081b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081b6:	4b12      	ldr	r3, [pc, #72]	; (8008200 <HAL_TIM_Encoder_MspInit+0x90>)
 80081b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80081c2:	2303      	movs	r3, #3
 80081c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081c6:	2302      	movs	r3, #2
 80081c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081ce:	2300      	movs	r3, #0
 80081d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80081d2:	2302      	movs	r3, #2
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081d6:	f107 0314 	add.w	r3, r7, #20
 80081da:	4619      	mov	r1, r3
 80081dc:	4809      	ldr	r0, [pc, #36]	; (8008204 <HAL_TIM_Encoder_MspInit+0x94>)
 80081de:	f002 fcc5 	bl	800ab6c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80081e2:	2200      	movs	r2, #0
 80081e4:	2100      	movs	r1, #0
 80081e6:	2018      	movs	r0, #24
 80081e8:	f001 fda1 	bl	8009d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80081ec:	2018      	movs	r0, #24
 80081ee:	f001 fdb8 	bl	8009d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80081f2:	bf00      	nop
 80081f4:	3728      	adds	r7, #40	; 0x28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	40021000 	.word	0x40021000
 8008204:	48000800 	.word	0x48000800

08008208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08e      	sub	sp, #56	; 0x38
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	605a      	str	r2, [r3, #4]
 800821a:	609a      	str	r2, [r3, #8]
 800821c:	60da      	str	r2, [r3, #12]
 800821e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008228:	d10c      	bne.n	8008244 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800822a:	4b4f      	ldr	r3, [pc, #316]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 800822c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822e:	4a4e      	ldr	r2, [pc, #312]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008230:	f043 0301 	orr.w	r3, r3, #1
 8008234:	6593      	str	r3, [r2, #88]	; 0x58
 8008236:	4b4c      	ldr	r3, [pc, #304]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	623b      	str	r3, [r7, #32]
 8008240:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8008242:	e08d      	b.n	8008360 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a48      	ldr	r2, [pc, #288]	; (800836c <HAL_TIM_Base_MspInit+0x164>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d114      	bne.n	8008278 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800824e:	4b46      	ldr	r3, [pc, #280]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008252:	4a45      	ldr	r2, [pc, #276]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	6593      	str	r3, [r2, #88]	; 0x58
 800825a:	4b43      	ldr	r3, [pc, #268]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 800825c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	61fb      	str	r3, [r7, #28]
 8008264:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008266:	2200      	movs	r2, #0
 8008268:	2100      	movs	r1, #0
 800826a:	201d      	movs	r0, #29
 800826c:	f001 fd5f 	bl	8009d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008270:	201d      	movs	r0, #29
 8008272:	f001 fd76 	bl	8009d62 <HAL_NVIC_EnableIRQ>
}
 8008276:	e073      	b.n	8008360 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a3c      	ldr	r2, [pc, #240]	; (8008370 <HAL_TIM_Base_MspInit+0x168>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d131      	bne.n	80082e6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008282:	4b39      	ldr	r3, [pc, #228]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008286:	4a38      	ldr	r2, [pc, #224]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008288:	f043 0308 	orr.w	r3, r3, #8
 800828c:	6593      	str	r3, [r2, #88]	; 0x58
 800828e:	4b36      	ldr	r3, [pc, #216]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008292:	f003 0308 	and.w	r3, r3, #8
 8008296:	61bb      	str	r3, [r7, #24]
 8008298:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800829a:	4b33      	ldr	r3, [pc, #204]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 800829c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829e:	4a32      	ldr	r2, [pc, #200]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 80082a0:	f043 0301 	orr.w	r3, r3, #1
 80082a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082a6:	4b30      	ldr	r3, [pc, #192]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 80082a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80082b2:	2301      	movs	r3, #1
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082b6:	2302      	movs	r3, #2
 80082b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082be:	2300      	movs	r3, #0
 80082c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80082c2:	2302      	movs	r3, #2
 80082c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ca:	4619      	mov	r1, r3
 80082cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082d0:	f002 fc4c 	bl	800ab6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 80082d4:	2200      	movs	r2, #0
 80082d6:	2102      	movs	r1, #2
 80082d8:	2032      	movs	r0, #50	; 0x32
 80082da:	f001 fd28 	bl	8009d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80082de:	2032      	movs	r0, #50	; 0x32
 80082e0:	f001 fd3f 	bl	8009d62 <HAL_NVIC_EnableIRQ>
}
 80082e4:	e03c      	b.n	8008360 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a22      	ldr	r2, [pc, #136]	; (8008374 <HAL_TIM_Base_MspInit+0x16c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d10c      	bne.n	800830a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80082f0:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 80082f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f4:	4a1c      	ldr	r2, [pc, #112]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 80082f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082fa:	6613      	str	r3, [r2, #96]	; 0x60
 80082fc:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 80082fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	693b      	ldr	r3, [r7, #16]
}
 8008308:	e02a      	b.n	8008360 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1a      	ldr	r2, [pc, #104]	; (8008378 <HAL_TIM_Base_MspInit+0x170>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d114      	bne.n	800833e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008318:	4a13      	ldr	r2, [pc, #76]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 800831a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800831e:	6613      	str	r3, [r2, #96]	; 0x60
 8008320:	4b11      	ldr	r3, [pc, #68]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800832c:	2200      	movs	r2, #0
 800832e:	2100      	movs	r1, #0
 8008330:	2018      	movs	r0, #24
 8008332:	f001 fcfc 	bl	8009d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008336:	2018      	movs	r0, #24
 8008338:	f001 fd13 	bl	8009d62 <HAL_NVIC_EnableIRQ>
}
 800833c:	e010      	b.n	8008360 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a0e      	ldr	r2, [pc, #56]	; (800837c <HAL_TIM_Base_MspInit+0x174>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d10b      	bne.n	8008360 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008348:	4b07      	ldr	r3, [pc, #28]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 800834a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834c:	4a06      	ldr	r2, [pc, #24]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 800834e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008352:	6613      	str	r3, [r2, #96]	; 0x60
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <HAL_TIM_Base_MspInit+0x160>)
 8008356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835c:	60bb      	str	r3, [r7, #8]
 800835e:	68bb      	ldr	r3, [r7, #8]
}
 8008360:	bf00      	nop
 8008362:	3738      	adds	r7, #56	; 0x38
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	40021000 	.word	0x40021000
 800836c:	40000400 	.word	0x40000400
 8008370:	40000c00 	.word	0x40000c00
 8008374:	40013400 	.word	0x40013400
 8008378:	40014000 	.word	0x40014000
 800837c:	40014400 	.word	0x40014400

08008380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008380:	480d      	ldr	r0, [pc, #52]	; (80083b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008382:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008384:	480d      	ldr	r0, [pc, #52]	; (80083bc <LoopForever+0x6>)
  ldr r1, =_edata
 8008386:	490e      	ldr	r1, [pc, #56]	; (80083c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008388:	4a0e      	ldr	r2, [pc, #56]	; (80083c4 <LoopForever+0xe>)
  movs r3, #0
 800838a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800838c:	e002      	b.n	8008394 <LoopCopyDataInit>

0800838e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800838e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008392:	3304      	adds	r3, #4

08008394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008398:	d3f9      	bcc.n	800838e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800839a:	4a0b      	ldr	r2, [pc, #44]	; (80083c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800839c:	4c0b      	ldr	r4, [pc, #44]	; (80083cc <LoopForever+0x16>)
  movs r3, #0
 800839e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083a0:	e001      	b.n	80083a6 <LoopFillZerobss>

080083a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083a4:	3204      	adds	r2, #4

080083a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083a8:	d3fb      	bcc.n	80083a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083aa:	f7ff fc91 	bl	8007cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083ae:	f006 f8b9 	bl	800e524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80083b2:	f7ff f955 	bl	8007660 <main>

080083b6 <LoopForever>:

LoopForever:
    b LoopForever
 80083b6:	e7fe      	b.n	80083b6 <LoopForever>
  ldr   r0, =_estack
 80083b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80083bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083c0:	200019c8 	.word	0x200019c8
  ldr r2, =_sidata
 80083c4:	08013938 	.word	0x08013938
  ldr r2, =_sbss
 80083c8:	200019c8 	.word	0x200019c8
  ldr r4, =_ebss
 80083cc:	20002464 	.word	0x20002464

080083d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80083d0:	e7fe      	b.n	80083d0 <ADC1_2_IRQHandler>

080083d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083dc:	2003      	movs	r0, #3
 80083de:	f001 fc9b 	bl	8009d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80083e2:	2000      	movs	r0, #0
 80083e4:	f000 f80e 	bl	8008404 <HAL_InitTick>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	71fb      	strb	r3, [r7, #7]
 80083f2:	e001      	b.n	80083f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80083f4:	f7ff fae4 	bl	80079c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80083f8:	79fb      	ldrb	r3, [r7, #7]

}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008410:	4b16      	ldr	r3, [pc, #88]	; (800846c <HAL_InitTick+0x68>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d022      	beq.n	800845e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <HAL_InitTick+0x6c>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <HAL_InitTick+0x68>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008424:	fbb1 f3f3 	udiv	r3, r1, r3
 8008428:	fbb2 f3f3 	udiv	r3, r2, r3
 800842c:	4618      	mov	r0, r3
 800842e:	f001 fca6 	bl	8009d7e <HAL_SYSTICK_Config>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10f      	bne.n	8008458 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b0f      	cmp	r3, #15
 800843c:	d809      	bhi.n	8008452 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800843e:	2200      	movs	r2, #0
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008446:	f001 fc72 	bl	8009d2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800844a:	4a0a      	ldr	r2, [pc, #40]	; (8008474 <HAL_InitTick+0x70>)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	e007      	b.n	8008462 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	73fb      	strb	r3, [r7, #15]
 8008456:	e004      	b.n	8008462 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
 800845c:	e001      	b.n	8008462 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20000ca8 	.word	0x20000ca8
 8008470:	20000ca0 	.word	0x20000ca0
 8008474:	20000ca4 	.word	0x20000ca4

08008478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008478:	b480      	push	{r7}
 800847a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <HAL_IncTick+0x1c>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <HAL_IncTick+0x20>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4413      	add	r3, r2
 8008486:	4a03      	ldr	r2, [pc, #12]	; (8008494 <HAL_IncTick+0x1c>)
 8008488:	6013      	str	r3, [r2, #0]
}
 800848a:	bf00      	nop
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	2000245c 	.word	0x2000245c
 8008498:	20000ca8 	.word	0x20000ca8

0800849c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
  return uwTick;
 80084a0:	4b03      	ldr	r3, [pc, #12]	; (80084b0 <HAL_GetTick+0x14>)
 80084a2:	681b      	ldr	r3, [r3, #0]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	2000245c 	.word	0x2000245c

080084b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084bc:	f7ff ffee 	bl	800849c <HAL_GetTick>
 80084c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084cc:	d004      	beq.n	80084d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80084ce:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <HAL_Delay+0x40>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4413      	add	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80084d8:	bf00      	nop
 80084da:	f7ff ffdf 	bl	800849c <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d8f7      	bhi.n	80084da <HAL_Delay+0x26>
  {
  }
}
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000ca8 	.word	0x20000ca8

080084f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	431a      	orrs	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	609a      	str	r2, [r3, #8]
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	609a      	str	r2, [r3, #8]
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008560:	b490      	push	{r4, r7}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3360      	adds	r3, #96	; 0x60
 8008572:	461a      	mov	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <LL_ADC_SetOffset+0x40>)
 8008580:	4013      	ands	r3, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	4313      	orrs	r3, r2
 800858e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008592:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bc90      	pop	{r4, r7}
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	03fff000 	.word	0x03fff000

080085a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80085a4:	b490      	push	{r4, r7}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3360      	adds	r3, #96	; 0x60
 80085b2:	461a      	mov	r2, r3
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc90      	pop	{r4, r7}
 80085ca:	4770      	bx	lr

080085cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80085cc:	b490      	push	{r4, r7}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3360      	adds	r3, #96	; 0x60
 80085dc:	461a      	mov	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc90      	pop	{r4, r7}
 80085fa:	4770      	bx	lr

080085fc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80085fc:	b490      	push	{r4, r7}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3360      	adds	r3, #96	; 0x60
 800860c:	461a      	mov	r2, r3
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4313      	orrs	r3, r2
 8008620:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bc90      	pop	{r4, r7}
 800862a:	4770      	bx	lr

0800862c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800862c:	b490      	push	{r4, r7}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3360      	adds	r3, #96	; 0x60
 800863c:	461a      	mov	r2, r3
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4313      	orrs	r3, r2
 8008650:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bc90      	pop	{r4, r7}
 800865a:	4770      	bx	lr

0800865c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	431a      	orrs	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	615a      	str	r2, [r3, #20]
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008682:	b490      	push	{r4, r7}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3330      	adds	r3, #48	; 0x30
 8008692:	461a      	mov	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	0a1b      	lsrs	r3, r3, #8
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	f003 030c 	and.w	r3, r3, #12
 800869e:	4413      	add	r3, r2
 80086a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f003 031f 	and.w	r3, r3, #31
 80086aa:	211f      	movs	r1, #31
 80086ac:	fa01 f303 	lsl.w	r3, r1, r3
 80086b0:	43db      	mvns	r3, r3
 80086b2:	401a      	ands	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	0e9b      	lsrs	r3, r3, #26
 80086b8:	f003 011f 	and.w	r1, r3, #31
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	fa01 f303 	lsl.w	r3, r1, r3
 80086c6:	4313      	orrs	r3, r2
 80086c8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc90      	pop	{r4, r7}
 80086d2:	4770      	bx	lr

080086d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80086d4:	b490      	push	{r4, r7}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3314      	adds	r3, #20
 80086e4:	461a      	mov	r2, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	0e5b      	lsrs	r3, r3, #25
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	4413      	add	r3, r2
 80086f2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80086f4:	6822      	ldr	r2, [r4, #0]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	0d1b      	lsrs	r3, r3, #20
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	2107      	movs	r1, #7
 8008700:	fa01 f303 	lsl.w	r3, r1, r3
 8008704:	43db      	mvns	r3, r3
 8008706:	401a      	ands	r2, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	0d1b      	lsrs	r3, r3, #20
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	fa01 f303 	lsl.w	r3, r1, r3
 8008716:	4313      	orrs	r3, r2
 8008718:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800871a:	bf00      	nop
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bc90      	pop	{r4, r7}
 8008722:	4770      	bx	lr

08008724 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800873c:	43db      	mvns	r3, r3
 800873e:	401a      	ands	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f003 0318 	and.w	r3, r3, #24
 8008746:	4908      	ldr	r1, [pc, #32]	; (8008768 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008748:	40d9      	lsrs	r1, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	400b      	ands	r3, r1
 800874e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008752:	431a      	orrs	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	0007ffff 	.word	0x0007ffff

0800876c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800877c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6093      	str	r3, [r2, #8]
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087a4:	d101      	bne.n	80087aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80087c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087f4:	d101      	bne.n	80087fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e000      	b.n	80087fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <LL_ADC_IsEnabled+0x18>
 800881c:	2301      	movs	r3, #1
 800881e:	e000      	b.n	8008822 <LL_ADC_IsEnabled+0x1a>
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 0304 	and.w	r3, r3, #4
 800883e:	2b04      	cmp	r3, #4
 8008840:	d101      	bne.n	8008846 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b08      	cmp	r3, #8
 8008866:	d101      	bne.n	800886c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
	...

0800887c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800887c:	b590      	push	{r4, r7, lr}
 800887e:	b089      	sub	sp, #36	; 0x24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008888:	2300      	movs	r3, #0
 800888a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e1ad      	b.n	8008bf2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d109      	bne.n	80088b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7fe f937 	bl	8006b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff ff67 	bl	8008790 <LL_ADC_IsDeepPowerDownEnabled>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff ff4d 	bl	800876c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff ff82 	bl	80087e0 <LL_ADC_IsInternalRegulatorEnabled>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d113      	bne.n	800890a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff ff66 	bl	80087b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80088ec:	4b9e      	ldr	r3, [pc, #632]	; (8008b68 <HAL_ADC_Init+0x2ec>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	099b      	lsrs	r3, r3, #6
 80088f2:	4a9e      	ldr	r2, [pc, #632]	; (8008b6c <HAL_ADC_Init+0x2f0>)
 80088f4:	fba2 2303 	umull	r2, r3, r2, r3
 80088f8:	099b      	lsrs	r3, r3, #6
 80088fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80088fc:	e002      	b.n	8008904 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	3b01      	subs	r3, #1
 8008902:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1f9      	bne.n	80088fe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff ff66 	bl	80087e0 <LL_ADC_IsInternalRegulatorEnabled>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10d      	bne.n	8008936 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800891e:	f043 0210 	orr.w	r2, r3, #16
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800892a:	f043 0201 	orr.w	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff ff77 	bl	800882e <LL_ADC_REG_IsConversionOngoing>
 8008940:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008946:	f003 0310 	and.w	r3, r3, #16
 800894a:	2b00      	cmp	r3, #0
 800894c:	f040 8148 	bne.w	8008be0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2b00      	cmp	r3, #0
 8008954:	f040 8144 	bne.w	8008be0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008960:	f043 0202 	orr.w	r2, r3, #2
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff ff4b 	bl	8008808 <LL_ADC_IsEnabled>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d141      	bne.n	80089fc <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008980:	d004      	beq.n	800898c <HAL_ADC_Init+0x110>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a7a      	ldr	r2, [pc, #488]	; (8008b70 <HAL_ADC_Init+0x2f4>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d10f      	bne.n	80089ac <HAL_ADC_Init+0x130>
 800898c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008990:	f7ff ff3a 	bl	8008808 <LL_ADC_IsEnabled>
 8008994:	4604      	mov	r4, r0
 8008996:	4876      	ldr	r0, [pc, #472]	; (8008b70 <HAL_ADC_Init+0x2f4>)
 8008998:	f7ff ff36 	bl	8008808 <LL_ADC_IsEnabled>
 800899c:	4603      	mov	r3, r0
 800899e:	4323      	orrs	r3, r4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bf0c      	ite	eq
 80089a4:	2301      	moveq	r3, #1
 80089a6:	2300      	movne	r3, #0
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	e012      	b.n	80089d2 <HAL_ADC_Init+0x156>
 80089ac:	4871      	ldr	r0, [pc, #452]	; (8008b74 <HAL_ADC_Init+0x2f8>)
 80089ae:	f7ff ff2b 	bl	8008808 <LL_ADC_IsEnabled>
 80089b2:	4604      	mov	r4, r0
 80089b4:	4870      	ldr	r0, [pc, #448]	; (8008b78 <HAL_ADC_Init+0x2fc>)
 80089b6:	f7ff ff27 	bl	8008808 <LL_ADC_IsEnabled>
 80089ba:	4603      	mov	r3, r0
 80089bc:	431c      	orrs	r4, r3
 80089be:	486f      	ldr	r0, [pc, #444]	; (8008b7c <HAL_ADC_Init+0x300>)
 80089c0:	f7ff ff22 	bl	8008808 <LL_ADC_IsEnabled>
 80089c4:	4603      	mov	r3, r0
 80089c6:	4323      	orrs	r3, r4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	bf0c      	ite	eq
 80089cc:	2301      	moveq	r3, #1
 80089ce:	2300      	movne	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d012      	beq.n	80089fc <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089de:	d004      	beq.n	80089ea <HAL_ADC_Init+0x16e>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a62      	ldr	r2, [pc, #392]	; (8008b70 <HAL_ADC_Init+0x2f4>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d101      	bne.n	80089ee <HAL_ADC_Init+0x172>
 80089ea:	4a65      	ldr	r2, [pc, #404]	; (8008b80 <HAL_ADC_Init+0x304>)
 80089ec:	e000      	b.n	80089f0 <HAL_ADC_Init+0x174>
 80089ee:	4a65      	ldr	r2, [pc, #404]	; (8008b84 <HAL_ADC_Init+0x308>)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f7ff fd7e 	bl	80084f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7f5b      	ldrb	r3, [r3, #29]
 8008a00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a06:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008a0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008a12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a1a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d106      	bne.n	8008a38 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	045b      	lsls	r3, r3, #17
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	4b4b      	ldr	r3, [pc, #300]	; (8008b88 <HAL_ADC_Init+0x30c>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	69b9      	ldr	r1, [r7, #24]
 8008a64:	430b      	orrs	r3, r1
 8008a66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7ff fed3 	bl	800882e <LL_ADC_REG_IsConversionOngoing>
 8008a88:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff fee0 	bl	8008854 <LL_ADC_INJ_IsConversionOngoing>
 8008a94:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d17f      	bne.n	8008b9c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d17c      	bne.n	8008b9c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008aa6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008aae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008abe:	f023 0302 	bic.w	r3, r3, #2
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6812      	ldr	r2, [r2, #0]
 8008ac6:	69b9      	ldr	r1, [r7, #24]
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d017      	beq.n	8008b04 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691a      	ldr	r2, [r3, #16]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008ae2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008aec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6911      	ldr	r1, [r2, #16]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6812      	ldr	r2, [r2, #0]
 8008afc:	430b      	orrs	r3, r1
 8008afe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008b02:	e013      	b.n	8008b2c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6812      	ldr	r2, [r2, #0]
 8008b20:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008b24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b28:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d12a      	bne.n	8008b8c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b40:	f023 0304 	bic.w	r3, r3, #4
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b4c:	4311      	orrs	r1, r2
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008b52:	4311      	orrs	r1, r2
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f042 0201 	orr.w	r2, r2, #1
 8008b64:	611a      	str	r2, [r3, #16]
 8008b66:	e019      	b.n	8008b9c <HAL_ADC_Init+0x320>
 8008b68:	20000ca0 	.word	0x20000ca0
 8008b6c:	053e2d63 	.word	0x053e2d63
 8008b70:	50000100 	.word	0x50000100
 8008b74:	50000400 	.word	0x50000400
 8008b78:	50000500 	.word	0x50000500
 8008b7c:	50000600 	.word	0x50000600
 8008b80:	50000300 	.word	0x50000300
 8008b84:	50000700 	.word	0x50000700
 8008b88:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d10c      	bne.n	8008bbe <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	f023 010f 	bic.w	r1, r3, #15
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	1e5a      	subs	r2, r3, #1
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30
 8008bbc:	e007      	b.n	8008bce <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 020f 	bic.w	r2, r2, #15
 8008bcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	f043 0201 	orr.w	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bde:	e007      	b.n	8008bf0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be4:	f043 0210 	orr.w	r2, r3, #16
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3724      	adds	r7, #36	; 0x24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd90      	pop	{r4, r7, pc}
 8008bfa:	bf00      	nop

08008bfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b0a6      	sub	sp, #152	; 0x98
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d101      	bne.n	8008c1e <HAL_ADC_ConfigChannel+0x22>
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	e38e      	b.n	800933c <HAL_ADC_ConfigChannel+0x740>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff fdff 	bl	800882e <LL_ADC_REG_IsConversionOngoing>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f040 836f 	bne.w	8009316 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	6859      	ldr	r1, [r3, #4]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	f7ff fd1c 	bl	8008682 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff fded 	bl	800882e <LL_ADC_REG_IsConversionOngoing>
 8008c54:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff fdf9 	bl	8008854 <LL_ADC_INJ_IsConversionOngoing>
 8008c62:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f040 817b 	bne.w	8008f66 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 8176 	bne.w	8008f66 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c82:	d10f      	bne.n	8008ca4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4619      	mov	r1, r3
 8008c90:	f7ff fd20 	bl	80086d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff fcdd 	bl	800865c <LL_ADC_SetSamplingTimeCommonConfig>
 8008ca2:	e00e      	b.n	8008cc2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	6819      	ldr	r1, [r3, #0]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f7ff fd0f 	bl	80086d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff fccd 	bl	800865c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	08db      	lsrs	r3, r3, #3
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d022      	beq.n	8008d2a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6818      	ldr	r0, [r3, #0]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	6919      	ldr	r1, [r3, #16]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cf4:	f7ff fc34 	bl	8008560 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	6919      	ldr	r1, [r3, #16]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	461a      	mov	r2, r3
 8008d06:	f7ff fc79 	bl	80085fc <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	6919      	ldr	r1, [r3, #16]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	7f1b      	ldrb	r3, [r3, #28]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d102      	bne.n	8008d20 <HAL_ADC_ConfigChannel+0x124>
 8008d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d1e:	e000      	b.n	8008d22 <HAL_ADC_ConfigChannel+0x126>
 8008d20:	2300      	movs	r3, #0
 8008d22:	461a      	mov	r2, r3
 8008d24:	f7ff fc82 	bl	800862c <LL_ADC_SetOffsetSaturation>
 8008d28:	e11d      	b.n	8008f66 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff fc37 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008d36:	4603      	mov	r3, r0
 8008d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <HAL_ADC_ConfigChannel+0x15a>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2100      	movs	r1, #0
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fc2c 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	0e9b      	lsrs	r3, r3, #26
 8008d50:	f003 021f 	and.w	r2, r3, #31
 8008d54:	e012      	b.n	8008d7c <HAL_ADC_ConfigChannel+0x180>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff fc21 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d6c:	fa93 f3a3 	rbit	r3, r3
 8008d70:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d74:	fab3 f383 	clz	r3, r3
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d105      	bne.n	8008d94 <HAL_ADC_ConfigChannel+0x198>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	0e9b      	lsrs	r3, r3, #26
 8008d8e:	f003 031f 	and.w	r3, r3, #31
 8008d92:	e00a      	b.n	8008daa <HAL_ADC_ConfigChannel+0x1ae>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9c:	fa93 f3a3 	rbit	r3, r3
 8008da0:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008da4:	fab3 f383 	clz	r3, r3
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d106      	bne.n	8008dbc <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2200      	movs	r2, #0
 8008db4:	2100      	movs	r1, #0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff fc08 	bl	80085cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fbee 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <HAL_ADC_ConfigChannel+0x1ec>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff fbe3 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008dde:	4603      	mov	r3, r0
 8008de0:	0e9b      	lsrs	r3, r3, #26
 8008de2:	f003 021f 	and.w	r2, r3, #31
 8008de6:	e010      	b.n	8008e0a <HAL_ADC_ConfigChannel+0x20e>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2101      	movs	r1, #1
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff fbd8 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008df4:	4603      	mov	r3, r0
 8008df6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dfa:	fa93 f3a3 	rbit	r3, r3
 8008dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e02:	fab3 f383 	clz	r3, r3
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d105      	bne.n	8008e22 <HAL_ADC_ConfigChannel+0x226>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	0e9b      	lsrs	r3, r3, #26
 8008e1c:	f003 031f 	and.w	r3, r3, #31
 8008e20:	e00a      	b.n	8008e38 <HAL_ADC_ConfigChannel+0x23c>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e2a:	fa93 f3a3 	rbit	r3, r3
 8008e2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e32:	fab3 f383 	clz	r3, r3
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d106      	bne.n	8008e4a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2200      	movs	r2, #0
 8008e42:	2101      	movs	r1, #1
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7ff fbc1 	bl	80085cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2102      	movs	r1, #2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7ff fba7 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008e56:	4603      	mov	r3, r0
 8008e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <HAL_ADC_ConfigChannel+0x27a>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2102      	movs	r1, #2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff fb9c 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	0e9b      	lsrs	r3, r3, #26
 8008e70:	f003 021f 	and.w	r2, r3, #31
 8008e74:	e010      	b.n	8008e98 <HAL_ADC_ConfigChannel+0x29c>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2102      	movs	r1, #2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff fb91 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008e82:	4603      	mov	r3, r0
 8008e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e88:	fa93 f3a3 	rbit	r3, r3
 8008e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e90:	fab3 f383 	clz	r3, r3
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <HAL_ADC_ConfigChannel+0x2b4>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	0e9b      	lsrs	r3, r3, #26
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	e00a      	b.n	8008ec6 <HAL_ADC_ConfigChannel+0x2ca>
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008eb8:	fa93 f3a3 	rbit	r3, r3
 8008ebc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ec0:	fab3 f383 	clz	r3, r3
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d106      	bne.n	8008ed8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2102      	movs	r1, #2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff fb7a 	bl	80085cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2103      	movs	r1, #3
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff fb60 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <HAL_ADC_ConfigChannel+0x308>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2103      	movs	r1, #3
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff fb55 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008efa:	4603      	mov	r3, r0
 8008efc:	0e9b      	lsrs	r3, r3, #26
 8008efe:	f003 021f 	and.w	r2, r3, #31
 8008f02:	e010      	b.n	8008f26 <HAL_ADC_ConfigChannel+0x32a>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2103      	movs	r1, #3
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff fb4a 	bl	80085a4 <LL_ADC_GetOffsetChannel>
 8008f10:	4603      	mov	r3, r0
 8008f12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f16:	fa93 f3a3 	rbit	r3, r3
 8008f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1e:	fab3 f383 	clz	r3, r3
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d105      	bne.n	8008f3e <HAL_ADC_ConfigChannel+0x342>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	0e9b      	lsrs	r3, r3, #26
 8008f38:	f003 031f 	and.w	r3, r3, #31
 8008f3c:	e00a      	b.n	8008f54 <HAL_ADC_ConfigChannel+0x358>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f46:	fa93 f3a3 	rbit	r3, r3
 8008f4a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f4e:	fab3 f383 	clz	r3, r3
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d106      	bne.n	8008f66 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2103      	movs	r1, #3
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fb33 	bl	80085cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fc4c 	bl	8008808 <LL_ADC_IsEnabled>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f040 810c 	bne.w	8009190 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	6819      	ldr	r1, [r3, #0]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	461a      	mov	r2, r3
 8008f86:	f7ff fbcd 	bl	8008724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	4aaf      	ldr	r2, [pc, #700]	; (800924c <HAL_ADC_ConfigChannel+0x650>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	f040 80fd 	bne.w	8009190 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10b      	bne.n	8008fbe <HAL_ADC_ConfigChannel+0x3c2>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	0e9b      	lsrs	r3, r3, #26
 8008fac:	3301      	adds	r3, #1
 8008fae:	f003 031f 	and.w	r3, r3, #31
 8008fb2:	2b09      	cmp	r3, #9
 8008fb4:	bf94      	ite	ls
 8008fb6:	2301      	movls	r3, #1
 8008fb8:	2300      	movhi	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	e012      	b.n	8008fe4 <HAL_ADC_ConfigChannel+0x3e8>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fc6:	fa93 f3a3 	rbit	r3, r3
 8008fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fce:	fab3 f383 	clz	r3, r3
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f003 031f 	and.w	r3, r3, #31
 8008fda:	2b09      	cmp	r3, #9
 8008fdc:	bf94      	ite	ls
 8008fde:	2301      	movls	r3, #1
 8008fe0:	2300      	movhi	r3, #0
 8008fe2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d064      	beq.n	80090b2 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d107      	bne.n	8009004 <HAL_ADC_ConfigChannel+0x408>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	0e9b      	lsrs	r3, r3, #26
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	069b      	lsls	r3, r3, #26
 8008ffe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009002:	e00e      	b.n	8009022 <HAL_ADC_ConfigChannel+0x426>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	fa93 f3a3 	rbit	r3, r3
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009014:	fab3 f383 	clz	r3, r3
 8009018:	b2db      	uxtb	r3, r3
 800901a:	3301      	adds	r3, #1
 800901c:	069b      	lsls	r3, r3, #26
 800901e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800902a:	2b00      	cmp	r3, #0
 800902c:	d109      	bne.n	8009042 <HAL_ADC_ConfigChannel+0x446>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	0e9b      	lsrs	r3, r3, #26
 8009034:	3301      	adds	r3, #1
 8009036:	f003 031f 	and.w	r3, r3, #31
 800903a:	2101      	movs	r1, #1
 800903c:	fa01 f303 	lsl.w	r3, r1, r3
 8009040:	e010      	b.n	8009064 <HAL_ADC_ConfigChannel+0x468>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	fa93 f3a3 	rbit	r3, r3
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	fab3 f383 	clz	r3, r3
 8009056:	b2db      	uxtb	r3, r3
 8009058:	3301      	adds	r3, #1
 800905a:	f003 031f 	and.w	r3, r3, #31
 800905e:	2101      	movs	r1, #1
 8009060:	fa01 f303 	lsl.w	r3, r1, r3
 8009064:	ea42 0103 	orr.w	r1, r2, r3
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <HAL_ADC_ConfigChannel+0x48e>
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	0e9b      	lsrs	r3, r3, #26
 800907a:	3301      	adds	r3, #1
 800907c:	f003 021f 	and.w	r2, r3, #31
 8009080:	4613      	mov	r3, r2
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	4413      	add	r3, r2
 8009086:	051b      	lsls	r3, r3, #20
 8009088:	e011      	b.n	80090ae <HAL_ADC_ConfigChannel+0x4b2>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	fa93 f3a3 	rbit	r3, r3
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	fab3 f383 	clz	r3, r3
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	3301      	adds	r3, #1
 80090a2:	f003 021f 	and.w	r2, r3, #31
 80090a6:	4613      	mov	r3, r2
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	4413      	add	r3, r2
 80090ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80090ae:	430b      	orrs	r3, r1
 80090b0:	e069      	b.n	8009186 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d107      	bne.n	80090ce <HAL_ADC_ConfigChannel+0x4d2>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	0e9b      	lsrs	r3, r3, #26
 80090c4:	3301      	adds	r3, #1
 80090c6:	069b      	lsls	r3, r3, #26
 80090c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090cc:	e00e      	b.n	80090ec <HAL_ADC_ConfigChannel+0x4f0>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	fa93 f3a3 	rbit	r3, r3
 80090da:	61fb      	str	r3, [r7, #28]
  return result;
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	fab3 f383 	clz	r3, r3
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	3301      	adds	r3, #1
 80090e6:	069b      	lsls	r3, r3, #26
 80090e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d109      	bne.n	800910c <HAL_ADC_ConfigChannel+0x510>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	0e9b      	lsrs	r3, r3, #26
 80090fe:	3301      	adds	r3, #1
 8009100:	f003 031f 	and.w	r3, r3, #31
 8009104:	2101      	movs	r1, #1
 8009106:	fa01 f303 	lsl.w	r3, r1, r3
 800910a:	e010      	b.n	800912e <HAL_ADC_ConfigChannel+0x532>
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	fa93 f3a3 	rbit	r3, r3
 8009118:	617b      	str	r3, [r7, #20]
  return result;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	fab3 f383 	clz	r3, r3
 8009120:	b2db      	uxtb	r3, r3
 8009122:	3301      	adds	r3, #1
 8009124:	f003 031f 	and.w	r3, r3, #31
 8009128:	2101      	movs	r1, #1
 800912a:	fa01 f303 	lsl.w	r3, r1, r3
 800912e:	ea42 0103 	orr.w	r1, r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10d      	bne.n	800915a <HAL_ADC_ConfigChannel+0x55e>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	0e9b      	lsrs	r3, r3, #26
 8009144:	3301      	adds	r3, #1
 8009146:	f003 021f 	and.w	r2, r3, #31
 800914a:	4613      	mov	r3, r2
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	4413      	add	r3, r2
 8009150:	3b1e      	subs	r3, #30
 8009152:	051b      	lsls	r3, r3, #20
 8009154:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009158:	e014      	b.n	8009184 <HAL_ADC_ConfigChannel+0x588>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	fa93 f3a3 	rbit	r3, r3
 8009166:	60fb      	str	r3, [r7, #12]
  return result;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	fab3 f383 	clz	r3, r3
 800916e:	b2db      	uxtb	r3, r3
 8009170:	3301      	adds	r3, #1
 8009172:	f003 021f 	and.w	r2, r3, #31
 8009176:	4613      	mov	r3, r2
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	4413      	add	r3, r2
 800917c:	3b1e      	subs	r3, #30
 800917e:	051b      	lsls	r3, r3, #20
 8009180:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009184:	430b      	orrs	r3, r1
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	6892      	ldr	r2, [r2, #8]
 800918a:	4619      	mov	r1, r3
 800918c:	f7ff faa2 	bl	80086d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	4b2e      	ldr	r3, [pc, #184]	; (8009250 <HAL_ADC_ConfigChannel+0x654>)
 8009196:	4013      	ands	r3, r2
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 80c9 	beq.w	8009330 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091a6:	d004      	beq.n	80091b2 <HAL_ADC_ConfigChannel+0x5b6>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a29      	ldr	r2, [pc, #164]	; (8009254 <HAL_ADC_ConfigChannel+0x658>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d101      	bne.n	80091b6 <HAL_ADC_ConfigChannel+0x5ba>
 80091b2:	4b29      	ldr	r3, [pc, #164]	; (8009258 <HAL_ADC_ConfigChannel+0x65c>)
 80091b4:	e000      	b.n	80091b8 <HAL_ADC_ConfigChannel+0x5bc>
 80091b6:	4b29      	ldr	r3, [pc, #164]	; (800925c <HAL_ADC_ConfigChannel+0x660>)
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff f9c3 	bl	8008544 <LL_ADC_GetCommonPathInternalCh>
 80091be:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a26      	ldr	r2, [pc, #152]	; (8009260 <HAL_ADC_ConfigChannel+0x664>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d004      	beq.n	80091d6 <HAL_ADC_ConfigChannel+0x5da>
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a24      	ldr	r2, [pc, #144]	; (8009264 <HAL_ADC_ConfigChannel+0x668>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d14e      	bne.n	8009274 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80091d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d148      	bne.n	8009274 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ea:	d005      	beq.n	80091f8 <HAL_ADC_ConfigChannel+0x5fc>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <HAL_ADC_ConfigChannel+0x66c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	f040 8099 	bne.w	800932a <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009200:	d004      	beq.n	800920c <HAL_ADC_ConfigChannel+0x610>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a13      	ldr	r2, [pc, #76]	; (8009254 <HAL_ADC_ConfigChannel+0x658>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d101      	bne.n	8009210 <HAL_ADC_ConfigChannel+0x614>
 800920c:	4a12      	ldr	r2, [pc, #72]	; (8009258 <HAL_ADC_ConfigChannel+0x65c>)
 800920e:	e000      	b.n	8009212 <HAL_ADC_ConfigChannel+0x616>
 8009210:	4a12      	ldr	r2, [pc, #72]	; (800925c <HAL_ADC_ConfigChannel+0x660>)
 8009212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009216:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800921a:	4619      	mov	r1, r3
 800921c:	4610      	mov	r0, r2
 800921e:	f7ff f97e 	bl	800851e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009222:	4b12      	ldr	r3, [pc, #72]	; (800926c <HAL_ADC_ConfigChannel+0x670>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	099b      	lsrs	r3, r3, #6
 8009228:	4a11      	ldr	r2, [pc, #68]	; (8009270 <HAL_ADC_ConfigChannel+0x674>)
 800922a:	fba2 2303 	umull	r2, r3, r2, r3
 800922e:	099a      	lsrs	r2, r3, #6
 8009230:	4613      	mov	r3, r2
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	4413      	add	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800923a:	e002      	b.n	8009242 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	3b01      	subs	r3, #1
 8009240:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1f9      	bne.n	800923c <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009248:	e06f      	b.n	800932a <HAL_ADC_ConfigChannel+0x72e>
 800924a:	bf00      	nop
 800924c:	407f0000 	.word	0x407f0000
 8009250:	80080000 	.word	0x80080000
 8009254:	50000100 	.word	0x50000100
 8009258:	50000300 	.word	0x50000300
 800925c:	50000700 	.word	0x50000700
 8009260:	c3210000 	.word	0xc3210000
 8009264:	90c00010 	.word	0x90c00010
 8009268:	50000600 	.word	0x50000600
 800926c:	20000ca0 	.word	0x20000ca0
 8009270:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a32      	ldr	r2, [pc, #200]	; (8009344 <HAL_ADC_ConfigChannel+0x748>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d125      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x6ce>
 800927e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d11f      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a2e      	ldr	r2, [pc, #184]	; (8009348 <HAL_ADC_ConfigChannel+0x74c>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d104      	bne.n	800929e <HAL_ADC_ConfigChannel+0x6a2>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a2c      	ldr	r2, [pc, #176]	; (800934c <HAL_ADC_ConfigChannel+0x750>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d047      	beq.n	800932e <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092a6:	d004      	beq.n	80092b2 <HAL_ADC_ConfigChannel+0x6b6>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a26      	ldr	r2, [pc, #152]	; (8009348 <HAL_ADC_ConfigChannel+0x74c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d101      	bne.n	80092b6 <HAL_ADC_ConfigChannel+0x6ba>
 80092b2:	4a27      	ldr	r2, [pc, #156]	; (8009350 <HAL_ADC_ConfigChannel+0x754>)
 80092b4:	e000      	b.n	80092b8 <HAL_ADC_ConfigChannel+0x6bc>
 80092b6:	4a27      	ldr	r2, [pc, #156]	; (8009354 <HAL_ADC_ConfigChannel+0x758>)
 80092b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f7ff f92b 	bl	800851e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80092c8:	e031      	b.n	800932e <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a22      	ldr	r2, [pc, #136]	; (8009358 <HAL_ADC_ConfigChannel+0x75c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d12d      	bne.n	8009330 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80092d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d127      	bne.n	8009330 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a18      	ldr	r2, [pc, #96]	; (8009348 <HAL_ADC_ConfigChannel+0x74c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d022      	beq.n	8009330 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092f2:	d004      	beq.n	80092fe <HAL_ADC_ConfigChannel+0x702>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a13      	ldr	r2, [pc, #76]	; (8009348 <HAL_ADC_ConfigChannel+0x74c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d101      	bne.n	8009302 <HAL_ADC_ConfigChannel+0x706>
 80092fe:	4a14      	ldr	r2, [pc, #80]	; (8009350 <HAL_ADC_ConfigChannel+0x754>)
 8009300:	e000      	b.n	8009304 <HAL_ADC_ConfigChannel+0x708>
 8009302:	4a14      	ldr	r2, [pc, #80]	; (8009354 <HAL_ADC_ConfigChannel+0x758>)
 8009304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800930c:	4619      	mov	r1, r3
 800930e:	4610      	mov	r0, r2
 8009310:	f7ff f905 	bl	800851e <LL_ADC_SetCommonPathInternalCh>
 8009314:	e00c      	b.n	8009330 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800931a:	f043 0220 	orr.w	r2, r3, #32
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009328:	e002      	b.n	8009330 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800932a:	bf00      	nop
 800932c:	e000      	b.n	8009330 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800932e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009338:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800933c:	4618      	mov	r0, r3
 800933e:	3798      	adds	r7, #152	; 0x98
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	c7520000 	.word	0xc7520000
 8009348:	50000100 	.word	0x50000100
 800934c:	50000500 	.word	0x50000500
 8009350:	50000300 	.word	0x50000300
 8009354:	50000700 	.word	0x50000700
 8009358:	cb840000 	.word	0xcb840000

0800935c <LL_ADC_IsEnabled>:
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <LL_ADC_IsEnabled+0x18>
 8009370:	2301      	movs	r3, #1
 8009372:	e000      	b.n	8009376 <LL_ADC_IsEnabled+0x1a>
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <LL_ADC_REG_IsConversionOngoing>:
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b04      	cmp	r3, #4
 8009394:	d101      	bne.n	800939a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80093a8:	b590      	push	{r4, r7, lr}
 80093aa:	b0a1      	sub	sp, #132	; 0x84
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d101      	bne.n	80093c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80093c2:	2302      	movs	r3, #2
 80093c4:	e0e3      	b.n	800958e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093d6:	d102      	bne.n	80093de <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80093d8:	4b6f      	ldr	r3, [pc, #444]	; (8009598 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80093da:	60bb      	str	r3, [r7, #8]
 80093dc:	e009      	b.n	80093f2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a6e      	ldr	r2, [pc, #440]	; (800959c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d102      	bne.n	80093ee <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80093e8:	4b6d      	ldr	r3, [pc, #436]	; (80095a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80093ea:	60bb      	str	r3, [r7, #8]
 80093ec:	e001      	b.n	80093f2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80093ee:	2300      	movs	r3, #0
 80093f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10b      	bne.n	8009410 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093fc:	f043 0220 	orr.w	r2, r3, #32
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e0be      	b.n	800958e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff ffb5 	bl	8009382 <LL_ADC_REG_IsConversionOngoing>
 8009418:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4618      	mov	r0, r3
 8009420:	f7ff ffaf 	bl	8009382 <LL_ADC_REG_IsConversionOngoing>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	f040 80a0 	bne.w	800956c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800942c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800942e:	2b00      	cmp	r3, #0
 8009430:	f040 809c 	bne.w	800956c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800943c:	d004      	beq.n	8009448 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a55      	ldr	r2, [pc, #340]	; (8009598 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d101      	bne.n	800944c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009448:	4b56      	ldr	r3, [pc, #344]	; (80095a4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800944a:	e000      	b.n	800944e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800944c:	4b56      	ldr	r3, [pc, #344]	; (80095a8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800944e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d04b      	beq.n	80094f0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	6859      	ldr	r1, [r3, #4]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800946a:	035b      	lsls	r3, r3, #13
 800946c:	430b      	orrs	r3, r1
 800946e:	431a      	orrs	r2, r3
 8009470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009472:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800947c:	d004      	beq.n	8009488 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a45      	ldr	r2, [pc, #276]	; (8009598 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d10f      	bne.n	80094a8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009488:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800948c:	f7ff ff66 	bl	800935c <LL_ADC_IsEnabled>
 8009490:	4604      	mov	r4, r0
 8009492:	4841      	ldr	r0, [pc, #260]	; (8009598 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009494:	f7ff ff62 	bl	800935c <LL_ADC_IsEnabled>
 8009498:	4603      	mov	r3, r0
 800949a:	4323      	orrs	r3, r4
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf0c      	ite	eq
 80094a0:	2301      	moveq	r3, #1
 80094a2:	2300      	movne	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	e012      	b.n	80094ce <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80094a8:	483c      	ldr	r0, [pc, #240]	; (800959c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80094aa:	f7ff ff57 	bl	800935c <LL_ADC_IsEnabled>
 80094ae:	4604      	mov	r4, r0
 80094b0:	483b      	ldr	r0, [pc, #236]	; (80095a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80094b2:	f7ff ff53 	bl	800935c <LL_ADC_IsEnabled>
 80094b6:	4603      	mov	r3, r0
 80094b8:	431c      	orrs	r4, r3
 80094ba:	483c      	ldr	r0, [pc, #240]	; (80095ac <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80094bc:	f7ff ff4e 	bl	800935c <LL_ADC_IsEnabled>
 80094c0:	4603      	mov	r3, r0
 80094c2:	4323      	orrs	r3, r4
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bf0c      	ite	eq
 80094c8:	2301      	moveq	r3, #1
 80094ca:	2300      	movne	r3, #0
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d056      	beq.n	8009580 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80094d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80094da:	f023 030f 	bic.w	r3, r3, #15
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	6811      	ldr	r1, [r2, #0]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	6892      	ldr	r2, [r2, #8]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	431a      	orrs	r2, r3
 80094ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ec:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80094ee:	e047      	b.n	8009580 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80094f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80094f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009504:	d004      	beq.n	8009510 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a23      	ldr	r2, [pc, #140]	; (8009598 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d10f      	bne.n	8009530 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009510:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009514:	f7ff ff22 	bl	800935c <LL_ADC_IsEnabled>
 8009518:	4604      	mov	r4, r0
 800951a:	481f      	ldr	r0, [pc, #124]	; (8009598 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800951c:	f7ff ff1e 	bl	800935c <LL_ADC_IsEnabled>
 8009520:	4603      	mov	r3, r0
 8009522:	4323      	orrs	r3, r4
 8009524:	2b00      	cmp	r3, #0
 8009526:	bf0c      	ite	eq
 8009528:	2301      	moveq	r3, #1
 800952a:	2300      	movne	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	e012      	b.n	8009556 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009530:	481a      	ldr	r0, [pc, #104]	; (800959c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009532:	f7ff ff13 	bl	800935c <LL_ADC_IsEnabled>
 8009536:	4604      	mov	r4, r0
 8009538:	4819      	ldr	r0, [pc, #100]	; (80095a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800953a:	f7ff ff0f 	bl	800935c <LL_ADC_IsEnabled>
 800953e:	4603      	mov	r3, r0
 8009540:	431c      	orrs	r4, r3
 8009542:	481a      	ldr	r0, [pc, #104]	; (80095ac <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009544:	f7ff ff0a 	bl	800935c <LL_ADC_IsEnabled>
 8009548:	4603      	mov	r3, r0
 800954a:	4323      	orrs	r3, r4
 800954c:	2b00      	cmp	r3, #0
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d012      	beq.n	8009580 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800955a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009562:	f023 030f 	bic.w	r3, r3, #15
 8009566:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009568:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800956a:	e009      	b.n	8009580 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009570:	f043 0220 	orr.w	r2, r3, #32
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800957e:	e000      	b.n	8009582 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009580:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800958a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800958e:	4618      	mov	r0, r3
 8009590:	3784      	adds	r7, #132	; 0x84
 8009592:	46bd      	mov	sp, r7
 8009594:	bd90      	pop	{r4, r7, pc}
 8009596:	bf00      	nop
 8009598:	50000100 	.word	0x50000100
 800959c:	50000400 	.word	0x50000400
 80095a0:	50000500 	.word	0x50000500
 80095a4:	50000300 	.word	0x50000300
 80095a8:	50000700 	.word	0x50000700
 80095ac:	50000600 	.word	0x50000600

080095b0 <LL_EXTI_EnableIT_0_31>:
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <LL_EXTI_EnableIT_0_31+0x20>)
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	4904      	ldr	r1, [pc, #16]	; (80095d0 <LL_EXTI_EnableIT_0_31+0x20>)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	600b      	str	r3, [r1, #0]
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	40010400 	.word	0x40010400

080095d4 <LL_EXTI_EnableIT_32_63>:
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80095dc:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <LL_EXTI_EnableIT_32_63+0x20>)
 80095de:	6a1a      	ldr	r2, [r3, #32]
 80095e0:	4904      	ldr	r1, [pc, #16]	; (80095f4 <LL_EXTI_EnableIT_32_63+0x20>)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	620b      	str	r3, [r1, #32]
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	40010400 	.word	0x40010400

080095f8 <LL_EXTI_DisableIT_0_31>:
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009600:	4b06      	ldr	r3, [pc, #24]	; (800961c <LL_EXTI_DisableIT_0_31+0x24>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	43db      	mvns	r3, r3
 8009608:	4904      	ldr	r1, [pc, #16]	; (800961c <LL_EXTI_DisableIT_0_31+0x24>)
 800960a:	4013      	ands	r3, r2
 800960c:	600b      	str	r3, [r1, #0]
}
 800960e:	bf00      	nop
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	40010400 	.word	0x40010400

08009620 <LL_EXTI_DisableIT_32_63>:
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009628:	4b06      	ldr	r3, [pc, #24]	; (8009644 <LL_EXTI_DisableIT_32_63+0x24>)
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	43db      	mvns	r3, r3
 8009630:	4904      	ldr	r1, [pc, #16]	; (8009644 <LL_EXTI_DisableIT_32_63+0x24>)
 8009632:	4013      	ands	r3, r2
 8009634:	620b      	str	r3, [r1, #32]
}
 8009636:	bf00      	nop
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	40010400 	.word	0x40010400

08009648 <LL_EXTI_EnableEvent_0_31>:
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	4904      	ldr	r1, [pc, #16]	; (8009668 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4313      	orrs	r3, r2
 800965a:	604b      	str	r3, [r1, #4]
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	40010400 	.word	0x40010400

0800966c <LL_EXTI_EnableEvent_32_63>:
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009674:	4b05      	ldr	r3, [pc, #20]	; (800968c <LL_EXTI_EnableEvent_32_63+0x20>)
 8009676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009678:	4904      	ldr	r1, [pc, #16]	; (800968c <LL_EXTI_EnableEvent_32_63+0x20>)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4313      	orrs	r3, r2
 800967e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	40010400 	.word	0x40010400

08009690 <LL_EXTI_DisableEvent_0_31>:
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009698:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	43db      	mvns	r3, r3
 80096a0:	4904      	ldr	r1, [pc, #16]	; (80096b4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80096a2:	4013      	ands	r3, r2
 80096a4:	604b      	str	r3, [r1, #4]
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	40010400 	.word	0x40010400

080096b8 <LL_EXTI_DisableEvent_32_63>:
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <LL_EXTI_DisableEvent_32_63+0x24>)
 80096c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	43db      	mvns	r3, r3
 80096c8:	4904      	ldr	r1, [pc, #16]	; (80096dc <LL_EXTI_DisableEvent_32_63+0x24>)
 80096ca:	4013      	ands	r3, r2
 80096cc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	40010400 	.word	0x40010400

080096e0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80096e8:	4b05      	ldr	r3, [pc, #20]	; (8009700 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	4904      	ldr	r1, [pc, #16]	; (8009700 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	608b      	str	r3, [r1, #8]
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	40010400 	.word	0x40010400

08009704 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800970c:	4b05      	ldr	r3, [pc, #20]	; (8009724 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800970e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009710:	4904      	ldr	r1, [pc, #16]	; (8009724 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4313      	orrs	r3, r2
 8009716:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	40010400 	.word	0x40010400

08009728 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009730:	4b06      	ldr	r3, [pc, #24]	; (800974c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	43db      	mvns	r3, r3
 8009738:	4904      	ldr	r1, [pc, #16]	; (800974c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800973a:	4013      	ands	r3, r2
 800973c:	608b      	str	r3, [r1, #8]
}
 800973e:	bf00      	nop
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	40010400 	.word	0x40010400

08009750 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009758:	4b06      	ldr	r3, [pc, #24]	; (8009774 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800975a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	43db      	mvns	r3, r3
 8009760:	4904      	ldr	r1, [pc, #16]	; (8009774 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009762:	4013      	ands	r3, r2
 8009764:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009766:	bf00      	nop
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	40010400 	.word	0x40010400

08009778 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009780:	4b05      	ldr	r3, [pc, #20]	; (8009798 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	4904      	ldr	r1, [pc, #16]	; (8009798 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4313      	orrs	r3, r2
 800978a:	60cb      	str	r3, [r1, #12]
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	40010400 	.word	0x40010400

0800979c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80097a4:	4b05      	ldr	r3, [pc, #20]	; (80097bc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	4904      	ldr	r1, [pc, #16]	; (80097bc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	40010400 	.word	0x40010400

080097c0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80097c8:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	43db      	mvns	r3, r3
 80097d0:	4904      	ldr	r1, [pc, #16]	; (80097e4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80097d2:	4013      	ands	r3, r2
 80097d4:	60cb      	str	r3, [r1, #12]
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40010400 	.word	0x40010400

080097e8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80097f0:	4b06      	ldr	r3, [pc, #24]	; (800980c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80097f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	43db      	mvns	r3, r3
 80097f8:	4904      	ldr	r1, [pc, #16]	; (800980c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80097fe:	bf00      	nop
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	40010400 	.word	0x40010400

08009810 <LL_EXTI_ClearFlag_0_31>:
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009818:	4a04      	ldr	r2, [pc, #16]	; (800982c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6153      	str	r3, [r2, #20]
}
 800981e:	bf00      	nop
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	40010400 	.word	0x40010400

08009830 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009838:	4a04      	ldr	r2, [pc, #16]	; (800984c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	40010400 	.word	0x40010400

08009850 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	77fb      	strb	r3, [r7, #31]
 800986a:	e180      	b.n	8009b6e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800987a:	d102      	bne.n	8009882 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	77fb      	strb	r3, [r7, #31]
 8009880:	e175      	b.n	8009b6e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7f5b      	ldrb	r3, [r3, #29]
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d108      	bne.n	800989e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7fd f9d1 	bl	8006c40 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098a8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80098c4:	4313      	orrs	r3, r2
 80098c6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b98      	ldr	r3, [pc, #608]	; (8009b30 <HAL_COMP_Init+0x2e0>)
 80098d0:	4013      	ands	r3, r2
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	6812      	ldr	r2, [r2, #0]
 80098d6:	6979      	ldr	r1, [r7, #20]
 80098d8:	430b      	orrs	r3, r1
 80098da:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d015      	beq.n	8009916 <HAL_COMP_Init+0xc6>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d112      	bne.n	8009916 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80098f0:	4b90      	ldr	r3, [pc, #576]	; (8009b34 <HAL_COMP_Init+0x2e4>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	099b      	lsrs	r3, r3, #6
 80098f6:	4a90      	ldr	r2, [pc, #576]	; (8009b38 <HAL_COMP_Init+0x2e8>)
 80098f8:	fba2 2303 	umull	r2, r3, r2, r3
 80098fc:	099a      	lsrs	r2, r3, #6
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009908:	e002      	b.n	8009910 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3b01      	subs	r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1f9      	bne.n	800990a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a88      	ldr	r2, [pc, #544]	; (8009b3c <HAL_COMP_Init+0x2ec>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d028      	beq.n	8009972 <HAL_COMP_Init+0x122>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a86      	ldr	r2, [pc, #536]	; (8009b40 <HAL_COMP_Init+0x2f0>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d020      	beq.n	800996c <HAL_COMP_Init+0x11c>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a85      	ldr	r2, [pc, #532]	; (8009b44 <HAL_COMP_Init+0x2f4>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d018      	beq.n	8009966 <HAL_COMP_Init+0x116>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a83      	ldr	r2, [pc, #524]	; (8009b48 <HAL_COMP_Init+0x2f8>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d010      	beq.n	8009960 <HAL_COMP_Init+0x110>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a82      	ldr	r2, [pc, #520]	; (8009b4c <HAL_COMP_Init+0x2fc>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d008      	beq.n	800995a <HAL_COMP_Init+0x10a>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a80      	ldr	r2, [pc, #512]	; (8009b50 <HAL_COMP_Init+0x300>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d101      	bne.n	8009956 <HAL_COMP_Init+0x106>
 8009952:	2301      	movs	r3, #1
 8009954:	e00f      	b.n	8009976 <HAL_COMP_Init+0x126>
 8009956:	2302      	movs	r3, #2
 8009958:	e00d      	b.n	8009976 <HAL_COMP_Init+0x126>
 800995a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800995e:	e00a      	b.n	8009976 <HAL_COMP_Init+0x126>
 8009960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009964:	e007      	b.n	8009976 <HAL_COMP_Init+0x126>
 8009966:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800996a:	e004      	b.n	8009976 <HAL_COMP_Init+0x126>
 800996c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009970:	e001      	b.n	8009976 <HAL_COMP_Init+0x126>
 8009972:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009976:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	f003 0303 	and.w	r3, r3, #3
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 80b6 	beq.w	8009af2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	f003 0310 	and.w	r3, r3, #16
 800998e:	2b00      	cmp	r3, #0
 8009990:	d011      	beq.n	80099b6 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a6e      	ldr	r2, [pc, #440]	; (8009b50 <HAL_COMP_Init+0x300>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d004      	beq.n	80099a6 <HAL_COMP_Init+0x156>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a6c      	ldr	r2, [pc, #432]	; (8009b54 <HAL_COMP_Init+0x304>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d103      	bne.n	80099ae <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80099a6:	6938      	ldr	r0, [r7, #16]
 80099a8:	f7ff feac 	bl	8009704 <LL_EXTI_EnableRisingTrig_32_63>
 80099ac:	e014      	b.n	80099d8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80099ae:	6938      	ldr	r0, [r7, #16]
 80099b0:	f7ff fe96 	bl	80096e0 <LL_EXTI_EnableRisingTrig_0_31>
 80099b4:	e010      	b.n	80099d8 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a65      	ldr	r2, [pc, #404]	; (8009b50 <HAL_COMP_Init+0x300>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d004      	beq.n	80099ca <HAL_COMP_Init+0x17a>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a63      	ldr	r2, [pc, #396]	; (8009b54 <HAL_COMP_Init+0x304>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d103      	bne.n	80099d2 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f7ff fec0 	bl	8009750 <LL_EXTI_DisableRisingTrig_32_63>
 80099d0:	e002      	b.n	80099d8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80099d2:	6938      	ldr	r0, [r7, #16]
 80099d4:	f7ff fea8 	bl	8009728 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	f003 0320 	and.w	r3, r3, #32
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d011      	beq.n	8009a08 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a59      	ldr	r2, [pc, #356]	; (8009b50 <HAL_COMP_Init+0x300>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d004      	beq.n	80099f8 <HAL_COMP_Init+0x1a8>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a58      	ldr	r2, [pc, #352]	; (8009b54 <HAL_COMP_Init+0x304>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d103      	bne.n	8009a00 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80099f8:	6938      	ldr	r0, [r7, #16]
 80099fa:	f7ff fecf 	bl	800979c <LL_EXTI_EnableFallingTrig_32_63>
 80099fe:	e014      	b.n	8009a2a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009a00:	6938      	ldr	r0, [r7, #16]
 8009a02:	f7ff feb9 	bl	8009778 <LL_EXTI_EnableFallingTrig_0_31>
 8009a06:	e010      	b.n	8009a2a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a50      	ldr	r2, [pc, #320]	; (8009b50 <HAL_COMP_Init+0x300>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d004      	beq.n	8009a1c <HAL_COMP_Init+0x1cc>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a4f      	ldr	r2, [pc, #316]	; (8009b54 <HAL_COMP_Init+0x304>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d103      	bne.n	8009a24 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009a1c:	6938      	ldr	r0, [r7, #16]
 8009a1e:	f7ff fee3 	bl	80097e8 <LL_EXTI_DisableFallingTrig_32_63>
 8009a22:	e002      	b.n	8009a2a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009a24:	6938      	ldr	r0, [r7, #16]
 8009a26:	f7ff fecb 	bl	80097c0 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a48      	ldr	r2, [pc, #288]	; (8009b50 <HAL_COMP_Init+0x300>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d004      	beq.n	8009a3e <HAL_COMP_Init+0x1ee>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a46      	ldr	r2, [pc, #280]	; (8009b54 <HAL_COMP_Init+0x304>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d103      	bne.n	8009a46 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009a3e:	6938      	ldr	r0, [r7, #16]
 8009a40:	f7ff fef6 	bl	8009830 <LL_EXTI_ClearFlag_32_63>
 8009a44:	e002      	b.n	8009a4c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009a46:	6938      	ldr	r0, [r7, #16]
 8009a48:	f7ff fee2 	bl	8009810 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d011      	beq.n	8009a7c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a3c      	ldr	r2, [pc, #240]	; (8009b50 <HAL_COMP_Init+0x300>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d004      	beq.n	8009a6c <HAL_COMP_Init+0x21c>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a3b      	ldr	r2, [pc, #236]	; (8009b54 <HAL_COMP_Init+0x304>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d103      	bne.n	8009a74 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009a6c:	6938      	ldr	r0, [r7, #16]
 8009a6e:	f7ff fdfd 	bl	800966c <LL_EXTI_EnableEvent_32_63>
 8009a72:	e014      	b.n	8009a9e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009a74:	6938      	ldr	r0, [r7, #16]
 8009a76:	f7ff fde7 	bl	8009648 <LL_EXTI_EnableEvent_0_31>
 8009a7a:	e010      	b.n	8009a9e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a33      	ldr	r2, [pc, #204]	; (8009b50 <HAL_COMP_Init+0x300>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d004      	beq.n	8009a90 <HAL_COMP_Init+0x240>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a32      	ldr	r2, [pc, #200]	; (8009b54 <HAL_COMP_Init+0x304>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d103      	bne.n	8009a98 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009a90:	6938      	ldr	r0, [r7, #16]
 8009a92:	f7ff fe11 	bl	80096b8 <LL_EXTI_DisableEvent_32_63>
 8009a96:	e002      	b.n	8009a9e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009a98:	6938      	ldr	r0, [r7, #16]
 8009a9a:	f7ff fdf9 	bl	8009690 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d011      	beq.n	8009ace <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a28      	ldr	r2, [pc, #160]	; (8009b50 <HAL_COMP_Init+0x300>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d004      	beq.n	8009abe <HAL_COMP_Init+0x26e>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a26      	ldr	r2, [pc, #152]	; (8009b54 <HAL_COMP_Init+0x304>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d103      	bne.n	8009ac6 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009abe:	6938      	ldr	r0, [r7, #16]
 8009ac0:	f7ff fd88 	bl	80095d4 <LL_EXTI_EnableIT_32_63>
 8009ac4:	e04b      	b.n	8009b5e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009ac6:	6938      	ldr	r0, [r7, #16]
 8009ac8:	f7ff fd72 	bl	80095b0 <LL_EXTI_EnableIT_0_31>
 8009acc:	e047      	b.n	8009b5e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <HAL_COMP_Init+0x300>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d004      	beq.n	8009ae2 <HAL_COMP_Init+0x292>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a1d      	ldr	r2, [pc, #116]	; (8009b54 <HAL_COMP_Init+0x304>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d103      	bne.n	8009aea <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009ae2:	6938      	ldr	r0, [r7, #16]
 8009ae4:	f7ff fd9c 	bl	8009620 <LL_EXTI_DisableIT_32_63>
 8009ae8:	e039      	b.n	8009b5e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009aea:	6938      	ldr	r0, [r7, #16]
 8009aec:	f7ff fd84 	bl	80095f8 <LL_EXTI_DisableIT_0_31>
 8009af0:	e035      	b.n	8009b5e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a16      	ldr	r2, [pc, #88]	; (8009b50 <HAL_COMP_Init+0x300>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d004      	beq.n	8009b06 <HAL_COMP_Init+0x2b6>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a14      	ldr	r2, [pc, #80]	; (8009b54 <HAL_COMP_Init+0x304>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d103      	bne.n	8009b0e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009b06:	6938      	ldr	r0, [r7, #16]
 8009b08:	f7ff fdd6 	bl	80096b8 <LL_EXTI_DisableEvent_32_63>
 8009b0c:	e002      	b.n	8009b14 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009b0e:	6938      	ldr	r0, [r7, #16]
 8009b10:	f7ff fdbe 	bl	8009690 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a0d      	ldr	r2, [pc, #52]	; (8009b50 <HAL_COMP_Init+0x300>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d004      	beq.n	8009b28 <HAL_COMP_Init+0x2d8>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a0c      	ldr	r2, [pc, #48]	; (8009b54 <HAL_COMP_Init+0x304>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d117      	bne.n	8009b58 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009b28:	6938      	ldr	r0, [r7, #16]
 8009b2a:	f7ff fd79 	bl	8009620 <LL_EXTI_DisableIT_32_63>
 8009b2e:	e016      	b.n	8009b5e <HAL_COMP_Init+0x30e>
 8009b30:	ff007e0f 	.word	0xff007e0f
 8009b34:	20000ca0 	.word	0x20000ca0
 8009b38:	053e2d63 	.word	0x053e2d63
 8009b3c:	40010200 	.word	0x40010200
 8009b40:	40010204 	.word	0x40010204
 8009b44:	40010208 	.word	0x40010208
 8009b48:	4001020c 	.word	0x4001020c
 8009b4c:	40010210 	.word	0x40010210
 8009b50:	40010214 	.word	0x40010214
 8009b54:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009b58:	6938      	ldr	r0, [r7, #16]
 8009b5a:	f7ff fd4d 	bl	80095f8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	7f5b      	ldrb	r3, [r3, #29]
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d102      	bne.n	8009b6e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3720      	adds	r7, #32
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <__NVIC_SetPriorityGrouping>:
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b88:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <__NVIC_SetPriorityGrouping+0x44>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009b94:	4013      	ands	r3, r2
 8009b96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009baa:	4a04      	ldr	r2, [pc, #16]	; (8009bbc <__NVIC_SetPriorityGrouping+0x44>)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	60d3      	str	r3, [r2, #12]
}
 8009bb0:	bf00      	nop
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	e000ed00 	.word	0xe000ed00

08009bc0 <__NVIC_GetPriorityGrouping>:
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009bc4:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	0a1b      	lsrs	r3, r3, #8
 8009bca:	f003 0307 	and.w	r3, r3, #7
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	e000ed00 	.word	0xe000ed00

08009bdc <__NVIC_EnableIRQ>:
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	db0b      	blt.n	8009c06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bee:	79fb      	ldrb	r3, [r7, #7]
 8009bf0:	f003 021f 	and.w	r2, r3, #31
 8009bf4:	4907      	ldr	r1, [pc, #28]	; (8009c14 <__NVIC_EnableIRQ+0x38>)
 8009bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8009c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	e000e100 	.word	0xe000e100

08009c18 <__NVIC_SetPriority>:
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	6039      	str	r1, [r7, #0]
 8009c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	db0a      	blt.n	8009c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	490c      	ldr	r1, [pc, #48]	; (8009c64 <__NVIC_SetPriority+0x4c>)
 8009c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c36:	0112      	lsls	r2, r2, #4
 8009c38:	b2d2      	uxtb	r2, r2
 8009c3a:	440b      	add	r3, r1
 8009c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009c40:	e00a      	b.n	8009c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	4908      	ldr	r1, [pc, #32]	; (8009c68 <__NVIC_SetPriority+0x50>)
 8009c48:	79fb      	ldrb	r3, [r7, #7]
 8009c4a:	f003 030f 	and.w	r3, r3, #15
 8009c4e:	3b04      	subs	r3, #4
 8009c50:	0112      	lsls	r2, r2, #4
 8009c52:	b2d2      	uxtb	r2, r2
 8009c54:	440b      	add	r3, r1
 8009c56:	761a      	strb	r2, [r3, #24]
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	e000e100 	.word	0xe000e100
 8009c68:	e000ed00 	.word	0xe000ed00

08009c6c <NVIC_EncodePriority>:
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b089      	sub	sp, #36	; 0x24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	f1c3 0307 	rsb	r3, r3, #7
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	bf28      	it	cs
 8009c8a:	2304      	movcs	r3, #4
 8009c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	3304      	adds	r3, #4
 8009c92:	2b06      	cmp	r3, #6
 8009c94:	d902      	bls.n	8009c9c <NVIC_EncodePriority+0x30>
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	3b03      	subs	r3, #3
 8009c9a:	e000      	b.n	8009c9e <NVIC_EncodePriority+0x32>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8009caa:	43da      	mvns	r2, r3
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	401a      	ands	r2, r3
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	fa01 f303 	lsl.w	r3, r1, r3
 8009cbe:	43d9      	mvns	r1, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cc4:	4313      	orrs	r3, r2
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3724      	adds	r7, #36	; 0x24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
	...

08009cd4 <SysTick_Config>:
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ce4:	d301      	bcc.n	8009cea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e00f      	b.n	8009d0a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009cea:	4a0a      	ldr	r2, [pc, #40]	; (8009d14 <SysTick_Config+0x40>)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009cf2:	210f      	movs	r1, #15
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cf8:	f7ff ff8e 	bl	8009c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009cfc:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <SysTick_Config+0x40>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009d02:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <SysTick_Config+0x40>)
 8009d04:	2207      	movs	r2, #7
 8009d06:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	e000e010 	.word	0xe000e010

08009d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff ff29 	bl	8009b78 <__NVIC_SetPriorityGrouping>
}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b086      	sub	sp, #24
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	4603      	mov	r3, r0
 8009d36:	60b9      	str	r1, [r7, #8]
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009d3c:	f7ff ff40 	bl	8009bc0 <__NVIC_GetPriorityGrouping>
 8009d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	6978      	ldr	r0, [r7, #20]
 8009d48:	f7ff ff90 	bl	8009c6c <NVIC_EncodePriority>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d52:	4611      	mov	r1, r2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7ff ff5f 	bl	8009c18 <__NVIC_SetPriority>
}
 8009d5a:	bf00      	nop
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	4603      	mov	r3, r0
 8009d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff ff33 	bl	8009bdc <__NVIC_EnableIRQ>
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff ffa4 	bl	8009cd4 <SysTick_Config>
 8009d8c:	4603      	mov	r3, r0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e014      	b.n	8009dd2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	791b      	ldrb	r3, [r3, #4]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d105      	bne.n	8009dbe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7fc fff7 	bl	8006dac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b082      	sub	sp, #8
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	795b      	ldrb	r3, [r3, #5]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <HAL_DAC_Start+0x16>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e043      	b.n	8009e78 <HAL_DAC_Start+0x9e>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6819      	ldr	r1, [r3, #0]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2201      	movs	r2, #1
 8009e0a:	409a      	lsls	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009e14:	2001      	movs	r0, #1
 8009e16:	f7fe fb4d 	bl	80084b4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10f      	bne.n	8009e40 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d11d      	bne.n	8009e6a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f042 0201 	orr.w	r2, r2, #1
 8009e3c:	605a      	str	r2, [r3, #4]
 8009e3e:	e014      	b.n	8009e6a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	f003 0310 	and.w	r3, r3, #16
 8009e50:	2102      	movs	r1, #2
 8009e52:	fa01 f303 	lsl.w	r3, r1, r3
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d107      	bne.n	8009e6a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f042 0202 	orr.w	r2, r2, #2
 8009e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	795b      	ldrb	r3, [r3, #5]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d101      	bne.n	8009e9e <HAL_DAC_Start_DMA+0x1e>
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	e0a1      	b.n	8009fe2 <HAL_DAC_Start_DMA+0x162>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d12a      	bne.n	8009f06 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	4a4d      	ldr	r2, [pc, #308]	; (8009fec <HAL_DAC_Start_DMA+0x16c>)
 8009eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	4a4c      	ldr	r2, [pc, #304]	; (8009ff0 <HAL_DAC_Start_DMA+0x170>)
 8009ebe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	4a4b      	ldr	r2, [pc, #300]	; (8009ff4 <HAL_DAC_Start_DMA+0x174>)
 8009ec6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ed6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	d009      	beq.n	8009ef2 <HAL_DAC_Start_DMA+0x72>
 8009ede:	2b08      	cmp	r3, #8
 8009ee0:	d00c      	beq.n	8009efc <HAL_DAC_Start_DMA+0x7c>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d000      	beq.n	8009ee8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009ee6:	e039      	b.n	8009f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3308      	adds	r3, #8
 8009eee:	613b      	str	r3, [r7, #16]
        break;
 8009ef0:	e034      	b.n	8009f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	330c      	adds	r3, #12
 8009ef8:	613b      	str	r3, [r7, #16]
        break;
 8009efa:	e02f      	b.n	8009f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3310      	adds	r3, #16
 8009f02:	613b      	str	r3, [r7, #16]
        break;
 8009f04:	e02a      	b.n	8009f5c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	4a3b      	ldr	r2, [pc, #236]	; (8009ff8 <HAL_DAC_Start_DMA+0x178>)
 8009f0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	4a3a      	ldr	r2, [pc, #232]	; (8009ffc <HAL_DAC_Start_DMA+0x17c>)
 8009f14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	4a39      	ldr	r2, [pc, #228]	; (800a000 <HAL_DAC_Start_DMA+0x180>)
 8009f1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009f2c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d009      	beq.n	8009f48 <HAL_DAC_Start_DMA+0xc8>
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d00c      	beq.n	8009f52 <HAL_DAC_Start_DMA+0xd2>
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d000      	beq.n	8009f3e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009f3c:	e00e      	b.n	8009f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3314      	adds	r3, #20
 8009f44:	613b      	str	r3, [r7, #16]
        break;
 8009f46:	e009      	b.n	8009f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3318      	adds	r3, #24
 8009f4e:	613b      	str	r3, [r7, #16]
        break;
 8009f50:	e004      	b.n	8009f5c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	331c      	adds	r3, #28
 8009f58:	613b      	str	r3, [r7, #16]
        break;
 8009f5a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d111      	bne.n	8009f86 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f70:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6898      	ldr	r0, [r3, #8]
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	f000 fbd2 	bl	800a724 <HAL_DMA_Start_IT>
 8009f80:	4603      	mov	r3, r0
 8009f82:	75fb      	strb	r3, [r7, #23]
 8009f84:	e010      	b.n	8009fa8 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009f94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	68d8      	ldr	r0, [r3, #12]
 8009f9a:	6879      	ldr	r1, [r7, #4]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	f000 fbc0 	bl	800a724 <HAL_DMA_Start_IT>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10f      	bne.n	8009fd4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6819      	ldr	r1, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f003 0310 	and.w	r3, r3, #16
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	409a      	lsls	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009fcc:	2001      	movs	r0, #1
 8009fce:	f7fe fa71 	bl	80084b4 <HAL_Delay>
 8009fd2:	e005      	b.n	8009fe0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	f043 0204 	orr.w	r2, r3, #4
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	0800a4c1 	.word	0x0800a4c1
 8009ff0:	0800a4e3 	.word	0x0800a4e3
 8009ff4:	0800a4ff 	.word	0x0800a4ff
 8009ff8:	0800a569 	.word	0x0800a569
 8009ffc:	0800a58b 	.word	0x0800a58b
 800a000:	0800a5a7 	.word	0x0800a5a7

0800a004 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6819      	ldr	r1, [r3, #0]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	f003 0310 	and.w	r3, r3, #16
 800a01a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a01e:	fa02 f303 	lsl.w	r3, r2, r3
 800a022:	43da      	mvns	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	400a      	ands	r2, r1
 800a02a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6819      	ldr	r1, [r3, #0]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	f003 0310 	and.w	r3, r3, #16
 800a038:	2201      	movs	r2, #1
 800a03a:	fa02 f303 	lsl.w	r3, r2, r3
 800a03e:	43da      	mvns	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	400a      	ands	r2, r1
 800a046:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a048:	2001      	movs	r0, #1
 800a04a:	f7fe fa33 	bl	80084b4 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10f      	bne.n	800a074 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 fbde 	bl	800a81a <HAL_DMA_Abort>
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	e00e      	b.n	800a092 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 fbce 	bl	800a81a <HAL_DMA_Abort>
 800a07e:	4603      	mov	r3, r0
 800a080:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a090:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2204      	movs	r2, #4
 800a09c:	711a      	strb	r2, [r3, #4]
 800a09e:	e002      	b.n	800a0a6 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
 800a0bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d105      	bne.n	800a0e0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4413      	add	r3, r2
 800a0da:	3308      	adds	r3, #8
 800a0dc:	617b      	str	r3, [r7, #20]
 800a0de:	e004      	b.n	800a0ea <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	3314      	adds	r3, #20
 800a0e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	371c      	adds	r7, #28
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d103      	bne.n	800a154 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	e002      	b.n	800a15a <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
	...

0800a168 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08a      	sub	sp, #40	; 0x28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	795b      	ldrb	r3, [r3, #5]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d101      	bne.n	800a184 <HAL_DAC_ConfigChannel+0x1c>
 800a180:	2302      	movs	r3, #2
 800a182:	e194      	b.n	800a4ae <HAL_DAC_ConfigChannel+0x346>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2201      	movs	r2, #1
 800a188:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2202      	movs	r2, #2
 800a18e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	2b04      	cmp	r3, #4
 800a196:	d174      	bne.n	800a282 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d137      	bne.n	800a20e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a19e:	f7fe f97d 	bl	800849c <HAL_GetTick>
 800a1a2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a1a4:	e011      	b.n	800a1ca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a1a6:	f7fe f979 	bl	800849c <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d90a      	bls.n	800a1ca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	f043 0208 	orr.w	r2, r3, #8
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2203      	movs	r2, #3
 800a1c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e171      	b.n	800a4ae <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e6      	bne.n	800a1a6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a1d8:	2001      	movs	r0, #1
 800a1da:	f7fe f96b 	bl	80084b4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a1e6:	641a      	str	r2, [r3, #64]	; 0x40
 800a1e8:	e01e      	b.n	800a228 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a1ea:	f7fe f957 	bl	800849c <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d90a      	bls.n	800a20e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	f043 0208 	orr.w	r2, r3, #8
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2203      	movs	r2, #3
 800a208:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e14f      	b.n	800a4ae <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a214:	2b00      	cmp	r3, #0
 800a216:	dbe8      	blt.n	800a1ea <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a218:	2001      	movs	r0, #1
 800a21a:	f7fe f94b 	bl	80084b4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a226:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f003 0310 	and.w	r3, r3, #16
 800a234:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a238:	fa01 f303 	lsl.w	r3, r1, r3
 800a23c:	43db      	mvns	r3, r3
 800a23e:	ea02 0103 	and.w	r1, r2, r3
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f003 0310 	and.w	r3, r3, #16
 800a24c:	409a      	lsls	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f003 0310 	and.w	r3, r3, #16
 800a262:	21ff      	movs	r1, #255	; 0xff
 800a264:	fa01 f303 	lsl.w	r3, r1, r3
 800a268:	43db      	mvns	r3, r3
 800a26a:	ea02 0103 	and.w	r1, r2, r3
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f003 0310 	and.w	r3, r3, #16
 800a278:	409a      	lsls	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d11d      	bne.n	800a2c6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a290:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f003 0310 	and.w	r3, r3, #16
 800a298:	221f      	movs	r2, #31
 800a29a:	fa02 f303 	lsl.w	r3, r2, r3
 800a29e:	43db      	mvns	r3, r3
 800a2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f003 0310 	and.w	r3, r3, #16
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2207      	movs	r2, #7
 800a2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2da:	43db      	mvns	r3, r3
 800a2dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2de:	4013      	ands	r3, r2
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	623b      	str	r3, [r7, #32]
 800a2f2:	e011      	b.n	800a318 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	f003 0302 	and.w	r3, r3, #2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a300:	2301      	movs	r3, #1
 800a302:	623b      	str	r3, [r7, #32]
 800a304:	e008      	b.n	800a318 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d102      	bne.n	800a314 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a30e:	2301      	movs	r3, #1
 800a310:	623b      	str	r3, [r7, #32]
 800a312:	e001      	b.n	800a318 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a314:	2300      	movs	r3, #0
 800a316:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	689a      	ldr	r2, [r3, #8]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	4313      	orrs	r3, r2
 800a322:	6a3a      	ldr	r2, [r7, #32]
 800a324:	4313      	orrs	r3, r2
 800a326:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f003 0310 	and.w	r3, r3, #16
 800a32e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a332:	fa02 f303 	lsl.w	r3, r2, r3
 800a336:	43db      	mvns	r3, r3
 800a338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33a:	4013      	ands	r3, r2
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	791b      	ldrb	r3, [r3, #4]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d102      	bne.n	800a34c <HAL_DAC_ConfigChannel+0x1e4>
 800a346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a34a:	e000      	b.n	800a34e <HAL_DAC_ConfigChannel+0x1e6>
 800a34c:	2300      	movs	r3, #0
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	4313      	orrs	r3, r2
 800a352:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f003 0310 	and.w	r3, r3, #16
 800a35a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a35e:	fa02 f303 	lsl.w	r3, r2, r3
 800a362:	43db      	mvns	r3, r3
 800a364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a366:	4013      	ands	r3, r2
 800a368:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	795b      	ldrb	r3, [r3, #5]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d102      	bne.n	800a378 <HAL_DAC_ConfigChannel+0x210>
 800a372:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a376:	e000      	b.n	800a37a <HAL_DAC_ConfigChannel+0x212>
 800a378:	2300      	movs	r3, #0
 800a37a:	69ba      	ldr	r2, [r7, #24]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a386:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d114      	bne.n	800a3ba <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a390:	f001 fae0 	bl	800b954 <HAL_RCC_GetHCLKFreq>
 800a394:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	4a47      	ldr	r2, [pc, #284]	; (800a4b8 <HAL_DAC_ConfigChannel+0x350>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d904      	bls.n	800a3a8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a6:	e00d      	b.n	800a3c4 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	4a44      	ldr	r2, [pc, #272]	; (800a4bc <HAL_DAC_ConfigChannel+0x354>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d909      	bls.n	800a3c4 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a3b8:	e004      	b.n	800a3c4 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f003 0310 	and.w	r3, r3, #16
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6819      	ldr	r1, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f003 0310 	and.w	r3, r3, #16
 800a3ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	43da      	mvns	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	400a      	ands	r2, r1
 800a3fa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f003 0310 	and.w	r3, r3, #16
 800a40a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a40e:	fa02 f303 	lsl.w	r3, r2, r3
 800a412:	43db      	mvns	r3, r3
 800a414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a416:	4013      	ands	r3, r2
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f003 0310 	and.w	r3, r3, #16
 800a426:	69ba      	ldr	r2, [r7, #24]
 800a428:	fa02 f303 	lsl.w	r3, r2, r3
 800a42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42e:	4313      	orrs	r3, r2
 800a430:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a438:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6819      	ldr	r1, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f003 0310 	and.w	r3, r3, #16
 800a446:	22c0      	movs	r2, #192	; 0xc0
 800a448:	fa02 f303 	lsl.w	r3, r2, r3
 800a44c:	43da      	mvns	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	400a      	ands	r2, r1
 800a454:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	089b      	lsrs	r3, r3, #2
 800a45c:	f003 030f 	and.w	r3, r3, #15
 800a460:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	089b      	lsrs	r3, r3, #2
 800a468:	021b      	lsls	r3, r3, #8
 800a46a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	4313      	orrs	r3, r2
 800a472:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f003 0310 	and.w	r3, r3, #16
 800a480:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a484:	fa01 f303 	lsl.w	r3, r1, r3
 800a488:	43db      	mvns	r3, r3
 800a48a:	ea02 0103 	and.w	r1, r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f003 0310 	and.w	r3, r3, #16
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	409a      	lsls	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3728      	adds	r7, #40	; 0x28
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	09896800 	.word	0x09896800
 800a4bc:	04c4b400 	.word	0x04c4b400

0800a4c0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff fe16 	bl	800a100 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	711a      	strb	r2, [r3, #4]
}
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f7ff fe0f 	bl	800a114 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	f043 0204 	orr.w	r2, r3, #4
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f7ff fe05 	bl	800a128 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2201      	movs	r2, #1
 800a522:	711a      	strb	r2, [r3, #4]
}
 800a524:	bf00      	nop
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f7ff ffd8 	bl	800a52c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2201      	movs	r2, #1
 800a580:	711a      	strb	r2, [r3, #4]
}
 800a582:	bf00      	nop
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a596:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7ff ffd1 	bl	800a540 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f043 0204 	orr.w	r2, r3, #4
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f7ff ffc7 	bl	800a554 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	711a      	strb	r2, [r3, #4]
}
 800a5cc:	bf00      	nop
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e08d      	b.n	800a702 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	4b47      	ldr	r3, [pc, #284]	; (800a70c <HAL_DMA_Init+0x138>)
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d80f      	bhi.n	800a612 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	4b45      	ldr	r3, [pc, #276]	; (800a710 <HAL_DMA_Init+0x13c>)
 800a5fa:	4413      	add	r3, r2
 800a5fc:	4a45      	ldr	r2, [pc, #276]	; (800a714 <HAL_DMA_Init+0x140>)
 800a5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a602:	091b      	lsrs	r3, r3, #4
 800a604:	009a      	lsls	r2, r3, #2
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a42      	ldr	r2, [pc, #264]	; (800a718 <HAL_DMA_Init+0x144>)
 800a60e:	641a      	str	r2, [r3, #64]	; 0x40
 800a610:	e00e      	b.n	800a630 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	4b40      	ldr	r3, [pc, #256]	; (800a71c <HAL_DMA_Init+0x148>)
 800a61a:	4413      	add	r3, r2
 800a61c:	4a3d      	ldr	r2, [pc, #244]	; (800a714 <HAL_DMA_Init+0x140>)
 800a61e:	fba2 2303 	umull	r2, r3, r2, r3
 800a622:	091b      	lsrs	r3, r3, #4
 800a624:	009a      	lsls	r2, r3, #2
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a3c      	ldr	r2, [pc, #240]	; (800a720 <HAL_DMA_Init+0x14c>)
 800a62e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2202      	movs	r2, #2
 800a634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a64a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a66c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fa10 	bl	800aaa8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a690:	d102      	bne.n	800a698 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6a0:	b2d2      	uxtb	r2, r2
 800a6a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a6ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d010      	beq.n	800a6d8 <HAL_DMA_Init+0x104>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	d80c      	bhi.n	800a6d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fa30 	bl	800ab24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a6d4:	605a      	str	r2, [r3, #4]
 800a6d6:	e008      	b.n	800a6ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	40020407 	.word	0x40020407
 800a710:	bffdfff8 	.word	0xbffdfff8
 800a714:	cccccccd 	.word	0xcccccccd
 800a718:	40020000 	.word	0x40020000
 800a71c:	bffdfbf8 	.word	0xbffdfbf8
 800a720:	40020400 	.word	0x40020400

0800a724 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
 800a730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_DMA_Start_IT+0x20>
 800a740:	2302      	movs	r3, #2
 800a742:	e066      	b.n	800a812 <HAL_DMA_Start_IT+0xee>
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b01      	cmp	r3, #1
 800a756:	d155      	bne.n	800a804 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2202      	movs	r2, #2
 800a75c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0201 	bic.w	r2, r2, #1
 800a774:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	68b9      	ldr	r1, [r7, #8]
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f000 f954 	bl	800aa2a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a786:	2b00      	cmp	r3, #0
 800a788:	d008      	beq.n	800a79c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f042 020e 	orr.w	r2, r2, #14
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	e00f      	b.n	800a7bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0204 	bic.w	r2, r2, #4
 800a7aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f042 020a 	orr.w	r2, r2, #10
 800a7ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d007      	beq.n	800a7da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d007      	beq.n	800a7f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f042 0201 	orr.w	r2, r2, #1
 800a800:	601a      	str	r2, [r3, #0]
 800a802:	e005      	b.n	800a810 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a80c:	2302      	movs	r3, #2
 800a80e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3718      	adds	r7, #24
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b085      	sub	sp, #20
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d005      	beq.n	800a83e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2204      	movs	r2, #4
 800a836:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	73fb      	strb	r3, [r7, #15]
 800a83c:	e037      	b.n	800a8ae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 020e 	bic.w	r2, r2, #14
 800a84c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a85c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f022 0201 	bic.w	r2, r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a872:	f003 021f 	and.w	r2, r3, #31
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87a:	2101      	movs	r1, #1
 800a87c:	fa01 f202 	lsl.w	r2, r1, r2
 800a880:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a88a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00c      	beq.n	800a8ae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8a2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a8ac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e8:	f003 031f 	and.w	r3, r3, #31
 800a8ec:	2204      	movs	r2, #4
 800a8ee:	409a      	lsls	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d026      	beq.n	800a946 <HAL_DMA_IRQHandler+0x7a>
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f003 0304 	and.w	r3, r3, #4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d021      	beq.n	800a946 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0320 	and.w	r3, r3, #32
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d107      	bne.n	800a920 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 0204 	bic.w	r2, r2, #4
 800a91e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a924:	f003 021f 	and.w	r2, r3, #31
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92c:	2104      	movs	r1, #4
 800a92e:	fa01 f202 	lsl.w	r2, r1, r2
 800a932:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d071      	beq.n	800aa20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a944:	e06c      	b.n	800aa20 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a94a:	f003 031f 	and.w	r3, r3, #31
 800a94e:	2202      	movs	r2, #2
 800a950:	409a      	lsls	r2, r3
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	4013      	ands	r3, r2
 800a956:	2b00      	cmp	r3, #0
 800a958:	d02e      	beq.n	800a9b8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b00      	cmp	r3, #0
 800a962:	d029      	beq.n	800a9b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0320 	and.w	r3, r3, #32
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10b      	bne.n	800a98a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f022 020a 	bic.w	r2, r2, #10
 800a980:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a98e:	f003 021f 	and.w	r2, r3, #31
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a996:	2102      	movs	r1, #2
 800a998:	fa01 f202 	lsl.w	r2, r1, r2
 800a99c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d038      	beq.n	800aa20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a9b6:	e033      	b.n	800aa20 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9bc:	f003 031f 	and.w	r3, r3, #31
 800a9c0:	2208      	movs	r2, #8
 800a9c2:	409a      	lsls	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d02a      	beq.n	800aa22 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	f003 0308 	and.w	r3, r3, #8
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d025      	beq.n	800aa22 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f022 020e 	bic.w	r2, r2, #14
 800a9e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ea:	f003 021f 	and.w	r2, r3, #31
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	fa01 f202 	lsl.w	r2, r1, r2
 800a9f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800aa20:	bf00      	nop
 800aa22:	bf00      	nop
}
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	60f8      	str	r0, [r7, #12]
 800aa32:	60b9      	str	r1, [r7, #8]
 800aa34:	607a      	str	r2, [r7, #4]
 800aa36:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aa40:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d004      	beq.n	800aa54 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa52:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa58:	f003 021f 	and.w	r2, r3, #31
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa60:	2101      	movs	r1, #1
 800aa62:	fa01 f202 	lsl.w	r2, r1, r2
 800aa66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	2b10      	cmp	r3, #16
 800aa76:	d108      	bne.n	800aa8a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800aa88:	e007      	b.n	800aa9a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	60da      	str	r2, [r3, #12]
}
 800aa9a:	bf00      	nop
 800aa9c:	3714      	adds	r7, #20
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
	...

0800aaa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	461a      	mov	r2, r3
 800aab6:	4b16      	ldr	r3, [pc, #88]	; (800ab10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d802      	bhi.n	800aac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800aabc:	4b15      	ldr	r3, [pc, #84]	; (800ab14 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	e001      	b.n	800aac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800aac2:	4b15      	ldr	r3, [pc, #84]	; (800ab18 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800aac4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	3b08      	subs	r3, #8
 800aad2:	4a12      	ldr	r2, [pc, #72]	; (800ab1c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800aad4:	fba2 2303 	umull	r2, r3, r2, r3
 800aad8:	091b      	lsrs	r3, r3, #4
 800aada:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae0:	089b      	lsrs	r3, r3, #2
 800aae2:	009a      	lsls	r2, r3, #2
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	4413      	add	r3, r2
 800aae8:	461a      	mov	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a0b      	ldr	r2, [pc, #44]	; (800ab20 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800aaf2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f003 031f 	and.w	r3, r3, #31
 800aafa:	2201      	movs	r2, #1
 800aafc:	409a      	lsls	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ab02:	bf00      	nop
 800ab04:	371c      	adds	r7, #28
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	40020407 	.word	0x40020407
 800ab14:	40020800 	.word	0x40020800
 800ab18:	40020820 	.word	0x40020820
 800ab1c:	cccccccd 	.word	0xcccccccd
 800ab20:	40020880 	.word	0x40020880

0800ab24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a08      	ldr	r2, [pc, #32]	; (800ab68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ab46:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	f003 031f 	and.w	r3, r3, #31
 800ab50:	2201      	movs	r2, #1
 800ab52:	409a      	lsls	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ab58:	bf00      	nop
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	1000823f 	.word	0x1000823f
 800ab68:	40020940 	.word	0x40020940

0800ab6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ab7a:	e15a      	b.n	800ae32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	2101      	movs	r1, #1
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	fa01 f303 	lsl.w	r3, r1, r3
 800ab88:	4013      	ands	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 814c 	beq.w	800ae2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d00b      	beq.n	800abb4 <HAL_GPIO_Init+0x48>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d007      	beq.n	800abb4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aba8:	2b11      	cmp	r3, #17
 800abaa:	d003      	beq.n	800abb4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	2b12      	cmp	r3, #18
 800abb2:	d130      	bne.n	800ac16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	2203      	movs	r2, #3
 800abc0:	fa02 f303 	lsl.w	r3, r2, r3
 800abc4:	43db      	mvns	r3, r3
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	4013      	ands	r3, r2
 800abca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	68da      	ldr	r2, [r3, #12]
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	fa02 f303 	lsl.w	r3, r2, r3
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	4313      	orrs	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800abea:	2201      	movs	r2, #1
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	fa02 f303 	lsl.w	r3, r2, r3
 800abf2:	43db      	mvns	r3, r3
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	4013      	ands	r3, r2
 800abf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	091b      	lsrs	r3, r3, #4
 800ac00:	f003 0201 	and.w	r2, r3, #1
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	fa02 f303 	lsl.w	r3, r2, r3
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	2203      	movs	r2, #3
 800ac22:	fa02 f303 	lsl.w	r3, r2, r3
 800ac26:	43db      	mvns	r3, r3
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	689a      	ldr	r2, [r3, #8]
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	005b      	lsls	r3, r3, #1
 800ac36:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d003      	beq.n	800ac56 <HAL_GPIO_Init+0xea>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	2b12      	cmp	r3, #18
 800ac54:	d123      	bne.n	800ac9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	08da      	lsrs	r2, r3, #3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3208      	adds	r2, #8
 800ac5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f003 0307 	and.w	r3, r3, #7
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	220f      	movs	r2, #15
 800ac6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac72:	43db      	mvns	r3, r3
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	4013      	ands	r3, r2
 800ac78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	691a      	ldr	r2, [r3, #16]
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f003 0307 	and.w	r3, r3, #7
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	08da      	lsrs	r2, r3, #3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3208      	adds	r2, #8
 800ac98:	6939      	ldr	r1, [r7, #16]
 800ac9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	2203      	movs	r2, #3
 800acaa:	fa02 f303 	lsl.w	r3, r2, r3
 800acae:	43db      	mvns	r3, r3
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	4013      	ands	r3, r2
 800acb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f003 0203 	and.w	r2, r3, #3
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	005b      	lsls	r3, r3, #1
 800acc2:	fa02 f303 	lsl.w	r3, r2, r3
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	4313      	orrs	r3, r2
 800acca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 80a6 	beq.w	800ae2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ace0:	4b5b      	ldr	r3, [pc, #364]	; (800ae50 <HAL_GPIO_Init+0x2e4>)
 800ace2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ace4:	4a5a      	ldr	r2, [pc, #360]	; (800ae50 <HAL_GPIO_Init+0x2e4>)
 800ace6:	f043 0301 	orr.w	r3, r3, #1
 800acea:	6613      	str	r3, [r2, #96]	; 0x60
 800acec:	4b58      	ldr	r3, [pc, #352]	; (800ae50 <HAL_GPIO_Init+0x2e4>)
 800acee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	60bb      	str	r3, [r7, #8]
 800acf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800acf8:	4a56      	ldr	r2, [pc, #344]	; (800ae54 <HAL_GPIO_Init+0x2e8>)
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	089b      	lsrs	r3, r3, #2
 800acfe:	3302      	adds	r3, #2
 800ad00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f003 0303 	and.w	r3, r3, #3
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	220f      	movs	r2, #15
 800ad10:	fa02 f303 	lsl.w	r3, r2, r3
 800ad14:	43db      	mvns	r3, r3
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	4013      	ands	r3, r2
 800ad1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ad22:	d01f      	beq.n	800ad64 <HAL_GPIO_Init+0x1f8>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a4c      	ldr	r2, [pc, #304]	; (800ae58 <HAL_GPIO_Init+0x2ec>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d019      	beq.n	800ad60 <HAL_GPIO_Init+0x1f4>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a4b      	ldr	r2, [pc, #300]	; (800ae5c <HAL_GPIO_Init+0x2f0>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d013      	beq.n	800ad5c <HAL_GPIO_Init+0x1f0>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a4a      	ldr	r2, [pc, #296]	; (800ae60 <HAL_GPIO_Init+0x2f4>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d00d      	beq.n	800ad58 <HAL_GPIO_Init+0x1ec>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a49      	ldr	r2, [pc, #292]	; (800ae64 <HAL_GPIO_Init+0x2f8>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d007      	beq.n	800ad54 <HAL_GPIO_Init+0x1e8>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a48      	ldr	r2, [pc, #288]	; (800ae68 <HAL_GPIO_Init+0x2fc>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d101      	bne.n	800ad50 <HAL_GPIO_Init+0x1e4>
 800ad4c:	2305      	movs	r3, #5
 800ad4e:	e00a      	b.n	800ad66 <HAL_GPIO_Init+0x1fa>
 800ad50:	2306      	movs	r3, #6
 800ad52:	e008      	b.n	800ad66 <HAL_GPIO_Init+0x1fa>
 800ad54:	2304      	movs	r3, #4
 800ad56:	e006      	b.n	800ad66 <HAL_GPIO_Init+0x1fa>
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e004      	b.n	800ad66 <HAL_GPIO_Init+0x1fa>
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	e002      	b.n	800ad66 <HAL_GPIO_Init+0x1fa>
 800ad60:	2301      	movs	r3, #1
 800ad62:	e000      	b.n	800ad66 <HAL_GPIO_Init+0x1fa>
 800ad64:	2300      	movs	r3, #0
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	f002 0203 	and.w	r2, r2, #3
 800ad6c:	0092      	lsls	r2, r2, #2
 800ad6e:	4093      	lsls	r3, r2
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad76:	4937      	ldr	r1, [pc, #220]	; (800ae54 <HAL_GPIO_Init+0x2e8>)
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	089b      	lsrs	r3, r3, #2
 800ad7c:	3302      	adds	r3, #2
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ad84:	4b39      	ldr	r3, [pc, #228]	; (800ae6c <HAL_GPIO_Init+0x300>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	43db      	mvns	r3, r3
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	4013      	ands	r3, r2
 800ad92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ada8:	4a30      	ldr	r2, [pc, #192]	; (800ae6c <HAL_GPIO_Init+0x300>)
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800adae:	4b2f      	ldr	r3, [pc, #188]	; (800ae6c <HAL_GPIO_Init+0x300>)
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	43db      	mvns	r3, r3
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	4013      	ands	r3, r2
 800adbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4313      	orrs	r3, r2
 800add0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800add2:	4a26      	ldr	r2, [pc, #152]	; (800ae6c <HAL_GPIO_Init+0x300>)
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800add8:	4b24      	ldr	r3, [pc, #144]	; (800ae6c <HAL_GPIO_Init+0x300>)
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	43db      	mvns	r3, r3
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	4013      	ands	r3, r2
 800ade6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800adfc:	4a1b      	ldr	r2, [pc, #108]	; (800ae6c <HAL_GPIO_Init+0x300>)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ae02:	4b1a      	ldr	r3, [pc, #104]	; (800ae6c <HAL_GPIO_Init+0x300>)
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	43db      	mvns	r3, r3
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	4013      	ands	r3, r2
 800ae10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d003      	beq.n	800ae26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ae26:	4a11      	ldr	r2, [pc, #68]	; (800ae6c <HAL_GPIO_Init+0x300>)
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f47f ae9d 	bne.w	800ab7c <HAL_GPIO_Init+0x10>
  }
}
 800ae42:	bf00      	nop
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	40021000 	.word	0x40021000
 800ae54:	40010000 	.word	0x40010000
 800ae58:	48000400 	.word	0x48000400
 800ae5c:	48000800 	.word	0x48000800
 800ae60:	48000c00 	.word	0x48000c00
 800ae64:	48001000 	.word	0x48001000
 800ae68:	48001400 	.word	0x48001400
 800ae6c:	40010400 	.word	0x40010400

0800ae70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	807b      	strh	r3, [r7, #2]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ae80:	787b      	ldrb	r3, [r7, #1]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ae86:	887a      	ldrh	r2, [r7, #2]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ae8c:	e002      	b.n	800ae94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ae8e:	887a      	ldrh	r2, [r7, #2]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d141      	bne.n	800af32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aeae:	4b4b      	ldr	r3, [pc, #300]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aeb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeba:	d131      	bne.n	800af20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aebc:	4b47      	ldr	r3, [pc, #284]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aec2:	4a46      	ldr	r2, [pc, #280]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aecc:	4b43      	ldr	r3, [pc, #268]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aed4:	4a41      	ldr	r2, [pc, #260]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aeda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aedc:	4b40      	ldr	r3, [pc, #256]	; (800afe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2232      	movs	r2, #50	; 0x32
 800aee2:	fb02 f303 	mul.w	r3, r2, r3
 800aee6:	4a3f      	ldr	r2, [pc, #252]	; (800afe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800aee8:	fba2 2303 	umull	r2, r3, r2, r3
 800aeec:	0c9b      	lsrs	r3, r3, #18
 800aeee:	3301      	adds	r3, #1
 800aef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aef2:	e002      	b.n	800aefa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aefa:	4b38      	ldr	r3, [pc, #224]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af06:	d102      	bne.n	800af0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1f2      	bne.n	800aef4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800af0e:	4b33      	ldr	r3, [pc, #204]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af1a:	d158      	bne.n	800afce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e057      	b.n	800afd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af20:	4b2e      	ldr	r3, [pc, #184]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af26:	4a2d      	ldr	r2, [pc, #180]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800af30:	e04d      	b.n	800afce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af38:	d141      	bne.n	800afbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800af3a:	4b28      	ldr	r3, [pc, #160]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af46:	d131      	bne.n	800afac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af48:	4b24      	ldr	r3, [pc, #144]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af4e:	4a23      	ldr	r2, [pc, #140]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800af58:	4b20      	ldr	r3, [pc, #128]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800af60:	4a1e      	ldr	r2, [pc, #120]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800af68:	4b1d      	ldr	r3, [pc, #116]	; (800afe0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2232      	movs	r2, #50	; 0x32
 800af6e:	fb02 f303 	mul.w	r3, r2, r3
 800af72:	4a1c      	ldr	r2, [pc, #112]	; (800afe4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800af74:	fba2 2303 	umull	r2, r3, r2, r3
 800af78:	0c9b      	lsrs	r3, r3, #18
 800af7a:	3301      	adds	r3, #1
 800af7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af7e:	e002      	b.n	800af86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3b01      	subs	r3, #1
 800af84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af86:	4b15      	ldr	r3, [pc, #84]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af88:	695b      	ldr	r3, [r3, #20]
 800af8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af92:	d102      	bne.n	800af9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1f2      	bne.n	800af80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800af9a:	4b10      	ldr	r3, [pc, #64]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afa6:	d112      	bne.n	800afce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e011      	b.n	800afd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800afac:	4b0b      	ldr	r3, [pc, #44]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afb2:	4a0a      	ldr	r2, [pc, #40]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800afbc:	e007      	b.n	800afce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800afbe:	4b07      	ldr	r3, [pc, #28]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800afc6:	4a05      	ldr	r2, [pc, #20]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afcc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	40007000 	.word	0x40007000
 800afe0:	20000ca0 	.word	0x20000ca0
 800afe4:	431bde83 	.word	0x431bde83

0800afe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e308      	b.n	800b60c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	2b00      	cmp	r3, #0
 800b004:	d075      	beq.n	800b0f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b006:	4ba3      	ldr	r3, [pc, #652]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f003 030c 	and.w	r3, r3, #12
 800b00e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b010:	4ba0      	ldr	r3, [pc, #640]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	f003 0303 	and.w	r3, r3, #3
 800b018:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	2b0c      	cmp	r3, #12
 800b01e:	d102      	bne.n	800b026 <HAL_RCC_OscConfig+0x3e>
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	2b03      	cmp	r3, #3
 800b024:	d002      	beq.n	800b02c <HAL_RCC_OscConfig+0x44>
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	2b08      	cmp	r3, #8
 800b02a:	d10b      	bne.n	800b044 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b02c:	4b99      	ldr	r3, [pc, #612]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b034:	2b00      	cmp	r3, #0
 800b036:	d05b      	beq.n	800b0f0 <HAL_RCC_OscConfig+0x108>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d157      	bne.n	800b0f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e2e3      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b04c:	d106      	bne.n	800b05c <HAL_RCC_OscConfig+0x74>
 800b04e:	4b91      	ldr	r3, [pc, #580]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a90      	ldr	r2, [pc, #576]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b058:	6013      	str	r3, [r2, #0]
 800b05a:	e01d      	b.n	800b098 <HAL_RCC_OscConfig+0xb0>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b064:	d10c      	bne.n	800b080 <HAL_RCC_OscConfig+0x98>
 800b066:	4b8b      	ldr	r3, [pc, #556]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a8a      	ldr	r2, [pc, #552]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b06c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	4b88      	ldr	r3, [pc, #544]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a87      	ldr	r2, [pc, #540]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b07c:	6013      	str	r3, [r2, #0]
 800b07e:	e00b      	b.n	800b098 <HAL_RCC_OscConfig+0xb0>
 800b080:	4b84      	ldr	r3, [pc, #528]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a83      	ldr	r2, [pc, #524]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b08a:	6013      	str	r3, [r2, #0]
 800b08c:	4b81      	ldr	r3, [pc, #516]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a80      	ldr	r2, [pc, #512]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d013      	beq.n	800b0c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0a0:	f7fd f9fc 	bl	800849c <HAL_GetTick>
 800b0a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b0a6:	e008      	b.n	800b0ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0a8:	f7fd f9f8 	bl	800849c <HAL_GetTick>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	2b64      	cmp	r3, #100	; 0x64
 800b0b4:	d901      	bls.n	800b0ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	e2a8      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b0ba:	4b76      	ldr	r3, [pc, #472]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0f0      	beq.n	800b0a8 <HAL_RCC_OscConfig+0xc0>
 800b0c6:	e014      	b.n	800b0f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c8:	f7fd f9e8 	bl	800849c <HAL_GetTick>
 800b0cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0d0:	f7fd f9e4 	bl	800849c <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	2b64      	cmp	r3, #100	; 0x64
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e294      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b0e2:	4b6c      	ldr	r3, [pc, #432]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1f0      	bne.n	800b0d0 <HAL_RCC_OscConfig+0xe8>
 800b0ee:	e000      	b.n	800b0f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0302 	and.w	r3, r3, #2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d075      	beq.n	800b1ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0fe:	4b65      	ldr	r3, [pc, #404]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	f003 030c 	and.w	r3, r3, #12
 800b106:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b108:	4b62      	ldr	r3, [pc, #392]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	f003 0303 	and.w	r3, r3, #3
 800b110:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	2b0c      	cmp	r3, #12
 800b116:	d102      	bne.n	800b11e <HAL_RCC_OscConfig+0x136>
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d002      	beq.n	800b124 <HAL_RCC_OscConfig+0x13c>
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b04      	cmp	r3, #4
 800b122:	d11f      	bne.n	800b164 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b124:	4b5b      	ldr	r3, [pc, #364]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d005      	beq.n	800b13c <HAL_RCC_OscConfig+0x154>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e267      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b13c:	4b55      	ldr	r3, [pc, #340]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	061b      	lsls	r3, r3, #24
 800b14a:	4952      	ldr	r1, [pc, #328]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b14c:	4313      	orrs	r3, r2
 800b14e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b150:	4b51      	ldr	r3, [pc, #324]	; (800b298 <HAL_RCC_OscConfig+0x2b0>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f7fd f955 	bl	8008404 <HAL_InitTick>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d043      	beq.n	800b1e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	e253      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d023      	beq.n	800b1b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b16c:	4b49      	ldr	r3, [pc, #292]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a48      	ldr	r2, [pc, #288]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b178:	f7fd f990 	bl	800849c <HAL_GetTick>
 800b17c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b17e:	e008      	b.n	800b192 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b180:	f7fd f98c 	bl	800849c <HAL_GetTick>
 800b184:	4602      	mov	r2, r0
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d901      	bls.n	800b192 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b18e:	2303      	movs	r3, #3
 800b190:	e23c      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b192:	4b40      	ldr	r3, [pc, #256]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d0f0      	beq.n	800b180 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b19e:	4b3d      	ldr	r3, [pc, #244]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	061b      	lsls	r3, r3, #24
 800b1ac:	4939      	ldr	r1, [pc, #228]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	604b      	str	r3, [r1, #4]
 800b1b2:	e01a      	b.n	800b1ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b1b4:	4b37      	ldr	r3, [pc, #220]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a36      	ldr	r2, [pc, #216]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b1ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1c0:	f7fd f96c 	bl	800849c <HAL_GetTick>
 800b1c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b1c6:	e008      	b.n	800b1da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1c8:	f7fd f968 	bl	800849c <HAL_GetTick>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d901      	bls.n	800b1da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e218      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b1da:	4b2e      	ldr	r3, [pc, #184]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1f0      	bne.n	800b1c8 <HAL_RCC_OscConfig+0x1e0>
 800b1e6:	e000      	b.n	800b1ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b1e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d03c      	beq.n	800b270 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d01c      	beq.n	800b238 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1fe:	4b25      	ldr	r3, [pc, #148]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b204:	4a23      	ldr	r2, [pc, #140]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b206:	f043 0301 	orr.w	r3, r3, #1
 800b20a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b20e:	f7fd f945 	bl	800849c <HAL_GetTick>
 800b212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b214:	e008      	b.n	800b228 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b216:	f7fd f941 	bl	800849c <HAL_GetTick>
 800b21a:	4602      	mov	r2, r0
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	2b02      	cmp	r3, #2
 800b222:	d901      	bls.n	800b228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b224:	2303      	movs	r3, #3
 800b226:	e1f1      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b228:	4b1a      	ldr	r3, [pc, #104]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b22a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b22e:	f003 0302 	and.w	r3, r3, #2
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0ef      	beq.n	800b216 <HAL_RCC_OscConfig+0x22e>
 800b236:	e01b      	b.n	800b270 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b238:	4b16      	ldr	r3, [pc, #88]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b23a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b23e:	4a15      	ldr	r2, [pc, #84]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b240:	f023 0301 	bic.w	r3, r3, #1
 800b244:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b248:	f7fd f928 	bl	800849c <HAL_GetTick>
 800b24c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b24e:	e008      	b.n	800b262 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b250:	f7fd f924 	bl	800849c <HAL_GetTick>
 800b254:	4602      	mov	r2, r0
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d901      	bls.n	800b262 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b25e:	2303      	movs	r3, #3
 800b260:	e1d4      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b262:	4b0c      	ldr	r3, [pc, #48]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b268:	f003 0302 	and.w	r3, r3, #2
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1ef      	bne.n	800b250 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 80ab 	beq.w	800b3d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b27e:	2300      	movs	r3, #0
 800b280:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b282:	4b04      	ldr	r3, [pc, #16]	; (800b294 <HAL_RCC_OscConfig+0x2ac>)
 800b284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <HAL_RCC_OscConfig+0x2b4>
 800b28e:	2301      	movs	r3, #1
 800b290:	e005      	b.n	800b29e <HAL_RCC_OscConfig+0x2b6>
 800b292:	bf00      	nop
 800b294:	40021000 	.word	0x40021000
 800b298:	20000ca4 	.word	0x20000ca4
 800b29c:	2300      	movs	r3, #0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00d      	beq.n	800b2be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b2a2:	4baf      	ldr	r3, [pc, #700]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a6:	4aae      	ldr	r2, [pc, #696]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b2a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b2ae:	4bac      	ldr	r3, [pc, #688]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2be:	4ba9      	ldr	r3, [pc, #676]	; (800b564 <HAL_RCC_OscConfig+0x57c>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d118      	bne.n	800b2fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2ca:	4ba6      	ldr	r3, [pc, #664]	; (800b564 <HAL_RCC_OscConfig+0x57c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4aa5      	ldr	r2, [pc, #660]	; (800b564 <HAL_RCC_OscConfig+0x57c>)
 800b2d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b2d6:	f7fd f8e1 	bl	800849c <HAL_GetTick>
 800b2da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2dc:	e008      	b.n	800b2f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2de:	f7fd f8dd 	bl	800849c <HAL_GetTick>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d901      	bls.n	800b2f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	e18d      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2f0:	4b9c      	ldr	r3, [pc, #624]	; (800b564 <HAL_RCC_OscConfig+0x57c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d0f0      	beq.n	800b2de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d108      	bne.n	800b316 <HAL_RCC_OscConfig+0x32e>
 800b304:	4b96      	ldr	r3, [pc, #600]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b30a:	4a95      	ldr	r2, [pc, #596]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b30c:	f043 0301 	orr.w	r3, r3, #1
 800b310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b314:	e024      	b.n	800b360 <HAL_RCC_OscConfig+0x378>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	2b05      	cmp	r3, #5
 800b31c:	d110      	bne.n	800b340 <HAL_RCC_OscConfig+0x358>
 800b31e:	4b90      	ldr	r3, [pc, #576]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b324:	4a8e      	ldr	r2, [pc, #568]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b326:	f043 0304 	orr.w	r3, r3, #4
 800b32a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b32e:	4b8c      	ldr	r3, [pc, #560]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b334:	4a8a      	ldr	r2, [pc, #552]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b336:	f043 0301 	orr.w	r3, r3, #1
 800b33a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b33e:	e00f      	b.n	800b360 <HAL_RCC_OscConfig+0x378>
 800b340:	4b87      	ldr	r3, [pc, #540]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b346:	4a86      	ldr	r2, [pc, #536]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b348:	f023 0301 	bic.w	r3, r3, #1
 800b34c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b350:	4b83      	ldr	r3, [pc, #524]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b356:	4a82      	ldr	r2, [pc, #520]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b358:	f023 0304 	bic.w	r3, r3, #4
 800b35c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d016      	beq.n	800b396 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b368:	f7fd f898 	bl	800849c <HAL_GetTick>
 800b36c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b36e:	e00a      	b.n	800b386 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b370:	f7fd f894 	bl	800849c <HAL_GetTick>
 800b374:	4602      	mov	r2, r0
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b37e:	4293      	cmp	r3, r2
 800b380:	d901      	bls.n	800b386 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b382:	2303      	movs	r3, #3
 800b384:	e142      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b386:	4b76      	ldr	r3, [pc, #472]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b38c:	f003 0302 	and.w	r3, r3, #2
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0ed      	beq.n	800b370 <HAL_RCC_OscConfig+0x388>
 800b394:	e015      	b.n	800b3c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b396:	f7fd f881 	bl	800849c <HAL_GetTick>
 800b39a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b39c:	e00a      	b.n	800b3b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b39e:	f7fd f87d 	bl	800849c <HAL_GetTick>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d901      	bls.n	800b3b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	e12b      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b3b4:	4b6a      	ldr	r3, [pc, #424]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b3b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ba:	f003 0302 	and.w	r3, r3, #2
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1ed      	bne.n	800b39e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b3c2:	7ffb      	ldrb	r3, [r7, #31]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d105      	bne.n	800b3d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3c8:	4b65      	ldr	r3, [pc, #404]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3cc:	4a64      	ldr	r2, [pc, #400]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b3ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 0320 	and.w	r3, r3, #32
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d03c      	beq.n	800b45a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d01c      	beq.n	800b422 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b3e8:	4b5d      	ldr	r3, [pc, #372]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b3ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3ee:	4a5c      	ldr	r2, [pc, #368]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b3f0:	f043 0301 	orr.w	r3, r3, #1
 800b3f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3f8:	f7fd f850 	bl	800849c <HAL_GetTick>
 800b3fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b3fe:	e008      	b.n	800b412 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b400:	f7fd f84c 	bl	800849c <HAL_GetTick>
 800b404:	4602      	mov	r2, r0
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d901      	bls.n	800b412 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b40e:	2303      	movs	r3, #3
 800b410:	e0fc      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b412:	4b53      	ldr	r3, [pc, #332]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b418:	f003 0302 	and.w	r3, r3, #2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0ef      	beq.n	800b400 <HAL_RCC_OscConfig+0x418>
 800b420:	e01b      	b.n	800b45a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b422:	4b4f      	ldr	r3, [pc, #316]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b428:	4a4d      	ldr	r2, [pc, #308]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b42a:	f023 0301 	bic.w	r3, r3, #1
 800b42e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b432:	f7fd f833 	bl	800849c <HAL_GetTick>
 800b436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b438:	e008      	b.n	800b44c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b43a:	f7fd f82f 	bl	800849c <HAL_GetTick>
 800b43e:	4602      	mov	r2, r0
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	2b02      	cmp	r3, #2
 800b446:	d901      	bls.n	800b44c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	e0df      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b44c:	4b44      	ldr	r3, [pc, #272]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b44e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1ef      	bne.n	800b43a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	69db      	ldr	r3, [r3, #28]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 80d3 	beq.w	800b60a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b464:	4b3e      	ldr	r3, [pc, #248]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	f003 030c 	and.w	r3, r3, #12
 800b46c:	2b0c      	cmp	r3, #12
 800b46e:	f000 808d 	beq.w	800b58c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	69db      	ldr	r3, [r3, #28]
 800b476:	2b02      	cmp	r3, #2
 800b478:	d15a      	bne.n	800b530 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b47a:	4b39      	ldr	r3, [pc, #228]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a38      	ldr	r2, [pc, #224]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b486:	f7fd f809 	bl	800849c <HAL_GetTick>
 800b48a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b48c:	e008      	b.n	800b4a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b48e:	f7fd f805 	bl	800849c <HAL_GetTick>
 800b492:	4602      	mov	r2, r0
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d901      	bls.n	800b4a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e0b5      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4a0:	4b2f      	ldr	r3, [pc, #188]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1f0      	bne.n	800b48e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b4ac:	4b2c      	ldr	r3, [pc, #176]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b4ae:	68da      	ldr	r2, [r3, #12]
 800b4b0:	4b2d      	ldr	r3, [pc, #180]	; (800b568 <HAL_RCC_OscConfig+0x580>)
 800b4b2:	4013      	ands	r3, r2
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	6a11      	ldr	r1, [r2, #32]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b4bc:	3a01      	subs	r2, #1
 800b4be:	0112      	lsls	r2, r2, #4
 800b4c0:	4311      	orrs	r1, r2
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b4c6:	0212      	lsls	r2, r2, #8
 800b4c8:	4311      	orrs	r1, r2
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b4ce:	0852      	lsrs	r2, r2, #1
 800b4d0:	3a01      	subs	r2, #1
 800b4d2:	0552      	lsls	r2, r2, #21
 800b4d4:	4311      	orrs	r1, r2
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b4da:	0852      	lsrs	r2, r2, #1
 800b4dc:	3a01      	subs	r2, #1
 800b4de:	0652      	lsls	r2, r2, #25
 800b4e0:	4311      	orrs	r1, r2
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b4e6:	06d2      	lsls	r2, r2, #27
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	491d      	ldr	r1, [pc, #116]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4f0:	4b1b      	ldr	r3, [pc, #108]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a1a      	ldr	r2, [pc, #104]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b4f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4fc:	4b18      	ldr	r3, [pc, #96]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	4a17      	ldr	r2, [pc, #92]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b506:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b508:	f7fc ffc8 	bl	800849c <HAL_GetTick>
 800b50c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b50e:	e008      	b.n	800b522 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b510:	f7fc ffc4 	bl	800849c <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d901      	bls.n	800b522 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e074      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b522:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d0f0      	beq.n	800b510 <HAL_RCC_OscConfig+0x528>
 800b52e:	e06c      	b.n	800b60a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b530:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a0a      	ldr	r2, [pc, #40]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b53a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b53c:	4b08      	ldr	r3, [pc, #32]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	4a07      	ldr	r2, [pc, #28]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b542:	f023 0303 	bic.w	r3, r3, #3
 800b546:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b548:	4b05      	ldr	r3, [pc, #20]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	4a04      	ldr	r2, [pc, #16]	; (800b560 <HAL_RCC_OscConfig+0x578>)
 800b54e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b558:	f7fc ffa0 	bl	800849c <HAL_GetTick>
 800b55c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b55e:	e00e      	b.n	800b57e <HAL_RCC_OscConfig+0x596>
 800b560:	40021000 	.word	0x40021000
 800b564:	40007000 	.word	0x40007000
 800b568:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b56c:	f7fc ff96 	bl	800849c <HAL_GetTick>
 800b570:	4602      	mov	r2, r0
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	1ad3      	subs	r3, r2, r3
 800b576:	2b02      	cmp	r3, #2
 800b578:	d901      	bls.n	800b57e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b57a:	2303      	movs	r3, #3
 800b57c:	e046      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b57e:	4b25      	ldr	r3, [pc, #148]	; (800b614 <HAL_RCC_OscConfig+0x62c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1f0      	bne.n	800b56c <HAL_RCC_OscConfig+0x584>
 800b58a:	e03e      	b.n	800b60a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	69db      	ldr	r3, [r3, #28]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e039      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b598:	4b1e      	ldr	r3, [pc, #120]	; (800b614 <HAL_RCC_OscConfig+0x62c>)
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f003 0203 	and.w	r2, r3, #3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a1b      	ldr	r3, [r3, #32]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d12c      	bne.n	800b606 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d123      	bne.n	800b606 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d11b      	bne.n	800b606 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d113      	bne.n	800b606 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e8:	085b      	lsrs	r3, r3, #1
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d109      	bne.n	800b606 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fc:	085b      	lsrs	r3, r3, #1
 800b5fe:	3b01      	subs	r3, #1
 800b600:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b602:	429a      	cmp	r2, r3
 800b604:	d001      	beq.n	800b60a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e000      	b.n	800b60c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	40021000 	.word	0x40021000

0800b618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b622:	2300      	movs	r3, #0
 800b624:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e11e      	b.n	800b86e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b630:	4b91      	ldr	r3, [pc, #580]	; (800b878 <HAL_RCC_ClockConfig+0x260>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 030f 	and.w	r3, r3, #15
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d910      	bls.n	800b660 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b63e:	4b8e      	ldr	r3, [pc, #568]	; (800b878 <HAL_RCC_ClockConfig+0x260>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f023 020f 	bic.w	r2, r3, #15
 800b646:	498c      	ldr	r1, [pc, #560]	; (800b878 <HAL_RCC_ClockConfig+0x260>)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b64e:	4b8a      	ldr	r3, [pc, #552]	; (800b878 <HAL_RCC_ClockConfig+0x260>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 030f 	and.w	r3, r3, #15
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d001      	beq.n	800b660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e106      	b.n	800b86e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d073      	beq.n	800b754 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	2b03      	cmp	r3, #3
 800b672:	d129      	bne.n	800b6c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b674:	4b81      	ldr	r3, [pc, #516]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	e0f4      	b.n	800b86e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b684:	f000 f972 	bl	800b96c <RCC_GetSysClockFreqFromPLLSource>
 800b688:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	4a7c      	ldr	r2, [pc, #496]	; (800b880 <HAL_RCC_ClockConfig+0x268>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d93f      	bls.n	800b712 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b692:	4b7a      	ldr	r3, [pc, #488]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d009      	beq.n	800b6b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d033      	beq.n	800b712 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d12f      	bne.n	800b712 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b6b2:	4b72      	ldr	r3, [pc, #456]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6ba:	4a70      	ldr	r2, [pc, #448]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b6c2:	2380      	movs	r3, #128	; 0x80
 800b6c4:	617b      	str	r3, [r7, #20]
 800b6c6:	e024      	b.n	800b712 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d107      	bne.n	800b6e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b6d0:	4b6a      	ldr	r3, [pc, #424]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d109      	bne.n	800b6f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e0c6      	b.n	800b86e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b6e0:	4b66      	ldr	r3, [pc, #408]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e0be      	b.n	800b86e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b6f0:	f000 f8ce 	bl	800b890 <HAL_RCC_GetSysClockFreq>
 800b6f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	4a61      	ldr	r2, [pc, #388]	; (800b880 <HAL_RCC_ClockConfig+0x268>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d909      	bls.n	800b712 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b6fe:	4b5f      	ldr	r3, [pc, #380]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b706:	4a5d      	ldr	r2, [pc, #372]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b70c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b70e:	2380      	movs	r3, #128	; 0x80
 800b710:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b712:	4b5a      	ldr	r3, [pc, #360]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	f023 0203 	bic.w	r2, r3, #3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	4957      	ldr	r1, [pc, #348]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b720:	4313      	orrs	r3, r2
 800b722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b724:	f7fc feba 	bl	800849c <HAL_GetTick>
 800b728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b72a:	e00a      	b.n	800b742 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b72c:	f7fc feb6 	bl	800849c <HAL_GetTick>
 800b730:	4602      	mov	r2, r0
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	f241 3288 	movw	r2, #5000	; 0x1388
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d901      	bls.n	800b742 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	e095      	b.n	800b86e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b742:	4b4e      	ldr	r3, [pc, #312]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f003 020c 	and.w	r2, r3, #12
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	429a      	cmp	r2, r3
 800b752:	d1eb      	bne.n	800b72c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0302 	and.w	r3, r3, #2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d023      	beq.n	800b7a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0304 	and.w	r3, r3, #4
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d005      	beq.n	800b778 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b76c:	4b43      	ldr	r3, [pc, #268]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	4a42      	ldr	r2, [pc, #264]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b776:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 0308 	and.w	r3, r3, #8
 800b780:	2b00      	cmp	r3, #0
 800b782:	d007      	beq.n	800b794 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b784:	4b3d      	ldr	r3, [pc, #244]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b78c:	4a3b      	ldr	r2, [pc, #236]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b78e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b792:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b794:	4b39      	ldr	r3, [pc, #228]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	4936      	ldr	r1, [pc, #216]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	608b      	str	r3, [r1, #8]
 800b7a6:	e008      	b.n	800b7ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2b80      	cmp	r3, #128	; 0x80
 800b7ac:	d105      	bne.n	800b7ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b7ae:	4b33      	ldr	r3, [pc, #204]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	4a32      	ldr	r2, [pc, #200]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b7b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b7ba:	4b2f      	ldr	r3, [pc, #188]	; (800b878 <HAL_RCC_ClockConfig+0x260>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 030f 	and.w	r3, r3, #15
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d21d      	bcs.n	800b804 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7c8:	4b2b      	ldr	r3, [pc, #172]	; (800b878 <HAL_RCC_ClockConfig+0x260>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f023 020f 	bic.w	r2, r3, #15
 800b7d0:	4929      	ldr	r1, [pc, #164]	; (800b878 <HAL_RCC_ClockConfig+0x260>)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b7d8:	f7fc fe60 	bl	800849c <HAL_GetTick>
 800b7dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7de:	e00a      	b.n	800b7f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7e0:	f7fc fe5c 	bl	800849c <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d901      	bls.n	800b7f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	e03b      	b.n	800b86e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7f6:	4b20      	ldr	r3, [pc, #128]	; (800b878 <HAL_RCC_ClockConfig+0x260>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f003 030f 	and.w	r3, r3, #15
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	429a      	cmp	r2, r3
 800b802:	d1ed      	bne.n	800b7e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 0304 	and.w	r3, r3, #4
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d008      	beq.n	800b822 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b810:	4b1a      	ldr	r3, [pc, #104]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	4917      	ldr	r1, [pc, #92]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b81e:	4313      	orrs	r3, r2
 800b820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0308 	and.w	r3, r3, #8
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d009      	beq.n	800b842 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b82e:	4b13      	ldr	r3, [pc, #76]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	00db      	lsls	r3, r3, #3
 800b83c:	490f      	ldr	r1, [pc, #60]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b842:	f000 f825 	bl	800b890 <HAL_RCC_GetSysClockFreq>
 800b846:	4601      	mov	r1, r0
 800b848:	4b0c      	ldr	r3, [pc, #48]	; (800b87c <HAL_RCC_ClockConfig+0x264>)
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	091b      	lsrs	r3, r3, #4
 800b84e:	f003 030f 	and.w	r3, r3, #15
 800b852:	4a0c      	ldr	r2, [pc, #48]	; (800b884 <HAL_RCC_ClockConfig+0x26c>)
 800b854:	5cd3      	ldrb	r3, [r2, r3]
 800b856:	f003 031f 	and.w	r3, r3, #31
 800b85a:	fa21 f303 	lsr.w	r3, r1, r3
 800b85e:	4a0a      	ldr	r2, [pc, #40]	; (800b888 <HAL_RCC_ClockConfig+0x270>)
 800b860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b862:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <HAL_RCC_ClockConfig+0x274>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4618      	mov	r0, r3
 800b868:	f7fc fdcc 	bl	8008404 <HAL_InitTick>
 800b86c:	4603      	mov	r3, r0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	40022000 	.word	0x40022000
 800b87c:	40021000 	.word	0x40021000
 800b880:	04c4b400 	.word	0x04c4b400
 800b884:	080133d8 	.word	0x080133d8
 800b888:	20000ca0 	.word	0x20000ca0
 800b88c:	20000ca4 	.word	0x20000ca4

0800b890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b890:	b480      	push	{r7}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b896:	4b2c      	ldr	r3, [pc, #176]	; (800b948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	f003 030c 	and.w	r3, r3, #12
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	d102      	bne.n	800b8a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b8a2:	4b2a      	ldr	r3, [pc, #168]	; (800b94c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b8a4:	613b      	str	r3, [r7, #16]
 800b8a6:	e047      	b.n	800b938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b8a8:	4b27      	ldr	r3, [pc, #156]	; (800b948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f003 030c 	and.w	r3, r3, #12
 800b8b0:	2b08      	cmp	r3, #8
 800b8b2:	d102      	bne.n	800b8ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b8b4:	4b26      	ldr	r3, [pc, #152]	; (800b950 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b8b6:	613b      	str	r3, [r7, #16]
 800b8b8:	e03e      	b.n	800b938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b8ba:	4b23      	ldr	r3, [pc, #140]	; (800b948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f003 030c 	and.w	r3, r3, #12
 800b8c2:	2b0c      	cmp	r3, #12
 800b8c4:	d136      	bne.n	800b934 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b8c6:	4b20      	ldr	r3, [pc, #128]	; (800b948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	f003 0303 	and.w	r3, r3, #3
 800b8ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b8d0:	4b1d      	ldr	r3, [pc, #116]	; (800b948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	091b      	lsrs	r3, r3, #4
 800b8d6:	f003 030f 	and.w	r3, r3, #15
 800b8da:	3301      	adds	r3, #1
 800b8dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b03      	cmp	r3, #3
 800b8e2:	d10c      	bne.n	800b8fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b8e4:	4a1a      	ldr	r2, [pc, #104]	; (800b950 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ec:	4a16      	ldr	r2, [pc, #88]	; (800b948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8ee:	68d2      	ldr	r2, [r2, #12]
 800b8f0:	0a12      	lsrs	r2, r2, #8
 800b8f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b8f6:	fb02 f303 	mul.w	r3, r2, r3
 800b8fa:	617b      	str	r3, [r7, #20]
      break;
 800b8fc:	e00c      	b.n	800b918 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b8fe:	4a13      	ldr	r2, [pc, #76]	; (800b94c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	fbb2 f3f3 	udiv	r3, r2, r3
 800b906:	4a10      	ldr	r2, [pc, #64]	; (800b948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b908:	68d2      	ldr	r2, [r2, #12]
 800b90a:	0a12      	lsrs	r2, r2, #8
 800b90c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b910:	fb02 f303 	mul.w	r3, r2, r3
 800b914:	617b      	str	r3, [r7, #20]
      break;
 800b916:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b918:	4b0b      	ldr	r3, [pc, #44]	; (800b948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	0e5b      	lsrs	r3, r3, #25
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	3301      	adds	r3, #1
 800b924:	005b      	lsls	r3, r3, #1
 800b926:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b930:	613b      	str	r3, [r7, #16]
 800b932:	e001      	b.n	800b938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b938:	693b      	ldr	r3, [r7, #16]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	371c      	adds	r7, #28
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	40021000 	.word	0x40021000
 800b94c:	00f42400 	.word	0x00f42400
 800b950:	007a1200 	.word	0x007a1200

0800b954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b954:	b480      	push	{r7}
 800b956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b958:	4b03      	ldr	r3, [pc, #12]	; (800b968 <HAL_RCC_GetHCLKFreq+0x14>)
 800b95a:	681b      	ldr	r3, [r3, #0]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	20000ca0 	.word	0x20000ca0

0800b96c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b972:	4b1e      	ldr	r3, [pc, #120]	; (800b9ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f003 0303 	and.w	r3, r3, #3
 800b97a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b97c:	4b1b      	ldr	r3, [pc, #108]	; (800b9ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	091b      	lsrs	r3, r3, #4
 800b982:	f003 030f 	and.w	r3, r3, #15
 800b986:	3301      	adds	r3, #1
 800b988:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d10c      	bne.n	800b9aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b990:	4a17      	ldr	r2, [pc, #92]	; (800b9f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	fbb2 f3f3 	udiv	r3, r2, r3
 800b998:	4a14      	ldr	r2, [pc, #80]	; (800b9ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b99a:	68d2      	ldr	r2, [r2, #12]
 800b99c:	0a12      	lsrs	r2, r2, #8
 800b99e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9a2:	fb02 f303 	mul.w	r3, r2, r3
 800b9a6:	617b      	str	r3, [r7, #20]
    break;
 800b9a8:	e00c      	b.n	800b9c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9aa:	4a12      	ldr	r2, [pc, #72]	; (800b9f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9b2:	4a0e      	ldr	r2, [pc, #56]	; (800b9ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9b4:	68d2      	ldr	r2, [r2, #12]
 800b9b6:	0a12      	lsrs	r2, r2, #8
 800b9b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9bc:	fb02 f303 	mul.w	r3, r2, r3
 800b9c0:	617b      	str	r3, [r7, #20]
    break;
 800b9c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b9c4:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	0e5b      	lsrs	r3, r3, #25
 800b9ca:	f003 0303 	and.w	r3, r3, #3
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b9de:	687b      	ldr	r3, [r7, #4]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	371c      	adds	r7, #28
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	40021000 	.word	0x40021000
 800b9f0:	007a1200 	.word	0x007a1200
 800b9f4:	00f42400 	.word	0x00f42400

0800b9f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba00:	2300      	movs	r3, #0
 800ba02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba04:	2300      	movs	r3, #0
 800ba06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 8098 	beq.w	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba16:	2300      	movs	r3, #0
 800ba18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba1a:	4b43      	ldr	r3, [pc, #268]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10d      	bne.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba26:	4b40      	ldr	r3, [pc, #256]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba2a:	4a3f      	ldr	r2, [pc, #252]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba30:	6593      	str	r3, [r2, #88]	; 0x58
 800ba32:	4b3d      	ldr	r3, [pc, #244]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba3a:	60bb      	str	r3, [r7, #8]
 800ba3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba42:	4b3a      	ldr	r3, [pc, #232]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a39      	ldr	r2, [pc, #228]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba4e:	f7fc fd25 	bl	800849c <HAL_GetTick>
 800ba52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba54:	e009      	b.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba56:	f7fc fd21 	bl	800849c <HAL_GetTick>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d902      	bls.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ba64:	2303      	movs	r3, #3
 800ba66:	74fb      	strb	r3, [r7, #19]
        break;
 800ba68:	e005      	b.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba6a:	4b30      	ldr	r3, [pc, #192]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d0ef      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ba76:	7cfb      	ldrb	r3, [r7, #19]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d159      	bne.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ba7c:	4b2a      	ldr	r3, [pc, #168]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d01e      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d019      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ba98:	4b23      	ldr	r3, [pc, #140]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800baa4:	4b20      	ldr	r3, [pc, #128]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baaa:	4a1f      	ldr	r2, [pc, #124]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bab4:	4b1c      	ldr	r3, [pc, #112]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baba:	4a1b      	ldr	r2, [pc, #108]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800babc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bac4:	4a18      	ldr	r2, [pc, #96]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d016      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bad6:	f7fc fce1 	bl	800849c <HAL_GetTick>
 800bada:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800badc:	e00b      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bade:	f7fc fcdd 	bl	800849c <HAL_GetTick>
 800bae2:	4602      	mov	r2, r0
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800baec:	4293      	cmp	r3, r2
 800baee:	d902      	bls.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	74fb      	strb	r3, [r7, #19]
            break;
 800baf4:	e006      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800baf6:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bafc:	f003 0302 	and.w	r3, r3, #2
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d0ec      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bb04:	7cfb      	ldrb	r3, [r7, #19]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10b      	bne.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb0a:	4b07      	ldr	r3, [pc, #28]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb18:	4903      	ldr	r1, [pc, #12]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bb20:	e008      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb22:	7cfb      	ldrb	r3, [r7, #19]
 800bb24:	74bb      	strb	r3, [r7, #18]
 800bb26:	e005      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bb28:	40021000 	.word	0x40021000
 800bb2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb30:	7cfb      	ldrb	r3, [r7, #19]
 800bb32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb34:	7c7b      	ldrb	r3, [r7, #17]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d105      	bne.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb3a:	4baf      	ldr	r3, [pc, #700]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb3e:	4aae      	ldr	r2, [pc, #696]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f003 0301 	and.w	r3, r3, #1
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00a      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bb52:	4ba9      	ldr	r3, [pc, #676]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb58:	f023 0203 	bic.w	r2, r3, #3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	49a5      	ldr	r1, [pc, #660]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0302 	and.w	r3, r3, #2
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00a      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bb74:	4ba0      	ldr	r3, [pc, #640]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb7a:	f023 020c 	bic.w	r2, r3, #12
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	499d      	ldr	r1, [pc, #628]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb84:	4313      	orrs	r3, r2
 800bb86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 0304 	and.w	r3, r3, #4
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00a      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bb96:	4b98      	ldr	r3, [pc, #608]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	4994      	ldr	r1, [pc, #592]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0308 	and.w	r3, r3, #8
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00a      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bbb8:	4b8f      	ldr	r3, [pc, #572]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	498c      	ldr	r1, [pc, #560]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f003 0310 	and.w	r3, r3, #16
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00a      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bbda:	4b87      	ldr	r3, [pc, #540]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	695b      	ldr	r3, [r3, #20]
 800bbe8:	4983      	ldr	r1, [pc, #524]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0320 	and.w	r3, r3, #32
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00a      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bbfc:	4b7e      	ldr	r3, [pc, #504]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	497b      	ldr	r1, [pc, #492]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00a      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc1e:	4b76      	ldr	r3, [pc, #472]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	69db      	ldr	r3, [r3, #28]
 800bc2c:	4972      	ldr	r1, [pc, #456]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00a      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bc40:	4b6d      	ldr	r3, [pc, #436]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	496a      	ldr	r1, [pc, #424]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00a      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bc62:	4b65      	ldr	r3, [pc, #404]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	4961      	ldr	r1, [pc, #388]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc72:	4313      	orrs	r3, r2
 800bc74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00a      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bc84:	4b5c      	ldr	r3, [pc, #368]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc8a:	f023 0203 	bic.w	r2, r3, #3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc92:	4959      	ldr	r1, [pc, #356]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00a      	beq.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bca6:	4b54      	ldr	r3, [pc, #336]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb4:	4950      	ldr	r1, [pc, #320]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d015      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bcc8:	4b4b      	ldr	r3, [pc, #300]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd6:	4948      	ldr	r1, [pc, #288]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bce6:	d105      	bne.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bce8:	4b43      	ldr	r3, [pc, #268]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	4a42      	ldr	r2, [pc, #264]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcf2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d015      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bd00:	4b3d      	ldr	r3, [pc, #244]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd0e:	493a      	ldr	r1, [pc, #232]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd10:	4313      	orrs	r3, r2
 800bd12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd1e:	d105      	bne.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd20:	4b35      	ldr	r3, [pc, #212]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	4a34      	ldr	r2, [pc, #208]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd2a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d015      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd38:	4b2f      	ldr	r3, [pc, #188]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd46:	492c      	ldr	r1, [pc, #176]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd56:	d105      	bne.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd58:	4b27      	ldr	r3, [pc, #156]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	4a26      	ldr	r2, [pc, #152]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d015      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd70:	4b21      	ldr	r3, [pc, #132]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	491e      	ldr	r1, [pc, #120]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd80:	4313      	orrs	r3, r2
 800bd82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd8e:	d105      	bne.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd90:	4b19      	ldr	r3, [pc, #100]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	4a18      	ldr	r2, [pc, #96]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d015      	beq.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bda8:	4b13      	ldr	r3, [pc, #76]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb6:	4910      	ldr	r1, [pc, #64]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdc6:	d105      	bne.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdc8:	4b0b      	ldr	r3, [pc, #44]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	4a0a      	ldr	r2, [pc, #40]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d018      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bde2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bde6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdee:	4902      	ldr	r1, [pc, #8]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bdf6:	e001      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x404>
 800bdf8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be04:	d105      	bne.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800be06:	4b21      	ldr	r3, [pc, #132]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	4a20      	ldr	r2, [pc, #128]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be10:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d015      	beq.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800be1e:	4b1b      	ldr	r3, [pc, #108]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be24:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be2c:	4917      	ldr	r1, [pc, #92]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be3c:	d105      	bne.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800be3e:	4b13      	ldr	r3, [pc, #76]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	4a12      	ldr	r2, [pc, #72]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be48:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be52:	2b00      	cmp	r3, #0
 800be54:	d015      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800be56:	4b0d      	ldr	r3, [pc, #52]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be64:	4909      	ldr	r1, [pc, #36]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be66:	4313      	orrs	r3, r2
 800be68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be74:	d105      	bne.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be76:	4b05      	ldr	r3, [pc, #20]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	4a04      	ldr	r2, [pc, #16]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be80:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800be82:	7cbb      	ldrb	r3, [r7, #18]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	40021000 	.word	0x40021000

0800be90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d101      	bne.n	800bea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	e084      	b.n	800bfac <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d106      	bne.n	800bec2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f7fb fd2b 	bl	8007918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2202      	movs	r2, #2
 800bec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bed8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bee2:	d902      	bls.n	800beea <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bee4:	2300      	movs	r3, #0
 800bee6:	60fb      	str	r3, [r7, #12]
 800bee8:	e002      	b.n	800bef0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800beea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bef8:	d007      	beq.n	800bf0a <HAL_SPI_Init+0x7a>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf02:	d002      	beq.n	800bf0a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10b      	bne.n	800bf2a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf1a:	d903      	bls.n	800bf24 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2202      	movs	r2, #2
 800bf20:	631a      	str	r2, [r3, #48]	; 0x30
 800bf22:	e002      	b.n	800bf2a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	431a      	orrs	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf48:	431a      	orrs	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	431a      	orrs	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a1b      	ldr	r3, [r3, #32]
 800bf54:	ea42 0103 	orr.w	r1, r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	0c1b      	lsrs	r3, r3, #16
 800bf6a:	f003 0204 	and.w	r2, r3, #4
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	431a      	orrs	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf78:	431a      	orrs	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	ea42 0103 	orr.w	r1, r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	430a      	orrs	r2, r1
 800bf8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	69da      	ldr	r2, [r3, #28]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e049      	b.n	800c05a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d106      	bne.n	800bfe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7fc f914 	bl	8008208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3304      	adds	r3, #4
 800bff0:	4619      	mov	r1, r3
 800bff2:	4610      	mov	r0, r2
 800bff4:	f000 fc38 	bl	800c868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
	...

0800c064 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c072:	b2db      	uxtb	r3, r3
 800c074:	2b01      	cmp	r3, #1
 800c076:	d001      	beq.n	800c07c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e019      	b.n	800c0b0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	689a      	ldr	r2, [r3, #8]
 800c08a:	4b0c      	ldr	r3, [pc, #48]	; (800c0bc <HAL_TIM_Base_Start+0x58>)
 800c08c:	4013      	ands	r3, r2
 800c08e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2b06      	cmp	r3, #6
 800c094:	d00b      	beq.n	800c0ae <HAL_TIM_Base_Start+0x4a>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c09c:	d007      	beq.n	800c0ae <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f042 0201 	orr.w	r2, r2, #1
 800c0ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	00010007 	.word	0x00010007

0800c0c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6a1a      	ldr	r2, [r3, #32]
 800c0ce:	f241 1311 	movw	r3, #4369	; 0x1111
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10f      	bne.n	800c0f8 <HAL_TIM_Base_Stop+0x38>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6a1a      	ldr	r2, [r3, #32]
 800c0de:	f244 4344 	movw	r3, #17476	; 0x4444
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d107      	bne.n	800c0f8 <HAL_TIM_Base_Stop+0x38>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f022 0201 	bic.w	r2, r2, #1
 800c0f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
	...

0800c110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b01      	cmp	r3, #1
 800c122:	d001      	beq.n	800c128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e021      	b.n	800c16c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2202      	movs	r2, #2
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68da      	ldr	r2, [r3, #12]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f042 0201 	orr.w	r2, r2, #1
 800c13e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	689a      	ldr	r2, [r3, #8]
 800c146:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <HAL_TIM_Base_Start_IT+0x68>)
 800c148:	4013      	ands	r3, r2
 800c14a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b06      	cmp	r3, #6
 800c150:	d00b      	beq.n	800c16a <HAL_TIM_Base_Start_IT+0x5a>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c158:	d007      	beq.n	800c16a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f042 0201 	orr.w	r2, r2, #1
 800c168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3714      	adds	r7, #20
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr
 800c178:	00010007 	.word	0x00010007

0800c17c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68da      	ldr	r2, [r3, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f022 0201 	bic.w	r2, r2, #1
 800c192:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	6a1a      	ldr	r2, [r3, #32]
 800c19a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c19e:	4013      	ands	r3, r2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10f      	bne.n	800c1c4 <HAL_TIM_Base_Stop_IT+0x48>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6a1a      	ldr	r2, [r3, #32]
 800c1aa:	f244 4344 	movw	r3, #17476	; 0x4444
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d107      	bne.n	800c1c4 <HAL_TIM_Base_Stop_IT+0x48>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f022 0201 	bic.w	r2, r2, #1
 800c1c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b086      	sub	sp, #24
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e097      	b.n	800c31e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7fb ffb4 	bl	8008170 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	6812      	ldr	r2, [r2, #0]
 800c21a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c21e:	f023 0307 	bic.w	r3, r3, #7
 800c222:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3304      	adds	r3, #4
 800c22c:	4619      	mov	r1, r3
 800c22e:	4610      	mov	r0, r2
 800c230:	f000 fb1a 	bl	800c868 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6a1b      	ldr	r3, [r3, #32]
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	4313      	orrs	r3, r2
 800c254:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c25c:	f023 0303 	bic.w	r3, r3, #3
 800c260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	689a      	ldr	r2, [r3, #8]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	021b      	lsls	r3, r3, #8
 800c26c:	4313      	orrs	r3, r2
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	4313      	orrs	r3, r2
 800c272:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c27a:	f023 030c 	bic.w	r3, r3, #12
 800c27e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c28a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	69db      	ldr	r3, [r3, #28]
 800c294:	021b      	lsls	r3, r3, #8
 800c296:	4313      	orrs	r3, r2
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	011a      	lsls	r2, r3, #4
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	6a1b      	ldr	r3, [r3, #32]
 800c2a8:	031b      	lsls	r3, r3, #12
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c2b8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c2c0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	685a      	ldr	r2, [r3, #4]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	697a      	ldr	r2, [r7, #20]
 800c2da:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3718      	adds	r7, #24
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b082      	sub	sp, #8
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	f003 0302 	and.w	r3, r3, #2
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d122      	bne.n	800c382 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	f003 0302 	and.w	r3, r3, #2
 800c346:	2b02      	cmp	r3, #2
 800c348:	d11b      	bne.n	800c382 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f06f 0202 	mvn.w	r2, #2
 800c352:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	f003 0303 	and.w	r3, r3, #3
 800c364:	2b00      	cmp	r3, #0
 800c366:	d003      	beq.n	800c370 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fa5f 	bl	800c82c <HAL_TIM_IC_CaptureCallback>
 800c36e:	e005      	b.n	800c37c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 fa51 	bl	800c818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fa62 	bl	800c840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	f003 0304 	and.w	r3, r3, #4
 800c38c:	2b04      	cmp	r3, #4
 800c38e:	d122      	bne.n	800c3d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	f003 0304 	and.w	r3, r3, #4
 800c39a:	2b04      	cmp	r3, #4
 800c39c:	d11b      	bne.n	800c3d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f06f 0204 	mvn.w	r2, #4
 800c3a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	699b      	ldr	r3, [r3, #24]
 800c3b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d003      	beq.n	800c3c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fa35 	bl	800c82c <HAL_TIM_IC_CaptureCallback>
 800c3c2:	e005      	b.n	800c3d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 fa27 	bl	800c818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fa38 	bl	800c840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	f003 0308 	and.w	r3, r3, #8
 800c3e0:	2b08      	cmp	r3, #8
 800c3e2:	d122      	bne.n	800c42a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	f003 0308 	and.w	r3, r3, #8
 800c3ee:	2b08      	cmp	r3, #8
 800c3f0:	d11b      	bne.n	800c42a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f06f 0208 	mvn.w	r2, #8
 800c3fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2204      	movs	r2, #4
 800c400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	69db      	ldr	r3, [r3, #28]
 800c408:	f003 0303 	and.w	r3, r3, #3
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d003      	beq.n	800c418 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fa0b 	bl	800c82c <HAL_TIM_IC_CaptureCallback>
 800c416:	e005      	b.n	800c424 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f9fd 	bl	800c818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fa0e 	bl	800c840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	f003 0310 	and.w	r3, r3, #16
 800c434:	2b10      	cmp	r3, #16
 800c436:	d122      	bne.n	800c47e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	f003 0310 	and.w	r3, r3, #16
 800c442:	2b10      	cmp	r3, #16
 800c444:	d11b      	bne.n	800c47e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f06f 0210 	mvn.w	r2, #16
 800c44e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2208      	movs	r2, #8
 800c454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	69db      	ldr	r3, [r3, #28]
 800c45c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f9e1 	bl	800c82c <HAL_TIM_IC_CaptureCallback>
 800c46a:	e005      	b.n	800c478 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 f9d3 	bl	800c818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f9e4 	bl	800c840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	f003 0301 	and.w	r3, r3, #1
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d10e      	bne.n	800c4aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	2b01      	cmp	r3, #1
 800c498:	d107      	bne.n	800c4aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f06f 0201 	mvn.w	r2, #1
 800c4a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f9ad 	bl	800c804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4b4:	2b80      	cmp	r3, #128	; 0x80
 800c4b6:	d10e      	bne.n	800c4d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4c2:	2b80      	cmp	r3, #128	; 0x80
 800c4c4:	d107      	bne.n	800c4d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c4ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fc5f 	bl	800cd94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4e4:	d10e      	bne.n	800c504 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4f0:	2b80      	cmp	r3, #128	; 0x80
 800c4f2:	d107      	bne.n	800c504 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c4fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 fc52 	bl	800cda8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c50e:	2b40      	cmp	r3, #64	; 0x40
 800c510:	d10e      	bne.n	800c530 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c51c:	2b40      	cmp	r3, #64	; 0x40
 800c51e:	d107      	bne.n	800c530 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f992 	bl	800c854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	f003 0320 	and.w	r3, r3, #32
 800c53a:	2b20      	cmp	r3, #32
 800c53c:	d10e      	bne.n	800c55c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	f003 0320 	and.w	r3, r3, #32
 800c548:	2b20      	cmp	r3, #32
 800c54a:	d107      	bne.n	800c55c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f06f 0220 	mvn.w	r2, #32
 800c554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fc12 	bl	800cd80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c56a:	d10f      	bne.n	800c58c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c57a:	d107      	bne.n	800c58c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 fc18 	bl	800cdbc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c59a:	d10f      	bne.n	800c5bc <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c5a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5aa:	d107      	bne.n	800c5bc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fc0a 	bl	800cdd0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5ca:	d10f      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5da:	d107      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fbfc 	bl	800cde4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5fa:	d10f      	bne.n	800c61c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c606:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c60a:	d107      	bne.n	800c61c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fbee 	bl	800cdf8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c61c:	bf00      	nop
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c634:	2b01      	cmp	r3, #1
 800c636:	d101      	bne.n	800c63c <HAL_TIM_ConfigClockSource+0x18>
 800c638:	2302      	movs	r3, #2
 800c63a:	e0d2      	b.n	800c7e2 <HAL_TIM_ConfigClockSource+0x1be>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2202      	movs	r2, #2
 800c648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c65a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c65e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c666:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c678:	f000 80a9 	beq.w	800c7ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c67c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c680:	d81a      	bhi.n	800c6b8 <HAL_TIM_ConfigClockSource+0x94>
 800c682:	2b30      	cmp	r3, #48	; 0x30
 800c684:	f000 809a 	beq.w	800c7bc <HAL_TIM_ConfigClockSource+0x198>
 800c688:	2b30      	cmp	r3, #48	; 0x30
 800c68a:	d809      	bhi.n	800c6a0 <HAL_TIM_ConfigClockSource+0x7c>
 800c68c:	2b10      	cmp	r3, #16
 800c68e:	f000 8095 	beq.w	800c7bc <HAL_TIM_ConfigClockSource+0x198>
 800c692:	2b20      	cmp	r3, #32
 800c694:	f000 8092 	beq.w	800c7bc <HAL_TIM_ConfigClockSource+0x198>
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 808f 	beq.w	800c7bc <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c69e:	e097      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6a0:	2b50      	cmp	r3, #80	; 0x50
 800c6a2:	d05b      	beq.n	800c75c <HAL_TIM_ConfigClockSource+0x138>
 800c6a4:	2b50      	cmp	r3, #80	; 0x50
 800c6a6:	d802      	bhi.n	800c6ae <HAL_TIM_ConfigClockSource+0x8a>
 800c6a8:	2b40      	cmp	r3, #64	; 0x40
 800c6aa:	d077      	beq.n	800c79c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c6ac:	e090      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6ae:	2b60      	cmp	r3, #96	; 0x60
 800c6b0:	d064      	beq.n	800c77c <HAL_TIM_ConfigClockSource+0x158>
 800c6b2:	2b70      	cmp	r3, #112	; 0x70
 800c6b4:	d028      	beq.n	800c708 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c6b6:	e08b      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6b8:	4a4c      	ldr	r2, [pc, #304]	; (800c7ec <HAL_TIM_ConfigClockSource+0x1c8>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d07e      	beq.n	800c7bc <HAL_TIM_ConfigClockSource+0x198>
 800c6be:	4a4b      	ldr	r2, [pc, #300]	; (800c7ec <HAL_TIM_ConfigClockSource+0x1c8>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d810      	bhi.n	800c6e6 <HAL_TIM_ConfigClockSource+0xc2>
 800c6c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6c8:	d078      	beq.n	800c7bc <HAL_TIM_ConfigClockSource+0x198>
 800c6ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6ce:	d803      	bhi.n	800c6d8 <HAL_TIM_ConfigClockSource+0xb4>
 800c6d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6d4:	d02f      	beq.n	800c736 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c6d6:	e07b      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c6dc:	d06e      	beq.n	800c7bc <HAL_TIM_ConfigClockSource+0x198>
 800c6de:	4a44      	ldr	r2, [pc, #272]	; (800c7f0 <HAL_TIM_ConfigClockSource+0x1cc>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d06b      	beq.n	800c7bc <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c6e4:	e074      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6e6:	4a43      	ldr	r2, [pc, #268]	; (800c7f4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d067      	beq.n	800c7bc <HAL_TIM_ConfigClockSource+0x198>
 800c6ec:	4a41      	ldr	r2, [pc, #260]	; (800c7f4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d803      	bhi.n	800c6fa <HAL_TIM_ConfigClockSource+0xd6>
 800c6f2:	4a41      	ldr	r2, [pc, #260]	; (800c7f8 <HAL_TIM_ConfigClockSource+0x1d4>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d061      	beq.n	800c7bc <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c6f8:	e06a      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6fa:	4a40      	ldr	r2, [pc, #256]	; (800c7fc <HAL_TIM_ConfigClockSource+0x1d8>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d05d      	beq.n	800c7bc <HAL_TIM_ConfigClockSource+0x198>
 800c700:	4a3f      	ldr	r2, [pc, #252]	; (800c800 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d05a      	beq.n	800c7bc <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c706:	e063      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	6899      	ldr	r1, [r3, #8]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f000 f9ca 	bl	800cab0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c72a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	609a      	str	r2, [r3, #8]
      break;
 800c734:	e04c      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6818      	ldr	r0, [r3, #0]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	6899      	ldr	r1, [r3, #8]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	f000 f9b3 	bl	800cab0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	689a      	ldr	r2, [r3, #8]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c758:	609a      	str	r2, [r3, #8]
      break;
 800c75a:	e039      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6818      	ldr	r0, [r3, #0]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	6859      	ldr	r1, [r3, #4]
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	461a      	mov	r2, r3
 800c76a:	f000 f925 	bl	800c9b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2150      	movs	r1, #80	; 0x50
 800c774:	4618      	mov	r0, r3
 800c776:	f000 f97e 	bl	800ca76 <TIM_ITRx_SetConfig>
      break;
 800c77a:	e029      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6818      	ldr	r0, [r3, #0]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	6859      	ldr	r1, [r3, #4]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	461a      	mov	r2, r3
 800c78a:	f000 f944 	bl	800ca16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2160      	movs	r1, #96	; 0x60
 800c794:	4618      	mov	r0, r3
 800c796:	f000 f96e 	bl	800ca76 <TIM_ITRx_SetConfig>
      break;
 800c79a:	e019      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6818      	ldr	r0, [r3, #0]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	6859      	ldr	r1, [r3, #4]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	f000 f905 	bl	800c9b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2140      	movs	r1, #64	; 0x40
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 f95e 	bl	800ca76 <TIM_ITRx_SetConfig>
      break;
 800c7ba:	e009      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	f000 f955 	bl	800ca76 <TIM_ITRx_SetConfig>
      break;
 800c7cc:	e000      	b.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c7ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	00100030 	.word	0x00100030
 800c7f0:	00100020 	.word	0x00100020
 800c7f4:	00100050 	.word	0x00100050
 800c7f8:	00100040 	.word	0x00100040
 800c7fc:	00100060 	.word	0x00100060
 800c800:	00100070 	.word	0x00100070

0800c804 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c834:	bf00      	nop
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c85c:	bf00      	nop
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a46      	ldr	r2, [pc, #280]	; (800c994 <TIM_Base_SetConfig+0x12c>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d017      	beq.n	800c8b0 <TIM_Base_SetConfig+0x48>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c886:	d013      	beq.n	800c8b0 <TIM_Base_SetConfig+0x48>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a43      	ldr	r2, [pc, #268]	; (800c998 <TIM_Base_SetConfig+0x130>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d00f      	beq.n	800c8b0 <TIM_Base_SetConfig+0x48>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a42      	ldr	r2, [pc, #264]	; (800c99c <TIM_Base_SetConfig+0x134>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d00b      	beq.n	800c8b0 <TIM_Base_SetConfig+0x48>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a41      	ldr	r2, [pc, #260]	; (800c9a0 <TIM_Base_SetConfig+0x138>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d007      	beq.n	800c8b0 <TIM_Base_SetConfig+0x48>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a40      	ldr	r2, [pc, #256]	; (800c9a4 <TIM_Base_SetConfig+0x13c>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d003      	beq.n	800c8b0 <TIM_Base_SetConfig+0x48>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a3f      	ldr	r2, [pc, #252]	; (800c9a8 <TIM_Base_SetConfig+0x140>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d108      	bne.n	800c8c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4a33      	ldr	r2, [pc, #204]	; (800c994 <TIM_Base_SetConfig+0x12c>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d023      	beq.n	800c912 <TIM_Base_SetConfig+0xaa>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8d0:	d01f      	beq.n	800c912 <TIM_Base_SetConfig+0xaa>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a30      	ldr	r2, [pc, #192]	; (800c998 <TIM_Base_SetConfig+0x130>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d01b      	beq.n	800c912 <TIM_Base_SetConfig+0xaa>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a2f      	ldr	r2, [pc, #188]	; (800c99c <TIM_Base_SetConfig+0x134>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d017      	beq.n	800c912 <TIM_Base_SetConfig+0xaa>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a2e      	ldr	r2, [pc, #184]	; (800c9a0 <TIM_Base_SetConfig+0x138>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d013      	beq.n	800c912 <TIM_Base_SetConfig+0xaa>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a2d      	ldr	r2, [pc, #180]	; (800c9a4 <TIM_Base_SetConfig+0x13c>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d00f      	beq.n	800c912 <TIM_Base_SetConfig+0xaa>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a2d      	ldr	r2, [pc, #180]	; (800c9ac <TIM_Base_SetConfig+0x144>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d00b      	beq.n	800c912 <TIM_Base_SetConfig+0xaa>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a2c      	ldr	r2, [pc, #176]	; (800c9b0 <TIM_Base_SetConfig+0x148>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d007      	beq.n	800c912 <TIM_Base_SetConfig+0xaa>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a2b      	ldr	r2, [pc, #172]	; (800c9b4 <TIM_Base_SetConfig+0x14c>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d003      	beq.n	800c912 <TIM_Base_SetConfig+0xaa>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a26      	ldr	r2, [pc, #152]	; (800c9a8 <TIM_Base_SetConfig+0x140>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d108      	bne.n	800c924 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	4313      	orrs	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	4313      	orrs	r3, r2
 800c930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	689a      	ldr	r2, [r3, #8]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a12      	ldr	r2, [pc, #72]	; (800c994 <TIM_Base_SetConfig+0x12c>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d013      	beq.n	800c978 <TIM_Base_SetConfig+0x110>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a14      	ldr	r2, [pc, #80]	; (800c9a4 <TIM_Base_SetConfig+0x13c>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d00f      	beq.n	800c978 <TIM_Base_SetConfig+0x110>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a14      	ldr	r2, [pc, #80]	; (800c9ac <TIM_Base_SetConfig+0x144>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d00b      	beq.n	800c978 <TIM_Base_SetConfig+0x110>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a13      	ldr	r2, [pc, #76]	; (800c9b0 <TIM_Base_SetConfig+0x148>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d007      	beq.n	800c978 <TIM_Base_SetConfig+0x110>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a12      	ldr	r2, [pc, #72]	; (800c9b4 <TIM_Base_SetConfig+0x14c>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d003      	beq.n	800c978 <TIM_Base_SetConfig+0x110>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a0d      	ldr	r2, [pc, #52]	; (800c9a8 <TIM_Base_SetConfig+0x140>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d103      	bne.n	800c980 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	691a      	ldr	r2, [r3, #16]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	615a      	str	r2, [r3, #20]
}
 800c986:	bf00      	nop
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	40012c00 	.word	0x40012c00
 800c998:	40000400 	.word	0x40000400
 800c99c:	40000800 	.word	0x40000800
 800c9a0:	40000c00 	.word	0x40000c00
 800c9a4:	40013400 	.word	0x40013400
 800c9a8:	40015000 	.word	0x40015000
 800c9ac:	40014000 	.word	0x40014000
 800c9b0:	40014400 	.word	0x40014400
 800c9b4:	40014800 	.word	0x40014800

0800c9b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6a1b      	ldr	r3, [r3, #32]
 800c9c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	f023 0201 	bic.w	r2, r3, #1
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	011b      	lsls	r3, r3, #4
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f023 030a 	bic.w	r3, r3, #10
 800c9f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	621a      	str	r2, [r3, #32]
}
 800ca0a:	bf00      	nop
 800ca0c:	371c      	adds	r7, #28
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b087      	sub	sp, #28
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	60b9      	str	r1, [r7, #8]
 800ca20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	f023 0210 	bic.w	r2, r3, #16
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6a1b      	ldr	r3, [r3, #32]
 800ca38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	031b      	lsls	r3, r3, #12
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ca52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	011b      	lsls	r3, r3, #4
 800ca58:	693a      	ldr	r2, [r7, #16]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	621a      	str	r2, [r3, #32]
}
 800ca6a:	bf00      	nop
 800ca6c:	371c      	adds	r7, #28
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b085      	sub	sp, #20
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ca8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	f043 0307 	orr.w	r3, r3, #7
 800ca9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	609a      	str	r2, [r3, #8]
}
 800caa4:	bf00      	nop
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
 800cabc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800caca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	021a      	lsls	r2, r3, #8
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	431a      	orrs	r2, r3
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	4313      	orrs	r3, r2
 800cadc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	697a      	ldr	r2, [r7, #20]
 800cae2:	609a      	str	r2, [r3, #8]
}
 800cae4:	bf00      	nop
 800cae6:	371c      	adds	r7, #28
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d101      	bne.n	800cb08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb04:	2302      	movs	r3, #2
 800cb06:	e074      	b.n	800cbf2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2202      	movs	r2, #2
 800cb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a34      	ldr	r2, [pc, #208]	; (800cc00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d009      	beq.n	800cb46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a33      	ldr	r2, [pc, #204]	; (800cc04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d004      	beq.n	800cb46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a31      	ldr	r2, [pc, #196]	; (800cc08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d108      	bne.n	800cb58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a21      	ldr	r2, [pc, #132]	; (800cc00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d022      	beq.n	800cbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb88:	d01d      	beq.n	800cbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a1f      	ldr	r2, [pc, #124]	; (800cc0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d018      	beq.n	800cbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a1d      	ldr	r2, [pc, #116]	; (800cc10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d013      	beq.n	800cbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a1c      	ldr	r2, [pc, #112]	; (800cc14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d00e      	beq.n	800cbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a15      	ldr	r2, [pc, #84]	; (800cc04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d009      	beq.n	800cbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a18      	ldr	r2, [pc, #96]	; (800cc18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d004      	beq.n	800cbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a11      	ldr	r2, [pc, #68]	; (800cc08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d10c      	bne.n	800cbe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3714      	adds	r7, #20
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	40012c00 	.word	0x40012c00
 800cc04:	40013400 	.word	0x40013400
 800cc08:	40015000 	.word	0x40015000
 800cc0c:	40000400 	.word	0x40000400
 800cc10:	40000800 	.word	0x40000800
 800cc14:	40000c00 	.word	0x40000c00
 800cc18:	40014000 	.word	0x40014000

0800cc1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc26:	2300      	movs	r3, #0
 800cc28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d101      	bne.n	800cc38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cc34:	2302      	movs	r3, #2
 800cc36:	e096      	b.n	800cd66 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	699b      	ldr	r3, [r3, #24]
 800ccac:	041b      	lsls	r3, r3, #16
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a2f      	ldr	r2, [pc, #188]	; (800cd74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d009      	beq.n	800ccd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a2d      	ldr	r2, [pc, #180]	; (800cd78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d004      	beq.n	800ccd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a2c      	ldr	r2, [pc, #176]	; (800cd7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d106      	bne.n	800ccde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	69db      	ldr	r3, [r3, #28]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a24      	ldr	r2, [pc, #144]	; (800cd74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d009      	beq.n	800ccfc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a22      	ldr	r2, [pc, #136]	; (800cd78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d004      	beq.n	800ccfc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a21      	ldr	r2, [pc, #132]	; (800cd7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d12b      	bne.n	800cd54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd06:	051b      	lsls	r3, r3, #20
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd24:	4313      	orrs	r3, r2
 800cd26:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a11      	ldr	r2, [pc, #68]	; (800cd74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d009      	beq.n	800cd46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a10      	ldr	r2, [pc, #64]	; (800cd78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d004      	beq.n	800cd46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a0e      	ldr	r2, [pc, #56]	; (800cd7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d106      	bne.n	800cd54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd50:	4313      	orrs	r3, r2
 800cd52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3714      	adds	r7, #20
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	40012c00 	.word	0x40012c00
 800cd78:	40013400 	.word	0x40013400
 800cd7c:	40015000 	.word	0x40015000

0800cd80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd88:	bf00      	nop
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd9c:	bf00      	nop
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cdb0:	bf00      	nop
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cdc4:	bf00      	nop
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cdd8:	bf00      	nop
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <LL_EXTI_EnableIT_0_31>:
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ce14:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <LL_EXTI_EnableIT_0_31+0x20>)
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	4904      	ldr	r1, [pc, #16]	; (800ce2c <LL_EXTI_EnableIT_0_31+0x20>)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	600b      	str	r3, [r1, #0]
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	40010400 	.word	0x40010400

0800ce30 <LL_EXTI_EnableIT_32_63>:
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800ce38:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <LL_EXTI_EnableIT_32_63+0x20>)
 800ce3a:	6a1a      	ldr	r2, [r3, #32]
 800ce3c:	4904      	ldr	r1, [pc, #16]	; (800ce50 <LL_EXTI_EnableIT_32_63+0x20>)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	620b      	str	r3, [r1, #32]
}
 800ce44:	bf00      	nop
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	40010400 	.word	0x40010400

0800ce54 <LL_EXTI_DisableIT_0_31>:
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800ce5c:	4b06      	ldr	r3, [pc, #24]	; (800ce78 <LL_EXTI_DisableIT_0_31+0x24>)
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	43db      	mvns	r3, r3
 800ce64:	4904      	ldr	r1, [pc, #16]	; (800ce78 <LL_EXTI_DisableIT_0_31+0x24>)
 800ce66:	4013      	ands	r3, r2
 800ce68:	600b      	str	r3, [r1, #0]
}
 800ce6a:	bf00      	nop
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	40010400 	.word	0x40010400

0800ce7c <LL_EXTI_DisableIT_32_63>:
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800ce84:	4b06      	ldr	r3, [pc, #24]	; (800cea0 <LL_EXTI_DisableIT_32_63+0x24>)
 800ce86:	6a1a      	ldr	r2, [r3, #32]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	43db      	mvns	r3, r3
 800ce8c:	4904      	ldr	r1, [pc, #16]	; (800cea0 <LL_EXTI_DisableIT_32_63+0x24>)
 800ce8e:	4013      	ands	r3, r2
 800ce90:	620b      	str	r3, [r1, #32]
}
 800ce92:	bf00      	nop
 800ce94:	370c      	adds	r7, #12
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	40010400 	.word	0x40010400

0800cea4 <LL_EXTI_EnableEvent_0_31>:
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800ceac:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800ceae:	685a      	ldr	r2, [r3, #4]
 800ceb0:	4904      	ldr	r1, [pc, #16]	; (800cec4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	604b      	str	r3, [r1, #4]
}
 800ceb8:	bf00      	nop
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr
 800cec4:	40010400 	.word	0x40010400

0800cec8 <LL_EXTI_EnableEvent_32_63>:
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800ced0:	4b05      	ldr	r3, [pc, #20]	; (800cee8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ced2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ced4:	4904      	ldr	r1, [pc, #16]	; (800cee8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	624b      	str	r3, [r1, #36]	; 0x24
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr
 800cee8:	40010400 	.word	0x40010400

0800ceec <LL_EXTI_DisableEvent_0_31>:
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800cef4:	4b06      	ldr	r3, [pc, #24]	; (800cf10 <LL_EXTI_DisableEvent_0_31+0x24>)
 800cef6:	685a      	ldr	r2, [r3, #4]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	43db      	mvns	r3, r3
 800cefc:	4904      	ldr	r1, [pc, #16]	; (800cf10 <LL_EXTI_DisableEvent_0_31+0x24>)
 800cefe:	4013      	ands	r3, r2
 800cf00:	604b      	str	r3, [r1, #4]
}
 800cf02:	bf00      	nop
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	40010400 	.word	0x40010400

0800cf14 <LL_EXTI_DisableEvent_32_63>:
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800cf1c:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <LL_EXTI_DisableEvent_32_63+0x24>)
 800cf1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	43db      	mvns	r3, r3
 800cf24:	4904      	ldr	r1, [pc, #16]	; (800cf38 <LL_EXTI_DisableEvent_32_63+0x24>)
 800cf26:	4013      	ands	r3, r2
 800cf28:	624b      	str	r3, [r1, #36]	; 0x24
}
 800cf2a:	bf00      	nop
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	40010400 	.word	0x40010400

0800cf3c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800cf44:	4b05      	ldr	r3, [pc, #20]	; (800cf5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	4904      	ldr	r1, [pc, #16]	; (800cf5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	608b      	str	r3, [r1, #8]
}
 800cf50:	bf00      	nop
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr
 800cf5c:	40010400 	.word	0x40010400

0800cf60 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800cf68:	4b05      	ldr	r3, [pc, #20]	; (800cf80 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cf6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf6c:	4904      	ldr	r1, [pc, #16]	; (800cf80 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	628b      	str	r3, [r1, #40]	; 0x28
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr
 800cf80:	40010400 	.word	0x40010400

0800cf84 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800cf8c:	4b06      	ldr	r3, [pc, #24]	; (800cfa8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800cf8e:	689a      	ldr	r2, [r3, #8]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	43db      	mvns	r3, r3
 800cf94:	4904      	ldr	r1, [pc, #16]	; (800cfa8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800cf96:	4013      	ands	r3, r2
 800cf98:	608b      	str	r3, [r1, #8]
}
 800cf9a:	bf00      	nop
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	40010400 	.word	0x40010400

0800cfac <LL_EXTI_DisableRisingTrig_32_63>:
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800cfb4:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800cfb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	43db      	mvns	r3, r3
 800cfbc:	4904      	ldr	r1, [pc, #16]	; (800cfd0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	628b      	str	r3, [r1, #40]	; 0x28
}
 800cfc2:	bf00      	nop
 800cfc4:	370c      	adds	r7, #12
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	40010400 	.word	0x40010400

0800cfd4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800cfdc:	4b05      	ldr	r3, [pc, #20]	; (800cff4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800cfde:	68da      	ldr	r2, [r3, #12]
 800cfe0:	4904      	ldr	r1, [pc, #16]	; (800cff4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	60cb      	str	r3, [r1, #12]
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	40010400 	.word	0x40010400

0800cff8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d000:	4b05      	ldr	r3, [pc, #20]	; (800d018 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d004:	4904      	ldr	r1, [pc, #16]	; (800d018 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4313      	orrs	r3, r2
 800d00a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	40010400 	.word	0x40010400

0800d01c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d024:	4b06      	ldr	r3, [pc, #24]	; (800d040 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d026:	68da      	ldr	r2, [r3, #12]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	43db      	mvns	r3, r3
 800d02c:	4904      	ldr	r1, [pc, #16]	; (800d040 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d02e:	4013      	ands	r3, r2
 800d030:	60cb      	str	r3, [r1, #12]
}
 800d032:	bf00      	nop
 800d034:	370c      	adds	r7, #12
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	40010400 	.word	0x40010400

0800d044 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d04c:	4b06      	ldr	r3, [pc, #24]	; (800d068 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	43db      	mvns	r3, r3
 800d054:	4904      	ldr	r1, [pc, #16]	; (800d068 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d056:	4013      	ands	r3, r2
 800d058:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d05a:	bf00      	nop
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	40010400 	.word	0x40010400

0800d06c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d074:	2300      	movs	r3, #0
 800d076:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	7a1b      	ldrb	r3, [r3, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 80c8 	beq.w	800d212 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d05d      	beq.n	800d146 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7a5b      	ldrb	r3, [r3, #9]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d00e      	beq.n	800d0b0 <LL_EXTI_Init+0x44>
 800d092:	2b02      	cmp	r3, #2
 800d094:	d017      	beq.n	800d0c6 <LL_EXTI_Init+0x5a>
 800d096:	2b00      	cmp	r3, #0
 800d098:	d120      	bne.n	800d0dc <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7ff ff24 	bl	800ceec <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff feaf 	bl	800ce0c <LL_EXTI_EnableIT_0_31>
          break;
 800d0ae:	e018      	b.n	800d0e2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7ff fecd 	bl	800ce54 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7ff fef0 	bl	800cea4 <LL_EXTI_EnableEvent_0_31>
          break;
 800d0c4:	e00d      	b.n	800d0e2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7ff fe9e 	bl	800ce0c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7ff fee5 	bl	800cea4 <LL_EXTI_EnableEvent_0_31>
          break;
 800d0da:	e002      	b.n	800d0e2 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	60fb      	str	r3, [r7, #12]
          break;
 800d0e0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	7a9b      	ldrb	r3, [r3, #10]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d02d      	beq.n	800d146 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	7a9b      	ldrb	r3, [r3, #10]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d00e      	beq.n	800d110 <LL_EXTI_Init+0xa4>
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	d017      	beq.n	800d126 <LL_EXTI_Init+0xba>
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d120      	bne.n	800d13c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff ff8c 	bl	800d01c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff ff17 	bl	800cf3c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d10e:	e01b      	b.n	800d148 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4618      	mov	r0, r3
 800d116:	f7ff ff35 	bl	800cf84 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff ff58 	bl	800cfd4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d124:	e010      	b.n	800d148 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7ff ff06 	bl	800cf3c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff ff4d 	bl	800cfd4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d13a:	e005      	b.n	800d148 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f043 0302 	orr.w	r3, r3, #2
 800d142:	60fb      	str	r3, [r7, #12]
            break;
 800d144:	e000      	b.n	800d148 <LL_EXTI_Init+0xdc>
        }
      }
 800d146:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d075      	beq.n	800d23c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	7a5b      	ldrb	r3, [r3, #9]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d00e      	beq.n	800d176 <LL_EXTI_Init+0x10a>
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d017      	beq.n	800d18c <LL_EXTI_Init+0x120>
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d120      	bne.n	800d1a2 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	4618      	mov	r0, r3
 800d166:	f7ff fed5 	bl	800cf14 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7ff fe5e 	bl	800ce30 <LL_EXTI_EnableIT_32_63>
          break;
 800d174:	e01a      	b.n	800d1ac <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7ff fe7e 	bl	800ce7c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	4618      	mov	r0, r3
 800d186:	f7ff fe9f 	bl	800cec8 <LL_EXTI_EnableEvent_32_63>
          break;
 800d18a:	e00f      	b.n	800d1ac <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff fe4d 	bl	800ce30 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7ff fe94 	bl	800cec8 <LL_EXTI_EnableEvent_32_63>
          break;
 800d1a0:	e004      	b.n	800d1ac <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f043 0304 	orr.w	r3, r3, #4
 800d1a8:	60fb      	str	r3, [r7, #12]
          break;
 800d1aa:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	7a9b      	ldrb	r3, [r3, #10]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d043      	beq.n	800d23c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	7a9b      	ldrb	r3, [r3, #10]
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	d00e      	beq.n	800d1da <LL_EXTI_Init+0x16e>
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	d017      	beq.n	800d1f0 <LL_EXTI_Init+0x184>
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d120      	bne.n	800d206 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7ff ff3b 	bl	800d044 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7ff fec4 	bl	800cf60 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d1d8:	e031      	b.n	800d23e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7ff fee4 	bl	800cfac <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7ff ff05 	bl	800cff8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d1ee:	e026      	b.n	800d23e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7ff feb3 	bl	800cf60 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7ff fefa 	bl	800cff8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d204:	e01b      	b.n	800d23e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f043 0305 	orr.w	r3, r3, #5
 800d20c:	60fb      	str	r3, [r7, #12]
            break;
 800d20e:	bf00      	nop
 800d210:	e015      	b.n	800d23e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4618      	mov	r0, r3
 800d218:	f7ff fe1c 	bl	800ce54 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4618      	mov	r0, r3
 800d222:	f7ff fe63 	bl	800ceec <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7ff fe26 	bl	800ce7c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	4618      	mov	r0, r3
 800d236:	f7ff fe6d 	bl	800cf14 <LL_EXTI_DisableEvent_32_63>
 800d23a:	e000      	b.n	800d23e <LL_EXTI_Init+0x1d2>
      }
 800d23c:	bf00      	nop
  }

  return status;
 800d23e:	68fb      	ldr	r3, [r7, #12]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <LL_GPIO_SetPinMode>:
{
 800d248:	b480      	push	{r7}
 800d24a:	b089      	sub	sp, #36	; 0x24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	fa93 f3a3 	rbit	r3, r3
 800d262:	613b      	str	r3, [r7, #16]
  return result;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	fab3 f383 	clz	r3, r3
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	005b      	lsls	r3, r3, #1
 800d26e:	2103      	movs	r1, #3
 800d270:	fa01 f303 	lsl.w	r3, r1, r3
 800d274:	43db      	mvns	r3, r3
 800d276:	401a      	ands	r2, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	fa93 f3a3 	rbit	r3, r3
 800d282:	61bb      	str	r3, [r7, #24]
  return result;
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	fab3 f383 	clz	r3, r3
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	6879      	ldr	r1, [r7, #4]
 800d290:	fa01 f303 	lsl.w	r3, r1, r3
 800d294:	431a      	orrs	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	601a      	str	r2, [r3, #0]
}
 800d29a:	bf00      	nop
 800d29c:	3724      	adds	r7, #36	; 0x24
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <LL_GPIO_SetPinOutputType>:
{
 800d2a6:	b480      	push	{r7}
 800d2a8:	b085      	sub	sp, #20
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	60f8      	str	r0, [r7, #12]
 800d2ae:	60b9      	str	r1, [r7, #8]
 800d2b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	43db      	mvns	r3, r3
 800d2ba:	401a      	ands	r2, r3
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	6879      	ldr	r1, [r7, #4]
 800d2c0:	fb01 f303 	mul.w	r3, r1, r3
 800d2c4:	431a      	orrs	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	605a      	str	r2, [r3, #4]
}
 800d2ca:	bf00      	nop
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr

0800d2d6 <LL_GPIO_SetPinSpeed>:
{
 800d2d6:	b480      	push	{r7}
 800d2d8:	b089      	sub	sp, #36	; 0x24
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	60f8      	str	r0, [r7, #12]
 800d2de:	60b9      	str	r1, [r7, #8]
 800d2e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	689a      	ldr	r2, [r3, #8]
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	fa93 f3a3 	rbit	r3, r3
 800d2f0:	613b      	str	r3, [r7, #16]
  return result;
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	fab3 f383 	clz	r3, r3
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	2103      	movs	r1, #3
 800d2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800d302:	43db      	mvns	r3, r3
 800d304:	401a      	ands	r2, r3
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	fa93 f3a3 	rbit	r3, r3
 800d310:	61bb      	str	r3, [r7, #24]
  return result;
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	fab3 f383 	clz	r3, r3
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	6879      	ldr	r1, [r7, #4]
 800d31e:	fa01 f303 	lsl.w	r3, r1, r3
 800d322:	431a      	orrs	r2, r3
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	609a      	str	r2, [r3, #8]
}
 800d328:	bf00      	nop
 800d32a:	3724      	adds	r7, #36	; 0x24
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <LL_GPIO_SetPinPull>:
{
 800d334:	b480      	push	{r7}
 800d336:	b089      	sub	sp, #36	; 0x24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	68da      	ldr	r2, [r3, #12]
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	fa93 f3a3 	rbit	r3, r3
 800d34e:	613b      	str	r3, [r7, #16]
  return result;
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	fab3 f383 	clz	r3, r3
 800d356:	b2db      	uxtb	r3, r3
 800d358:	005b      	lsls	r3, r3, #1
 800d35a:	2103      	movs	r1, #3
 800d35c:	fa01 f303 	lsl.w	r3, r1, r3
 800d360:	43db      	mvns	r3, r3
 800d362:	401a      	ands	r2, r3
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	fa93 f3a3 	rbit	r3, r3
 800d36e:	61bb      	str	r3, [r7, #24]
  return result;
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	fab3 f383 	clz	r3, r3
 800d376:	b2db      	uxtb	r3, r3
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	fa01 f303 	lsl.w	r3, r1, r3
 800d380:	431a      	orrs	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	60da      	str	r2, [r3, #12]
}
 800d386:	bf00      	nop
 800d388:	3724      	adds	r7, #36	; 0x24
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr

0800d392 <LL_GPIO_SetAFPin_0_7>:
{
 800d392:	b480      	push	{r7}
 800d394:	b089      	sub	sp, #36	; 0x24
 800d396:	af00      	add	r7, sp, #0
 800d398:	60f8      	str	r0, [r7, #12]
 800d39a:	60b9      	str	r1, [r7, #8]
 800d39c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6a1a      	ldr	r2, [r3, #32]
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	fa93 f3a3 	rbit	r3, r3
 800d3ac:	613b      	str	r3, [r7, #16]
  return result;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	fab3 f383 	clz	r3, r3
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	210f      	movs	r1, #15
 800d3ba:	fa01 f303 	lsl.w	r3, r1, r3
 800d3be:	43db      	mvns	r3, r3
 800d3c0:	401a      	ands	r2, r3
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	fa93 f3a3 	rbit	r3, r3
 800d3cc:	61bb      	str	r3, [r7, #24]
  return result;
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	fab3 f383 	clz	r3, r3
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	fa01 f303 	lsl.w	r3, r1, r3
 800d3de:	431a      	orrs	r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	621a      	str	r2, [r3, #32]
}
 800d3e4:	bf00      	nop
 800d3e6:	3724      	adds	r7, #36	; 0x24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <LL_GPIO_SetAFPin_8_15>:
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b089      	sub	sp, #36	; 0x24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	0a1b      	lsrs	r3, r3, #8
 800d404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	fa93 f3a3 	rbit	r3, r3
 800d40c:	613b      	str	r3, [r7, #16]
  return result;
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	fab3 f383 	clz	r3, r3
 800d414:	b2db      	uxtb	r3, r3
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	210f      	movs	r1, #15
 800d41a:	fa01 f303 	lsl.w	r3, r1, r3
 800d41e:	43db      	mvns	r3, r3
 800d420:	401a      	ands	r2, r3
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	0a1b      	lsrs	r3, r3, #8
 800d426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	fa93 f3a3 	rbit	r3, r3
 800d42e:	61bb      	str	r3, [r7, #24]
  return result;
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	fab3 f383 	clz	r3, r3
 800d436:	b2db      	uxtb	r3, r3
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	6879      	ldr	r1, [r7, #4]
 800d43c:	fa01 f303 	lsl.w	r3, r1, r3
 800d440:	431a      	orrs	r2, r3
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d446:	bf00      	nop
 800d448:	3724      	adds	r7, #36	; 0x24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b086      	sub	sp, #24
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	fa93 f3a3 	rbit	r3, r3
 800d468:	60bb      	str	r3, [r7, #8]
  return result;
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	fab3 f383 	clz	r3, r3
 800d470:	b2db      	uxtb	r3, r3
 800d472:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d474:	e040      	b.n	800d4f8 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	2101      	movs	r1, #1
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	fa01 f303 	lsl.w	r3, r1, r3
 800d482:	4013      	ands	r3, r2
 800d484:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d032      	beq.n	800d4f2 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	461a      	mov	r2, r3
 800d492:	6939      	ldr	r1, [r7, #16]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff fed7 	bl	800d248 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d003      	beq.n	800d4aa <LL_GPIO_Init+0x58>
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d106      	bne.n	800d4b8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	6939      	ldr	r1, [r7, #16]
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff ff0f 	bl	800d2d6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	6939      	ldr	r1, [r7, #16]
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f7ff ff37 	bl	800d334 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d111      	bne.n	800d4f2 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	2bff      	cmp	r3, #255	; 0xff
 800d4d2:	d807      	bhi.n	800d4e4 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	6939      	ldr	r1, [r7, #16]
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7ff ff58 	bl	800d392 <LL_GPIO_SetAFPin_0_7>
 800d4e2:	e006      	b.n	800d4f2 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	6939      	ldr	r1, [r7, #16]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff ff7f 	bl	800d3f0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1b7      	bne.n	800d476 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d003      	beq.n	800d516 <LL_GPIO_Init+0xc4>
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	2b02      	cmp	r3, #2
 800d514:	d107      	bne.n	800d526 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	6819      	ldr	r1, [r3, #0]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	461a      	mov	r2, r3
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff fec0 	bl	800d2a6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3718      	adds	r7, #24
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b087      	sub	sp, #28
 800d534:	af02      	add	r7, sp, #8
 800d536:	4604      	mov	r4, r0
 800d538:	4608      	mov	r0, r1
 800d53a:	4611      	mov	r1, r2
 800d53c:	461a      	mov	r2, r3
 800d53e:	4623      	mov	r3, r4
 800d540:	80fb      	strh	r3, [r7, #6]
 800d542:	4603      	mov	r3, r0
 800d544:	80bb      	strh	r3, [r7, #4]
 800d546:	460b      	mov	r3, r1
 800d548:	807b      	strh	r3, [r7, #2]
 800d54a:	4613      	mov	r3, r2
 800d54c:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800d54e:	2300      	movs	r3, #0
 800d550:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800d552:	7bfa      	ldrb	r2, [r7, #15]
 800d554:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d558:	429a      	cmp	r2, r3
 800d55a:	d939      	bls.n	800d5d0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800d55c:	88ba      	ldrh	r2, [r7, #4]
 800d55e:	7bfb      	ldrb	r3, [r7, #15]
 800d560:	441a      	add	r2, r3
 800d562:	88b9      	ldrh	r1, [r7, #4]
 800d564:	883b      	ldrh	r3, [r7, #0]
 800d566:	4419      	add	r1, r3
 800d568:	7bfb      	ldrb	r3, [r7, #15]
 800d56a:	1acb      	subs	r3, r1, r3
 800d56c:	429a      	cmp	r2, r3
 800d56e:	f000 8089 	beq.w	800d684 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800d572:	88fa      	ldrh	r2, [r7, #6]
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	441a      	add	r2, r3
 800d578:	88f9      	ldrh	r1, [r7, #6]
 800d57a:	887b      	ldrh	r3, [r7, #2]
 800d57c:	4419      	add	r1, r3
 800d57e:	7bfb      	ldrb	r3, [r7, #15]
 800d580:	1acb      	subs	r3, r1, r3
 800d582:	429a      	cmp	r2, r3
 800d584:	d07e      	beq.n	800d684 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800d586:	7bfb      	ldrb	r3, [r7, #15]
 800d588:	b29a      	uxth	r2, r3
 800d58a:	88fb      	ldrh	r3, [r7, #6]
 800d58c:	4413      	add	r3, r2
 800d58e:	b298      	uxth	r0, r3
 800d590:	7bfb      	ldrb	r3, [r7, #15]
 800d592:	b29a      	uxth	r2, r3
 800d594:	88bb      	ldrh	r3, [r7, #4]
 800d596:	4413      	add	r3, r2
 800d598:	b299      	uxth	r1, r3
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	887a      	ldrh	r2, [r7, #2]
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	b29c      	uxth	r4, r3
 800d5ac:	7bfb      	ldrb	r3, [r7, #15]
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	005b      	lsls	r3, r3, #1
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	883a      	ldrh	r2, [r7, #0]
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	b29a      	uxth	r2, r3
 800d5be:	2304      	movs	r3, #4
 800d5c0:	9301      	str	r3, [sp, #4]
 800d5c2:	8c3b      	ldrh	r3, [r7, #32]
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	4622      	mov	r2, r4
 800d5ca:	f000 fcf7 	bl	800dfbc <ILI9341_Draw_Rectangle>
				goto finish;
 800d5ce:	e05a      	b.n	800d686 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	88fb      	ldrh	r3, [r7, #6]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	b298      	uxth	r0, r3
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	88bb      	ldrh	r3, [r7, #4]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800d5e4:	7bfb      	ldrb	r3, [r7, #15]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	887a      	ldrh	r2, [r7, #2]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d5f4:	f000 fa6c 	bl	800dad0 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d5f8:	7bfb      	ldrb	r3, [r7, #15]
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	88fb      	ldrh	r3, [r7, #6]
 800d5fe:	4413      	add	r3, r2
 800d600:	b298      	uxth	r0, r3
										(y + h) - b,
 800d602:	88ba      	ldrh	r2, [r7, #4]
 800d604:	883b      	ldrh	r3, [r7, #0]
 800d606:	4413      	add	r3, r2
 800d608:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d60a:	7bfb      	ldrb	r3, [r7, #15]
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	b299      	uxth	r1, r3
										(w - b)+1,
 800d612:	7bfb      	ldrb	r3, [r7, #15]
 800d614:	b29b      	uxth	r3, r3
 800d616:	887a      	ldrh	r2, [r7, #2]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d61c:	3301      	adds	r3, #1
 800d61e:	b29a      	uxth	r2, r3
 800d620:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d622:	f000 fa55 	bl	800dad0 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	b29a      	uxth	r2, r3
 800d62a:	88fb      	ldrh	r3, [r7, #6]
 800d62c:	4413      	add	r3, r2
 800d62e:	b298      	uxth	r0, r3
 800d630:	7bfb      	ldrb	r3, [r7, #15]
 800d632:	b29a      	uxth	r2, r3
 800d634:	88bb      	ldrh	r3, [r7, #4]
 800d636:	4413      	add	r3, r2
 800d638:	b299      	uxth	r1, r3
 800d63a:	7bfb      	ldrb	r3, [r7, #15]
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	005b      	lsls	r3, r3, #1
 800d640:	b29b      	uxth	r3, r3
 800d642:	883a      	ldrh	r2, [r7, #0]
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	b29a      	uxth	r2, r3
 800d648:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d64a:	f000 faa5 	bl	800db98 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800d64e:	88fa      	ldrh	r2, [r7, #6]
 800d650:	887b      	ldrh	r3, [r7, #2]
 800d652:	4413      	add	r3, r2
 800d654:	b29a      	uxth	r2, r3
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	b29b      	uxth	r3, r3
 800d65a:	1ad3      	subs	r3, r2, r3
 800d65c:	b298      	uxth	r0, r3
 800d65e:	7bfb      	ldrb	r3, [r7, #15]
 800d660:	b29a      	uxth	r2, r3
 800d662:	88bb      	ldrh	r3, [r7, #4]
 800d664:	4413      	add	r3, r2
 800d666:	b299      	uxth	r1, r3
 800d668:	7bfb      	ldrb	r3, [r7, #15]
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	005b      	lsls	r3, r3, #1
 800d66e:	b29b      	uxth	r3, r3
 800d670:	883a      	ldrh	r2, [r7, #0]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	b29a      	uxth	r2, r3
 800d676:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d678:	f000 fa8e 	bl	800db98 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
 800d67e:	3301      	adds	r3, #1
 800d680:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800d682:	e766      	b.n	800d552 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800d684:	bf00      	nop
	// done
	return;
 800d686:	bf00      	nop
}
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd90      	pop	{r4, r7, pc}
	...

0800d690 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d690:	b590      	push	{r4, r7, lr}
 800d692:	b089      	sub	sp, #36	; 0x24
 800d694:	af02      	add	r7, sp, #8
 800d696:	4604      	mov	r4, r0
 800d698:	4608      	mov	r0, r1
 800d69a:	4611      	mov	r1, r2
 800d69c:	461a      	mov	r2, r3
 800d69e:	4623      	mov	r3, r4
 800d6a0:	71fb      	strb	r3, [r7, #7]
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	80bb      	strh	r3, [r7, #4]
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	807b      	strh	r3, [r7, #2]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800d6ae:	79fb      	ldrb	r3, [r7, #7]
 800d6b0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
 800d6b4:	2b1f      	cmp	r3, #31
 800d6b6:	d802      	bhi.n	800d6be <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	71fb      	strb	r3, [r7, #7]
 800d6bc:	e002      	b.n	800d6c4 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800d6be:	7dfb      	ldrb	r3, [r7, #23]
 800d6c0:	3b20      	subs	r3, #32
 800d6c2:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	753b      	strb	r3, [r7, #20]
 800d6c8:	e012      	b.n	800d6f0 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800d6ca:	7dfa      	ldrb	r2, [r7, #23]
 800d6cc:	7d38      	ldrb	r0, [r7, #20]
 800d6ce:	7d39      	ldrb	r1, [r7, #20]
 800d6d0:	4c48      	ldr	r4, [pc, #288]	; (800d7f4 <ILI9341_Draw_Char+0x164>)
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	4413      	add	r3, r2
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	4423      	add	r3, r4
 800d6dc:	4403      	add	r3, r0
 800d6de:	781a      	ldrb	r2, [r3, #0]
 800d6e0:	f107 0318 	add.w	r3, r7, #24
 800d6e4:	440b      	add	r3, r1
 800d6e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d6ea:	7d3b      	ldrb	r3, [r7, #20]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	753b      	strb	r3, [r7, #20]
 800d6f0:	7d3b      	ldrb	r3, [r7, #20]
 800d6f2:	2b05      	cmp	r3, #5
 800d6f4:	d9e9      	bls.n	800d6ca <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	757b      	strb	r3, [r7, #21]
 800d6fa:	e074      	b.n	800d7e6 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	75bb      	strb	r3, [r7, #22]
 800d700:	e06b      	b.n	800d7da <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800d702:	7d7b      	ldrb	r3, [r7, #21]
 800d704:	f107 0218 	add.w	r2, r7, #24
 800d708:	4413      	add	r3, r2
 800d70a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d70e:	461a      	mov	r2, r3
 800d710:	7dbb      	ldrb	r3, [r7, #22]
 800d712:	fa42 f303 	asr.w	r3, r2, r3
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d02d      	beq.n	800d77a <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800d71e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d720:	2b01      	cmp	r3, #1
 800d722:	d10e      	bne.n	800d742 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800d724:	7d7b      	ldrb	r3, [r7, #21]
 800d726:	b29a      	uxth	r2, r3
 800d728:	88bb      	ldrh	r3, [r7, #4]
 800d72a:	4413      	add	r3, r2
 800d72c:	b298      	uxth	r0, r3
 800d72e:	7dbb      	ldrb	r3, [r7, #22]
 800d730:	b29a      	uxth	r2, r3
 800d732:	887b      	ldrh	r3, [r7, #2]
 800d734:	4413      	add	r3, r2
 800d736:	b29b      	uxth	r3, r3
 800d738:	883a      	ldrh	r2, [r7, #0]
 800d73a:	4619      	mov	r1, r3
 800d73c:	f000 fb06 	bl	800dd4c <ILI9341_Draw_Pixel>
 800d740:	e048      	b.n	800d7d4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800d742:	7d7b      	ldrb	r3, [r7, #21]
 800d744:	b29b      	uxth	r3, r3
 800d746:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d748:	fb12 f303 	smulbb	r3, r2, r3
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	88bb      	ldrh	r3, [r7, #4]
 800d750:	4413      	add	r3, r2
 800d752:	b298      	uxth	r0, r3
 800d754:	7dbb      	ldrb	r3, [r7, #22]
 800d756:	b29b      	uxth	r3, r3
 800d758:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d75a:	fb12 f303 	smulbb	r3, r2, r3
 800d75e:	b29a      	uxth	r2, r3
 800d760:	887b      	ldrh	r3, [r7, #2]
 800d762:	4413      	add	r3, r2
 800d764:	b299      	uxth	r1, r3
 800d766:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d768:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d76a:	2301      	movs	r3, #1
 800d76c:	9301      	str	r3, [sp, #4]
 800d76e:	883b      	ldrh	r3, [r7, #0]
 800d770:	9300      	str	r3, [sp, #0]
 800d772:	4623      	mov	r3, r4
 800d774:	f000 fc22 	bl	800dfbc <ILI9341_Draw_Rectangle>
 800d778:	e02c      	b.n	800d7d4 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800d77a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d10e      	bne.n	800d79e <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800d780:	7d7b      	ldrb	r3, [r7, #21]
 800d782:	b29a      	uxth	r2, r3
 800d784:	88bb      	ldrh	r3, [r7, #4]
 800d786:	4413      	add	r3, r2
 800d788:	b298      	uxth	r0, r3
 800d78a:	7dbb      	ldrb	r3, [r7, #22]
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	887b      	ldrh	r3, [r7, #2]
 800d790:	4413      	add	r3, r2
 800d792:	b29b      	uxth	r3, r3
 800d794:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d796:	4619      	mov	r1, r3
 800d798:	f000 fad8 	bl	800dd4c <ILI9341_Draw_Pixel>
 800d79c:	e01a      	b.n	800d7d4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800d79e:	7d7b      	ldrb	r3, [r7, #21]
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d7a4:	fb12 f303 	smulbb	r3, r2, r3
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	88bb      	ldrh	r3, [r7, #4]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	b298      	uxth	r0, r3
 800d7b0:	7dbb      	ldrb	r3, [r7, #22]
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d7b6:	fb12 f303 	smulbb	r3, r2, r3
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	887b      	ldrh	r3, [r7, #2]
 800d7be:	4413      	add	r3, r2
 800d7c0:	b299      	uxth	r1, r3
 800d7c2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d7c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	4623      	mov	r3, r4
 800d7d0:	f000 fbf4 	bl	800dfbc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800d7d4:	7dbb      	ldrb	r3, [r7, #22]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	75bb      	strb	r3, [r7, #22]
 800d7da:	7dbb      	ldrb	r3, [r7, #22]
 800d7dc:	2b07      	cmp	r3, #7
 800d7de:	d990      	bls.n	800d702 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800d7e0:	7d7b      	ldrb	r3, [r7, #21]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	757b      	strb	r3, [r7, #21]
 800d7e6:	7d7b      	ldrb	r3, [r7, #21]
 800d7e8:	2b05      	cmp	r3, #5
 800d7ea:	d987      	bls.n	800d6fc <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800d7ec:	bf00      	nop
 800d7ee:	371c      	adds	r7, #28
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd90      	pop	{r4, r7, pc}
 800d7f4:	080133e8 	.word	0x080133e8

0800d7f8 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d7f8:	b590      	push	{r4, r7, lr}
 800d7fa:	b087      	sub	sp, #28
 800d7fc:	af02      	add	r7, sp, #8
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	4608      	mov	r0, r1
 800d802:	4611      	mov	r1, r2
 800d804:	461a      	mov	r2, r3
 800d806:	4603      	mov	r3, r0
 800d808:	817b      	strh	r3, [r7, #10]
 800d80a:	460b      	mov	r3, r1
 800d80c:	813b      	strh	r3, [r7, #8]
 800d80e:	4613      	mov	r3, r2
 800d810:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800d812:	897b      	ldrh	r3, [r7, #10]
 800d814:	3b01      	subs	r3, #1
 800d816:	b298      	uxth	r0, r3
 800d818:	8c3b      	ldrh	r3, [r7, #32]
 800d81a:	00db      	lsls	r3, r3, #3
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d820:	8939      	ldrh	r1, [r7, #8]
 800d822:	f000 f9b9 	bl	800db98 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800d826:	897b      	ldrh	r3, [r7, #10]
 800d828:	3b02      	subs	r3, #2
 800d82a:	b298      	uxth	r0, r3
 800d82c:	8c3b      	ldrh	r3, [r7, #32]
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	b29a      	uxth	r2, r3
 800d832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d834:	8939      	ldrh	r1, [r7, #8]
 800d836:	f000 f9af 	bl	800db98 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800d83a:	e016      	b.n	800d86a <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	1c5a      	adds	r2, r3, #1
 800d840:	60fa      	str	r2, [r7, #12]
 800d842:	7818      	ldrb	r0, [r3, #0]
 800d844:	88fc      	ldrh	r4, [r7, #6]
 800d846:	893a      	ldrh	r2, [r7, #8]
 800d848:	8979      	ldrh	r1, [r7, #10]
 800d84a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d84c:	9301      	str	r3, [sp, #4]
 800d84e:	8c3b      	ldrh	r3, [r7, #32]
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	4623      	mov	r3, r4
 800d854:	f7ff ff1c 	bl	800d690 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800d858:	8c3b      	ldrh	r3, [r7, #32]
 800d85a:	461a      	mov	r2, r3
 800d85c:	0052      	lsls	r2, r2, #1
 800d85e:	4413      	add	r3, r2
 800d860:	005b      	lsls	r3, r3, #1
 800d862:	b29a      	uxth	r2, r3
 800d864:	897b      	ldrh	r3, [r7, #10]
 800d866:	4413      	add	r3, r2
 800d868:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1e4      	bne.n	800d83c <ILI9341_Draw_Text+0x44>
    }


}
 800d872:	bf00      	nop
 800d874:	3714      	adds	r7, #20
 800d876:	46bd      	mov	sp, r7
 800d878:	bd90      	pop	{r4, r7, pc}

0800d87a <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800d87e:	f000 fc81 	bl	800e184 <_LCD_Enable>
	ILI9341_SPI_Init();
 800d882:	f000 f907 	bl	800da94 <ILI9341_SPI_Init>
	_LCD_Reset();
 800d886:	f000 fc8d 	bl	800e1a4 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800d88a:	2001      	movs	r0, #1
 800d88c:	f000 fd58 	bl	800e340 <_LCD_SendCommand>
	HAL_Delay(2000);
 800d890:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d894:	f7fa fe0e 	bl	80084b4 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800d898:	20cb      	movs	r0, #203	; 0xcb
 800d89a:	f000 fd51 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800d89e:	2039      	movs	r0, #57	; 0x39
 800d8a0:	f000 fd80 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800d8a4:	202c      	movs	r0, #44	; 0x2c
 800d8a6:	f000 fd7d 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	f000 fd7a 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x34);
 800d8b0:	2034      	movs	r0, #52	; 0x34
 800d8b2:	f000 fd77 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x02);
 800d8b6:	2002      	movs	r0, #2
 800d8b8:	f000 fd74 	bl	800e3a4 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800d8bc:	20cf      	movs	r0, #207	; 0xcf
 800d8be:	f000 fd3f 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	f000 fd6e 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d8c8:	20c1      	movs	r0, #193	; 0xc1
 800d8ca:	f000 fd6b 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x30);
 800d8ce:	2030      	movs	r0, #48	; 0x30
 800d8d0:	f000 fd68 	bl	800e3a4 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800d8d4:	20e8      	movs	r0, #232	; 0xe8
 800d8d6:	f000 fd33 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800d8da:	2085      	movs	r0, #133	; 0x85
 800d8dc:	f000 fd62 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	f000 fd5f 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x78);
 800d8e6:	2078      	movs	r0, #120	; 0x78
 800d8e8:	f000 fd5c 	bl	800e3a4 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800d8ec:	20ea      	movs	r0, #234	; 0xea
 800d8ee:	f000 fd27 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	f000 fd56 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d8f8:	2000      	movs	r0, #0
 800d8fa:	f000 fd53 	bl	800e3a4 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800d8fe:	20ed      	movs	r0, #237	; 0xed
 800d900:	f000 fd1e 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800d904:	2064      	movs	r0, #100	; 0x64
 800d906:	f000 fd4d 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d90a:	2003      	movs	r0, #3
 800d90c:	f000 fd4a 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x12);
 800d910:	2012      	movs	r0, #18
 800d912:	f000 fd47 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x81);
 800d916:	2081      	movs	r0, #129	; 0x81
 800d918:	f000 fd44 	bl	800e3a4 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800d91c:	20f7      	movs	r0, #247	; 0xf7
 800d91e:	f000 fd0f 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800d922:	2020      	movs	r0, #32
 800d924:	f000 fd3e 	bl	800e3a4 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800d928:	20c0      	movs	r0, #192	; 0xc0
 800d92a:	f000 fd09 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800d92e:	2023      	movs	r0, #35	; 0x23
 800d930:	f000 fd38 	bl	800e3a4 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800d934:	20c1      	movs	r0, #193	; 0xc1
 800d936:	f000 fd03 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800d93a:	2010      	movs	r0, #16
 800d93c:	f000 fd32 	bl	800e3a4 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800d940:	20c5      	movs	r0, #197	; 0xc5
 800d942:	f000 fcfd 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800d946:	203e      	movs	r0, #62	; 0x3e
 800d948:	f000 fd2c 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x28);
 800d94c:	2028      	movs	r0, #40	; 0x28
 800d94e:	f000 fd29 	bl	800e3a4 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800d952:	20c7      	movs	r0, #199	; 0xc7
 800d954:	f000 fcf4 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800d958:	2086      	movs	r0, #134	; 0x86
 800d95a:	f000 fd23 	bl	800e3a4 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800d95e:	2036      	movs	r0, #54	; 0x36
 800d960:	f000 fcee 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800d964:	2048      	movs	r0, #72	; 0x48
 800d966:	f000 fd1d 	bl	800e3a4 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800d96a:	203a      	movs	r0, #58	; 0x3a
 800d96c:	f000 fce8 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800d970:	2055      	movs	r0, #85	; 0x55
 800d972:	f000 fd17 	bl	800e3a4 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800d976:	20b1      	movs	r0, #177	; 0xb1
 800d978:	f000 fce2 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d97c:	2000      	movs	r0, #0
 800d97e:	f000 fd11 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x18);
 800d982:	2018      	movs	r0, #24
 800d984:	f000 fd0e 	bl	800e3a4 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800d988:	20b6      	movs	r0, #182	; 0xb6
 800d98a:	f000 fcd9 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800d98e:	2008      	movs	r0, #8
 800d990:	f000 fd08 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x82);
 800d994:	2082      	movs	r0, #130	; 0x82
 800d996:	f000 fd05 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x27);
 800d99a:	2027      	movs	r0, #39	; 0x27
 800d99c:	f000 fd02 	bl	800e3a4 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800d9a0:	20f2      	movs	r0, #242	; 0xf2
 800d9a2:	f000 fccd 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	f000 fcfc 	bl	800e3a4 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800d9ac:	2026      	movs	r0, #38	; 0x26
 800d9ae:	f000 fcc7 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800d9b2:	2001      	movs	r0, #1
 800d9b4:	f000 fcf6 	bl	800e3a4 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800d9b8:	20e0      	movs	r0, #224	; 0xe0
 800d9ba:	f000 fcc1 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800d9be:	200f      	movs	r0, #15
 800d9c0:	f000 fcf0 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d9c4:	2031      	movs	r0, #49	; 0x31
 800d9c6:	f000 fced 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800d9ca:	202b      	movs	r0, #43	; 0x2b
 800d9cc:	f000 fcea 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d9d0:	200c      	movs	r0, #12
 800d9d2:	f000 fce7 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d9d6:	200e      	movs	r0, #14
 800d9d8:	f000 fce4 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x08);
 800d9dc:	2008      	movs	r0, #8
 800d9de:	f000 fce1 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800d9e2:	204e      	movs	r0, #78	; 0x4e
 800d9e4:	f000 fcde 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800d9e8:	20f1      	movs	r0, #241	; 0xf1
 800d9ea:	f000 fcdb 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x37);
 800d9ee:	2037      	movs	r0, #55	; 0x37
 800d9f0:	f000 fcd8 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x07);
 800d9f4:	2007      	movs	r0, #7
 800d9f6:	f000 fcd5 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x10);
 800d9fa:	2010      	movs	r0, #16
 800d9fc:	f000 fcd2 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800da00:	2003      	movs	r0, #3
 800da02:	f000 fccf 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800da06:	200e      	movs	r0, #14
 800da08:	f000 fccc 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x09);
 800da0c:	2009      	movs	r0, #9
 800da0e:	f000 fcc9 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800da12:	2000      	movs	r0, #0
 800da14:	f000 fcc6 	bl	800e3a4 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800da18:	20e1      	movs	r0, #225	; 0xe1
 800da1a:	f000 fc91 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800da1e:	2000      	movs	r0, #0
 800da20:	f000 fcc0 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800da24:	200e      	movs	r0, #14
 800da26:	f000 fcbd 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x14);
 800da2a:	2014      	movs	r0, #20
 800da2c:	f000 fcba 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800da30:	2003      	movs	r0, #3
 800da32:	f000 fcb7 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x11);
 800da36:	2011      	movs	r0, #17
 800da38:	f000 fcb4 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x07);
 800da3c:	2007      	movs	r0, #7
 800da3e:	f000 fcb1 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800da42:	2031      	movs	r0, #49	; 0x31
 800da44:	f000 fcae 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800da48:	20c1      	movs	r0, #193	; 0xc1
 800da4a:	f000 fcab 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x48);
 800da4e:	2048      	movs	r0, #72	; 0x48
 800da50:	f000 fca8 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x08);
 800da54:	2008      	movs	r0, #8
 800da56:	f000 fca5 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800da5a:	200f      	movs	r0, #15
 800da5c:	f000 fca2 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800da60:	200c      	movs	r0, #12
 800da62:	f000 fc9f 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800da66:	2031      	movs	r0, #49	; 0x31
 800da68:	f000 fc9c 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x36);
 800da6c:	2036      	movs	r0, #54	; 0x36
 800da6e:	f000 fc99 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800da72:	200f      	movs	r0, #15
 800da74:	f000 fc96 	bl	800e3a4 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800da78:	2011      	movs	r0, #17
 800da7a:	f000 fc61 	bl	800e340 <_LCD_SendCommand>
	HAL_Delay(240);
 800da7e:	20f0      	movs	r0, #240	; 0xf0
 800da80:	f7fa fd18 	bl	80084b4 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800da84:	2029      	movs	r0, #41	; 0x29
 800da86:	f000 fc5b 	bl	800e340 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800da8a:	2000      	movs	r0, #0
 800da8c:	f000 fb2c 	bl	800e0e8 <ILI9341_Set_Rotation>
}
 800da90:	bf00      	nop
 800da92:	bd80      	pop	{r7, pc}

0800da94 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800da94:	b480      	push	{r7}
 800da96:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da98:	4b0b      	ldr	r3, [pc, #44]	; (800dac8 <ILI9341_SPI_Init+0x34>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daa0:	2b40      	cmp	r3, #64	; 0x40
 800daa2:	d005      	beq.n	800dab0 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800daa4:	4b08      	ldr	r3, [pc, #32]	; (800dac8 <ILI9341_SPI_Init+0x34>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a07      	ldr	r2, [pc, #28]	; (800dac8 <ILI9341_SPI_Init+0x34>)
 800daaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daae:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dab0:	4b06      	ldr	r3, [pc, #24]	; (800dacc <ILI9341_SPI_Init+0x38>)
 800dab2:	695b      	ldr	r3, [r3, #20]
 800dab4:	4a05      	ldr	r2, [pc, #20]	; (800dacc <ILI9341_SPI_Init+0x38>)
 800dab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daba:	6153      	str	r3, [r2, #20]
}
 800dabc:	bf00      	nop
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	40003c00 	.word	0x40003c00
 800dacc:	48000400 	.word	0x48000400

0800dad0 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800dad0:	b590      	push	{r4, r7, lr}
 800dad2:	b087      	sub	sp, #28
 800dad4:	af02      	add	r7, sp, #8
 800dad6:	4604      	mov	r4, r0
 800dad8:	4608      	mov	r0, r1
 800dada:	4611      	mov	r1, r2
 800dadc:	461a      	mov	r2, r3
 800dade:	4623      	mov	r3, r4
 800dae0:	80fb      	strh	r3, [r7, #6]
 800dae2:	4603      	mov	r3, r0
 800dae4:	80bb      	strh	r3, [r7, #4]
 800dae6:	460b      	mov	r3, r1
 800dae8:	807b      	strh	r3, [r7, #2]
 800daea:	4613      	mov	r3, r2
 800daec:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800daee:	4b28      	ldr	r3, [pc, #160]	; (800db90 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	88fa      	ldrh	r2, [r7, #6]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d246      	bcs.n	800db88 <ILI9341_Draw_Horizontal_Line+0xb8>
 800dafa:	4b26      	ldr	r3, [pc, #152]	; (800db94 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800dafc:	881b      	ldrh	r3, [r3, #0]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	88ba      	ldrh	r2, [r7, #4]
 800db02:	429a      	cmp	r2, r3
 800db04:	d240      	bcs.n	800db88 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800db06:	88fa      	ldrh	r2, [r7, #6]
 800db08:	887b      	ldrh	r3, [r7, #2]
 800db0a:	4413      	add	r3, r2
 800db0c:	3b01      	subs	r3, #1
 800db0e:	4a20      	ldr	r2, [pc, #128]	; (800db90 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800db10:	8812      	ldrh	r2, [r2, #0]
 800db12:	b292      	uxth	r2, r2
 800db14:	4293      	cmp	r3, r2
 800db16:	db05      	blt.n	800db24 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800db18:	4b1d      	ldr	r3, [pc, #116]	; (800db90 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800db1a:	881b      	ldrh	r3, [r3, #0]
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	88fb      	ldrh	r3, [r7, #6]
 800db20:	1ad3      	subs	r3, r2, r3
 800db22:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800db24:	88fa      	ldrh	r2, [r7, #6]
 800db26:	887b      	ldrh	r3, [r7, #2]
 800db28:	4413      	add	r3, r2
 800db2a:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800db2c:	3b01      	subs	r3, #1
 800db2e:	b29a      	uxth	r2, r3
 800db30:	88bb      	ldrh	r3, [r7, #4]
 800db32:	88b9      	ldrh	r1, [r7, #4]
 800db34:	88f8      	ldrh	r0, [r7, #6]
 800db36:	f000 f893 	bl	800dc60 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800db3e:	887b      	ldrh	r3, [r7, #2]
 800db40:	f003 0301 	and.w	r3, r3, #1
 800db44:	2b00      	cmp	r3, #0
 800db46:	d009      	beq.n	800db5c <ILI9341_Draw_Horizontal_Line+0x8c>
 800db48:	887b      	ldrh	r3, [r7, #2]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d906      	bls.n	800db5c <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800db4e:	2301      	movs	r3, #1
 800db50:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800db52:	887b      	ldrh	r3, [r7, #2]
 800db54:	085b      	lsrs	r3, r3, #1
 800db56:	b29b      	uxth	r3, r3
 800db58:	005b      	lsls	r3, r3, #1
 800db5a:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800db5c:	887c      	ldrh	r4, [r7, #2]
 800db5e:	883a      	ldrh	r2, [r7, #0]
 800db60:	88b9      	ldrh	r1, [r7, #4]
 800db62:	88f8      	ldrh	r0, [r7, #6]
 800db64:	2303      	movs	r3, #3
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	4623      	mov	r3, r4
 800db6a:	f000 fb39 	bl	800e1e0 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00a      	beq.n	800db8a <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800db74:	88fa      	ldrh	r2, [r7, #6]
 800db76:	887b      	ldrh	r3, [r7, #2]
 800db78:	4413      	add	r3, r2
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	883a      	ldrh	r2, [r7, #0]
 800db7e:	88b9      	ldrh	r1, [r7, #4]
 800db80:	4618      	mov	r0, r3
 800db82:	f000 f8e3 	bl	800dd4c <ILI9341_Draw_Pixel>
 800db86:	e000      	b.n	800db8a <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800db88:	bf00      	nop
							(ypos),
							colour);
	}


}
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd90      	pop	{r4, r7, pc}
 800db90:	20000cae 	.word	0x20000cae
 800db94:	20000cac 	.word	0x20000cac

0800db98 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800db98:	b590      	push	{r4, r7, lr}
 800db9a:	b087      	sub	sp, #28
 800db9c:	af02      	add	r7, sp, #8
 800db9e:	4604      	mov	r4, r0
 800dba0:	4608      	mov	r0, r1
 800dba2:	4611      	mov	r1, r2
 800dba4:	461a      	mov	r2, r3
 800dba6:	4623      	mov	r3, r4
 800dba8:	80fb      	strh	r3, [r7, #6]
 800dbaa:	4603      	mov	r3, r0
 800dbac:	80bb      	strh	r3, [r7, #4]
 800dbae:	460b      	mov	r3, r1
 800dbb0:	807b      	strh	r3, [r7, #2]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800dbb6:	4b28      	ldr	r3, [pc, #160]	; (800dc58 <ILI9341_Draw_Vertical_Line+0xc0>)
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	88fa      	ldrh	r2, [r7, #6]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d246      	bcs.n	800dc50 <ILI9341_Draw_Vertical_Line+0xb8>
 800dbc2:	4b26      	ldr	r3, [pc, #152]	; (800dc5c <ILI9341_Draw_Vertical_Line+0xc4>)
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	88ba      	ldrh	r2, [r7, #4]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d240      	bcs.n	800dc50 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800dbce:	88ba      	ldrh	r2, [r7, #4]
 800dbd0:	887b      	ldrh	r3, [r7, #2]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	3b01      	subs	r3, #1
 800dbd6:	4a21      	ldr	r2, [pc, #132]	; (800dc5c <ILI9341_Draw_Vertical_Line+0xc4>)
 800dbd8:	8812      	ldrh	r2, [r2, #0]
 800dbda:	b292      	uxth	r2, r2
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	db05      	blt.n	800dbec <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800dbe0:	4b1e      	ldr	r3, [pc, #120]	; (800dc5c <ILI9341_Draw_Vertical_Line+0xc4>)
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	88bb      	ldrh	r3, [r7, #4]
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800dbec:	88ba      	ldrh	r2, [r7, #4]
 800dbee:	887b      	ldrh	r3, [r7, #2]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	88fa      	ldrh	r2, [r7, #6]
 800dbfa:	88b9      	ldrh	r1, [r7, #4]
 800dbfc:	88f8      	ldrh	r0, [r7, #6]
 800dbfe:	f000 f82f 	bl	800dc60 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800dc06:	887b      	ldrh	r3, [r7, #2]
 800dc08:	f003 0301 	and.w	r3, r3, #1
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d009      	beq.n	800dc24 <ILI9341_Draw_Vertical_Line+0x8c>
 800dc10:	887b      	ldrh	r3, [r7, #2]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d906      	bls.n	800dc24 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800dc16:	2301      	movs	r3, #1
 800dc18:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800dc1a:	887b      	ldrh	r3, [r7, #2]
 800dc1c:	085b      	lsrs	r3, r3, #1
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	005b      	lsls	r3, r3, #1
 800dc22:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d008      	beq.n	800dc3c <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800dc2a:	88ba      	ldrh	r2, [r7, #4]
 800dc2c:	887b      	ldrh	r3, [r7, #2]
 800dc2e:	4413      	add	r3, r2
 800dc30:	b299      	uxth	r1, r3
 800dc32:	883a      	ldrh	r2, [r7, #0]
 800dc34:	88fb      	ldrh	r3, [r7, #6]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 f888 	bl	800dd4c <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800dc3c:	887c      	ldrh	r4, [r7, #2]
 800dc3e:	883a      	ldrh	r2, [r7, #0]
 800dc40:	88b9      	ldrh	r1, [r7, #4]
 800dc42:	88f8      	ldrh	r0, [r7, #6]
 800dc44:	2303      	movs	r3, #3
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	4623      	mov	r3, r4
 800dc4a:	f000 fac9 	bl	800e1e0 <_LCD_Write_Frame>
 800dc4e:	e000      	b.n	800dc52 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800dc50:	bf00      	nop
}
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd90      	pop	{r4, r7, pc}
 800dc58:	20000cae 	.word	0x20000cae
 800dc5c:	20000cac 	.word	0x20000cac

0800dc60 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800dc60:	b590      	push	{r4, r7, lr}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	4604      	mov	r4, r0
 800dc68:	4608      	mov	r0, r1
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	4623      	mov	r3, r4
 800dc70:	80fb      	strh	r3, [r7, #6]
 800dc72:	4603      	mov	r3, r0
 800dc74:	80bb      	strh	r3, [r7, #4]
 800dc76:	460b      	mov	r3, r1
 800dc78:	807b      	strh	r3, [r7, #2]
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800dc7e:	202a      	movs	r0, #42	; 0x2a
 800dc80:	f000 fb5e 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800dc84:	88fb      	ldrh	r3, [r7, #6]
 800dc86:	0a1b      	lsrs	r3, r3, #8
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f000 fb89 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(sc);
 800dc92:	88fb      	ldrh	r3, [r7, #6]
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 fb84 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800dc9c:	887b      	ldrh	r3, [r7, #2]
 800dc9e:	0a1b      	lsrs	r3, r3, #8
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	4618      	mov	r0, r3
 800dca6:	f000 fb7d 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(ec);
 800dcaa:	887b      	ldrh	r3, [r7, #2]
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f000 fb78 	bl	800e3a4 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800dcb4:	202b      	movs	r0, #43	; 0x2b
 800dcb6:	f000 fb43 	bl	800e340 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800dcba:	88bb      	ldrh	r3, [r7, #4]
 800dcbc:	0a1b      	lsrs	r3, r3, #8
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 fb6e 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(sp);
 800dcc8:	88bb      	ldrh	r3, [r7, #4]
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	4618      	mov	r0, r3
 800dcce:	f000 fb69 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800dcd2:	883b      	ldrh	r3, [r7, #0]
 800dcd4:	0a1b      	lsrs	r3, r3, #8
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f000 fb62 	bl	800e3a4 <_LCD_SendData>
	_LCD_SendData(ep);
 800dce0:	883b      	ldrh	r3, [r7, #0]
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	4618      	mov	r0, r3
 800dce6:	f000 fb5d 	bl	800e3a4 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800dcea:	202c      	movs	r0, #44	; 0x2c
 800dcec:	f000 fb28 	bl	800e340 <_LCD_SendCommand>
}
 800dcf0:	bf00      	nop
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd90      	pop	{r4, r7, pc}

0800dcf8 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af02      	add	r7, sp, #8
 800dcfe:	4603      	mov	r3, r0
 800dd00:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800dd02:	4b10      	ldr	r3, [pc, #64]	; (800dd44 <ILI9341_Fill_Screen+0x4c>)
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	4b0f      	ldr	r3, [pc, #60]	; (800dd48 <ILI9341_Fill_Screen+0x50>)
 800dd0a:	881b      	ldrh	r3, [r3, #0]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	2100      	movs	r1, #0
 800dd10:	2000      	movs	r0, #0
 800dd12:	f7ff ffa5 	bl	800dc60 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800dd16:	4b0b      	ldr	r3, [pc, #44]	; (800dd44 <ILI9341_Fill_Screen+0x4c>)
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	4b0a      	ldr	r3, [pc, #40]	; (800dd48 <ILI9341_Fill_Screen+0x50>)
 800dd20:	881b      	ldrh	r3, [r3, #0]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	fb03 f302 	mul.w	r3, r3, r2
 800dd28:	4619      	mov	r1, r3
 800dd2a:	88fa      	ldrh	r2, [r7, #6]
 800dd2c:	2304      	movs	r3, #4
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	460b      	mov	r3, r1
 800dd32:	2100      	movs	r1, #0
 800dd34:	2000      	movs	r0, #0
 800dd36:	f000 fa53 	bl	800e1e0 <_LCD_Write_Frame>
}
 800dd3a:	bf00      	nop
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	20000cae 	.word	0x20000cae
 800dd48:	20000cac 	.word	0x20000cac

0800dd4c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08c      	sub	sp, #48	; 0x30
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	4603      	mov	r3, r0
 800dd54:	80fb      	strh	r3, [r7, #6]
 800dd56:	460b      	mov	r3, r1
 800dd58:	80bb      	strh	r3, [r7, #4]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800dd5e:	4b94      	ldr	r3, [pc, #592]	; (800dfb0 <ILI9341_Draw_Pixel+0x264>)
 800dd60:	881b      	ldrh	r3, [r3, #0]
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	88fa      	ldrh	r2, [r7, #6]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	f080 811e 	bcs.w	800dfa8 <ILI9341_Draw_Pixel+0x25c>
 800dd6c:	4b91      	ldr	r3, [pc, #580]	; (800dfb4 <ILI9341_Draw_Pixel+0x268>)
 800dd6e:	881b      	ldrh	r3, [r3, #0]
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	88ba      	ldrh	r2, [r7, #4]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	f080 8117 	bcs.w	800dfa8 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800dd7a:	4b8f      	ldr	r3, [pc, #572]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	4a8e      	ldr	r2, [pc, #568]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800dd80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd84:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dd86:	4b8c      	ldr	r3, [pc, #560]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	4a8b      	ldr	r2, [pc, #556]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800dd8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd90:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800dd92:	2200      	movs	r2, #0
 800dd94:	2100      	movs	r1, #0
 800dd96:	202a      	movs	r0, #42	; 0x2a
 800dd98:	f000 fb36 	bl	800e408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dda0:	e008      	b.n	800ddb4 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dda2:	4b85      	ldr	r3, [pc, #532]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800dda4:	695b      	ldr	r3, [r3, #20]
 800dda6:	4a84      	ldr	r2, [pc, #528]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800dda8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddac:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800ddae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	ddf3      	ble.n	800dda2 <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ddba:	4b7f      	ldr	r3, [pc, #508]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	4a7e      	ldr	r2, [pc, #504]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800ddc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddc4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ddc6:	4b7c      	ldr	r3, [pc, #496]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	4a7b      	ldr	r2, [pc, #492]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800ddcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddd0:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ddd2:	4b79      	ldr	r3, [pc, #484]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800ddd4:	695b      	ldr	r3, [r3, #20]
 800ddd6:	4a78      	ldr	r2, [pc, #480]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800ddd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dddc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800ddde:	88fb      	ldrh	r3, [r7, #6]
 800dde0:	0a1b      	lsrs	r3, r3, #8
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	753b      	strb	r3, [r7, #20]
 800dde8:	88fb      	ldrh	r3, [r7, #6]
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800ddee:	88fb      	ldrh	r3, [r7, #6]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800ddf8:	88fb      	ldrh	r3, [r7, #6]
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800de00:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800de02:	f107 0014 	add.w	r0, r7, #20
 800de06:	230a      	movs	r3, #10
 800de08:	2200      	movs	r2, #0
 800de0a:	2104      	movs	r1, #4
 800de0c:	f000 fb2e 	bl	800e46c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800de10:	2300      	movs	r3, #0
 800de12:	62bb      	str	r3, [r7, #40]	; 0x28
 800de14:	e008      	b.n	800de28 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de16:	4b68      	ldr	r3, [pc, #416]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de18:	695b      	ldr	r3, [r3, #20]
 800de1a:	4a67      	ldr	r2, [pc, #412]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de20:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800de22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de24:	3301      	adds	r3, #1
 800de26:	62bb      	str	r3, [r7, #40]	; 0x28
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	ddf3      	ble.n	800de16 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800de2e:	4b62      	ldr	r3, [pc, #392]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	4a61      	ldr	r2, [pc, #388]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de38:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800de3a:	4b5f      	ldr	r3, [pc, #380]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de3c:	695b      	ldr	r3, [r3, #20]
 800de3e:	4a5e      	ldr	r2, [pc, #376]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de44:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de46:	4b5c      	ldr	r3, [pc, #368]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	4a5b      	ldr	r2, [pc, #364]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de50:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800de52:	2200      	movs	r2, #0
 800de54:	2100      	movs	r1, #0
 800de56:	202b      	movs	r0, #43	; 0x2b
 800de58:	f000 fad6 	bl	800e408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800de5c:	2300      	movs	r3, #0
 800de5e:	627b      	str	r3, [r7, #36]	; 0x24
 800de60:	e008      	b.n	800de74 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de62:	4b55      	ldr	r3, [pc, #340]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de64:	695b      	ldr	r3, [r3, #20]
 800de66:	4a54      	ldr	r2, [pc, #336]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de6c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	3301      	adds	r3, #1
 800de72:	627b      	str	r3, [r7, #36]	; 0x24
 800de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de76:	2b02      	cmp	r3, #2
 800de78:	ddf3      	ble.n	800de62 <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800de7a:	4b4f      	ldr	r3, [pc, #316]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de7c:	695b      	ldr	r3, [r3, #20]
 800de7e:	4a4e      	ldr	r2, [pc, #312]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de84:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800de86:	4b4c      	ldr	r3, [pc, #304]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	4a4b      	ldr	r2, [pc, #300]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de90:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de92:	4b49      	ldr	r3, [pc, #292]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de94:	695b      	ldr	r3, [r3, #20]
 800de96:	4a48      	ldr	r2, [pc, #288]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800de98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de9c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800de9e:	88bb      	ldrh	r3, [r7, #4]
 800dea0:	0a1b      	lsrs	r3, r3, #8
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	743b      	strb	r3, [r7, #16]
 800dea8:	88bb      	ldrh	r3, [r7, #4]
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800deae:	88bb      	ldrh	r3, [r7, #4]
 800deb0:	3301      	adds	r3, #1
 800deb2:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800deb8:	88bb      	ldrh	r3, [r7, #4]
 800deba:	b2db      	uxtb	r3, r3
 800debc:	3301      	adds	r3, #1
 800debe:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800dec0:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800dec2:	f107 0010 	add.w	r0, r7, #16
 800dec6:	230a      	movs	r3, #10
 800dec8:	2200      	movs	r2, #0
 800deca:	2104      	movs	r1, #4
 800decc:	f000 face 	bl	800e46c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800ded0:	2300      	movs	r3, #0
 800ded2:	623b      	str	r3, [r7, #32]
 800ded4:	e008      	b.n	800dee8 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ded6:	4b38      	ldr	r3, [pc, #224]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800ded8:	695b      	ldr	r3, [r3, #20]
 800deda:	4a37      	ldr	r2, [pc, #220]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800dedc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dee0:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dee2:	6a3b      	ldr	r3, [r7, #32]
 800dee4:	3301      	adds	r3, #1
 800dee6:	623b      	str	r3, [r7, #32]
 800dee8:	6a3b      	ldr	r3, [r7, #32]
 800deea:	2b02      	cmp	r3, #2
 800deec:	ddf3      	ble.n	800ded6 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800deee:	4b32      	ldr	r3, [pc, #200]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800def0:	695b      	ldr	r3, [r3, #20]
 800def2:	4a31      	ldr	r2, [pc, #196]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800def4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800def8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800defa:	4b2f      	ldr	r3, [pc, #188]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	4a2e      	ldr	r2, [pc, #184]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df04:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df06:	4b2c      	ldr	r3, [pc, #176]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df08:	695b      	ldr	r3, [r3, #20]
 800df0a:	4a2b      	ldr	r2, [pc, #172]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df10:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800df12:	2200      	movs	r2, #0
 800df14:	2100      	movs	r1, #0
 800df16:	202c      	movs	r0, #44	; 0x2c
 800df18:	f000 fa76 	bl	800e408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df1c:	2300      	movs	r3, #0
 800df1e:	61fb      	str	r3, [r7, #28]
 800df20:	e008      	b.n	800df34 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df22:	4b25      	ldr	r3, [pc, #148]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df24:	695b      	ldr	r3, [r3, #20]
 800df26:	4a24      	ldr	r2, [pc, #144]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df2c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	3301      	adds	r3, #1
 800df32:	61fb      	str	r3, [r7, #28]
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	2b02      	cmp	r3, #2
 800df38:	ddf3      	ble.n	800df22 <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800df3a:	4b1f      	ldr	r3, [pc, #124]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df3c:	695b      	ldr	r3, [r3, #20]
 800df3e:	4a1e      	ldr	r2, [pc, #120]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df44:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800df46:	4b1c      	ldr	r3, [pc, #112]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df48:	695b      	ldr	r3, [r3, #20]
 800df4a:	4a1b      	ldr	r2, [pc, #108]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df50:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df52:	4b19      	ldr	r3, [pc, #100]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	4a18      	ldr	r2, [pc, #96]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df5c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800df5e:	887b      	ldrh	r3, [r7, #2]
 800df60:	0a1b      	lsrs	r3, r3, #8
 800df62:	b29b      	uxth	r3, r3
 800df64:	b2db      	uxtb	r3, r3
 800df66:	733b      	strb	r3, [r7, #12]
 800df68:	887b      	ldrh	r3, [r7, #2]
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800df6e:	f107 000c 	add.w	r0, r7, #12
 800df72:	230a      	movs	r3, #10
 800df74:	2200      	movs	r2, #0
 800df76:	2104      	movs	r1, #4
 800df78:	f000 fa78 	bl	800e46c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df7c:	2300      	movs	r3, #0
 800df7e:	61bb      	str	r3, [r7, #24]
 800df80:	e008      	b.n	800df94 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df82:	4b0d      	ldr	r3, [pc, #52]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df84:	695b      	ldr	r3, [r3, #20]
 800df86:	4a0c      	ldr	r2, [pc, #48]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df8c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	3301      	adds	r3, #1
 800df92:	61bb      	str	r3, [r7, #24]
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	2b02      	cmp	r3, #2
 800df98:	ddf3      	ble.n	800df82 <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800df9a:	4b07      	ldr	r3, [pc, #28]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800df9c:	695b      	ldr	r3, [r3, #20]
 800df9e:	4a06      	ldr	r2, [pc, #24]	; (800dfb8 <ILI9341_Draw_Pixel+0x26c>)
 800dfa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfa4:	6153      	str	r3, [r2, #20]
 800dfa6:	e000      	b.n	800dfaa <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800dfa8:	bf00      	nop


}
 800dfaa:	3730      	adds	r7, #48	; 0x30
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	20000cae 	.word	0x20000cae
 800dfb4:	20000cac 	.word	0x20000cac
 800dfb8:	48000400 	.word	0x48000400

0800dfbc <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800dfbc:	b590      	push	{r4, r7, lr}
 800dfbe:	b087      	sub	sp, #28
 800dfc0:	af02      	add	r7, sp, #8
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	4608      	mov	r0, r1
 800dfc6:	4611      	mov	r1, r2
 800dfc8:	461a      	mov	r2, r3
 800dfca:	4623      	mov	r3, r4
 800dfcc:	80fb      	strh	r3, [r7, #6]
 800dfce:	4603      	mov	r3, r0
 800dfd0:	80bb      	strh	r3, [r7, #4]
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	807b      	strh	r3, [r7, #2]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dfda:	4b41      	ldr	r3, [pc, #260]	; (800e0e0 <ILI9341_Draw_Rectangle+0x124>)
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	88fa      	ldrh	r2, [r7, #6]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d278      	bcs.n	800e0d8 <ILI9341_Draw_Rectangle+0x11c>
 800dfe6:	4b3f      	ldr	r3, [pc, #252]	; (800e0e4 <ILI9341_Draw_Rectangle+0x128>)
 800dfe8:	881b      	ldrh	r3, [r3, #0]
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	88ba      	ldrh	r2, [r7, #4]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d272      	bcs.n	800e0d8 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800dff2:	88fa      	ldrh	r2, [r7, #6]
 800dff4:	887b      	ldrh	r3, [r7, #2]
 800dff6:	4413      	add	r3, r2
 800dff8:	3b01      	subs	r3, #1
 800dffa:	4a39      	ldr	r2, [pc, #228]	; (800e0e0 <ILI9341_Draw_Rectangle+0x124>)
 800dffc:	8812      	ldrh	r2, [r2, #0]
 800dffe:	b292      	uxth	r2, r2
 800e000:	4293      	cmp	r3, r2
 800e002:	db05      	blt.n	800e010 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e004:	4b36      	ldr	r3, [pc, #216]	; (800e0e0 <ILI9341_Draw_Rectangle+0x124>)
 800e006:	881b      	ldrh	r3, [r3, #0]
 800e008:	b29a      	uxth	r2, r3
 800e00a:	88fb      	ldrh	r3, [r7, #6]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e010:	88ba      	ldrh	r2, [r7, #4]
 800e012:	883b      	ldrh	r3, [r7, #0]
 800e014:	4413      	add	r3, r2
 800e016:	3b01      	subs	r3, #1
 800e018:	4a32      	ldr	r2, [pc, #200]	; (800e0e4 <ILI9341_Draw_Rectangle+0x128>)
 800e01a:	8812      	ldrh	r2, [r2, #0]
 800e01c:	b292      	uxth	r2, r2
 800e01e:	4293      	cmp	r3, r2
 800e020:	db05      	blt.n	800e02e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e022:	4b30      	ldr	r3, [pc, #192]	; (800e0e4 <ILI9341_Draw_Rectangle+0x128>)
 800e024:	881b      	ldrh	r3, [r3, #0]
 800e026:	b29a      	uxth	r2, r3
 800e028:	88bb      	ldrh	r3, [r7, #4]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e02e:	88fa      	ldrh	r2, [r7, #6]
 800e030:	887b      	ldrh	r3, [r7, #2]
 800e032:	4413      	add	r3, r2
 800e034:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e036:	3b01      	subs	r3, #1
 800e038:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e03a:	88ba      	ldrh	r2, [r7, #4]
 800e03c:	883b      	ldrh	r3, [r7, #0]
 800e03e:	4413      	add	r3, r2
 800e040:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e042:	3b01      	subs	r3, #1
 800e044:	b29b      	uxth	r3, r3
 800e046:	88b9      	ldrh	r1, [r7, #4]
 800e048:	88f8      	ldrh	r0, [r7, #6]
 800e04a:	4622      	mov	r2, r4
 800e04c:	f7ff fe08 	bl	800dc60 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e050:	883a      	ldrh	r2, [r7, #0]
 800e052:	887b      	ldrh	r3, [r7, #2]
 800e054:	fb12 f303 	smulbb	r3, r2, r3
 800e058:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e05a:	2300      	movs	r3, #0
 800e05c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e05e:	89fb      	ldrh	r3, [r7, #14]
 800e060:	f003 0301 	and.w	r3, r3, #1
 800e064:	2b00      	cmp	r3, #0
 800e066:	d009      	beq.n	800e07c <ILI9341_Draw_Rectangle+0xc0>
 800e068:	89fb      	ldrh	r3, [r7, #14]
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d906      	bls.n	800e07c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e06e:	2301      	movs	r3, #1
 800e070:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e072:	89fb      	ldrh	r3, [r7, #14]
 800e074:	085b      	lsrs	r3, r3, #1
 800e076:	b29b      	uxth	r3, r3
 800e078:	005b      	lsls	r3, r3, #1
 800e07a:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800e07c:	89fc      	ldrh	r4, [r7, #14]
 800e07e:	8c3a      	ldrh	r2, [r7, #32]
 800e080:	88b9      	ldrh	r1, [r7, #4]
 800e082:	88f8      	ldrh	r0, [r7, #6]
 800e084:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	4623      	mov	r3, r4
 800e08c:	f000 f8a8 	bl	800e1e0 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800e090:	7b7b      	ldrb	r3, [r7, #13]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d021      	beq.n	800e0da <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e096:	88fa      	ldrh	r2, [r7, #6]
 800e098:	887b      	ldrh	r3, [r7, #2]
 800e09a:	4413      	add	r3, r2
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	3b02      	subs	r3, #2
 800e0a0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e0a2:	88ba      	ldrh	r2, [r7, #4]
 800e0a4:	883b      	ldrh	r3, [r7, #0]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	8c3a      	ldrh	r2, [r7, #32]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	f7ff fe4b 	bl	800dd4c <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e0b6:	88fa      	ldrh	r2, [r7, #6]
 800e0b8:	887b      	ldrh	r3, [r7, #2]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e0c2:	88ba      	ldrh	r2, [r7, #4]
 800e0c4:	883b      	ldrh	r3, [r7, #0]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	8c3a      	ldrh	r2, [r7, #32]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	f7ff fe3b 	bl	800dd4c <ILI9341_Draw_Pixel>
 800e0d6:	e000      	b.n	800e0da <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e0d8:	bf00      	nop
							colour);
	}
}
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd90      	pop	{r4, r7, pc}
 800e0e0:	20000cae 	.word	0x20000cae
 800e0e4:	20000cac 	.word	0x20000cac

0800e0e8 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800e0f2:	79fb      	ldrb	r3, [r7, #7]
 800e0f4:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800e0f6:	2036      	movs	r0, #54	; 0x36
 800e0f8:	f000 f922 	bl	800e340 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800e0fc:	7bfb      	ldrb	r3, [r7, #15]
 800e0fe:	2b03      	cmp	r3, #3
 800e100:	d836      	bhi.n	800e170 <ILI9341_Set_Rotation+0x88>
 800e102:	a201      	add	r2, pc, #4	; (adr r2, 800e108 <ILI9341_Set_Rotation+0x20>)
 800e104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e108:	0800e119 	.word	0x0800e119
 800e10c:	0800e12f 	.word	0x0800e12f
 800e110:	0800e145 	.word	0x0800e145
 800e114:	0800e15b 	.word	0x0800e15b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800e118:	2048      	movs	r0, #72	; 0x48
 800e11a:	f000 f943 	bl	800e3a4 <_LCD_SendData>
			LCD_WIDTH = 240;
 800e11e:	4b17      	ldr	r3, [pc, #92]	; (800e17c <ILI9341_Set_Rotation+0x94>)
 800e120:	22f0      	movs	r2, #240	; 0xf0
 800e122:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e124:	4b16      	ldr	r3, [pc, #88]	; (800e180 <ILI9341_Set_Rotation+0x98>)
 800e126:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e12a:	801a      	strh	r2, [r3, #0]
			break;
 800e12c:	e021      	b.n	800e172 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800e12e:	2028      	movs	r0, #40	; 0x28
 800e130:	f000 f938 	bl	800e3a4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e134:	4b11      	ldr	r3, [pc, #68]	; (800e17c <ILI9341_Set_Rotation+0x94>)
 800e136:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e13a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e13c:	4b10      	ldr	r3, [pc, #64]	; (800e180 <ILI9341_Set_Rotation+0x98>)
 800e13e:	22f0      	movs	r2, #240	; 0xf0
 800e140:	801a      	strh	r2, [r3, #0]
			break;
 800e142:	e016      	b.n	800e172 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800e144:	2088      	movs	r0, #136	; 0x88
 800e146:	f000 f92d 	bl	800e3a4 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800e14a:	4b0c      	ldr	r3, [pc, #48]	; (800e17c <ILI9341_Set_Rotation+0x94>)
 800e14c:	22f0      	movs	r2, #240	; 0xf0
 800e14e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e150:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <ILI9341_Set_Rotation+0x98>)
 800e152:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e156:	801a      	strh	r2, [r3, #0]
			break;
 800e158:	e00b      	b.n	800e172 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800e15a:	20e8      	movs	r0, #232	; 0xe8
 800e15c:	f000 f922 	bl	800e3a4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e160:	4b06      	ldr	r3, [pc, #24]	; (800e17c <ILI9341_Set_Rotation+0x94>)
 800e162:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e166:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e168:	4b05      	ldr	r3, [pc, #20]	; (800e180 <ILI9341_Set_Rotation+0x98>)
 800e16a:	22f0      	movs	r2, #240	; 0xf0
 800e16c:	801a      	strh	r2, [r3, #0]
			break;
 800e16e:	e000      	b.n	800e172 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800e170:	bf00      	nop
	}
}
 800e172:	bf00      	nop
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	20000cae 	.word	0x20000cae
 800e180:	20000cac 	.word	0x20000cac

0800e184 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800e184:	b480      	push	{r7}
 800e186:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e188:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <_LCD_Enable+0x1c>)
 800e18a:	695b      	ldr	r3, [r3, #20]
 800e18c:	4a04      	ldr	r2, [pc, #16]	; (800e1a0 <_LCD_Enable+0x1c>)
 800e18e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e192:	6153      	str	r3, [r2, #20]
}
 800e194:	bf00      	nop
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	48000400 	.word	0x48000400

0800e1a4 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800e1a8:	4b0c      	ldr	r3, [pc, #48]	; (800e1dc <_LCD_Reset+0x38>)
 800e1aa:	695b      	ldr	r3, [r3, #20]
 800e1ac:	4a0b      	ldr	r2, [pc, #44]	; (800e1dc <_LCD_Reset+0x38>)
 800e1ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1b2:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e1b4:	20c8      	movs	r0, #200	; 0xc8
 800e1b6:	f7fa f97d 	bl	80084b4 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1ba:	4b08      	ldr	r3, [pc, #32]	; (800e1dc <_LCD_Reset+0x38>)
 800e1bc:	695b      	ldr	r3, [r3, #20]
 800e1be:	4a07      	ldr	r2, [pc, #28]	; (800e1dc <_LCD_Reset+0x38>)
 800e1c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1c4:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e1c6:	20c8      	movs	r0, #200	; 0xc8
 800e1c8:	f7fa f974 	bl	80084b4 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e1cc:	4b03      	ldr	r3, [pc, #12]	; (800e1dc <_LCD_Reset+0x38>)
 800e1ce:	695b      	ldr	r3, [r3, #20]
 800e1d0:	4a02      	ldr	r2, [pc, #8]	; (800e1dc <_LCD_Reset+0x38>)
 800e1d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1d6:	6153      	str	r3, [r2, #20]
}
 800e1d8:	bf00      	nop
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	48000400 	.word	0x48000400

0800e1e0 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800e1e0:	b5b0      	push	{r4, r5, r7, lr}
 800e1e2:	b08e      	sub	sp, #56	; 0x38
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	607b      	str	r3, [r7, #4]
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	81fb      	strh	r3, [r7, #14]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	81bb      	strh	r3, [r7, #12]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	817b      	strh	r3, [r7, #10]
 800e1f4:	466b      	mov	r3, sp
 800e1f6:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	005b      	lsls	r3, r3, #1
 800e200:	4a4d      	ldr	r2, [pc, #308]	; (800e338 <_LCD_Write_Frame+0x158>)
 800e202:	8812      	ldrh	r2, [r2, #0]
 800e204:	4293      	cmp	r3, r2
 800e206:	d202      	bcs.n	800e20e <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e20c:	e002      	b.n	800e214 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800e20e:	4b4a      	ldr	r3, [pc, #296]	; (800e338 <_LCD_Write_Frame+0x158>)
 800e210:	881b      	ldrh	r3, [r3, #0]
 800e212:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800e214:	897b      	ldrh	r3, [r7, #10]
 800e216:	0a1b      	lsrs	r3, r3, #8
 800e218:	b29b      	uxth	r3, r3
 800e21a:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800e21c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e21e:	4603      	mov	r3, r0
 800e220:	3b01      	subs	r3, #1
 800e222:	61bb      	str	r3, [r7, #24]
 800e224:	4601      	mov	r1, r0
 800e226:	f04f 0200 	mov.w	r2, #0
 800e22a:	f04f 0300 	mov.w	r3, #0
 800e22e:	f04f 0400 	mov.w	r4, #0
 800e232:	00d4      	lsls	r4, r2, #3
 800e234:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e238:	00cb      	lsls	r3, r1, #3
 800e23a:	4601      	mov	r1, r0
 800e23c:	f04f 0200 	mov.w	r2, #0
 800e240:	f04f 0300 	mov.w	r3, #0
 800e244:	f04f 0400 	mov.w	r4, #0
 800e248:	00d4      	lsls	r4, r2, #3
 800e24a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e24e:	00cb      	lsls	r3, r1, #3
 800e250:	1dc3      	adds	r3, r0, #7
 800e252:	08db      	lsrs	r3, r3, #3
 800e254:	00db      	lsls	r3, r3, #3
 800e256:	ebad 0d03 	sub.w	sp, sp, r3
 800e25a:	466b      	mov	r3, sp
 800e25c:	3300      	adds	r3, #0
 800e25e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e260:	2300      	movs	r3, #0
 800e262:	633b      	str	r3, [r7, #48]	; 0x30
 800e264:	e00d      	b.n	800e282 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	4413      	add	r3, r2
 800e26c:	7ffa      	ldrb	r2, [r7, #31]
 800e26e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	3301      	adds	r3, #1
 800e274:	897a      	ldrh	r2, [r7, #10]
 800e276:	b2d1      	uxtb	r1, r2
 800e278:	697a      	ldr	r2, [r7, #20]
 800e27a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27e:	3302      	adds	r3, #2
 800e280:	633b      	str	r3, [r7, #48]	; 0x30
 800e282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	429a      	cmp	r2, r3
 800e288:	d3ed      	bcc.n	800e266 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	005b      	lsls	r3, r3, #1
 800e28e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800e290:	2301      	movs	r3, #1
 800e292:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800e294:	2300      	movs	r3, #0
 800e296:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00d      	beq.n	800e2ba <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800e29e:	693a      	ldr	r2, [r7, #16]
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2a6:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2b2:	fb01 f202 	mul.w	r2, r1, r2
 800e2b6:	1a9b      	subs	r3, r3, r2
 800e2b8:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e2ba:	4b20      	ldr	r3, [pc, #128]	; (800e33c <_LCD_Write_Frame+0x15c>)
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	4a1f      	ldr	r2, [pc, #124]	; (800e33c <_LCD_Write_Frame+0x15c>)
 800e2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e2c6:	4b1d      	ldr	r3, [pc, #116]	; (800e33c <_LCD_Write_Frame+0x15c>)
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	4a1c      	ldr	r2, [pc, #112]	; (800e33c <_LCD_Write_Frame+0x15c>)
 800e2cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2d0:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800e2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00f      	beq.n	800e2f8 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e2d8:	2300      	movs	r3, #0
 800e2da:	627b      	str	r3, [r7, #36]	; 0x24
 800e2dc:	e008      	b.n	800e2f0 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800e2de:	6978      	ldr	r0, [r7, #20]
 800e2e0:	230a      	movs	r3, #10
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2e6:	f000 f8c1 	bl	800e46c <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	627b      	str	r3, [r7, #36]	; 0x24
 800e2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d3f2      	bcc.n	800e2de <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800e2f8:	6978      	ldr	r0, [r7, #20]
 800e2fa:	230a      	movs	r3, #10
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e300:	f000 f8b4 	bl	800e46c <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e304:	2300      	movs	r3, #0
 800e306:	623b      	str	r3, [r7, #32]
 800e308:	e008      	b.n	800e31c <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e30a:	4b0c      	ldr	r3, [pc, #48]	; (800e33c <_LCD_Write_Frame+0x15c>)
 800e30c:	695b      	ldr	r3, [r3, #20]
 800e30e:	4a0b      	ldr	r2, [pc, #44]	; (800e33c <_LCD_Write_Frame+0x15c>)
 800e310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e314:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e316:	6a3b      	ldr	r3, [r7, #32]
 800e318:	3301      	adds	r3, #1
 800e31a:	623b      	str	r3, [r7, #32]
 800e31c:	6a3b      	ldr	r3, [r7, #32]
 800e31e:	2b02      	cmp	r3, #2
 800e320:	ddf3      	ble.n	800e30a <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e322:	4b06      	ldr	r3, [pc, #24]	; (800e33c <_LCD_Write_Frame+0x15c>)
 800e324:	695b      	ldr	r3, [r3, #20]
 800e326:	4a05      	ldr	r2, [pc, #20]	; (800e33c <_LCD_Write_Frame+0x15c>)
 800e328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e32c:	6153      	str	r3, [r2, #20]
 800e32e:	46ad      	mov	sp, r5

}
 800e330:	bf00      	nop
 800e332:	3738      	adds	r7, #56	; 0x38
 800e334:	46bd      	mov	sp, r7
 800e336:	bdb0      	pop	{r4, r5, r7, pc}
 800e338:	20000cb0 	.word	0x20000cb0
 800e33c:	48000400 	.word	0x48000400

0800e340 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e34a:	4b15      	ldr	r3, [pc, #84]	; (800e3a0 <_LCD_SendCommand+0x60>)
 800e34c:	695b      	ldr	r3, [r3, #20]
 800e34e:	4a14      	ldr	r2, [pc, #80]	; (800e3a0 <_LCD_SendCommand+0x60>)
 800e350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e354:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e356:	4b12      	ldr	r3, [pc, #72]	; (800e3a0 <_LCD_SendCommand+0x60>)
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	4a11      	ldr	r2, [pc, #68]	; (800e3a0 <_LCD_SendCommand+0x60>)
 800e35c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e360:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800e362:	79fb      	ldrb	r3, [r7, #7]
 800e364:	2200      	movs	r2, #0
 800e366:	2100      	movs	r1, #0
 800e368:	4618      	mov	r0, r3
 800e36a:	f000 f84d 	bl	800e408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e36e:	2300      	movs	r3, #0
 800e370:	60fb      	str	r3, [r7, #12]
 800e372:	e008      	b.n	800e386 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e374:	4b0a      	ldr	r3, [pc, #40]	; (800e3a0 <_LCD_SendCommand+0x60>)
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	4a09      	ldr	r2, [pc, #36]	; (800e3a0 <_LCD_SendCommand+0x60>)
 800e37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e37e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	3301      	adds	r3, #1
 800e384:	60fb      	str	r3, [r7, #12]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2b02      	cmp	r3, #2
 800e38a:	ddf3      	ble.n	800e374 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e38c:	4b04      	ldr	r3, [pc, #16]	; (800e3a0 <_LCD_SendCommand+0x60>)
 800e38e:	695b      	ldr	r3, [r3, #20]
 800e390:	4a03      	ldr	r2, [pc, #12]	; (800e3a0 <_LCD_SendCommand+0x60>)
 800e392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e396:	6153      	str	r3, [r2, #20]
}
 800e398:	bf00      	nop
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	48000400 	.word	0x48000400

0800e3a4 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e3ae:	4b15      	ldr	r3, [pc, #84]	; (800e404 <_LCD_SendData+0x60>)
 800e3b0:	695b      	ldr	r3, [r3, #20]
 800e3b2:	4a14      	ldr	r2, [pc, #80]	; (800e404 <_LCD_SendData+0x60>)
 800e3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3b8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e3ba:	4b12      	ldr	r3, [pc, #72]	; (800e404 <_LCD_SendData+0x60>)
 800e3bc:	695b      	ldr	r3, [r3, #20]
 800e3be:	4a11      	ldr	r2, [pc, #68]	; (800e404 <_LCD_SendData+0x60>)
 800e3c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3c4:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800e3c6:	79fb      	ldrb	r3, [r7, #7]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f000 f81b 	bl	800e408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	60fb      	str	r3, [r7, #12]
 800e3d6:	e008      	b.n	800e3ea <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e3d8:	4b0a      	ldr	r3, [pc, #40]	; (800e404 <_LCD_SendData+0x60>)
 800e3da:	695b      	ldr	r3, [r3, #20]
 800e3dc:	4a09      	ldr	r2, [pc, #36]	; (800e404 <_LCD_SendData+0x60>)
 800e3de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3e2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	60fb      	str	r3, [r7, #12]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2b02      	cmp	r3, #2
 800e3ee:	ddf3      	ble.n	800e3d8 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e3f0:	4b04      	ldr	r3, [pc, #16]	; (800e404 <_LCD_SendData+0x60>)
 800e3f2:	695b      	ldr	r3, [r3, #20]
 800e3f4:	4a03      	ldr	r2, [pc, #12]	; (800e404 <_LCD_SendData+0x60>)
 800e3f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3fa:	6153      	str	r3, [r2, #20]
}
 800e3fc:	bf00      	nop
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	48000400 	.word	0x48000400

0800e408 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	4603      	mov	r3, r0
 800e410:	71fb      	strb	r3, [r7, #7]
 800e412:	460b      	mov	r3, r1
 800e414:	71bb      	strb	r3, [r7, #6]
 800e416:	4613      	mov	r3, r2
 800e418:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e41a:	2300      	movs	r3, #0
 800e41c:	60fb      	str	r3, [r7, #12]
 800e41e:	e003      	b.n	800e428 <_SPI_SendByte+0x20>
   		asm("nop");
 800e420:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	3301      	adds	r3, #1
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	79bb      	ldrb	r3, [r7, #6]
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	dbf7      	blt.n	800e420 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e430:	4b0c      	ldr	r3, [pc, #48]	; (800e464 <_SPI_SendByte+0x5c>)
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	f003 0302 	and.w	r3, r3, #2
 800e438:	2b02      	cmp	r3, #2
 800e43a:	d102      	bne.n	800e442 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800e43c:	4a0a      	ldr	r2, [pc, #40]	; (800e468 <_SPI_SendByte+0x60>)
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e442:	2300      	movs	r3, #0
 800e444:	60bb      	str	r3, [r7, #8]
 800e446:	e003      	b.n	800e450 <_SPI_SendByte+0x48>
   		asm("nop");
 800e448:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	3301      	adds	r3, #1
 800e44e:	60bb      	str	r3, [r7, #8]
 800e450:	797b      	ldrb	r3, [r7, #5]
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	429a      	cmp	r2, r3
 800e456:	dbf7      	blt.n	800e448 <_SPI_SendByte+0x40>

#endif

}
 800e458:	bf00      	nop
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr
 800e464:	40003c00 	.word	0x40003c00
 800e468:	40003c0c 	.word	0x40003c0c

0800e46c <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b089      	sub	sp, #36	; 0x24
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	4611      	mov	r1, r2
 800e478:	461a      	mov	r2, r3
 800e47a:	460b      	mov	r3, r1
 800e47c:	71fb      	strb	r3, [r7, #7]
 800e47e:	4613      	mov	r3, r2
 800e480:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e482:	2300      	movs	r3, #0
 800e484:	61fb      	str	r3, [r7, #28]
 800e486:	e003      	b.n	800e490 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800e488:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	3301      	adds	r3, #1
 800e48e:	61fb      	str	r3, [r7, #28]
 800e490:	79fb      	ldrb	r3, [r7, #7]
 800e492:	69fa      	ldr	r2, [r7, #28]
 800e494:	429a      	cmp	r2, r3
 800e496:	dbf7      	blt.n	800e488 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800e49c:	e01d      	b.n	800e4da <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e49e:	4b1c      	ldr	r3, [pc, #112]	; (800e510 <_SPI_SendByteMultiByte+0xa4>)
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	f003 0302 	and.w	r3, r3, #2
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	d117      	bne.n	800e4da <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d90a      	bls.n	800e4c6 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	881a      	ldrh	r2, [r3, #0]
 800e4b4:	4b16      	ldr	r3, [pc, #88]	; (800e510 <_SPI_SendByteMultiByte+0xa4>)
 800e4b6:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	3302      	adds	r3, #2
 800e4bc:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	3b02      	subs	r3, #2
 800e4c2:	60bb      	str	r3, [r7, #8]
 800e4c4:	e009      	b.n	800e4da <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800e4c6:	4a13      	ldr	r2, [pc, #76]	; (800e514 <_SPI_SendByteMultiByte+0xa8>)
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800e4ce:	69bb      	ldr	r3, [r7, #24]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1de      	bne.n	800e49e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800e4e0:	4b0b      	ldr	r3, [pc, #44]	; (800e510 <_SPI_SendByteMultiByte+0xa4>)
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	4a0a      	ldr	r2, [pc, #40]	; (800e510 <_SPI_SendByteMultiByte+0xa4>)
 800e4e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4ea:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	617b      	str	r3, [r7, #20]
 800e4f0:	e003      	b.n	800e4fa <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800e4f2:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	617b      	str	r3, [r7, #20]
 800e4fa:	79bb      	ldrb	r3, [r7, #6]
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	dbf7      	blt.n	800e4f2 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800e502:	bf00      	nop
 800e504:	3724      	adds	r7, #36	; 0x24
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	40003c00 	.word	0x40003c00
 800e514:	40003c0c 	.word	0x40003c0c

0800e518 <__errno>:
 800e518:	4b01      	ldr	r3, [pc, #4]	; (800e520 <__errno+0x8>)
 800e51a:	6818      	ldr	r0, [r3, #0]
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	200017f4 	.word	0x200017f4

0800e524 <__libc_init_array>:
 800e524:	b570      	push	{r4, r5, r6, lr}
 800e526:	4e0d      	ldr	r6, [pc, #52]	; (800e55c <__libc_init_array+0x38>)
 800e528:	4c0d      	ldr	r4, [pc, #52]	; (800e560 <__libc_init_array+0x3c>)
 800e52a:	1ba4      	subs	r4, r4, r6
 800e52c:	10a4      	asrs	r4, r4, #2
 800e52e:	2500      	movs	r5, #0
 800e530:	42a5      	cmp	r5, r4
 800e532:	d109      	bne.n	800e548 <__libc_init_array+0x24>
 800e534:	4e0b      	ldr	r6, [pc, #44]	; (800e564 <__libc_init_array+0x40>)
 800e536:	4c0c      	ldr	r4, [pc, #48]	; (800e568 <__libc_init_array+0x44>)
 800e538:	f003 fc88 	bl	8011e4c <_init>
 800e53c:	1ba4      	subs	r4, r4, r6
 800e53e:	10a4      	asrs	r4, r4, #2
 800e540:	2500      	movs	r5, #0
 800e542:	42a5      	cmp	r5, r4
 800e544:	d105      	bne.n	800e552 <__libc_init_array+0x2e>
 800e546:	bd70      	pop	{r4, r5, r6, pc}
 800e548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e54c:	4798      	blx	r3
 800e54e:	3501      	adds	r5, #1
 800e550:	e7ee      	b.n	800e530 <__libc_init_array+0xc>
 800e552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e556:	4798      	blx	r3
 800e558:	3501      	adds	r5, #1
 800e55a:	e7f2      	b.n	800e542 <__libc_init_array+0x1e>
 800e55c:	08013930 	.word	0x08013930
 800e560:	08013930 	.word	0x08013930
 800e564:	08013930 	.word	0x08013930
 800e568:	08013934 	.word	0x08013934

0800e56c <memset>:
 800e56c:	4402      	add	r2, r0
 800e56e:	4603      	mov	r3, r0
 800e570:	4293      	cmp	r3, r2
 800e572:	d100      	bne.n	800e576 <memset+0xa>
 800e574:	4770      	bx	lr
 800e576:	f803 1b01 	strb.w	r1, [r3], #1
 800e57a:	e7f9      	b.n	800e570 <memset+0x4>

0800e57c <__cvt>:
 800e57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e580:	ec55 4b10 	vmov	r4, r5, d0
 800e584:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e586:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e58a:	2d00      	cmp	r5, #0
 800e58c:	460e      	mov	r6, r1
 800e58e:	4691      	mov	r9, r2
 800e590:	4619      	mov	r1, r3
 800e592:	bfb8      	it	lt
 800e594:	4622      	movlt	r2, r4
 800e596:	462b      	mov	r3, r5
 800e598:	f027 0720 	bic.w	r7, r7, #32
 800e59c:	bfbb      	ittet	lt
 800e59e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e5a2:	461d      	movlt	r5, r3
 800e5a4:	2300      	movge	r3, #0
 800e5a6:	232d      	movlt	r3, #45	; 0x2d
 800e5a8:	bfb8      	it	lt
 800e5aa:	4614      	movlt	r4, r2
 800e5ac:	2f46      	cmp	r7, #70	; 0x46
 800e5ae:	700b      	strb	r3, [r1, #0]
 800e5b0:	d004      	beq.n	800e5bc <__cvt+0x40>
 800e5b2:	2f45      	cmp	r7, #69	; 0x45
 800e5b4:	d100      	bne.n	800e5b8 <__cvt+0x3c>
 800e5b6:	3601      	adds	r6, #1
 800e5b8:	2102      	movs	r1, #2
 800e5ba:	e000      	b.n	800e5be <__cvt+0x42>
 800e5bc:	2103      	movs	r1, #3
 800e5be:	ab03      	add	r3, sp, #12
 800e5c0:	9301      	str	r3, [sp, #4]
 800e5c2:	ab02      	add	r3, sp, #8
 800e5c4:	9300      	str	r3, [sp, #0]
 800e5c6:	4632      	mov	r2, r6
 800e5c8:	4653      	mov	r3, sl
 800e5ca:	ec45 4b10 	vmov	d0, r4, r5
 800e5ce:	f000 fe27 	bl	800f220 <_dtoa_r>
 800e5d2:	2f47      	cmp	r7, #71	; 0x47
 800e5d4:	4680      	mov	r8, r0
 800e5d6:	d102      	bne.n	800e5de <__cvt+0x62>
 800e5d8:	f019 0f01 	tst.w	r9, #1
 800e5dc:	d026      	beq.n	800e62c <__cvt+0xb0>
 800e5de:	2f46      	cmp	r7, #70	; 0x46
 800e5e0:	eb08 0906 	add.w	r9, r8, r6
 800e5e4:	d111      	bne.n	800e60a <__cvt+0x8e>
 800e5e6:	f898 3000 	ldrb.w	r3, [r8]
 800e5ea:	2b30      	cmp	r3, #48	; 0x30
 800e5ec:	d10a      	bne.n	800e604 <__cvt+0x88>
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	f7f2 fa8f 	bl	8000b18 <__aeabi_dcmpeq>
 800e5fa:	b918      	cbnz	r0, 800e604 <__cvt+0x88>
 800e5fc:	f1c6 0601 	rsb	r6, r6, #1
 800e600:	f8ca 6000 	str.w	r6, [sl]
 800e604:	f8da 3000 	ldr.w	r3, [sl]
 800e608:	4499      	add	r9, r3
 800e60a:	2200      	movs	r2, #0
 800e60c:	2300      	movs	r3, #0
 800e60e:	4620      	mov	r0, r4
 800e610:	4629      	mov	r1, r5
 800e612:	f7f2 fa81 	bl	8000b18 <__aeabi_dcmpeq>
 800e616:	b938      	cbnz	r0, 800e628 <__cvt+0xac>
 800e618:	2230      	movs	r2, #48	; 0x30
 800e61a:	9b03      	ldr	r3, [sp, #12]
 800e61c:	454b      	cmp	r3, r9
 800e61e:	d205      	bcs.n	800e62c <__cvt+0xb0>
 800e620:	1c59      	adds	r1, r3, #1
 800e622:	9103      	str	r1, [sp, #12]
 800e624:	701a      	strb	r2, [r3, #0]
 800e626:	e7f8      	b.n	800e61a <__cvt+0x9e>
 800e628:	f8cd 900c 	str.w	r9, [sp, #12]
 800e62c:	9b03      	ldr	r3, [sp, #12]
 800e62e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e630:	eba3 0308 	sub.w	r3, r3, r8
 800e634:	4640      	mov	r0, r8
 800e636:	6013      	str	r3, [r2, #0]
 800e638:	b004      	add	sp, #16
 800e63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e63e <__exponent>:
 800e63e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e640:	2900      	cmp	r1, #0
 800e642:	4604      	mov	r4, r0
 800e644:	bfba      	itte	lt
 800e646:	4249      	neglt	r1, r1
 800e648:	232d      	movlt	r3, #45	; 0x2d
 800e64a:	232b      	movge	r3, #43	; 0x2b
 800e64c:	2909      	cmp	r1, #9
 800e64e:	f804 2b02 	strb.w	r2, [r4], #2
 800e652:	7043      	strb	r3, [r0, #1]
 800e654:	dd20      	ble.n	800e698 <__exponent+0x5a>
 800e656:	f10d 0307 	add.w	r3, sp, #7
 800e65a:	461f      	mov	r7, r3
 800e65c:	260a      	movs	r6, #10
 800e65e:	fb91 f5f6 	sdiv	r5, r1, r6
 800e662:	fb06 1115 	mls	r1, r6, r5, r1
 800e666:	3130      	adds	r1, #48	; 0x30
 800e668:	2d09      	cmp	r5, #9
 800e66a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e66e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800e672:	4629      	mov	r1, r5
 800e674:	dc09      	bgt.n	800e68a <__exponent+0x4c>
 800e676:	3130      	adds	r1, #48	; 0x30
 800e678:	3b02      	subs	r3, #2
 800e67a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e67e:	42bb      	cmp	r3, r7
 800e680:	4622      	mov	r2, r4
 800e682:	d304      	bcc.n	800e68e <__exponent+0x50>
 800e684:	1a10      	subs	r0, r2, r0
 800e686:	b003      	add	sp, #12
 800e688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e68a:	4613      	mov	r3, r2
 800e68c:	e7e7      	b.n	800e65e <__exponent+0x20>
 800e68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e692:	f804 2b01 	strb.w	r2, [r4], #1
 800e696:	e7f2      	b.n	800e67e <__exponent+0x40>
 800e698:	2330      	movs	r3, #48	; 0x30
 800e69a:	4419      	add	r1, r3
 800e69c:	7083      	strb	r3, [r0, #2]
 800e69e:	1d02      	adds	r2, r0, #4
 800e6a0:	70c1      	strb	r1, [r0, #3]
 800e6a2:	e7ef      	b.n	800e684 <__exponent+0x46>

0800e6a4 <_printf_float>:
 800e6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a8:	b08d      	sub	sp, #52	; 0x34
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e6b0:	4616      	mov	r6, r2
 800e6b2:	461f      	mov	r7, r3
 800e6b4:	4605      	mov	r5, r0
 800e6b6:	f001 fce5 	bl	8010084 <_localeconv_r>
 800e6ba:	6803      	ldr	r3, [r0, #0]
 800e6bc:	9304      	str	r3, [sp, #16]
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7f1 fdae 	bl	8000220 <strlen>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e6c8:	f8d8 3000 	ldr.w	r3, [r8]
 800e6cc:	9005      	str	r0, [sp, #20]
 800e6ce:	3307      	adds	r3, #7
 800e6d0:	f023 0307 	bic.w	r3, r3, #7
 800e6d4:	f103 0208 	add.w	r2, r3, #8
 800e6d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e6dc:	f8d4 b000 	ldr.w	fp, [r4]
 800e6e0:	f8c8 2000 	str.w	r2, [r8]
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e6ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e6f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e6f4:	9307      	str	r3, [sp, #28]
 800e6f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e6fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6fe:	4ba7      	ldr	r3, [pc, #668]	; (800e99c <_printf_float+0x2f8>)
 800e700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e704:	f7f2 fa3a 	bl	8000b7c <__aeabi_dcmpun>
 800e708:	bb70      	cbnz	r0, 800e768 <_printf_float+0xc4>
 800e70a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e70e:	4ba3      	ldr	r3, [pc, #652]	; (800e99c <_printf_float+0x2f8>)
 800e710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e714:	f7f2 fa14 	bl	8000b40 <__aeabi_dcmple>
 800e718:	bb30      	cbnz	r0, 800e768 <_printf_float+0xc4>
 800e71a:	2200      	movs	r2, #0
 800e71c:	2300      	movs	r3, #0
 800e71e:	4640      	mov	r0, r8
 800e720:	4649      	mov	r1, r9
 800e722:	f7f2 fa03 	bl	8000b2c <__aeabi_dcmplt>
 800e726:	b110      	cbz	r0, 800e72e <_printf_float+0x8a>
 800e728:	232d      	movs	r3, #45	; 0x2d
 800e72a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e72e:	4a9c      	ldr	r2, [pc, #624]	; (800e9a0 <_printf_float+0x2fc>)
 800e730:	4b9c      	ldr	r3, [pc, #624]	; (800e9a4 <_printf_float+0x300>)
 800e732:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e736:	bf8c      	ite	hi
 800e738:	4690      	movhi	r8, r2
 800e73a:	4698      	movls	r8, r3
 800e73c:	2303      	movs	r3, #3
 800e73e:	f02b 0204 	bic.w	r2, fp, #4
 800e742:	6123      	str	r3, [r4, #16]
 800e744:	6022      	str	r2, [r4, #0]
 800e746:	f04f 0900 	mov.w	r9, #0
 800e74a:	9700      	str	r7, [sp, #0]
 800e74c:	4633      	mov	r3, r6
 800e74e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e750:	4621      	mov	r1, r4
 800e752:	4628      	mov	r0, r5
 800e754:	f000 f9e6 	bl	800eb24 <_printf_common>
 800e758:	3001      	adds	r0, #1
 800e75a:	f040 808d 	bne.w	800e878 <_printf_float+0x1d4>
 800e75e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e762:	b00d      	add	sp, #52	; 0x34
 800e764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e768:	4642      	mov	r2, r8
 800e76a:	464b      	mov	r3, r9
 800e76c:	4640      	mov	r0, r8
 800e76e:	4649      	mov	r1, r9
 800e770:	f7f2 fa04 	bl	8000b7c <__aeabi_dcmpun>
 800e774:	b110      	cbz	r0, 800e77c <_printf_float+0xd8>
 800e776:	4a8c      	ldr	r2, [pc, #560]	; (800e9a8 <_printf_float+0x304>)
 800e778:	4b8c      	ldr	r3, [pc, #560]	; (800e9ac <_printf_float+0x308>)
 800e77a:	e7da      	b.n	800e732 <_printf_float+0x8e>
 800e77c:	6861      	ldr	r1, [r4, #4]
 800e77e:	1c4b      	adds	r3, r1, #1
 800e780:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e784:	a80a      	add	r0, sp, #40	; 0x28
 800e786:	d13e      	bne.n	800e806 <_printf_float+0x162>
 800e788:	2306      	movs	r3, #6
 800e78a:	6063      	str	r3, [r4, #4]
 800e78c:	2300      	movs	r3, #0
 800e78e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e792:	ab09      	add	r3, sp, #36	; 0x24
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	ec49 8b10 	vmov	d0, r8, r9
 800e79a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e79e:	6022      	str	r2, [r4, #0]
 800e7a0:	f8cd a004 	str.w	sl, [sp, #4]
 800e7a4:	6861      	ldr	r1, [r4, #4]
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	f7ff fee8 	bl	800e57c <__cvt>
 800e7ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e7b0:	2b47      	cmp	r3, #71	; 0x47
 800e7b2:	4680      	mov	r8, r0
 800e7b4:	d109      	bne.n	800e7ca <_printf_float+0x126>
 800e7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7b8:	1cd8      	adds	r0, r3, #3
 800e7ba:	db02      	blt.n	800e7c2 <_printf_float+0x11e>
 800e7bc:	6862      	ldr	r2, [r4, #4]
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	dd47      	ble.n	800e852 <_printf_float+0x1ae>
 800e7c2:	f1aa 0a02 	sub.w	sl, sl, #2
 800e7c6:	fa5f fa8a 	uxtb.w	sl, sl
 800e7ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e7ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7d0:	d824      	bhi.n	800e81c <_printf_float+0x178>
 800e7d2:	3901      	subs	r1, #1
 800e7d4:	4652      	mov	r2, sl
 800e7d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e7da:	9109      	str	r1, [sp, #36]	; 0x24
 800e7dc:	f7ff ff2f 	bl	800e63e <__exponent>
 800e7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7e2:	1813      	adds	r3, r2, r0
 800e7e4:	2a01      	cmp	r2, #1
 800e7e6:	4681      	mov	r9, r0
 800e7e8:	6123      	str	r3, [r4, #16]
 800e7ea:	dc02      	bgt.n	800e7f2 <_printf_float+0x14e>
 800e7ec:	6822      	ldr	r2, [r4, #0]
 800e7ee:	07d1      	lsls	r1, r2, #31
 800e7f0:	d501      	bpl.n	800e7f6 <_printf_float+0x152>
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	6123      	str	r3, [r4, #16]
 800e7f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d0a5      	beq.n	800e74a <_printf_float+0xa6>
 800e7fe:	232d      	movs	r3, #45	; 0x2d
 800e800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e804:	e7a1      	b.n	800e74a <_printf_float+0xa6>
 800e806:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e80a:	f000 8177 	beq.w	800eafc <_printf_float+0x458>
 800e80e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e812:	d1bb      	bne.n	800e78c <_printf_float+0xe8>
 800e814:	2900      	cmp	r1, #0
 800e816:	d1b9      	bne.n	800e78c <_printf_float+0xe8>
 800e818:	2301      	movs	r3, #1
 800e81a:	e7b6      	b.n	800e78a <_printf_float+0xe6>
 800e81c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e820:	d119      	bne.n	800e856 <_printf_float+0x1b2>
 800e822:	2900      	cmp	r1, #0
 800e824:	6863      	ldr	r3, [r4, #4]
 800e826:	dd0c      	ble.n	800e842 <_printf_float+0x19e>
 800e828:	6121      	str	r1, [r4, #16]
 800e82a:	b913      	cbnz	r3, 800e832 <_printf_float+0x18e>
 800e82c:	6822      	ldr	r2, [r4, #0]
 800e82e:	07d2      	lsls	r2, r2, #31
 800e830:	d502      	bpl.n	800e838 <_printf_float+0x194>
 800e832:	3301      	adds	r3, #1
 800e834:	440b      	add	r3, r1
 800e836:	6123      	str	r3, [r4, #16]
 800e838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e83a:	65a3      	str	r3, [r4, #88]	; 0x58
 800e83c:	f04f 0900 	mov.w	r9, #0
 800e840:	e7d9      	b.n	800e7f6 <_printf_float+0x152>
 800e842:	b913      	cbnz	r3, 800e84a <_printf_float+0x1a6>
 800e844:	6822      	ldr	r2, [r4, #0]
 800e846:	07d0      	lsls	r0, r2, #31
 800e848:	d501      	bpl.n	800e84e <_printf_float+0x1aa>
 800e84a:	3302      	adds	r3, #2
 800e84c:	e7f3      	b.n	800e836 <_printf_float+0x192>
 800e84e:	2301      	movs	r3, #1
 800e850:	e7f1      	b.n	800e836 <_printf_float+0x192>
 800e852:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e856:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e85a:	4293      	cmp	r3, r2
 800e85c:	db05      	blt.n	800e86a <_printf_float+0x1c6>
 800e85e:	6822      	ldr	r2, [r4, #0]
 800e860:	6123      	str	r3, [r4, #16]
 800e862:	07d1      	lsls	r1, r2, #31
 800e864:	d5e8      	bpl.n	800e838 <_printf_float+0x194>
 800e866:	3301      	adds	r3, #1
 800e868:	e7e5      	b.n	800e836 <_printf_float+0x192>
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	bfd4      	ite	le
 800e86e:	f1c3 0302 	rsble	r3, r3, #2
 800e872:	2301      	movgt	r3, #1
 800e874:	4413      	add	r3, r2
 800e876:	e7de      	b.n	800e836 <_printf_float+0x192>
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	055a      	lsls	r2, r3, #21
 800e87c:	d407      	bmi.n	800e88e <_printf_float+0x1ea>
 800e87e:	6923      	ldr	r3, [r4, #16]
 800e880:	4642      	mov	r2, r8
 800e882:	4631      	mov	r1, r6
 800e884:	4628      	mov	r0, r5
 800e886:	47b8      	blx	r7
 800e888:	3001      	adds	r0, #1
 800e88a:	d12b      	bne.n	800e8e4 <_printf_float+0x240>
 800e88c:	e767      	b.n	800e75e <_printf_float+0xba>
 800e88e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e892:	f240 80dc 	bls.w	800ea4e <_printf_float+0x3aa>
 800e896:	2200      	movs	r2, #0
 800e898:	2300      	movs	r3, #0
 800e89a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e89e:	f7f2 f93b 	bl	8000b18 <__aeabi_dcmpeq>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d033      	beq.n	800e90e <_printf_float+0x26a>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	4a41      	ldr	r2, [pc, #260]	; (800e9b0 <_printf_float+0x30c>)
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	47b8      	blx	r7
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	f43f af54 	beq.w	800e75e <_printf_float+0xba>
 800e8b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	db02      	blt.n	800e8c4 <_printf_float+0x220>
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	07d8      	lsls	r0, r3, #31
 800e8c2:	d50f      	bpl.n	800e8e4 <_printf_float+0x240>
 800e8c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8c8:	4631      	mov	r1, r6
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	47b8      	blx	r7
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	f43f af45 	beq.w	800e75e <_printf_float+0xba>
 800e8d4:	f04f 0800 	mov.w	r8, #0
 800e8d8:	f104 091a 	add.w	r9, r4, #26
 800e8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	4543      	cmp	r3, r8
 800e8e2:	dc09      	bgt.n	800e8f8 <_printf_float+0x254>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	079b      	lsls	r3, r3, #30
 800e8e8:	f100 8103 	bmi.w	800eaf2 <_printf_float+0x44e>
 800e8ec:	68e0      	ldr	r0, [r4, #12]
 800e8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8f0:	4298      	cmp	r0, r3
 800e8f2:	bfb8      	it	lt
 800e8f4:	4618      	movlt	r0, r3
 800e8f6:	e734      	b.n	800e762 <_printf_float+0xbe>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	464a      	mov	r2, r9
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4628      	mov	r0, r5
 800e900:	47b8      	blx	r7
 800e902:	3001      	adds	r0, #1
 800e904:	f43f af2b 	beq.w	800e75e <_printf_float+0xba>
 800e908:	f108 0801 	add.w	r8, r8, #1
 800e90c:	e7e6      	b.n	800e8dc <_printf_float+0x238>
 800e90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e910:	2b00      	cmp	r3, #0
 800e912:	dc2b      	bgt.n	800e96c <_printf_float+0x2c8>
 800e914:	2301      	movs	r3, #1
 800e916:	4a26      	ldr	r2, [pc, #152]	; (800e9b0 <_printf_float+0x30c>)
 800e918:	4631      	mov	r1, r6
 800e91a:	4628      	mov	r0, r5
 800e91c:	47b8      	blx	r7
 800e91e:	3001      	adds	r0, #1
 800e920:	f43f af1d 	beq.w	800e75e <_printf_float+0xba>
 800e924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e926:	b923      	cbnz	r3, 800e932 <_printf_float+0x28e>
 800e928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e92a:	b913      	cbnz	r3, 800e932 <_printf_float+0x28e>
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	07d9      	lsls	r1, r3, #31
 800e930:	d5d8      	bpl.n	800e8e4 <_printf_float+0x240>
 800e932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e936:	4631      	mov	r1, r6
 800e938:	4628      	mov	r0, r5
 800e93a:	47b8      	blx	r7
 800e93c:	3001      	adds	r0, #1
 800e93e:	f43f af0e 	beq.w	800e75e <_printf_float+0xba>
 800e942:	f04f 0900 	mov.w	r9, #0
 800e946:	f104 0a1a 	add.w	sl, r4, #26
 800e94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e94c:	425b      	negs	r3, r3
 800e94e:	454b      	cmp	r3, r9
 800e950:	dc01      	bgt.n	800e956 <_printf_float+0x2b2>
 800e952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e954:	e794      	b.n	800e880 <_printf_float+0x1dc>
 800e956:	2301      	movs	r3, #1
 800e958:	4652      	mov	r2, sl
 800e95a:	4631      	mov	r1, r6
 800e95c:	4628      	mov	r0, r5
 800e95e:	47b8      	blx	r7
 800e960:	3001      	adds	r0, #1
 800e962:	f43f aefc 	beq.w	800e75e <_printf_float+0xba>
 800e966:	f109 0901 	add.w	r9, r9, #1
 800e96a:	e7ee      	b.n	800e94a <_printf_float+0x2a6>
 800e96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e96e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e970:	429a      	cmp	r2, r3
 800e972:	bfa8      	it	ge
 800e974:	461a      	movge	r2, r3
 800e976:	2a00      	cmp	r2, #0
 800e978:	4691      	mov	r9, r2
 800e97a:	dd07      	ble.n	800e98c <_printf_float+0x2e8>
 800e97c:	4613      	mov	r3, r2
 800e97e:	4631      	mov	r1, r6
 800e980:	4642      	mov	r2, r8
 800e982:	4628      	mov	r0, r5
 800e984:	47b8      	blx	r7
 800e986:	3001      	adds	r0, #1
 800e988:	f43f aee9 	beq.w	800e75e <_printf_float+0xba>
 800e98c:	f104 031a 	add.w	r3, r4, #26
 800e990:	f04f 0b00 	mov.w	fp, #0
 800e994:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e998:	9306      	str	r3, [sp, #24]
 800e99a:	e015      	b.n	800e9c8 <_printf_float+0x324>
 800e99c:	7fefffff 	.word	0x7fefffff
 800e9a0:	08013630 	.word	0x08013630
 800e9a4:	0801362c 	.word	0x0801362c
 800e9a8:	08013638 	.word	0x08013638
 800e9ac:	08013634 	.word	0x08013634
 800e9b0:	0801363c 	.word	0x0801363c
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	9a06      	ldr	r2, [sp, #24]
 800e9b8:	4631      	mov	r1, r6
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	47b8      	blx	r7
 800e9be:	3001      	adds	r0, #1
 800e9c0:	f43f aecd 	beq.w	800e75e <_printf_float+0xba>
 800e9c4:	f10b 0b01 	add.w	fp, fp, #1
 800e9c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e9cc:	ebaa 0309 	sub.w	r3, sl, r9
 800e9d0:	455b      	cmp	r3, fp
 800e9d2:	dcef      	bgt.n	800e9b4 <_printf_float+0x310>
 800e9d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	44d0      	add	r8, sl
 800e9dc:	db15      	blt.n	800ea0a <_printf_float+0x366>
 800e9de:	6823      	ldr	r3, [r4, #0]
 800e9e0:	07da      	lsls	r2, r3, #31
 800e9e2:	d412      	bmi.n	800ea0a <_printf_float+0x366>
 800e9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9e8:	eba3 020a 	sub.w	r2, r3, sl
 800e9ec:	eba3 0a01 	sub.w	sl, r3, r1
 800e9f0:	4592      	cmp	sl, r2
 800e9f2:	bfa8      	it	ge
 800e9f4:	4692      	movge	sl, r2
 800e9f6:	f1ba 0f00 	cmp.w	sl, #0
 800e9fa:	dc0e      	bgt.n	800ea1a <_printf_float+0x376>
 800e9fc:	f04f 0800 	mov.w	r8, #0
 800ea00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea04:	f104 091a 	add.w	r9, r4, #26
 800ea08:	e019      	b.n	800ea3e <_printf_float+0x39a>
 800ea0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea0e:	4631      	mov	r1, r6
 800ea10:	4628      	mov	r0, r5
 800ea12:	47b8      	blx	r7
 800ea14:	3001      	adds	r0, #1
 800ea16:	d1e5      	bne.n	800e9e4 <_printf_float+0x340>
 800ea18:	e6a1      	b.n	800e75e <_printf_float+0xba>
 800ea1a:	4653      	mov	r3, sl
 800ea1c:	4642      	mov	r2, r8
 800ea1e:	4631      	mov	r1, r6
 800ea20:	4628      	mov	r0, r5
 800ea22:	47b8      	blx	r7
 800ea24:	3001      	adds	r0, #1
 800ea26:	d1e9      	bne.n	800e9fc <_printf_float+0x358>
 800ea28:	e699      	b.n	800e75e <_printf_float+0xba>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	464a      	mov	r2, r9
 800ea2e:	4631      	mov	r1, r6
 800ea30:	4628      	mov	r0, r5
 800ea32:	47b8      	blx	r7
 800ea34:	3001      	adds	r0, #1
 800ea36:	f43f ae92 	beq.w	800e75e <_printf_float+0xba>
 800ea3a:	f108 0801 	add.w	r8, r8, #1
 800ea3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea42:	1a9b      	subs	r3, r3, r2
 800ea44:	eba3 030a 	sub.w	r3, r3, sl
 800ea48:	4543      	cmp	r3, r8
 800ea4a:	dcee      	bgt.n	800ea2a <_printf_float+0x386>
 800ea4c:	e74a      	b.n	800e8e4 <_printf_float+0x240>
 800ea4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea50:	2a01      	cmp	r2, #1
 800ea52:	dc01      	bgt.n	800ea58 <_printf_float+0x3b4>
 800ea54:	07db      	lsls	r3, r3, #31
 800ea56:	d53a      	bpl.n	800eace <_printf_float+0x42a>
 800ea58:	2301      	movs	r3, #1
 800ea5a:	4642      	mov	r2, r8
 800ea5c:	4631      	mov	r1, r6
 800ea5e:	4628      	mov	r0, r5
 800ea60:	47b8      	blx	r7
 800ea62:	3001      	adds	r0, #1
 800ea64:	f43f ae7b 	beq.w	800e75e <_printf_float+0xba>
 800ea68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea6c:	4631      	mov	r1, r6
 800ea6e:	4628      	mov	r0, r5
 800ea70:	47b8      	blx	r7
 800ea72:	3001      	adds	r0, #1
 800ea74:	f108 0801 	add.w	r8, r8, #1
 800ea78:	f43f ae71 	beq.w	800e75e <_printf_float+0xba>
 800ea7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800ea84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea88:	2300      	movs	r3, #0
 800ea8a:	f7f2 f845 	bl	8000b18 <__aeabi_dcmpeq>
 800ea8e:	b9c8      	cbnz	r0, 800eac4 <_printf_float+0x420>
 800ea90:	4653      	mov	r3, sl
 800ea92:	4642      	mov	r2, r8
 800ea94:	4631      	mov	r1, r6
 800ea96:	4628      	mov	r0, r5
 800ea98:	47b8      	blx	r7
 800ea9a:	3001      	adds	r0, #1
 800ea9c:	d10e      	bne.n	800eabc <_printf_float+0x418>
 800ea9e:	e65e      	b.n	800e75e <_printf_float+0xba>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	4652      	mov	r2, sl
 800eaa4:	4631      	mov	r1, r6
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	47b8      	blx	r7
 800eaaa:	3001      	adds	r0, #1
 800eaac:	f43f ae57 	beq.w	800e75e <_printf_float+0xba>
 800eab0:	f108 0801 	add.w	r8, r8, #1
 800eab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eab6:	3b01      	subs	r3, #1
 800eab8:	4543      	cmp	r3, r8
 800eaba:	dcf1      	bgt.n	800eaa0 <_printf_float+0x3fc>
 800eabc:	464b      	mov	r3, r9
 800eabe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eac2:	e6de      	b.n	800e882 <_printf_float+0x1de>
 800eac4:	f04f 0800 	mov.w	r8, #0
 800eac8:	f104 0a1a 	add.w	sl, r4, #26
 800eacc:	e7f2      	b.n	800eab4 <_printf_float+0x410>
 800eace:	2301      	movs	r3, #1
 800ead0:	e7df      	b.n	800ea92 <_printf_float+0x3ee>
 800ead2:	2301      	movs	r3, #1
 800ead4:	464a      	mov	r2, r9
 800ead6:	4631      	mov	r1, r6
 800ead8:	4628      	mov	r0, r5
 800eada:	47b8      	blx	r7
 800eadc:	3001      	adds	r0, #1
 800eade:	f43f ae3e 	beq.w	800e75e <_printf_float+0xba>
 800eae2:	f108 0801 	add.w	r8, r8, #1
 800eae6:	68e3      	ldr	r3, [r4, #12]
 800eae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eaea:	1a9b      	subs	r3, r3, r2
 800eaec:	4543      	cmp	r3, r8
 800eaee:	dcf0      	bgt.n	800ead2 <_printf_float+0x42e>
 800eaf0:	e6fc      	b.n	800e8ec <_printf_float+0x248>
 800eaf2:	f04f 0800 	mov.w	r8, #0
 800eaf6:	f104 0919 	add.w	r9, r4, #25
 800eafa:	e7f4      	b.n	800eae6 <_printf_float+0x442>
 800eafc:	2900      	cmp	r1, #0
 800eafe:	f43f ae8b 	beq.w	800e818 <_printf_float+0x174>
 800eb02:	2300      	movs	r3, #0
 800eb04:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800eb08:	ab09      	add	r3, sp, #36	; 0x24
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	ec49 8b10 	vmov	d0, r8, r9
 800eb10:	6022      	str	r2, [r4, #0]
 800eb12:	f8cd a004 	str.w	sl, [sp, #4]
 800eb16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	f7ff fd2e 	bl	800e57c <__cvt>
 800eb20:	4680      	mov	r8, r0
 800eb22:	e648      	b.n	800e7b6 <_printf_float+0x112>

0800eb24 <_printf_common>:
 800eb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb28:	4691      	mov	r9, r2
 800eb2a:	461f      	mov	r7, r3
 800eb2c:	688a      	ldr	r2, [r1, #8]
 800eb2e:	690b      	ldr	r3, [r1, #16]
 800eb30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb34:	4293      	cmp	r3, r2
 800eb36:	bfb8      	it	lt
 800eb38:	4613      	movlt	r3, r2
 800eb3a:	f8c9 3000 	str.w	r3, [r9]
 800eb3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb42:	4606      	mov	r6, r0
 800eb44:	460c      	mov	r4, r1
 800eb46:	b112      	cbz	r2, 800eb4e <_printf_common+0x2a>
 800eb48:	3301      	adds	r3, #1
 800eb4a:	f8c9 3000 	str.w	r3, [r9]
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	0699      	lsls	r1, r3, #26
 800eb52:	bf42      	ittt	mi
 800eb54:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eb58:	3302      	addmi	r3, #2
 800eb5a:	f8c9 3000 	strmi.w	r3, [r9]
 800eb5e:	6825      	ldr	r5, [r4, #0]
 800eb60:	f015 0506 	ands.w	r5, r5, #6
 800eb64:	d107      	bne.n	800eb76 <_printf_common+0x52>
 800eb66:	f104 0a19 	add.w	sl, r4, #25
 800eb6a:	68e3      	ldr	r3, [r4, #12]
 800eb6c:	f8d9 2000 	ldr.w	r2, [r9]
 800eb70:	1a9b      	subs	r3, r3, r2
 800eb72:	42ab      	cmp	r3, r5
 800eb74:	dc28      	bgt.n	800ebc8 <_printf_common+0xa4>
 800eb76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eb7a:	6822      	ldr	r2, [r4, #0]
 800eb7c:	3300      	adds	r3, #0
 800eb7e:	bf18      	it	ne
 800eb80:	2301      	movne	r3, #1
 800eb82:	0692      	lsls	r2, r2, #26
 800eb84:	d42d      	bmi.n	800ebe2 <_printf_common+0xbe>
 800eb86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	47c0      	blx	r8
 800eb90:	3001      	adds	r0, #1
 800eb92:	d020      	beq.n	800ebd6 <_printf_common+0xb2>
 800eb94:	6823      	ldr	r3, [r4, #0]
 800eb96:	68e5      	ldr	r5, [r4, #12]
 800eb98:	f8d9 2000 	ldr.w	r2, [r9]
 800eb9c:	f003 0306 	and.w	r3, r3, #6
 800eba0:	2b04      	cmp	r3, #4
 800eba2:	bf08      	it	eq
 800eba4:	1aad      	subeq	r5, r5, r2
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	6922      	ldr	r2, [r4, #16]
 800ebaa:	bf0c      	ite	eq
 800ebac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebb0:	2500      	movne	r5, #0
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	bfc4      	itt	gt
 800ebb6:	1a9b      	subgt	r3, r3, r2
 800ebb8:	18ed      	addgt	r5, r5, r3
 800ebba:	f04f 0900 	mov.w	r9, #0
 800ebbe:	341a      	adds	r4, #26
 800ebc0:	454d      	cmp	r5, r9
 800ebc2:	d11a      	bne.n	800ebfa <_printf_common+0xd6>
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	e008      	b.n	800ebda <_printf_common+0xb6>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	4652      	mov	r2, sl
 800ebcc:	4639      	mov	r1, r7
 800ebce:	4630      	mov	r0, r6
 800ebd0:	47c0      	blx	r8
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	d103      	bne.n	800ebde <_printf_common+0xba>
 800ebd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebde:	3501      	adds	r5, #1
 800ebe0:	e7c3      	b.n	800eb6a <_printf_common+0x46>
 800ebe2:	18e1      	adds	r1, r4, r3
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	2030      	movs	r0, #48	; 0x30
 800ebe8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebec:	4422      	add	r2, r4
 800ebee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebf6:	3302      	adds	r3, #2
 800ebf8:	e7c5      	b.n	800eb86 <_printf_common+0x62>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	4622      	mov	r2, r4
 800ebfe:	4639      	mov	r1, r7
 800ec00:	4630      	mov	r0, r6
 800ec02:	47c0      	blx	r8
 800ec04:	3001      	adds	r0, #1
 800ec06:	d0e6      	beq.n	800ebd6 <_printf_common+0xb2>
 800ec08:	f109 0901 	add.w	r9, r9, #1
 800ec0c:	e7d8      	b.n	800ebc0 <_printf_common+0x9c>
	...

0800ec10 <_printf_i>:
 800ec10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ec18:	460c      	mov	r4, r1
 800ec1a:	7e09      	ldrb	r1, [r1, #24]
 800ec1c:	b085      	sub	sp, #20
 800ec1e:	296e      	cmp	r1, #110	; 0x6e
 800ec20:	4617      	mov	r7, r2
 800ec22:	4606      	mov	r6, r0
 800ec24:	4698      	mov	r8, r3
 800ec26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec28:	f000 80b3 	beq.w	800ed92 <_printf_i+0x182>
 800ec2c:	d822      	bhi.n	800ec74 <_printf_i+0x64>
 800ec2e:	2963      	cmp	r1, #99	; 0x63
 800ec30:	d036      	beq.n	800eca0 <_printf_i+0x90>
 800ec32:	d80a      	bhi.n	800ec4a <_printf_i+0x3a>
 800ec34:	2900      	cmp	r1, #0
 800ec36:	f000 80b9 	beq.w	800edac <_printf_i+0x19c>
 800ec3a:	2958      	cmp	r1, #88	; 0x58
 800ec3c:	f000 8083 	beq.w	800ed46 <_printf_i+0x136>
 800ec40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ec48:	e032      	b.n	800ecb0 <_printf_i+0xa0>
 800ec4a:	2964      	cmp	r1, #100	; 0x64
 800ec4c:	d001      	beq.n	800ec52 <_printf_i+0x42>
 800ec4e:	2969      	cmp	r1, #105	; 0x69
 800ec50:	d1f6      	bne.n	800ec40 <_printf_i+0x30>
 800ec52:	6820      	ldr	r0, [r4, #0]
 800ec54:	6813      	ldr	r3, [r2, #0]
 800ec56:	0605      	lsls	r5, r0, #24
 800ec58:	f103 0104 	add.w	r1, r3, #4
 800ec5c:	d52a      	bpl.n	800ecb4 <_printf_i+0xa4>
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6011      	str	r1, [r2, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	da03      	bge.n	800ec6e <_printf_i+0x5e>
 800ec66:	222d      	movs	r2, #45	; 0x2d
 800ec68:	425b      	negs	r3, r3
 800ec6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ec6e:	486f      	ldr	r0, [pc, #444]	; (800ee2c <_printf_i+0x21c>)
 800ec70:	220a      	movs	r2, #10
 800ec72:	e039      	b.n	800ece8 <_printf_i+0xd8>
 800ec74:	2973      	cmp	r1, #115	; 0x73
 800ec76:	f000 809d 	beq.w	800edb4 <_printf_i+0x1a4>
 800ec7a:	d808      	bhi.n	800ec8e <_printf_i+0x7e>
 800ec7c:	296f      	cmp	r1, #111	; 0x6f
 800ec7e:	d020      	beq.n	800ecc2 <_printf_i+0xb2>
 800ec80:	2970      	cmp	r1, #112	; 0x70
 800ec82:	d1dd      	bne.n	800ec40 <_printf_i+0x30>
 800ec84:	6823      	ldr	r3, [r4, #0]
 800ec86:	f043 0320 	orr.w	r3, r3, #32
 800ec8a:	6023      	str	r3, [r4, #0]
 800ec8c:	e003      	b.n	800ec96 <_printf_i+0x86>
 800ec8e:	2975      	cmp	r1, #117	; 0x75
 800ec90:	d017      	beq.n	800ecc2 <_printf_i+0xb2>
 800ec92:	2978      	cmp	r1, #120	; 0x78
 800ec94:	d1d4      	bne.n	800ec40 <_printf_i+0x30>
 800ec96:	2378      	movs	r3, #120	; 0x78
 800ec98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec9c:	4864      	ldr	r0, [pc, #400]	; (800ee30 <_printf_i+0x220>)
 800ec9e:	e055      	b.n	800ed4c <_printf_i+0x13c>
 800eca0:	6813      	ldr	r3, [r2, #0]
 800eca2:	1d19      	adds	r1, r3, #4
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	6011      	str	r1, [r2, #0]
 800eca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	e08c      	b.n	800edce <_printf_i+0x1be>
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6011      	str	r1, [r2, #0]
 800ecb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ecbc:	bf18      	it	ne
 800ecbe:	b21b      	sxthne	r3, r3
 800ecc0:	e7cf      	b.n	800ec62 <_printf_i+0x52>
 800ecc2:	6813      	ldr	r3, [r2, #0]
 800ecc4:	6825      	ldr	r5, [r4, #0]
 800ecc6:	1d18      	adds	r0, r3, #4
 800ecc8:	6010      	str	r0, [r2, #0]
 800ecca:	0628      	lsls	r0, r5, #24
 800eccc:	d501      	bpl.n	800ecd2 <_printf_i+0xc2>
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	e002      	b.n	800ecd8 <_printf_i+0xc8>
 800ecd2:	0668      	lsls	r0, r5, #25
 800ecd4:	d5fb      	bpl.n	800ecce <_printf_i+0xbe>
 800ecd6:	881b      	ldrh	r3, [r3, #0]
 800ecd8:	4854      	ldr	r0, [pc, #336]	; (800ee2c <_printf_i+0x21c>)
 800ecda:	296f      	cmp	r1, #111	; 0x6f
 800ecdc:	bf14      	ite	ne
 800ecde:	220a      	movne	r2, #10
 800ece0:	2208      	moveq	r2, #8
 800ece2:	2100      	movs	r1, #0
 800ece4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ece8:	6865      	ldr	r5, [r4, #4]
 800ecea:	60a5      	str	r5, [r4, #8]
 800ecec:	2d00      	cmp	r5, #0
 800ecee:	f2c0 8095 	blt.w	800ee1c <_printf_i+0x20c>
 800ecf2:	6821      	ldr	r1, [r4, #0]
 800ecf4:	f021 0104 	bic.w	r1, r1, #4
 800ecf8:	6021      	str	r1, [r4, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d13d      	bne.n	800ed7a <_printf_i+0x16a>
 800ecfe:	2d00      	cmp	r5, #0
 800ed00:	f040 808e 	bne.w	800ee20 <_printf_i+0x210>
 800ed04:	4665      	mov	r5, ip
 800ed06:	2a08      	cmp	r2, #8
 800ed08:	d10b      	bne.n	800ed22 <_printf_i+0x112>
 800ed0a:	6823      	ldr	r3, [r4, #0]
 800ed0c:	07db      	lsls	r3, r3, #31
 800ed0e:	d508      	bpl.n	800ed22 <_printf_i+0x112>
 800ed10:	6923      	ldr	r3, [r4, #16]
 800ed12:	6862      	ldr	r2, [r4, #4]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	bfde      	ittt	le
 800ed18:	2330      	movle	r3, #48	; 0x30
 800ed1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed1e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ed22:	ebac 0305 	sub.w	r3, ip, r5
 800ed26:	6123      	str	r3, [r4, #16]
 800ed28:	f8cd 8000 	str.w	r8, [sp]
 800ed2c:	463b      	mov	r3, r7
 800ed2e:	aa03      	add	r2, sp, #12
 800ed30:	4621      	mov	r1, r4
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7ff fef6 	bl	800eb24 <_printf_common>
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d14d      	bne.n	800edd8 <_printf_i+0x1c8>
 800ed3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed40:	b005      	add	sp, #20
 800ed42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed46:	4839      	ldr	r0, [pc, #228]	; (800ee2c <_printf_i+0x21c>)
 800ed48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ed4c:	6813      	ldr	r3, [r2, #0]
 800ed4e:	6821      	ldr	r1, [r4, #0]
 800ed50:	1d1d      	adds	r5, r3, #4
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	6015      	str	r5, [r2, #0]
 800ed56:	060a      	lsls	r2, r1, #24
 800ed58:	d50b      	bpl.n	800ed72 <_printf_i+0x162>
 800ed5a:	07ca      	lsls	r2, r1, #31
 800ed5c:	bf44      	itt	mi
 800ed5e:	f041 0120 	orrmi.w	r1, r1, #32
 800ed62:	6021      	strmi	r1, [r4, #0]
 800ed64:	b91b      	cbnz	r3, 800ed6e <_printf_i+0x15e>
 800ed66:	6822      	ldr	r2, [r4, #0]
 800ed68:	f022 0220 	bic.w	r2, r2, #32
 800ed6c:	6022      	str	r2, [r4, #0]
 800ed6e:	2210      	movs	r2, #16
 800ed70:	e7b7      	b.n	800ece2 <_printf_i+0xd2>
 800ed72:	064d      	lsls	r5, r1, #25
 800ed74:	bf48      	it	mi
 800ed76:	b29b      	uxthmi	r3, r3
 800ed78:	e7ef      	b.n	800ed5a <_printf_i+0x14a>
 800ed7a:	4665      	mov	r5, ip
 800ed7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed80:	fb02 3311 	mls	r3, r2, r1, r3
 800ed84:	5cc3      	ldrb	r3, [r0, r3]
 800ed86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	2900      	cmp	r1, #0
 800ed8e:	d1f5      	bne.n	800ed7c <_printf_i+0x16c>
 800ed90:	e7b9      	b.n	800ed06 <_printf_i+0xf6>
 800ed92:	6813      	ldr	r3, [r2, #0]
 800ed94:	6825      	ldr	r5, [r4, #0]
 800ed96:	6961      	ldr	r1, [r4, #20]
 800ed98:	1d18      	adds	r0, r3, #4
 800ed9a:	6010      	str	r0, [r2, #0]
 800ed9c:	0628      	lsls	r0, r5, #24
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	d501      	bpl.n	800eda6 <_printf_i+0x196>
 800eda2:	6019      	str	r1, [r3, #0]
 800eda4:	e002      	b.n	800edac <_printf_i+0x19c>
 800eda6:	066a      	lsls	r2, r5, #25
 800eda8:	d5fb      	bpl.n	800eda2 <_printf_i+0x192>
 800edaa:	8019      	strh	r1, [r3, #0]
 800edac:	2300      	movs	r3, #0
 800edae:	6123      	str	r3, [r4, #16]
 800edb0:	4665      	mov	r5, ip
 800edb2:	e7b9      	b.n	800ed28 <_printf_i+0x118>
 800edb4:	6813      	ldr	r3, [r2, #0]
 800edb6:	1d19      	adds	r1, r3, #4
 800edb8:	6011      	str	r1, [r2, #0]
 800edba:	681d      	ldr	r5, [r3, #0]
 800edbc:	6862      	ldr	r2, [r4, #4]
 800edbe:	2100      	movs	r1, #0
 800edc0:	4628      	mov	r0, r5
 800edc2:	f7f1 fa35 	bl	8000230 <memchr>
 800edc6:	b108      	cbz	r0, 800edcc <_printf_i+0x1bc>
 800edc8:	1b40      	subs	r0, r0, r5
 800edca:	6060      	str	r0, [r4, #4]
 800edcc:	6863      	ldr	r3, [r4, #4]
 800edce:	6123      	str	r3, [r4, #16]
 800edd0:	2300      	movs	r3, #0
 800edd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edd6:	e7a7      	b.n	800ed28 <_printf_i+0x118>
 800edd8:	6923      	ldr	r3, [r4, #16]
 800edda:	462a      	mov	r2, r5
 800eddc:	4639      	mov	r1, r7
 800edde:	4630      	mov	r0, r6
 800ede0:	47c0      	blx	r8
 800ede2:	3001      	adds	r0, #1
 800ede4:	d0aa      	beq.n	800ed3c <_printf_i+0x12c>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	079b      	lsls	r3, r3, #30
 800edea:	d413      	bmi.n	800ee14 <_printf_i+0x204>
 800edec:	68e0      	ldr	r0, [r4, #12]
 800edee:	9b03      	ldr	r3, [sp, #12]
 800edf0:	4298      	cmp	r0, r3
 800edf2:	bfb8      	it	lt
 800edf4:	4618      	movlt	r0, r3
 800edf6:	e7a3      	b.n	800ed40 <_printf_i+0x130>
 800edf8:	2301      	movs	r3, #1
 800edfa:	464a      	mov	r2, r9
 800edfc:	4639      	mov	r1, r7
 800edfe:	4630      	mov	r0, r6
 800ee00:	47c0      	blx	r8
 800ee02:	3001      	adds	r0, #1
 800ee04:	d09a      	beq.n	800ed3c <_printf_i+0x12c>
 800ee06:	3501      	adds	r5, #1
 800ee08:	68e3      	ldr	r3, [r4, #12]
 800ee0a:	9a03      	ldr	r2, [sp, #12]
 800ee0c:	1a9b      	subs	r3, r3, r2
 800ee0e:	42ab      	cmp	r3, r5
 800ee10:	dcf2      	bgt.n	800edf8 <_printf_i+0x1e8>
 800ee12:	e7eb      	b.n	800edec <_printf_i+0x1dc>
 800ee14:	2500      	movs	r5, #0
 800ee16:	f104 0919 	add.w	r9, r4, #25
 800ee1a:	e7f5      	b.n	800ee08 <_printf_i+0x1f8>
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d1ac      	bne.n	800ed7a <_printf_i+0x16a>
 800ee20:	7803      	ldrb	r3, [r0, #0]
 800ee22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee2a:	e76c      	b.n	800ed06 <_printf_i+0xf6>
 800ee2c:	0801363e 	.word	0x0801363e
 800ee30:	0801364f 	.word	0x0801364f

0800ee34 <_puts_r>:
 800ee34:	b570      	push	{r4, r5, r6, lr}
 800ee36:	460e      	mov	r6, r1
 800ee38:	4605      	mov	r5, r0
 800ee3a:	b118      	cbz	r0, 800ee44 <_puts_r+0x10>
 800ee3c:	6983      	ldr	r3, [r0, #24]
 800ee3e:	b90b      	cbnz	r3, 800ee44 <_puts_r+0x10>
 800ee40:	f001 f896 	bl	800ff70 <__sinit>
 800ee44:	69ab      	ldr	r3, [r5, #24]
 800ee46:	68ac      	ldr	r4, [r5, #8]
 800ee48:	b913      	cbnz	r3, 800ee50 <_puts_r+0x1c>
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f001 f890 	bl	800ff70 <__sinit>
 800ee50:	4b23      	ldr	r3, [pc, #140]	; (800eee0 <_puts_r+0xac>)
 800ee52:	429c      	cmp	r4, r3
 800ee54:	d117      	bne.n	800ee86 <_puts_r+0x52>
 800ee56:	686c      	ldr	r4, [r5, #4]
 800ee58:	89a3      	ldrh	r3, [r4, #12]
 800ee5a:	071b      	lsls	r3, r3, #28
 800ee5c:	d51d      	bpl.n	800ee9a <_puts_r+0x66>
 800ee5e:	6923      	ldr	r3, [r4, #16]
 800ee60:	b1db      	cbz	r3, 800ee9a <_puts_r+0x66>
 800ee62:	3e01      	subs	r6, #1
 800ee64:	68a3      	ldr	r3, [r4, #8]
 800ee66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee6a:	3b01      	subs	r3, #1
 800ee6c:	60a3      	str	r3, [r4, #8]
 800ee6e:	b9e9      	cbnz	r1, 800eeac <_puts_r+0x78>
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	da2e      	bge.n	800eed2 <_puts_r+0x9e>
 800ee74:	4622      	mov	r2, r4
 800ee76:	210a      	movs	r1, #10
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f000 f883 	bl	800ef84 <__swbuf_r>
 800ee7e:	3001      	adds	r0, #1
 800ee80:	d011      	beq.n	800eea6 <_puts_r+0x72>
 800ee82:	200a      	movs	r0, #10
 800ee84:	e011      	b.n	800eeaa <_puts_r+0x76>
 800ee86:	4b17      	ldr	r3, [pc, #92]	; (800eee4 <_puts_r+0xb0>)
 800ee88:	429c      	cmp	r4, r3
 800ee8a:	d101      	bne.n	800ee90 <_puts_r+0x5c>
 800ee8c:	68ac      	ldr	r4, [r5, #8]
 800ee8e:	e7e3      	b.n	800ee58 <_puts_r+0x24>
 800ee90:	4b15      	ldr	r3, [pc, #84]	; (800eee8 <_puts_r+0xb4>)
 800ee92:	429c      	cmp	r4, r3
 800ee94:	bf08      	it	eq
 800ee96:	68ec      	ldreq	r4, [r5, #12]
 800ee98:	e7de      	b.n	800ee58 <_puts_r+0x24>
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	f000 f8c3 	bl	800f028 <__swsetup_r>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	d0dd      	beq.n	800ee62 <_puts_r+0x2e>
 800eea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	da04      	bge.n	800eeba <_puts_r+0x86>
 800eeb0:	69a2      	ldr	r2, [r4, #24]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	dc06      	bgt.n	800eec4 <_puts_r+0x90>
 800eeb6:	290a      	cmp	r1, #10
 800eeb8:	d004      	beq.n	800eec4 <_puts_r+0x90>
 800eeba:	6823      	ldr	r3, [r4, #0]
 800eebc:	1c5a      	adds	r2, r3, #1
 800eebe:	6022      	str	r2, [r4, #0]
 800eec0:	7019      	strb	r1, [r3, #0]
 800eec2:	e7cf      	b.n	800ee64 <_puts_r+0x30>
 800eec4:	4622      	mov	r2, r4
 800eec6:	4628      	mov	r0, r5
 800eec8:	f000 f85c 	bl	800ef84 <__swbuf_r>
 800eecc:	3001      	adds	r0, #1
 800eece:	d1c9      	bne.n	800ee64 <_puts_r+0x30>
 800eed0:	e7e9      	b.n	800eea6 <_puts_r+0x72>
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	200a      	movs	r0, #10
 800eed6:	1c5a      	adds	r2, r3, #1
 800eed8:	6022      	str	r2, [r4, #0]
 800eeda:	7018      	strb	r0, [r3, #0]
 800eedc:	e7e5      	b.n	800eeaa <_puts_r+0x76>
 800eede:	bf00      	nop
 800eee0:	08013690 	.word	0x08013690
 800eee4:	080136b0 	.word	0x080136b0
 800eee8:	08013670 	.word	0x08013670

0800eeec <puts>:
 800eeec:	4b02      	ldr	r3, [pc, #8]	; (800eef8 <puts+0xc>)
 800eeee:	4601      	mov	r1, r0
 800eef0:	6818      	ldr	r0, [r3, #0]
 800eef2:	f7ff bf9f 	b.w	800ee34 <_puts_r>
 800eef6:	bf00      	nop
 800eef8:	200017f4 	.word	0x200017f4

0800eefc <sniprintf>:
 800eefc:	b40c      	push	{r2, r3}
 800eefe:	b530      	push	{r4, r5, lr}
 800ef00:	4b17      	ldr	r3, [pc, #92]	; (800ef60 <sniprintf+0x64>)
 800ef02:	1e0c      	subs	r4, r1, #0
 800ef04:	b09d      	sub	sp, #116	; 0x74
 800ef06:	681d      	ldr	r5, [r3, #0]
 800ef08:	da08      	bge.n	800ef1c <sniprintf+0x20>
 800ef0a:	238b      	movs	r3, #139	; 0x8b
 800ef0c:	602b      	str	r3, [r5, #0]
 800ef0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef12:	b01d      	add	sp, #116	; 0x74
 800ef14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef18:	b002      	add	sp, #8
 800ef1a:	4770      	bx	lr
 800ef1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef20:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef24:	bf14      	ite	ne
 800ef26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ef2a:	4623      	moveq	r3, r4
 800ef2c:	9304      	str	r3, [sp, #16]
 800ef2e:	9307      	str	r3, [sp, #28]
 800ef30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef34:	9002      	str	r0, [sp, #8]
 800ef36:	9006      	str	r0, [sp, #24]
 800ef38:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef3e:	ab21      	add	r3, sp, #132	; 0x84
 800ef40:	a902      	add	r1, sp, #8
 800ef42:	4628      	mov	r0, r5
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	f001 fd0d 	bl	8010964 <_svfiprintf_r>
 800ef4a:	1c43      	adds	r3, r0, #1
 800ef4c:	bfbc      	itt	lt
 800ef4e:	238b      	movlt	r3, #139	; 0x8b
 800ef50:	602b      	strlt	r3, [r5, #0]
 800ef52:	2c00      	cmp	r4, #0
 800ef54:	d0dd      	beq.n	800ef12 <sniprintf+0x16>
 800ef56:	9b02      	ldr	r3, [sp, #8]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	701a      	strb	r2, [r3, #0]
 800ef5c:	e7d9      	b.n	800ef12 <sniprintf+0x16>
 800ef5e:	bf00      	nop
 800ef60:	200017f4 	.word	0x200017f4

0800ef64 <strcat>:
 800ef64:	b510      	push	{r4, lr}
 800ef66:	4603      	mov	r3, r0
 800ef68:	781a      	ldrb	r2, [r3, #0]
 800ef6a:	1c5c      	adds	r4, r3, #1
 800ef6c:	b93a      	cbnz	r2, 800ef7e <strcat+0x1a>
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef74:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef78:	2a00      	cmp	r2, #0
 800ef7a:	d1f9      	bne.n	800ef70 <strcat+0xc>
 800ef7c:	bd10      	pop	{r4, pc}
 800ef7e:	4623      	mov	r3, r4
 800ef80:	e7f2      	b.n	800ef68 <strcat+0x4>
	...

0800ef84 <__swbuf_r>:
 800ef84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef86:	460e      	mov	r6, r1
 800ef88:	4614      	mov	r4, r2
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	b118      	cbz	r0, 800ef96 <__swbuf_r+0x12>
 800ef8e:	6983      	ldr	r3, [r0, #24]
 800ef90:	b90b      	cbnz	r3, 800ef96 <__swbuf_r+0x12>
 800ef92:	f000 ffed 	bl	800ff70 <__sinit>
 800ef96:	4b21      	ldr	r3, [pc, #132]	; (800f01c <__swbuf_r+0x98>)
 800ef98:	429c      	cmp	r4, r3
 800ef9a:	d12a      	bne.n	800eff2 <__swbuf_r+0x6e>
 800ef9c:	686c      	ldr	r4, [r5, #4]
 800ef9e:	69a3      	ldr	r3, [r4, #24]
 800efa0:	60a3      	str	r3, [r4, #8]
 800efa2:	89a3      	ldrh	r3, [r4, #12]
 800efa4:	071a      	lsls	r2, r3, #28
 800efa6:	d52e      	bpl.n	800f006 <__swbuf_r+0x82>
 800efa8:	6923      	ldr	r3, [r4, #16]
 800efaa:	b363      	cbz	r3, 800f006 <__swbuf_r+0x82>
 800efac:	6923      	ldr	r3, [r4, #16]
 800efae:	6820      	ldr	r0, [r4, #0]
 800efb0:	1ac0      	subs	r0, r0, r3
 800efb2:	6963      	ldr	r3, [r4, #20]
 800efb4:	b2f6      	uxtb	r6, r6
 800efb6:	4283      	cmp	r3, r0
 800efb8:	4637      	mov	r7, r6
 800efba:	dc04      	bgt.n	800efc6 <__swbuf_r+0x42>
 800efbc:	4621      	mov	r1, r4
 800efbe:	4628      	mov	r0, r5
 800efc0:	f000 ff6c 	bl	800fe9c <_fflush_r>
 800efc4:	bb28      	cbnz	r0, 800f012 <__swbuf_r+0x8e>
 800efc6:	68a3      	ldr	r3, [r4, #8]
 800efc8:	3b01      	subs	r3, #1
 800efca:	60a3      	str	r3, [r4, #8]
 800efcc:	6823      	ldr	r3, [r4, #0]
 800efce:	1c5a      	adds	r2, r3, #1
 800efd0:	6022      	str	r2, [r4, #0]
 800efd2:	701e      	strb	r6, [r3, #0]
 800efd4:	6963      	ldr	r3, [r4, #20]
 800efd6:	3001      	adds	r0, #1
 800efd8:	4283      	cmp	r3, r0
 800efda:	d004      	beq.n	800efe6 <__swbuf_r+0x62>
 800efdc:	89a3      	ldrh	r3, [r4, #12]
 800efde:	07db      	lsls	r3, r3, #31
 800efe0:	d519      	bpl.n	800f016 <__swbuf_r+0x92>
 800efe2:	2e0a      	cmp	r6, #10
 800efe4:	d117      	bne.n	800f016 <__swbuf_r+0x92>
 800efe6:	4621      	mov	r1, r4
 800efe8:	4628      	mov	r0, r5
 800efea:	f000 ff57 	bl	800fe9c <_fflush_r>
 800efee:	b190      	cbz	r0, 800f016 <__swbuf_r+0x92>
 800eff0:	e00f      	b.n	800f012 <__swbuf_r+0x8e>
 800eff2:	4b0b      	ldr	r3, [pc, #44]	; (800f020 <__swbuf_r+0x9c>)
 800eff4:	429c      	cmp	r4, r3
 800eff6:	d101      	bne.n	800effc <__swbuf_r+0x78>
 800eff8:	68ac      	ldr	r4, [r5, #8]
 800effa:	e7d0      	b.n	800ef9e <__swbuf_r+0x1a>
 800effc:	4b09      	ldr	r3, [pc, #36]	; (800f024 <__swbuf_r+0xa0>)
 800effe:	429c      	cmp	r4, r3
 800f000:	bf08      	it	eq
 800f002:	68ec      	ldreq	r4, [r5, #12]
 800f004:	e7cb      	b.n	800ef9e <__swbuf_r+0x1a>
 800f006:	4621      	mov	r1, r4
 800f008:	4628      	mov	r0, r5
 800f00a:	f000 f80d 	bl	800f028 <__swsetup_r>
 800f00e:	2800      	cmp	r0, #0
 800f010:	d0cc      	beq.n	800efac <__swbuf_r+0x28>
 800f012:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f016:	4638      	mov	r0, r7
 800f018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f01a:	bf00      	nop
 800f01c:	08013690 	.word	0x08013690
 800f020:	080136b0 	.word	0x080136b0
 800f024:	08013670 	.word	0x08013670

0800f028 <__swsetup_r>:
 800f028:	4b32      	ldr	r3, [pc, #200]	; (800f0f4 <__swsetup_r+0xcc>)
 800f02a:	b570      	push	{r4, r5, r6, lr}
 800f02c:	681d      	ldr	r5, [r3, #0]
 800f02e:	4606      	mov	r6, r0
 800f030:	460c      	mov	r4, r1
 800f032:	b125      	cbz	r5, 800f03e <__swsetup_r+0x16>
 800f034:	69ab      	ldr	r3, [r5, #24]
 800f036:	b913      	cbnz	r3, 800f03e <__swsetup_r+0x16>
 800f038:	4628      	mov	r0, r5
 800f03a:	f000 ff99 	bl	800ff70 <__sinit>
 800f03e:	4b2e      	ldr	r3, [pc, #184]	; (800f0f8 <__swsetup_r+0xd0>)
 800f040:	429c      	cmp	r4, r3
 800f042:	d10f      	bne.n	800f064 <__swsetup_r+0x3c>
 800f044:	686c      	ldr	r4, [r5, #4]
 800f046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	0715      	lsls	r5, r2, #28
 800f04e:	d42c      	bmi.n	800f0aa <__swsetup_r+0x82>
 800f050:	06d0      	lsls	r0, r2, #27
 800f052:	d411      	bmi.n	800f078 <__swsetup_r+0x50>
 800f054:	2209      	movs	r2, #9
 800f056:	6032      	str	r2, [r6, #0]
 800f058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f05c:	81a3      	strh	r3, [r4, #12]
 800f05e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f062:	e03e      	b.n	800f0e2 <__swsetup_r+0xba>
 800f064:	4b25      	ldr	r3, [pc, #148]	; (800f0fc <__swsetup_r+0xd4>)
 800f066:	429c      	cmp	r4, r3
 800f068:	d101      	bne.n	800f06e <__swsetup_r+0x46>
 800f06a:	68ac      	ldr	r4, [r5, #8]
 800f06c:	e7eb      	b.n	800f046 <__swsetup_r+0x1e>
 800f06e:	4b24      	ldr	r3, [pc, #144]	; (800f100 <__swsetup_r+0xd8>)
 800f070:	429c      	cmp	r4, r3
 800f072:	bf08      	it	eq
 800f074:	68ec      	ldreq	r4, [r5, #12]
 800f076:	e7e6      	b.n	800f046 <__swsetup_r+0x1e>
 800f078:	0751      	lsls	r1, r2, #29
 800f07a:	d512      	bpl.n	800f0a2 <__swsetup_r+0x7a>
 800f07c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f07e:	b141      	cbz	r1, 800f092 <__swsetup_r+0x6a>
 800f080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f084:	4299      	cmp	r1, r3
 800f086:	d002      	beq.n	800f08e <__swsetup_r+0x66>
 800f088:	4630      	mov	r0, r6
 800f08a:	f001 fb69 	bl	8010760 <_free_r>
 800f08e:	2300      	movs	r3, #0
 800f090:	6363      	str	r3, [r4, #52]	; 0x34
 800f092:	89a3      	ldrh	r3, [r4, #12]
 800f094:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f098:	81a3      	strh	r3, [r4, #12]
 800f09a:	2300      	movs	r3, #0
 800f09c:	6063      	str	r3, [r4, #4]
 800f09e:	6923      	ldr	r3, [r4, #16]
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	89a3      	ldrh	r3, [r4, #12]
 800f0a4:	f043 0308 	orr.w	r3, r3, #8
 800f0a8:	81a3      	strh	r3, [r4, #12]
 800f0aa:	6923      	ldr	r3, [r4, #16]
 800f0ac:	b94b      	cbnz	r3, 800f0c2 <__swsetup_r+0x9a>
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0b8:	d003      	beq.n	800f0c2 <__swsetup_r+0x9a>
 800f0ba:	4621      	mov	r1, r4
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f001 f813 	bl	80100e8 <__smakebuf_r>
 800f0c2:	89a2      	ldrh	r2, [r4, #12]
 800f0c4:	f012 0301 	ands.w	r3, r2, #1
 800f0c8:	d00c      	beq.n	800f0e4 <__swsetup_r+0xbc>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	60a3      	str	r3, [r4, #8]
 800f0ce:	6963      	ldr	r3, [r4, #20]
 800f0d0:	425b      	negs	r3, r3
 800f0d2:	61a3      	str	r3, [r4, #24]
 800f0d4:	6923      	ldr	r3, [r4, #16]
 800f0d6:	b953      	cbnz	r3, 800f0ee <__swsetup_r+0xc6>
 800f0d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f0e0:	d1ba      	bne.n	800f058 <__swsetup_r+0x30>
 800f0e2:	bd70      	pop	{r4, r5, r6, pc}
 800f0e4:	0792      	lsls	r2, r2, #30
 800f0e6:	bf58      	it	pl
 800f0e8:	6963      	ldrpl	r3, [r4, #20]
 800f0ea:	60a3      	str	r3, [r4, #8]
 800f0ec:	e7f2      	b.n	800f0d4 <__swsetup_r+0xac>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	e7f7      	b.n	800f0e2 <__swsetup_r+0xba>
 800f0f2:	bf00      	nop
 800f0f4:	200017f4 	.word	0x200017f4
 800f0f8:	08013690 	.word	0x08013690
 800f0fc:	080136b0 	.word	0x080136b0
 800f100:	08013670 	.word	0x08013670

0800f104 <quorem>:
 800f104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f108:	6903      	ldr	r3, [r0, #16]
 800f10a:	690c      	ldr	r4, [r1, #16]
 800f10c:	42a3      	cmp	r3, r4
 800f10e:	4680      	mov	r8, r0
 800f110:	f2c0 8082 	blt.w	800f218 <quorem+0x114>
 800f114:	3c01      	subs	r4, #1
 800f116:	f101 0714 	add.w	r7, r1, #20
 800f11a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f11e:	f100 0614 	add.w	r6, r0, #20
 800f122:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f126:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f12a:	eb06 030c 	add.w	r3, r6, ip
 800f12e:	3501      	adds	r5, #1
 800f130:	eb07 090c 	add.w	r9, r7, ip
 800f134:	9301      	str	r3, [sp, #4]
 800f136:	fbb0 f5f5 	udiv	r5, r0, r5
 800f13a:	b395      	cbz	r5, 800f1a2 <quorem+0x9e>
 800f13c:	f04f 0a00 	mov.w	sl, #0
 800f140:	4638      	mov	r0, r7
 800f142:	46b6      	mov	lr, r6
 800f144:	46d3      	mov	fp, sl
 800f146:	f850 2b04 	ldr.w	r2, [r0], #4
 800f14a:	b293      	uxth	r3, r2
 800f14c:	fb05 a303 	mla	r3, r5, r3, sl
 800f150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f154:	b29b      	uxth	r3, r3
 800f156:	ebab 0303 	sub.w	r3, fp, r3
 800f15a:	0c12      	lsrs	r2, r2, #16
 800f15c:	f8de b000 	ldr.w	fp, [lr]
 800f160:	fb05 a202 	mla	r2, r5, r2, sl
 800f164:	fa13 f38b 	uxtah	r3, r3, fp
 800f168:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f16c:	fa1f fb82 	uxth.w	fp, r2
 800f170:	f8de 2000 	ldr.w	r2, [lr]
 800f174:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f182:	4581      	cmp	r9, r0
 800f184:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f188:	f84e 3b04 	str.w	r3, [lr], #4
 800f18c:	d2db      	bcs.n	800f146 <quorem+0x42>
 800f18e:	f856 300c 	ldr.w	r3, [r6, ip]
 800f192:	b933      	cbnz	r3, 800f1a2 <quorem+0x9e>
 800f194:	9b01      	ldr	r3, [sp, #4]
 800f196:	3b04      	subs	r3, #4
 800f198:	429e      	cmp	r6, r3
 800f19a:	461a      	mov	r2, r3
 800f19c:	d330      	bcc.n	800f200 <quorem+0xfc>
 800f19e:	f8c8 4010 	str.w	r4, [r8, #16]
 800f1a2:	4640      	mov	r0, r8
 800f1a4:	f001 fa08 	bl	80105b8 <__mcmp>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	db25      	blt.n	800f1f8 <quorem+0xf4>
 800f1ac:	3501      	adds	r5, #1
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f04f 0c00 	mov.w	ip, #0
 800f1b4:	f857 2b04 	ldr.w	r2, [r7], #4
 800f1b8:	f8d0 e000 	ldr.w	lr, [r0]
 800f1bc:	b293      	uxth	r3, r2
 800f1be:	ebac 0303 	sub.w	r3, ip, r3
 800f1c2:	0c12      	lsrs	r2, r2, #16
 800f1c4:	fa13 f38e 	uxtah	r3, r3, lr
 800f1c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f1cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1d6:	45b9      	cmp	r9, r7
 800f1d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f1dc:	f840 3b04 	str.w	r3, [r0], #4
 800f1e0:	d2e8      	bcs.n	800f1b4 <quorem+0xb0>
 800f1e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f1e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f1ea:	b92a      	cbnz	r2, 800f1f8 <quorem+0xf4>
 800f1ec:	3b04      	subs	r3, #4
 800f1ee:	429e      	cmp	r6, r3
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	d30b      	bcc.n	800f20c <quorem+0x108>
 800f1f4:	f8c8 4010 	str.w	r4, [r8, #16]
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	b003      	add	sp, #12
 800f1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f200:	6812      	ldr	r2, [r2, #0]
 800f202:	3b04      	subs	r3, #4
 800f204:	2a00      	cmp	r2, #0
 800f206:	d1ca      	bne.n	800f19e <quorem+0x9a>
 800f208:	3c01      	subs	r4, #1
 800f20a:	e7c5      	b.n	800f198 <quorem+0x94>
 800f20c:	6812      	ldr	r2, [r2, #0]
 800f20e:	3b04      	subs	r3, #4
 800f210:	2a00      	cmp	r2, #0
 800f212:	d1ef      	bne.n	800f1f4 <quorem+0xf0>
 800f214:	3c01      	subs	r4, #1
 800f216:	e7ea      	b.n	800f1ee <quorem+0xea>
 800f218:	2000      	movs	r0, #0
 800f21a:	e7ee      	b.n	800f1fa <quorem+0xf6>
 800f21c:	0000      	movs	r0, r0
	...

0800f220 <_dtoa_r>:
 800f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f224:	ec57 6b10 	vmov	r6, r7, d0
 800f228:	b097      	sub	sp, #92	; 0x5c
 800f22a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f22c:	9106      	str	r1, [sp, #24]
 800f22e:	4604      	mov	r4, r0
 800f230:	920b      	str	r2, [sp, #44]	; 0x2c
 800f232:	9312      	str	r3, [sp, #72]	; 0x48
 800f234:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f238:	e9cd 6700 	strd	r6, r7, [sp]
 800f23c:	b93d      	cbnz	r5, 800f24e <_dtoa_r+0x2e>
 800f23e:	2010      	movs	r0, #16
 800f240:	f000 ff92 	bl	8010168 <malloc>
 800f244:	6260      	str	r0, [r4, #36]	; 0x24
 800f246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f24a:	6005      	str	r5, [r0, #0]
 800f24c:	60c5      	str	r5, [r0, #12]
 800f24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f250:	6819      	ldr	r1, [r3, #0]
 800f252:	b151      	cbz	r1, 800f26a <_dtoa_r+0x4a>
 800f254:	685a      	ldr	r2, [r3, #4]
 800f256:	604a      	str	r2, [r1, #4]
 800f258:	2301      	movs	r3, #1
 800f25a:	4093      	lsls	r3, r2
 800f25c:	608b      	str	r3, [r1, #8]
 800f25e:	4620      	mov	r0, r4
 800f260:	f000 ffc9 	bl	80101f6 <_Bfree>
 800f264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f266:	2200      	movs	r2, #0
 800f268:	601a      	str	r2, [r3, #0]
 800f26a:	1e3b      	subs	r3, r7, #0
 800f26c:	bfbb      	ittet	lt
 800f26e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f272:	9301      	strlt	r3, [sp, #4]
 800f274:	2300      	movge	r3, #0
 800f276:	2201      	movlt	r2, #1
 800f278:	bfac      	ite	ge
 800f27a:	f8c8 3000 	strge.w	r3, [r8]
 800f27e:	f8c8 2000 	strlt.w	r2, [r8]
 800f282:	4baf      	ldr	r3, [pc, #700]	; (800f540 <_dtoa_r+0x320>)
 800f284:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f288:	ea33 0308 	bics.w	r3, r3, r8
 800f28c:	d114      	bne.n	800f2b8 <_dtoa_r+0x98>
 800f28e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f290:	f242 730f 	movw	r3, #9999	; 0x270f
 800f294:	6013      	str	r3, [r2, #0]
 800f296:	9b00      	ldr	r3, [sp, #0]
 800f298:	b923      	cbnz	r3, 800f2a4 <_dtoa_r+0x84>
 800f29a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	f000 8542 	beq.w	800fd28 <_dtoa_r+0xb08>
 800f2a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f554 <_dtoa_r+0x334>
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 8544 	beq.w	800fd38 <_dtoa_r+0xb18>
 800f2b0:	f10b 0303 	add.w	r3, fp, #3
 800f2b4:	f000 bd3e 	b.w	800fd34 <_dtoa_r+0xb14>
 800f2b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	2300      	movs	r3, #0
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	4639      	mov	r1, r7
 800f2c4:	f7f1 fc28 	bl	8000b18 <__aeabi_dcmpeq>
 800f2c8:	4681      	mov	r9, r0
 800f2ca:	b168      	cbz	r0, 800f2e8 <_dtoa_r+0xc8>
 800f2cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	6013      	str	r3, [r2, #0]
 800f2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f000 8524 	beq.w	800fd22 <_dtoa_r+0xb02>
 800f2da:	4b9a      	ldr	r3, [pc, #616]	; (800f544 <_dtoa_r+0x324>)
 800f2dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f2de:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800f2e2:	6013      	str	r3, [r2, #0]
 800f2e4:	f000 bd28 	b.w	800fd38 <_dtoa_r+0xb18>
 800f2e8:	aa14      	add	r2, sp, #80	; 0x50
 800f2ea:	a915      	add	r1, sp, #84	; 0x54
 800f2ec:	ec47 6b10 	vmov	d0, r6, r7
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f001 f9d8 	bl	80106a6 <__d2b>
 800f2f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f2fa:	9004      	str	r0, [sp, #16]
 800f2fc:	2d00      	cmp	r5, #0
 800f2fe:	d07c      	beq.n	800f3fa <_dtoa_r+0x1da>
 800f300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f304:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f308:	46b2      	mov	sl, r6
 800f30a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f30e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f312:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f316:	2200      	movs	r2, #0
 800f318:	4b8b      	ldr	r3, [pc, #556]	; (800f548 <_dtoa_r+0x328>)
 800f31a:	4650      	mov	r0, sl
 800f31c:	4659      	mov	r1, fp
 800f31e:	f7f0 ffdb 	bl	80002d8 <__aeabi_dsub>
 800f322:	a381      	add	r3, pc, #516	; (adr r3, 800f528 <_dtoa_r+0x308>)
 800f324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f328:	f7f1 f98e 	bl	8000648 <__aeabi_dmul>
 800f32c:	a380      	add	r3, pc, #512	; (adr r3, 800f530 <_dtoa_r+0x310>)
 800f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f332:	f7f0 ffd3 	bl	80002dc <__adddf3>
 800f336:	4606      	mov	r6, r0
 800f338:	4628      	mov	r0, r5
 800f33a:	460f      	mov	r7, r1
 800f33c:	f7f1 f91a 	bl	8000574 <__aeabi_i2d>
 800f340:	a37d      	add	r3, pc, #500	; (adr r3, 800f538 <_dtoa_r+0x318>)
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	f7f1 f97f 	bl	8000648 <__aeabi_dmul>
 800f34a:	4602      	mov	r2, r0
 800f34c:	460b      	mov	r3, r1
 800f34e:	4630      	mov	r0, r6
 800f350:	4639      	mov	r1, r7
 800f352:	f7f0 ffc3 	bl	80002dc <__adddf3>
 800f356:	4606      	mov	r6, r0
 800f358:	460f      	mov	r7, r1
 800f35a:	f7f1 fc25 	bl	8000ba8 <__aeabi_d2iz>
 800f35e:	2200      	movs	r2, #0
 800f360:	4682      	mov	sl, r0
 800f362:	2300      	movs	r3, #0
 800f364:	4630      	mov	r0, r6
 800f366:	4639      	mov	r1, r7
 800f368:	f7f1 fbe0 	bl	8000b2c <__aeabi_dcmplt>
 800f36c:	b148      	cbz	r0, 800f382 <_dtoa_r+0x162>
 800f36e:	4650      	mov	r0, sl
 800f370:	f7f1 f900 	bl	8000574 <__aeabi_i2d>
 800f374:	4632      	mov	r2, r6
 800f376:	463b      	mov	r3, r7
 800f378:	f7f1 fbce 	bl	8000b18 <__aeabi_dcmpeq>
 800f37c:	b908      	cbnz	r0, 800f382 <_dtoa_r+0x162>
 800f37e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f382:	f1ba 0f16 	cmp.w	sl, #22
 800f386:	d859      	bhi.n	800f43c <_dtoa_r+0x21c>
 800f388:	4970      	ldr	r1, [pc, #448]	; (800f54c <_dtoa_r+0x32c>)
 800f38a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f38e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f392:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f396:	f7f1 fbe7 	bl	8000b68 <__aeabi_dcmpgt>
 800f39a:	2800      	cmp	r0, #0
 800f39c:	d050      	beq.n	800f440 <_dtoa_r+0x220>
 800f39e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f3a8:	1b5d      	subs	r5, r3, r5
 800f3aa:	f1b5 0801 	subs.w	r8, r5, #1
 800f3ae:	bf49      	itett	mi
 800f3b0:	f1c5 0301 	rsbmi	r3, r5, #1
 800f3b4:	2300      	movpl	r3, #0
 800f3b6:	9305      	strmi	r3, [sp, #20]
 800f3b8:	f04f 0800 	movmi.w	r8, #0
 800f3bc:	bf58      	it	pl
 800f3be:	9305      	strpl	r3, [sp, #20]
 800f3c0:	f1ba 0f00 	cmp.w	sl, #0
 800f3c4:	db3e      	blt.n	800f444 <_dtoa_r+0x224>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	44d0      	add	r8, sl
 800f3ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f3ce:	9307      	str	r3, [sp, #28]
 800f3d0:	9b06      	ldr	r3, [sp, #24]
 800f3d2:	2b09      	cmp	r3, #9
 800f3d4:	f200 8090 	bhi.w	800f4f8 <_dtoa_r+0x2d8>
 800f3d8:	2b05      	cmp	r3, #5
 800f3da:	bfc4      	itt	gt
 800f3dc:	3b04      	subgt	r3, #4
 800f3de:	9306      	strgt	r3, [sp, #24]
 800f3e0:	9b06      	ldr	r3, [sp, #24]
 800f3e2:	f1a3 0302 	sub.w	r3, r3, #2
 800f3e6:	bfcc      	ite	gt
 800f3e8:	2500      	movgt	r5, #0
 800f3ea:	2501      	movle	r5, #1
 800f3ec:	2b03      	cmp	r3, #3
 800f3ee:	f200 808f 	bhi.w	800f510 <_dtoa_r+0x2f0>
 800f3f2:	e8df f003 	tbb	[pc, r3]
 800f3f6:	7f7d      	.short	0x7f7d
 800f3f8:	7131      	.short	0x7131
 800f3fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f3fe:	441d      	add	r5, r3
 800f400:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f404:	2820      	cmp	r0, #32
 800f406:	dd13      	ble.n	800f430 <_dtoa_r+0x210>
 800f408:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f40c:	9b00      	ldr	r3, [sp, #0]
 800f40e:	fa08 f800 	lsl.w	r8, r8, r0
 800f412:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f416:	fa23 f000 	lsr.w	r0, r3, r0
 800f41a:	ea48 0000 	orr.w	r0, r8, r0
 800f41e:	f7f1 f899 	bl	8000554 <__aeabi_ui2d>
 800f422:	2301      	movs	r3, #1
 800f424:	4682      	mov	sl, r0
 800f426:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f42a:	3d01      	subs	r5, #1
 800f42c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f42e:	e772      	b.n	800f316 <_dtoa_r+0xf6>
 800f430:	9b00      	ldr	r3, [sp, #0]
 800f432:	f1c0 0020 	rsb	r0, r0, #32
 800f436:	fa03 f000 	lsl.w	r0, r3, r0
 800f43a:	e7f0      	b.n	800f41e <_dtoa_r+0x1fe>
 800f43c:	2301      	movs	r3, #1
 800f43e:	e7b1      	b.n	800f3a4 <_dtoa_r+0x184>
 800f440:	900f      	str	r0, [sp, #60]	; 0x3c
 800f442:	e7b0      	b.n	800f3a6 <_dtoa_r+0x186>
 800f444:	9b05      	ldr	r3, [sp, #20]
 800f446:	eba3 030a 	sub.w	r3, r3, sl
 800f44a:	9305      	str	r3, [sp, #20]
 800f44c:	f1ca 0300 	rsb	r3, sl, #0
 800f450:	9307      	str	r3, [sp, #28]
 800f452:	2300      	movs	r3, #0
 800f454:	930e      	str	r3, [sp, #56]	; 0x38
 800f456:	e7bb      	b.n	800f3d0 <_dtoa_r+0x1b0>
 800f458:	2301      	movs	r3, #1
 800f45a:	930a      	str	r3, [sp, #40]	; 0x28
 800f45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f45e:	2b00      	cmp	r3, #0
 800f460:	dd59      	ble.n	800f516 <_dtoa_r+0x2f6>
 800f462:	9302      	str	r3, [sp, #8]
 800f464:	4699      	mov	r9, r3
 800f466:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f468:	2200      	movs	r2, #0
 800f46a:	6072      	str	r2, [r6, #4]
 800f46c:	2204      	movs	r2, #4
 800f46e:	f102 0014 	add.w	r0, r2, #20
 800f472:	4298      	cmp	r0, r3
 800f474:	6871      	ldr	r1, [r6, #4]
 800f476:	d953      	bls.n	800f520 <_dtoa_r+0x300>
 800f478:	4620      	mov	r0, r4
 800f47a:	f000 fe88 	bl	801018e <_Balloc>
 800f47e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f480:	6030      	str	r0, [r6, #0]
 800f482:	f1b9 0f0e 	cmp.w	r9, #14
 800f486:	f8d3 b000 	ldr.w	fp, [r3]
 800f48a:	f200 80e6 	bhi.w	800f65a <_dtoa_r+0x43a>
 800f48e:	2d00      	cmp	r5, #0
 800f490:	f000 80e3 	beq.w	800f65a <_dtoa_r+0x43a>
 800f494:	ed9d 7b00 	vldr	d7, [sp]
 800f498:	f1ba 0f00 	cmp.w	sl, #0
 800f49c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f4a0:	dd74      	ble.n	800f58c <_dtoa_r+0x36c>
 800f4a2:	4a2a      	ldr	r2, [pc, #168]	; (800f54c <_dtoa_r+0x32c>)
 800f4a4:	f00a 030f 	and.w	r3, sl, #15
 800f4a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f4ac:	ed93 7b00 	vldr	d7, [r3]
 800f4b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f4b4:	06f0      	lsls	r0, r6, #27
 800f4b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f4ba:	d565      	bpl.n	800f588 <_dtoa_r+0x368>
 800f4bc:	4b24      	ldr	r3, [pc, #144]	; (800f550 <_dtoa_r+0x330>)
 800f4be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f4c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f4c6:	f7f1 f9e9 	bl	800089c <__aeabi_ddiv>
 800f4ca:	e9cd 0100 	strd	r0, r1, [sp]
 800f4ce:	f006 060f 	and.w	r6, r6, #15
 800f4d2:	2503      	movs	r5, #3
 800f4d4:	4f1e      	ldr	r7, [pc, #120]	; (800f550 <_dtoa_r+0x330>)
 800f4d6:	e04c      	b.n	800f572 <_dtoa_r+0x352>
 800f4d8:	2301      	movs	r3, #1
 800f4da:	930a      	str	r3, [sp, #40]	; 0x28
 800f4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4de:	4453      	add	r3, sl
 800f4e0:	f103 0901 	add.w	r9, r3, #1
 800f4e4:	9302      	str	r3, [sp, #8]
 800f4e6:	464b      	mov	r3, r9
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	bfb8      	it	lt
 800f4ec:	2301      	movlt	r3, #1
 800f4ee:	e7ba      	b.n	800f466 <_dtoa_r+0x246>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	e7b2      	b.n	800f45a <_dtoa_r+0x23a>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e7f0      	b.n	800f4da <_dtoa_r+0x2ba>
 800f4f8:	2501      	movs	r5, #1
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	9306      	str	r3, [sp, #24]
 800f4fe:	950a      	str	r5, [sp, #40]	; 0x28
 800f500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f504:	9302      	str	r3, [sp, #8]
 800f506:	4699      	mov	r9, r3
 800f508:	2200      	movs	r2, #0
 800f50a:	2312      	movs	r3, #18
 800f50c:	920b      	str	r2, [sp, #44]	; 0x2c
 800f50e:	e7aa      	b.n	800f466 <_dtoa_r+0x246>
 800f510:	2301      	movs	r3, #1
 800f512:	930a      	str	r3, [sp, #40]	; 0x28
 800f514:	e7f4      	b.n	800f500 <_dtoa_r+0x2e0>
 800f516:	2301      	movs	r3, #1
 800f518:	9302      	str	r3, [sp, #8]
 800f51a:	4699      	mov	r9, r3
 800f51c:	461a      	mov	r2, r3
 800f51e:	e7f5      	b.n	800f50c <_dtoa_r+0x2ec>
 800f520:	3101      	adds	r1, #1
 800f522:	6071      	str	r1, [r6, #4]
 800f524:	0052      	lsls	r2, r2, #1
 800f526:	e7a2      	b.n	800f46e <_dtoa_r+0x24e>
 800f528:	636f4361 	.word	0x636f4361
 800f52c:	3fd287a7 	.word	0x3fd287a7
 800f530:	8b60c8b3 	.word	0x8b60c8b3
 800f534:	3fc68a28 	.word	0x3fc68a28
 800f538:	509f79fb 	.word	0x509f79fb
 800f53c:	3fd34413 	.word	0x3fd34413
 800f540:	7ff00000 	.word	0x7ff00000
 800f544:	0801363d 	.word	0x0801363d
 800f548:	3ff80000 	.word	0x3ff80000
 800f54c:	080136f8 	.word	0x080136f8
 800f550:	080136d0 	.word	0x080136d0
 800f554:	08013669 	.word	0x08013669
 800f558:	07f1      	lsls	r1, r6, #31
 800f55a:	d508      	bpl.n	800f56e <_dtoa_r+0x34e>
 800f55c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f560:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f564:	f7f1 f870 	bl	8000648 <__aeabi_dmul>
 800f568:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f56c:	3501      	adds	r5, #1
 800f56e:	1076      	asrs	r6, r6, #1
 800f570:	3708      	adds	r7, #8
 800f572:	2e00      	cmp	r6, #0
 800f574:	d1f0      	bne.n	800f558 <_dtoa_r+0x338>
 800f576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f57a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f57e:	f7f1 f98d 	bl	800089c <__aeabi_ddiv>
 800f582:	e9cd 0100 	strd	r0, r1, [sp]
 800f586:	e01a      	b.n	800f5be <_dtoa_r+0x39e>
 800f588:	2502      	movs	r5, #2
 800f58a:	e7a3      	b.n	800f4d4 <_dtoa_r+0x2b4>
 800f58c:	f000 80a0 	beq.w	800f6d0 <_dtoa_r+0x4b0>
 800f590:	f1ca 0600 	rsb	r6, sl, #0
 800f594:	4b9f      	ldr	r3, [pc, #636]	; (800f814 <_dtoa_r+0x5f4>)
 800f596:	4fa0      	ldr	r7, [pc, #640]	; (800f818 <_dtoa_r+0x5f8>)
 800f598:	f006 020f 	and.w	r2, r6, #15
 800f59c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f5a8:	f7f1 f84e 	bl	8000648 <__aeabi_dmul>
 800f5ac:	e9cd 0100 	strd	r0, r1, [sp]
 800f5b0:	1136      	asrs	r6, r6, #4
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	2502      	movs	r5, #2
 800f5b6:	2e00      	cmp	r6, #0
 800f5b8:	d17f      	bne.n	800f6ba <_dtoa_r+0x49a>
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1e1      	bne.n	800f582 <_dtoa_r+0x362>
 800f5be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f000 8087 	beq.w	800f6d4 <_dtoa_r+0x4b4>
 800f5c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	4b93      	ldr	r3, [pc, #588]	; (800f81c <_dtoa_r+0x5fc>)
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	4639      	mov	r1, r7
 800f5d2:	f7f1 faab 	bl	8000b2c <__aeabi_dcmplt>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d07c      	beq.n	800f6d4 <_dtoa_r+0x4b4>
 800f5da:	f1b9 0f00 	cmp.w	r9, #0
 800f5de:	d079      	beq.n	800f6d4 <_dtoa_r+0x4b4>
 800f5e0:	9b02      	ldr	r3, [sp, #8]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	dd35      	ble.n	800f652 <_dtoa_r+0x432>
 800f5e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f5ea:	9308      	str	r3, [sp, #32]
 800f5ec:	4639      	mov	r1, r7
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	4b8b      	ldr	r3, [pc, #556]	; (800f820 <_dtoa_r+0x600>)
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f7f1 f828 	bl	8000648 <__aeabi_dmul>
 800f5f8:	e9cd 0100 	strd	r0, r1, [sp]
 800f5fc:	9f02      	ldr	r7, [sp, #8]
 800f5fe:	3501      	adds	r5, #1
 800f600:	4628      	mov	r0, r5
 800f602:	f7f0 ffb7 	bl	8000574 <__aeabi_i2d>
 800f606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f60a:	f7f1 f81d 	bl	8000648 <__aeabi_dmul>
 800f60e:	2200      	movs	r2, #0
 800f610:	4b84      	ldr	r3, [pc, #528]	; (800f824 <_dtoa_r+0x604>)
 800f612:	f7f0 fe63 	bl	80002dc <__adddf3>
 800f616:	4605      	mov	r5, r0
 800f618:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f61c:	2f00      	cmp	r7, #0
 800f61e:	d15d      	bne.n	800f6dc <_dtoa_r+0x4bc>
 800f620:	2200      	movs	r2, #0
 800f622:	4b81      	ldr	r3, [pc, #516]	; (800f828 <_dtoa_r+0x608>)
 800f624:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f628:	f7f0 fe56 	bl	80002d8 <__aeabi_dsub>
 800f62c:	462a      	mov	r2, r5
 800f62e:	4633      	mov	r3, r6
 800f630:	e9cd 0100 	strd	r0, r1, [sp]
 800f634:	f7f1 fa98 	bl	8000b68 <__aeabi_dcmpgt>
 800f638:	2800      	cmp	r0, #0
 800f63a:	f040 8288 	bne.w	800fb4e <_dtoa_r+0x92e>
 800f63e:	462a      	mov	r2, r5
 800f640:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f644:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f648:	f7f1 fa70 	bl	8000b2c <__aeabi_dcmplt>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	f040 827c 	bne.w	800fb4a <_dtoa_r+0x92a>
 800f652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f656:	e9cd 2300 	strd	r2, r3, [sp]
 800f65a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f2c0 8150 	blt.w	800f902 <_dtoa_r+0x6e2>
 800f662:	f1ba 0f0e 	cmp.w	sl, #14
 800f666:	f300 814c 	bgt.w	800f902 <_dtoa_r+0x6e2>
 800f66a:	4b6a      	ldr	r3, [pc, #424]	; (800f814 <_dtoa_r+0x5f4>)
 800f66c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f670:	ed93 7b00 	vldr	d7, [r3]
 800f674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f676:	2b00      	cmp	r3, #0
 800f678:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f67c:	f280 80d8 	bge.w	800f830 <_dtoa_r+0x610>
 800f680:	f1b9 0f00 	cmp.w	r9, #0
 800f684:	f300 80d4 	bgt.w	800f830 <_dtoa_r+0x610>
 800f688:	f040 825e 	bne.w	800fb48 <_dtoa_r+0x928>
 800f68c:	2200      	movs	r2, #0
 800f68e:	4b66      	ldr	r3, [pc, #408]	; (800f828 <_dtoa_r+0x608>)
 800f690:	ec51 0b17 	vmov	r0, r1, d7
 800f694:	f7f0 ffd8 	bl	8000648 <__aeabi_dmul>
 800f698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f69c:	f7f1 fa5a 	bl	8000b54 <__aeabi_dcmpge>
 800f6a0:	464f      	mov	r7, r9
 800f6a2:	464e      	mov	r6, r9
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	f040 8234 	bne.w	800fb12 <_dtoa_r+0x8f2>
 800f6aa:	2331      	movs	r3, #49	; 0x31
 800f6ac:	f10b 0501 	add.w	r5, fp, #1
 800f6b0:	f88b 3000 	strb.w	r3, [fp]
 800f6b4:	f10a 0a01 	add.w	sl, sl, #1
 800f6b8:	e22f      	b.n	800fb1a <_dtoa_r+0x8fa>
 800f6ba:	07f2      	lsls	r2, r6, #31
 800f6bc:	d505      	bpl.n	800f6ca <_dtoa_r+0x4aa>
 800f6be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6c2:	f7f0 ffc1 	bl	8000648 <__aeabi_dmul>
 800f6c6:	3501      	adds	r5, #1
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	1076      	asrs	r6, r6, #1
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	e772      	b.n	800f5b6 <_dtoa_r+0x396>
 800f6d0:	2502      	movs	r5, #2
 800f6d2:	e774      	b.n	800f5be <_dtoa_r+0x39e>
 800f6d4:	f8cd a020 	str.w	sl, [sp, #32]
 800f6d8:	464f      	mov	r7, r9
 800f6da:	e791      	b.n	800f600 <_dtoa_r+0x3e0>
 800f6dc:	4b4d      	ldr	r3, [pc, #308]	; (800f814 <_dtoa_r+0x5f4>)
 800f6de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f6e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d047      	beq.n	800f77c <_dtoa_r+0x55c>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	494e      	ldr	r1, [pc, #312]	; (800f82c <_dtoa_r+0x60c>)
 800f6f4:	f7f1 f8d2 	bl	800089c <__aeabi_ddiv>
 800f6f8:	462a      	mov	r2, r5
 800f6fa:	4633      	mov	r3, r6
 800f6fc:	f7f0 fdec 	bl	80002d8 <__aeabi_dsub>
 800f700:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f704:	465d      	mov	r5, fp
 800f706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f70a:	f7f1 fa4d 	bl	8000ba8 <__aeabi_d2iz>
 800f70e:	4606      	mov	r6, r0
 800f710:	f7f0 ff30 	bl	8000574 <__aeabi_i2d>
 800f714:	4602      	mov	r2, r0
 800f716:	460b      	mov	r3, r1
 800f718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f71c:	f7f0 fddc 	bl	80002d8 <__aeabi_dsub>
 800f720:	3630      	adds	r6, #48	; 0x30
 800f722:	f805 6b01 	strb.w	r6, [r5], #1
 800f726:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f72a:	e9cd 0100 	strd	r0, r1, [sp]
 800f72e:	f7f1 f9fd 	bl	8000b2c <__aeabi_dcmplt>
 800f732:	2800      	cmp	r0, #0
 800f734:	d163      	bne.n	800f7fe <_dtoa_r+0x5de>
 800f736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f73a:	2000      	movs	r0, #0
 800f73c:	4937      	ldr	r1, [pc, #220]	; (800f81c <_dtoa_r+0x5fc>)
 800f73e:	f7f0 fdcb 	bl	80002d8 <__aeabi_dsub>
 800f742:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f746:	f7f1 f9f1 	bl	8000b2c <__aeabi_dcmplt>
 800f74a:	2800      	cmp	r0, #0
 800f74c:	f040 80b7 	bne.w	800f8be <_dtoa_r+0x69e>
 800f750:	eba5 030b 	sub.w	r3, r5, fp
 800f754:	429f      	cmp	r7, r3
 800f756:	f77f af7c 	ble.w	800f652 <_dtoa_r+0x432>
 800f75a:	2200      	movs	r2, #0
 800f75c:	4b30      	ldr	r3, [pc, #192]	; (800f820 <_dtoa_r+0x600>)
 800f75e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f762:	f7f0 ff71 	bl	8000648 <__aeabi_dmul>
 800f766:	2200      	movs	r2, #0
 800f768:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f76c:	4b2c      	ldr	r3, [pc, #176]	; (800f820 <_dtoa_r+0x600>)
 800f76e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f772:	f7f0 ff69 	bl	8000648 <__aeabi_dmul>
 800f776:	e9cd 0100 	strd	r0, r1, [sp]
 800f77a:	e7c4      	b.n	800f706 <_dtoa_r+0x4e6>
 800f77c:	462a      	mov	r2, r5
 800f77e:	4633      	mov	r3, r6
 800f780:	f7f0 ff62 	bl	8000648 <__aeabi_dmul>
 800f784:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f788:	eb0b 0507 	add.w	r5, fp, r7
 800f78c:	465e      	mov	r6, fp
 800f78e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f792:	f7f1 fa09 	bl	8000ba8 <__aeabi_d2iz>
 800f796:	4607      	mov	r7, r0
 800f798:	f7f0 feec 	bl	8000574 <__aeabi_i2d>
 800f79c:	3730      	adds	r7, #48	; 0x30
 800f79e:	4602      	mov	r2, r0
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7a6:	f7f0 fd97 	bl	80002d8 <__aeabi_dsub>
 800f7aa:	f806 7b01 	strb.w	r7, [r6], #1
 800f7ae:	42ae      	cmp	r6, r5
 800f7b0:	e9cd 0100 	strd	r0, r1, [sp]
 800f7b4:	f04f 0200 	mov.w	r2, #0
 800f7b8:	d126      	bne.n	800f808 <_dtoa_r+0x5e8>
 800f7ba:	4b1c      	ldr	r3, [pc, #112]	; (800f82c <_dtoa_r+0x60c>)
 800f7bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7c0:	f7f0 fd8c 	bl	80002dc <__adddf3>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7cc:	f7f1 f9cc 	bl	8000b68 <__aeabi_dcmpgt>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d174      	bne.n	800f8be <_dtoa_r+0x69e>
 800f7d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f7d8:	2000      	movs	r0, #0
 800f7da:	4914      	ldr	r1, [pc, #80]	; (800f82c <_dtoa_r+0x60c>)
 800f7dc:	f7f0 fd7c 	bl	80002d8 <__aeabi_dsub>
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7e8:	f7f1 f9a0 	bl	8000b2c <__aeabi_dcmplt>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	f43f af30 	beq.w	800f652 <_dtoa_r+0x432>
 800f7f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f7f6:	2b30      	cmp	r3, #48	; 0x30
 800f7f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f7fc:	d002      	beq.n	800f804 <_dtoa_r+0x5e4>
 800f7fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f802:	e04a      	b.n	800f89a <_dtoa_r+0x67a>
 800f804:	4615      	mov	r5, r2
 800f806:	e7f4      	b.n	800f7f2 <_dtoa_r+0x5d2>
 800f808:	4b05      	ldr	r3, [pc, #20]	; (800f820 <_dtoa_r+0x600>)
 800f80a:	f7f0 ff1d 	bl	8000648 <__aeabi_dmul>
 800f80e:	e9cd 0100 	strd	r0, r1, [sp]
 800f812:	e7bc      	b.n	800f78e <_dtoa_r+0x56e>
 800f814:	080136f8 	.word	0x080136f8
 800f818:	080136d0 	.word	0x080136d0
 800f81c:	3ff00000 	.word	0x3ff00000
 800f820:	40240000 	.word	0x40240000
 800f824:	401c0000 	.word	0x401c0000
 800f828:	40140000 	.word	0x40140000
 800f82c:	3fe00000 	.word	0x3fe00000
 800f830:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f834:	465d      	mov	r5, fp
 800f836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f83a:	4630      	mov	r0, r6
 800f83c:	4639      	mov	r1, r7
 800f83e:	f7f1 f82d 	bl	800089c <__aeabi_ddiv>
 800f842:	f7f1 f9b1 	bl	8000ba8 <__aeabi_d2iz>
 800f846:	4680      	mov	r8, r0
 800f848:	f7f0 fe94 	bl	8000574 <__aeabi_i2d>
 800f84c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f850:	f7f0 fefa 	bl	8000648 <__aeabi_dmul>
 800f854:	4602      	mov	r2, r0
 800f856:	460b      	mov	r3, r1
 800f858:	4630      	mov	r0, r6
 800f85a:	4639      	mov	r1, r7
 800f85c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f860:	f7f0 fd3a 	bl	80002d8 <__aeabi_dsub>
 800f864:	f805 6b01 	strb.w	r6, [r5], #1
 800f868:	eba5 060b 	sub.w	r6, r5, fp
 800f86c:	45b1      	cmp	r9, r6
 800f86e:	4602      	mov	r2, r0
 800f870:	460b      	mov	r3, r1
 800f872:	d139      	bne.n	800f8e8 <_dtoa_r+0x6c8>
 800f874:	f7f0 fd32 	bl	80002dc <__adddf3>
 800f878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f87c:	4606      	mov	r6, r0
 800f87e:	460f      	mov	r7, r1
 800f880:	f7f1 f972 	bl	8000b68 <__aeabi_dcmpgt>
 800f884:	b9c8      	cbnz	r0, 800f8ba <_dtoa_r+0x69a>
 800f886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f88a:	4630      	mov	r0, r6
 800f88c:	4639      	mov	r1, r7
 800f88e:	f7f1 f943 	bl	8000b18 <__aeabi_dcmpeq>
 800f892:	b110      	cbz	r0, 800f89a <_dtoa_r+0x67a>
 800f894:	f018 0f01 	tst.w	r8, #1
 800f898:	d10f      	bne.n	800f8ba <_dtoa_r+0x69a>
 800f89a:	9904      	ldr	r1, [sp, #16]
 800f89c:	4620      	mov	r0, r4
 800f89e:	f000 fcaa 	bl	80101f6 <_Bfree>
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f8a6:	702b      	strb	r3, [r5, #0]
 800f8a8:	f10a 0301 	add.w	r3, sl, #1
 800f8ac:	6013      	str	r3, [r2, #0]
 800f8ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 8241 	beq.w	800fd38 <_dtoa_r+0xb18>
 800f8b6:	601d      	str	r5, [r3, #0]
 800f8b8:	e23e      	b.n	800fd38 <_dtoa_r+0xb18>
 800f8ba:	f8cd a020 	str.w	sl, [sp, #32]
 800f8be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f8c2:	2a39      	cmp	r2, #57	; 0x39
 800f8c4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800f8c8:	d108      	bne.n	800f8dc <_dtoa_r+0x6bc>
 800f8ca:	459b      	cmp	fp, r3
 800f8cc:	d10a      	bne.n	800f8e4 <_dtoa_r+0x6c4>
 800f8ce:	9b08      	ldr	r3, [sp, #32]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	9308      	str	r3, [sp, #32]
 800f8d4:	2330      	movs	r3, #48	; 0x30
 800f8d6:	f88b 3000 	strb.w	r3, [fp]
 800f8da:	465b      	mov	r3, fp
 800f8dc:	781a      	ldrb	r2, [r3, #0]
 800f8de:	3201      	adds	r2, #1
 800f8e0:	701a      	strb	r2, [r3, #0]
 800f8e2:	e78c      	b.n	800f7fe <_dtoa_r+0x5de>
 800f8e4:	461d      	mov	r5, r3
 800f8e6:	e7ea      	b.n	800f8be <_dtoa_r+0x69e>
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	4b9b      	ldr	r3, [pc, #620]	; (800fb58 <_dtoa_r+0x938>)
 800f8ec:	f7f0 feac 	bl	8000648 <__aeabi_dmul>
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	4606      	mov	r6, r0
 800f8f6:	460f      	mov	r7, r1
 800f8f8:	f7f1 f90e 	bl	8000b18 <__aeabi_dcmpeq>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d09a      	beq.n	800f836 <_dtoa_r+0x616>
 800f900:	e7cb      	b.n	800f89a <_dtoa_r+0x67a>
 800f902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f904:	2a00      	cmp	r2, #0
 800f906:	f000 808b 	beq.w	800fa20 <_dtoa_r+0x800>
 800f90a:	9a06      	ldr	r2, [sp, #24]
 800f90c:	2a01      	cmp	r2, #1
 800f90e:	dc6e      	bgt.n	800f9ee <_dtoa_r+0x7ce>
 800f910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f912:	2a00      	cmp	r2, #0
 800f914:	d067      	beq.n	800f9e6 <_dtoa_r+0x7c6>
 800f916:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f91a:	9f07      	ldr	r7, [sp, #28]
 800f91c:	9d05      	ldr	r5, [sp, #20]
 800f91e:	9a05      	ldr	r2, [sp, #20]
 800f920:	2101      	movs	r1, #1
 800f922:	441a      	add	r2, r3
 800f924:	4620      	mov	r0, r4
 800f926:	9205      	str	r2, [sp, #20]
 800f928:	4498      	add	r8, r3
 800f92a:	f000 fd04 	bl	8010336 <__i2b>
 800f92e:	4606      	mov	r6, r0
 800f930:	2d00      	cmp	r5, #0
 800f932:	dd0c      	ble.n	800f94e <_dtoa_r+0x72e>
 800f934:	f1b8 0f00 	cmp.w	r8, #0
 800f938:	dd09      	ble.n	800f94e <_dtoa_r+0x72e>
 800f93a:	4545      	cmp	r5, r8
 800f93c:	9a05      	ldr	r2, [sp, #20]
 800f93e:	462b      	mov	r3, r5
 800f940:	bfa8      	it	ge
 800f942:	4643      	movge	r3, r8
 800f944:	1ad2      	subs	r2, r2, r3
 800f946:	9205      	str	r2, [sp, #20]
 800f948:	1aed      	subs	r5, r5, r3
 800f94a:	eba8 0803 	sub.w	r8, r8, r3
 800f94e:	9b07      	ldr	r3, [sp, #28]
 800f950:	b1eb      	cbz	r3, 800f98e <_dtoa_r+0x76e>
 800f952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f954:	2b00      	cmp	r3, #0
 800f956:	d067      	beq.n	800fa28 <_dtoa_r+0x808>
 800f958:	b18f      	cbz	r7, 800f97e <_dtoa_r+0x75e>
 800f95a:	4631      	mov	r1, r6
 800f95c:	463a      	mov	r2, r7
 800f95e:	4620      	mov	r0, r4
 800f960:	f000 fd88 	bl	8010474 <__pow5mult>
 800f964:	9a04      	ldr	r2, [sp, #16]
 800f966:	4601      	mov	r1, r0
 800f968:	4606      	mov	r6, r0
 800f96a:	4620      	mov	r0, r4
 800f96c:	f000 fcec 	bl	8010348 <__multiply>
 800f970:	9904      	ldr	r1, [sp, #16]
 800f972:	9008      	str	r0, [sp, #32]
 800f974:	4620      	mov	r0, r4
 800f976:	f000 fc3e 	bl	80101f6 <_Bfree>
 800f97a:	9b08      	ldr	r3, [sp, #32]
 800f97c:	9304      	str	r3, [sp, #16]
 800f97e:	9b07      	ldr	r3, [sp, #28]
 800f980:	1bda      	subs	r2, r3, r7
 800f982:	d004      	beq.n	800f98e <_dtoa_r+0x76e>
 800f984:	9904      	ldr	r1, [sp, #16]
 800f986:	4620      	mov	r0, r4
 800f988:	f000 fd74 	bl	8010474 <__pow5mult>
 800f98c:	9004      	str	r0, [sp, #16]
 800f98e:	2101      	movs	r1, #1
 800f990:	4620      	mov	r0, r4
 800f992:	f000 fcd0 	bl	8010336 <__i2b>
 800f996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f998:	4607      	mov	r7, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f000 81d0 	beq.w	800fd40 <_dtoa_r+0xb20>
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	4601      	mov	r1, r0
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f000 fd65 	bl	8010474 <__pow5mult>
 800f9aa:	9b06      	ldr	r3, [sp, #24]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	4607      	mov	r7, r0
 800f9b0:	dc40      	bgt.n	800fa34 <_dtoa_r+0x814>
 800f9b2:	9b00      	ldr	r3, [sp, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d139      	bne.n	800fa2c <_dtoa_r+0x80c>
 800f9b8:	9b01      	ldr	r3, [sp, #4]
 800f9ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d136      	bne.n	800fa30 <_dtoa_r+0x810>
 800f9c2:	9b01      	ldr	r3, [sp, #4]
 800f9c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9c8:	0d1b      	lsrs	r3, r3, #20
 800f9ca:	051b      	lsls	r3, r3, #20
 800f9cc:	b12b      	cbz	r3, 800f9da <_dtoa_r+0x7ba>
 800f9ce:	9b05      	ldr	r3, [sp, #20]
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	9305      	str	r3, [sp, #20]
 800f9d4:	f108 0801 	add.w	r8, r8, #1
 800f9d8:	2301      	movs	r3, #1
 800f9da:	9307      	str	r3, [sp, #28]
 800f9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d12a      	bne.n	800fa38 <_dtoa_r+0x818>
 800f9e2:	2001      	movs	r0, #1
 800f9e4:	e030      	b.n	800fa48 <_dtoa_r+0x828>
 800f9e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f9ec:	e795      	b.n	800f91a <_dtoa_r+0x6fa>
 800f9ee:	9b07      	ldr	r3, [sp, #28]
 800f9f0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800f9f4:	42bb      	cmp	r3, r7
 800f9f6:	bfbf      	itttt	lt
 800f9f8:	9b07      	ldrlt	r3, [sp, #28]
 800f9fa:	9707      	strlt	r7, [sp, #28]
 800f9fc:	1afa      	sublt	r2, r7, r3
 800f9fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fa00:	bfbb      	ittet	lt
 800fa02:	189b      	addlt	r3, r3, r2
 800fa04:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fa06:	1bdf      	subge	r7, r3, r7
 800fa08:	2700      	movlt	r7, #0
 800fa0a:	f1b9 0f00 	cmp.w	r9, #0
 800fa0e:	bfb5      	itete	lt
 800fa10:	9b05      	ldrlt	r3, [sp, #20]
 800fa12:	9d05      	ldrge	r5, [sp, #20]
 800fa14:	eba3 0509 	sublt.w	r5, r3, r9
 800fa18:	464b      	movge	r3, r9
 800fa1a:	bfb8      	it	lt
 800fa1c:	2300      	movlt	r3, #0
 800fa1e:	e77e      	b.n	800f91e <_dtoa_r+0x6fe>
 800fa20:	9f07      	ldr	r7, [sp, #28]
 800fa22:	9d05      	ldr	r5, [sp, #20]
 800fa24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fa26:	e783      	b.n	800f930 <_dtoa_r+0x710>
 800fa28:	9a07      	ldr	r2, [sp, #28]
 800fa2a:	e7ab      	b.n	800f984 <_dtoa_r+0x764>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	e7d4      	b.n	800f9da <_dtoa_r+0x7ba>
 800fa30:	9b00      	ldr	r3, [sp, #0]
 800fa32:	e7d2      	b.n	800f9da <_dtoa_r+0x7ba>
 800fa34:	2300      	movs	r3, #0
 800fa36:	9307      	str	r3, [sp, #28]
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fa3e:	6918      	ldr	r0, [r3, #16]
 800fa40:	f000 fc2b 	bl	801029a <__hi0bits>
 800fa44:	f1c0 0020 	rsb	r0, r0, #32
 800fa48:	4440      	add	r0, r8
 800fa4a:	f010 001f 	ands.w	r0, r0, #31
 800fa4e:	d047      	beq.n	800fae0 <_dtoa_r+0x8c0>
 800fa50:	f1c0 0320 	rsb	r3, r0, #32
 800fa54:	2b04      	cmp	r3, #4
 800fa56:	dd3b      	ble.n	800fad0 <_dtoa_r+0x8b0>
 800fa58:	9b05      	ldr	r3, [sp, #20]
 800fa5a:	f1c0 001c 	rsb	r0, r0, #28
 800fa5e:	4403      	add	r3, r0
 800fa60:	9305      	str	r3, [sp, #20]
 800fa62:	4405      	add	r5, r0
 800fa64:	4480      	add	r8, r0
 800fa66:	9b05      	ldr	r3, [sp, #20]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	dd05      	ble.n	800fa78 <_dtoa_r+0x858>
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	9904      	ldr	r1, [sp, #16]
 800fa70:	4620      	mov	r0, r4
 800fa72:	f000 fd4d 	bl	8010510 <__lshift>
 800fa76:	9004      	str	r0, [sp, #16]
 800fa78:	f1b8 0f00 	cmp.w	r8, #0
 800fa7c:	dd05      	ble.n	800fa8a <_dtoa_r+0x86a>
 800fa7e:	4639      	mov	r1, r7
 800fa80:	4642      	mov	r2, r8
 800fa82:	4620      	mov	r0, r4
 800fa84:	f000 fd44 	bl	8010510 <__lshift>
 800fa88:	4607      	mov	r7, r0
 800fa8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa8c:	b353      	cbz	r3, 800fae4 <_dtoa_r+0x8c4>
 800fa8e:	4639      	mov	r1, r7
 800fa90:	9804      	ldr	r0, [sp, #16]
 800fa92:	f000 fd91 	bl	80105b8 <__mcmp>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	da24      	bge.n	800fae4 <_dtoa_r+0x8c4>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	220a      	movs	r2, #10
 800fa9e:	9904      	ldr	r1, [sp, #16]
 800faa0:	4620      	mov	r0, r4
 800faa2:	f000 fbbf 	bl	8010224 <__multadd>
 800faa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faa8:	9004      	str	r0, [sp, #16]
 800faaa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800faae:	2b00      	cmp	r3, #0
 800fab0:	f000 814d 	beq.w	800fd4e <_dtoa_r+0xb2e>
 800fab4:	2300      	movs	r3, #0
 800fab6:	4631      	mov	r1, r6
 800fab8:	220a      	movs	r2, #10
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 fbb2 	bl	8010224 <__multadd>
 800fac0:	9b02      	ldr	r3, [sp, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	4606      	mov	r6, r0
 800fac6:	dc4f      	bgt.n	800fb68 <_dtoa_r+0x948>
 800fac8:	9b06      	ldr	r3, [sp, #24]
 800faca:	2b02      	cmp	r3, #2
 800facc:	dd4c      	ble.n	800fb68 <_dtoa_r+0x948>
 800face:	e011      	b.n	800faf4 <_dtoa_r+0x8d4>
 800fad0:	d0c9      	beq.n	800fa66 <_dtoa_r+0x846>
 800fad2:	9a05      	ldr	r2, [sp, #20]
 800fad4:	331c      	adds	r3, #28
 800fad6:	441a      	add	r2, r3
 800fad8:	9205      	str	r2, [sp, #20]
 800fada:	441d      	add	r5, r3
 800fadc:	4498      	add	r8, r3
 800fade:	e7c2      	b.n	800fa66 <_dtoa_r+0x846>
 800fae0:	4603      	mov	r3, r0
 800fae2:	e7f6      	b.n	800fad2 <_dtoa_r+0x8b2>
 800fae4:	f1b9 0f00 	cmp.w	r9, #0
 800fae8:	dc38      	bgt.n	800fb5c <_dtoa_r+0x93c>
 800faea:	9b06      	ldr	r3, [sp, #24]
 800faec:	2b02      	cmp	r3, #2
 800faee:	dd35      	ble.n	800fb5c <_dtoa_r+0x93c>
 800faf0:	f8cd 9008 	str.w	r9, [sp, #8]
 800faf4:	9b02      	ldr	r3, [sp, #8]
 800faf6:	b963      	cbnz	r3, 800fb12 <_dtoa_r+0x8f2>
 800faf8:	4639      	mov	r1, r7
 800fafa:	2205      	movs	r2, #5
 800fafc:	4620      	mov	r0, r4
 800fafe:	f000 fb91 	bl	8010224 <__multadd>
 800fb02:	4601      	mov	r1, r0
 800fb04:	4607      	mov	r7, r0
 800fb06:	9804      	ldr	r0, [sp, #16]
 800fb08:	f000 fd56 	bl	80105b8 <__mcmp>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	f73f adcc 	bgt.w	800f6aa <_dtoa_r+0x48a>
 800fb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb14:	465d      	mov	r5, fp
 800fb16:	ea6f 0a03 	mvn.w	sl, r3
 800fb1a:	f04f 0900 	mov.w	r9, #0
 800fb1e:	4639      	mov	r1, r7
 800fb20:	4620      	mov	r0, r4
 800fb22:	f000 fb68 	bl	80101f6 <_Bfree>
 800fb26:	2e00      	cmp	r6, #0
 800fb28:	f43f aeb7 	beq.w	800f89a <_dtoa_r+0x67a>
 800fb2c:	f1b9 0f00 	cmp.w	r9, #0
 800fb30:	d005      	beq.n	800fb3e <_dtoa_r+0x91e>
 800fb32:	45b1      	cmp	r9, r6
 800fb34:	d003      	beq.n	800fb3e <_dtoa_r+0x91e>
 800fb36:	4649      	mov	r1, r9
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f000 fb5c 	bl	80101f6 <_Bfree>
 800fb3e:	4631      	mov	r1, r6
 800fb40:	4620      	mov	r0, r4
 800fb42:	f000 fb58 	bl	80101f6 <_Bfree>
 800fb46:	e6a8      	b.n	800f89a <_dtoa_r+0x67a>
 800fb48:	2700      	movs	r7, #0
 800fb4a:	463e      	mov	r6, r7
 800fb4c:	e7e1      	b.n	800fb12 <_dtoa_r+0x8f2>
 800fb4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fb52:	463e      	mov	r6, r7
 800fb54:	e5a9      	b.n	800f6aa <_dtoa_r+0x48a>
 800fb56:	bf00      	nop
 800fb58:	40240000 	.word	0x40240000
 800fb5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb5e:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	f000 80fa 	beq.w	800fd5c <_dtoa_r+0xb3c>
 800fb68:	2d00      	cmp	r5, #0
 800fb6a:	dd05      	ble.n	800fb78 <_dtoa_r+0x958>
 800fb6c:	4631      	mov	r1, r6
 800fb6e:	462a      	mov	r2, r5
 800fb70:	4620      	mov	r0, r4
 800fb72:	f000 fccd 	bl	8010510 <__lshift>
 800fb76:	4606      	mov	r6, r0
 800fb78:	9b07      	ldr	r3, [sp, #28]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d04c      	beq.n	800fc18 <_dtoa_r+0x9f8>
 800fb7e:	6871      	ldr	r1, [r6, #4]
 800fb80:	4620      	mov	r0, r4
 800fb82:	f000 fb04 	bl	801018e <_Balloc>
 800fb86:	6932      	ldr	r2, [r6, #16]
 800fb88:	3202      	adds	r2, #2
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	0092      	lsls	r2, r2, #2
 800fb8e:	f106 010c 	add.w	r1, r6, #12
 800fb92:	300c      	adds	r0, #12
 800fb94:	f000 faf0 	bl	8010178 <memcpy>
 800fb98:	2201      	movs	r2, #1
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f000 fcb7 	bl	8010510 <__lshift>
 800fba2:	9b00      	ldr	r3, [sp, #0]
 800fba4:	f8cd b014 	str.w	fp, [sp, #20]
 800fba8:	f003 0301 	and.w	r3, r3, #1
 800fbac:	46b1      	mov	r9, r6
 800fbae:	9307      	str	r3, [sp, #28]
 800fbb0:	4606      	mov	r6, r0
 800fbb2:	4639      	mov	r1, r7
 800fbb4:	9804      	ldr	r0, [sp, #16]
 800fbb6:	f7ff faa5 	bl	800f104 <quorem>
 800fbba:	4649      	mov	r1, r9
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fbc2:	9804      	ldr	r0, [sp, #16]
 800fbc4:	f000 fcf8 	bl	80105b8 <__mcmp>
 800fbc8:	4632      	mov	r2, r6
 800fbca:	9000      	str	r0, [sp, #0]
 800fbcc:	4639      	mov	r1, r7
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f000 fd0c 	bl	80105ec <__mdiff>
 800fbd4:	68c3      	ldr	r3, [r0, #12]
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	bb03      	cbnz	r3, 800fc1c <_dtoa_r+0x9fc>
 800fbda:	4601      	mov	r1, r0
 800fbdc:	9008      	str	r0, [sp, #32]
 800fbde:	9804      	ldr	r0, [sp, #16]
 800fbe0:	f000 fcea 	bl	80105b8 <__mcmp>
 800fbe4:	9a08      	ldr	r2, [sp, #32]
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	4611      	mov	r1, r2
 800fbea:	4620      	mov	r0, r4
 800fbec:	9308      	str	r3, [sp, #32]
 800fbee:	f000 fb02 	bl	80101f6 <_Bfree>
 800fbf2:	9b08      	ldr	r3, [sp, #32]
 800fbf4:	b9a3      	cbnz	r3, 800fc20 <_dtoa_r+0xa00>
 800fbf6:	9a06      	ldr	r2, [sp, #24]
 800fbf8:	b992      	cbnz	r2, 800fc20 <_dtoa_r+0xa00>
 800fbfa:	9a07      	ldr	r2, [sp, #28]
 800fbfc:	b982      	cbnz	r2, 800fc20 <_dtoa_r+0xa00>
 800fbfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fc02:	d029      	beq.n	800fc58 <_dtoa_r+0xa38>
 800fc04:	9b00      	ldr	r3, [sp, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	dd01      	ble.n	800fc0e <_dtoa_r+0x9ee>
 800fc0a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fc0e:	9b05      	ldr	r3, [sp, #20]
 800fc10:	1c5d      	adds	r5, r3, #1
 800fc12:	f883 8000 	strb.w	r8, [r3]
 800fc16:	e782      	b.n	800fb1e <_dtoa_r+0x8fe>
 800fc18:	4630      	mov	r0, r6
 800fc1a:	e7c2      	b.n	800fba2 <_dtoa_r+0x982>
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e7e3      	b.n	800fbe8 <_dtoa_r+0x9c8>
 800fc20:	9a00      	ldr	r2, [sp, #0]
 800fc22:	2a00      	cmp	r2, #0
 800fc24:	db04      	blt.n	800fc30 <_dtoa_r+0xa10>
 800fc26:	d125      	bne.n	800fc74 <_dtoa_r+0xa54>
 800fc28:	9a06      	ldr	r2, [sp, #24]
 800fc2a:	bb1a      	cbnz	r2, 800fc74 <_dtoa_r+0xa54>
 800fc2c:	9a07      	ldr	r2, [sp, #28]
 800fc2e:	bb0a      	cbnz	r2, 800fc74 <_dtoa_r+0xa54>
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	ddec      	ble.n	800fc0e <_dtoa_r+0x9ee>
 800fc34:	2201      	movs	r2, #1
 800fc36:	9904      	ldr	r1, [sp, #16]
 800fc38:	4620      	mov	r0, r4
 800fc3a:	f000 fc69 	bl	8010510 <__lshift>
 800fc3e:	4639      	mov	r1, r7
 800fc40:	9004      	str	r0, [sp, #16]
 800fc42:	f000 fcb9 	bl	80105b8 <__mcmp>
 800fc46:	2800      	cmp	r0, #0
 800fc48:	dc03      	bgt.n	800fc52 <_dtoa_r+0xa32>
 800fc4a:	d1e0      	bne.n	800fc0e <_dtoa_r+0x9ee>
 800fc4c:	f018 0f01 	tst.w	r8, #1
 800fc50:	d0dd      	beq.n	800fc0e <_dtoa_r+0x9ee>
 800fc52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fc56:	d1d8      	bne.n	800fc0a <_dtoa_r+0x9ea>
 800fc58:	9b05      	ldr	r3, [sp, #20]
 800fc5a:	9a05      	ldr	r2, [sp, #20]
 800fc5c:	1c5d      	adds	r5, r3, #1
 800fc5e:	2339      	movs	r3, #57	; 0x39
 800fc60:	7013      	strb	r3, [r2, #0]
 800fc62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc66:	2b39      	cmp	r3, #57	; 0x39
 800fc68:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fc6c:	d04f      	beq.n	800fd0e <_dtoa_r+0xaee>
 800fc6e:	3301      	adds	r3, #1
 800fc70:	7013      	strb	r3, [r2, #0]
 800fc72:	e754      	b.n	800fb1e <_dtoa_r+0x8fe>
 800fc74:	9a05      	ldr	r2, [sp, #20]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f102 0501 	add.w	r5, r2, #1
 800fc7c:	dd06      	ble.n	800fc8c <_dtoa_r+0xa6c>
 800fc7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fc82:	d0e9      	beq.n	800fc58 <_dtoa_r+0xa38>
 800fc84:	f108 0801 	add.w	r8, r8, #1
 800fc88:	9b05      	ldr	r3, [sp, #20]
 800fc8a:	e7c2      	b.n	800fc12 <_dtoa_r+0x9f2>
 800fc8c:	9a02      	ldr	r2, [sp, #8]
 800fc8e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fc92:	eba5 030b 	sub.w	r3, r5, fp
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d021      	beq.n	800fcde <_dtoa_r+0xabe>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	220a      	movs	r2, #10
 800fc9e:	9904      	ldr	r1, [sp, #16]
 800fca0:	4620      	mov	r0, r4
 800fca2:	f000 fabf 	bl	8010224 <__multadd>
 800fca6:	45b1      	cmp	r9, r6
 800fca8:	9004      	str	r0, [sp, #16]
 800fcaa:	f04f 0300 	mov.w	r3, #0
 800fcae:	f04f 020a 	mov.w	r2, #10
 800fcb2:	4649      	mov	r1, r9
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	d105      	bne.n	800fcc4 <_dtoa_r+0xaa4>
 800fcb8:	f000 fab4 	bl	8010224 <__multadd>
 800fcbc:	4681      	mov	r9, r0
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	9505      	str	r5, [sp, #20]
 800fcc2:	e776      	b.n	800fbb2 <_dtoa_r+0x992>
 800fcc4:	f000 faae 	bl	8010224 <__multadd>
 800fcc8:	4631      	mov	r1, r6
 800fcca:	4681      	mov	r9, r0
 800fccc:	2300      	movs	r3, #0
 800fcce:	220a      	movs	r2, #10
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f000 faa7 	bl	8010224 <__multadd>
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	e7f2      	b.n	800fcc0 <_dtoa_r+0xaa0>
 800fcda:	f04f 0900 	mov.w	r9, #0
 800fcde:	2201      	movs	r2, #1
 800fce0:	9904      	ldr	r1, [sp, #16]
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 fc14 	bl	8010510 <__lshift>
 800fce8:	4639      	mov	r1, r7
 800fcea:	9004      	str	r0, [sp, #16]
 800fcec:	f000 fc64 	bl	80105b8 <__mcmp>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	dcb6      	bgt.n	800fc62 <_dtoa_r+0xa42>
 800fcf4:	d102      	bne.n	800fcfc <_dtoa_r+0xadc>
 800fcf6:	f018 0f01 	tst.w	r8, #1
 800fcfa:	d1b2      	bne.n	800fc62 <_dtoa_r+0xa42>
 800fcfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd00:	2b30      	cmp	r3, #48	; 0x30
 800fd02:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fd06:	f47f af0a 	bne.w	800fb1e <_dtoa_r+0x8fe>
 800fd0a:	4615      	mov	r5, r2
 800fd0c:	e7f6      	b.n	800fcfc <_dtoa_r+0xadc>
 800fd0e:	4593      	cmp	fp, r2
 800fd10:	d105      	bne.n	800fd1e <_dtoa_r+0xafe>
 800fd12:	2331      	movs	r3, #49	; 0x31
 800fd14:	f10a 0a01 	add.w	sl, sl, #1
 800fd18:	f88b 3000 	strb.w	r3, [fp]
 800fd1c:	e6ff      	b.n	800fb1e <_dtoa_r+0x8fe>
 800fd1e:	4615      	mov	r5, r2
 800fd20:	e79f      	b.n	800fc62 <_dtoa_r+0xa42>
 800fd22:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fd88 <_dtoa_r+0xb68>
 800fd26:	e007      	b.n	800fd38 <_dtoa_r+0xb18>
 800fd28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fd8c <_dtoa_r+0xb6c>
 800fd2e:	b11b      	cbz	r3, 800fd38 <_dtoa_r+0xb18>
 800fd30:	f10b 0308 	add.w	r3, fp, #8
 800fd34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd36:	6013      	str	r3, [r2, #0]
 800fd38:	4658      	mov	r0, fp
 800fd3a:	b017      	add	sp, #92	; 0x5c
 800fd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd40:	9b06      	ldr	r3, [sp, #24]
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	f77f ae35 	ble.w	800f9b2 <_dtoa_r+0x792>
 800fd48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd4a:	9307      	str	r3, [sp, #28]
 800fd4c:	e649      	b.n	800f9e2 <_dtoa_r+0x7c2>
 800fd4e:	9b02      	ldr	r3, [sp, #8]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	dc03      	bgt.n	800fd5c <_dtoa_r+0xb3c>
 800fd54:	9b06      	ldr	r3, [sp, #24]
 800fd56:	2b02      	cmp	r3, #2
 800fd58:	f73f aecc 	bgt.w	800faf4 <_dtoa_r+0x8d4>
 800fd5c:	465d      	mov	r5, fp
 800fd5e:	4639      	mov	r1, r7
 800fd60:	9804      	ldr	r0, [sp, #16]
 800fd62:	f7ff f9cf 	bl	800f104 <quorem>
 800fd66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fd6a:	f805 8b01 	strb.w	r8, [r5], #1
 800fd6e:	9a02      	ldr	r2, [sp, #8]
 800fd70:	eba5 030b 	sub.w	r3, r5, fp
 800fd74:	429a      	cmp	r2, r3
 800fd76:	ddb0      	ble.n	800fcda <_dtoa_r+0xaba>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	220a      	movs	r2, #10
 800fd7c:	9904      	ldr	r1, [sp, #16]
 800fd7e:	4620      	mov	r0, r4
 800fd80:	f000 fa50 	bl	8010224 <__multadd>
 800fd84:	9004      	str	r0, [sp, #16]
 800fd86:	e7ea      	b.n	800fd5e <_dtoa_r+0xb3e>
 800fd88:	0801363c 	.word	0x0801363c
 800fd8c:	08013660 	.word	0x08013660

0800fd90 <__sflush_r>:
 800fd90:	898a      	ldrh	r2, [r1, #12]
 800fd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd96:	4605      	mov	r5, r0
 800fd98:	0710      	lsls	r0, r2, #28
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	d458      	bmi.n	800fe50 <__sflush_r+0xc0>
 800fd9e:	684b      	ldr	r3, [r1, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	dc05      	bgt.n	800fdb0 <__sflush_r+0x20>
 800fda4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	dc02      	bgt.n	800fdb0 <__sflush_r+0x20>
 800fdaa:	2000      	movs	r0, #0
 800fdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdb2:	2e00      	cmp	r6, #0
 800fdb4:	d0f9      	beq.n	800fdaa <__sflush_r+0x1a>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdbc:	682f      	ldr	r7, [r5, #0]
 800fdbe:	6a21      	ldr	r1, [r4, #32]
 800fdc0:	602b      	str	r3, [r5, #0]
 800fdc2:	d032      	beq.n	800fe2a <__sflush_r+0x9a>
 800fdc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdc6:	89a3      	ldrh	r3, [r4, #12]
 800fdc8:	075a      	lsls	r2, r3, #29
 800fdca:	d505      	bpl.n	800fdd8 <__sflush_r+0x48>
 800fdcc:	6863      	ldr	r3, [r4, #4]
 800fdce:	1ac0      	subs	r0, r0, r3
 800fdd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdd2:	b10b      	cbz	r3, 800fdd8 <__sflush_r+0x48>
 800fdd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdd6:	1ac0      	subs	r0, r0, r3
 800fdd8:	2300      	movs	r3, #0
 800fdda:	4602      	mov	r2, r0
 800fddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdde:	6a21      	ldr	r1, [r4, #32]
 800fde0:	4628      	mov	r0, r5
 800fde2:	47b0      	blx	r6
 800fde4:	1c43      	adds	r3, r0, #1
 800fde6:	89a3      	ldrh	r3, [r4, #12]
 800fde8:	d106      	bne.n	800fdf8 <__sflush_r+0x68>
 800fdea:	6829      	ldr	r1, [r5, #0]
 800fdec:	291d      	cmp	r1, #29
 800fdee:	d848      	bhi.n	800fe82 <__sflush_r+0xf2>
 800fdf0:	4a29      	ldr	r2, [pc, #164]	; (800fe98 <__sflush_r+0x108>)
 800fdf2:	40ca      	lsrs	r2, r1
 800fdf4:	07d6      	lsls	r6, r2, #31
 800fdf6:	d544      	bpl.n	800fe82 <__sflush_r+0xf2>
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	6062      	str	r2, [r4, #4]
 800fdfc:	04d9      	lsls	r1, r3, #19
 800fdfe:	6922      	ldr	r2, [r4, #16]
 800fe00:	6022      	str	r2, [r4, #0]
 800fe02:	d504      	bpl.n	800fe0e <__sflush_r+0x7e>
 800fe04:	1c42      	adds	r2, r0, #1
 800fe06:	d101      	bne.n	800fe0c <__sflush_r+0x7c>
 800fe08:	682b      	ldr	r3, [r5, #0]
 800fe0a:	b903      	cbnz	r3, 800fe0e <__sflush_r+0x7e>
 800fe0c:	6560      	str	r0, [r4, #84]	; 0x54
 800fe0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe10:	602f      	str	r7, [r5, #0]
 800fe12:	2900      	cmp	r1, #0
 800fe14:	d0c9      	beq.n	800fdaa <__sflush_r+0x1a>
 800fe16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe1a:	4299      	cmp	r1, r3
 800fe1c:	d002      	beq.n	800fe24 <__sflush_r+0x94>
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f000 fc9e 	bl	8010760 <_free_r>
 800fe24:	2000      	movs	r0, #0
 800fe26:	6360      	str	r0, [r4, #52]	; 0x34
 800fe28:	e7c0      	b.n	800fdac <__sflush_r+0x1c>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	47b0      	blx	r6
 800fe30:	1c41      	adds	r1, r0, #1
 800fe32:	d1c8      	bne.n	800fdc6 <__sflush_r+0x36>
 800fe34:	682b      	ldr	r3, [r5, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d0c5      	beq.n	800fdc6 <__sflush_r+0x36>
 800fe3a:	2b1d      	cmp	r3, #29
 800fe3c:	d001      	beq.n	800fe42 <__sflush_r+0xb2>
 800fe3e:	2b16      	cmp	r3, #22
 800fe40:	d101      	bne.n	800fe46 <__sflush_r+0xb6>
 800fe42:	602f      	str	r7, [r5, #0]
 800fe44:	e7b1      	b.n	800fdaa <__sflush_r+0x1a>
 800fe46:	89a3      	ldrh	r3, [r4, #12]
 800fe48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe4c:	81a3      	strh	r3, [r4, #12]
 800fe4e:	e7ad      	b.n	800fdac <__sflush_r+0x1c>
 800fe50:	690f      	ldr	r7, [r1, #16]
 800fe52:	2f00      	cmp	r7, #0
 800fe54:	d0a9      	beq.n	800fdaa <__sflush_r+0x1a>
 800fe56:	0793      	lsls	r3, r2, #30
 800fe58:	680e      	ldr	r6, [r1, #0]
 800fe5a:	bf08      	it	eq
 800fe5c:	694b      	ldreq	r3, [r1, #20]
 800fe5e:	600f      	str	r7, [r1, #0]
 800fe60:	bf18      	it	ne
 800fe62:	2300      	movne	r3, #0
 800fe64:	eba6 0807 	sub.w	r8, r6, r7
 800fe68:	608b      	str	r3, [r1, #8]
 800fe6a:	f1b8 0f00 	cmp.w	r8, #0
 800fe6e:	dd9c      	ble.n	800fdaa <__sflush_r+0x1a>
 800fe70:	4643      	mov	r3, r8
 800fe72:	463a      	mov	r2, r7
 800fe74:	6a21      	ldr	r1, [r4, #32]
 800fe76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe78:	4628      	mov	r0, r5
 800fe7a:	47b0      	blx	r6
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	dc06      	bgt.n	800fe8e <__sflush_r+0xfe>
 800fe80:	89a3      	ldrh	r3, [r4, #12]
 800fe82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe86:	81a3      	strh	r3, [r4, #12]
 800fe88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe8c:	e78e      	b.n	800fdac <__sflush_r+0x1c>
 800fe8e:	4407      	add	r7, r0
 800fe90:	eba8 0800 	sub.w	r8, r8, r0
 800fe94:	e7e9      	b.n	800fe6a <__sflush_r+0xda>
 800fe96:	bf00      	nop
 800fe98:	20400001 	.word	0x20400001

0800fe9c <_fflush_r>:
 800fe9c:	b538      	push	{r3, r4, r5, lr}
 800fe9e:	690b      	ldr	r3, [r1, #16]
 800fea0:	4605      	mov	r5, r0
 800fea2:	460c      	mov	r4, r1
 800fea4:	b1db      	cbz	r3, 800fede <_fflush_r+0x42>
 800fea6:	b118      	cbz	r0, 800feb0 <_fflush_r+0x14>
 800fea8:	6983      	ldr	r3, [r0, #24]
 800feaa:	b90b      	cbnz	r3, 800feb0 <_fflush_r+0x14>
 800feac:	f000 f860 	bl	800ff70 <__sinit>
 800feb0:	4b0c      	ldr	r3, [pc, #48]	; (800fee4 <_fflush_r+0x48>)
 800feb2:	429c      	cmp	r4, r3
 800feb4:	d109      	bne.n	800feca <_fflush_r+0x2e>
 800feb6:	686c      	ldr	r4, [r5, #4]
 800feb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800febc:	b17b      	cbz	r3, 800fede <_fflush_r+0x42>
 800febe:	4621      	mov	r1, r4
 800fec0:	4628      	mov	r0, r5
 800fec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fec6:	f7ff bf63 	b.w	800fd90 <__sflush_r>
 800feca:	4b07      	ldr	r3, [pc, #28]	; (800fee8 <_fflush_r+0x4c>)
 800fecc:	429c      	cmp	r4, r3
 800fece:	d101      	bne.n	800fed4 <_fflush_r+0x38>
 800fed0:	68ac      	ldr	r4, [r5, #8]
 800fed2:	e7f1      	b.n	800feb8 <_fflush_r+0x1c>
 800fed4:	4b05      	ldr	r3, [pc, #20]	; (800feec <_fflush_r+0x50>)
 800fed6:	429c      	cmp	r4, r3
 800fed8:	bf08      	it	eq
 800feda:	68ec      	ldreq	r4, [r5, #12]
 800fedc:	e7ec      	b.n	800feb8 <_fflush_r+0x1c>
 800fede:	2000      	movs	r0, #0
 800fee0:	bd38      	pop	{r3, r4, r5, pc}
 800fee2:	bf00      	nop
 800fee4:	08013690 	.word	0x08013690
 800fee8:	080136b0 	.word	0x080136b0
 800feec:	08013670 	.word	0x08013670

0800fef0 <std>:
 800fef0:	2300      	movs	r3, #0
 800fef2:	b510      	push	{r4, lr}
 800fef4:	4604      	mov	r4, r0
 800fef6:	e9c0 3300 	strd	r3, r3, [r0]
 800fefa:	6083      	str	r3, [r0, #8]
 800fefc:	8181      	strh	r1, [r0, #12]
 800fefe:	6643      	str	r3, [r0, #100]	; 0x64
 800ff00:	81c2      	strh	r2, [r0, #14]
 800ff02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff06:	6183      	str	r3, [r0, #24]
 800ff08:	4619      	mov	r1, r3
 800ff0a:	2208      	movs	r2, #8
 800ff0c:	305c      	adds	r0, #92	; 0x5c
 800ff0e:	f7fe fb2d 	bl	800e56c <memset>
 800ff12:	4b05      	ldr	r3, [pc, #20]	; (800ff28 <std+0x38>)
 800ff14:	6263      	str	r3, [r4, #36]	; 0x24
 800ff16:	4b05      	ldr	r3, [pc, #20]	; (800ff2c <std+0x3c>)
 800ff18:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff1a:	4b05      	ldr	r3, [pc, #20]	; (800ff30 <std+0x40>)
 800ff1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff1e:	4b05      	ldr	r3, [pc, #20]	; (800ff34 <std+0x44>)
 800ff20:	6224      	str	r4, [r4, #32]
 800ff22:	6323      	str	r3, [r4, #48]	; 0x30
 800ff24:	bd10      	pop	{r4, pc}
 800ff26:	bf00      	nop
 800ff28:	08010b75 	.word	0x08010b75
 800ff2c:	08010b97 	.word	0x08010b97
 800ff30:	08010bcf 	.word	0x08010bcf
 800ff34:	08010bf3 	.word	0x08010bf3

0800ff38 <_cleanup_r>:
 800ff38:	4901      	ldr	r1, [pc, #4]	; (800ff40 <_cleanup_r+0x8>)
 800ff3a:	f000 b885 	b.w	8010048 <_fwalk_reent>
 800ff3e:	bf00      	nop
 800ff40:	0800fe9d 	.word	0x0800fe9d

0800ff44 <__sfmoreglue>:
 800ff44:	b570      	push	{r4, r5, r6, lr}
 800ff46:	1e4a      	subs	r2, r1, #1
 800ff48:	2568      	movs	r5, #104	; 0x68
 800ff4a:	4355      	muls	r5, r2
 800ff4c:	460e      	mov	r6, r1
 800ff4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff52:	f000 fc53 	bl	80107fc <_malloc_r>
 800ff56:	4604      	mov	r4, r0
 800ff58:	b140      	cbz	r0, 800ff6c <__sfmoreglue+0x28>
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	e9c0 1600 	strd	r1, r6, [r0]
 800ff60:	300c      	adds	r0, #12
 800ff62:	60a0      	str	r0, [r4, #8]
 800ff64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ff68:	f7fe fb00 	bl	800e56c <memset>
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	bd70      	pop	{r4, r5, r6, pc}

0800ff70 <__sinit>:
 800ff70:	6983      	ldr	r3, [r0, #24]
 800ff72:	b510      	push	{r4, lr}
 800ff74:	4604      	mov	r4, r0
 800ff76:	bb33      	cbnz	r3, 800ffc6 <__sinit+0x56>
 800ff78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ff7c:	6503      	str	r3, [r0, #80]	; 0x50
 800ff7e:	4b12      	ldr	r3, [pc, #72]	; (800ffc8 <__sinit+0x58>)
 800ff80:	4a12      	ldr	r2, [pc, #72]	; (800ffcc <__sinit+0x5c>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	6282      	str	r2, [r0, #40]	; 0x28
 800ff86:	4298      	cmp	r0, r3
 800ff88:	bf04      	itt	eq
 800ff8a:	2301      	moveq	r3, #1
 800ff8c:	6183      	streq	r3, [r0, #24]
 800ff8e:	f000 f81f 	bl	800ffd0 <__sfp>
 800ff92:	6060      	str	r0, [r4, #4]
 800ff94:	4620      	mov	r0, r4
 800ff96:	f000 f81b 	bl	800ffd0 <__sfp>
 800ff9a:	60a0      	str	r0, [r4, #8]
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	f000 f817 	bl	800ffd0 <__sfp>
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	60e0      	str	r0, [r4, #12]
 800ffa6:	2104      	movs	r1, #4
 800ffa8:	6860      	ldr	r0, [r4, #4]
 800ffaa:	f7ff ffa1 	bl	800fef0 <std>
 800ffae:	2201      	movs	r2, #1
 800ffb0:	2109      	movs	r1, #9
 800ffb2:	68a0      	ldr	r0, [r4, #8]
 800ffb4:	f7ff ff9c 	bl	800fef0 <std>
 800ffb8:	2202      	movs	r2, #2
 800ffba:	2112      	movs	r1, #18
 800ffbc:	68e0      	ldr	r0, [r4, #12]
 800ffbe:	f7ff ff97 	bl	800fef0 <std>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	61a3      	str	r3, [r4, #24]
 800ffc6:	bd10      	pop	{r4, pc}
 800ffc8:	08013628 	.word	0x08013628
 800ffcc:	0800ff39 	.word	0x0800ff39

0800ffd0 <__sfp>:
 800ffd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd2:	4b1b      	ldr	r3, [pc, #108]	; (8010040 <__sfp+0x70>)
 800ffd4:	681e      	ldr	r6, [r3, #0]
 800ffd6:	69b3      	ldr	r3, [r6, #24]
 800ffd8:	4607      	mov	r7, r0
 800ffda:	b913      	cbnz	r3, 800ffe2 <__sfp+0x12>
 800ffdc:	4630      	mov	r0, r6
 800ffde:	f7ff ffc7 	bl	800ff70 <__sinit>
 800ffe2:	3648      	adds	r6, #72	; 0x48
 800ffe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	d503      	bpl.n	800fff4 <__sfp+0x24>
 800ffec:	6833      	ldr	r3, [r6, #0]
 800ffee:	b133      	cbz	r3, 800fffe <__sfp+0x2e>
 800fff0:	6836      	ldr	r6, [r6, #0]
 800fff2:	e7f7      	b.n	800ffe4 <__sfp+0x14>
 800fff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fff8:	b16d      	cbz	r5, 8010016 <__sfp+0x46>
 800fffa:	3468      	adds	r4, #104	; 0x68
 800fffc:	e7f4      	b.n	800ffe8 <__sfp+0x18>
 800fffe:	2104      	movs	r1, #4
 8010000:	4638      	mov	r0, r7
 8010002:	f7ff ff9f 	bl	800ff44 <__sfmoreglue>
 8010006:	6030      	str	r0, [r6, #0]
 8010008:	2800      	cmp	r0, #0
 801000a:	d1f1      	bne.n	800fff0 <__sfp+0x20>
 801000c:	230c      	movs	r3, #12
 801000e:	603b      	str	r3, [r7, #0]
 8010010:	4604      	mov	r4, r0
 8010012:	4620      	mov	r0, r4
 8010014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010016:	4b0b      	ldr	r3, [pc, #44]	; (8010044 <__sfp+0x74>)
 8010018:	6665      	str	r5, [r4, #100]	; 0x64
 801001a:	e9c4 5500 	strd	r5, r5, [r4]
 801001e:	60a5      	str	r5, [r4, #8]
 8010020:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010024:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010028:	2208      	movs	r2, #8
 801002a:	4629      	mov	r1, r5
 801002c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010030:	f7fe fa9c 	bl	800e56c <memset>
 8010034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801003c:	e7e9      	b.n	8010012 <__sfp+0x42>
 801003e:	bf00      	nop
 8010040:	08013628 	.word	0x08013628
 8010044:	ffff0001 	.word	0xffff0001

08010048 <_fwalk_reent>:
 8010048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801004c:	4680      	mov	r8, r0
 801004e:	4689      	mov	r9, r1
 8010050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010054:	2600      	movs	r6, #0
 8010056:	b914      	cbnz	r4, 801005e <_fwalk_reent+0x16>
 8010058:	4630      	mov	r0, r6
 801005a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801005e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010062:	3f01      	subs	r7, #1
 8010064:	d501      	bpl.n	801006a <_fwalk_reent+0x22>
 8010066:	6824      	ldr	r4, [r4, #0]
 8010068:	e7f5      	b.n	8010056 <_fwalk_reent+0xe>
 801006a:	89ab      	ldrh	r3, [r5, #12]
 801006c:	2b01      	cmp	r3, #1
 801006e:	d907      	bls.n	8010080 <_fwalk_reent+0x38>
 8010070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010074:	3301      	adds	r3, #1
 8010076:	d003      	beq.n	8010080 <_fwalk_reent+0x38>
 8010078:	4629      	mov	r1, r5
 801007a:	4640      	mov	r0, r8
 801007c:	47c8      	blx	r9
 801007e:	4306      	orrs	r6, r0
 8010080:	3568      	adds	r5, #104	; 0x68
 8010082:	e7ee      	b.n	8010062 <_fwalk_reent+0x1a>

08010084 <_localeconv_r>:
 8010084:	4b04      	ldr	r3, [pc, #16]	; (8010098 <_localeconv_r+0x14>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	6a18      	ldr	r0, [r3, #32]
 801008a:	4b04      	ldr	r3, [pc, #16]	; (801009c <_localeconv_r+0x18>)
 801008c:	2800      	cmp	r0, #0
 801008e:	bf08      	it	eq
 8010090:	4618      	moveq	r0, r3
 8010092:	30f0      	adds	r0, #240	; 0xf0
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop
 8010098:	200017f4 	.word	0x200017f4
 801009c:	20001858 	.word	0x20001858

080100a0 <__swhatbuf_r>:
 80100a0:	b570      	push	{r4, r5, r6, lr}
 80100a2:	460e      	mov	r6, r1
 80100a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100a8:	2900      	cmp	r1, #0
 80100aa:	b096      	sub	sp, #88	; 0x58
 80100ac:	4614      	mov	r4, r2
 80100ae:	461d      	mov	r5, r3
 80100b0:	da07      	bge.n	80100c2 <__swhatbuf_r+0x22>
 80100b2:	2300      	movs	r3, #0
 80100b4:	602b      	str	r3, [r5, #0]
 80100b6:	89b3      	ldrh	r3, [r6, #12]
 80100b8:	061a      	lsls	r2, r3, #24
 80100ba:	d410      	bmi.n	80100de <__swhatbuf_r+0x3e>
 80100bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100c0:	e00e      	b.n	80100e0 <__swhatbuf_r+0x40>
 80100c2:	466a      	mov	r2, sp
 80100c4:	f000 fdbc 	bl	8010c40 <_fstat_r>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	dbf2      	blt.n	80100b2 <__swhatbuf_r+0x12>
 80100cc:	9a01      	ldr	r2, [sp, #4]
 80100ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80100d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80100d6:	425a      	negs	r2, r3
 80100d8:	415a      	adcs	r2, r3
 80100da:	602a      	str	r2, [r5, #0]
 80100dc:	e7ee      	b.n	80100bc <__swhatbuf_r+0x1c>
 80100de:	2340      	movs	r3, #64	; 0x40
 80100e0:	2000      	movs	r0, #0
 80100e2:	6023      	str	r3, [r4, #0]
 80100e4:	b016      	add	sp, #88	; 0x58
 80100e6:	bd70      	pop	{r4, r5, r6, pc}

080100e8 <__smakebuf_r>:
 80100e8:	898b      	ldrh	r3, [r1, #12]
 80100ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100ec:	079d      	lsls	r5, r3, #30
 80100ee:	4606      	mov	r6, r0
 80100f0:	460c      	mov	r4, r1
 80100f2:	d507      	bpl.n	8010104 <__smakebuf_r+0x1c>
 80100f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80100f8:	6023      	str	r3, [r4, #0]
 80100fa:	6123      	str	r3, [r4, #16]
 80100fc:	2301      	movs	r3, #1
 80100fe:	6163      	str	r3, [r4, #20]
 8010100:	b002      	add	sp, #8
 8010102:	bd70      	pop	{r4, r5, r6, pc}
 8010104:	ab01      	add	r3, sp, #4
 8010106:	466a      	mov	r2, sp
 8010108:	f7ff ffca 	bl	80100a0 <__swhatbuf_r>
 801010c:	9900      	ldr	r1, [sp, #0]
 801010e:	4605      	mov	r5, r0
 8010110:	4630      	mov	r0, r6
 8010112:	f000 fb73 	bl	80107fc <_malloc_r>
 8010116:	b948      	cbnz	r0, 801012c <__smakebuf_r+0x44>
 8010118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801011c:	059a      	lsls	r2, r3, #22
 801011e:	d4ef      	bmi.n	8010100 <__smakebuf_r+0x18>
 8010120:	f023 0303 	bic.w	r3, r3, #3
 8010124:	f043 0302 	orr.w	r3, r3, #2
 8010128:	81a3      	strh	r3, [r4, #12]
 801012a:	e7e3      	b.n	80100f4 <__smakebuf_r+0xc>
 801012c:	4b0d      	ldr	r3, [pc, #52]	; (8010164 <__smakebuf_r+0x7c>)
 801012e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010130:	89a3      	ldrh	r3, [r4, #12]
 8010132:	6020      	str	r0, [r4, #0]
 8010134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010138:	81a3      	strh	r3, [r4, #12]
 801013a:	9b00      	ldr	r3, [sp, #0]
 801013c:	6163      	str	r3, [r4, #20]
 801013e:	9b01      	ldr	r3, [sp, #4]
 8010140:	6120      	str	r0, [r4, #16]
 8010142:	b15b      	cbz	r3, 801015c <__smakebuf_r+0x74>
 8010144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010148:	4630      	mov	r0, r6
 801014a:	f000 fd8b 	bl	8010c64 <_isatty_r>
 801014e:	b128      	cbz	r0, 801015c <__smakebuf_r+0x74>
 8010150:	89a3      	ldrh	r3, [r4, #12]
 8010152:	f023 0303 	bic.w	r3, r3, #3
 8010156:	f043 0301 	orr.w	r3, r3, #1
 801015a:	81a3      	strh	r3, [r4, #12]
 801015c:	89a3      	ldrh	r3, [r4, #12]
 801015e:	431d      	orrs	r5, r3
 8010160:	81a5      	strh	r5, [r4, #12]
 8010162:	e7cd      	b.n	8010100 <__smakebuf_r+0x18>
 8010164:	0800ff39 	.word	0x0800ff39

08010168 <malloc>:
 8010168:	4b02      	ldr	r3, [pc, #8]	; (8010174 <malloc+0xc>)
 801016a:	4601      	mov	r1, r0
 801016c:	6818      	ldr	r0, [r3, #0]
 801016e:	f000 bb45 	b.w	80107fc <_malloc_r>
 8010172:	bf00      	nop
 8010174:	200017f4 	.word	0x200017f4

08010178 <memcpy>:
 8010178:	b510      	push	{r4, lr}
 801017a:	1e43      	subs	r3, r0, #1
 801017c:	440a      	add	r2, r1
 801017e:	4291      	cmp	r1, r2
 8010180:	d100      	bne.n	8010184 <memcpy+0xc>
 8010182:	bd10      	pop	{r4, pc}
 8010184:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010188:	f803 4f01 	strb.w	r4, [r3, #1]!
 801018c:	e7f7      	b.n	801017e <memcpy+0x6>

0801018e <_Balloc>:
 801018e:	b570      	push	{r4, r5, r6, lr}
 8010190:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010192:	4604      	mov	r4, r0
 8010194:	460e      	mov	r6, r1
 8010196:	b93d      	cbnz	r5, 80101a8 <_Balloc+0x1a>
 8010198:	2010      	movs	r0, #16
 801019a:	f7ff ffe5 	bl	8010168 <malloc>
 801019e:	6260      	str	r0, [r4, #36]	; 0x24
 80101a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80101a4:	6005      	str	r5, [r0, #0]
 80101a6:	60c5      	str	r5, [r0, #12]
 80101a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80101aa:	68eb      	ldr	r3, [r5, #12]
 80101ac:	b183      	cbz	r3, 80101d0 <_Balloc+0x42>
 80101ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80101b6:	b9b8      	cbnz	r0, 80101e8 <_Balloc+0x5a>
 80101b8:	2101      	movs	r1, #1
 80101ba:	fa01 f506 	lsl.w	r5, r1, r6
 80101be:	1d6a      	adds	r2, r5, #5
 80101c0:	0092      	lsls	r2, r2, #2
 80101c2:	4620      	mov	r0, r4
 80101c4:	f000 fabe 	bl	8010744 <_calloc_r>
 80101c8:	b160      	cbz	r0, 80101e4 <_Balloc+0x56>
 80101ca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80101ce:	e00e      	b.n	80101ee <_Balloc+0x60>
 80101d0:	2221      	movs	r2, #33	; 0x21
 80101d2:	2104      	movs	r1, #4
 80101d4:	4620      	mov	r0, r4
 80101d6:	f000 fab5 	bl	8010744 <_calloc_r>
 80101da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101dc:	60e8      	str	r0, [r5, #12]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1e4      	bne.n	80101ae <_Balloc+0x20>
 80101e4:	2000      	movs	r0, #0
 80101e6:	bd70      	pop	{r4, r5, r6, pc}
 80101e8:	6802      	ldr	r2, [r0, #0]
 80101ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80101ee:	2300      	movs	r3, #0
 80101f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101f4:	e7f7      	b.n	80101e6 <_Balloc+0x58>

080101f6 <_Bfree>:
 80101f6:	b570      	push	{r4, r5, r6, lr}
 80101f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80101fa:	4606      	mov	r6, r0
 80101fc:	460d      	mov	r5, r1
 80101fe:	b93c      	cbnz	r4, 8010210 <_Bfree+0x1a>
 8010200:	2010      	movs	r0, #16
 8010202:	f7ff ffb1 	bl	8010168 <malloc>
 8010206:	6270      	str	r0, [r6, #36]	; 0x24
 8010208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801020c:	6004      	str	r4, [r0, #0]
 801020e:	60c4      	str	r4, [r0, #12]
 8010210:	b13d      	cbz	r5, 8010222 <_Bfree+0x2c>
 8010212:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010214:	686a      	ldr	r2, [r5, #4]
 8010216:	68db      	ldr	r3, [r3, #12]
 8010218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801021c:	6029      	str	r1, [r5, #0]
 801021e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010222:	bd70      	pop	{r4, r5, r6, pc}

08010224 <__multadd>:
 8010224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010228:	690d      	ldr	r5, [r1, #16]
 801022a:	461f      	mov	r7, r3
 801022c:	4606      	mov	r6, r0
 801022e:	460c      	mov	r4, r1
 8010230:	f101 0c14 	add.w	ip, r1, #20
 8010234:	2300      	movs	r3, #0
 8010236:	f8dc 0000 	ldr.w	r0, [ip]
 801023a:	b281      	uxth	r1, r0
 801023c:	fb02 7101 	mla	r1, r2, r1, r7
 8010240:	0c0f      	lsrs	r7, r1, #16
 8010242:	0c00      	lsrs	r0, r0, #16
 8010244:	fb02 7000 	mla	r0, r2, r0, r7
 8010248:	b289      	uxth	r1, r1
 801024a:	3301      	adds	r3, #1
 801024c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010250:	429d      	cmp	r5, r3
 8010252:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010256:	f84c 1b04 	str.w	r1, [ip], #4
 801025a:	dcec      	bgt.n	8010236 <__multadd+0x12>
 801025c:	b1d7      	cbz	r7, 8010294 <__multadd+0x70>
 801025e:	68a3      	ldr	r3, [r4, #8]
 8010260:	42ab      	cmp	r3, r5
 8010262:	dc12      	bgt.n	801028a <__multadd+0x66>
 8010264:	6861      	ldr	r1, [r4, #4]
 8010266:	4630      	mov	r0, r6
 8010268:	3101      	adds	r1, #1
 801026a:	f7ff ff90 	bl	801018e <_Balloc>
 801026e:	6922      	ldr	r2, [r4, #16]
 8010270:	3202      	adds	r2, #2
 8010272:	f104 010c 	add.w	r1, r4, #12
 8010276:	4680      	mov	r8, r0
 8010278:	0092      	lsls	r2, r2, #2
 801027a:	300c      	adds	r0, #12
 801027c:	f7ff ff7c 	bl	8010178 <memcpy>
 8010280:	4621      	mov	r1, r4
 8010282:	4630      	mov	r0, r6
 8010284:	f7ff ffb7 	bl	80101f6 <_Bfree>
 8010288:	4644      	mov	r4, r8
 801028a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801028e:	3501      	adds	r5, #1
 8010290:	615f      	str	r7, [r3, #20]
 8010292:	6125      	str	r5, [r4, #16]
 8010294:	4620      	mov	r0, r4
 8010296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801029a <__hi0bits>:
 801029a:	0c02      	lsrs	r2, r0, #16
 801029c:	0412      	lsls	r2, r2, #16
 801029e:	4603      	mov	r3, r0
 80102a0:	b9b2      	cbnz	r2, 80102d0 <__hi0bits+0x36>
 80102a2:	0403      	lsls	r3, r0, #16
 80102a4:	2010      	movs	r0, #16
 80102a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80102aa:	bf04      	itt	eq
 80102ac:	021b      	lsleq	r3, r3, #8
 80102ae:	3008      	addeq	r0, #8
 80102b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80102b4:	bf04      	itt	eq
 80102b6:	011b      	lsleq	r3, r3, #4
 80102b8:	3004      	addeq	r0, #4
 80102ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80102be:	bf04      	itt	eq
 80102c0:	009b      	lsleq	r3, r3, #2
 80102c2:	3002      	addeq	r0, #2
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	db06      	blt.n	80102d6 <__hi0bits+0x3c>
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	d503      	bpl.n	80102d4 <__hi0bits+0x3a>
 80102cc:	3001      	adds	r0, #1
 80102ce:	4770      	bx	lr
 80102d0:	2000      	movs	r0, #0
 80102d2:	e7e8      	b.n	80102a6 <__hi0bits+0xc>
 80102d4:	2020      	movs	r0, #32
 80102d6:	4770      	bx	lr

080102d8 <__lo0bits>:
 80102d8:	6803      	ldr	r3, [r0, #0]
 80102da:	f013 0207 	ands.w	r2, r3, #7
 80102de:	4601      	mov	r1, r0
 80102e0:	d00b      	beq.n	80102fa <__lo0bits+0x22>
 80102e2:	07da      	lsls	r2, r3, #31
 80102e4:	d423      	bmi.n	801032e <__lo0bits+0x56>
 80102e6:	0798      	lsls	r0, r3, #30
 80102e8:	bf49      	itett	mi
 80102ea:	085b      	lsrmi	r3, r3, #1
 80102ec:	089b      	lsrpl	r3, r3, #2
 80102ee:	2001      	movmi	r0, #1
 80102f0:	600b      	strmi	r3, [r1, #0]
 80102f2:	bf5c      	itt	pl
 80102f4:	600b      	strpl	r3, [r1, #0]
 80102f6:	2002      	movpl	r0, #2
 80102f8:	4770      	bx	lr
 80102fa:	b298      	uxth	r0, r3
 80102fc:	b9a8      	cbnz	r0, 801032a <__lo0bits+0x52>
 80102fe:	0c1b      	lsrs	r3, r3, #16
 8010300:	2010      	movs	r0, #16
 8010302:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010306:	bf04      	itt	eq
 8010308:	0a1b      	lsreq	r3, r3, #8
 801030a:	3008      	addeq	r0, #8
 801030c:	071a      	lsls	r2, r3, #28
 801030e:	bf04      	itt	eq
 8010310:	091b      	lsreq	r3, r3, #4
 8010312:	3004      	addeq	r0, #4
 8010314:	079a      	lsls	r2, r3, #30
 8010316:	bf04      	itt	eq
 8010318:	089b      	lsreq	r3, r3, #2
 801031a:	3002      	addeq	r0, #2
 801031c:	07da      	lsls	r2, r3, #31
 801031e:	d402      	bmi.n	8010326 <__lo0bits+0x4e>
 8010320:	085b      	lsrs	r3, r3, #1
 8010322:	d006      	beq.n	8010332 <__lo0bits+0x5a>
 8010324:	3001      	adds	r0, #1
 8010326:	600b      	str	r3, [r1, #0]
 8010328:	4770      	bx	lr
 801032a:	4610      	mov	r0, r2
 801032c:	e7e9      	b.n	8010302 <__lo0bits+0x2a>
 801032e:	2000      	movs	r0, #0
 8010330:	4770      	bx	lr
 8010332:	2020      	movs	r0, #32
 8010334:	4770      	bx	lr

08010336 <__i2b>:
 8010336:	b510      	push	{r4, lr}
 8010338:	460c      	mov	r4, r1
 801033a:	2101      	movs	r1, #1
 801033c:	f7ff ff27 	bl	801018e <_Balloc>
 8010340:	2201      	movs	r2, #1
 8010342:	6144      	str	r4, [r0, #20]
 8010344:	6102      	str	r2, [r0, #16]
 8010346:	bd10      	pop	{r4, pc}

08010348 <__multiply>:
 8010348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	4614      	mov	r4, r2
 801034e:	690a      	ldr	r2, [r1, #16]
 8010350:	6923      	ldr	r3, [r4, #16]
 8010352:	429a      	cmp	r2, r3
 8010354:	bfb8      	it	lt
 8010356:	460b      	movlt	r3, r1
 8010358:	4688      	mov	r8, r1
 801035a:	bfbc      	itt	lt
 801035c:	46a0      	movlt	r8, r4
 801035e:	461c      	movlt	r4, r3
 8010360:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010364:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010368:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801036c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010370:	eb07 0609 	add.w	r6, r7, r9
 8010374:	42b3      	cmp	r3, r6
 8010376:	bfb8      	it	lt
 8010378:	3101      	addlt	r1, #1
 801037a:	f7ff ff08 	bl	801018e <_Balloc>
 801037e:	f100 0514 	add.w	r5, r0, #20
 8010382:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010386:	462b      	mov	r3, r5
 8010388:	2200      	movs	r2, #0
 801038a:	4573      	cmp	r3, lr
 801038c:	d316      	bcc.n	80103bc <__multiply+0x74>
 801038e:	f104 0214 	add.w	r2, r4, #20
 8010392:	f108 0114 	add.w	r1, r8, #20
 8010396:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801039a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801039e:	9300      	str	r3, [sp, #0]
 80103a0:	9b00      	ldr	r3, [sp, #0]
 80103a2:	9201      	str	r2, [sp, #4]
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d80c      	bhi.n	80103c2 <__multiply+0x7a>
 80103a8:	2e00      	cmp	r6, #0
 80103aa:	dd03      	ble.n	80103b4 <__multiply+0x6c>
 80103ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d05d      	beq.n	8010470 <__multiply+0x128>
 80103b4:	6106      	str	r6, [r0, #16]
 80103b6:	b003      	add	sp, #12
 80103b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103bc:	f843 2b04 	str.w	r2, [r3], #4
 80103c0:	e7e3      	b.n	801038a <__multiply+0x42>
 80103c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80103c6:	f1bb 0f00 	cmp.w	fp, #0
 80103ca:	d023      	beq.n	8010414 <__multiply+0xcc>
 80103cc:	4689      	mov	r9, r1
 80103ce:	46ac      	mov	ip, r5
 80103d0:	f04f 0800 	mov.w	r8, #0
 80103d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80103d8:	f8dc a000 	ldr.w	sl, [ip]
 80103dc:	b2a3      	uxth	r3, r4
 80103de:	fa1f fa8a 	uxth.w	sl, sl
 80103e2:	fb0b a303 	mla	r3, fp, r3, sl
 80103e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80103ea:	f8dc 4000 	ldr.w	r4, [ip]
 80103ee:	4443      	add	r3, r8
 80103f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80103f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80103f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80103fc:	46e2      	mov	sl, ip
 80103fe:	b29b      	uxth	r3, r3
 8010400:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010404:	454f      	cmp	r7, r9
 8010406:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801040a:	f84a 3b04 	str.w	r3, [sl], #4
 801040e:	d82b      	bhi.n	8010468 <__multiply+0x120>
 8010410:	f8cc 8004 	str.w	r8, [ip, #4]
 8010414:	9b01      	ldr	r3, [sp, #4]
 8010416:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801041a:	3204      	adds	r2, #4
 801041c:	f1ba 0f00 	cmp.w	sl, #0
 8010420:	d020      	beq.n	8010464 <__multiply+0x11c>
 8010422:	682b      	ldr	r3, [r5, #0]
 8010424:	4689      	mov	r9, r1
 8010426:	46a8      	mov	r8, r5
 8010428:	f04f 0b00 	mov.w	fp, #0
 801042c:	f8b9 c000 	ldrh.w	ip, [r9]
 8010430:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010434:	fb0a 440c 	mla	r4, sl, ip, r4
 8010438:	445c      	add	r4, fp
 801043a:	46c4      	mov	ip, r8
 801043c:	b29b      	uxth	r3, r3
 801043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010442:	f84c 3b04 	str.w	r3, [ip], #4
 8010446:	f859 3b04 	ldr.w	r3, [r9], #4
 801044a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801044e:	0c1b      	lsrs	r3, r3, #16
 8010450:	fb0a b303 	mla	r3, sl, r3, fp
 8010454:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010458:	454f      	cmp	r7, r9
 801045a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801045e:	d805      	bhi.n	801046c <__multiply+0x124>
 8010460:	f8c8 3004 	str.w	r3, [r8, #4]
 8010464:	3504      	adds	r5, #4
 8010466:	e79b      	b.n	80103a0 <__multiply+0x58>
 8010468:	46d4      	mov	ip, sl
 801046a:	e7b3      	b.n	80103d4 <__multiply+0x8c>
 801046c:	46e0      	mov	r8, ip
 801046e:	e7dd      	b.n	801042c <__multiply+0xe4>
 8010470:	3e01      	subs	r6, #1
 8010472:	e799      	b.n	80103a8 <__multiply+0x60>

08010474 <__pow5mult>:
 8010474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010478:	4615      	mov	r5, r2
 801047a:	f012 0203 	ands.w	r2, r2, #3
 801047e:	4606      	mov	r6, r0
 8010480:	460f      	mov	r7, r1
 8010482:	d007      	beq.n	8010494 <__pow5mult+0x20>
 8010484:	3a01      	subs	r2, #1
 8010486:	4c21      	ldr	r4, [pc, #132]	; (801050c <__pow5mult+0x98>)
 8010488:	2300      	movs	r3, #0
 801048a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801048e:	f7ff fec9 	bl	8010224 <__multadd>
 8010492:	4607      	mov	r7, r0
 8010494:	10ad      	asrs	r5, r5, #2
 8010496:	d035      	beq.n	8010504 <__pow5mult+0x90>
 8010498:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801049a:	b93c      	cbnz	r4, 80104ac <__pow5mult+0x38>
 801049c:	2010      	movs	r0, #16
 801049e:	f7ff fe63 	bl	8010168 <malloc>
 80104a2:	6270      	str	r0, [r6, #36]	; 0x24
 80104a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104a8:	6004      	str	r4, [r0, #0]
 80104aa:	60c4      	str	r4, [r0, #12]
 80104ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80104b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104b4:	b94c      	cbnz	r4, 80104ca <__pow5mult+0x56>
 80104b6:	f240 2171 	movw	r1, #625	; 0x271
 80104ba:	4630      	mov	r0, r6
 80104bc:	f7ff ff3b 	bl	8010336 <__i2b>
 80104c0:	2300      	movs	r3, #0
 80104c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80104c6:	4604      	mov	r4, r0
 80104c8:	6003      	str	r3, [r0, #0]
 80104ca:	f04f 0800 	mov.w	r8, #0
 80104ce:	07eb      	lsls	r3, r5, #31
 80104d0:	d50a      	bpl.n	80104e8 <__pow5mult+0x74>
 80104d2:	4639      	mov	r1, r7
 80104d4:	4622      	mov	r2, r4
 80104d6:	4630      	mov	r0, r6
 80104d8:	f7ff ff36 	bl	8010348 <__multiply>
 80104dc:	4639      	mov	r1, r7
 80104de:	4681      	mov	r9, r0
 80104e0:	4630      	mov	r0, r6
 80104e2:	f7ff fe88 	bl	80101f6 <_Bfree>
 80104e6:	464f      	mov	r7, r9
 80104e8:	106d      	asrs	r5, r5, #1
 80104ea:	d00b      	beq.n	8010504 <__pow5mult+0x90>
 80104ec:	6820      	ldr	r0, [r4, #0]
 80104ee:	b938      	cbnz	r0, 8010500 <__pow5mult+0x8c>
 80104f0:	4622      	mov	r2, r4
 80104f2:	4621      	mov	r1, r4
 80104f4:	4630      	mov	r0, r6
 80104f6:	f7ff ff27 	bl	8010348 <__multiply>
 80104fa:	6020      	str	r0, [r4, #0]
 80104fc:	f8c0 8000 	str.w	r8, [r0]
 8010500:	4604      	mov	r4, r0
 8010502:	e7e4      	b.n	80104ce <__pow5mult+0x5a>
 8010504:	4638      	mov	r0, r7
 8010506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801050a:	bf00      	nop
 801050c:	080137c0 	.word	0x080137c0

08010510 <__lshift>:
 8010510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010514:	460c      	mov	r4, r1
 8010516:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801051a:	6923      	ldr	r3, [r4, #16]
 801051c:	6849      	ldr	r1, [r1, #4]
 801051e:	eb0a 0903 	add.w	r9, sl, r3
 8010522:	68a3      	ldr	r3, [r4, #8]
 8010524:	4607      	mov	r7, r0
 8010526:	4616      	mov	r6, r2
 8010528:	f109 0501 	add.w	r5, r9, #1
 801052c:	42ab      	cmp	r3, r5
 801052e:	db32      	blt.n	8010596 <__lshift+0x86>
 8010530:	4638      	mov	r0, r7
 8010532:	f7ff fe2c 	bl	801018e <_Balloc>
 8010536:	2300      	movs	r3, #0
 8010538:	4680      	mov	r8, r0
 801053a:	f100 0114 	add.w	r1, r0, #20
 801053e:	461a      	mov	r2, r3
 8010540:	4553      	cmp	r3, sl
 8010542:	db2b      	blt.n	801059c <__lshift+0x8c>
 8010544:	6920      	ldr	r0, [r4, #16]
 8010546:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801054a:	f104 0314 	add.w	r3, r4, #20
 801054e:	f016 021f 	ands.w	r2, r6, #31
 8010552:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010556:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801055a:	d025      	beq.n	80105a8 <__lshift+0x98>
 801055c:	f1c2 0e20 	rsb	lr, r2, #32
 8010560:	2000      	movs	r0, #0
 8010562:	681e      	ldr	r6, [r3, #0]
 8010564:	468a      	mov	sl, r1
 8010566:	4096      	lsls	r6, r2
 8010568:	4330      	orrs	r0, r6
 801056a:	f84a 0b04 	str.w	r0, [sl], #4
 801056e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010572:	459c      	cmp	ip, r3
 8010574:	fa20 f00e 	lsr.w	r0, r0, lr
 8010578:	d814      	bhi.n	80105a4 <__lshift+0x94>
 801057a:	6048      	str	r0, [r1, #4]
 801057c:	b108      	cbz	r0, 8010582 <__lshift+0x72>
 801057e:	f109 0502 	add.w	r5, r9, #2
 8010582:	3d01      	subs	r5, #1
 8010584:	4638      	mov	r0, r7
 8010586:	f8c8 5010 	str.w	r5, [r8, #16]
 801058a:	4621      	mov	r1, r4
 801058c:	f7ff fe33 	bl	80101f6 <_Bfree>
 8010590:	4640      	mov	r0, r8
 8010592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010596:	3101      	adds	r1, #1
 8010598:	005b      	lsls	r3, r3, #1
 801059a:	e7c7      	b.n	801052c <__lshift+0x1c>
 801059c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80105a0:	3301      	adds	r3, #1
 80105a2:	e7cd      	b.n	8010540 <__lshift+0x30>
 80105a4:	4651      	mov	r1, sl
 80105a6:	e7dc      	b.n	8010562 <__lshift+0x52>
 80105a8:	3904      	subs	r1, #4
 80105aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80105ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80105b2:	459c      	cmp	ip, r3
 80105b4:	d8f9      	bhi.n	80105aa <__lshift+0x9a>
 80105b6:	e7e4      	b.n	8010582 <__lshift+0x72>

080105b8 <__mcmp>:
 80105b8:	6903      	ldr	r3, [r0, #16]
 80105ba:	690a      	ldr	r2, [r1, #16]
 80105bc:	1a9b      	subs	r3, r3, r2
 80105be:	b530      	push	{r4, r5, lr}
 80105c0:	d10c      	bne.n	80105dc <__mcmp+0x24>
 80105c2:	0092      	lsls	r2, r2, #2
 80105c4:	3014      	adds	r0, #20
 80105c6:	3114      	adds	r1, #20
 80105c8:	1884      	adds	r4, r0, r2
 80105ca:	4411      	add	r1, r2
 80105cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80105d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80105d4:	4295      	cmp	r5, r2
 80105d6:	d003      	beq.n	80105e0 <__mcmp+0x28>
 80105d8:	d305      	bcc.n	80105e6 <__mcmp+0x2e>
 80105da:	2301      	movs	r3, #1
 80105dc:	4618      	mov	r0, r3
 80105de:	bd30      	pop	{r4, r5, pc}
 80105e0:	42a0      	cmp	r0, r4
 80105e2:	d3f3      	bcc.n	80105cc <__mcmp+0x14>
 80105e4:	e7fa      	b.n	80105dc <__mcmp+0x24>
 80105e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105ea:	e7f7      	b.n	80105dc <__mcmp+0x24>

080105ec <__mdiff>:
 80105ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105f0:	460d      	mov	r5, r1
 80105f2:	4607      	mov	r7, r0
 80105f4:	4611      	mov	r1, r2
 80105f6:	4628      	mov	r0, r5
 80105f8:	4614      	mov	r4, r2
 80105fa:	f7ff ffdd 	bl	80105b8 <__mcmp>
 80105fe:	1e06      	subs	r6, r0, #0
 8010600:	d108      	bne.n	8010614 <__mdiff+0x28>
 8010602:	4631      	mov	r1, r6
 8010604:	4638      	mov	r0, r7
 8010606:	f7ff fdc2 	bl	801018e <_Balloc>
 801060a:	2301      	movs	r3, #1
 801060c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010614:	bfa4      	itt	ge
 8010616:	4623      	movge	r3, r4
 8010618:	462c      	movge	r4, r5
 801061a:	4638      	mov	r0, r7
 801061c:	6861      	ldr	r1, [r4, #4]
 801061e:	bfa6      	itte	ge
 8010620:	461d      	movge	r5, r3
 8010622:	2600      	movge	r6, #0
 8010624:	2601      	movlt	r6, #1
 8010626:	f7ff fdb2 	bl	801018e <_Balloc>
 801062a:	692b      	ldr	r3, [r5, #16]
 801062c:	60c6      	str	r6, [r0, #12]
 801062e:	6926      	ldr	r6, [r4, #16]
 8010630:	f105 0914 	add.w	r9, r5, #20
 8010634:	f104 0214 	add.w	r2, r4, #20
 8010638:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801063c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010640:	f100 0514 	add.w	r5, r0, #20
 8010644:	f04f 0e00 	mov.w	lr, #0
 8010648:	f852 ab04 	ldr.w	sl, [r2], #4
 801064c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010650:	fa1e f18a 	uxtah	r1, lr, sl
 8010654:	b2a3      	uxth	r3, r4
 8010656:	1ac9      	subs	r1, r1, r3
 8010658:	0c23      	lsrs	r3, r4, #16
 801065a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801065e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010662:	b289      	uxth	r1, r1
 8010664:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010668:	45c8      	cmp	r8, r9
 801066a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801066e:	4694      	mov	ip, r2
 8010670:	f845 3b04 	str.w	r3, [r5], #4
 8010674:	d8e8      	bhi.n	8010648 <__mdiff+0x5c>
 8010676:	45bc      	cmp	ip, r7
 8010678:	d304      	bcc.n	8010684 <__mdiff+0x98>
 801067a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801067e:	b183      	cbz	r3, 80106a2 <__mdiff+0xb6>
 8010680:	6106      	str	r6, [r0, #16]
 8010682:	e7c5      	b.n	8010610 <__mdiff+0x24>
 8010684:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010688:	fa1e f381 	uxtah	r3, lr, r1
 801068c:	141a      	asrs	r2, r3, #16
 801068e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010692:	b29b      	uxth	r3, r3
 8010694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010698:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801069c:	f845 3b04 	str.w	r3, [r5], #4
 80106a0:	e7e9      	b.n	8010676 <__mdiff+0x8a>
 80106a2:	3e01      	subs	r6, #1
 80106a4:	e7e9      	b.n	801067a <__mdiff+0x8e>

080106a6 <__d2b>:
 80106a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80106aa:	460e      	mov	r6, r1
 80106ac:	2101      	movs	r1, #1
 80106ae:	ec59 8b10 	vmov	r8, r9, d0
 80106b2:	4615      	mov	r5, r2
 80106b4:	f7ff fd6b 	bl	801018e <_Balloc>
 80106b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80106bc:	4607      	mov	r7, r0
 80106be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80106c2:	bb34      	cbnz	r4, 8010712 <__d2b+0x6c>
 80106c4:	9301      	str	r3, [sp, #4]
 80106c6:	f1b8 0300 	subs.w	r3, r8, #0
 80106ca:	d027      	beq.n	801071c <__d2b+0x76>
 80106cc:	a802      	add	r0, sp, #8
 80106ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 80106d2:	f7ff fe01 	bl	80102d8 <__lo0bits>
 80106d6:	9900      	ldr	r1, [sp, #0]
 80106d8:	b1f0      	cbz	r0, 8010718 <__d2b+0x72>
 80106da:	9a01      	ldr	r2, [sp, #4]
 80106dc:	f1c0 0320 	rsb	r3, r0, #32
 80106e0:	fa02 f303 	lsl.w	r3, r2, r3
 80106e4:	430b      	orrs	r3, r1
 80106e6:	40c2      	lsrs	r2, r0
 80106e8:	617b      	str	r3, [r7, #20]
 80106ea:	9201      	str	r2, [sp, #4]
 80106ec:	9b01      	ldr	r3, [sp, #4]
 80106ee:	61bb      	str	r3, [r7, #24]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	bf14      	ite	ne
 80106f4:	2102      	movne	r1, #2
 80106f6:	2101      	moveq	r1, #1
 80106f8:	6139      	str	r1, [r7, #16]
 80106fa:	b1c4      	cbz	r4, 801072e <__d2b+0x88>
 80106fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010700:	4404      	add	r4, r0
 8010702:	6034      	str	r4, [r6, #0]
 8010704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010708:	6028      	str	r0, [r5, #0]
 801070a:	4638      	mov	r0, r7
 801070c:	b003      	add	sp, #12
 801070e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010716:	e7d5      	b.n	80106c4 <__d2b+0x1e>
 8010718:	6179      	str	r1, [r7, #20]
 801071a:	e7e7      	b.n	80106ec <__d2b+0x46>
 801071c:	a801      	add	r0, sp, #4
 801071e:	f7ff fddb 	bl	80102d8 <__lo0bits>
 8010722:	9b01      	ldr	r3, [sp, #4]
 8010724:	617b      	str	r3, [r7, #20]
 8010726:	2101      	movs	r1, #1
 8010728:	6139      	str	r1, [r7, #16]
 801072a:	3020      	adds	r0, #32
 801072c:	e7e5      	b.n	80106fa <__d2b+0x54>
 801072e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010732:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010736:	6030      	str	r0, [r6, #0]
 8010738:	6918      	ldr	r0, [r3, #16]
 801073a:	f7ff fdae 	bl	801029a <__hi0bits>
 801073e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010742:	e7e1      	b.n	8010708 <__d2b+0x62>

08010744 <_calloc_r>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	fb02 f401 	mul.w	r4, r2, r1
 801074a:	4621      	mov	r1, r4
 801074c:	f000 f856 	bl	80107fc <_malloc_r>
 8010750:	4605      	mov	r5, r0
 8010752:	b118      	cbz	r0, 801075c <_calloc_r+0x18>
 8010754:	4622      	mov	r2, r4
 8010756:	2100      	movs	r1, #0
 8010758:	f7fd ff08 	bl	800e56c <memset>
 801075c:	4628      	mov	r0, r5
 801075e:	bd38      	pop	{r3, r4, r5, pc}

08010760 <_free_r>:
 8010760:	b538      	push	{r3, r4, r5, lr}
 8010762:	4605      	mov	r5, r0
 8010764:	2900      	cmp	r1, #0
 8010766:	d045      	beq.n	80107f4 <_free_r+0x94>
 8010768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801076c:	1f0c      	subs	r4, r1, #4
 801076e:	2b00      	cmp	r3, #0
 8010770:	bfb8      	it	lt
 8010772:	18e4      	addlt	r4, r4, r3
 8010774:	f000 fac3 	bl	8010cfe <__malloc_lock>
 8010778:	4a1f      	ldr	r2, [pc, #124]	; (80107f8 <_free_r+0x98>)
 801077a:	6813      	ldr	r3, [r2, #0]
 801077c:	4610      	mov	r0, r2
 801077e:	b933      	cbnz	r3, 801078e <_free_r+0x2e>
 8010780:	6063      	str	r3, [r4, #4]
 8010782:	6014      	str	r4, [r2, #0]
 8010784:	4628      	mov	r0, r5
 8010786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801078a:	f000 bab9 	b.w	8010d00 <__malloc_unlock>
 801078e:	42a3      	cmp	r3, r4
 8010790:	d90c      	bls.n	80107ac <_free_r+0x4c>
 8010792:	6821      	ldr	r1, [r4, #0]
 8010794:	1862      	adds	r2, r4, r1
 8010796:	4293      	cmp	r3, r2
 8010798:	bf04      	itt	eq
 801079a:	681a      	ldreq	r2, [r3, #0]
 801079c:	685b      	ldreq	r3, [r3, #4]
 801079e:	6063      	str	r3, [r4, #4]
 80107a0:	bf04      	itt	eq
 80107a2:	1852      	addeq	r2, r2, r1
 80107a4:	6022      	streq	r2, [r4, #0]
 80107a6:	6004      	str	r4, [r0, #0]
 80107a8:	e7ec      	b.n	8010784 <_free_r+0x24>
 80107aa:	4613      	mov	r3, r2
 80107ac:	685a      	ldr	r2, [r3, #4]
 80107ae:	b10a      	cbz	r2, 80107b4 <_free_r+0x54>
 80107b0:	42a2      	cmp	r2, r4
 80107b2:	d9fa      	bls.n	80107aa <_free_r+0x4a>
 80107b4:	6819      	ldr	r1, [r3, #0]
 80107b6:	1858      	adds	r0, r3, r1
 80107b8:	42a0      	cmp	r0, r4
 80107ba:	d10b      	bne.n	80107d4 <_free_r+0x74>
 80107bc:	6820      	ldr	r0, [r4, #0]
 80107be:	4401      	add	r1, r0
 80107c0:	1858      	adds	r0, r3, r1
 80107c2:	4282      	cmp	r2, r0
 80107c4:	6019      	str	r1, [r3, #0]
 80107c6:	d1dd      	bne.n	8010784 <_free_r+0x24>
 80107c8:	6810      	ldr	r0, [r2, #0]
 80107ca:	6852      	ldr	r2, [r2, #4]
 80107cc:	605a      	str	r2, [r3, #4]
 80107ce:	4401      	add	r1, r0
 80107d0:	6019      	str	r1, [r3, #0]
 80107d2:	e7d7      	b.n	8010784 <_free_r+0x24>
 80107d4:	d902      	bls.n	80107dc <_free_r+0x7c>
 80107d6:	230c      	movs	r3, #12
 80107d8:	602b      	str	r3, [r5, #0]
 80107da:	e7d3      	b.n	8010784 <_free_r+0x24>
 80107dc:	6820      	ldr	r0, [r4, #0]
 80107de:	1821      	adds	r1, r4, r0
 80107e0:	428a      	cmp	r2, r1
 80107e2:	bf04      	itt	eq
 80107e4:	6811      	ldreq	r1, [r2, #0]
 80107e6:	6852      	ldreq	r2, [r2, #4]
 80107e8:	6062      	str	r2, [r4, #4]
 80107ea:	bf04      	itt	eq
 80107ec:	1809      	addeq	r1, r1, r0
 80107ee:	6021      	streq	r1, [r4, #0]
 80107f0:	605c      	str	r4, [r3, #4]
 80107f2:	e7c7      	b.n	8010784 <_free_r+0x24>
 80107f4:	bd38      	pop	{r3, r4, r5, pc}
 80107f6:	bf00      	nop
 80107f8:	20001a28 	.word	0x20001a28

080107fc <_malloc_r>:
 80107fc:	b570      	push	{r4, r5, r6, lr}
 80107fe:	1ccd      	adds	r5, r1, #3
 8010800:	f025 0503 	bic.w	r5, r5, #3
 8010804:	3508      	adds	r5, #8
 8010806:	2d0c      	cmp	r5, #12
 8010808:	bf38      	it	cc
 801080a:	250c      	movcc	r5, #12
 801080c:	2d00      	cmp	r5, #0
 801080e:	4606      	mov	r6, r0
 8010810:	db01      	blt.n	8010816 <_malloc_r+0x1a>
 8010812:	42a9      	cmp	r1, r5
 8010814:	d903      	bls.n	801081e <_malloc_r+0x22>
 8010816:	230c      	movs	r3, #12
 8010818:	6033      	str	r3, [r6, #0]
 801081a:	2000      	movs	r0, #0
 801081c:	bd70      	pop	{r4, r5, r6, pc}
 801081e:	f000 fa6e 	bl	8010cfe <__malloc_lock>
 8010822:	4a21      	ldr	r2, [pc, #132]	; (80108a8 <_malloc_r+0xac>)
 8010824:	6814      	ldr	r4, [r2, #0]
 8010826:	4621      	mov	r1, r4
 8010828:	b991      	cbnz	r1, 8010850 <_malloc_r+0x54>
 801082a:	4c20      	ldr	r4, [pc, #128]	; (80108ac <_malloc_r+0xb0>)
 801082c:	6823      	ldr	r3, [r4, #0]
 801082e:	b91b      	cbnz	r3, 8010838 <_malloc_r+0x3c>
 8010830:	4630      	mov	r0, r6
 8010832:	f000 f98f 	bl	8010b54 <_sbrk_r>
 8010836:	6020      	str	r0, [r4, #0]
 8010838:	4629      	mov	r1, r5
 801083a:	4630      	mov	r0, r6
 801083c:	f000 f98a 	bl	8010b54 <_sbrk_r>
 8010840:	1c43      	adds	r3, r0, #1
 8010842:	d124      	bne.n	801088e <_malloc_r+0x92>
 8010844:	230c      	movs	r3, #12
 8010846:	6033      	str	r3, [r6, #0]
 8010848:	4630      	mov	r0, r6
 801084a:	f000 fa59 	bl	8010d00 <__malloc_unlock>
 801084e:	e7e4      	b.n	801081a <_malloc_r+0x1e>
 8010850:	680b      	ldr	r3, [r1, #0]
 8010852:	1b5b      	subs	r3, r3, r5
 8010854:	d418      	bmi.n	8010888 <_malloc_r+0x8c>
 8010856:	2b0b      	cmp	r3, #11
 8010858:	d90f      	bls.n	801087a <_malloc_r+0x7e>
 801085a:	600b      	str	r3, [r1, #0]
 801085c:	50cd      	str	r5, [r1, r3]
 801085e:	18cc      	adds	r4, r1, r3
 8010860:	4630      	mov	r0, r6
 8010862:	f000 fa4d 	bl	8010d00 <__malloc_unlock>
 8010866:	f104 000b 	add.w	r0, r4, #11
 801086a:	1d23      	adds	r3, r4, #4
 801086c:	f020 0007 	bic.w	r0, r0, #7
 8010870:	1ac3      	subs	r3, r0, r3
 8010872:	d0d3      	beq.n	801081c <_malloc_r+0x20>
 8010874:	425a      	negs	r2, r3
 8010876:	50e2      	str	r2, [r4, r3]
 8010878:	e7d0      	b.n	801081c <_malloc_r+0x20>
 801087a:	428c      	cmp	r4, r1
 801087c:	684b      	ldr	r3, [r1, #4]
 801087e:	bf16      	itet	ne
 8010880:	6063      	strne	r3, [r4, #4]
 8010882:	6013      	streq	r3, [r2, #0]
 8010884:	460c      	movne	r4, r1
 8010886:	e7eb      	b.n	8010860 <_malloc_r+0x64>
 8010888:	460c      	mov	r4, r1
 801088a:	6849      	ldr	r1, [r1, #4]
 801088c:	e7cc      	b.n	8010828 <_malloc_r+0x2c>
 801088e:	1cc4      	adds	r4, r0, #3
 8010890:	f024 0403 	bic.w	r4, r4, #3
 8010894:	42a0      	cmp	r0, r4
 8010896:	d005      	beq.n	80108a4 <_malloc_r+0xa8>
 8010898:	1a21      	subs	r1, r4, r0
 801089a:	4630      	mov	r0, r6
 801089c:	f000 f95a 	bl	8010b54 <_sbrk_r>
 80108a0:	3001      	adds	r0, #1
 80108a2:	d0cf      	beq.n	8010844 <_malloc_r+0x48>
 80108a4:	6025      	str	r5, [r4, #0]
 80108a6:	e7db      	b.n	8010860 <_malloc_r+0x64>
 80108a8:	20001a28 	.word	0x20001a28
 80108ac:	20001a2c 	.word	0x20001a2c

080108b0 <__ssputs_r>:
 80108b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108b4:	688e      	ldr	r6, [r1, #8]
 80108b6:	429e      	cmp	r6, r3
 80108b8:	4682      	mov	sl, r0
 80108ba:	460c      	mov	r4, r1
 80108bc:	4690      	mov	r8, r2
 80108be:	4699      	mov	r9, r3
 80108c0:	d837      	bhi.n	8010932 <__ssputs_r+0x82>
 80108c2:	898a      	ldrh	r2, [r1, #12]
 80108c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108c8:	d031      	beq.n	801092e <__ssputs_r+0x7e>
 80108ca:	6825      	ldr	r5, [r4, #0]
 80108cc:	6909      	ldr	r1, [r1, #16]
 80108ce:	1a6f      	subs	r7, r5, r1
 80108d0:	6965      	ldr	r5, [r4, #20]
 80108d2:	2302      	movs	r3, #2
 80108d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80108dc:	f109 0301 	add.w	r3, r9, #1
 80108e0:	443b      	add	r3, r7
 80108e2:	429d      	cmp	r5, r3
 80108e4:	bf38      	it	cc
 80108e6:	461d      	movcc	r5, r3
 80108e8:	0553      	lsls	r3, r2, #21
 80108ea:	d530      	bpl.n	801094e <__ssputs_r+0x9e>
 80108ec:	4629      	mov	r1, r5
 80108ee:	f7ff ff85 	bl	80107fc <_malloc_r>
 80108f2:	4606      	mov	r6, r0
 80108f4:	b950      	cbnz	r0, 801090c <__ssputs_r+0x5c>
 80108f6:	230c      	movs	r3, #12
 80108f8:	f8ca 3000 	str.w	r3, [sl]
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010902:	81a3      	strh	r3, [r4, #12]
 8010904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801090c:	463a      	mov	r2, r7
 801090e:	6921      	ldr	r1, [r4, #16]
 8010910:	f7ff fc32 	bl	8010178 <memcpy>
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801091a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801091e:	81a3      	strh	r3, [r4, #12]
 8010920:	6126      	str	r6, [r4, #16]
 8010922:	6165      	str	r5, [r4, #20]
 8010924:	443e      	add	r6, r7
 8010926:	1bed      	subs	r5, r5, r7
 8010928:	6026      	str	r6, [r4, #0]
 801092a:	60a5      	str	r5, [r4, #8]
 801092c:	464e      	mov	r6, r9
 801092e:	454e      	cmp	r6, r9
 8010930:	d900      	bls.n	8010934 <__ssputs_r+0x84>
 8010932:	464e      	mov	r6, r9
 8010934:	4632      	mov	r2, r6
 8010936:	4641      	mov	r1, r8
 8010938:	6820      	ldr	r0, [r4, #0]
 801093a:	f000 f9c7 	bl	8010ccc <memmove>
 801093e:	68a3      	ldr	r3, [r4, #8]
 8010940:	1b9b      	subs	r3, r3, r6
 8010942:	60a3      	str	r3, [r4, #8]
 8010944:	6823      	ldr	r3, [r4, #0]
 8010946:	441e      	add	r6, r3
 8010948:	6026      	str	r6, [r4, #0]
 801094a:	2000      	movs	r0, #0
 801094c:	e7dc      	b.n	8010908 <__ssputs_r+0x58>
 801094e:	462a      	mov	r2, r5
 8010950:	f000 f9d7 	bl	8010d02 <_realloc_r>
 8010954:	4606      	mov	r6, r0
 8010956:	2800      	cmp	r0, #0
 8010958:	d1e2      	bne.n	8010920 <__ssputs_r+0x70>
 801095a:	6921      	ldr	r1, [r4, #16]
 801095c:	4650      	mov	r0, sl
 801095e:	f7ff feff 	bl	8010760 <_free_r>
 8010962:	e7c8      	b.n	80108f6 <__ssputs_r+0x46>

08010964 <_svfiprintf_r>:
 8010964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010968:	461d      	mov	r5, r3
 801096a:	898b      	ldrh	r3, [r1, #12]
 801096c:	061f      	lsls	r7, r3, #24
 801096e:	b09d      	sub	sp, #116	; 0x74
 8010970:	4680      	mov	r8, r0
 8010972:	460c      	mov	r4, r1
 8010974:	4616      	mov	r6, r2
 8010976:	d50f      	bpl.n	8010998 <_svfiprintf_r+0x34>
 8010978:	690b      	ldr	r3, [r1, #16]
 801097a:	b96b      	cbnz	r3, 8010998 <_svfiprintf_r+0x34>
 801097c:	2140      	movs	r1, #64	; 0x40
 801097e:	f7ff ff3d 	bl	80107fc <_malloc_r>
 8010982:	6020      	str	r0, [r4, #0]
 8010984:	6120      	str	r0, [r4, #16]
 8010986:	b928      	cbnz	r0, 8010994 <_svfiprintf_r+0x30>
 8010988:	230c      	movs	r3, #12
 801098a:	f8c8 3000 	str.w	r3, [r8]
 801098e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010992:	e0c8      	b.n	8010b26 <_svfiprintf_r+0x1c2>
 8010994:	2340      	movs	r3, #64	; 0x40
 8010996:	6163      	str	r3, [r4, #20]
 8010998:	2300      	movs	r3, #0
 801099a:	9309      	str	r3, [sp, #36]	; 0x24
 801099c:	2320      	movs	r3, #32
 801099e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109a2:	2330      	movs	r3, #48	; 0x30
 80109a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109a8:	9503      	str	r5, [sp, #12]
 80109aa:	f04f 0b01 	mov.w	fp, #1
 80109ae:	4637      	mov	r7, r6
 80109b0:	463d      	mov	r5, r7
 80109b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80109b6:	b10b      	cbz	r3, 80109bc <_svfiprintf_r+0x58>
 80109b8:	2b25      	cmp	r3, #37	; 0x25
 80109ba:	d13e      	bne.n	8010a3a <_svfiprintf_r+0xd6>
 80109bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80109c0:	d00b      	beq.n	80109da <_svfiprintf_r+0x76>
 80109c2:	4653      	mov	r3, sl
 80109c4:	4632      	mov	r2, r6
 80109c6:	4621      	mov	r1, r4
 80109c8:	4640      	mov	r0, r8
 80109ca:	f7ff ff71 	bl	80108b0 <__ssputs_r>
 80109ce:	3001      	adds	r0, #1
 80109d0:	f000 80a4 	beq.w	8010b1c <_svfiprintf_r+0x1b8>
 80109d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d6:	4453      	add	r3, sl
 80109d8:	9309      	str	r3, [sp, #36]	; 0x24
 80109da:	783b      	ldrb	r3, [r7, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	f000 809d 	beq.w	8010b1c <_svfiprintf_r+0x1b8>
 80109e2:	2300      	movs	r3, #0
 80109e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109ec:	9304      	str	r3, [sp, #16]
 80109ee:	9307      	str	r3, [sp, #28]
 80109f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109f4:	931a      	str	r3, [sp, #104]	; 0x68
 80109f6:	462f      	mov	r7, r5
 80109f8:	2205      	movs	r2, #5
 80109fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80109fe:	4850      	ldr	r0, [pc, #320]	; (8010b40 <_svfiprintf_r+0x1dc>)
 8010a00:	f7ef fc16 	bl	8000230 <memchr>
 8010a04:	9b04      	ldr	r3, [sp, #16]
 8010a06:	b9d0      	cbnz	r0, 8010a3e <_svfiprintf_r+0xda>
 8010a08:	06d9      	lsls	r1, r3, #27
 8010a0a:	bf44      	itt	mi
 8010a0c:	2220      	movmi	r2, #32
 8010a0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a12:	071a      	lsls	r2, r3, #28
 8010a14:	bf44      	itt	mi
 8010a16:	222b      	movmi	r2, #43	; 0x2b
 8010a18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a1c:	782a      	ldrb	r2, [r5, #0]
 8010a1e:	2a2a      	cmp	r2, #42	; 0x2a
 8010a20:	d015      	beq.n	8010a4e <_svfiprintf_r+0xea>
 8010a22:	9a07      	ldr	r2, [sp, #28]
 8010a24:	462f      	mov	r7, r5
 8010a26:	2000      	movs	r0, #0
 8010a28:	250a      	movs	r5, #10
 8010a2a:	4639      	mov	r1, r7
 8010a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a30:	3b30      	subs	r3, #48	; 0x30
 8010a32:	2b09      	cmp	r3, #9
 8010a34:	d94d      	bls.n	8010ad2 <_svfiprintf_r+0x16e>
 8010a36:	b1b8      	cbz	r0, 8010a68 <_svfiprintf_r+0x104>
 8010a38:	e00f      	b.n	8010a5a <_svfiprintf_r+0xf6>
 8010a3a:	462f      	mov	r7, r5
 8010a3c:	e7b8      	b.n	80109b0 <_svfiprintf_r+0x4c>
 8010a3e:	4a40      	ldr	r2, [pc, #256]	; (8010b40 <_svfiprintf_r+0x1dc>)
 8010a40:	1a80      	subs	r0, r0, r2
 8010a42:	fa0b f000 	lsl.w	r0, fp, r0
 8010a46:	4318      	orrs	r0, r3
 8010a48:	9004      	str	r0, [sp, #16]
 8010a4a:	463d      	mov	r5, r7
 8010a4c:	e7d3      	b.n	80109f6 <_svfiprintf_r+0x92>
 8010a4e:	9a03      	ldr	r2, [sp, #12]
 8010a50:	1d11      	adds	r1, r2, #4
 8010a52:	6812      	ldr	r2, [r2, #0]
 8010a54:	9103      	str	r1, [sp, #12]
 8010a56:	2a00      	cmp	r2, #0
 8010a58:	db01      	blt.n	8010a5e <_svfiprintf_r+0xfa>
 8010a5a:	9207      	str	r2, [sp, #28]
 8010a5c:	e004      	b.n	8010a68 <_svfiprintf_r+0x104>
 8010a5e:	4252      	negs	r2, r2
 8010a60:	f043 0302 	orr.w	r3, r3, #2
 8010a64:	9207      	str	r2, [sp, #28]
 8010a66:	9304      	str	r3, [sp, #16]
 8010a68:	783b      	ldrb	r3, [r7, #0]
 8010a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a6c:	d10c      	bne.n	8010a88 <_svfiprintf_r+0x124>
 8010a6e:	787b      	ldrb	r3, [r7, #1]
 8010a70:	2b2a      	cmp	r3, #42	; 0x2a
 8010a72:	d133      	bne.n	8010adc <_svfiprintf_r+0x178>
 8010a74:	9b03      	ldr	r3, [sp, #12]
 8010a76:	1d1a      	adds	r2, r3, #4
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	9203      	str	r2, [sp, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	bfb8      	it	lt
 8010a80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010a84:	3702      	adds	r7, #2
 8010a86:	9305      	str	r3, [sp, #20]
 8010a88:	4d2e      	ldr	r5, [pc, #184]	; (8010b44 <_svfiprintf_r+0x1e0>)
 8010a8a:	7839      	ldrb	r1, [r7, #0]
 8010a8c:	2203      	movs	r2, #3
 8010a8e:	4628      	mov	r0, r5
 8010a90:	f7ef fbce 	bl	8000230 <memchr>
 8010a94:	b138      	cbz	r0, 8010aa6 <_svfiprintf_r+0x142>
 8010a96:	2340      	movs	r3, #64	; 0x40
 8010a98:	1b40      	subs	r0, r0, r5
 8010a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8010a9e:	9b04      	ldr	r3, [sp, #16]
 8010aa0:	4303      	orrs	r3, r0
 8010aa2:	3701      	adds	r7, #1
 8010aa4:	9304      	str	r3, [sp, #16]
 8010aa6:	7839      	ldrb	r1, [r7, #0]
 8010aa8:	4827      	ldr	r0, [pc, #156]	; (8010b48 <_svfiprintf_r+0x1e4>)
 8010aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010aae:	2206      	movs	r2, #6
 8010ab0:	1c7e      	adds	r6, r7, #1
 8010ab2:	f7ef fbbd 	bl	8000230 <memchr>
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	d038      	beq.n	8010b2c <_svfiprintf_r+0x1c8>
 8010aba:	4b24      	ldr	r3, [pc, #144]	; (8010b4c <_svfiprintf_r+0x1e8>)
 8010abc:	bb13      	cbnz	r3, 8010b04 <_svfiprintf_r+0x1a0>
 8010abe:	9b03      	ldr	r3, [sp, #12]
 8010ac0:	3307      	adds	r3, #7
 8010ac2:	f023 0307 	bic.w	r3, r3, #7
 8010ac6:	3308      	adds	r3, #8
 8010ac8:	9303      	str	r3, [sp, #12]
 8010aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010acc:	444b      	add	r3, r9
 8010ace:	9309      	str	r3, [sp, #36]	; 0x24
 8010ad0:	e76d      	b.n	80109ae <_svfiprintf_r+0x4a>
 8010ad2:	fb05 3202 	mla	r2, r5, r2, r3
 8010ad6:	2001      	movs	r0, #1
 8010ad8:	460f      	mov	r7, r1
 8010ada:	e7a6      	b.n	8010a2a <_svfiprintf_r+0xc6>
 8010adc:	2300      	movs	r3, #0
 8010ade:	3701      	adds	r7, #1
 8010ae0:	9305      	str	r3, [sp, #20]
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	250a      	movs	r5, #10
 8010ae6:	4638      	mov	r0, r7
 8010ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010aec:	3a30      	subs	r2, #48	; 0x30
 8010aee:	2a09      	cmp	r2, #9
 8010af0:	d903      	bls.n	8010afa <_svfiprintf_r+0x196>
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d0c8      	beq.n	8010a88 <_svfiprintf_r+0x124>
 8010af6:	9105      	str	r1, [sp, #20]
 8010af8:	e7c6      	b.n	8010a88 <_svfiprintf_r+0x124>
 8010afa:	fb05 2101 	mla	r1, r5, r1, r2
 8010afe:	2301      	movs	r3, #1
 8010b00:	4607      	mov	r7, r0
 8010b02:	e7f0      	b.n	8010ae6 <_svfiprintf_r+0x182>
 8010b04:	ab03      	add	r3, sp, #12
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	4622      	mov	r2, r4
 8010b0a:	4b11      	ldr	r3, [pc, #68]	; (8010b50 <_svfiprintf_r+0x1ec>)
 8010b0c:	a904      	add	r1, sp, #16
 8010b0e:	4640      	mov	r0, r8
 8010b10:	f7fd fdc8 	bl	800e6a4 <_printf_float>
 8010b14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010b18:	4681      	mov	r9, r0
 8010b1a:	d1d6      	bne.n	8010aca <_svfiprintf_r+0x166>
 8010b1c:	89a3      	ldrh	r3, [r4, #12]
 8010b1e:	065b      	lsls	r3, r3, #25
 8010b20:	f53f af35 	bmi.w	801098e <_svfiprintf_r+0x2a>
 8010b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b26:	b01d      	add	sp, #116	; 0x74
 8010b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2c:	ab03      	add	r3, sp, #12
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	4622      	mov	r2, r4
 8010b32:	4b07      	ldr	r3, [pc, #28]	; (8010b50 <_svfiprintf_r+0x1ec>)
 8010b34:	a904      	add	r1, sp, #16
 8010b36:	4640      	mov	r0, r8
 8010b38:	f7fe f86a 	bl	800ec10 <_printf_i>
 8010b3c:	e7ea      	b.n	8010b14 <_svfiprintf_r+0x1b0>
 8010b3e:	bf00      	nop
 8010b40:	080137cc 	.word	0x080137cc
 8010b44:	080137d2 	.word	0x080137d2
 8010b48:	080137d6 	.word	0x080137d6
 8010b4c:	0800e6a5 	.word	0x0800e6a5
 8010b50:	080108b1 	.word	0x080108b1

08010b54 <_sbrk_r>:
 8010b54:	b538      	push	{r3, r4, r5, lr}
 8010b56:	4c06      	ldr	r4, [pc, #24]	; (8010b70 <_sbrk_r+0x1c>)
 8010b58:	2300      	movs	r3, #0
 8010b5a:	4605      	mov	r5, r0
 8010b5c:	4608      	mov	r0, r1
 8010b5e:	6023      	str	r3, [r4, #0]
 8010b60:	f7f7 f88a 	bl	8007c78 <_sbrk>
 8010b64:	1c43      	adds	r3, r0, #1
 8010b66:	d102      	bne.n	8010b6e <_sbrk_r+0x1a>
 8010b68:	6823      	ldr	r3, [r4, #0]
 8010b6a:	b103      	cbz	r3, 8010b6e <_sbrk_r+0x1a>
 8010b6c:	602b      	str	r3, [r5, #0]
 8010b6e:	bd38      	pop	{r3, r4, r5, pc}
 8010b70:	20002460 	.word	0x20002460

08010b74 <__sread>:
 8010b74:	b510      	push	{r4, lr}
 8010b76:	460c      	mov	r4, r1
 8010b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b7c:	f000 f8e8 	bl	8010d50 <_read_r>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	bfab      	itete	ge
 8010b84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b86:	89a3      	ldrhlt	r3, [r4, #12]
 8010b88:	181b      	addge	r3, r3, r0
 8010b8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b8e:	bfac      	ite	ge
 8010b90:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b92:	81a3      	strhlt	r3, [r4, #12]
 8010b94:	bd10      	pop	{r4, pc}

08010b96 <__swrite>:
 8010b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b9a:	461f      	mov	r7, r3
 8010b9c:	898b      	ldrh	r3, [r1, #12]
 8010b9e:	05db      	lsls	r3, r3, #23
 8010ba0:	4605      	mov	r5, r0
 8010ba2:	460c      	mov	r4, r1
 8010ba4:	4616      	mov	r6, r2
 8010ba6:	d505      	bpl.n	8010bb4 <__swrite+0x1e>
 8010ba8:	2302      	movs	r3, #2
 8010baa:	2200      	movs	r2, #0
 8010bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bb0:	f000 f868 	bl	8010c84 <_lseek_r>
 8010bb4:	89a3      	ldrh	r3, [r4, #12]
 8010bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010bbe:	81a3      	strh	r3, [r4, #12]
 8010bc0:	4632      	mov	r2, r6
 8010bc2:	463b      	mov	r3, r7
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bca:	f000 b817 	b.w	8010bfc <_write_r>

08010bce <__sseek>:
 8010bce:	b510      	push	{r4, lr}
 8010bd0:	460c      	mov	r4, r1
 8010bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bd6:	f000 f855 	bl	8010c84 <_lseek_r>
 8010bda:	1c43      	adds	r3, r0, #1
 8010bdc:	89a3      	ldrh	r3, [r4, #12]
 8010bde:	bf15      	itete	ne
 8010be0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010be2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010be6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010bea:	81a3      	strheq	r3, [r4, #12]
 8010bec:	bf18      	it	ne
 8010bee:	81a3      	strhne	r3, [r4, #12]
 8010bf0:	bd10      	pop	{r4, pc}

08010bf2 <__sclose>:
 8010bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bf6:	f000 b813 	b.w	8010c20 <_close_r>
	...

08010bfc <_write_r>:
 8010bfc:	b538      	push	{r3, r4, r5, lr}
 8010bfe:	4c07      	ldr	r4, [pc, #28]	; (8010c1c <_write_r+0x20>)
 8010c00:	4605      	mov	r5, r0
 8010c02:	4608      	mov	r0, r1
 8010c04:	4611      	mov	r1, r2
 8010c06:	2200      	movs	r2, #0
 8010c08:	6022      	str	r2, [r4, #0]
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	f7f6 fd09 	bl	8007622 <_write>
 8010c10:	1c43      	adds	r3, r0, #1
 8010c12:	d102      	bne.n	8010c1a <_write_r+0x1e>
 8010c14:	6823      	ldr	r3, [r4, #0]
 8010c16:	b103      	cbz	r3, 8010c1a <_write_r+0x1e>
 8010c18:	602b      	str	r3, [r5, #0]
 8010c1a:	bd38      	pop	{r3, r4, r5, pc}
 8010c1c:	20002460 	.word	0x20002460

08010c20 <_close_r>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	4c06      	ldr	r4, [pc, #24]	; (8010c3c <_close_r+0x1c>)
 8010c24:	2300      	movs	r3, #0
 8010c26:	4605      	mov	r5, r0
 8010c28:	4608      	mov	r0, r1
 8010c2a:	6023      	str	r3, [r4, #0]
 8010c2c:	f7f6 ffef 	bl	8007c0e <_close>
 8010c30:	1c43      	adds	r3, r0, #1
 8010c32:	d102      	bne.n	8010c3a <_close_r+0x1a>
 8010c34:	6823      	ldr	r3, [r4, #0]
 8010c36:	b103      	cbz	r3, 8010c3a <_close_r+0x1a>
 8010c38:	602b      	str	r3, [r5, #0]
 8010c3a:	bd38      	pop	{r3, r4, r5, pc}
 8010c3c:	20002460 	.word	0x20002460

08010c40 <_fstat_r>:
 8010c40:	b538      	push	{r3, r4, r5, lr}
 8010c42:	4c07      	ldr	r4, [pc, #28]	; (8010c60 <_fstat_r+0x20>)
 8010c44:	2300      	movs	r3, #0
 8010c46:	4605      	mov	r5, r0
 8010c48:	4608      	mov	r0, r1
 8010c4a:	4611      	mov	r1, r2
 8010c4c:	6023      	str	r3, [r4, #0]
 8010c4e:	f7f6 ffea 	bl	8007c26 <_fstat>
 8010c52:	1c43      	adds	r3, r0, #1
 8010c54:	d102      	bne.n	8010c5c <_fstat_r+0x1c>
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	b103      	cbz	r3, 8010c5c <_fstat_r+0x1c>
 8010c5a:	602b      	str	r3, [r5, #0]
 8010c5c:	bd38      	pop	{r3, r4, r5, pc}
 8010c5e:	bf00      	nop
 8010c60:	20002460 	.word	0x20002460

08010c64 <_isatty_r>:
 8010c64:	b538      	push	{r3, r4, r5, lr}
 8010c66:	4c06      	ldr	r4, [pc, #24]	; (8010c80 <_isatty_r+0x1c>)
 8010c68:	2300      	movs	r3, #0
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	4608      	mov	r0, r1
 8010c6e:	6023      	str	r3, [r4, #0]
 8010c70:	f7f6 ffe9 	bl	8007c46 <_isatty>
 8010c74:	1c43      	adds	r3, r0, #1
 8010c76:	d102      	bne.n	8010c7e <_isatty_r+0x1a>
 8010c78:	6823      	ldr	r3, [r4, #0]
 8010c7a:	b103      	cbz	r3, 8010c7e <_isatty_r+0x1a>
 8010c7c:	602b      	str	r3, [r5, #0]
 8010c7e:	bd38      	pop	{r3, r4, r5, pc}
 8010c80:	20002460 	.word	0x20002460

08010c84 <_lseek_r>:
 8010c84:	b538      	push	{r3, r4, r5, lr}
 8010c86:	4c07      	ldr	r4, [pc, #28]	; (8010ca4 <_lseek_r+0x20>)
 8010c88:	4605      	mov	r5, r0
 8010c8a:	4608      	mov	r0, r1
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	2200      	movs	r2, #0
 8010c90:	6022      	str	r2, [r4, #0]
 8010c92:	461a      	mov	r2, r3
 8010c94:	f7f6 ffe2 	bl	8007c5c <_lseek>
 8010c98:	1c43      	adds	r3, r0, #1
 8010c9a:	d102      	bne.n	8010ca2 <_lseek_r+0x1e>
 8010c9c:	6823      	ldr	r3, [r4, #0]
 8010c9e:	b103      	cbz	r3, 8010ca2 <_lseek_r+0x1e>
 8010ca0:	602b      	str	r3, [r5, #0]
 8010ca2:	bd38      	pop	{r3, r4, r5, pc}
 8010ca4:	20002460 	.word	0x20002460

08010ca8 <__ascii_mbtowc>:
 8010ca8:	b082      	sub	sp, #8
 8010caa:	b901      	cbnz	r1, 8010cae <__ascii_mbtowc+0x6>
 8010cac:	a901      	add	r1, sp, #4
 8010cae:	b142      	cbz	r2, 8010cc2 <__ascii_mbtowc+0x1a>
 8010cb0:	b14b      	cbz	r3, 8010cc6 <__ascii_mbtowc+0x1e>
 8010cb2:	7813      	ldrb	r3, [r2, #0]
 8010cb4:	600b      	str	r3, [r1, #0]
 8010cb6:	7812      	ldrb	r2, [r2, #0]
 8010cb8:	1c10      	adds	r0, r2, #0
 8010cba:	bf18      	it	ne
 8010cbc:	2001      	movne	r0, #1
 8010cbe:	b002      	add	sp, #8
 8010cc0:	4770      	bx	lr
 8010cc2:	4610      	mov	r0, r2
 8010cc4:	e7fb      	b.n	8010cbe <__ascii_mbtowc+0x16>
 8010cc6:	f06f 0001 	mvn.w	r0, #1
 8010cca:	e7f8      	b.n	8010cbe <__ascii_mbtowc+0x16>

08010ccc <memmove>:
 8010ccc:	4288      	cmp	r0, r1
 8010cce:	b510      	push	{r4, lr}
 8010cd0:	eb01 0302 	add.w	r3, r1, r2
 8010cd4:	d807      	bhi.n	8010ce6 <memmove+0x1a>
 8010cd6:	1e42      	subs	r2, r0, #1
 8010cd8:	4299      	cmp	r1, r3
 8010cda:	d00a      	beq.n	8010cf2 <memmove+0x26>
 8010cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ce0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010ce4:	e7f8      	b.n	8010cd8 <memmove+0xc>
 8010ce6:	4283      	cmp	r3, r0
 8010ce8:	d9f5      	bls.n	8010cd6 <memmove+0xa>
 8010cea:	1881      	adds	r1, r0, r2
 8010cec:	1ad2      	subs	r2, r2, r3
 8010cee:	42d3      	cmn	r3, r2
 8010cf0:	d100      	bne.n	8010cf4 <memmove+0x28>
 8010cf2:	bd10      	pop	{r4, pc}
 8010cf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010cf8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010cfc:	e7f7      	b.n	8010cee <memmove+0x22>

08010cfe <__malloc_lock>:
 8010cfe:	4770      	bx	lr

08010d00 <__malloc_unlock>:
 8010d00:	4770      	bx	lr

08010d02 <_realloc_r>:
 8010d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d04:	4607      	mov	r7, r0
 8010d06:	4614      	mov	r4, r2
 8010d08:	460e      	mov	r6, r1
 8010d0a:	b921      	cbnz	r1, 8010d16 <_realloc_r+0x14>
 8010d0c:	4611      	mov	r1, r2
 8010d0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d12:	f7ff bd73 	b.w	80107fc <_malloc_r>
 8010d16:	b922      	cbnz	r2, 8010d22 <_realloc_r+0x20>
 8010d18:	f7ff fd22 	bl	8010760 <_free_r>
 8010d1c:	4625      	mov	r5, r4
 8010d1e:	4628      	mov	r0, r5
 8010d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d22:	f000 f834 	bl	8010d8e <_malloc_usable_size_r>
 8010d26:	42a0      	cmp	r0, r4
 8010d28:	d20f      	bcs.n	8010d4a <_realloc_r+0x48>
 8010d2a:	4621      	mov	r1, r4
 8010d2c:	4638      	mov	r0, r7
 8010d2e:	f7ff fd65 	bl	80107fc <_malloc_r>
 8010d32:	4605      	mov	r5, r0
 8010d34:	2800      	cmp	r0, #0
 8010d36:	d0f2      	beq.n	8010d1e <_realloc_r+0x1c>
 8010d38:	4631      	mov	r1, r6
 8010d3a:	4622      	mov	r2, r4
 8010d3c:	f7ff fa1c 	bl	8010178 <memcpy>
 8010d40:	4631      	mov	r1, r6
 8010d42:	4638      	mov	r0, r7
 8010d44:	f7ff fd0c 	bl	8010760 <_free_r>
 8010d48:	e7e9      	b.n	8010d1e <_realloc_r+0x1c>
 8010d4a:	4635      	mov	r5, r6
 8010d4c:	e7e7      	b.n	8010d1e <_realloc_r+0x1c>
	...

08010d50 <_read_r>:
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	4c07      	ldr	r4, [pc, #28]	; (8010d70 <_read_r+0x20>)
 8010d54:	4605      	mov	r5, r0
 8010d56:	4608      	mov	r0, r1
 8010d58:	4611      	mov	r1, r2
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	6022      	str	r2, [r4, #0]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	f7f6 ff38 	bl	8007bd4 <_read>
 8010d64:	1c43      	adds	r3, r0, #1
 8010d66:	d102      	bne.n	8010d6e <_read_r+0x1e>
 8010d68:	6823      	ldr	r3, [r4, #0]
 8010d6a:	b103      	cbz	r3, 8010d6e <_read_r+0x1e>
 8010d6c:	602b      	str	r3, [r5, #0]
 8010d6e:	bd38      	pop	{r3, r4, r5, pc}
 8010d70:	20002460 	.word	0x20002460

08010d74 <__ascii_wctomb>:
 8010d74:	b149      	cbz	r1, 8010d8a <__ascii_wctomb+0x16>
 8010d76:	2aff      	cmp	r2, #255	; 0xff
 8010d78:	bf85      	ittet	hi
 8010d7a:	238a      	movhi	r3, #138	; 0x8a
 8010d7c:	6003      	strhi	r3, [r0, #0]
 8010d7e:	700a      	strbls	r2, [r1, #0]
 8010d80:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010d84:	bf98      	it	ls
 8010d86:	2001      	movls	r0, #1
 8010d88:	4770      	bx	lr
 8010d8a:	4608      	mov	r0, r1
 8010d8c:	4770      	bx	lr

08010d8e <_malloc_usable_size_r>:
 8010d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d92:	1f18      	subs	r0, r3, #4
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	bfbc      	itt	lt
 8010d98:	580b      	ldrlt	r3, [r1, r0]
 8010d9a:	18c0      	addlt	r0, r0, r3
 8010d9c:	4770      	bx	lr
	...

08010da0 <pow>:
 8010da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da4:	ed2d 8b04 	vpush	{d8-d9}
 8010da8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801107c <pow+0x2dc>
 8010dac:	b08d      	sub	sp, #52	; 0x34
 8010dae:	ec57 6b10 	vmov	r6, r7, d0
 8010db2:	ec55 4b11 	vmov	r4, r5, d1
 8010db6:	f000 f963 	bl	8011080 <__ieee754_pow>
 8010dba:	f999 3000 	ldrsb.w	r3, [r9]
 8010dbe:	9300      	str	r3, [sp, #0]
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	eeb0 8a40 	vmov.f32	s16, s0
 8010dc6:	eef0 8a60 	vmov.f32	s17, s1
 8010dca:	46c8      	mov	r8, r9
 8010dcc:	d05f      	beq.n	8010e8e <pow+0xee>
 8010dce:	4622      	mov	r2, r4
 8010dd0:	462b      	mov	r3, r5
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	4629      	mov	r1, r5
 8010dd6:	f7ef fed1 	bl	8000b7c <__aeabi_dcmpun>
 8010dda:	4683      	mov	fp, r0
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	d156      	bne.n	8010e8e <pow+0xee>
 8010de0:	4632      	mov	r2, r6
 8010de2:	463b      	mov	r3, r7
 8010de4:	4630      	mov	r0, r6
 8010de6:	4639      	mov	r1, r7
 8010de8:	f7ef fec8 	bl	8000b7c <__aeabi_dcmpun>
 8010dec:	9001      	str	r0, [sp, #4]
 8010dee:	b1e8      	cbz	r0, 8010e2c <pow+0x8c>
 8010df0:	2200      	movs	r2, #0
 8010df2:	2300      	movs	r3, #0
 8010df4:	4620      	mov	r0, r4
 8010df6:	4629      	mov	r1, r5
 8010df8:	f7ef fe8e 	bl	8000b18 <__aeabi_dcmpeq>
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	d046      	beq.n	8010e8e <pow+0xee>
 8010e00:	2301      	movs	r3, #1
 8010e02:	9302      	str	r3, [sp, #8]
 8010e04:	4b96      	ldr	r3, [pc, #600]	; (8011060 <pow+0x2c0>)
 8010e06:	9303      	str	r3, [sp, #12]
 8010e08:	4b96      	ldr	r3, [pc, #600]	; (8011064 <pow+0x2c4>)
 8010e0a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010e0e:	2200      	movs	r2, #0
 8010e10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010e14:	9b00      	ldr	r3, [sp, #0]
 8010e16:	2b02      	cmp	r3, #2
 8010e18:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010e1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010e20:	d033      	beq.n	8010e8a <pow+0xea>
 8010e22:	a802      	add	r0, sp, #8
 8010e24:	f000 fefb 	bl	8011c1e <matherr>
 8010e28:	bb48      	cbnz	r0, 8010e7e <pow+0xde>
 8010e2a:	e05d      	b.n	8010ee8 <pow+0x148>
 8010e2c:	f04f 0a00 	mov.w	sl, #0
 8010e30:	f04f 0b00 	mov.w	fp, #0
 8010e34:	4652      	mov	r2, sl
 8010e36:	465b      	mov	r3, fp
 8010e38:	4630      	mov	r0, r6
 8010e3a:	4639      	mov	r1, r7
 8010e3c:	f7ef fe6c 	bl	8000b18 <__aeabi_dcmpeq>
 8010e40:	ec4b ab19 	vmov	d9, sl, fp
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d054      	beq.n	8010ef2 <pow+0x152>
 8010e48:	4652      	mov	r2, sl
 8010e4a:	465b      	mov	r3, fp
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	4629      	mov	r1, r5
 8010e50:	f7ef fe62 	bl	8000b18 <__aeabi_dcmpeq>
 8010e54:	4680      	mov	r8, r0
 8010e56:	b318      	cbz	r0, 8010ea0 <pow+0x100>
 8010e58:	2301      	movs	r3, #1
 8010e5a:	9302      	str	r3, [sp, #8]
 8010e5c:	4b80      	ldr	r3, [pc, #512]	; (8011060 <pow+0x2c0>)
 8010e5e:	9303      	str	r3, [sp, #12]
 8010e60:	9b01      	ldr	r3, [sp, #4]
 8010e62:	930a      	str	r3, [sp, #40]	; 0x28
 8010e64:	9b00      	ldr	r3, [sp, #0]
 8010e66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010e6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010e6e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d0d5      	beq.n	8010e22 <pow+0x82>
 8010e76:	4b7b      	ldr	r3, [pc, #492]	; (8011064 <pow+0x2c4>)
 8010e78:	2200      	movs	r2, #0
 8010e7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e80:	b11b      	cbz	r3, 8010e8a <pow+0xea>
 8010e82:	f7fd fb49 	bl	800e518 <__errno>
 8010e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e88:	6003      	str	r3, [r0, #0]
 8010e8a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8010e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8010e92:	eef0 0a68 	vmov.f32	s1, s17
 8010e96:	b00d      	add	sp, #52	; 0x34
 8010e98:	ecbd 8b04 	vpop	{d8-d9}
 8010e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea0:	ec45 4b10 	vmov	d0, r4, r5
 8010ea4:	f000 feb3 	bl	8011c0e <finite>
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	d0f0      	beq.n	8010e8e <pow+0xee>
 8010eac:	4652      	mov	r2, sl
 8010eae:	465b      	mov	r3, fp
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	f7ef fe3a 	bl	8000b2c <__aeabi_dcmplt>
 8010eb8:	2800      	cmp	r0, #0
 8010eba:	d0e8      	beq.n	8010e8e <pow+0xee>
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	9302      	str	r3, [sp, #8]
 8010ec0:	4b67      	ldr	r3, [pc, #412]	; (8011060 <pow+0x2c0>)
 8010ec2:	9303      	str	r3, [sp, #12]
 8010ec4:	f999 3000 	ldrsb.w	r3, [r9]
 8010ec8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010ecc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010ed0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010ed4:	b913      	cbnz	r3, 8010edc <pow+0x13c>
 8010ed6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010eda:	e7a2      	b.n	8010e22 <pow+0x82>
 8010edc:	4962      	ldr	r1, [pc, #392]	; (8011068 <pow+0x2c8>)
 8010ede:	2000      	movs	r0, #0
 8010ee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010ee4:	2b02      	cmp	r3, #2
 8010ee6:	d19c      	bne.n	8010e22 <pow+0x82>
 8010ee8:	f7fd fb16 	bl	800e518 <__errno>
 8010eec:	2321      	movs	r3, #33	; 0x21
 8010eee:	6003      	str	r3, [r0, #0]
 8010ef0:	e7c5      	b.n	8010e7e <pow+0xde>
 8010ef2:	eeb0 0a48 	vmov.f32	s0, s16
 8010ef6:	eef0 0a68 	vmov.f32	s1, s17
 8010efa:	f000 fe88 	bl	8011c0e <finite>
 8010efe:	9000      	str	r0, [sp, #0]
 8010f00:	2800      	cmp	r0, #0
 8010f02:	f040 8081 	bne.w	8011008 <pow+0x268>
 8010f06:	ec47 6b10 	vmov	d0, r6, r7
 8010f0a:	f000 fe80 	bl	8011c0e <finite>
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d07a      	beq.n	8011008 <pow+0x268>
 8010f12:	ec45 4b10 	vmov	d0, r4, r5
 8010f16:	f000 fe7a 	bl	8011c0e <finite>
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d074      	beq.n	8011008 <pow+0x268>
 8010f1e:	ec53 2b18 	vmov	r2, r3, d8
 8010f22:	ee18 0a10 	vmov	r0, s16
 8010f26:	4619      	mov	r1, r3
 8010f28:	f7ef fe28 	bl	8000b7c <__aeabi_dcmpun>
 8010f2c:	f999 9000 	ldrsb.w	r9, [r9]
 8010f30:	4b4b      	ldr	r3, [pc, #300]	; (8011060 <pow+0x2c0>)
 8010f32:	b1b0      	cbz	r0, 8010f62 <pow+0x1c2>
 8010f34:	2201      	movs	r2, #1
 8010f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f3a:	9b00      	ldr	r3, [sp, #0]
 8010f3c:	930a      	str	r3, [sp, #40]	; 0x28
 8010f3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010f42:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010f46:	f1b9 0f00 	cmp.w	r9, #0
 8010f4a:	d0c4      	beq.n	8010ed6 <pow+0x136>
 8010f4c:	4652      	mov	r2, sl
 8010f4e:	465b      	mov	r3, fp
 8010f50:	4650      	mov	r0, sl
 8010f52:	4659      	mov	r1, fp
 8010f54:	f7ef fca2 	bl	800089c <__aeabi_ddiv>
 8010f58:	f1b9 0f02 	cmp.w	r9, #2
 8010f5c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010f60:	e7c1      	b.n	8010ee6 <pow+0x146>
 8010f62:	2203      	movs	r2, #3
 8010f64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f68:	900a      	str	r0, [sp, #40]	; 0x28
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	2200      	movs	r2, #0
 8010f70:	4b3e      	ldr	r3, [pc, #248]	; (801106c <pow+0x2cc>)
 8010f72:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010f76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010f7a:	f7ef fb65 	bl	8000648 <__aeabi_dmul>
 8010f7e:	4604      	mov	r4, r0
 8010f80:	460d      	mov	r5, r1
 8010f82:	f1b9 0f00 	cmp.w	r9, #0
 8010f86:	d124      	bne.n	8010fd2 <pow+0x232>
 8010f88:	4b39      	ldr	r3, [pc, #228]	; (8011070 <pow+0x2d0>)
 8010f8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010f8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f92:	4630      	mov	r0, r6
 8010f94:	4652      	mov	r2, sl
 8010f96:	465b      	mov	r3, fp
 8010f98:	4639      	mov	r1, r7
 8010f9a:	f7ef fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	d056      	beq.n	8011050 <pow+0x2b0>
 8010fa2:	ec45 4b10 	vmov	d0, r4, r5
 8010fa6:	f000 fe47 	bl	8011c38 <rint>
 8010faa:	4622      	mov	r2, r4
 8010fac:	462b      	mov	r3, r5
 8010fae:	ec51 0b10 	vmov	r0, r1, d0
 8010fb2:	f7ef fdb1 	bl	8000b18 <__aeabi_dcmpeq>
 8010fb6:	b920      	cbnz	r0, 8010fc2 <pow+0x222>
 8010fb8:	4b2e      	ldr	r3, [pc, #184]	; (8011074 <pow+0x2d4>)
 8010fba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010fbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fc2:	f998 3000 	ldrsb.w	r3, [r8]
 8010fc6:	2b02      	cmp	r3, #2
 8010fc8:	d142      	bne.n	8011050 <pow+0x2b0>
 8010fca:	f7fd faa5 	bl	800e518 <__errno>
 8010fce:	2322      	movs	r3, #34	; 0x22
 8010fd0:	e78d      	b.n	8010eee <pow+0x14e>
 8010fd2:	4b29      	ldr	r3, [pc, #164]	; (8011078 <pow+0x2d8>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fda:	4630      	mov	r0, r6
 8010fdc:	4652      	mov	r2, sl
 8010fde:	465b      	mov	r3, fp
 8010fe0:	4639      	mov	r1, r7
 8010fe2:	f7ef fda3 	bl	8000b2c <__aeabi_dcmplt>
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	d0eb      	beq.n	8010fc2 <pow+0x222>
 8010fea:	ec45 4b10 	vmov	d0, r4, r5
 8010fee:	f000 fe23 	bl	8011c38 <rint>
 8010ff2:	4622      	mov	r2, r4
 8010ff4:	462b      	mov	r3, r5
 8010ff6:	ec51 0b10 	vmov	r0, r1, d0
 8010ffa:	f7ef fd8d 	bl	8000b18 <__aeabi_dcmpeq>
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d1df      	bne.n	8010fc2 <pow+0x222>
 8011002:	2200      	movs	r2, #0
 8011004:	4b18      	ldr	r3, [pc, #96]	; (8011068 <pow+0x2c8>)
 8011006:	e7da      	b.n	8010fbe <pow+0x21e>
 8011008:	2200      	movs	r2, #0
 801100a:	2300      	movs	r3, #0
 801100c:	ec51 0b18 	vmov	r0, r1, d8
 8011010:	f7ef fd82 	bl	8000b18 <__aeabi_dcmpeq>
 8011014:	2800      	cmp	r0, #0
 8011016:	f43f af3a 	beq.w	8010e8e <pow+0xee>
 801101a:	ec47 6b10 	vmov	d0, r6, r7
 801101e:	f000 fdf6 	bl	8011c0e <finite>
 8011022:	2800      	cmp	r0, #0
 8011024:	f43f af33 	beq.w	8010e8e <pow+0xee>
 8011028:	ec45 4b10 	vmov	d0, r4, r5
 801102c:	f000 fdef 	bl	8011c0e <finite>
 8011030:	2800      	cmp	r0, #0
 8011032:	f43f af2c 	beq.w	8010e8e <pow+0xee>
 8011036:	2304      	movs	r3, #4
 8011038:	9302      	str	r3, [sp, #8]
 801103a:	4b09      	ldr	r3, [pc, #36]	; (8011060 <pow+0x2c0>)
 801103c:	9303      	str	r3, [sp, #12]
 801103e:	2300      	movs	r3, #0
 8011040:	930a      	str	r3, [sp, #40]	; 0x28
 8011042:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011046:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801104a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801104e:	e7b8      	b.n	8010fc2 <pow+0x222>
 8011050:	a802      	add	r0, sp, #8
 8011052:	f000 fde4 	bl	8011c1e <matherr>
 8011056:	2800      	cmp	r0, #0
 8011058:	f47f af11 	bne.w	8010e7e <pow+0xde>
 801105c:	e7b5      	b.n	8010fca <pow+0x22a>
 801105e:	bf00      	nop
 8011060:	080138e8 	.word	0x080138e8
 8011064:	3ff00000 	.word	0x3ff00000
 8011068:	fff00000 	.word	0xfff00000
 801106c:	3fe00000 	.word	0x3fe00000
 8011070:	47efffff 	.word	0x47efffff
 8011074:	c7efffff 	.word	0xc7efffff
 8011078:	7ff00000 	.word	0x7ff00000
 801107c:	200019c4 	.word	0x200019c4

08011080 <__ieee754_pow>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	b091      	sub	sp, #68	; 0x44
 8011086:	ed8d 1b00 	vstr	d1, [sp]
 801108a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801108e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011092:	ea58 0302 	orrs.w	r3, r8, r2
 8011096:	ec57 6b10 	vmov	r6, r7, d0
 801109a:	f000 84be 	beq.w	8011a1a <__ieee754_pow+0x99a>
 801109e:	4b7a      	ldr	r3, [pc, #488]	; (8011288 <__ieee754_pow+0x208>)
 80110a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80110a4:	429c      	cmp	r4, r3
 80110a6:	463d      	mov	r5, r7
 80110a8:	ee10 aa10 	vmov	sl, s0
 80110ac:	dc09      	bgt.n	80110c2 <__ieee754_pow+0x42>
 80110ae:	d103      	bne.n	80110b8 <__ieee754_pow+0x38>
 80110b0:	b93e      	cbnz	r6, 80110c2 <__ieee754_pow+0x42>
 80110b2:	45a0      	cmp	r8, r4
 80110b4:	dc0d      	bgt.n	80110d2 <__ieee754_pow+0x52>
 80110b6:	e001      	b.n	80110bc <__ieee754_pow+0x3c>
 80110b8:	4598      	cmp	r8, r3
 80110ba:	dc02      	bgt.n	80110c2 <__ieee754_pow+0x42>
 80110bc:	4598      	cmp	r8, r3
 80110be:	d10e      	bne.n	80110de <__ieee754_pow+0x5e>
 80110c0:	b16a      	cbz	r2, 80110de <__ieee754_pow+0x5e>
 80110c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80110c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80110ca:	ea54 030a 	orrs.w	r3, r4, sl
 80110ce:	f000 84a4 	beq.w	8011a1a <__ieee754_pow+0x99a>
 80110d2:	486e      	ldr	r0, [pc, #440]	; (801128c <__ieee754_pow+0x20c>)
 80110d4:	b011      	add	sp, #68	; 0x44
 80110d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110da:	f000 bda5 	b.w	8011c28 <nan>
 80110de:	2d00      	cmp	r5, #0
 80110e0:	da53      	bge.n	801118a <__ieee754_pow+0x10a>
 80110e2:	4b6b      	ldr	r3, [pc, #428]	; (8011290 <__ieee754_pow+0x210>)
 80110e4:	4598      	cmp	r8, r3
 80110e6:	dc4d      	bgt.n	8011184 <__ieee754_pow+0x104>
 80110e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80110ec:	4598      	cmp	r8, r3
 80110ee:	dd4c      	ble.n	801118a <__ieee754_pow+0x10a>
 80110f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80110f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80110f8:	2b14      	cmp	r3, #20
 80110fa:	dd26      	ble.n	801114a <__ieee754_pow+0xca>
 80110fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011100:	fa22 f103 	lsr.w	r1, r2, r3
 8011104:	fa01 f303 	lsl.w	r3, r1, r3
 8011108:	4293      	cmp	r3, r2
 801110a:	d13e      	bne.n	801118a <__ieee754_pow+0x10a>
 801110c:	f001 0101 	and.w	r1, r1, #1
 8011110:	f1c1 0b02 	rsb	fp, r1, #2
 8011114:	2a00      	cmp	r2, #0
 8011116:	d15b      	bne.n	80111d0 <__ieee754_pow+0x150>
 8011118:	4b5b      	ldr	r3, [pc, #364]	; (8011288 <__ieee754_pow+0x208>)
 801111a:	4598      	cmp	r8, r3
 801111c:	d124      	bne.n	8011168 <__ieee754_pow+0xe8>
 801111e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011122:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011126:	ea53 030a 	orrs.w	r3, r3, sl
 801112a:	f000 8476 	beq.w	8011a1a <__ieee754_pow+0x99a>
 801112e:	4b59      	ldr	r3, [pc, #356]	; (8011294 <__ieee754_pow+0x214>)
 8011130:	429c      	cmp	r4, r3
 8011132:	dd2d      	ble.n	8011190 <__ieee754_pow+0x110>
 8011134:	f1b9 0f00 	cmp.w	r9, #0
 8011138:	f280 8473 	bge.w	8011a22 <__ieee754_pow+0x9a2>
 801113c:	2000      	movs	r0, #0
 801113e:	2100      	movs	r1, #0
 8011140:	ec41 0b10 	vmov	d0, r0, r1
 8011144:	b011      	add	sp, #68	; 0x44
 8011146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801114a:	2a00      	cmp	r2, #0
 801114c:	d13e      	bne.n	80111cc <__ieee754_pow+0x14c>
 801114e:	f1c3 0314 	rsb	r3, r3, #20
 8011152:	fa48 f103 	asr.w	r1, r8, r3
 8011156:	fa01 f303 	lsl.w	r3, r1, r3
 801115a:	4543      	cmp	r3, r8
 801115c:	f040 8469 	bne.w	8011a32 <__ieee754_pow+0x9b2>
 8011160:	f001 0101 	and.w	r1, r1, #1
 8011164:	f1c1 0b02 	rsb	fp, r1, #2
 8011168:	4b4b      	ldr	r3, [pc, #300]	; (8011298 <__ieee754_pow+0x218>)
 801116a:	4598      	cmp	r8, r3
 801116c:	d118      	bne.n	80111a0 <__ieee754_pow+0x120>
 801116e:	f1b9 0f00 	cmp.w	r9, #0
 8011172:	f280 845a 	bge.w	8011a2a <__ieee754_pow+0x9aa>
 8011176:	4948      	ldr	r1, [pc, #288]	; (8011298 <__ieee754_pow+0x218>)
 8011178:	4632      	mov	r2, r6
 801117a:	463b      	mov	r3, r7
 801117c:	2000      	movs	r0, #0
 801117e:	f7ef fb8d 	bl	800089c <__aeabi_ddiv>
 8011182:	e7dd      	b.n	8011140 <__ieee754_pow+0xc0>
 8011184:	f04f 0b02 	mov.w	fp, #2
 8011188:	e7c4      	b.n	8011114 <__ieee754_pow+0x94>
 801118a:	f04f 0b00 	mov.w	fp, #0
 801118e:	e7c1      	b.n	8011114 <__ieee754_pow+0x94>
 8011190:	f1b9 0f00 	cmp.w	r9, #0
 8011194:	dad2      	bge.n	801113c <__ieee754_pow+0xbc>
 8011196:	e9dd 0300 	ldrd	r0, r3, [sp]
 801119a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801119e:	e7cf      	b.n	8011140 <__ieee754_pow+0xc0>
 80111a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80111a4:	d106      	bne.n	80111b4 <__ieee754_pow+0x134>
 80111a6:	4632      	mov	r2, r6
 80111a8:	463b      	mov	r3, r7
 80111aa:	4610      	mov	r0, r2
 80111ac:	4619      	mov	r1, r3
 80111ae:	f7ef fa4b 	bl	8000648 <__aeabi_dmul>
 80111b2:	e7c5      	b.n	8011140 <__ieee754_pow+0xc0>
 80111b4:	4b39      	ldr	r3, [pc, #228]	; (801129c <__ieee754_pow+0x21c>)
 80111b6:	4599      	cmp	r9, r3
 80111b8:	d10a      	bne.n	80111d0 <__ieee754_pow+0x150>
 80111ba:	2d00      	cmp	r5, #0
 80111bc:	db08      	blt.n	80111d0 <__ieee754_pow+0x150>
 80111be:	ec47 6b10 	vmov	d0, r6, r7
 80111c2:	b011      	add	sp, #68	; 0x44
 80111c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c8:	f000 bc68 	b.w	8011a9c <__ieee754_sqrt>
 80111cc:	f04f 0b00 	mov.w	fp, #0
 80111d0:	ec47 6b10 	vmov	d0, r6, r7
 80111d4:	f000 fd12 	bl	8011bfc <fabs>
 80111d8:	ec51 0b10 	vmov	r0, r1, d0
 80111dc:	f1ba 0f00 	cmp.w	sl, #0
 80111e0:	d127      	bne.n	8011232 <__ieee754_pow+0x1b2>
 80111e2:	b124      	cbz	r4, 80111ee <__ieee754_pow+0x16e>
 80111e4:	4b2c      	ldr	r3, [pc, #176]	; (8011298 <__ieee754_pow+0x218>)
 80111e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d121      	bne.n	8011232 <__ieee754_pow+0x1b2>
 80111ee:	f1b9 0f00 	cmp.w	r9, #0
 80111f2:	da05      	bge.n	8011200 <__ieee754_pow+0x180>
 80111f4:	4602      	mov	r2, r0
 80111f6:	460b      	mov	r3, r1
 80111f8:	2000      	movs	r0, #0
 80111fa:	4927      	ldr	r1, [pc, #156]	; (8011298 <__ieee754_pow+0x218>)
 80111fc:	f7ef fb4e 	bl	800089c <__aeabi_ddiv>
 8011200:	2d00      	cmp	r5, #0
 8011202:	da9d      	bge.n	8011140 <__ieee754_pow+0xc0>
 8011204:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011208:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801120c:	ea54 030b 	orrs.w	r3, r4, fp
 8011210:	d108      	bne.n	8011224 <__ieee754_pow+0x1a4>
 8011212:	4602      	mov	r2, r0
 8011214:	460b      	mov	r3, r1
 8011216:	4610      	mov	r0, r2
 8011218:	4619      	mov	r1, r3
 801121a:	f7ef f85d 	bl	80002d8 <__aeabi_dsub>
 801121e:	4602      	mov	r2, r0
 8011220:	460b      	mov	r3, r1
 8011222:	e7ac      	b.n	801117e <__ieee754_pow+0xfe>
 8011224:	f1bb 0f01 	cmp.w	fp, #1
 8011228:	d18a      	bne.n	8011140 <__ieee754_pow+0xc0>
 801122a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801122e:	4619      	mov	r1, r3
 8011230:	e786      	b.n	8011140 <__ieee754_pow+0xc0>
 8011232:	0fed      	lsrs	r5, r5, #31
 8011234:	1e6b      	subs	r3, r5, #1
 8011236:	930d      	str	r3, [sp, #52]	; 0x34
 8011238:	ea5b 0303 	orrs.w	r3, fp, r3
 801123c:	d102      	bne.n	8011244 <__ieee754_pow+0x1c4>
 801123e:	4632      	mov	r2, r6
 8011240:	463b      	mov	r3, r7
 8011242:	e7e8      	b.n	8011216 <__ieee754_pow+0x196>
 8011244:	4b16      	ldr	r3, [pc, #88]	; (80112a0 <__ieee754_pow+0x220>)
 8011246:	4598      	cmp	r8, r3
 8011248:	f340 80fe 	ble.w	8011448 <__ieee754_pow+0x3c8>
 801124c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011250:	4598      	cmp	r8, r3
 8011252:	dd0a      	ble.n	801126a <__ieee754_pow+0x1ea>
 8011254:	4b0f      	ldr	r3, [pc, #60]	; (8011294 <__ieee754_pow+0x214>)
 8011256:	429c      	cmp	r4, r3
 8011258:	dc0d      	bgt.n	8011276 <__ieee754_pow+0x1f6>
 801125a:	f1b9 0f00 	cmp.w	r9, #0
 801125e:	f6bf af6d 	bge.w	801113c <__ieee754_pow+0xbc>
 8011262:	a307      	add	r3, pc, #28	; (adr r3, 8011280 <__ieee754_pow+0x200>)
 8011264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011268:	e79f      	b.n	80111aa <__ieee754_pow+0x12a>
 801126a:	4b0e      	ldr	r3, [pc, #56]	; (80112a4 <__ieee754_pow+0x224>)
 801126c:	429c      	cmp	r4, r3
 801126e:	ddf4      	ble.n	801125a <__ieee754_pow+0x1da>
 8011270:	4b09      	ldr	r3, [pc, #36]	; (8011298 <__ieee754_pow+0x218>)
 8011272:	429c      	cmp	r4, r3
 8011274:	dd18      	ble.n	80112a8 <__ieee754_pow+0x228>
 8011276:	f1b9 0f00 	cmp.w	r9, #0
 801127a:	dcf2      	bgt.n	8011262 <__ieee754_pow+0x1e2>
 801127c:	e75e      	b.n	801113c <__ieee754_pow+0xbc>
 801127e:	bf00      	nop
 8011280:	8800759c 	.word	0x8800759c
 8011284:	7e37e43c 	.word	0x7e37e43c
 8011288:	7ff00000 	.word	0x7ff00000
 801128c:	080137d1 	.word	0x080137d1
 8011290:	433fffff 	.word	0x433fffff
 8011294:	3fefffff 	.word	0x3fefffff
 8011298:	3ff00000 	.word	0x3ff00000
 801129c:	3fe00000 	.word	0x3fe00000
 80112a0:	41e00000 	.word	0x41e00000
 80112a4:	3feffffe 	.word	0x3feffffe
 80112a8:	2200      	movs	r2, #0
 80112aa:	4b63      	ldr	r3, [pc, #396]	; (8011438 <__ieee754_pow+0x3b8>)
 80112ac:	f7ef f814 	bl	80002d8 <__aeabi_dsub>
 80112b0:	a355      	add	r3, pc, #340	; (adr r3, 8011408 <__ieee754_pow+0x388>)
 80112b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b6:	4604      	mov	r4, r0
 80112b8:	460d      	mov	r5, r1
 80112ba:	f7ef f9c5 	bl	8000648 <__aeabi_dmul>
 80112be:	a354      	add	r3, pc, #336	; (adr r3, 8011410 <__ieee754_pow+0x390>)
 80112c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c4:	4606      	mov	r6, r0
 80112c6:	460f      	mov	r7, r1
 80112c8:	4620      	mov	r0, r4
 80112ca:	4629      	mov	r1, r5
 80112cc:	f7ef f9bc 	bl	8000648 <__aeabi_dmul>
 80112d0:	2200      	movs	r2, #0
 80112d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112d6:	4b59      	ldr	r3, [pc, #356]	; (801143c <__ieee754_pow+0x3bc>)
 80112d8:	4620      	mov	r0, r4
 80112da:	4629      	mov	r1, r5
 80112dc:	f7ef f9b4 	bl	8000648 <__aeabi_dmul>
 80112e0:	4602      	mov	r2, r0
 80112e2:	460b      	mov	r3, r1
 80112e4:	a14c      	add	r1, pc, #304	; (adr r1, 8011418 <__ieee754_pow+0x398>)
 80112e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112ea:	f7ee fff5 	bl	80002d8 <__aeabi_dsub>
 80112ee:	4622      	mov	r2, r4
 80112f0:	462b      	mov	r3, r5
 80112f2:	f7ef f9a9 	bl	8000648 <__aeabi_dmul>
 80112f6:	4602      	mov	r2, r0
 80112f8:	460b      	mov	r3, r1
 80112fa:	2000      	movs	r0, #0
 80112fc:	4950      	ldr	r1, [pc, #320]	; (8011440 <__ieee754_pow+0x3c0>)
 80112fe:	f7ee ffeb 	bl	80002d8 <__aeabi_dsub>
 8011302:	4622      	mov	r2, r4
 8011304:	462b      	mov	r3, r5
 8011306:	4680      	mov	r8, r0
 8011308:	4689      	mov	r9, r1
 801130a:	4620      	mov	r0, r4
 801130c:	4629      	mov	r1, r5
 801130e:	f7ef f99b 	bl	8000648 <__aeabi_dmul>
 8011312:	4602      	mov	r2, r0
 8011314:	460b      	mov	r3, r1
 8011316:	4640      	mov	r0, r8
 8011318:	4649      	mov	r1, r9
 801131a:	f7ef f995 	bl	8000648 <__aeabi_dmul>
 801131e:	a340      	add	r3, pc, #256	; (adr r3, 8011420 <__ieee754_pow+0x3a0>)
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	f7ef f990 	bl	8000648 <__aeabi_dmul>
 8011328:	4602      	mov	r2, r0
 801132a:	460b      	mov	r3, r1
 801132c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011330:	f7ee ffd2 	bl	80002d8 <__aeabi_dsub>
 8011334:	4602      	mov	r2, r0
 8011336:	460b      	mov	r3, r1
 8011338:	4604      	mov	r4, r0
 801133a:	460d      	mov	r5, r1
 801133c:	4630      	mov	r0, r6
 801133e:	4639      	mov	r1, r7
 8011340:	f7ee ffcc 	bl	80002dc <__adddf3>
 8011344:	2000      	movs	r0, #0
 8011346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801134a:	4632      	mov	r2, r6
 801134c:	463b      	mov	r3, r7
 801134e:	f7ee ffc3 	bl	80002d8 <__aeabi_dsub>
 8011352:	4602      	mov	r2, r0
 8011354:	460b      	mov	r3, r1
 8011356:	4620      	mov	r0, r4
 8011358:	4629      	mov	r1, r5
 801135a:	f7ee ffbd 	bl	80002d8 <__aeabi_dsub>
 801135e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011360:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8011364:	4313      	orrs	r3, r2
 8011366:	4606      	mov	r6, r0
 8011368:	460f      	mov	r7, r1
 801136a:	f040 81eb 	bne.w	8011744 <__ieee754_pow+0x6c4>
 801136e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011428 <__ieee754_pow+0x3a8>
 8011372:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011376:	2400      	movs	r4, #0
 8011378:	4622      	mov	r2, r4
 801137a:	462b      	mov	r3, r5
 801137c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011380:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011384:	f7ee ffa8 	bl	80002d8 <__aeabi_dsub>
 8011388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801138c:	f7ef f95c 	bl	8000648 <__aeabi_dmul>
 8011390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011394:	4680      	mov	r8, r0
 8011396:	4689      	mov	r9, r1
 8011398:	4630      	mov	r0, r6
 801139a:	4639      	mov	r1, r7
 801139c:	f7ef f954 	bl	8000648 <__aeabi_dmul>
 80113a0:	4602      	mov	r2, r0
 80113a2:	460b      	mov	r3, r1
 80113a4:	4640      	mov	r0, r8
 80113a6:	4649      	mov	r1, r9
 80113a8:	f7ee ff98 	bl	80002dc <__adddf3>
 80113ac:	4622      	mov	r2, r4
 80113ae:	462b      	mov	r3, r5
 80113b0:	4680      	mov	r8, r0
 80113b2:	4689      	mov	r9, r1
 80113b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113b8:	f7ef f946 	bl	8000648 <__aeabi_dmul>
 80113bc:	460b      	mov	r3, r1
 80113be:	4604      	mov	r4, r0
 80113c0:	460d      	mov	r5, r1
 80113c2:	4602      	mov	r2, r0
 80113c4:	4649      	mov	r1, r9
 80113c6:	4640      	mov	r0, r8
 80113c8:	e9cd 4500 	strd	r4, r5, [sp]
 80113cc:	f7ee ff86 	bl	80002dc <__adddf3>
 80113d0:	4b1c      	ldr	r3, [pc, #112]	; (8011444 <__ieee754_pow+0x3c4>)
 80113d2:	4299      	cmp	r1, r3
 80113d4:	4606      	mov	r6, r0
 80113d6:	460f      	mov	r7, r1
 80113d8:	468b      	mov	fp, r1
 80113da:	f340 82f7 	ble.w	80119cc <__ieee754_pow+0x94c>
 80113de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80113e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80113e6:	4303      	orrs	r3, r0
 80113e8:	f000 81ea 	beq.w	80117c0 <__ieee754_pow+0x740>
 80113ec:	a310      	add	r3, pc, #64	; (adr r3, 8011430 <__ieee754_pow+0x3b0>)
 80113ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113f6:	f7ef f927 	bl	8000648 <__aeabi_dmul>
 80113fa:	a30d      	add	r3, pc, #52	; (adr r3, 8011430 <__ieee754_pow+0x3b0>)
 80113fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011400:	e6d5      	b.n	80111ae <__ieee754_pow+0x12e>
 8011402:	bf00      	nop
 8011404:	f3af 8000 	nop.w
 8011408:	60000000 	.word	0x60000000
 801140c:	3ff71547 	.word	0x3ff71547
 8011410:	f85ddf44 	.word	0xf85ddf44
 8011414:	3e54ae0b 	.word	0x3e54ae0b
 8011418:	55555555 	.word	0x55555555
 801141c:	3fd55555 	.word	0x3fd55555
 8011420:	652b82fe 	.word	0x652b82fe
 8011424:	3ff71547 	.word	0x3ff71547
 8011428:	00000000 	.word	0x00000000
 801142c:	bff00000 	.word	0xbff00000
 8011430:	8800759c 	.word	0x8800759c
 8011434:	7e37e43c 	.word	0x7e37e43c
 8011438:	3ff00000 	.word	0x3ff00000
 801143c:	3fd00000 	.word	0x3fd00000
 8011440:	3fe00000 	.word	0x3fe00000
 8011444:	408fffff 	.word	0x408fffff
 8011448:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801144c:	f04f 0200 	mov.w	r2, #0
 8011450:	da05      	bge.n	801145e <__ieee754_pow+0x3de>
 8011452:	4bd3      	ldr	r3, [pc, #844]	; (80117a0 <__ieee754_pow+0x720>)
 8011454:	f7ef f8f8 	bl	8000648 <__aeabi_dmul>
 8011458:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801145c:	460c      	mov	r4, r1
 801145e:	1523      	asrs	r3, r4, #20
 8011460:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011464:	4413      	add	r3, r2
 8011466:	9309      	str	r3, [sp, #36]	; 0x24
 8011468:	4bce      	ldr	r3, [pc, #824]	; (80117a4 <__ieee754_pow+0x724>)
 801146a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801146e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011472:	429c      	cmp	r4, r3
 8011474:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011478:	dd08      	ble.n	801148c <__ieee754_pow+0x40c>
 801147a:	4bcb      	ldr	r3, [pc, #812]	; (80117a8 <__ieee754_pow+0x728>)
 801147c:	429c      	cmp	r4, r3
 801147e:	f340 815e 	ble.w	801173e <__ieee754_pow+0x6be>
 8011482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011484:	3301      	adds	r3, #1
 8011486:	9309      	str	r3, [sp, #36]	; 0x24
 8011488:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801148c:	f04f 0a00 	mov.w	sl, #0
 8011490:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011494:	930c      	str	r3, [sp, #48]	; 0x30
 8011496:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011498:	4bc4      	ldr	r3, [pc, #784]	; (80117ac <__ieee754_pow+0x72c>)
 801149a:	4413      	add	r3, r2
 801149c:	ed93 7b00 	vldr	d7, [r3]
 80114a0:	4629      	mov	r1, r5
 80114a2:	ec53 2b17 	vmov	r2, r3, d7
 80114a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80114aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80114ae:	f7ee ff13 	bl	80002d8 <__aeabi_dsub>
 80114b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80114b6:	4606      	mov	r6, r0
 80114b8:	460f      	mov	r7, r1
 80114ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80114be:	f7ee ff0d 	bl	80002dc <__adddf3>
 80114c2:	4602      	mov	r2, r0
 80114c4:	460b      	mov	r3, r1
 80114c6:	2000      	movs	r0, #0
 80114c8:	49b9      	ldr	r1, [pc, #740]	; (80117b0 <__ieee754_pow+0x730>)
 80114ca:	f7ef f9e7 	bl	800089c <__aeabi_ddiv>
 80114ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80114d2:	4602      	mov	r2, r0
 80114d4:	460b      	mov	r3, r1
 80114d6:	4630      	mov	r0, r6
 80114d8:	4639      	mov	r1, r7
 80114da:	f7ef f8b5 	bl	8000648 <__aeabi_dmul>
 80114de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80114e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80114e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80114ea:	2300      	movs	r3, #0
 80114ec:	9302      	str	r3, [sp, #8]
 80114ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80114f2:	106d      	asrs	r5, r5, #1
 80114f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80114f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80114fc:	2200      	movs	r2, #0
 80114fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011502:	4640      	mov	r0, r8
 8011504:	4649      	mov	r1, r9
 8011506:	4614      	mov	r4, r2
 8011508:	461d      	mov	r5, r3
 801150a:	f7ef f89d 	bl	8000648 <__aeabi_dmul>
 801150e:	4602      	mov	r2, r0
 8011510:	460b      	mov	r3, r1
 8011512:	4630      	mov	r0, r6
 8011514:	4639      	mov	r1, r7
 8011516:	f7ee fedf 	bl	80002d8 <__aeabi_dsub>
 801151a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801151e:	4606      	mov	r6, r0
 8011520:	460f      	mov	r7, r1
 8011522:	4620      	mov	r0, r4
 8011524:	4629      	mov	r1, r5
 8011526:	f7ee fed7 	bl	80002d8 <__aeabi_dsub>
 801152a:	4602      	mov	r2, r0
 801152c:	460b      	mov	r3, r1
 801152e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011532:	f7ee fed1 	bl	80002d8 <__aeabi_dsub>
 8011536:	4642      	mov	r2, r8
 8011538:	464b      	mov	r3, r9
 801153a:	f7ef f885 	bl	8000648 <__aeabi_dmul>
 801153e:	4602      	mov	r2, r0
 8011540:	460b      	mov	r3, r1
 8011542:	4630      	mov	r0, r6
 8011544:	4639      	mov	r1, r7
 8011546:	f7ee fec7 	bl	80002d8 <__aeabi_dsub>
 801154a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801154e:	f7ef f87b 	bl	8000648 <__aeabi_dmul>
 8011552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011556:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801155a:	4610      	mov	r0, r2
 801155c:	4619      	mov	r1, r3
 801155e:	f7ef f873 	bl	8000648 <__aeabi_dmul>
 8011562:	a37b      	add	r3, pc, #492	; (adr r3, 8011750 <__ieee754_pow+0x6d0>)
 8011564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011568:	4604      	mov	r4, r0
 801156a:	460d      	mov	r5, r1
 801156c:	f7ef f86c 	bl	8000648 <__aeabi_dmul>
 8011570:	a379      	add	r3, pc, #484	; (adr r3, 8011758 <__ieee754_pow+0x6d8>)
 8011572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011576:	f7ee feb1 	bl	80002dc <__adddf3>
 801157a:	4622      	mov	r2, r4
 801157c:	462b      	mov	r3, r5
 801157e:	f7ef f863 	bl	8000648 <__aeabi_dmul>
 8011582:	a377      	add	r3, pc, #476	; (adr r3, 8011760 <__ieee754_pow+0x6e0>)
 8011584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011588:	f7ee fea8 	bl	80002dc <__adddf3>
 801158c:	4622      	mov	r2, r4
 801158e:	462b      	mov	r3, r5
 8011590:	f7ef f85a 	bl	8000648 <__aeabi_dmul>
 8011594:	a374      	add	r3, pc, #464	; (adr r3, 8011768 <__ieee754_pow+0x6e8>)
 8011596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159a:	f7ee fe9f 	bl	80002dc <__adddf3>
 801159e:	4622      	mov	r2, r4
 80115a0:	462b      	mov	r3, r5
 80115a2:	f7ef f851 	bl	8000648 <__aeabi_dmul>
 80115a6:	a372      	add	r3, pc, #456	; (adr r3, 8011770 <__ieee754_pow+0x6f0>)
 80115a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ac:	f7ee fe96 	bl	80002dc <__adddf3>
 80115b0:	4622      	mov	r2, r4
 80115b2:	462b      	mov	r3, r5
 80115b4:	f7ef f848 	bl	8000648 <__aeabi_dmul>
 80115b8:	a36f      	add	r3, pc, #444	; (adr r3, 8011778 <__ieee754_pow+0x6f8>)
 80115ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115be:	f7ee fe8d 	bl	80002dc <__adddf3>
 80115c2:	4622      	mov	r2, r4
 80115c4:	4606      	mov	r6, r0
 80115c6:	460f      	mov	r7, r1
 80115c8:	462b      	mov	r3, r5
 80115ca:	4620      	mov	r0, r4
 80115cc:	4629      	mov	r1, r5
 80115ce:	f7ef f83b 	bl	8000648 <__aeabi_dmul>
 80115d2:	4602      	mov	r2, r0
 80115d4:	460b      	mov	r3, r1
 80115d6:	4630      	mov	r0, r6
 80115d8:	4639      	mov	r1, r7
 80115da:	f7ef f835 	bl	8000648 <__aeabi_dmul>
 80115de:	4642      	mov	r2, r8
 80115e0:	4604      	mov	r4, r0
 80115e2:	460d      	mov	r5, r1
 80115e4:	464b      	mov	r3, r9
 80115e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115ea:	f7ee fe77 	bl	80002dc <__adddf3>
 80115ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115f2:	f7ef f829 	bl	8000648 <__aeabi_dmul>
 80115f6:	4622      	mov	r2, r4
 80115f8:	462b      	mov	r3, r5
 80115fa:	f7ee fe6f 	bl	80002dc <__adddf3>
 80115fe:	4642      	mov	r2, r8
 8011600:	4606      	mov	r6, r0
 8011602:	460f      	mov	r7, r1
 8011604:	464b      	mov	r3, r9
 8011606:	4640      	mov	r0, r8
 8011608:	4649      	mov	r1, r9
 801160a:	f7ef f81d 	bl	8000648 <__aeabi_dmul>
 801160e:	2200      	movs	r2, #0
 8011610:	4b68      	ldr	r3, [pc, #416]	; (80117b4 <__ieee754_pow+0x734>)
 8011612:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011616:	f7ee fe61 	bl	80002dc <__adddf3>
 801161a:	4632      	mov	r2, r6
 801161c:	463b      	mov	r3, r7
 801161e:	f7ee fe5d 	bl	80002dc <__adddf3>
 8011622:	9802      	ldr	r0, [sp, #8]
 8011624:	460d      	mov	r5, r1
 8011626:	4604      	mov	r4, r0
 8011628:	4602      	mov	r2, r0
 801162a:	460b      	mov	r3, r1
 801162c:	4640      	mov	r0, r8
 801162e:	4649      	mov	r1, r9
 8011630:	f7ef f80a 	bl	8000648 <__aeabi_dmul>
 8011634:	2200      	movs	r2, #0
 8011636:	4680      	mov	r8, r0
 8011638:	4689      	mov	r9, r1
 801163a:	4b5e      	ldr	r3, [pc, #376]	; (80117b4 <__ieee754_pow+0x734>)
 801163c:	4620      	mov	r0, r4
 801163e:	4629      	mov	r1, r5
 8011640:	f7ee fe4a 	bl	80002d8 <__aeabi_dsub>
 8011644:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011648:	f7ee fe46 	bl	80002d8 <__aeabi_dsub>
 801164c:	4602      	mov	r2, r0
 801164e:	460b      	mov	r3, r1
 8011650:	4630      	mov	r0, r6
 8011652:	4639      	mov	r1, r7
 8011654:	f7ee fe40 	bl	80002d8 <__aeabi_dsub>
 8011658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801165c:	f7ee fff4 	bl	8000648 <__aeabi_dmul>
 8011660:	4622      	mov	r2, r4
 8011662:	4606      	mov	r6, r0
 8011664:	460f      	mov	r7, r1
 8011666:	462b      	mov	r3, r5
 8011668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801166c:	f7ee ffec 	bl	8000648 <__aeabi_dmul>
 8011670:	4602      	mov	r2, r0
 8011672:	460b      	mov	r3, r1
 8011674:	4630      	mov	r0, r6
 8011676:	4639      	mov	r1, r7
 8011678:	f7ee fe30 	bl	80002dc <__adddf3>
 801167c:	4606      	mov	r6, r0
 801167e:	460f      	mov	r7, r1
 8011680:	4602      	mov	r2, r0
 8011682:	460b      	mov	r3, r1
 8011684:	4640      	mov	r0, r8
 8011686:	4649      	mov	r1, r9
 8011688:	f7ee fe28 	bl	80002dc <__adddf3>
 801168c:	9802      	ldr	r0, [sp, #8]
 801168e:	a33c      	add	r3, pc, #240	; (adr r3, 8011780 <__ieee754_pow+0x700>)
 8011690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011694:	4604      	mov	r4, r0
 8011696:	460d      	mov	r5, r1
 8011698:	f7ee ffd6 	bl	8000648 <__aeabi_dmul>
 801169c:	4642      	mov	r2, r8
 801169e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80116a2:	464b      	mov	r3, r9
 80116a4:	4620      	mov	r0, r4
 80116a6:	4629      	mov	r1, r5
 80116a8:	f7ee fe16 	bl	80002d8 <__aeabi_dsub>
 80116ac:	4602      	mov	r2, r0
 80116ae:	460b      	mov	r3, r1
 80116b0:	4630      	mov	r0, r6
 80116b2:	4639      	mov	r1, r7
 80116b4:	f7ee fe10 	bl	80002d8 <__aeabi_dsub>
 80116b8:	a333      	add	r3, pc, #204	; (adr r3, 8011788 <__ieee754_pow+0x708>)
 80116ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116be:	f7ee ffc3 	bl	8000648 <__aeabi_dmul>
 80116c2:	a333      	add	r3, pc, #204	; (adr r3, 8011790 <__ieee754_pow+0x710>)
 80116c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c8:	4606      	mov	r6, r0
 80116ca:	460f      	mov	r7, r1
 80116cc:	4620      	mov	r0, r4
 80116ce:	4629      	mov	r1, r5
 80116d0:	f7ee ffba 	bl	8000648 <__aeabi_dmul>
 80116d4:	4602      	mov	r2, r0
 80116d6:	460b      	mov	r3, r1
 80116d8:	4630      	mov	r0, r6
 80116da:	4639      	mov	r1, r7
 80116dc:	f7ee fdfe 	bl	80002dc <__adddf3>
 80116e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116e2:	4b35      	ldr	r3, [pc, #212]	; (80117b8 <__ieee754_pow+0x738>)
 80116e4:	4413      	add	r3, r2
 80116e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ea:	f7ee fdf7 	bl	80002dc <__adddf3>
 80116ee:	4604      	mov	r4, r0
 80116f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116f2:	460d      	mov	r5, r1
 80116f4:	f7ee ff3e 	bl	8000574 <__aeabi_i2d>
 80116f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116fa:	4b30      	ldr	r3, [pc, #192]	; (80117bc <__ieee754_pow+0x73c>)
 80116fc:	4413      	add	r3, r2
 80116fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011702:	4606      	mov	r6, r0
 8011704:	460f      	mov	r7, r1
 8011706:	4622      	mov	r2, r4
 8011708:	462b      	mov	r3, r5
 801170a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801170e:	f7ee fde5 	bl	80002dc <__adddf3>
 8011712:	4642      	mov	r2, r8
 8011714:	464b      	mov	r3, r9
 8011716:	f7ee fde1 	bl	80002dc <__adddf3>
 801171a:	4632      	mov	r2, r6
 801171c:	463b      	mov	r3, r7
 801171e:	f7ee fddd 	bl	80002dc <__adddf3>
 8011722:	9802      	ldr	r0, [sp, #8]
 8011724:	4632      	mov	r2, r6
 8011726:	463b      	mov	r3, r7
 8011728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801172c:	f7ee fdd4 	bl	80002d8 <__aeabi_dsub>
 8011730:	4642      	mov	r2, r8
 8011732:	464b      	mov	r3, r9
 8011734:	f7ee fdd0 	bl	80002d8 <__aeabi_dsub>
 8011738:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801173c:	e607      	b.n	801134e <__ieee754_pow+0x2ce>
 801173e:	f04f 0a01 	mov.w	sl, #1
 8011742:	e6a5      	b.n	8011490 <__ieee754_pow+0x410>
 8011744:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011798 <__ieee754_pow+0x718>
 8011748:	e613      	b.n	8011372 <__ieee754_pow+0x2f2>
 801174a:	bf00      	nop
 801174c:	f3af 8000 	nop.w
 8011750:	4a454eef 	.word	0x4a454eef
 8011754:	3fca7e28 	.word	0x3fca7e28
 8011758:	93c9db65 	.word	0x93c9db65
 801175c:	3fcd864a 	.word	0x3fcd864a
 8011760:	a91d4101 	.word	0xa91d4101
 8011764:	3fd17460 	.word	0x3fd17460
 8011768:	518f264d 	.word	0x518f264d
 801176c:	3fd55555 	.word	0x3fd55555
 8011770:	db6fabff 	.word	0xdb6fabff
 8011774:	3fdb6db6 	.word	0x3fdb6db6
 8011778:	33333303 	.word	0x33333303
 801177c:	3fe33333 	.word	0x3fe33333
 8011780:	e0000000 	.word	0xe0000000
 8011784:	3feec709 	.word	0x3feec709
 8011788:	dc3a03fd 	.word	0xdc3a03fd
 801178c:	3feec709 	.word	0x3feec709
 8011790:	145b01f5 	.word	0x145b01f5
 8011794:	be3e2fe0 	.word	0xbe3e2fe0
 8011798:	00000000 	.word	0x00000000
 801179c:	3ff00000 	.word	0x3ff00000
 80117a0:	43400000 	.word	0x43400000
 80117a4:	0003988e 	.word	0x0003988e
 80117a8:	000bb679 	.word	0x000bb679
 80117ac:	080138f0 	.word	0x080138f0
 80117b0:	3ff00000 	.word	0x3ff00000
 80117b4:	40080000 	.word	0x40080000
 80117b8:	08013910 	.word	0x08013910
 80117bc:	08013900 	.word	0x08013900
 80117c0:	a3b4      	add	r3, pc, #720	; (adr r3, 8011a94 <__ieee754_pow+0xa14>)
 80117c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c6:	4640      	mov	r0, r8
 80117c8:	4649      	mov	r1, r9
 80117ca:	f7ee fd87 	bl	80002dc <__adddf3>
 80117ce:	4622      	mov	r2, r4
 80117d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117d4:	462b      	mov	r3, r5
 80117d6:	4630      	mov	r0, r6
 80117d8:	4639      	mov	r1, r7
 80117da:	f7ee fd7d 	bl	80002d8 <__aeabi_dsub>
 80117de:	4602      	mov	r2, r0
 80117e0:	460b      	mov	r3, r1
 80117e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117e6:	f7ef f9bf 	bl	8000b68 <__aeabi_dcmpgt>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	f47f adfe 	bne.w	80113ec <__ieee754_pow+0x36c>
 80117f0:	4aa3      	ldr	r2, [pc, #652]	; (8011a80 <__ieee754_pow+0xa00>)
 80117f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80117f6:	4293      	cmp	r3, r2
 80117f8:	f340 810a 	ble.w	8011a10 <__ieee754_pow+0x990>
 80117fc:	151b      	asrs	r3, r3, #20
 80117fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011802:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011806:	fa4a f303 	asr.w	r3, sl, r3
 801180a:	445b      	add	r3, fp
 801180c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011810:	4e9c      	ldr	r6, [pc, #624]	; (8011a84 <__ieee754_pow+0xa04>)
 8011812:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011816:	4116      	asrs	r6, r2
 8011818:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801181c:	2000      	movs	r0, #0
 801181e:	ea23 0106 	bic.w	r1, r3, r6
 8011822:	f1c2 0214 	rsb	r2, r2, #20
 8011826:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801182a:	fa4a fa02 	asr.w	sl, sl, r2
 801182e:	f1bb 0f00 	cmp.w	fp, #0
 8011832:	4602      	mov	r2, r0
 8011834:	460b      	mov	r3, r1
 8011836:	4620      	mov	r0, r4
 8011838:	4629      	mov	r1, r5
 801183a:	bfb8      	it	lt
 801183c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011840:	f7ee fd4a 	bl	80002d8 <__aeabi_dsub>
 8011844:	e9cd 0100 	strd	r0, r1, [sp]
 8011848:	4642      	mov	r2, r8
 801184a:	464b      	mov	r3, r9
 801184c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011850:	f7ee fd44 	bl	80002dc <__adddf3>
 8011854:	2000      	movs	r0, #0
 8011856:	a378      	add	r3, pc, #480	; (adr r3, 8011a38 <__ieee754_pow+0x9b8>)
 8011858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185c:	4604      	mov	r4, r0
 801185e:	460d      	mov	r5, r1
 8011860:	f7ee fef2 	bl	8000648 <__aeabi_dmul>
 8011864:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011868:	4606      	mov	r6, r0
 801186a:	460f      	mov	r7, r1
 801186c:	4620      	mov	r0, r4
 801186e:	4629      	mov	r1, r5
 8011870:	f7ee fd32 	bl	80002d8 <__aeabi_dsub>
 8011874:	4602      	mov	r2, r0
 8011876:	460b      	mov	r3, r1
 8011878:	4640      	mov	r0, r8
 801187a:	4649      	mov	r1, r9
 801187c:	f7ee fd2c 	bl	80002d8 <__aeabi_dsub>
 8011880:	a36f      	add	r3, pc, #444	; (adr r3, 8011a40 <__ieee754_pow+0x9c0>)
 8011882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011886:	f7ee fedf 	bl	8000648 <__aeabi_dmul>
 801188a:	a36f      	add	r3, pc, #444	; (adr r3, 8011a48 <__ieee754_pow+0x9c8>)
 801188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011890:	4680      	mov	r8, r0
 8011892:	4689      	mov	r9, r1
 8011894:	4620      	mov	r0, r4
 8011896:	4629      	mov	r1, r5
 8011898:	f7ee fed6 	bl	8000648 <__aeabi_dmul>
 801189c:	4602      	mov	r2, r0
 801189e:	460b      	mov	r3, r1
 80118a0:	4640      	mov	r0, r8
 80118a2:	4649      	mov	r1, r9
 80118a4:	f7ee fd1a 	bl	80002dc <__adddf3>
 80118a8:	4604      	mov	r4, r0
 80118aa:	460d      	mov	r5, r1
 80118ac:	4602      	mov	r2, r0
 80118ae:	460b      	mov	r3, r1
 80118b0:	4630      	mov	r0, r6
 80118b2:	4639      	mov	r1, r7
 80118b4:	f7ee fd12 	bl	80002dc <__adddf3>
 80118b8:	4632      	mov	r2, r6
 80118ba:	463b      	mov	r3, r7
 80118bc:	4680      	mov	r8, r0
 80118be:	4689      	mov	r9, r1
 80118c0:	f7ee fd0a 	bl	80002d8 <__aeabi_dsub>
 80118c4:	4602      	mov	r2, r0
 80118c6:	460b      	mov	r3, r1
 80118c8:	4620      	mov	r0, r4
 80118ca:	4629      	mov	r1, r5
 80118cc:	f7ee fd04 	bl	80002d8 <__aeabi_dsub>
 80118d0:	4642      	mov	r2, r8
 80118d2:	4606      	mov	r6, r0
 80118d4:	460f      	mov	r7, r1
 80118d6:	464b      	mov	r3, r9
 80118d8:	4640      	mov	r0, r8
 80118da:	4649      	mov	r1, r9
 80118dc:	f7ee feb4 	bl	8000648 <__aeabi_dmul>
 80118e0:	a35b      	add	r3, pc, #364	; (adr r3, 8011a50 <__ieee754_pow+0x9d0>)
 80118e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e6:	4604      	mov	r4, r0
 80118e8:	460d      	mov	r5, r1
 80118ea:	f7ee fead 	bl	8000648 <__aeabi_dmul>
 80118ee:	a35a      	add	r3, pc, #360	; (adr r3, 8011a58 <__ieee754_pow+0x9d8>)
 80118f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f4:	f7ee fcf0 	bl	80002d8 <__aeabi_dsub>
 80118f8:	4622      	mov	r2, r4
 80118fa:	462b      	mov	r3, r5
 80118fc:	f7ee fea4 	bl	8000648 <__aeabi_dmul>
 8011900:	a357      	add	r3, pc, #348	; (adr r3, 8011a60 <__ieee754_pow+0x9e0>)
 8011902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011906:	f7ee fce9 	bl	80002dc <__adddf3>
 801190a:	4622      	mov	r2, r4
 801190c:	462b      	mov	r3, r5
 801190e:	f7ee fe9b 	bl	8000648 <__aeabi_dmul>
 8011912:	a355      	add	r3, pc, #340	; (adr r3, 8011a68 <__ieee754_pow+0x9e8>)
 8011914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011918:	f7ee fcde 	bl	80002d8 <__aeabi_dsub>
 801191c:	4622      	mov	r2, r4
 801191e:	462b      	mov	r3, r5
 8011920:	f7ee fe92 	bl	8000648 <__aeabi_dmul>
 8011924:	a352      	add	r3, pc, #328	; (adr r3, 8011a70 <__ieee754_pow+0x9f0>)
 8011926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192a:	f7ee fcd7 	bl	80002dc <__adddf3>
 801192e:	4622      	mov	r2, r4
 8011930:	462b      	mov	r3, r5
 8011932:	f7ee fe89 	bl	8000648 <__aeabi_dmul>
 8011936:	4602      	mov	r2, r0
 8011938:	460b      	mov	r3, r1
 801193a:	4640      	mov	r0, r8
 801193c:	4649      	mov	r1, r9
 801193e:	f7ee fccb 	bl	80002d8 <__aeabi_dsub>
 8011942:	4604      	mov	r4, r0
 8011944:	460d      	mov	r5, r1
 8011946:	4602      	mov	r2, r0
 8011948:	460b      	mov	r3, r1
 801194a:	4640      	mov	r0, r8
 801194c:	4649      	mov	r1, r9
 801194e:	f7ee fe7b 	bl	8000648 <__aeabi_dmul>
 8011952:	2200      	movs	r2, #0
 8011954:	e9cd 0100 	strd	r0, r1, [sp]
 8011958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801195c:	4620      	mov	r0, r4
 801195e:	4629      	mov	r1, r5
 8011960:	f7ee fcba 	bl	80002d8 <__aeabi_dsub>
 8011964:	4602      	mov	r2, r0
 8011966:	460b      	mov	r3, r1
 8011968:	e9dd 0100 	ldrd	r0, r1, [sp]
 801196c:	f7ee ff96 	bl	800089c <__aeabi_ddiv>
 8011970:	4632      	mov	r2, r6
 8011972:	4604      	mov	r4, r0
 8011974:	460d      	mov	r5, r1
 8011976:	463b      	mov	r3, r7
 8011978:	4640      	mov	r0, r8
 801197a:	4649      	mov	r1, r9
 801197c:	f7ee fe64 	bl	8000648 <__aeabi_dmul>
 8011980:	4632      	mov	r2, r6
 8011982:	463b      	mov	r3, r7
 8011984:	f7ee fcaa 	bl	80002dc <__adddf3>
 8011988:	4602      	mov	r2, r0
 801198a:	460b      	mov	r3, r1
 801198c:	4620      	mov	r0, r4
 801198e:	4629      	mov	r1, r5
 8011990:	f7ee fca2 	bl	80002d8 <__aeabi_dsub>
 8011994:	4642      	mov	r2, r8
 8011996:	464b      	mov	r3, r9
 8011998:	f7ee fc9e 	bl	80002d8 <__aeabi_dsub>
 801199c:	4602      	mov	r2, r0
 801199e:	460b      	mov	r3, r1
 80119a0:	2000      	movs	r0, #0
 80119a2:	4939      	ldr	r1, [pc, #228]	; (8011a88 <__ieee754_pow+0xa08>)
 80119a4:	f7ee fc98 	bl	80002d8 <__aeabi_dsub>
 80119a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80119ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80119b0:	4602      	mov	r2, r0
 80119b2:	460b      	mov	r3, r1
 80119b4:	da2f      	bge.n	8011a16 <__ieee754_pow+0x996>
 80119b6:	4650      	mov	r0, sl
 80119b8:	ec43 2b10 	vmov	d0, r2, r3
 80119bc:	f000 f9c0 	bl	8011d40 <scalbn>
 80119c0:	ec51 0b10 	vmov	r0, r1, d0
 80119c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119c8:	f7ff bbf1 	b.w	80111ae <__ieee754_pow+0x12e>
 80119cc:	4b2f      	ldr	r3, [pc, #188]	; (8011a8c <__ieee754_pow+0xa0c>)
 80119ce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80119d2:	429e      	cmp	r6, r3
 80119d4:	f77f af0c 	ble.w	80117f0 <__ieee754_pow+0x770>
 80119d8:	4b2d      	ldr	r3, [pc, #180]	; (8011a90 <__ieee754_pow+0xa10>)
 80119da:	440b      	add	r3, r1
 80119dc:	4303      	orrs	r3, r0
 80119de:	d00b      	beq.n	80119f8 <__ieee754_pow+0x978>
 80119e0:	a325      	add	r3, pc, #148	; (adr r3, 8011a78 <__ieee754_pow+0x9f8>)
 80119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119ea:	f7ee fe2d 	bl	8000648 <__aeabi_dmul>
 80119ee:	a322      	add	r3, pc, #136	; (adr r3, 8011a78 <__ieee754_pow+0x9f8>)
 80119f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f4:	f7ff bbdb 	b.w	80111ae <__ieee754_pow+0x12e>
 80119f8:	4622      	mov	r2, r4
 80119fa:	462b      	mov	r3, r5
 80119fc:	f7ee fc6c 	bl	80002d8 <__aeabi_dsub>
 8011a00:	4642      	mov	r2, r8
 8011a02:	464b      	mov	r3, r9
 8011a04:	f7ef f8a6 	bl	8000b54 <__aeabi_dcmpge>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	f43f aef1 	beq.w	80117f0 <__ieee754_pow+0x770>
 8011a0e:	e7e7      	b.n	80119e0 <__ieee754_pow+0x960>
 8011a10:	f04f 0a00 	mov.w	sl, #0
 8011a14:	e718      	b.n	8011848 <__ieee754_pow+0x7c8>
 8011a16:	4621      	mov	r1, r4
 8011a18:	e7d4      	b.n	80119c4 <__ieee754_pow+0x944>
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	491a      	ldr	r1, [pc, #104]	; (8011a88 <__ieee754_pow+0xa08>)
 8011a1e:	f7ff bb8f 	b.w	8011140 <__ieee754_pow+0xc0>
 8011a22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a26:	f7ff bb8b 	b.w	8011140 <__ieee754_pow+0xc0>
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	4639      	mov	r1, r7
 8011a2e:	f7ff bb87 	b.w	8011140 <__ieee754_pow+0xc0>
 8011a32:	4693      	mov	fp, r2
 8011a34:	f7ff bb98 	b.w	8011168 <__ieee754_pow+0xe8>
 8011a38:	00000000 	.word	0x00000000
 8011a3c:	3fe62e43 	.word	0x3fe62e43
 8011a40:	fefa39ef 	.word	0xfefa39ef
 8011a44:	3fe62e42 	.word	0x3fe62e42
 8011a48:	0ca86c39 	.word	0x0ca86c39
 8011a4c:	be205c61 	.word	0xbe205c61
 8011a50:	72bea4d0 	.word	0x72bea4d0
 8011a54:	3e663769 	.word	0x3e663769
 8011a58:	c5d26bf1 	.word	0xc5d26bf1
 8011a5c:	3ebbbd41 	.word	0x3ebbbd41
 8011a60:	af25de2c 	.word	0xaf25de2c
 8011a64:	3f11566a 	.word	0x3f11566a
 8011a68:	16bebd93 	.word	0x16bebd93
 8011a6c:	3f66c16c 	.word	0x3f66c16c
 8011a70:	5555553e 	.word	0x5555553e
 8011a74:	3fc55555 	.word	0x3fc55555
 8011a78:	c2f8f359 	.word	0xc2f8f359
 8011a7c:	01a56e1f 	.word	0x01a56e1f
 8011a80:	3fe00000 	.word	0x3fe00000
 8011a84:	000fffff 	.word	0x000fffff
 8011a88:	3ff00000 	.word	0x3ff00000
 8011a8c:	4090cbff 	.word	0x4090cbff
 8011a90:	3f6f3400 	.word	0x3f6f3400
 8011a94:	652b82fe 	.word	0x652b82fe
 8011a98:	3c971547 	.word	0x3c971547

08011a9c <__ieee754_sqrt>:
 8011a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa0:	4955      	ldr	r1, [pc, #340]	; (8011bf8 <__ieee754_sqrt+0x15c>)
 8011aa2:	ec55 4b10 	vmov	r4, r5, d0
 8011aa6:	43a9      	bics	r1, r5
 8011aa8:	462b      	mov	r3, r5
 8011aaa:	462a      	mov	r2, r5
 8011aac:	d112      	bne.n	8011ad4 <__ieee754_sqrt+0x38>
 8011aae:	ee10 2a10 	vmov	r2, s0
 8011ab2:	ee10 0a10 	vmov	r0, s0
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	f7ee fdc6 	bl	8000648 <__aeabi_dmul>
 8011abc:	4602      	mov	r2, r0
 8011abe:	460b      	mov	r3, r1
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	4629      	mov	r1, r5
 8011ac4:	f7ee fc0a 	bl	80002dc <__adddf3>
 8011ac8:	4604      	mov	r4, r0
 8011aca:	460d      	mov	r5, r1
 8011acc:	ec45 4b10 	vmov	d0, r4, r5
 8011ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad4:	2d00      	cmp	r5, #0
 8011ad6:	ee10 0a10 	vmov	r0, s0
 8011ada:	4621      	mov	r1, r4
 8011adc:	dc0f      	bgt.n	8011afe <__ieee754_sqrt+0x62>
 8011ade:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011ae2:	4330      	orrs	r0, r6
 8011ae4:	d0f2      	beq.n	8011acc <__ieee754_sqrt+0x30>
 8011ae6:	b155      	cbz	r5, 8011afe <__ieee754_sqrt+0x62>
 8011ae8:	ee10 2a10 	vmov	r2, s0
 8011aec:	4620      	mov	r0, r4
 8011aee:	4629      	mov	r1, r5
 8011af0:	f7ee fbf2 	bl	80002d8 <__aeabi_dsub>
 8011af4:	4602      	mov	r2, r0
 8011af6:	460b      	mov	r3, r1
 8011af8:	f7ee fed0 	bl	800089c <__aeabi_ddiv>
 8011afc:	e7e4      	b.n	8011ac8 <__ieee754_sqrt+0x2c>
 8011afe:	151b      	asrs	r3, r3, #20
 8011b00:	d073      	beq.n	8011bea <__ieee754_sqrt+0x14e>
 8011b02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011b06:	07dd      	lsls	r5, r3, #31
 8011b08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011b0c:	bf48      	it	mi
 8011b0e:	0fc8      	lsrmi	r0, r1, #31
 8011b10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011b14:	bf44      	itt	mi
 8011b16:	0049      	lslmi	r1, r1, #1
 8011b18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011b1c:	2500      	movs	r5, #0
 8011b1e:	1058      	asrs	r0, r3, #1
 8011b20:	0fcb      	lsrs	r3, r1, #31
 8011b22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011b26:	0049      	lsls	r1, r1, #1
 8011b28:	2316      	movs	r3, #22
 8011b2a:	462c      	mov	r4, r5
 8011b2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011b30:	19a7      	adds	r7, r4, r6
 8011b32:	4297      	cmp	r7, r2
 8011b34:	bfde      	ittt	le
 8011b36:	19bc      	addle	r4, r7, r6
 8011b38:	1bd2      	suble	r2, r2, r7
 8011b3a:	19ad      	addle	r5, r5, r6
 8011b3c:	0fcf      	lsrs	r7, r1, #31
 8011b3e:	3b01      	subs	r3, #1
 8011b40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011b44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011b48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011b4c:	d1f0      	bne.n	8011b30 <__ieee754_sqrt+0x94>
 8011b4e:	f04f 0c20 	mov.w	ip, #32
 8011b52:	469e      	mov	lr, r3
 8011b54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011b58:	42a2      	cmp	r2, r4
 8011b5a:	eb06 070e 	add.w	r7, r6, lr
 8011b5e:	dc02      	bgt.n	8011b66 <__ieee754_sqrt+0xca>
 8011b60:	d112      	bne.n	8011b88 <__ieee754_sqrt+0xec>
 8011b62:	428f      	cmp	r7, r1
 8011b64:	d810      	bhi.n	8011b88 <__ieee754_sqrt+0xec>
 8011b66:	2f00      	cmp	r7, #0
 8011b68:	eb07 0e06 	add.w	lr, r7, r6
 8011b6c:	da42      	bge.n	8011bf4 <__ieee754_sqrt+0x158>
 8011b6e:	f1be 0f00 	cmp.w	lr, #0
 8011b72:	db3f      	blt.n	8011bf4 <__ieee754_sqrt+0x158>
 8011b74:	f104 0801 	add.w	r8, r4, #1
 8011b78:	1b12      	subs	r2, r2, r4
 8011b7a:	428f      	cmp	r7, r1
 8011b7c:	bf88      	it	hi
 8011b7e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8011b82:	1bc9      	subs	r1, r1, r7
 8011b84:	4433      	add	r3, r6
 8011b86:	4644      	mov	r4, r8
 8011b88:	0052      	lsls	r2, r2, #1
 8011b8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8011b8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011b92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011b96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011b9a:	d1dd      	bne.n	8011b58 <__ieee754_sqrt+0xbc>
 8011b9c:	430a      	orrs	r2, r1
 8011b9e:	d006      	beq.n	8011bae <__ieee754_sqrt+0x112>
 8011ba0:	1c5c      	adds	r4, r3, #1
 8011ba2:	bf13      	iteet	ne
 8011ba4:	3301      	addne	r3, #1
 8011ba6:	3501      	addeq	r5, #1
 8011ba8:	4663      	moveq	r3, ip
 8011baa:	f023 0301 	bicne.w	r3, r3, #1
 8011bae:	106a      	asrs	r2, r5, #1
 8011bb0:	085b      	lsrs	r3, r3, #1
 8011bb2:	07e9      	lsls	r1, r5, #31
 8011bb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011bb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011bbc:	bf48      	it	mi
 8011bbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011bc2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011bc6:	461c      	mov	r4, r3
 8011bc8:	e780      	b.n	8011acc <__ieee754_sqrt+0x30>
 8011bca:	0aca      	lsrs	r2, r1, #11
 8011bcc:	3815      	subs	r0, #21
 8011bce:	0549      	lsls	r1, r1, #21
 8011bd0:	2a00      	cmp	r2, #0
 8011bd2:	d0fa      	beq.n	8011bca <__ieee754_sqrt+0x12e>
 8011bd4:	02d6      	lsls	r6, r2, #11
 8011bd6:	d50a      	bpl.n	8011bee <__ieee754_sqrt+0x152>
 8011bd8:	f1c3 0420 	rsb	r4, r3, #32
 8011bdc:	fa21 f404 	lsr.w	r4, r1, r4
 8011be0:	1e5d      	subs	r5, r3, #1
 8011be2:	4099      	lsls	r1, r3
 8011be4:	4322      	orrs	r2, r4
 8011be6:	1b43      	subs	r3, r0, r5
 8011be8:	e78b      	b.n	8011b02 <__ieee754_sqrt+0x66>
 8011bea:	4618      	mov	r0, r3
 8011bec:	e7f0      	b.n	8011bd0 <__ieee754_sqrt+0x134>
 8011bee:	0052      	lsls	r2, r2, #1
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	e7ef      	b.n	8011bd4 <__ieee754_sqrt+0x138>
 8011bf4:	46a0      	mov	r8, r4
 8011bf6:	e7bf      	b.n	8011b78 <__ieee754_sqrt+0xdc>
 8011bf8:	7ff00000 	.word	0x7ff00000

08011bfc <fabs>:
 8011bfc:	ec51 0b10 	vmov	r0, r1, d0
 8011c00:	ee10 2a10 	vmov	r2, s0
 8011c04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c08:	ec43 2b10 	vmov	d0, r2, r3
 8011c0c:	4770      	bx	lr

08011c0e <finite>:
 8011c0e:	ee10 3a90 	vmov	r3, s1
 8011c12:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8011c16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011c1a:	0fc0      	lsrs	r0, r0, #31
 8011c1c:	4770      	bx	lr

08011c1e <matherr>:
 8011c1e:	2000      	movs	r0, #0
 8011c20:	4770      	bx	lr
 8011c22:	0000      	movs	r0, r0
 8011c24:	0000      	movs	r0, r0
	...

08011c28 <nan>:
 8011c28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011c30 <nan+0x8>
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop
 8011c30:	00000000 	.word	0x00000000
 8011c34:	7ff80000 	.word	0x7ff80000

08011c38 <rint>:
 8011c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c3a:	ec51 0b10 	vmov	r0, r1, d0
 8011c3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011c42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011c46:	2e13      	cmp	r6, #19
 8011c48:	460b      	mov	r3, r1
 8011c4a:	ee10 4a10 	vmov	r4, s0
 8011c4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011c52:	dc56      	bgt.n	8011d02 <rint+0xca>
 8011c54:	2e00      	cmp	r6, #0
 8011c56:	da2b      	bge.n	8011cb0 <rint+0x78>
 8011c58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011c5c:	4302      	orrs	r2, r0
 8011c5e:	d023      	beq.n	8011ca8 <rint+0x70>
 8011c60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011c64:	4302      	orrs	r2, r0
 8011c66:	4254      	negs	r4, r2
 8011c68:	4314      	orrs	r4, r2
 8011c6a:	0c4b      	lsrs	r3, r1, #17
 8011c6c:	0b24      	lsrs	r4, r4, #12
 8011c6e:	045b      	lsls	r3, r3, #17
 8011c70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011c74:	ea44 0103 	orr.w	r1, r4, r3
 8011c78:	460b      	mov	r3, r1
 8011c7a:	492f      	ldr	r1, [pc, #188]	; (8011d38 <rint+0x100>)
 8011c7c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011c80:	e9d1 6700 	ldrd	r6, r7, [r1]
 8011c84:	4602      	mov	r2, r0
 8011c86:	4639      	mov	r1, r7
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f7ee fb27 	bl	80002dc <__adddf3>
 8011c8e:	e9cd 0100 	strd	r0, r1, [sp]
 8011c92:	463b      	mov	r3, r7
 8011c94:	4632      	mov	r2, r6
 8011c96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c9a:	f7ee fb1d 	bl	80002d8 <__aeabi_dsub>
 8011c9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ca2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8011ca6:	4639      	mov	r1, r7
 8011ca8:	ec41 0b10 	vmov	d0, r0, r1
 8011cac:	b003      	add	sp, #12
 8011cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cb0:	4a22      	ldr	r2, [pc, #136]	; (8011d3c <rint+0x104>)
 8011cb2:	4132      	asrs	r2, r6
 8011cb4:	ea01 0702 	and.w	r7, r1, r2
 8011cb8:	4307      	orrs	r7, r0
 8011cba:	d0f5      	beq.n	8011ca8 <rint+0x70>
 8011cbc:	0852      	lsrs	r2, r2, #1
 8011cbe:	4011      	ands	r1, r2
 8011cc0:	430c      	orrs	r4, r1
 8011cc2:	d00b      	beq.n	8011cdc <rint+0xa4>
 8011cc4:	ea23 0202 	bic.w	r2, r3, r2
 8011cc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011ccc:	2e13      	cmp	r6, #19
 8011cce:	fa43 f306 	asr.w	r3, r3, r6
 8011cd2:	bf0c      	ite	eq
 8011cd4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011cd8:	2400      	movne	r4, #0
 8011cda:	4313      	orrs	r3, r2
 8011cdc:	4916      	ldr	r1, [pc, #88]	; (8011d38 <rint+0x100>)
 8011cde:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011ce2:	4622      	mov	r2, r4
 8011ce4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011ce8:	4620      	mov	r0, r4
 8011cea:	4629      	mov	r1, r5
 8011cec:	f7ee faf6 	bl	80002dc <__adddf3>
 8011cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8011cf4:	4622      	mov	r2, r4
 8011cf6:	462b      	mov	r3, r5
 8011cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011cfc:	f7ee faec 	bl	80002d8 <__aeabi_dsub>
 8011d00:	e7d2      	b.n	8011ca8 <rint+0x70>
 8011d02:	2e33      	cmp	r6, #51	; 0x33
 8011d04:	dd07      	ble.n	8011d16 <rint+0xde>
 8011d06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011d0a:	d1cd      	bne.n	8011ca8 <rint+0x70>
 8011d0c:	ee10 2a10 	vmov	r2, s0
 8011d10:	f7ee fae4 	bl	80002dc <__adddf3>
 8011d14:	e7c8      	b.n	8011ca8 <rint+0x70>
 8011d16:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8011d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d1e:	40f2      	lsrs	r2, r6
 8011d20:	4210      	tst	r0, r2
 8011d22:	d0c1      	beq.n	8011ca8 <rint+0x70>
 8011d24:	0852      	lsrs	r2, r2, #1
 8011d26:	4210      	tst	r0, r2
 8011d28:	bf1f      	itttt	ne
 8011d2a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011d2e:	ea20 0202 	bicne.w	r2, r0, r2
 8011d32:	4134      	asrne	r4, r6
 8011d34:	4314      	orrne	r4, r2
 8011d36:	e7d1      	b.n	8011cdc <rint+0xa4>
 8011d38:	08013920 	.word	0x08013920
 8011d3c:	000fffff 	.word	0x000fffff

08011d40 <scalbn>:
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	ec55 4b10 	vmov	r4, r5, d0
 8011d46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	462b      	mov	r3, r5
 8011d4e:	b9aa      	cbnz	r2, 8011d7c <scalbn+0x3c>
 8011d50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011d54:	4323      	orrs	r3, r4
 8011d56:	d03b      	beq.n	8011dd0 <scalbn+0x90>
 8011d58:	4b31      	ldr	r3, [pc, #196]	; (8011e20 <scalbn+0xe0>)
 8011d5a:	4629      	mov	r1, r5
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	ee10 0a10 	vmov	r0, s0
 8011d62:	f7ee fc71 	bl	8000648 <__aeabi_dmul>
 8011d66:	4b2f      	ldr	r3, [pc, #188]	; (8011e24 <scalbn+0xe4>)
 8011d68:	429e      	cmp	r6, r3
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	460d      	mov	r5, r1
 8011d6e:	da12      	bge.n	8011d96 <scalbn+0x56>
 8011d70:	a327      	add	r3, pc, #156	; (adr r3, 8011e10 <scalbn+0xd0>)
 8011d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d76:	f7ee fc67 	bl	8000648 <__aeabi_dmul>
 8011d7a:	e009      	b.n	8011d90 <scalbn+0x50>
 8011d7c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011d80:	428a      	cmp	r2, r1
 8011d82:	d10c      	bne.n	8011d9e <scalbn+0x5e>
 8011d84:	ee10 2a10 	vmov	r2, s0
 8011d88:	4620      	mov	r0, r4
 8011d8a:	4629      	mov	r1, r5
 8011d8c:	f7ee faa6 	bl	80002dc <__adddf3>
 8011d90:	4604      	mov	r4, r0
 8011d92:	460d      	mov	r5, r1
 8011d94:	e01c      	b.n	8011dd0 <scalbn+0x90>
 8011d96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	3a36      	subs	r2, #54	; 0x36
 8011d9e:	4432      	add	r2, r6
 8011da0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011da4:	428a      	cmp	r2, r1
 8011da6:	dd0b      	ble.n	8011dc0 <scalbn+0x80>
 8011da8:	ec45 4b11 	vmov	d1, r4, r5
 8011dac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011e18 <scalbn+0xd8>
 8011db0:	f000 f83c 	bl	8011e2c <copysign>
 8011db4:	a318      	add	r3, pc, #96	; (adr r3, 8011e18 <scalbn+0xd8>)
 8011db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dba:	ec51 0b10 	vmov	r0, r1, d0
 8011dbe:	e7da      	b.n	8011d76 <scalbn+0x36>
 8011dc0:	2a00      	cmp	r2, #0
 8011dc2:	dd08      	ble.n	8011dd6 <scalbn+0x96>
 8011dc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011dc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011dcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011dd0:	ec45 4b10 	vmov	d0, r4, r5
 8011dd4:	bd70      	pop	{r4, r5, r6, pc}
 8011dd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011dda:	da0d      	bge.n	8011df8 <scalbn+0xb8>
 8011ddc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011de0:	429e      	cmp	r6, r3
 8011de2:	ec45 4b11 	vmov	d1, r4, r5
 8011de6:	dce1      	bgt.n	8011dac <scalbn+0x6c>
 8011de8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011e10 <scalbn+0xd0>
 8011dec:	f000 f81e 	bl	8011e2c <copysign>
 8011df0:	a307      	add	r3, pc, #28	; (adr r3, 8011e10 <scalbn+0xd0>)
 8011df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df6:	e7e0      	b.n	8011dba <scalbn+0x7a>
 8011df8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011dfc:	3236      	adds	r2, #54	; 0x36
 8011dfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011e02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e06:	4620      	mov	r0, r4
 8011e08:	4629      	mov	r1, r5
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	4b06      	ldr	r3, [pc, #24]	; (8011e28 <scalbn+0xe8>)
 8011e0e:	e7b2      	b.n	8011d76 <scalbn+0x36>
 8011e10:	c2f8f359 	.word	0xc2f8f359
 8011e14:	01a56e1f 	.word	0x01a56e1f
 8011e18:	8800759c 	.word	0x8800759c
 8011e1c:	7e37e43c 	.word	0x7e37e43c
 8011e20:	43500000 	.word	0x43500000
 8011e24:	ffff3cb0 	.word	0xffff3cb0
 8011e28:	3c900000 	.word	0x3c900000

08011e2c <copysign>:
 8011e2c:	ec51 0b10 	vmov	r0, r1, d0
 8011e30:	ee11 0a90 	vmov	r0, s3
 8011e34:	ee10 2a10 	vmov	r2, s0
 8011e38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011e40:	ea41 0300 	orr.w	r3, r1, r0
 8011e44:	ec43 2b10 	vmov	d0, r2, r3
 8011e48:	4770      	bx	lr
	...

08011e4c <_init>:
 8011e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e4e:	bf00      	nop
 8011e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e52:	bc08      	pop	{r3}
 8011e54:	469e      	mov	lr, r3
 8011e56:	4770      	bx	lr

08011e58 <_fini>:
 8011e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e5a:	bf00      	nop
 8011e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e5e:	bc08      	pop	{r3}
 8011e60:	469e      	mov	lr, r3
 8011e62:	4770      	bx	lr
