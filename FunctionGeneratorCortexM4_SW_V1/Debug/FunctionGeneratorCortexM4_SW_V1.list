
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f4c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d0  08014130  08014130  00024130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015500  08015500  00031e08  2**0
                  CONTENTS
  4 .ARM          00000000  08015500  08015500  00031e08  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015500  08015500  00031e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015500  08015500  00025500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015504  08015504  00025504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e08  20000000  08015508  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  20001e08  08017310  00031e08  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b14  08017310  00032b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047db5  00000000  00000000  00031e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b5c  00000000  00000000  00079bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002270  00000000  00000000  00081750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e10  00000000  00000000  000839c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003565c  00000000  00000000  000857d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f323  00000000  00000000  000bae2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001268d0  00000000  00000000  000ea14f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00210a1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009888  00000000  00000000  00210a9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e08 	.word	0x20001e08
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014114 	.word	0x08014114

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e0c 	.word	0x20001e0c
 800021c:	08014114 	.word	0x08014114

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00e fa9c 	bl	800f24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f902 	bl	8000f1c <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08014130 	.word	0x08014130

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00e fad1 	bl	800f2ce <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00e ff27 	bl	800fb80 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00e fd09 	bl	800f74c <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <DM_PostInit+0x30>)
 8000d58:	f00e fa78 	bl	800f24c <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fc86 	bl	8008670 <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fb9a 	bl	800149c <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	0801413c 	.word	0x0801413c

08000d74 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09c      	sub	sp, #112	; 0x70
 8000d78:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d7a:	f003 ff35 	bl	8004be8 <ToplevelMenu_getStatus>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d015      	beq.n	8000db0 <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000d84:	f003 ff30 	bl	8004be8 <ToplevelMenu_getStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d008      	beq.n	8000da0 <DM_UpdateDisplay+0x2c>
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d00a      	beq.n	8000da8 <DM_UpdateDisplay+0x34>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d000      	beq.n	8000d98 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000d96:	e07d      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f002 feb1 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000d9e:	e079      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 fead 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000da6:	e075      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f002 fea9 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000dae:	e071      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000db0:	f003 fd32 	bl	8004818 <FuncMenu_getStatus>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d015      	beq.n	8000de6 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000dba:	f003 fd2d 	bl	8004818 <FuncMenu_getStatus>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d008      	beq.n	8000dd6 <DM_UpdateDisplay+0x62>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d00a      	beq.n	8000dde <DM_UpdateDisplay+0x6a>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d000      	beq.n	8000dce <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000dcc:	e062      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f002 f91c 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000dd4:	e05e      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f002 f918 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000ddc:	e05a      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f002 f914 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000de4:	e056      	b.n	8000e94 <DM_UpdateDisplay+0x120>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000de6:	f003 fe0d 	bl	8004a04 <GainMenu_getStatus>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d015      	beq.n	8000e1c <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000df0:	f003 fe08 	bl	8004a04 <GainMenu_getStatus>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d008      	beq.n	8000e0c <DM_UpdateDisplay+0x98>
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d00a      	beq.n	8000e14 <DM_UpdateDisplay+0xa0>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d000      	beq.n	8000e04 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e02:	e047      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f002 fdd5 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e0a:	e043      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f002 fdd1 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e12:	e03f      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f002 fdcd 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e1a:	e03b      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e1c:	f003 fcf0 	bl	8004800 <FreqMenu_getStatus>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d020      	beq.n	8000e68 <DM_UpdateDisplay+0xf4>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e26:	f003 fceb 	bl	8004800 <FreqMenu_getStatus>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d82f      	bhi.n	8000e92 <DM_UpdateDisplay+0x11e>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <DM_UpdateDisplay+0xc4>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e51 	.word	0x08000e51
 8000e40:	08000e59 	.word	0x08000e59
 8000e44:	08000e61 	.word	0x08000e61
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fb8b 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e4e:	e021      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f000 fb87 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e56:	e01d      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 fb83 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e5e:	e019      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e60:	2004      	movs	r0, #4
 8000e62:	f000 fb7f 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e66:	e015      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e68:	f003 f838 	bl	8003edc <BiasMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <DM_UpdateDisplay+0x106>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ff30 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e78:	e00c      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e7a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	2301      	movs	r3, #1
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	2232      	movs	r2, #50	; 0x32
 8000e88:	210a      	movs	r1, #10
 8000e8a:	4820      	ldr	r0, [pc, #128]	; (8000f0c <DM_UpdateDisplay+0x198>)
 8000e8c:	f00e f9de 	bl	800f24c <ILI9341_Draw_Text>
 8000e90:	e000      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				break;
 8000e92:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
 8000e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9c:	222e      	movs	r2, #46	; 0x2e
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00f f8af 	bl	8010004 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000ea6:	f004 fa13 	bl	80052d0 <BO_GetOutputBias>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <DM_UpdateDisplay+0x19c>)
 8000eb2:	2132      	movs	r1, #50	; 0x32
 8000eb4:	f00f fd86 	bl	80109c4 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 220, 10, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eb8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ebc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	220a      	movs	r2, #10
 8000eca:	21dc      	movs	r1, #220	; 0xdc
 8000ecc:	f00e f9be 	bl	800f24c <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	222e      	movs	r2, #46	; 0x2e
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00f f892 	bl	8010004 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <DM_UpdateDisplay+0x1a0>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <DM_UpdateDisplay+0x1a4>)
 8000ee8:	2132      	movs	r1, #50	; 0x32
 8000eea:	f00f fd6b 	bl	80109c4 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	2214      	movs	r2, #20
 8000efe:	21dc      	movs	r1, #220	; 0xdc
 8000f00:	f00e f9a4 	bl	800f24c <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG



}
 8000f04:	bf00      	nop
 8000f06:	3768      	adds	r7, #104	; 0x68
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	0801414c 	.word	0x0801414c
 8000f10:	08014170 	.word	0x08014170
 8000f14:	40012c00 	.word	0x40012c00
 8000f18:	08014180 	.word	0x08014180

08000f1c <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b09f      	sub	sp, #124	; 0x7c
 8000f20:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f3a:	238c      	movs	r3, #140	; 0x8c
 8000f3c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f40:	2328      	movs	r3, #40	; 0x28
 8000f42:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f58:	23af      	movs	r3, #175	; 0xaf
 8000f5a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f5e:	2346      	movs	r3, #70	; 0x46
 8000f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f76:	238a      	movs	r3, #138	; 0x8a
 8000f78:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f82:	4bc4      	ldr	r3, [pc, #784]	; (8001294 <DM_DisplayFormattedOutput+0x378>)
 8000f84:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f94:	23a1      	movs	r3, #161	; 0xa1
 8000f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f9a:	2382      	movs	r3, #130	; 0x82
 8000f9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fa0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	9201      	str	r2, [sp, #4]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	2103      	movs	r1, #3
 8000fba:	48b7      	ldr	r0, [pc, #732]	; (8001298 <DM_DisplayFormattedOutput+0x37c>)
 8000fbc:	f00e f946 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	9201      	str	r2, [sp, #4]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	2103      	movs	r1, #3
 8000fda:	48b0      	ldr	r0, [pc, #704]	; (800129c <DM_DisplayFormattedOutput+0x380>)
 8000fdc:	f00e f936 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fe0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	48a9      	ldr	r0, [pc, #676]	; (80012a0 <DM_DisplayFormattedOutput+0x384>)
 8000ffc:	f00e f926 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001000:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001004:	b299      	uxth	r1, r3
 8001006:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800100a:	b29b      	uxth	r3, r3
 800100c:	2200      	movs	r2, #0
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001016:	460a      	mov	r2, r1
 8001018:	2103      	movs	r1, #3
 800101a:	48a2      	ldr	r0, [pc, #648]	; (80012a4 <DM_DisplayFormattedOutput+0x388>)
 800101c:	f00e f916 	bl	800f24c <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001020:	f005 fb0e 	bl	8006640 <SM_GetOutputInHertz>
 8001024:	ee10 3a10 	vmov	r3, s0
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fab5 	bl	8000598 <__aeabi_f2d>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001036:	e9cd 3400 	strd	r3, r4, [sp]
 800103a:	4a9b      	ldr	r2, [pc, #620]	; (80012a8 <DM_DisplayFormattedOutput+0x38c>)
 800103c:	210f      	movs	r1, #15
 800103e:	f00f fcc1 	bl	80109c4 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001042:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001046:	b299      	uxth	r1, r3
 8001048:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800104c:	b29c      	uxth	r4, r3
 800104e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001052:	b29b      	uxth	r3, r3
 8001054:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001058:	2200      	movs	r2, #0
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001062:	4622      	mov	r2, r4
 8001064:	f00e f8f2 	bl	800f24c <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001068:	2000      	movs	r0, #0
 800106a:	f005 f851 	bl	8006110 <SM_GetOutputChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001074:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01d      	beq.n	80010b8 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 800107c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a86      	ldr	r2, [pc, #536]	; (80012ac <DM_DisplayFormattedOutput+0x390>)
 8001094:	2112      	movs	r1, #18
 8001096:	f00f fc95 	bl	80109c4 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 800109a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa7a 	bl	8000598 <__aeabi_f2d>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	f107 0014 	add.w	r0, r7, #20
 80010ac:	e9cd 3400 	strd	r3, r4, [sp]
 80010b0:	4a7f      	ldr	r2, [pc, #508]	; (80012b0 <DM_DisplayFormattedOutput+0x394>)
 80010b2:	2114      	movs	r1, #20
 80010b4:	f00f fc86 	bl	80109c4 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010b8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80010bc:	b299      	uxth	r1, r3
 80010be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010c2:	b29c      	uxth	r4, r3
 80010c4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010ce:	2200      	movs	r2, #0
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010d8:	4622      	mov	r2, r4
 80010da:	f00e f8b7 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010de:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e2:	b299      	uxth	r1, r3
 80010e4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010e8:	b29c      	uxth	r4, r3
 80010ea:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f107 0014 	add.w	r0, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010fe:	4622      	mov	r2, r4
 8001100:	f00e f8a4 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001104:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001108:	b29b      	uxth	r3, r3
 800110a:	3380      	adds	r3, #128	; 0x80
 800110c:	b299      	uxth	r1, r3
 800110e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001112:	b298      	uxth	r0, r3
 8001114:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001118:	b29b      	uxth	r3, r3
 800111a:	2200      	movs	r2, #0
 800111c:	9201      	str	r2, [sp, #4]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001124:	4602      	mov	r2, r0
 8001126:	4863      	ldr	r0, [pc, #396]	; (80012b4 <DM_DisplayFormattedOutput+0x398>)
 8001128:	f00e f890 	bl	800f24c <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 800112c:	f004 f8d0 	bl	80052d0 <BO_GetOutputBias>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d103      	bne.n	800113e <DM_DisplayFormattedOutput+0x222>
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	667b      	str	r3, [r7, #100]	; 0x64
 800113c:	e00b      	b.n	8001156 <DM_DisplayFormattedOutput+0x23a>
 800113e:	f004 f8c7 	bl	80052d0 <BO_GetOutputBias>
 8001142:	ee07 0a90 	vmov	s15, r0
 8001146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001156:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001158:	f7ff fa1e 	bl	8000598 <__aeabi_f2d>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	f107 0008 	add.w	r0, r7, #8
 8001164:	e9cd 3400 	strd	r3, r4, [sp]
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <DM_DisplayFormattedOutput+0x39c>)
 800116a:	210c      	movs	r1, #12
 800116c:	f00f fc2a 	bl	80109c4 <sniprintf>
	if(BO_GetBiasPolarity())
 8001170:	f004 f84e 	bl	8005210 <BO_GetBiasPolarity>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d022      	beq.n	80011c0 <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 800117a:	4a50      	ldr	r2, [pc, #320]	; (80012bc <DM_DisplayFormattedOutput+0x3a0>)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	4611      	mov	r1, r2
 8001182:	8019      	strh	r1, [r3, #0]
 8001184:	3302      	adds	r3, #2
 8001186:	0c12      	lsrs	r2, r2, #16
 8001188:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f00f fc4a 	bl	8010a2c <strcat>
 8001198:	4604      	mov	r4, r0
 800119a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800119e:	b299      	uxth	r1, r3
 80011a0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011a4:	b298      	uxth	r0, r3
 80011a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011b6:	4602      	mov	r2, r0
 80011b8:	4620      	mov	r0, r4
 80011ba:	f00e f847 	bl	800f24c <ILI9341_Draw_Text>
 80011be:	e021      	b.n	8001204 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <DM_DisplayFormattedOutput+0x3a4>)
 80011c2:	463b      	mov	r3, r7
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4611      	mov	r1, r2
 80011c8:	8019      	strh	r1, [r3, #0]
 80011ca:	3302      	adds	r3, #2
 80011cc:	0c12      	lsrs	r2, r2, #16
 80011ce:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	463b      	mov	r3, r7
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f00f fc27 	bl	8010a2c <strcat>
 80011de:	4604      	mov	r4, r0
 80011e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011e4:	b299      	uxth	r1, r3
 80011e6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011ea:	b298      	uxth	r0, r3
 80011ec:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2200      	movs	r2, #0
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011fc:	4602      	mov	r2, r0
 80011fe:	4620      	mov	r0, r4
 8001200:	f00e f824 	bl	800f24c <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001204:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001208:	b29b      	uxth	r3, r3
 800120a:	2200      	movs	r2, #0
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001214:	22aa      	movs	r2, #170	; 0xaa
 8001216:	2103      	movs	r1, #3
 8001218:	482a      	ldr	r0, [pc, #168]	; (80012c4 <DM_DisplayFormattedOutput+0x3a8>)
 800121a:	f00e f817 	bl	800f24c <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800121e:	2000      	movs	r0, #0
 8001220:	f004 ff76 	bl	8006110 <SM_GetOutputChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 8001230:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001234:	2b06      	cmp	r3, #6
 8001236:	f200 8091 	bhi.w	800135c <DM_DisplayFormattedOutput+0x440>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <DM_DisplayFormattedOutput+0x324>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	0800125d 	.word	0x0800125d
 8001244:	08001279 	.word	0x08001279
 8001248:	080012d1 	.word	0x080012d1
 800124c:	080012ed 	.word	0x080012ed
 8001250:	08001309 	.word	0x08001309
 8001254:	08001325 	.word	0x08001325
 8001258:	08001341 	.word	0x08001341
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800125c:	233c      	movs	r3, #60	; 0x3c
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <DM_DisplayFormattedOutput+0x3ac>)
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f240 23fd 	movw	r3, #765	; 0x2fd
 800126c:	2203      	movs	r2, #3
 800126e:	218c      	movs	r1, #140	; 0x8c
 8001270:	2050      	movs	r0, #80	; 0x50
 8001272:	f00d fe47 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 8001276:	e071      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001278:	233c      	movs	r3, #60	; 0x3c
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <DM_DisplayFormattedOutput+0x3b0>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	23c8      	movs	r3, #200	; 0xc8
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001288:	2203      	movs	r2, #3
 800128a:	21a0      	movs	r1, #160	; 0xa0
 800128c:	2050      	movs	r0, #80	; 0x50
 800128e:	f00d fe39 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 8001292:	e063      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
 8001294:	3a449ba6 	.word	0x3a449ba6
 8001298:	08014190 	.word	0x08014190
 800129c:	080141a0 	.word	0x080141a0
 80012a0:	080141b0 	.word	0x080141b0
 80012a4:	080141c0 	.word	0x080141c0
 80012a8:	080141d0 	.word	0x080141d0
 80012ac:	080141e0 	.word	0x080141e0
 80012b0:	080141ec 	.word	0x080141ec
 80012b4:	080141f8 	.word	0x080141f8
 80012b8:	08014200 	.word	0x08014200
 80012bc:	08014220 	.word	0x08014220
 80012c0:	08014224 	.word	0x08014224
 80012c4:	0801420c 	.word	0x0801420c
 80012c8:	20000e24 	.word	0x20000e24
 80012cc:	20000f14 	.word	0x20000f14
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	23c8      	movs	r3, #200	; 0xc8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012e0:	2203      	movs	r2, #3
 80012e2:	21a0      	movs	r1, #160	; 0xa0
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f00d fe0d 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 80012ea:	e037      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012ec:	233c      	movs	r3, #60	; 0x3c
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	4b64      	ldr	r3, [pc, #400]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	23c8      	movs	r3, #200	; 0xc8
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012fc:	2203      	movs	r2, #3
 80012fe:	21a0      	movs	r1, #160	; 0xa0
 8001300:	2050      	movs	r0, #80	; 0x50
 8001302:	f00d fdff 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 8001306:	e029      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001308:	233c      	movs	r3, #60	; 0x3c
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	23c8      	movs	r3, #200	; 0xc8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001318:	2203      	movs	r2, #3
 800131a:	21a0      	movs	r1, #160	; 0xa0
 800131c:	2050      	movs	r0, #80	; 0x50
 800131e:	f00d fdf1 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 8001322:	e01b      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001324:	233c      	movs	r3, #60	; 0x3c
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	23c8      	movs	r3, #200	; 0xc8
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001334:	2203      	movs	r2, #3
 8001336:	21a0      	movs	r1, #160	; 0xa0
 8001338:	2050      	movs	r0, #80	; 0x50
 800133a:	f00d fde3 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 800133e:	e00d      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001340:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001344:	b29b      	uxth	r3, r3
 8001346:	2200      	movs	r2, #0
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001350:	22aa      	movs	r2, #170	; 0xaa
 8001352:	2150      	movs	r1, #80	; 0x50
 8001354:	484d      	ldr	r0, [pc, #308]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001356:	f00d ff79 	bl	800f24c <ILI9341_Draw_Text>
			break;
 800135a:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800135c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001360:	b29b      	uxth	r3, r3
 8001362:	2200      	movs	r2, #0
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800136c:	22aa      	movs	r2, #170	; 0xaa
 800136e:	21b4      	movs	r1, #180	; 0xb4
 8001370:	4847      	ldr	r0, [pc, #284]	; (8001490 <DM_DisplayFormattedOutput+0x574>)
 8001372:	f00d ff6b 	bl	800f24c <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001376:	2001      	movs	r0, #1
 8001378:	f004 feca 	bl	8006110 <SM_GetOutputChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 8001388:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800138c:	2b06      	cmp	r3, #6
 800138e:	d873      	bhi.n	8001478 <DM_DisplayFormattedOutput+0x55c>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <DM_DisplayFormattedOutput+0x47c>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013b5 	.word	0x080013b5
 800139c:	080013d1 	.word	0x080013d1
 80013a0:	080013ed 	.word	0x080013ed
 80013a4:	08001409 	.word	0x08001409
 80013a8:	08001425 	.word	0x08001425
 80013ac:	08001441 	.word	0x08001441
 80013b0:	0800145d 	.word	0x0800145d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80013b4:	233c      	movs	r3, #60	; 0x3c
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <DM_DisplayFormattedOutput+0x578>)
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013c4:	2203      	movs	r2, #3
 80013c6:	218c      	movs	r1, #140	; 0x8c
 80013c8:	20f5      	movs	r0, #245	; 0xf5
 80013ca:	f00d fd9b 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 80013ce:	e053      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013d0:	233c      	movs	r3, #60	; 0x3c
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <DM_DisplayFormattedOutput+0x57c>)
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	23c8      	movs	r3, #200	; 0xc8
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013e0:	2203      	movs	r2, #3
 80013e2:	21a0      	movs	r1, #160	; 0xa0
 80013e4:	20f5      	movs	r0, #245	; 0xf5
 80013e6:	f00d fd8d 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 80013ea:	e045      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013ec:	233c      	movs	r3, #60	; 0x3c
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	23c8      	movs	r3, #200	; 0xc8
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013fc:	2203      	movs	r2, #3
 80013fe:	21a0      	movs	r1, #160	; 0xa0
 8001400:	20f5      	movs	r0, #245	; 0xf5
 8001402:	f00d fd7f 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 8001406:	e037      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001408:	233c      	movs	r3, #60	; 0x3c
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	23c8      	movs	r3, #200	; 0xc8
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001418:	2203      	movs	r2, #3
 800141a:	21a0      	movs	r1, #160	; 0xa0
 800141c:	20f5      	movs	r0, #245	; 0xf5
 800141e:	f00d fd71 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 8001422:	e029      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001424:	233c      	movs	r3, #60	; 0x3c
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	23c8      	movs	r3, #200	; 0xc8
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001434:	2203      	movs	r2, #3
 8001436:	21a0      	movs	r1, #160	; 0xa0
 8001438:	20f5      	movs	r0, #245	; 0xf5
 800143a:	f00d fd63 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 800143e:	e01b      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001440:	233c      	movs	r3, #60	; 0x3c
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	23c8      	movs	r3, #200	; 0xc8
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001450:	2203      	movs	r2, #3
 8001452:	21a0      	movs	r1, #160	; 0xa0
 8001454:	20f5      	movs	r0, #245	; 0xf5
 8001456:	f00d fd55 	bl	800ef04 <ILI9341_Draw_Wave>
			break;
 800145a:	e00d      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800145c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001460:	b29b      	uxth	r3, r3
 8001462:	2200      	movs	r2, #0
 8001464:	9201      	str	r2, [sp, #4]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800146c:	22aa      	movs	r2, #170	; 0xaa
 800146e:	21f5      	movs	r1, #245	; 0xf5
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001472:	f00d feeb 	bl	800f24c <ILI9341_Draw_Text>
			break;
 8001476:	bf00      	nop
	}



}
 8001478:	bf00      	nop
 800147a:	376c      	adds	r7, #108	; 0x6c
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	20000c44 	.word	0x20000c44
 8001484:	20000d34 	.word	0x20000d34
 8001488:	20001004 	.word	0x20001004
 800148c:	08014214 	.word	0x08014214
 8001490:	08014218 	.word	0x08014218
 8001494:	20000e24 	.word	0x20000e24
 8001498:	20000f14 	.word	0x20000f14

0800149c <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014a2:	4820      	ldr	r0, [pc, #128]	; (8001524 <DM_RefreshScreen+0x88>)
 80014a4:	f00b fd1c 	bl	800cee0 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f00e f94f 	bl	800f74c <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80014ae:	2300      	movs	r3, #0
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2302      	movs	r3, #2
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	f240 23fd 	movw	r3, #765	; 0x2fd
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2328      	movs	r3, #40	; 0x28
 80014be:	2250      	movs	r2, #80	; 0x50
 80014c0:	21c8      	movs	r1, #200	; 0xc8
 80014c2:	2000      	movs	r0, #0
 80014c4:	f00d fd5f 	bl	800ef86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014c8:	2300      	movs	r3, #0
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2302      	movs	r3, #2
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2328      	movs	r3, #40	; 0x28
 80014d8:	2250      	movs	r2, #80	; 0x50
 80014da:	21c8      	movs	r1, #200	; 0xc8
 80014dc:	2050      	movs	r0, #80	; 0x50
 80014de:	f00d fd52 	bl	800ef86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014e2:	2300      	movs	r3, #0
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2302      	movs	r3, #2
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2328      	movs	r3, #40	; 0x28
 80014f2:	2250      	movs	r2, #80	; 0x50
 80014f4:	21c8      	movs	r1, #200	; 0xc8
 80014f6:	20a0      	movs	r0, #160	; 0xa0
 80014f8:	f00d fd45 	bl	800ef86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80014fc:	2300      	movs	r3, #0
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2302      	movs	r3, #2
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2328      	movs	r3, #40	; 0x28
 800150c:	2250      	movs	r2, #80	; 0x50
 800150e:	21c8      	movs	r1, #200	; 0xc8
 8001510:	20f0      	movs	r0, #240	; 0xf0
 8001512:	f00d fd38 	bl	800ef86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <DM_RefreshScreen+0x88>)
 8001518:	f00b fcac 	bl	800ce74 <HAL_TIM_Base_Start_IT>


}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20002944 	.word	0x20002944

08001528 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <DM_SetErrorDebugMsg+0x34>)
 8001534:	212d      	movs	r1, #45	; 0x2d
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 8001538:	f00f fa44 	bl	80109c4 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 800153c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2301      	movs	r3, #1
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	22be      	movs	r2, #190	; 0xbe
 800154a:	210a      	movs	r1, #10
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 800154e:	f00d fe7d 	bl	800f24c <ILI9341_Draw_Text>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	080142a4 	.word	0x080142a4
 8001560:	20001e24 	.word	0x20001e24

08001564 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	3b01      	subs	r3, #1
 8001572:	2b03      	cmp	r3, #3
 8001574:	d816      	bhi.n	80015a4 <FreqMenu_DrawMenu+0x40>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <FreqMenu_DrawMenu+0x18>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800158d 	.word	0x0800158d
 8001580:	08001593 	.word	0x08001593
 8001584:	08001599 	.word	0x08001599
 8001588:	0800159f 	.word	0x0800159f
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 800158c:	f000 f810 	bl	80015b0 <FreqMenu_DrawMainMenu>
			break;
 8001590:	e009      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001592:	f000 f849 	bl	8001628 <FreqMenu_DrawPresetMenu>
			break;
 8001596:	e006      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001598:	f001 faf4 	bl	8002b84 <FreqMenu_DrawAdjustMenu>
			break;
 800159c:	e003      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 800159e:	f001 fb07 	bl	8002bb0 <FreqMenu_DrawSweepMenu>
			break;
 80015a2:	e000      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80015a4:	bf00      	nop

	}
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2302      	movs	r3, #2
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	220a      	movs	r2, #10
 80015c4:	2105      	movs	r1, #5
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <FreqMenu_DrawMainMenu+0x68>)
 80015c8:	f00d fe40 	bl	800f24c <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80015cc:	f7ff fca6 	bl	8000f1c <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80015d0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2302      	movs	r3, #2
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	22d2      	movs	r2, #210	; 0xd2
 80015de:	2105      	movs	r1, #5
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <FreqMenu_DrawMainMenu+0x6c>)
 80015e2:	f00d fe33 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015e6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2302      	movs	r3, #2
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	22d2      	movs	r2, #210	; 0xd2
 80015f4:	2161      	movs	r1, #97	; 0x61
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <FreqMenu_DrawMainMenu+0x70>)
 80015f8:	f00d fe28 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80015fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2302      	movs	r3, #2
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2300      	movs	r3, #0
 8001608:	22d2      	movs	r2, #210	; 0xd2
 800160a:	21ac      	movs	r1, #172	; 0xac
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <FreqMenu_DrawMainMenu+0x74>)
 800160e:	f00d fe1d 	bl	800f24c <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	080142a8 	.word	0x080142a8
 800161c:	080142b4 	.word	0x080142b4
 8001620:	080142bc 	.word	0x080142bc
 8001624:	080142c4 	.word	0x080142c4

08001628 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2302      	movs	r3, #2
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	220a      	movs	r2, #10
 800163c:	2105      	movs	r1, #5
 800163e:	4886      	ldr	r0, [pc, #536]	; (8001858 <FreqMenu_DrawPresetMenu+0x230>)
 8001640:	f00d fe04 	bl	800f24c <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001644:	2328      	movs	r3, #40	; 0x28
 8001646:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001648:	233c      	movs	r3, #60	; 0x3c
 800164a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800164c:	2350      	movs	r3, #80	; 0x50
 800164e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001654:	2378      	movs	r3, #120	; 0x78
 8001656:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001658:	238c      	movs	r3, #140	; 0x8c
 800165a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001660:	f003 ff94 	bl	800558c <FreqO_GetFPresetObject>
 8001664:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f001 825d 	beq.w	8002b28 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001676:	4293      	cmp	r3, r2
 8001678:	f000 849a 	beq.w	8001fb0 <FreqMenu_DrawPresetMenu+0x988>
 800167c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001680:	4293      	cmp	r3, r2
 8001682:	d817      	bhi.n	80016b4 <FreqMenu_DrawPresetMenu+0x8c>
 8001684:	2b32      	cmp	r3, #50	; 0x32
 8001686:	f000 81b3 	beq.w	80019f0 <FreqMenu_DrawPresetMenu+0x3c8>
 800168a:	2b32      	cmp	r3, #50	; 0x32
 800168c:	d806      	bhi.n	800169c <FreqMenu_DrawPresetMenu+0x74>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d038      	beq.n	8001704 <FreqMenu_DrawPresetMenu+0xdc>
 8001692:	2b0a      	cmp	r3, #10
 8001694:	f000 8102 	beq.w	800189c <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001698:	f001 ba52 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 800169c:	2bfa      	cmp	r3, #250	; 0xfa
 800169e:	f000 8317 	beq.w	8001cd0 <FreqMenu_DrawPresetMenu+0x6a8>
 80016a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a6:	f000 83d9 	beq.w	8001e5c <FreqMenu_DrawPresetMenu+0x834>
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	f000 8266 	beq.w	8001b7c <FreqMenu_DrawPresetMenu+0x554>
}
 80016b0:	f001 ba46 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016b4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016b8:	4293      	cmp	r3, r2
 80016ba:	f000 8758 	beq.w	800256e <FreqMenu_DrawPresetMenu+0xf46>
 80016be:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d80f      	bhi.n	80016e6 <FreqMenu_DrawPresetMenu+0xbe>
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f000 85e0 	beq.w	8002290 <FreqMenu_DrawPresetMenu+0xc68>
 80016d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f000 86a1 	beq.w	800241c <FreqMenu_DrawPresetMenu+0xdf4>
 80016da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016de:	f000 852d 	beq.w	800213c <FreqMenu_DrawPresetMenu+0xb14>
}
 80016e2:	f001 ba2d 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016e6:	4a5d      	ldr	r2, [pc, #372]	; (800185c <FreqMenu_DrawPresetMenu+0x234>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f001 80ae 	beq.w	800284a <FreqMenu_DrawPresetMenu+0x1222>
 80016ee:	4a5c      	ldr	r2, [pc, #368]	; (8001860 <FreqMenu_DrawPresetMenu+0x238>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f001 816f 	beq.w	80029d4 <FreqMenu_DrawPresetMenu+0x13ac>
 80016f6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f000 87fc 	beq.w	80026f8 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001700:	f001 ba1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	b29a      	uxth	r2, r3
 8001708:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2302      	movs	r3, #2
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	2105      	movs	r1, #5
 8001716:	4853      	ldr	r0, [pc, #332]	; (8001864 <FreqMenu_DrawPresetMenu+0x23c>)
 8001718:	f00d fd98 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	b29a      	uxth	r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2302      	movs	r3, #2
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800172c:	2105      	movs	r1, #5
 800172e:	484e      	ldr	r0, [pc, #312]	; (8001868 <FreqMenu_DrawPresetMenu+0x240>)
 8001730:	f00d fd8c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001734:	7b7b      	ldrb	r3, [r7, #13]
 8001736:	b29a      	uxth	r2, r3
 8001738:	2300      	movs	r3, #0
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001744:	2105      	movs	r1, #5
 8001746:	4849      	ldr	r0, [pc, #292]	; (800186c <FreqMenu_DrawPresetMenu+0x244>)
 8001748:	f00d fd80 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800174c:	7b3b      	ldrb	r3, [r7, #12]
 800174e:	b29a      	uxth	r2, r3
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2302      	movs	r3, #2
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800175c:	2105      	movs	r1, #5
 800175e:	4844      	ldr	r0, [pc, #272]	; (8001870 <FreqMenu_DrawPresetMenu+0x248>)
 8001760:	f00d fd74 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	b29a      	uxth	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001774:	2105      	movs	r1, #5
 8001776:	483f      	ldr	r0, [pc, #252]	; (8001874 <FreqMenu_DrawPresetMenu+0x24c>)
 8001778:	f00d fd68 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800177c:	7abb      	ldrb	r3, [r7, #10]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2300      	movs	r3, #0
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	2302      	movs	r3, #2
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800178c:	2105      	movs	r1, #5
 800178e:	483a      	ldr	r0, [pc, #232]	; (8001878 <FreqMenu_DrawPresetMenu+0x250>)
 8001790:	f00d fd5c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001794:	7a7b      	ldrb	r3, [r7, #9]
 8001796:	b29a      	uxth	r2, r3
 8001798:	2300      	movs	r3, #0
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2302      	movs	r3, #2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a4:	2105      	movs	r1, #5
 80017a6:	4835      	ldr	r0, [pc, #212]	; (800187c <FreqMenu_DrawPresetMenu+0x254>)
 80017a8:	f00d fd50 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	2302      	movs	r3, #2
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017bc:	2178      	movs	r1, #120	; 0x78
 80017be:	4830      	ldr	r0, [pc, #192]	; (8001880 <FreqMenu_DrawPresetMenu+0x258>)
 80017c0:	f00d fd44 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	2300      	movs	r3, #0
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	2302      	movs	r3, #2
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017d4:	2178      	movs	r1, #120	; 0x78
 80017d6:	482b      	ldr	r0, [pc, #172]	; (8001884 <FreqMenu_DrawPresetMenu+0x25c>)
 80017d8:	f00d fd38 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017dc:	7b7b      	ldrb	r3, [r7, #13]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2302      	movs	r3, #2
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017ec:	2178      	movs	r1, #120	; 0x78
 80017ee:	4826      	ldr	r0, [pc, #152]	; (8001888 <FreqMenu_DrawPresetMenu+0x260>)
 80017f0:	f00d fd2c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f4:	7b3b      	ldrb	r3, [r7, #12]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	2302      	movs	r3, #2
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001804:	2178      	movs	r1, #120	; 0x78
 8001806:	4821      	ldr	r0, [pc, #132]	; (800188c <FreqMenu_DrawPresetMenu+0x264>)
 8001808:	f00d fd20 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	b29a      	uxth	r2, r3
 8001810:	2300      	movs	r3, #0
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2302      	movs	r3, #2
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800181c:	2178      	movs	r1, #120	; 0x78
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <FreqMenu_DrawPresetMenu+0x268>)
 8001820:	f00d fd14 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001824:	7abb      	ldrb	r3, [r7, #10]
 8001826:	b29a      	uxth	r2, r3
 8001828:	2300      	movs	r3, #0
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	2302      	movs	r3, #2
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001834:	2178      	movs	r1, #120	; 0x78
 8001836:	4817      	ldr	r0, [pc, #92]	; (8001894 <FreqMenu_DrawPresetMenu+0x26c>)
 8001838:	f00d fd08 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800183c:	7a7b      	ldrb	r3, [r7, #9]
 800183e:	b29a      	uxth	r2, r3
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2302      	movs	r3, #2
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800184c:	2178      	movs	r1, #120	; 0x78
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <FreqMenu_DrawPresetMenu+0x270>)
 8001850:	f00d fcfc 	bl	800f24c <ILI9341_Draw_Text>
				break;
 8001854:	f001 b974 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001858:	080142cc 	.word	0x080142cc
 800185c:	000124f8 	.word	0x000124f8
 8001860:	000186a0 	.word	0x000186a0
 8001864:	080142e0 	.word	0x080142e0
 8001868:	080142e8 	.word	0x080142e8
 800186c:	080142f0 	.word	0x080142f0
 8001870:	080142f8 	.word	0x080142f8
 8001874:	08014300 	.word	0x08014300
 8001878:	08014308 	.word	0x08014308
 800187c:	08014310 	.word	0x08014310
 8001880:	08014318 	.word	0x08014318
 8001884:	08014320 	.word	0x08014320
 8001888:	08014328 	.word	0x08014328
 800188c:	08014330 	.word	0x08014330
 8001890:	08014338 	.word	0x08014338
 8001894:	08014340 	.word	0x08014340
 8001898:	08014348 	.word	0x08014348
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	2300      	movs	r3, #0
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	2302      	movs	r3, #2
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018ac:	2105      	movs	r1, #5
 80018ae:	48a5      	ldr	r0, [pc, #660]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 80018b0:	f00d fccc 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2302      	movs	r3, #2
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	48a0      	ldr	r0, [pc, #640]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 80018c8:	f00d fcc0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018dc:	2105      	movs	r1, #5
 80018de:	489b      	ldr	r0, [pc, #620]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 80018e0:	f00d fcb4 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018e4:	7b3b      	ldrb	r3, [r7, #12]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2302      	movs	r3, #2
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018f4:	2105      	movs	r1, #5
 80018f6:	4896      	ldr	r0, [pc, #600]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 80018f8:	f00d fca8 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800190c:	2105      	movs	r1, #5
 800190e:	4891      	ldr	r0, [pc, #580]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001910:	f00d fc9c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001914:	7abb      	ldrb	r3, [r7, #10]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2300      	movs	r3, #0
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001924:	2105      	movs	r1, #5
 8001926:	488c      	ldr	r0, [pc, #560]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001928:	f00d fc90 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800192c:	7a7b      	ldrb	r3, [r7, #9]
 800192e:	b29a      	uxth	r2, r3
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2302      	movs	r3, #2
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800193c:	2105      	movs	r1, #5
 800193e:	4887      	ldr	r0, [pc, #540]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001940:	f00d fc84 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	b29a      	uxth	r2, r3
 8001948:	2300      	movs	r3, #0
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2302      	movs	r3, #2
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001954:	2178      	movs	r1, #120	; 0x78
 8001956:	4882      	ldr	r0, [pc, #520]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001958:	f00d fc78 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	b29a      	uxth	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2302      	movs	r3, #2
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800196c:	2178      	movs	r1, #120	; 0x78
 800196e:	487d      	ldr	r0, [pc, #500]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001970:	f00d fc6c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	b29a      	uxth	r2, r3
 8001978:	2300      	movs	r3, #0
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001984:	2178      	movs	r1, #120	; 0x78
 8001986:	4878      	ldr	r0, [pc, #480]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001988:	f00d fc60 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800198c:	7b3b      	ldrb	r3, [r7, #12]
 800198e:	b29a      	uxth	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2302      	movs	r3, #2
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800199c:	2178      	movs	r1, #120	; 0x78
 800199e:	4873      	ldr	r0, [pc, #460]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 80019a0:	f00d fc54 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019b4:	2178      	movs	r1, #120	; 0x78
 80019b6:	486e      	ldr	r0, [pc, #440]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 80019b8:	f00d fc48 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019bc:	7abb      	ldrb	r3, [r7, #10]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019cc:	2178      	movs	r1, #120	; 0x78
 80019ce:	4869      	ldr	r0, [pc, #420]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 80019d0:	f00d fc3c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019d4:	7a7b      	ldrb	r3, [r7, #9]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2302      	movs	r3, #2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019e4:	2178      	movs	r1, #120	; 0x78
 80019e6:	4864      	ldr	r0, [pc, #400]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 80019e8:	f00d fc30 	bl	800f24c <ILI9341_Draw_Text>
				break;
 80019ec:	f001 b8a8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2302      	movs	r3, #2
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a00:	2105      	movs	r1, #5
 8001a02:	4850      	ldr	r0, [pc, #320]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a04:	f00d fc22 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2302      	movs	r3, #2
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a18:	2105      	movs	r1, #5
 8001a1a:	484b      	ldr	r0, [pc, #300]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 8001a1c:	f00d fc16 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a20:	7b7b      	ldrb	r3, [r7, #13]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	4846      	ldr	r0, [pc, #280]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 8001a34:	f00d fc0a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a38:	7b3b      	ldrb	r3, [r7, #12]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	4841      	ldr	r0, [pc, #260]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 8001a4c:	f00d fbfe 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2302      	movs	r3, #2
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a60:	2105      	movs	r1, #5
 8001a62:	483c      	ldr	r0, [pc, #240]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a64:	f00d fbf2 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2302      	movs	r3, #2
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	4837      	ldr	r0, [pc, #220]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001a7c:	f00d fbe6 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a80:	7a7b      	ldrb	r3, [r7, #9]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a90:	2105      	movs	r1, #5
 8001a92:	4832      	ldr	r0, [pc, #200]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001a94:	f00d fbda 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa8:	2178      	movs	r1, #120	; 0x78
 8001aaa:	482d      	ldr	r0, [pc, #180]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001aac:	f00d fbce 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac0:	2178      	movs	r1, #120	; 0x78
 8001ac2:	4828      	ldr	r0, [pc, #160]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001ac4:	f00d fbc2 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac8:	7b7b      	ldrb	r3, [r7, #13]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad8:	2178      	movs	r1, #120	; 0x78
 8001ada:	4823      	ldr	r0, [pc, #140]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001adc:	f00d fbb6 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af0:	2178      	movs	r1, #120	; 0x78
 8001af2:	481e      	ldr	r0, [pc, #120]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 8001af4:	f00d fbaa 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b08:	2178      	movs	r1, #120	; 0x78
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 8001b0c:	f00d fb9e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b10:	7abb      	ldrb	r3, [r7, #10]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b20:	2178      	movs	r1, #120	; 0x78
 8001b22:	4814      	ldr	r0, [pc, #80]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 8001b24:	f00d fb92 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b28:	7a7b      	ldrb	r3, [r7, #9]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2302      	movs	r3, #2
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b38:	2178      	movs	r1, #120	; 0x78
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 8001b3c:	f00d fb86 	bl	800f24c <ILI9341_Draw_Text>
				break;
 8001b40:	f000 bffe 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001b44:	080142e0 	.word	0x080142e0
 8001b48:	080142e8 	.word	0x080142e8
 8001b4c:	080142f0 	.word	0x080142f0
 8001b50:	080142f8 	.word	0x080142f8
 8001b54:	08014300 	.word	0x08014300
 8001b58:	08014308 	.word	0x08014308
 8001b5c:	08014310 	.word	0x08014310
 8001b60:	08014318 	.word	0x08014318
 8001b64:	08014320 	.word	0x08014320
 8001b68:	08014328 	.word	0x08014328
 8001b6c:	08014330 	.word	0x08014330
 8001b70:	08014338 	.word	0x08014338
 8001b74:	08014340 	.word	0x08014340
 8001b78:	08014348 	.word	0x08014348
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2302      	movs	r3, #2
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	48a5      	ldr	r0, [pc, #660]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b90:	f00d fb5c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	48a0      	ldr	r0, [pc, #640]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001ba8:	f00d fb50 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bac:	7b7b      	ldrb	r3, [r7, #13]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	489b      	ldr	r0, [pc, #620]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001bc0:	f00d fb44 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001bc4:	7b3b      	ldrb	r3, [r7, #12]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	4896      	ldr	r0, [pc, #600]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001bd8:	f00d fb38 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2302      	movs	r3, #2
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bec:	2105      	movs	r1, #5
 8001bee:	4891      	ldr	r0, [pc, #580]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001bf0:	f00d fb2c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf4:	7abb      	ldrb	r3, [r7, #10]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c04:	2105      	movs	r1, #5
 8001c06:	488c      	ldr	r0, [pc, #560]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001c08:	f00d fb20 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2302      	movs	r3, #2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	4887      	ldr	r0, [pc, #540]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001c20:	f00d fb14 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c34:	2178      	movs	r1, #120	; 0x78
 8001c36:	4882      	ldr	r0, [pc, #520]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001c38:	f00d fb08 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2302      	movs	r3, #2
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c4c:	2178      	movs	r1, #120	; 0x78
 8001c4e:	487d      	ldr	r0, [pc, #500]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c50:	f00d fafc 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c64:	2178      	movs	r1, #120	; 0x78
 8001c66:	4878      	ldr	r0, [pc, #480]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001c68:	f00d faf0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c6c:	7b3b      	ldrb	r3, [r7, #12]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2302      	movs	r3, #2
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c7c:	2178      	movs	r1, #120	; 0x78
 8001c7e:	4873      	ldr	r0, [pc, #460]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001c80:	f00d fae4 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c84:	7afb      	ldrb	r3, [r7, #11]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c94:	2178      	movs	r1, #120	; 0x78
 8001c96:	486e      	ldr	r0, [pc, #440]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001c98:	f00d fad8 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c9c:	7abb      	ldrb	r3, [r7, #10]
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cac:	2178      	movs	r1, #120	; 0x78
 8001cae:	4869      	ldr	r0, [pc, #420]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001cb0:	f00d facc 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb4:	7a7b      	ldrb	r3, [r7, #9]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc4:	2178      	movs	r1, #120	; 0x78
 8001cc6:	4864      	ldr	r0, [pc, #400]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001cc8:	f00d fac0 	bl	800f24c <ILI9341_Draw_Text>
				break;
 8001ccc:	f000 bf38 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4850      	ldr	r0, [pc, #320]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ce4:	f00d fab2 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	484b      	ldr	r0, [pc, #300]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001cfc:	f00d faa6 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7b7b      	ldrb	r3, [r7, #13]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2105      	movs	r1, #5
 8001d12:	4846      	ldr	r0, [pc, #280]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001d14:	f00d fa9a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7b3b      	ldrb	r3, [r7, #12]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	4841      	ldr	r0, [pc, #260]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001d2c:	f00d fa8e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	483c      	ldr	r0, [pc, #240]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d44:	f00d fa82 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	4837      	ldr	r0, [pc, #220]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001d5c:	f00d fa76 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d60:	7a7b      	ldrb	r3, [r7, #9]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d70:	2105      	movs	r1, #5
 8001d72:	4832      	ldr	r0, [pc, #200]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001d74:	f00d fa6a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d88:	2178      	movs	r1, #120	; 0x78
 8001d8a:	482d      	ldr	r0, [pc, #180]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001d8c:	f00d fa5e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	4828      	ldr	r0, [pc, #160]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001da4:	f00d fa52 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da8:	7b7b      	ldrb	r3, [r7, #13]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	4823      	ldr	r0, [pc, #140]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001dbc:	f00d fa46 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc0:	7b3b      	ldrb	r3, [r7, #12]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd0:	2178      	movs	r1, #120	; 0x78
 8001dd2:	481e      	ldr	r0, [pc, #120]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001dd4:	f00d fa3a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	2302      	movs	r3, #2
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de8:	2178      	movs	r1, #120	; 0x78
 8001dea:	4819      	ldr	r0, [pc, #100]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001dec:	f00d fa2e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df0:	7abb      	ldrb	r3, [r7, #10]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e00:	2178      	movs	r1, #120	; 0x78
 8001e02:	4814      	ldr	r0, [pc, #80]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e04:	f00d fa22 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e08:	7a7b      	ldrb	r3, [r7, #9]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2302      	movs	r3, #2
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e18:	2178      	movs	r1, #120	; 0x78
 8001e1a:	480f      	ldr	r0, [pc, #60]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001e1c:	f00d fa16 	bl	800f24c <ILI9341_Draw_Text>
				break;
 8001e20:	f000 be8e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001e24:	080142e0 	.word	0x080142e0
 8001e28:	080142e8 	.word	0x080142e8
 8001e2c:	080142f0 	.word	0x080142f0
 8001e30:	080142f8 	.word	0x080142f8
 8001e34:	08014300 	.word	0x08014300
 8001e38:	08014308 	.word	0x08014308
 8001e3c:	08014310 	.word	0x08014310
 8001e40:	08014318 	.word	0x08014318
 8001e44:	08014320 	.word	0x08014320
 8001e48:	08014328 	.word	0x08014328
 8001e4c:	08014330 	.word	0x08014330
 8001e50:	08014338 	.word	0x08014338
 8001e54:	08014340 	.word	0x08014340
 8001e58:	08014348 	.word	0x08014348
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	48a5      	ldr	r0, [pc, #660]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001e70:	f00d f9ec 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e84:	2105      	movs	r1, #5
 8001e86:	48a0      	ldr	r0, [pc, #640]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001e88:	f00d f9e0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e8c:	7b7b      	ldrb	r3, [r7, #13]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	2302      	movs	r3, #2
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	489b      	ldr	r0, [pc, #620]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ea0:	f00d f9d4 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2302      	movs	r3, #2
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	4896      	ldr	r0, [pc, #600]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 8001eb8:	f00d f9c8 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ecc:	2105      	movs	r1, #5
 8001ece:	4891      	ldr	r0, [pc, #580]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8001ed0:	f00d f9bc 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001ed4:	7abb      	ldrb	r3, [r7, #10]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	488c      	ldr	r0, [pc, #560]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001ee8:	f00d f9b0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001efc:	2105      	movs	r1, #5
 8001efe:	4887      	ldr	r0, [pc, #540]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f00:	f00d f9a4 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f14:	2178      	movs	r1, #120	; 0x78
 8001f16:	4882      	ldr	r0, [pc, #520]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f18:	f00d f998 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2302      	movs	r3, #2
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f2c:	2178      	movs	r1, #120	; 0x78
 8001f2e:	487d      	ldr	r0, [pc, #500]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8001f30:	f00d f98c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f34:	7b7b      	ldrb	r3, [r7, #13]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f44:	2178      	movs	r1, #120	; 0x78
 8001f46:	4878      	ldr	r0, [pc, #480]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 8001f48:	f00d f980 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2302      	movs	r3, #2
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f5c:	2178      	movs	r1, #120	; 0x78
 8001f5e:	4873      	ldr	r0, [pc, #460]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 8001f60:	f00d f974 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f74:	2178      	movs	r1, #120	; 0x78
 8001f76:	486e      	ldr	r0, [pc, #440]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 8001f78:	f00d f968 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	2302      	movs	r3, #2
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f8c:	2178      	movs	r1, #120	; 0x78
 8001f8e:	4869      	ldr	r0, [pc, #420]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f90:	f00d f95c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa4:	2178      	movs	r1, #120	; 0x78
 8001fa6:	4864      	ldr	r0, [pc, #400]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 8001fa8:	f00d f950 	bl	800f24c <ILI9341_Draw_Text>
				break;
 8001fac:	f000 bdc8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	4850      	ldr	r0, [pc, #320]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001fc4:	f00d f942 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	484b      	ldr	r0, [pc, #300]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001fdc:	f00d f936 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7b7b      	ldrb	r3, [r7, #13]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	4846      	ldr	r0, [pc, #280]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ff4:	f00d f92a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7b3b      	ldrb	r3, [r7, #12]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2105      	movs	r1, #5
 800200a:	4841      	ldr	r0, [pc, #260]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 800200c:	f00d f91e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2105      	movs	r1, #5
 8002022:	483c      	ldr	r0, [pc, #240]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8002024:	f00d f912 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002028:	7abb      	ldrb	r3, [r7, #10]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2302      	movs	r3, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002038:	2105      	movs	r1, #5
 800203a:	4837      	ldr	r0, [pc, #220]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 800203c:	f00d f906 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002040:	7a7b      	ldrb	r3, [r7, #9]
 8002042:	b29a      	uxth	r2, r3
 8002044:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	2302      	movs	r3, #2
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2300      	movs	r3, #0
 8002050:	2105      	movs	r1, #5
 8002052:	4832      	ldr	r0, [pc, #200]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002054:	f00d f8fa 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002068:	2178      	movs	r1, #120	; 0x78
 800206a:	482d      	ldr	r0, [pc, #180]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 800206c:	f00d f8ee 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2302      	movs	r3, #2
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002080:	2178      	movs	r1, #120	; 0x78
 8002082:	4828      	ldr	r0, [pc, #160]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8002084:	f00d f8e2 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002088:	7b7b      	ldrb	r3, [r7, #13]
 800208a:	b29a      	uxth	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2302      	movs	r3, #2
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002098:	2178      	movs	r1, #120	; 0x78
 800209a:	4823      	ldr	r0, [pc, #140]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 800209c:	f00d f8d6 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a0:	7b3b      	ldrb	r3, [r7, #12]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2302      	movs	r3, #2
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b0:	2178      	movs	r1, #120	; 0x78
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 80020b4:	f00d f8ca 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	2300      	movs	r3, #0
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	2302      	movs	r3, #2
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c8:	2178      	movs	r1, #120	; 0x78
 80020ca:	4819      	ldr	r0, [pc, #100]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 80020cc:	f00d f8be 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d0:	7abb      	ldrb	r3, [r7, #10]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2302      	movs	r3, #2
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e0:	2178      	movs	r1, #120	; 0x78
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 80020e4:	f00d f8b2 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e8:	7a7b      	ldrb	r3, [r7, #9]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	2302      	movs	r3, #2
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f8:	2178      	movs	r1, #120	; 0x78
 80020fa:	480f      	ldr	r0, [pc, #60]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 80020fc:	f00d f8a6 	bl	800f24c <ILI9341_Draw_Text>
				break;
 8002100:	f000 bd1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002104:	080142e0 	.word	0x080142e0
 8002108:	080142e8 	.word	0x080142e8
 800210c:	080142f0 	.word	0x080142f0
 8002110:	080142f8 	.word	0x080142f8
 8002114:	08014300 	.word	0x08014300
 8002118:	08014308 	.word	0x08014308
 800211c:	08014310 	.word	0x08014310
 8002120:	08014318 	.word	0x08014318
 8002124:	08014320 	.word	0x08014320
 8002128:	08014328 	.word	0x08014328
 800212c:	08014330 	.word	0x08014330
 8002130:	08014338 	.word	0x08014338
 8002134:	08014340 	.word	0x08014340
 8002138:	08014348 	.word	0x08014348
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	b29a      	uxth	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2302      	movs	r3, #2
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800214c:	2105      	movs	r1, #5
 800214e:	48a5      	ldr	r0, [pc, #660]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002150:	f00d f87c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	b29a      	uxth	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2302      	movs	r3, #2
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002164:	2105      	movs	r1, #5
 8002166:	48a0      	ldr	r0, [pc, #640]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002168:	f00d f870 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800216c:	7b7b      	ldrb	r3, [r7, #13]
 800216e:	b29a      	uxth	r2, r3
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2302      	movs	r3, #2
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800217c:	2105      	movs	r1, #5
 800217e:	489b      	ldr	r0, [pc, #620]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 8002180:	f00d f864 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002184:	7b3b      	ldrb	r3, [r7, #12]
 8002186:	b29a      	uxth	r2, r3
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2302      	movs	r3, #2
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002194:	2105      	movs	r1, #5
 8002196:	4896      	ldr	r0, [pc, #600]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002198:	f00d f858 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800219c:	7afb      	ldrb	r3, [r7, #11]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2302      	movs	r3, #2
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ac:	2105      	movs	r1, #5
 80021ae:	4891      	ldr	r0, [pc, #580]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 80021b0:	f00d f84c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b4:	7abb      	ldrb	r3, [r7, #10]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2302      	movs	r3, #2
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c4:	2105      	movs	r1, #5
 80021c6:	488c      	ldr	r0, [pc, #560]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 80021c8:	f00d f840 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021cc:	7a7b      	ldrb	r3, [r7, #9]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	2302      	movs	r3, #2
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021dc:	2105      	movs	r1, #5
 80021de:	4887      	ldr	r0, [pc, #540]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 80021e0:	f00d f834 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2302      	movs	r3, #2
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2178      	movs	r1, #120	; 0x78
 80021f6:	4882      	ldr	r0, [pc, #520]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 80021f8:	f00d f828 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2302      	movs	r3, #2
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800220c:	2178      	movs	r1, #120	; 0x78
 800220e:	487d      	ldr	r0, [pc, #500]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002210:	f00d f81c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002214:	7b7b      	ldrb	r3, [r7, #13]
 8002216:	b29a      	uxth	r2, r3
 8002218:	2300      	movs	r3, #0
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2302      	movs	r3, #2
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	4878      	ldr	r0, [pc, #480]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 8002228:	f00d f810 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800222c:	7b3b      	ldrb	r3, [r7, #12]
 800222e:	b29a      	uxth	r2, r3
 8002230:	2300      	movs	r3, #0
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	2302      	movs	r3, #2
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800223c:	2178      	movs	r1, #120	; 0x78
 800223e:	4873      	ldr	r0, [pc, #460]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002240:	f00d f804 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	b29a      	uxth	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	2302      	movs	r3, #2
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002254:	2178      	movs	r1, #120	; 0x78
 8002256:	486e      	ldr	r0, [pc, #440]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 8002258:	f00c fff8 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800225c:	7abb      	ldrb	r3, [r7, #10]
 800225e:	b29a      	uxth	r2, r3
 8002260:	2300      	movs	r3, #0
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2302      	movs	r3, #2
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800226c:	2178      	movs	r1, #120	; 0x78
 800226e:	4869      	ldr	r0, [pc, #420]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 8002270:	f00c ffec 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002274:	7a7b      	ldrb	r3, [r7, #9]
 8002276:	b29a      	uxth	r2, r3
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2302      	movs	r3, #2
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002284:	2178      	movs	r1, #120	; 0x78
 8002286:	4864      	ldr	r0, [pc, #400]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002288:	f00c ffe0 	bl	800f24c <ILI9341_Draw_Text>
				break;
 800228c:	f000 bc58 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	b29a      	uxth	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2302      	movs	r3, #2
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a0:	2105      	movs	r1, #5
 80022a2:	4850      	ldr	r0, [pc, #320]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 80022a4:	f00c ffd2 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b8:	2105      	movs	r1, #5
 80022ba:	484b      	ldr	r0, [pc, #300]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 80022bc:	f00c ffc6 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c0:	7b7b      	ldrb	r3, [r7, #13]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	2302      	movs	r3, #2
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d0:	2105      	movs	r1, #5
 80022d2:	4846      	ldr	r0, [pc, #280]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 80022d4:	f00c ffba 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2105      	movs	r1, #5
 80022ea:	4841      	ldr	r0, [pc, #260]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 80022ec:	f00c ffae 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2105      	movs	r1, #5
 8002302:	483c      	ldr	r0, [pc, #240]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002304:	f00c ffa2 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002308:	7abb      	ldrb	r3, [r7, #10]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2302      	movs	r3, #2
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002318:	2105      	movs	r1, #5
 800231a:	4837      	ldr	r0, [pc, #220]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 800231c:	f00c ff96 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002320:	7a7b      	ldrb	r3, [r7, #9]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002330:	2105      	movs	r1, #5
 8002332:	4832      	ldr	r0, [pc, #200]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 8002334:	f00c ff8a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2302      	movs	r3, #2
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002348:	2178      	movs	r1, #120	; 0x78
 800234a:	482d      	ldr	r0, [pc, #180]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 800234c:	f00c ff7e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002350:	7bbb      	ldrb	r3, [r7, #14]
 8002352:	b29a      	uxth	r2, r3
 8002354:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2302      	movs	r3, #2
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	2178      	movs	r1, #120	; 0x78
 8002362:	4828      	ldr	r0, [pc, #160]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002364:	f00c ff72 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002368:	7b7b      	ldrb	r3, [r7, #13]
 800236a:	b29a      	uxth	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002378:	2178      	movs	r1, #120	; 0x78
 800237a:	4823      	ldr	r0, [pc, #140]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 800237c:	f00c ff66 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002380:	7b3b      	ldrb	r3, [r7, #12]
 8002382:	b29a      	uxth	r2, r3
 8002384:	2300      	movs	r3, #0
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	2302      	movs	r3, #2
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002390:	2178      	movs	r1, #120	; 0x78
 8002392:	481e      	ldr	r0, [pc, #120]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002394:	f00c ff5a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	b29a      	uxth	r2, r3
 800239c:	2300      	movs	r3, #0
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2302      	movs	r3, #2
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023a8:	2178      	movs	r1, #120	; 0x78
 80023aa:	4819      	ldr	r0, [pc, #100]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 80023ac:	f00c ff4e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b0:	7abb      	ldrb	r3, [r7, #10]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2302      	movs	r3, #2
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c0:	2178      	movs	r1, #120	; 0x78
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 80023c4:	f00c ff42 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	2302      	movs	r3, #2
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d8:	2178      	movs	r1, #120	; 0x78
 80023da:	480f      	ldr	r0, [pc, #60]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 80023dc:	f00c ff36 	bl	800f24c <ILI9341_Draw_Text>
				break;
 80023e0:	e3ae      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80023e2:	bf00      	nop
 80023e4:	080142e0 	.word	0x080142e0
 80023e8:	080142e8 	.word	0x080142e8
 80023ec:	080142f0 	.word	0x080142f0
 80023f0:	080142f8 	.word	0x080142f8
 80023f4:	08014300 	.word	0x08014300
 80023f8:	08014308 	.word	0x08014308
 80023fc:	08014310 	.word	0x08014310
 8002400:	08014318 	.word	0x08014318
 8002404:	08014320 	.word	0x08014320
 8002408:	08014328 	.word	0x08014328
 800240c:	08014330 	.word	0x08014330
 8002410:	08014338 	.word	0x08014338
 8002414:	08014340 	.word	0x08014340
 8002418:	08014348 	.word	0x08014348
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	b29a      	uxth	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2302      	movs	r3, #2
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800242c:	2105      	movs	r1, #5
 800242e:	48a4      	ldr	r0, [pc, #656]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002430:	f00c ff0c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	b29a      	uxth	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002444:	2105      	movs	r1, #5
 8002446:	489f      	ldr	r0, [pc, #636]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 8002448:	f00c ff00 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800244c:	7b7b      	ldrb	r3, [r7, #13]
 800244e:	b29a      	uxth	r2, r3
 8002450:	2300      	movs	r3, #0
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2302      	movs	r3, #2
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800245c:	2105      	movs	r1, #5
 800245e:	489a      	ldr	r0, [pc, #616]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002460:	f00c fef4 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002464:	7b3b      	ldrb	r3, [r7, #12]
 8002466:	b29a      	uxth	r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	2302      	movs	r3, #2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002474:	2105      	movs	r1, #5
 8002476:	4895      	ldr	r0, [pc, #596]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 8002478:	f00c fee8 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	b29a      	uxth	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2302      	movs	r3, #2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800248c:	2105      	movs	r1, #5
 800248e:	4890      	ldr	r0, [pc, #576]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002490:	f00c fedc 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002494:	7abb      	ldrb	r3, [r7, #10]
 8002496:	b29a      	uxth	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a4:	2105      	movs	r1, #5
 80024a6:	488b      	ldr	r0, [pc, #556]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80024a8:	f00c fed0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ac:	7a7b      	ldrb	r3, [r7, #9]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2302      	movs	r3, #2
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024bc:	2105      	movs	r1, #5
 80024be:	4886      	ldr	r0, [pc, #536]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 80024c0:	f00c fec4 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d4:	2178      	movs	r1, #120	; 0x78
 80024d6:	4881      	ldr	r0, [pc, #516]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 80024d8:	f00c feb8 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024ec:	2178      	movs	r1, #120	; 0x78
 80024ee:	487c      	ldr	r0, [pc, #496]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 80024f0:	f00c feac 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80024f4:	7b7b      	ldrb	r3, [r7, #13]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	2302      	movs	r3, #2
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2178      	movs	r1, #120	; 0x78
 8002506:	4877      	ldr	r0, [pc, #476]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002508:	f00c fea0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800250c:	7b3b      	ldrb	r3, [r7, #12]
 800250e:	b29a      	uxth	r2, r3
 8002510:	2300      	movs	r3, #0
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2302      	movs	r3, #2
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800251c:	2178      	movs	r1, #120	; 0x78
 800251e:	4872      	ldr	r0, [pc, #456]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002520:	f00c fe94 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	b29a      	uxth	r2, r3
 8002528:	2300      	movs	r3, #0
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2302      	movs	r3, #2
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002534:	2178      	movs	r1, #120	; 0x78
 8002536:	486d      	ldr	r0, [pc, #436]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 8002538:	f00c fe88 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800253c:	7abb      	ldrb	r3, [r7, #10]
 800253e:	b29a      	uxth	r2, r3
 8002540:	2300      	movs	r3, #0
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2302      	movs	r3, #2
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800254c:	2178      	movs	r1, #120	; 0x78
 800254e:	4868      	ldr	r0, [pc, #416]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002550:	f00c fe7c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002554:	7a7b      	ldrb	r3, [r7, #9]
 8002556:	b29a      	uxth	r2, r3
 8002558:	2300      	movs	r3, #0
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2302      	movs	r3, #2
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002564:	2178      	movs	r1, #120	; 0x78
 8002566:	4863      	ldr	r0, [pc, #396]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002568:	f00c fe70 	bl	800f24c <ILI9341_Draw_Text>
				break;
 800256c:	e2e8      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	b29a      	uxth	r2, r3
 8002572:	2300      	movs	r3, #0
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	2302      	movs	r3, #2
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800257e:	2105      	movs	r1, #5
 8002580:	484f      	ldr	r0, [pc, #316]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002582:	f00c fe63 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	b29a      	uxth	r2, r3
 800258a:	2300      	movs	r3, #0
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2302      	movs	r3, #2
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002596:	2105      	movs	r1, #5
 8002598:	484a      	ldr	r0, [pc, #296]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 800259a:	f00c fe57 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800259e:	7b7b      	ldrb	r3, [r7, #13]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2302      	movs	r3, #2
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ae:	2105      	movs	r1, #5
 80025b0:	4845      	ldr	r0, [pc, #276]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 80025b2:	f00c fe4b 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b6:	7b3b      	ldrb	r3, [r7, #12]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2302      	movs	r3, #2
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c6:	2105      	movs	r1, #5
 80025c8:	4840      	ldr	r0, [pc, #256]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 80025ca:	f00c fe3f 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ce:	7afb      	ldrb	r3, [r7, #11]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2302      	movs	r3, #2
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025de:	2105      	movs	r1, #5
 80025e0:	483b      	ldr	r0, [pc, #236]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 80025e2:	f00c fe33 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e6:	7abb      	ldrb	r3, [r7, #10]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2302      	movs	r3, #2
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f6:	2105      	movs	r1, #5
 80025f8:	4836      	ldr	r0, [pc, #216]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80025fa:	f00c fe27 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025fe:	7a7b      	ldrb	r3, [r7, #9]
 8002600:	b29a      	uxth	r2, r3
 8002602:	2300      	movs	r3, #0
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	2302      	movs	r3, #2
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800260e:	2105      	movs	r1, #5
 8002610:	4831      	ldr	r0, [pc, #196]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002612:	f00c fe1b 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	b29a      	uxth	r2, r3
 800261a:	2300      	movs	r3, #0
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2302      	movs	r3, #2
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002626:	2178      	movs	r1, #120	; 0x78
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 800262a:	f00c fe0f 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800262e:	7bbb      	ldrb	r3, [r7, #14]
 8002630:	b29a      	uxth	r2, r3
 8002632:	2300      	movs	r3, #0
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2302      	movs	r3, #2
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800263e:	2178      	movs	r1, #120	; 0x78
 8002640:	4827      	ldr	r0, [pc, #156]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002642:	f00c fe03 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002646:	7b7b      	ldrb	r3, [r7, #13]
 8002648:	b29a      	uxth	r2, r3
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2302      	movs	r3, #2
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002656:	2178      	movs	r1, #120	; 0x78
 8002658:	4822      	ldr	r0, [pc, #136]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 800265a:	f00c fdf7 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800265e:	7b3b      	ldrb	r3, [r7, #12]
 8002660:	b29a      	uxth	r2, r3
 8002662:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	2178      	movs	r1, #120	; 0x78
 8002670:	481d      	ldr	r0, [pc, #116]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002672:	f00c fdeb 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	b29a      	uxth	r2, r3
 800267a:	2300      	movs	r3, #0
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2302      	movs	r3, #2
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002686:	2178      	movs	r1, #120	; 0x78
 8002688:	4818      	ldr	r0, [pc, #96]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 800268a:	f00c fddf 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800268e:	7abb      	ldrb	r3, [r7, #10]
 8002690:	b29a      	uxth	r2, r3
 8002692:	2300      	movs	r3, #0
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2302      	movs	r3, #2
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800269e:	2178      	movs	r1, #120	; 0x78
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 80026a2:	f00c fdd3 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026a6:	7a7b      	ldrb	r3, [r7, #9]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	2300      	movs	r3, #0
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2302      	movs	r3, #2
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026b6:	2178      	movs	r1, #120	; 0x78
 80026b8:	480e      	ldr	r0, [pc, #56]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 80026ba:	f00c fdc7 	bl	800f24c <ILI9341_Draw_Text>
				break;
 80026be:	e23f      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80026c0:	080142e0 	.word	0x080142e0
 80026c4:	080142e8 	.word	0x080142e8
 80026c8:	080142f0 	.word	0x080142f0
 80026cc:	080142f8 	.word	0x080142f8
 80026d0:	08014300 	.word	0x08014300
 80026d4:	08014308 	.word	0x08014308
 80026d8:	08014310 	.word	0x08014310
 80026dc:	08014318 	.word	0x08014318
 80026e0:	08014320 	.word	0x08014320
 80026e4:	08014328 	.word	0x08014328
 80026e8:	08014330 	.word	0x08014330
 80026ec:	08014338 	.word	0x08014338
 80026f0:	08014340 	.word	0x08014340
 80026f4:	08014348 	.word	0x08014348
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2302      	movs	r3, #2
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002708:	2105      	movs	r1, #5
 800270a:	48a4      	ldr	r0, [pc, #656]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800270c:	f00c fd9e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	b29a      	uxth	r2, r3
 8002714:	2300      	movs	r3, #0
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2302      	movs	r3, #2
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002720:	2105      	movs	r1, #5
 8002722:	489f      	ldr	r0, [pc, #636]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002724:	f00c fd92 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002728:	7b7b      	ldrb	r3, [r7, #13]
 800272a:	b29a      	uxth	r2, r3
 800272c:	2300      	movs	r3, #0
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2302      	movs	r3, #2
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002738:	2105      	movs	r1, #5
 800273a:	489a      	ldr	r0, [pc, #616]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800273c:	f00c fd86 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002740:	7b3b      	ldrb	r3, [r7, #12]
 8002742:	b29a      	uxth	r2, r3
 8002744:	2300      	movs	r3, #0
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002750:	2105      	movs	r1, #5
 8002752:	4895      	ldr	r0, [pc, #596]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002754:	f00c fd7a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002758:	7afb      	ldrb	r3, [r7, #11]
 800275a:	b29a      	uxth	r2, r3
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002768:	2105      	movs	r1, #5
 800276a:	4890      	ldr	r0, [pc, #576]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 800276c:	f00c fd6e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002770:	7abb      	ldrb	r3, [r7, #10]
 8002772:	b29a      	uxth	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	2302      	movs	r3, #2
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002780:	2105      	movs	r1, #5
 8002782:	488b      	ldr	r0, [pc, #556]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002784:	f00c fd62 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002788:	7a7b      	ldrb	r3, [r7, #9]
 800278a:	b29a      	uxth	r2, r3
 800278c:	2300      	movs	r3, #0
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2302      	movs	r3, #2
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002798:	2105      	movs	r1, #5
 800279a:	4886      	ldr	r0, [pc, #536]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 800279c:	f00c fd56 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	2302      	movs	r3, #2
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b0:	2178      	movs	r1, #120	; 0x78
 80027b2:	4881      	ldr	r0, [pc, #516]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 80027b4:	f00c fd4a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b8:	7bbb      	ldrb	r3, [r7, #14]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2302      	movs	r3, #2
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c8:	2178      	movs	r1, #120	; 0x78
 80027ca:	487c      	ldr	r0, [pc, #496]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 80027cc:	f00c fd3e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2300      	movs	r3, #0
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2302      	movs	r3, #2
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e0:	2178      	movs	r1, #120	; 0x78
 80027e2:	4877      	ldr	r0, [pc, #476]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 80027e4:	f00c fd32 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e8:	7b3b      	ldrb	r3, [r7, #12]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	2302      	movs	r3, #2
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f8:	2178      	movs	r1, #120	; 0x78
 80027fa:	4872      	ldr	r0, [pc, #456]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 80027fc:	f00c fd26 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	b29a      	uxth	r2, r3
 8002804:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2302      	movs	r3, #2
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	2178      	movs	r1, #120	; 0x78
 8002812:	486d      	ldr	r0, [pc, #436]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002814:	f00c fd1a 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002818:	7abb      	ldrb	r3, [r7, #10]
 800281a:	b29a      	uxth	r2, r3
 800281c:	2300      	movs	r3, #0
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2302      	movs	r3, #2
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002828:	2178      	movs	r1, #120	; 0x78
 800282a:	4868      	ldr	r0, [pc, #416]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800282c:	f00c fd0e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002830:	7a7b      	ldrb	r3, [r7, #9]
 8002832:	b29a      	uxth	r2, r3
 8002834:	2300      	movs	r3, #0
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2302      	movs	r3, #2
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002840:	2178      	movs	r1, #120	; 0x78
 8002842:	4863      	ldr	r0, [pc, #396]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002844:	f00c fd02 	bl	800f24c <ILI9341_Draw_Text>
			break;
 8002848:	e17a      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	b29a      	uxth	r2, r3
 800284e:	2300      	movs	r3, #0
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2302      	movs	r3, #2
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800285a:	2105      	movs	r1, #5
 800285c:	484f      	ldr	r0, [pc, #316]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800285e:	f00c fcf5 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002862:	7bbb      	ldrb	r3, [r7, #14]
 8002864:	b29a      	uxth	r2, r3
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2302      	movs	r3, #2
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002872:	2105      	movs	r1, #5
 8002874:	484a      	ldr	r0, [pc, #296]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002876:	f00c fce9 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800287a:	7b7b      	ldrb	r3, [r7, #13]
 800287c:	b29a      	uxth	r2, r3
 800287e:	2300      	movs	r3, #0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	2302      	movs	r3, #2
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800288a:	2105      	movs	r1, #5
 800288c:	4845      	ldr	r0, [pc, #276]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800288e:	f00c fcdd 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002892:	7b3b      	ldrb	r3, [r7, #12]
 8002894:	b29a      	uxth	r2, r3
 8002896:	2300      	movs	r3, #0
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	2302      	movs	r3, #2
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a2:	2105      	movs	r1, #5
 80028a4:	4840      	ldr	r0, [pc, #256]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 80028a6:	f00c fcd1 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	2300      	movs	r3, #0
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	2302      	movs	r3, #2
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ba:	2105      	movs	r1, #5
 80028bc:	483b      	ldr	r0, [pc, #236]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 80028be:	f00c fcc5 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c2:	7abb      	ldrb	r3, [r7, #10]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	2300      	movs	r3, #0
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	2302      	movs	r3, #2
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d2:	2105      	movs	r1, #5
 80028d4:	4836      	ldr	r0, [pc, #216]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 80028d6:	f00c fcb9 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028da:	7a7b      	ldrb	r3, [r7, #9]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	2302      	movs	r3, #2
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ea:	2105      	movs	r1, #5
 80028ec:	4831      	ldr	r0, [pc, #196]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 80028ee:	f00c fcad 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	2300      	movs	r3, #0
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2302      	movs	r3, #2
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002902:	2178      	movs	r1, #120	; 0x78
 8002904:	482c      	ldr	r0, [pc, #176]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002906:	f00c fca1 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800290a:	7bbb      	ldrb	r3, [r7, #14]
 800290c:	b29a      	uxth	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2302      	movs	r3, #2
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800291a:	2178      	movs	r1, #120	; 0x78
 800291c:	4827      	ldr	r0, [pc, #156]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 800291e:	f00c fc95 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002922:	7b7b      	ldrb	r3, [r7, #13]
 8002924:	b29a      	uxth	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2302      	movs	r3, #2
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002932:	2178      	movs	r1, #120	; 0x78
 8002934:	4822      	ldr	r0, [pc, #136]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002936:	f00c fc89 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800293a:	7b3b      	ldrb	r3, [r7, #12]
 800293c:	b29a      	uxth	r2, r3
 800293e:	2300      	movs	r3, #0
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2302      	movs	r3, #2
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800294a:	2178      	movs	r1, #120	; 0x78
 800294c:	481d      	ldr	r0, [pc, #116]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 800294e:	f00c fc7d 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	b29a      	uxth	r2, r3
 8002956:	2300      	movs	r3, #0
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2302      	movs	r3, #2
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002962:	2178      	movs	r1, #120	; 0x78
 8002964:	4818      	ldr	r0, [pc, #96]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002966:	f00c fc71 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800296a:	7abb      	ldrb	r3, [r7, #10]
 800296c:	b29a      	uxth	r2, r3
 800296e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2300      	movs	r3, #0
 800297a:	2178      	movs	r1, #120	; 0x78
 800297c:	4813      	ldr	r0, [pc, #76]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800297e:	f00c fc65 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002982:	7a7b      	ldrb	r3, [r7, #9]
 8002984:	b29a      	uxth	r2, r3
 8002986:	2300      	movs	r3, #0
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2302      	movs	r3, #2
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002992:	2178      	movs	r1, #120	; 0x78
 8002994:	480e      	ldr	r0, [pc, #56]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002996:	f00c fc59 	bl	800f24c <ILI9341_Draw_Text>
			break;
 800299a:	e0d1      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 800299c:	080142e0 	.word	0x080142e0
 80029a0:	080142e8 	.word	0x080142e8
 80029a4:	080142f0 	.word	0x080142f0
 80029a8:	080142f8 	.word	0x080142f8
 80029ac:	08014300 	.word	0x08014300
 80029b0:	08014308 	.word	0x08014308
 80029b4:	08014310 	.word	0x08014310
 80029b8:	08014318 	.word	0x08014318
 80029bc:	08014320 	.word	0x08014320
 80029c0:	08014328 	.word	0x08014328
 80029c4:	08014330 	.word	0x08014330
 80029c8:	08014338 	.word	0x08014338
 80029cc:	08014340 	.word	0x08014340
 80029d0:	08014348 	.word	0x08014348
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2302      	movs	r3, #2
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e4:	2105      	movs	r1, #5
 80029e6:	4858      	ldr	r0, [pc, #352]	; (8002b48 <FreqMenu_DrawPresetMenu+0x1520>)
 80029e8:	f00c fc30 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fc:	2105      	movs	r1, #5
 80029fe:	4853      	ldr	r0, [pc, #332]	; (8002b4c <FreqMenu_DrawPresetMenu+0x1524>)
 8002a00:	f00c fc24 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a04:	7b7b      	ldrb	r3, [r7, #13]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a14:	2105      	movs	r1, #5
 8002a16:	484e      	ldr	r0, [pc, #312]	; (8002b50 <FreqMenu_DrawPresetMenu+0x1528>)
 8002a18:	f00c fc18 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2302      	movs	r3, #2
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	4849      	ldr	r0, [pc, #292]	; (8002b54 <FreqMenu_DrawPresetMenu+0x152c>)
 8002a30:	f00c fc0c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a44:	2105      	movs	r1, #5
 8002a46:	4844      	ldr	r0, [pc, #272]	; (8002b58 <FreqMenu_DrawPresetMenu+0x1530>)
 8002a48:	f00c fc00 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a4c:	7abb      	ldrb	r3, [r7, #10]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a5c:	2105      	movs	r1, #5
 8002a5e:	483f      	ldr	r0, [pc, #252]	; (8002b5c <FreqMenu_DrawPresetMenu+0x1534>)
 8002a60:	f00c fbf4 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a64:	7a7b      	ldrb	r3, [r7, #9]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a74:	2105      	movs	r1, #5
 8002a76:	483a      	ldr	r0, [pc, #232]	; (8002b60 <FreqMenu_DrawPresetMenu+0x1538>)
 8002a78:	f00c fbe8 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	2302      	movs	r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8c:	2178      	movs	r1, #120	; 0x78
 8002a8e:	4835      	ldr	r0, [pc, #212]	; (8002b64 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a90:	f00c fbdc 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa4:	2178      	movs	r1, #120	; 0x78
 8002aa6:	4830      	ldr	r0, [pc, #192]	; (8002b68 <FreqMenu_DrawPresetMenu+0x1540>)
 8002aa8:	f00c fbd0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aac:	7b7b      	ldrb	r3, [r7, #13]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002abc:	2178      	movs	r1, #120	; 0x78
 8002abe:	482b      	ldr	r0, [pc, #172]	; (8002b6c <FreqMenu_DrawPresetMenu+0x1544>)
 8002ac0:	f00c fbc4 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ac4:	7b3b      	ldrb	r3, [r7, #12]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2302      	movs	r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ad4:	2178      	movs	r1, #120	; 0x78
 8002ad6:	4826      	ldr	r0, [pc, #152]	; (8002b70 <FreqMenu_DrawPresetMenu+0x1548>)
 8002ad8:	f00c fbb8 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aec:	2178      	movs	r1, #120	; 0x78
 8002aee:	4821      	ldr	r0, [pc, #132]	; (8002b74 <FreqMenu_DrawPresetMenu+0x154c>)
 8002af0:	f00c fbac 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002af4:	7abb      	ldrb	r3, [r7, #10]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	2300      	movs	r3, #0
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	2302      	movs	r3, #2
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b04:	2178      	movs	r1, #120	; 0x78
 8002b06:	481c      	ldr	r0, [pc, #112]	; (8002b78 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b08:	f00c fba0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b0c:	7a7b      	ldrb	r3, [r7, #9]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	2302      	movs	r3, #2
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2178      	movs	r1, #120	; 0x78
 8002b1e:	4817      	ldr	r0, [pc, #92]	; (8002b7c <FreqMenu_DrawPresetMenu+0x1554>)
 8002b20:	f00c fb94 	bl	800f24c <ILI9341_Draw_Text>
			break;
 8002b24:	bf00      	nop
 8002b26:	e00b      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002b28:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	22b4      	movs	r2, #180	; 0xb4
 8002b36:	2105      	movs	r1, #5
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <FreqMenu_DrawPresetMenu+0x1558>)
 8002b3a:	f00c fb87 	bl	800f24c <ILI9341_Draw_Text>
}
 8002b3e:	e7ff      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	080142e0 	.word	0x080142e0
 8002b4c:	080142e8 	.word	0x080142e8
 8002b50:	080142f0 	.word	0x080142f0
 8002b54:	080142f8 	.word	0x080142f8
 8002b58:	08014300 	.word	0x08014300
 8002b5c:	08014308 	.word	0x08014308
 8002b60:	08014310 	.word	0x08014310
 8002b64:	08014318 	.word	0x08014318
 8002b68:	08014320 	.word	0x08014320
 8002b6c:	08014328 	.word	0x08014328
 8002b70:	08014330 	.word	0x08014330
 8002b74:	08014338 	.word	0x08014338
 8002b78:	08014340 	.word	0x08014340
 8002b7c:	08014348 	.word	0x08014348
 8002b80:	08014354 	.word	0x08014354

08002b84 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	2302      	movs	r3, #2
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	220a      	movs	r2, #10
 8002b98:	2105      	movs	r1, #5
 8002b9a:	4804      	ldr	r0, [pc, #16]	; (8002bac <FreqMenu_DrawAdjustMenu+0x28>)
 8002b9c:	f00c fb56 	bl	800f24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002ba0:	f7fe f9bc 	bl	8000f1c <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	08014384 	.word	0x08014384

08002bb0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b0a0      	sub	sp, #128	; 0x80
 8002bb4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	220a      	movs	r2, #10
 8002bc4:	2105      	movs	r1, #5
 8002bc6:	48a2      	ldr	r0, [pc, #648]	; (8002e50 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002bc8:	f00c fb40 	bl	800f24c <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002bcc:	2300      	movs	r3, #0
 8002bce:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002bde:	4b9d      	ldr	r3, [pc, #628]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d109      	bne.n	8002bfe <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002bea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bee:	4a9a      	ldr	r2, [pc, #616]	; (8002e58 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	4615      	mov	r5, r2
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	7023      	strb	r3, [r4, #0]
 8002bfc:	e008      	b.n	8002c10 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002bfe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c02:	4a96      	ldr	r2, [pc, #600]	; (8002e5c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c04:	461c      	mov	r4, r3
 8002c06:	4615      	mov	r5, r2
 8002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c10:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c14:	2300      	movs	r3, #0
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c20:	2228      	movs	r2, #40	; 0x28
 8002c22:	2105      	movs	r1, #5
 8002c24:	f00c fb12 	bl	800f24c <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c3e:	f003 fcff 	bl	8006640 <SM_GetOutputInHertz>
 8002c42:	ee10 3a10 	vmov	r3, s0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fca6 	bl	8000598 <__aeabi_f2d>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c54:	e9cd 3400 	strd	r3, r4, [sp]
 8002c58:	4a81      	ldr	r2, [pc, #516]	; (8002e60 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c5a:	2119      	movs	r1, #25
 8002c5c:	f00d feb2 	bl	80109c4 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c60:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c64:	2300      	movs	r3, #0
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c70:	223c      	movs	r2, #60	; 0x3c
 8002c72:	2105      	movs	r1, #5
 8002c74:	f00c faea 	bl	800f24c <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c84:	2264      	movs	r2, #100	; 0x64
 8002c86:	2105      	movs	r1, #5
 8002c88:	4876      	ldr	r0, [pc, #472]	; (8002e64 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c8a:	f00c fadf 	bl	800f24c <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c8e:	4b71      	ldr	r3, [pc, #452]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d117      	bne.n	8002cca <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca6:	2264      	movs	r2, #100	; 0x64
 8002ca8:	21eb      	movs	r1, #235	; 0xeb
 8002caa:	486f      	ldr	r0, [pc, #444]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cac:	f00c face 	bl	800f24c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cb0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2264      	movs	r2, #100	; 0x64
 8002cbe:	f240 1109 	movw	r1, #265	; 0x109
 8002cc2:	486a      	ldr	r0, [pc, #424]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cc4:	f00c fac2 	bl	800f24c <ILI9341_Draw_Text>
 8002cc8:	e016      	b.n	8002cf8 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cd6:	2264      	movs	r2, #100	; 0x64
 8002cd8:	f240 1109 	movw	r1, #265	; 0x109
 8002cdc:	4863      	ldr	r0, [pc, #396]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cde:	f00c fab5 	bl	800f24c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ce2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	2264      	movs	r2, #100	; 0x64
 8002cf0:	21eb      	movs	r1, #235	; 0xeb
 8002cf2:	485d      	ldr	r0, [pc, #372]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cf4:	f00c faaa 	bl	800f24c <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d00:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2302      	movs	r3, #2
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2278      	movs	r2, #120	; 0x78
 8002d0e:	2105      	movs	r1, #5
 8002d10:	4858      	ldr	r0, [pc, #352]	; (8002e74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d12:	f00c fa9b 	bl	800f24c <ILI9341_Draw_Text>
 8002d16:	e00a      	b.n	8002d2e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d24:	2278      	movs	r2, #120	; 0x78
 8002d26:	2105      	movs	r1, #5
 8002d28:	4852      	ldr	r0, [pc, #328]	; (8002e74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d2a:	f00c fa8f 	bl	800f24c <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d44:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fc25 	bl	8000598 <__aeabi_f2d>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d56:	e9cd 3400 	strd	r3, r4, [sp]
 8002d5a:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d5c:	2119      	movs	r1, #25
 8002d5e:	f00d fe31 	bl	80109c4 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d62:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d72:	2278      	movs	r2, #120	; 0x78
 8002d74:	21b6      	movs	r1, #182	; 0xb6
 8002d76:	f00c fa69 	bl	800f24c <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10f      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d8a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2302      	movs	r3, #2
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	228c      	movs	r2, #140	; 0x8c
 8002d98:	2105      	movs	r1, #5
 8002d9a:	483a      	ldr	r0, [pc, #232]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002d9c:	f00c fa56 	bl	800f24c <ILI9341_Draw_Text>
 8002da0:	e00a      	b.n	8002db8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002da2:	2300      	movs	r3, #0
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2302      	movs	r3, #2
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dae:	228c      	movs	r2, #140	; 0x8c
 8002db0:	2105      	movs	r1, #5
 8002db2:	4834      	ldr	r0, [pc, #208]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002db4:	f00c fa4a 	bl	800f24c <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	ee17 0a90 	vmov	r0, s15
 8002de2:	f003 fc73 	bl	80066cc <SM_ConvertPeriodToHertz>
 8002de6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dea:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e8c <FreqMenu_DrawSweepMenu+0x2dc>
 8002dee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002df2:	ee16 0a90 	vmov	r0, s13
 8002df6:	f7fd fbcf 	bl	8000598 <__aeabi_f2d>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	f107 0018 	add.w	r0, r7, #24
 8002e02:	e9cd 3400 	strd	r3, r4, [sp]
 8002e06:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e08:	2114      	movs	r1, #20
 8002e0a:	f00d fddb 	bl	80109c4 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e0e:	f107 0018 	add.w	r0, r7, #24
 8002e12:	2300      	movs	r3, #0
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	2302      	movs	r3, #2
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e1e:	228c      	movs	r2, #140	; 0x8c
 8002e20:	219e      	movs	r1, #158	; 0x9e
 8002e22:	f00c fa13 	bl	800f24c <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d134      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d130      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002e36:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	22a0      	movs	r2, #160	; 0xa0
 8002e44:	2105      	movs	r1, #5
 8002e46:	4813      	ldr	r0, [pc, #76]	; (8002e94 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e48:	f00c fa00 	bl	800f24c <ILI9341_Draw_Text>
 8002e4c:	e02f      	b.n	8002eae <FreqMenu_DrawSweepMenu+0x2fe>
 8002e4e:	bf00      	nop
 8002e50:	08014398 	.word	0x08014398
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	080143ac 	.word	0x080143ac
 8002e5c:	080143c0 	.word	0x080143c0
 8002e60:	080143d4 	.word	0x080143d4
 8002e64:	080143e8 	.word	0x080143e8
 8002e68:	080143f4 	.word	0x080143f4
 8002e6c:	080143f8 	.word	0x080143f8
 8002e70:	20001e55 	.word	0x20001e55
 8002e74:	08014400 	.word	0x08014400
 8002e78:	2000208c 	.word	0x2000208c
 8002e7c:	08014410 	.word	0x08014410
 8002e80:	20001e54 	.word	0x20001e54
 8002e84:	0801441c 	.word	0x0801441c
 8002e88:	20000120 	.word	0x20000120
 8002e8c:	42f00000 	.word	0x42f00000
 8002e90:	0801442c 	.word	0x0801442c
 8002e94:	08014438 	.word	0x08014438
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ea4:	22a0      	movs	r2, #160	; 0xa0
 8002ea6:	2105      	movs	r1, #5
 8002ea8:	484d      	ldr	r0, [pc, #308]	; (8002fe0 <FreqMenu_DrawSweepMenu+0x430>)
 8002eaa:	f00c f9cf 	bl	800f24c <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <FreqMenu_DrawSweepMenu+0x434>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	ee17 0a90 	vmov	r0, s15
 8002ed8:	f003 fbf8 	bl	80066cc <SM_ConvertPeriodToHertz>
 8002edc:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee0:	eddf 7a41 	vldr	s15, [pc, #260]	; 8002fe8 <FreqMenu_DrawSweepMenu+0x438>
 8002ee4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ee8:	ee16 0a90 	vmov	r0, s13
 8002eec:	f7fd fb54 	bl	8000598 <__aeabi_f2d>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	1d38      	adds	r0, r7, #4
 8002ef6:	e9cd 3400 	strd	r3, r4, [sp]
 8002efa:	4a3c      	ldr	r2, [pc, #240]	; (8002fec <FreqMenu_DrawSweepMenu+0x43c>)
 8002efc:	2114      	movs	r1, #20
 8002efe:	f00d fd61 	bl	80109c4 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f02:	1d38      	adds	r0, r7, #4
 8002f04:	2300      	movs	r3, #0
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2302      	movs	r3, #2
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f10:	22a0      	movs	r2, #160	; 0xa0
 8002f12:	21aa      	movs	r1, #170	; 0xaa
 8002f14:	f00c f99a 	bl	800f24c <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f18:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <FreqMenu_DrawSweepMenu+0x440>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10b      	bne.n	8002f3c <FreqMenu_DrawSweepMenu+0x38c>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f24:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	22d5      	movs	r2, #213	; 0xd5
 8002f32:	2106      	movs	r1, #6
 8002f34:	482f      	ldr	r0, [pc, #188]	; (8002ff4 <FreqMenu_DrawSweepMenu+0x444>)
 8002f36:	f00c f989 	bl	800f24c <ILI9341_Draw_Text>
 8002f3a:	e00a      	b.n	8002f52 <FreqMenu_DrawSweepMenu+0x3a2>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f3c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	2302      	movs	r3, #2
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	22d5      	movs	r2, #213	; 0xd5
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	482a      	ldr	r0, [pc, #168]	; (8002ff8 <FreqMenu_DrawSweepMenu+0x448>)
 8002f4e:	f00c f97d 	bl	800f24c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f52:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	2302      	movs	r3, #2
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	22cc      	movs	r2, #204	; 0xcc
 8002f60:	2168      	movs	r1, #104	; 0x68
 8002f62:	4826      	ldr	r0, [pc, #152]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002f64:	f00c f972 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f68:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2300      	movs	r3, #0
 8002f74:	22de      	movs	r2, #222	; 0xde
 8002f76:	2161      	movs	r1, #97	; 0x61
 8002f78:	4821      	ldr	r0, [pc, #132]	; (8003000 <FreqMenu_DrawSweepMenu+0x450>)
 8002f7a:	f00c f967 	bl	800f24c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2302      	movs	r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	22cc      	movs	r2, #204	; 0xcc
 8002f8c:	21b7      	movs	r1, #183	; 0xb7
 8002f8e:	481b      	ldr	r0, [pc, #108]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002f90:	f00c f95c 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	22de      	movs	r2, #222	; 0xde
 8002fa2:	21ad      	movs	r1, #173	; 0xad
 8002fa4:	4817      	ldr	r0, [pc, #92]	; (8003004 <FreqMenu_DrawSweepMenu+0x454>)
 8002fa6:	f00c f951 	bl	800f24c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002faa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	22cc      	movs	r2, #204	; 0xcc
 8002fb8:	f240 1107 	movw	r1, #263	; 0x107
 8002fbc:	480f      	ldr	r0, [pc, #60]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002fbe:	f00c f945 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fc2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	2302      	movs	r3, #2
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	22de      	movs	r2, #222	; 0xde
 8002fd0:	21fc      	movs	r1, #252	; 0xfc
 8002fd2:	480d      	ldr	r0, [pc, #52]	; (8003008 <FreqMenu_DrawSweepMenu+0x458>)
 8002fd4:	f00c f93a 	bl	800f24c <ILI9341_Draw_Text>
}
 8002fd8:	bf00      	nop
 8002fda:	3778      	adds	r7, #120	; 0x78
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	08014438 	.word	0x08014438
 8002fe4:	20000124 	.word	0x20000124
 8002fe8:	42f00000 	.word	0x42f00000
 8002fec:	08014448 	.word	0x08014448
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	08014454 	.word	0x08014454
 8002ff8:	0801445c 	.word	0x0801445c
 8002ffc:	08014464 	.word	0x08014464
 8003000:	08014468 	.word	0x08014468
 8003004:	08014470 	.word	0x08014470
 8003008:	08014478 	.word	0x08014478

0800300c <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d007      	beq.n	800302c <FuncMenu_DrawMenu+0x20>
 800301c:	2b03      	cmp	r3, #3
 800301e:	d009      	beq.n	8003034 <FuncMenu_DrawMenu+0x28>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d000      	beq.n	8003026 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003024:	e00a      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003026:	f000 f80d 	bl	8003044 <FuncMenu_DrawMainMenu>
			break;
 800302a:	e007      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 800302c:	2000      	movs	r0, #0
 800302e:	f000 f851 	bl	80030d4 <FuncMenu_DrawOutputMenu>
			break;
 8003032:	e003      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003034:	2001      	movs	r0, #1
 8003036:	f000 f84d 	bl	80030d4 <FuncMenu_DrawOutputMenu>
			break;
 800303a:	bf00      	nop

	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800304a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	2302      	movs	r3, #2
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	220a      	movs	r2, #10
 8003058:	210a      	movs	r1, #10
 800305a:	481a      	ldr	r0, [pc, #104]	; (80030c4 <FuncMenu_DrawMainMenu+0x80>)
 800305c:	f00c f8f6 	bl	800f24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003060:	f7fd ff5c 	bl	8000f1c <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003064:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	2302      	movs	r3, #2
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	22d2      	movs	r2, #210	; 0xd2
 8003072:	2105      	movs	r1, #5
 8003074:	4814      	ldr	r0, [pc, #80]	; (80030c8 <FuncMenu_DrawMainMenu+0x84>)
 8003076:	f00c f8e9 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800307a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	2302      	movs	r3, #2
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2300      	movs	r3, #0
 8003086:	22d2      	movs	r2, #210	; 0xd2
 8003088:	2164      	movs	r1, #100	; 0x64
 800308a:	4810      	ldr	r0, [pc, #64]	; (80030cc <FuncMenu_DrawMainMenu+0x88>)
 800308c:	f00c f8de 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003090:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2302      	movs	r3, #2
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	22d2      	movs	r2, #210	; 0xd2
 800309e:	21af      	movs	r1, #175	; 0xaf
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <FuncMenu_DrawMainMenu+0x8c>)
 80030a2:	f00c f8d3 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030a6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	22d2      	movs	r2, #210	; 0xd2
 80030b4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <FuncMenu_DrawMainMenu+0x8c>)
 80030ba:	f00c f8c7 	bl	800f24c <ILI9341_Draw_Text>
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	08014480 	.word	0x08014480
 80030c8:	0801448c 	.word	0x0801448c
 80030cc:	08014494 	.word	0x08014494
 80030d0:	08014498 	.word	0x08014498

080030d4 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af02      	add	r7, sp, #8
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	2302      	movs	r3, #2
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2300      	movs	r3, #0
 80030f0:	220a      	movs	r2, #10
 80030f2:	210a      	movs	r1, #10
 80030f4:	4896      	ldr	r0, [pc, #600]	; (8003350 <FuncMenu_DrawOutputMenu+0x27c>)
 80030f6:	f00c f8a9 	bl	800f24c <ILI9341_Draw_Text>
 80030fa:	e00a      	b.n	8003112 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2302      	movs	r3, #2
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	220a      	movs	r2, #10
 800310a:	210a      	movs	r1, #10
 800310c:	4891      	ldr	r0, [pc, #580]	; (8003354 <FuncMenu_DrawOutputMenu+0x280>)
 800310e:	f00c f89d 	bl	800f24c <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	4618      	mov	r0, r3
 8003116:	f002 fffb 	bl	8006110 <SM_GetOutputChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003120:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8424 	beq.w	8003972 <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b06      	cmp	r3, #6
 8003130:	f200 841f 	bhi.w	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <FuncMenu_DrawOutputMenu+0x68>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003159 	.word	0x08003159
 8003140:	08003255 	.word	0x08003255
 8003144:	08003379 	.word	0x08003379
 8003148:	08003475 	.word	0x08003475
 800314c:	08003571 	.word	0x08003571
 8003150:	080036a9 	.word	0x080036a9
 8003154:	080037bb 	.word	0x080037bb
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003158:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2302      	movs	r3, #2
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	2232      	movs	r2, #50	; 0x32
 8003166:	210a      	movs	r1, #10
 8003168:	487b      	ldr	r0, [pc, #492]	; (8003358 <FuncMenu_DrawOutputMenu+0x284>)
 800316a:	f00c f86f 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2302      	movs	r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317a:	2246      	movs	r2, #70	; 0x46
 800317c:	210a      	movs	r1, #10
 800317e:	4877      	ldr	r0, [pc, #476]	; (800335c <FuncMenu_DrawOutputMenu+0x288>)
 8003180:	f00c f864 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2302      	movs	r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003190:	225a      	movs	r2, #90	; 0x5a
 8003192:	210a      	movs	r1, #10
 8003194:	4872      	ldr	r0, [pc, #456]	; (8003360 <FuncMenu_DrawOutputMenu+0x28c>)
 8003196:	f00c f859 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800319a:	2300      	movs	r3, #0
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2302      	movs	r3, #2
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031a6:	226e      	movs	r2, #110	; 0x6e
 80031a8:	210a      	movs	r1, #10
 80031aa:	486e      	ldr	r0, [pc, #440]	; (8003364 <FuncMenu_DrawOutputMenu+0x290>)
 80031ac:	f00c f84e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031b0:	2300      	movs	r3, #0
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	2302      	movs	r3, #2
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031bc:	2282      	movs	r2, #130	; 0x82
 80031be:	210a      	movs	r1, #10
 80031c0:	4869      	ldr	r0, [pc, #420]	; (8003368 <FuncMenu_DrawOutputMenu+0x294>)
 80031c2:	f00c f843 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031c6:	2300      	movs	r3, #0
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2302      	movs	r3, #2
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d2:	2296      	movs	r2, #150	; 0x96
 80031d4:	210a      	movs	r1, #10
 80031d6:	4865      	ldr	r0, [pc, #404]	; (800336c <FuncMenu_DrawOutputMenu+0x298>)
 80031d8:	f00c f838 	bl	800f24c <ILI9341_Draw_Text>

				if(pOutChan)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031e2:	2300      	movs	r3, #0
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	2302      	movs	r3, #2
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031ee:	22aa      	movs	r2, #170	; 0xaa
 80031f0:	210a      	movs	r1, #10
 80031f2:	485f      	ldr	r0, [pc, #380]	; (8003370 <FuncMenu_DrawOutputMenu+0x29c>)
 80031f4:	f00c f82a 	bl	800f24c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80031f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	2302      	movs	r3, #2
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	22d2      	movs	r2, #210	; 0xd2
 8003206:	2105      	movs	r1, #5
 8003208:	485a      	ldr	r0, [pc, #360]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800320a:	f00c f81f 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800320e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	2302      	movs	r3, #2
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	22d2      	movs	r2, #210	; 0xd2
 800321c:	2161      	movs	r1, #97	; 0x61
 800321e:	4855      	ldr	r0, [pc, #340]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003220:	f00c f814 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003224:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2302      	movs	r3, #2
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	22d2      	movs	r2, #210	; 0xd2
 8003232:	21af      	movs	r1, #175	; 0xaf
 8003234:	484f      	ldr	r0, [pc, #316]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003236:	f00c f809 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800323a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	2302      	movs	r3, #2
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	22d2      	movs	r2, #210	; 0xd2
 8003248:	f44f 7182 	mov.w	r1, #260	; 0x104
 800324c:	4849      	ldr	r0, [pc, #292]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800324e:	f00b fffd 	bl	800f24c <ILI9341_Draw_Text>
				break;
 8003252:	e38e      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003254:	2300      	movs	r3, #0
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	2302      	movs	r3, #2
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003260:	2232      	movs	r2, #50	; 0x32
 8003262:	210a      	movs	r1, #10
 8003264:	483c      	ldr	r0, [pc, #240]	; (8003358 <FuncMenu_DrawOutputMenu+0x284>)
 8003266:	f00b fff1 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800326a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	2302      	movs	r3, #2
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	2246      	movs	r2, #70	; 0x46
 8003278:	210a      	movs	r1, #10
 800327a:	4838      	ldr	r0, [pc, #224]	; (800335c <FuncMenu_DrawOutputMenu+0x288>)
 800327c:	f00b ffe6 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003280:	2300      	movs	r3, #0
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	2302      	movs	r3, #2
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800328c:	225a      	movs	r2, #90	; 0x5a
 800328e:	210a      	movs	r1, #10
 8003290:	4833      	ldr	r0, [pc, #204]	; (8003360 <FuncMenu_DrawOutputMenu+0x28c>)
 8003292:	f00b ffdb 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003296:	2300      	movs	r3, #0
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2302      	movs	r3, #2
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032a2:	226e      	movs	r2, #110	; 0x6e
 80032a4:	210a      	movs	r1, #10
 80032a6:	482f      	ldr	r0, [pc, #188]	; (8003364 <FuncMenu_DrawOutputMenu+0x290>)
 80032a8:	f00b ffd0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032ac:	2300      	movs	r3, #0
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	2302      	movs	r3, #2
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032b8:	2282      	movs	r2, #130	; 0x82
 80032ba:	210a      	movs	r1, #10
 80032bc:	482a      	ldr	r0, [pc, #168]	; (8003368 <FuncMenu_DrawOutputMenu+0x294>)
 80032be:	f00b ffc5 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032c2:	2300      	movs	r3, #0
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	2302      	movs	r3, #2
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ce:	2296      	movs	r2, #150	; 0x96
 80032d0:	210a      	movs	r1, #10
 80032d2:	4826      	ldr	r0, [pc, #152]	; (800336c <FuncMenu_DrawOutputMenu+0x298>)
 80032d4:	f00b ffba 	bl	800f24c <ILI9341_Draw_Text>

				if(pOutChan)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032de:	2300      	movs	r3, #0
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2302      	movs	r3, #2
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ea:	22aa      	movs	r2, #170	; 0xaa
 80032ec:	210a      	movs	r1, #10
 80032ee:	4820      	ldr	r0, [pc, #128]	; (8003370 <FuncMenu_DrawOutputMenu+0x29c>)
 80032f0:	f00b ffac 	bl	800f24c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032f4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	2302      	movs	r3, #2
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2300      	movs	r3, #0
 8003300:	22d2      	movs	r2, #210	; 0xd2
 8003302:	2105      	movs	r1, #5
 8003304:	481b      	ldr	r0, [pc, #108]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003306:	f00b ffa1 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800330a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2302      	movs	r3, #2
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	22d2      	movs	r2, #210	; 0xd2
 8003318:	2161      	movs	r1, #97	; 0x61
 800331a:	4816      	ldr	r0, [pc, #88]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800331c:	f00b ff96 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003320:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	2302      	movs	r3, #2
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2300      	movs	r3, #0
 800332c:	22d2      	movs	r2, #210	; 0xd2
 800332e:	21af      	movs	r1, #175	; 0xaf
 8003330:	4810      	ldr	r0, [pc, #64]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003332:	f00b ff8b 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003336:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	2302      	movs	r3, #2
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	22d2      	movs	r2, #210	; 0xd2
 8003344:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003348:	480a      	ldr	r0, [pc, #40]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800334a:	f00b ff7f 	bl	800f24c <ILI9341_Draw_Text>
				break;
 800334e:	e310      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003350:	080144a0 	.word	0x080144a0
 8003354:	080144b0 	.word	0x080144b0
 8003358:	080144c0 	.word	0x080144c0
 800335c:	080144c8 	.word	0x080144c8
 8003360:	080144d4 	.word	0x080144d4
 8003364:	080144dc 	.word	0x080144dc
 8003368:	080144e8 	.word	0x080144e8
 800336c:	080144f4 	.word	0x080144f4
 8003370:	080144fc 	.word	0x080144fc
 8003374:	08014498 	.word	0x08014498
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003378:	2300      	movs	r3, #0
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	2302      	movs	r3, #2
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003384:	2232      	movs	r2, #50	; 0x32
 8003386:	210a      	movs	r1, #10
 8003388:	48be      	ldr	r0, [pc, #760]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 800338a:	f00b ff5f 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800338e:	2300      	movs	r3, #0
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2302      	movs	r3, #2
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800339a:	2246      	movs	r2, #70	; 0x46
 800339c:	210a      	movs	r1, #10
 800339e:	48ba      	ldr	r0, [pc, #744]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 80033a0:	f00b ff54 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80033a4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2302      	movs	r3, #2
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	225a      	movs	r2, #90	; 0x5a
 80033b2:	210a      	movs	r1, #10
 80033b4:	48b5      	ldr	r0, [pc, #724]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80033b6:	f00b ff49 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ba:	2300      	movs	r3, #0
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	2302      	movs	r3, #2
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033c6:	226e      	movs	r2, #110	; 0x6e
 80033c8:	210a      	movs	r1, #10
 80033ca:	48b1      	ldr	r0, [pc, #708]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80033cc:	f00b ff3e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033d0:	2300      	movs	r3, #0
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2302      	movs	r3, #2
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033dc:	2282      	movs	r2, #130	; 0x82
 80033de:	210a      	movs	r1, #10
 80033e0:	48ac      	ldr	r0, [pc, #688]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80033e2:	f00b ff33 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033e6:	2300      	movs	r3, #0
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	2302      	movs	r3, #2
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033f2:	2296      	movs	r2, #150	; 0x96
 80033f4:	210a      	movs	r1, #10
 80033f6:	48a8      	ldr	r0, [pc, #672]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80033f8:	f00b ff28 	bl	800f24c <ILI9341_Draw_Text>
				if(pOutChan)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003402:	2300      	movs	r3, #0
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2302      	movs	r3, #2
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800340e:	22aa      	movs	r2, #170	; 0xaa
 8003410:	210a      	movs	r1, #10
 8003412:	48a2      	ldr	r0, [pc, #648]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003414:	f00b ff1a 	bl	800f24c <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003418:	f240 23fd 	movw	r3, #765	; 0x2fd
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2302      	movs	r3, #2
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	22d2      	movs	r2, #210	; 0xd2
 8003426:	2105      	movs	r1, #5
 8003428:	489d      	ldr	r0, [pc, #628]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800342a:	f00b ff0f 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800342e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	2302      	movs	r3, #2
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2300      	movs	r3, #0
 800343a:	22d2      	movs	r2, #210	; 0xd2
 800343c:	2161      	movs	r1, #97	; 0x61
 800343e:	4898      	ldr	r0, [pc, #608]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003440:	f00b ff04 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003444:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2302      	movs	r3, #2
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	22d2      	movs	r2, #210	; 0xd2
 8003452:	21af      	movs	r1, #175	; 0xaf
 8003454:	4892      	ldr	r0, [pc, #584]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003456:	f00b fef9 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800345a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	2302      	movs	r3, #2
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	22d2      	movs	r2, #210	; 0xd2
 8003468:	f44f 7182 	mov.w	r1, #260	; 0x104
 800346c:	488c      	ldr	r0, [pc, #560]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800346e:	f00b feed 	bl	800f24c <ILI9341_Draw_Text>
				break;
 8003472:	e27e      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003474:	2300      	movs	r3, #0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003480:	2232      	movs	r2, #50	; 0x32
 8003482:	210a      	movs	r1, #10
 8003484:	487f      	ldr	r0, [pc, #508]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003486:	f00b fee1 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800348a:	2300      	movs	r3, #0
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2302      	movs	r3, #2
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003496:	2246      	movs	r2, #70	; 0x46
 8003498:	210a      	movs	r1, #10
 800349a:	487b      	ldr	r0, [pc, #492]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 800349c:	f00b fed6 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a0:	2300      	movs	r3, #0
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	2302      	movs	r3, #2
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ac:	225a      	movs	r2, #90	; 0x5a
 80034ae:	210a      	movs	r1, #10
 80034b0:	4876      	ldr	r0, [pc, #472]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80034b2:	f00b fecb 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034b6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2302      	movs	r3, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	226e      	movs	r2, #110	; 0x6e
 80034c4:	210a      	movs	r1, #10
 80034c6:	4872      	ldr	r0, [pc, #456]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80034c8:	f00b fec0 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034cc:	2300      	movs	r3, #0
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	2302      	movs	r3, #2
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034d8:	2282      	movs	r2, #130	; 0x82
 80034da:	210a      	movs	r1, #10
 80034dc:	486d      	ldr	r0, [pc, #436]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80034de:	f00b feb5 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034e2:	2300      	movs	r3, #0
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	2302      	movs	r3, #2
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ee:	2296      	movs	r2, #150	; 0x96
 80034f0:	210a      	movs	r1, #10
 80034f2:	4869      	ldr	r0, [pc, #420]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80034f4:	f00b feaa 	bl	800f24c <ILI9341_Draw_Text>

				if(pOutChan)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2302      	movs	r3, #2
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800350a:	22aa      	movs	r2, #170	; 0xaa
 800350c:	210a      	movs	r1, #10
 800350e:	4863      	ldr	r0, [pc, #396]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003510:	f00b fe9c 	bl	800f24c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003514:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2302      	movs	r3, #2
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2300      	movs	r3, #0
 8003520:	22d2      	movs	r2, #210	; 0xd2
 8003522:	2105      	movs	r1, #5
 8003524:	485e      	ldr	r0, [pc, #376]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003526:	f00b fe91 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800352a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2302      	movs	r3, #2
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	22d2      	movs	r2, #210	; 0xd2
 8003538:	2161      	movs	r1, #97	; 0x61
 800353a:	4859      	ldr	r0, [pc, #356]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800353c:	f00b fe86 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003540:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2302      	movs	r3, #2
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	22d2      	movs	r2, #210	; 0xd2
 800354e:	21af      	movs	r1, #175	; 0xaf
 8003550:	4853      	ldr	r0, [pc, #332]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003552:	f00b fe7b 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003556:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2302      	movs	r3, #2
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	22d2      	movs	r2, #210	; 0xd2
 8003564:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003568:	484d      	ldr	r0, [pc, #308]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800356a:	f00b fe6f 	bl	800f24c <ILI9341_Draw_Text>
				break;
 800356e:	e200      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003570:	2300      	movs	r3, #0
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	2302      	movs	r3, #2
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800357c:	2232      	movs	r2, #50	; 0x32
 800357e:	210a      	movs	r1, #10
 8003580:	4840      	ldr	r0, [pc, #256]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003582:	f00b fe63 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003586:	2300      	movs	r3, #0
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2302      	movs	r3, #2
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003592:	2246      	movs	r2, #70	; 0x46
 8003594:	210a      	movs	r1, #10
 8003596:	483c      	ldr	r0, [pc, #240]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003598:	f00b fe58 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800359c:	2300      	movs	r3, #0
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	2302      	movs	r3, #2
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035a8:	225a      	movs	r2, #90	; 0x5a
 80035aa:	210a      	movs	r1, #10
 80035ac:	4837      	ldr	r0, [pc, #220]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80035ae:	f00b fe4d 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b2:	2300      	movs	r3, #0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035be:	226e      	movs	r2, #110	; 0x6e
 80035c0:	210a      	movs	r1, #10
 80035c2:	4833      	ldr	r0, [pc, #204]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80035c4:	f00b fe42 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035c8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2302      	movs	r3, #2
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	2282      	movs	r2, #130	; 0x82
 80035d6:	210a      	movs	r1, #10
 80035d8:	482e      	ldr	r0, [pc, #184]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80035da:	f00b fe37 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035de:	2300      	movs	r3, #0
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2302      	movs	r3, #2
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ea:	2296      	movs	r2, #150	; 0x96
 80035ec:	210a      	movs	r1, #10
 80035ee:	482a      	ldr	r0, [pc, #168]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80035f0:	f00b fe2c 	bl	800f24c <ILI9341_Draw_Text>

				if(pOutChan)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035fa:	2300      	movs	r3, #0
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	2302      	movs	r3, #2
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003606:	22aa      	movs	r2, #170	; 0xaa
 8003608:	210a      	movs	r1, #10
 800360a:	4824      	ldr	r0, [pc, #144]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 800360c:	f00b fe1e 	bl	800f24c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003610:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2302      	movs	r3, #2
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	22d2      	movs	r2, #210	; 0xd2
 800361e:	2105      	movs	r1, #5
 8003620:	481f      	ldr	r0, [pc, #124]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003622:	f00b fe13 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003626:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	2302      	movs	r3, #2
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	2300      	movs	r3, #0
 8003632:	22d2      	movs	r2, #210	; 0xd2
 8003634:	2161      	movs	r1, #97	; 0x61
 8003636:	481a      	ldr	r0, [pc, #104]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003638:	f00b fe08 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800363c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2302      	movs	r3, #2
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2300      	movs	r3, #0
 8003648:	22d2      	movs	r2, #210	; 0xd2
 800364a:	21af      	movs	r1, #175	; 0xaf
 800364c:	4814      	ldr	r0, [pc, #80]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800364e:	f00b fdfd 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003652:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	2302      	movs	r3, #2
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	22d2      	movs	r2, #210	; 0xd2
 8003660:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003664:	480e      	ldr	r0, [pc, #56]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003666:	f00b fdf1 	bl	800f24c <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800366a:	2300      	movs	r3, #0
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2302      	movs	r3, #2
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003676:	2232      	movs	r2, #50	; 0x32
 8003678:	2196      	movs	r1, #150	; 0x96
 800367a:	480a      	ldr	r0, [pc, #40]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5d0>)
 800367c:	f00b fde6 	bl	800f24c <ILI9341_Draw_Text>
				break;
 8003680:	e177      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003682:	bf00      	nop
 8003684:	080144c0 	.word	0x080144c0
 8003688:	080144c8 	.word	0x080144c8
 800368c:	080144d4 	.word	0x080144d4
 8003690:	080144dc 	.word	0x080144dc
 8003694:	080144e8 	.word	0x080144e8
 8003698:	080144f4 	.word	0x080144f4
 800369c:	080144fc 	.word	0x080144fc
 80036a0:	08014498 	.word	0x08014498
 80036a4:	08014504 	.word	0x08014504
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a8:	2300      	movs	r3, #0
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	2302      	movs	r3, #2
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036b4:	2232      	movs	r2, #50	; 0x32
 80036b6:	210a      	movs	r1, #10
 80036b8:	48b0      	ldr	r0, [pc, #704]	; (800397c <FuncMenu_DrawOutputMenu+0x8a8>)
 80036ba:	f00b fdc7 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036be:	2300      	movs	r3, #0
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2302      	movs	r3, #2
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ca:	2246      	movs	r2, #70	; 0x46
 80036cc:	210a      	movs	r1, #10
 80036ce:	48ac      	ldr	r0, [pc, #688]	; (8003980 <FuncMenu_DrawOutputMenu+0x8ac>)
 80036d0:	f00b fdbc 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036d4:	2300      	movs	r3, #0
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	2302      	movs	r3, #2
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036e0:	225a      	movs	r2, #90	; 0x5a
 80036e2:	210a      	movs	r1, #10
 80036e4:	48a7      	ldr	r0, [pc, #668]	; (8003984 <FuncMenu_DrawOutputMenu+0x8b0>)
 80036e6:	f00b fdb1 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036ea:	2300      	movs	r3, #0
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	2302      	movs	r3, #2
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036f6:	226e      	movs	r2, #110	; 0x6e
 80036f8:	210a      	movs	r1, #10
 80036fa:	48a3      	ldr	r0, [pc, #652]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b4>)
 80036fc:	f00b fda6 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003700:	2300      	movs	r3, #0
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	2302      	movs	r3, #2
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800370c:	2282      	movs	r2, #130	; 0x82
 800370e:	210a      	movs	r1, #10
 8003710:	489e      	ldr	r0, [pc, #632]	; (800398c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003712:	f00b fd9b 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003716:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2302      	movs	r3, #2
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2300      	movs	r3, #0
 8003722:	2296      	movs	r2, #150	; 0x96
 8003724:	210a      	movs	r1, #10
 8003726:	489a      	ldr	r0, [pc, #616]	; (8003990 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003728:	f00b fd90 	bl	800f24c <ILI9341_Draw_Text>

				if(pOutChan)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003732:	2300      	movs	r3, #0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2302      	movs	r3, #2
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800373e:	22aa      	movs	r2, #170	; 0xaa
 8003740:	210a      	movs	r1, #10
 8003742:	4894      	ldr	r0, [pc, #592]	; (8003994 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003744:	f00b fd82 	bl	800f24c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003748:	f240 23fd 	movw	r3, #765	; 0x2fd
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2302      	movs	r3, #2
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2300      	movs	r3, #0
 8003754:	22d2      	movs	r2, #210	; 0xd2
 8003756:	2105      	movs	r1, #5
 8003758:	488f      	ldr	r0, [pc, #572]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800375a:	f00b fd77 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800375e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	2302      	movs	r3, #2
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	22d2      	movs	r2, #210	; 0xd2
 800376c:	2161      	movs	r1, #97	; 0x61
 800376e:	488a      	ldr	r0, [pc, #552]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003770:	f00b fd6c 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003774:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2302      	movs	r3, #2
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	22d2      	movs	r2, #210	; 0xd2
 8003782:	21af      	movs	r1, #175	; 0xaf
 8003784:	4884      	ldr	r0, [pc, #528]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003786:	f00b fd61 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800378a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	2302      	movs	r3, #2
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	22d2      	movs	r2, #210	; 0xd2
 8003798:	f44f 7182 	mov.w	r1, #260	; 0x104
 800379c:	487e      	ldr	r0, [pc, #504]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800379e:	f00b fd55 	bl	800f24c <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037a2:	2300      	movs	r3, #0
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	2302      	movs	r3, #2
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037ae:	2232      	movs	r2, #50	; 0x32
 80037b0:	2196      	movs	r1, #150	; 0x96
 80037b2:	487a      	ldr	r0, [pc, #488]	; (800399c <FuncMenu_DrawOutputMenu+0x8c8>)
 80037b4:	f00b fd4a 	bl	800f24c <ILI9341_Draw_Text>
				break;
 80037b8:	e0db      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ba:	2300      	movs	r3, #0
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2302      	movs	r3, #2
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037c6:	2232      	movs	r2, #50	; 0x32
 80037c8:	210a      	movs	r1, #10
 80037ca:	486c      	ldr	r0, [pc, #432]	; (800397c <FuncMenu_DrawOutputMenu+0x8a8>)
 80037cc:	f00b fd3e 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d0:	2300      	movs	r3, #0
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2302      	movs	r3, #2
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037dc:	2246      	movs	r2, #70	; 0x46
 80037de:	210a      	movs	r1, #10
 80037e0:	4867      	ldr	r0, [pc, #412]	; (8003980 <FuncMenu_DrawOutputMenu+0x8ac>)
 80037e2:	f00b fd33 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037e6:	2300      	movs	r3, #0
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	2302      	movs	r3, #2
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037f2:	225a      	movs	r2, #90	; 0x5a
 80037f4:	210a      	movs	r1, #10
 80037f6:	4863      	ldr	r0, [pc, #396]	; (8003984 <FuncMenu_DrawOutputMenu+0x8b0>)
 80037f8:	f00b fd28 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037fc:	2300      	movs	r3, #0
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	2302      	movs	r3, #2
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003808:	226e      	movs	r2, #110	; 0x6e
 800380a:	210a      	movs	r1, #10
 800380c:	485e      	ldr	r0, [pc, #376]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b4>)
 800380e:	f00b fd1d 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003812:	2300      	movs	r3, #0
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2302      	movs	r3, #2
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800381e:	2282      	movs	r2, #130	; 0x82
 8003820:	210a      	movs	r1, #10
 8003822:	485a      	ldr	r0, [pc, #360]	; (800398c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003824:	f00b fd12 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003828:	2300      	movs	r3, #0
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	2302      	movs	r3, #2
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003834:	2296      	movs	r2, #150	; 0x96
 8003836:	210a      	movs	r1, #10
 8003838:	4855      	ldr	r0, [pc, #340]	; (8003990 <FuncMenu_DrawOutputMenu+0x8bc>)
 800383a:	f00b fd07 	bl	800f24c <ILI9341_Draw_Text>

				if(pOutChan)
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003844:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	2302      	movs	r3, #2
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	22aa      	movs	r2, #170	; 0xaa
 8003852:	210a      	movs	r1, #10
 8003854:	484f      	ldr	r0, [pc, #316]	; (8003994 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003856:	f00b fcf9 	bl	800f24c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800385a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	2302      	movs	r3, #2
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	22d2      	movs	r2, #210	; 0xd2
 8003868:	2105      	movs	r1, #5
 800386a:	484b      	ldr	r0, [pc, #300]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800386c:	f00b fcee 	bl	800f24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003870:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2302      	movs	r3, #2
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	22d2      	movs	r2, #210	; 0xd2
 800387e:	2161      	movs	r1, #97	; 0x61
 8003880:	4845      	ldr	r0, [pc, #276]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003882:	f00b fce3 	bl	800f24c <ILI9341_Draw_Text>

				if(pOutChan)
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d05a      	beq.n	8003942 <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800388c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2302      	movs	r3, #2
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2300      	movs	r3, #0
 8003898:	22d2      	movs	r2, #210	; 0xd2
 800389a:	21af      	movs	r1, #175	; 0xaf
 800389c:	4840      	ldr	r0, [pc, #256]	; (80039a0 <FuncMenu_DrawOutputMenu+0x8cc>)
 800389e:	f00b fcd5 	bl	800f24c <ILI9341_Draw_Text>
					char duty[10] = "";
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 80038b0:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80039a8 <FuncMenu_DrawOutputMenu+0x8d4>
 80038d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d4:	ee17 0a90 	vmov	r0, s15
 80038d8:	f7fc fe5e 	bl	8000598 <__aeabi_f2d>
 80038dc:	4603      	mov	r3, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	f107 0008 	add.w	r0, r7, #8
 80038e4:	e9cd 3400 	strd	r3, r4, [sp]
 80038e8:	4a30      	ldr	r2, [pc, #192]	; (80039ac <FuncMenu_DrawOutputMenu+0x8d8>)
 80038ea:	210a      	movs	r1, #10
 80038ec:	f00d f86a 	bl	80109c4 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038f0:	f107 0008 	add.w	r0, r7, #8
 80038f4:	2300      	movs	r3, #0
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	2302      	movs	r3, #2
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003900:	2232      	movs	r2, #50	; 0x32
 8003902:	21dc      	movs	r1, #220	; 0xdc
 8003904:	f00b fca2 	bl	800f24c <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003908:	f002 ff06 	bl	8006718 <SM_IsFuncPwmDutyMode>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003912:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	2302      	movs	r3, #2
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2300      	movs	r3, #0
 800391e:	2232      	movs	r2, #50	; 0x32
 8003920:	2196      	movs	r1, #150	; 0x96
 8003922:	4823      	ldr	r0, [pc, #140]	; (80039b0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003924:	f00b fc92 	bl	800f24c <ILI9341_Draw_Text>
 8003928:	e016      	b.n	8003958 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800392a:	2300      	movs	r3, #0
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	2302      	movs	r3, #2
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003936:	2232      	movs	r2, #50	; 0x32
 8003938:	2196      	movs	r1, #150	; 0x96
 800393a:	481d      	ldr	r0, [pc, #116]	; (80039b0 <FuncMenu_DrawOutputMenu+0x8dc>)
 800393c:	f00b fc86 	bl	800f24c <ILI9341_Draw_Text>
 8003940:	e00a      	b.n	8003958 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003942:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2302      	movs	r3, #2
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	22d2      	movs	r2, #210	; 0xd2
 8003950:	21af      	movs	r1, #175	; 0xaf
 8003952:	4811      	ldr	r0, [pc, #68]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003954:	f00b fc7a 	bl	800f24c <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003958:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	2302      	movs	r3, #2
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	22d2      	movs	r2, #210	; 0xd2
 8003966:	f44f 7182 	mov.w	r1, #260	; 0x104
 800396a:	480b      	ldr	r0, [pc, #44]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800396c:	f00b fc6e 	bl	800f24c <ILI9341_Draw_Text>

				break;
 8003970:	bf00      	nop
				//
		}
	}
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}
 800397a:	bf00      	nop
 800397c:	080144c0 	.word	0x080144c0
 8003980:	080144c8 	.word	0x080144c8
 8003984:	080144d4 	.word	0x080144d4
 8003988:	080144dc 	.word	0x080144dc
 800398c:	080144e8 	.word	0x080144e8
 8003990:	080144f4 	.word	0x080144f4
 8003994:	080144fc 	.word	0x080144fc
 8003998:	08014498 	.word	0x08014498
 800399c:	08014504 	.word	0x08014504
 80039a0:	08014514 	.word	0x08014514
 80039a4:	40000400 	.word	0x40000400
 80039a8:	42c80000 	.word	0x42c80000
 80039ac:	0801451c 	.word	0x0801451c
 80039b0:	08014524 	.word	0x08014524

080039b4 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d007      	beq.n	80039d4 <GainMenu_DrawMenu+0x20>
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d008      	beq.n	80039da <GainMenu_DrawMenu+0x26>
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d000      	beq.n	80039ce <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 80039cc:	e008      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80039ce:	f000 f80b 	bl	80039e8 <GainMenu_DrawMainMenu>
			break;
 80039d2:	e005      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80039d4:	f000 f868 	bl	8003aa8 <GainMenu_DrawSignalMenu>
			break;
 80039d8:	e002      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 80039da:	f000 f87b 	bl	8003ad4 <GainMenu_DrawAuxMenu>
			break;
 80039de:	bf00      	nop

	}
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80039ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2302      	movs	r3, #2
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	220a      	movs	r2, #10
 80039fc:	210a      	movs	r1, #10
 80039fe:	4826      	ldr	r0, [pc, #152]	; (8003a98 <GainMenu_DrawMainMenu+0xb0>)
 8003a00:	f00b fc24 	bl	800f24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a04:	f7fd fa8a 	bl	8000f1c <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a08:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2302      	movs	r3, #2
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	22d2      	movs	r2, #210	; 0xd2
 8003a16:	2105      	movs	r1, #5
 8003a18:	4820      	ldr	r0, [pc, #128]	; (8003a9c <GainMenu_DrawMainMenu+0xb4>)
 8003a1a:	f00b fc17 	bl	800f24c <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f002 fb76 	bl	8006110 <SM_GetOutputChannel>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d10b      	bne.n	8003a4c <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a34:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	22d2      	movs	r2, #210	; 0xd2
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	4816      	ldr	r0, [pc, #88]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a46:	f00b fc01 	bl	800f24c <ILI9341_Draw_Text>
 8003a4a:	e00a      	b.n	8003a62 <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a4c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	2302      	movs	r3, #2
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	22d2      	movs	r2, #210	; 0xd2
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	4811      	ldr	r0, [pc, #68]	; (8003aa4 <GainMenu_DrawMainMenu+0xbc>)
 8003a5e:	f00b fbf5 	bl	800f24c <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	22d2      	movs	r2, #210	; 0xd2
 8003a70:	21af      	movs	r1, #175	; 0xaf
 8003a72:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a74:	f00b fbea 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a78:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	2302      	movs	r3, #2
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	22d2      	movs	r2, #210	; 0xd2
 8003a86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a8c:	f00b fbde 	bl	800f24c <ILI9341_Draw_Text>
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	0801452c 	.word	0x0801452c
 8003a9c:	08014538 	.word	0x08014538
 8003aa0:	08014540 	.word	0x08014540
 8003aa4:	08014548 	.word	0x08014548

08003aa8 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	220a      	movs	r2, #10
 8003abc:	210a      	movs	r1, #10
 8003abe:	4804      	ldr	r0, [pc, #16]	; (8003ad0 <GainMenu_DrawSignalMenu+0x28>)
 8003ac0:	f00b fbc4 	bl	800f24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ac4:	f7fd fa2a 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	0801454c 	.word	0x0801454c

08003ad4 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	220a      	movs	r2, #10
 8003ae8:	210a      	movs	r1, #10
 8003aea:	4804      	ldr	r0, [pc, #16]	; (8003afc <GainMenu_DrawAuxMenu+0x28>)
 8003aec:	f00b fbae 	bl	800f24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003af0:	f7fd fa14 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	0801455c 	.word	0x0801455c

08003b00 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d007      	beq.n	8003b20 <ToplevelMenu_DrawMenu+0x20>
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d008      	beq.n	8003b26 <ToplevelMenu_DrawMenu+0x26>
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d000      	beq.n	8003b1a <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003b18:	e008      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003b1a:	f000 f80b 	bl	8003b34 <ToplevelMenu_DrawMainMenu>
			break;
 8003b1e:	e005      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003b20:	f000 f844 	bl	8003bac <ToplevelMenu_DrawOutputMenu>
			break;
 8003b24:	e002      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003b26:	f000 f88b 	bl	8003c40 <ToplevelMenu_DrawInputMenu>
			break;
 8003b2a:	bf00      	nop

	}
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003b3a:	f7fd f9ef 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b3e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2302      	movs	r3, #2
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	22d2      	movs	r2, #210	; 0xd2
 8003b4c:	2106      	movs	r1, #6
 8003b4e:	4814      	ldr	r0, [pc, #80]	; (8003ba0 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003b50:	f00b fb7c 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b54:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	22d2      	movs	r2, #210	; 0xd2
 8003b62:	215d      	movs	r1, #93	; 0x5d
 8003b64:	480f      	ldr	r0, [pc, #60]	; (8003ba4 <ToplevelMenu_DrawMainMenu+0x70>)
 8003b66:	f00b fb71 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	2302      	movs	r3, #2
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	22d2      	movs	r2, #210	; 0xd2
 8003b78:	21af      	movs	r1, #175	; 0xaf
 8003b7a:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b7c:	f00b fb66 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b80:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	2302      	movs	r3, #2
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	22d2      	movs	r2, #210	; 0xd2
 8003b8e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b92:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b94:	f00b fb5a 	bl	800f24c <ILI9341_Draw_Text>


}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	0801456c 	.word	0x0801456c
 8003ba4:	08014574 	.word	0x08014574
 8003ba8:	0801457c 	.word	0x0801457c

08003bac <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	220a      	movs	r2, #10
 8003bc0:	210a      	movs	r1, #10
 8003bc2:	481a      	ldr	r0, [pc, #104]	; (8003c2c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003bc4:	f00b fb42 	bl	800f24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bc8:	f7fd f9a8 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003bcc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	22d2      	movs	r2, #210	; 0xd2
 8003bda:	210f      	movs	r1, #15
 8003bdc:	4814      	ldr	r0, [pc, #80]	; (8003c30 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003bde:	f00b fb35 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003be2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	2302      	movs	r3, #2
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	22d2      	movs	r2, #210	; 0xd2
 8003bf0:	2162      	movs	r1, #98	; 0x62
 8003bf2:	4810      	ldr	r0, [pc, #64]	; (8003c34 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003bf4:	f00b fb2a 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003bf8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2302      	movs	r3, #2
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	22d2      	movs	r2, #210	; 0xd2
 8003c06:	21b0      	movs	r1, #176	; 0xb0
 8003c08:	480b      	ldr	r0, [pc, #44]	; (8003c38 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003c0a:	f00b fb1f 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c0e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2302      	movs	r3, #2
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	22d2      	movs	r2, #210	; 0xd2
 8003c1c:	21f5      	movs	r1, #245	; 0xf5
 8003c1e:	4807      	ldr	r0, [pc, #28]	; (8003c3c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003c20:	f00b fb14 	bl	800f24c <ILI9341_Draw_Text>
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08014584 	.word	0x08014584
 8003c30:	0801458c 	.word	0x0801458c
 8003c34:	08014594 	.word	0x08014594
 8003c38:	0801459c 	.word	0x0801459c
 8003c3c:	080145a4 	.word	0x080145a4

08003c40 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2300      	movs	r3, #0
 8003c52:	220a      	movs	r2, #10
 8003c54:	210a      	movs	r1, #10
 8003c56:	4890      	ldr	r0, [pc, #576]	; (8003e98 <ToplevelMenu_DrawInputMenu+0x258>)
 8003c58:	f00b faf8 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	2302      	movs	r3, #2
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c68:	2232      	movs	r2, #50	; 0x32
 8003c6a:	210a      	movs	r1, #10
 8003c6c:	488b      	ldr	r0, [pc, #556]	; (8003e9c <ToplevelMenu_DrawInputMenu+0x25c>)
 8003c6e:	f00b faed 	bl	800f24c <ILI9341_Draw_Text>
	if(isTriggerInputEnabled)
 8003c72:	4b8b      	ldr	r3, [pc, #556]	; (8003ea0 <ToplevelMenu_DrawInputMenu+0x260>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <ToplevelMenu_DrawInputMenu+0x68>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c7a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	2302      	movs	r3, #2
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	2232      	movs	r2, #50	; 0x32
 8003c88:	2196      	movs	r1, #150	; 0x96
 8003c8a:	4886      	ldr	r0, [pc, #536]	; (8003ea4 <ToplevelMenu_DrawInputMenu+0x264>)
 8003c8c:	f00b fade 	bl	800f24c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c90:	2300      	movs	r3, #0
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	2302      	movs	r3, #2
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c9c:	2232      	movs	r2, #50	; 0x32
 8003c9e:	21c8      	movs	r1, #200	; 0xc8
 8003ca0:	4881      	ldr	r0, [pc, #516]	; (8003ea8 <ToplevelMenu_DrawInputMenu+0x268>)
 8003ca2:	f00b fad3 	bl	800f24c <ILI9341_Draw_Text>
 8003ca6:	e015      	b.n	8003cd4 <ToplevelMenu_DrawInputMenu+0x94>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	2302      	movs	r3, #2
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003cb4:	2232      	movs	r2, #50	; 0x32
 8003cb6:	2196      	movs	r1, #150	; 0x96
 8003cb8:	487a      	ldr	r0, [pc, #488]	; (8003ea4 <ToplevelMenu_DrawInputMenu+0x264>)
 8003cba:	f00b fac7 	bl	800f24c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003cbe:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2232      	movs	r2, #50	; 0x32
 8003ccc:	21c8      	movs	r1, #200	; 0xc8
 8003cce:	4876      	ldr	r0, [pc, #472]	; (8003ea8 <ToplevelMenu_DrawInputMenu+0x268>)
 8003cd0:	f00b fabc 	bl	800f24c <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	2302      	movs	r3, #2
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ce0:	2246      	movs	r2, #70	; 0x46
 8003ce2:	210a      	movs	r1, #10
 8003ce4:	4871      	ldr	r0, [pc, #452]	; (8003eac <ToplevelMenu_DrawInputMenu+0x26c>)
 8003ce6:	f00b fab1 	bl	800f24c <ILI9341_Draw_Text>
	if(activeInputerTriggerMode == INPUT_TRIGGER_TIM)
 8003cea:	4b71      	ldr	r3, [pc, #452]	; (8003eb0 <ToplevelMenu_DrawInputMenu+0x270>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d12d      	bne.n	8003d4e <ToplevelMenu_DrawInputMenu+0x10e>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003cf2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2246      	movs	r2, #70	; 0x46
 8003d00:	2196      	movs	r1, #150	; 0x96
 8003d02:	486c      	ldr	r0, [pc, #432]	; (8003eb4 <ToplevelMenu_DrawInputMenu+0x274>)
 8003d04:	f00b faa2 	bl	800f24c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d14:	2246      	movs	r2, #70	; 0x46
 8003d16:	21c8      	movs	r1, #200	; 0xc8
 8003d18:	4867      	ldr	r0, [pc, #412]	; (8003eb8 <ToplevelMenu_DrawInputMenu+0x278>)
 8003d1a:	f00b fa97 	bl	800f24c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	2302      	movs	r3, #2
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d2a:	2246      	movs	r2, #70	; 0x46
 8003d2c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003d30:	4862      	ldr	r0, [pc, #392]	; (8003ebc <ToplevelMenu_DrawInputMenu+0x27c>)
 8003d32:	f00b fa8b 	bl	800f24c <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d36:	2300      	movs	r3, #0
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d42:	2264      	movs	r2, #100	; 0x64
 8003d44:	2196      	movs	r1, #150	; 0x96
 8003d46:	485e      	ldr	r0, [pc, #376]	; (8003ec0 <ToplevelMenu_DrawInputMenu+0x280>)
 8003d48:	f00b fa80 	bl	800f24c <ILI9341_Draw_Text>
 8003d4c:	e074      	b.n	8003e38 <ToplevelMenu_DrawInputMenu+0x1f8>
	}
	else if(activeInputerTriggerMode == INPUT_TRIGGER_COMP)
 8003d4e:	4b58      	ldr	r3, [pc, #352]	; (8003eb0 <ToplevelMenu_DrawInputMenu+0x270>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d13f      	bne.n	8003dd6 <ToplevelMenu_DrawInputMenu+0x196>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d56:	2300      	movs	r3, #0
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d62:	2246      	movs	r2, #70	; 0x46
 8003d64:	2196      	movs	r1, #150	; 0x96
 8003d66:	4853      	ldr	r0, [pc, #332]	; (8003eb4 <ToplevelMenu_DrawInputMenu+0x274>)
 8003d68:	f00b fa70 	bl	800f24c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d6c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	2302      	movs	r3, #2
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	2300      	movs	r3, #0
 8003d78:	2246      	movs	r2, #70	; 0x46
 8003d7a:	21c8      	movs	r1, #200	; 0xc8
 8003d7c:	484e      	ldr	r0, [pc, #312]	; (8003eb8 <ToplevelMenu_DrawInputMenu+0x278>)
 8003d7e:	f00b fa65 	bl	800f24c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d82:	2300      	movs	r3, #0
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	2302      	movs	r3, #2
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d8e:	2246      	movs	r2, #70	; 0x46
 8003d90:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003d94:	4849      	ldr	r0, [pc, #292]	; (8003ebc <ToplevelMenu_DrawInputMenu+0x27c>)
 8003d96:	f00b fa59 	bl	800f24c <ILI9341_Draw_Text>

		char comp_text[20] = "";
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	609a      	str	r2, [r3, #8]
 8003daa:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8003dac:	4845      	ldr	r0, [pc, #276]	; (8003ec4 <ToplevelMenu_DrawInputMenu+0x284>)
 8003dae:	f006 fc73 	bl	800a698 <HAL_COMP_GetOutputLevel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	1d38      	adds	r0, r7, #4
 8003db6:	4a44      	ldr	r2, [pc, #272]	; (8003ec8 <ToplevelMenu_DrawInputMenu+0x288>)
 8003db8:	2114      	movs	r1, #20
 8003dba:	f00c fe03 	bl	80109c4 <sniprintf>


		ILI9341_Draw_Text(comp_text, 150, 100,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003dbe:	1d38      	adds	r0, r7, #4
 8003dc0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2264      	movs	r2, #100	; 0x64
 8003dce:	2196      	movs	r1, #150	; 0x96
 8003dd0:	f00b fa3c 	bl	800f24c <ILI9341_Draw_Text>
 8003dd4:	e030      	b.n	8003e38 <ToplevelMenu_DrawInputMenu+0x1f8>
	}
	else if(activeInputerTriggerMode == INPUT_TRIGGER_ADC)
 8003dd6:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <ToplevelMenu_DrawInputMenu+0x270>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d12c      	bne.n	8003e38 <ToplevelMenu_DrawInputMenu+0x1f8>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003dde:	2300      	movs	r3, #0
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	2302      	movs	r3, #2
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003dea:	2246      	movs	r2, #70	; 0x46
 8003dec:	2196      	movs	r1, #150	; 0x96
 8003dee:	4831      	ldr	r0, [pc, #196]	; (8003eb4 <ToplevelMenu_DrawInputMenu+0x274>)
 8003df0:	f00b fa2c 	bl	800f24c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003df4:	2300      	movs	r3, #0
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2302      	movs	r3, #2
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e00:	2246      	movs	r2, #70	; 0x46
 8003e02:	21c8      	movs	r1, #200	; 0xc8
 8003e04:	482c      	ldr	r0, [pc, #176]	; (8003eb8 <ToplevelMenu_DrawInputMenu+0x278>)
 8003e06:	f00b fa21 	bl	800f24c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e0a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	2302      	movs	r3, #2
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2300      	movs	r3, #0
 8003e16:	2246      	movs	r2, #70	; 0x46
 8003e18:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003e1c:	4827      	ldr	r0, [pc, #156]	; (8003ebc <ToplevelMenu_DrawInputMenu+0x27c>)
 8003e1e:	f00b fa15 	bl	800f24c <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e22:	2300      	movs	r3, #0
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	2302      	movs	r3, #2
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e2e:	2264      	movs	r2, #100	; 0x64
 8003e30:	2196      	movs	r1, #150	; 0x96
 8003e32:	4823      	ldr	r0, [pc, #140]	; (8003ec0 <ToplevelMenu_DrawInputMenu+0x280>)
 8003e34:	f00b fa0a 	bl	800f24c <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003e38:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	2302      	movs	r3, #2
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2300      	movs	r3, #0
 8003e44:	22cc      	movs	r2, #204	; 0xcc
 8003e46:	2114      	movs	r1, #20
 8003e48:	4820      	ldr	r0, [pc, #128]	; (8003ecc <ToplevelMenu_DrawInputMenu+0x28c>)
 8003e4a:	f00b f9ff 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003e4e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	2302      	movs	r3, #2
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	22de      	movs	r2, #222	; 0xde
 8003e5c:	2114      	movs	r1, #20
 8003e5e:	481c      	ldr	r0, [pc, #112]	; (8003ed0 <ToplevelMenu_DrawInputMenu+0x290>)
 8003e60:	f00b f9f4 	bl	800f24c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e64:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	22cc      	movs	r2, #204	; 0xcc
 8003e72:	2168      	movs	r1, #104	; 0x68
 8003e74:	4817      	ldr	r0, [pc, #92]	; (8003ed4 <ToplevelMenu_DrawInputMenu+0x294>)
 8003e76:	f00b f9e9 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e7a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	2302      	movs	r3, #2
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	2300      	movs	r3, #0
 8003e86:	22de      	movs	r2, #222	; 0xde
 8003e88:	2161      	movs	r1, #97	; 0x61
 8003e8a:	4813      	ldr	r0, [pc, #76]	; (8003ed8 <ToplevelMenu_DrawInputMenu+0x298>)
 8003e8c:	f00b f9de 	bl	800f24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 8003e90:	bf00      	nop
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	080145ac 	.word	0x080145ac
 8003e9c:	080145b4 	.word	0x080145b4
 8003ea0:	20001e59 	.word	0x20001e59
 8003ea4:	080145c0 	.word	0x080145c0
 8003ea8:	080145c4 	.word	0x080145c4
 8003eac:	080145c8 	.word	0x080145c8
 8003eb0:	20001e5a 	.word	0x20001e5a
 8003eb4:	080145d0 	.word	0x080145d0
 8003eb8:	080145d4 	.word	0x080145d4
 8003ebc:	080145dc 	.word	0x080145dc
 8003ec0:	080145e0 	.word	0x080145e0
 8003ec4:	200027e8 	.word	0x200027e8
 8003ec8:	080145e8 	.word	0x080145e8
 8003ecc:	080145f0 	.word	0x080145f0
 8003ed0:	080145f4 	.word	0x080145f4
 8003ed4:	080145fc 	.word	0x080145fc
 8003ed8:	08014600 	.word	0x08014600

08003edc <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <BiasMenu_getStatus+0x14>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20001e51 	.word	0x20001e51

08003ef4 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8003ef8:	f7fd fad0 	bl	800149c <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <BiasMenuEntryHandler+0x30>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <BiasMenuEntryHandler+0x34>)
 8003f04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f08:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003f0a:	f001 f98d 	bl	8005228 <BO_GetDcBiasEncoderValue>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <BiasMenuEntryHandler+0x34>)
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <BiasMenuEntryHandler+0x38>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003f1c:	230e      	movs	r3, #14
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20001e51 	.word	0x20001e51
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	20001e53 	.word	0x20001e53

08003f30 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8003f34:	2000      	movs	r0, #0
 8003f36:	f002 fb67 	bl	8006608 <SM_GetEncoderValue>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f97f 	bl	8005240 <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003f42:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <BiasMenuInputHandler+0x20>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003f48:	230e      	movs	r3, #14
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20001e53 	.word	0x20001e53

08003f54 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <BiasMenuExitHandler+0x1c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003f5e:	f7fd fa9d 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <BiasMenuExitHandler+0x20>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003f68:	2301      	movs	r3, #1
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20001e51 	.word	0x20001e51
 8003f74:	20001e53 	.word	0x20001e53

08003f78 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003f7e:	4baa      	ldr	r3, [pc, #680]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b0e      	cmp	r3, #14
 8003f84:	f200 8206 	bhi.w	8004394 <EM_ProcessEvent+0x41c>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <EM_ProcessEvent+0x18>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fcd 	.word	0x08003fcd
 8003f94:	08003ff9 	.word	0x08003ff9
 8003f98:	08004079 	.word	0x08004079
 8003f9c:	080040c5 	.word	0x080040c5
 8003fa0:	08004105 	.word	0x08004105
 8003fa4:	08004131 	.word	0x08004131
 8003fa8:	08004171 	.word	0x08004171
 8003fac:	080041cf 	.word	0x080041cf
 8003fb0:	080041fb 	.word	0x080041fb
 8003fb4:	08004395 	.word	0x08004395
 8003fb8:	08004231 	.word	0x08004231
 8003fbc:	0800428b 	.word	0x0800428b
 8003fc0:	080042b7 	.word	0x080042b7
 8003fc4:	080042e1 	.word	0x080042e1
 8003fc8:	08004365 	.word	0x08004365

			#ifdef EVENT_MENU_DEBUG
			  printf("Idle_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 8003fcc:	4b97      	ldr	r3, [pc, #604]	; (800422c <EM_ProcessEvent+0x2b4>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <EM_ProcessEvent+0x68>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003fd4:	f000 fe24 	bl	8004c20 <ToplevelOutputMenuEntryHandler>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b92      	ldr	r3, [pc, #584]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8003fde:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003fe0:	4b92      	ldr	r3, [pc, #584]	; (800422c <EM_ProcessEvent+0x2b4>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	f040 81d7 	bne.w	8004398 <EM_ProcessEvent+0x420>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003fea:	f000 fe3d 	bl	8004c68 <ToplevelInputMenuEntryHandler>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b8d      	ldr	r3, [pc, #564]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8003ff4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003ff6:	e1cf      	b.n	8004398 <EM_ProcessEvent+0x420>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Output_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8003ff8:	4b8c      	ldr	r3, [pc, #560]	; (800422c <EM_ProcessEvent+0x2b4>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b06      	cmp	r3, #6
 8003ffe:	d105      	bne.n	800400c <EM_ProcessEvent+0x94>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8004000:	f000 fe20 	bl	8004c44 <ToplevelOutputMenuExitHandler>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	4b87      	ldr	r3, [pc, #540]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800400a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 800400c:	4b87      	ldr	r3, [pc, #540]	; (800422c <EM_ProcessEvent+0x2b4>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d108      	bne.n	8004026 <EM_ProcessEvent+0xae>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004014:	2000      	movs	r0, #0
 8004016:	f000 fdf3 	bl	8004c00 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 800401a:	f000 fc09 	bl	8004830 <FuncMainMenuEntryHandler>
 800401e:	4603      	mov	r3, r0
 8004020:	461a      	mov	r2, r3
 8004022:	4b81      	ldr	r3, [pc, #516]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004024:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004026:	4b81      	ldr	r3, [pc, #516]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d108      	bne.n	8004040 <EM_ProcessEvent+0xc8>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800402e:	2000      	movs	r0, #0
 8004030:	f000 fde6 	bl	8004c00 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8004034:	f000 fb30 	bl	8004698 <FreqMainMenuEntryHandler>
 8004038:	4603      	mov	r3, r0
 800403a:	461a      	mov	r2, r3
 800403c:	4b7a      	ldr	r3, [pc, #488]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800403e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8004040:	4b7a      	ldr	r3, [pc, #488]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d108      	bne.n	800405a <EM_ProcessEvent+0xe2>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004048:	2000      	movs	r0, #0
 800404a:	f000 fdd9 	bl	8004c00 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 800404e:	f000 fce5 	bl	8004a1c <GainMainMenuEntryHandler>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	4b74      	ldr	r3, [pc, #464]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004058:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 800405a:	4b74      	ldr	r3, [pc, #464]	; (800422c <EM_ProcessEvent+0x2b4>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b04      	cmp	r3, #4
 8004060:	f040 819c 	bne.w	800439c <EM_ProcessEvent+0x424>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004064:	2000      	movs	r0, #0
 8004066:	f000 fdcb 	bl	8004c00 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 800406a:	f7ff ff43 	bl	8003ef4 <BiasMenuEntryHandler>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	4b6d      	ldr	r3, [pc, #436]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004074:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004076:	e191      	b.n	800439c <EM_ProcessEvent+0x424>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Input_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8004078:	4b6c      	ldr	r3, [pc, #432]	; (800422c <EM_ProcessEvent+0x2b4>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b06      	cmp	r3, #6
 800407e:	d105      	bne.n	800408c <EM_ProcessEvent+0x114>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8004080:	f000 ff40 	bl	8004f04 <ToplevelInputMenuExitHandler>
 8004084:	4603      	mov	r3, r0
 8004086:	461a      	mov	r2, r3
 8004088:	4b67      	ldr	r3, [pc, #412]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800408a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 800408c:	4b67      	ldr	r3, [pc, #412]	; (800422c <EM_ProcessEvent+0x2b4>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d108      	bne.n	80040a6 <EM_ProcessEvent+0x12e>
			{
				eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004094:	4b65      	ldr	r3, [pc, #404]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fdf7 	bl	8004c8c <ToplevelInputMenuInputHandler>
 800409e:	4603      	mov	r3, r0
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b61      	ldr	r3, [pc, #388]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80040a4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80040a6:	4b61      	ldr	r3, [pc, #388]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f040 8178 	bne.w	80043a0 <EM_ProcessEvent+0x428>
			{

				eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 80040b0:	4b5e      	ldr	r3, [pc, #376]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fde9 	bl	8004c8c <ToplevelInputMenuInputHandler>
 80040ba:	4603      	mov	r3, r0
 80040bc:	461a      	mov	r2, r3
 80040be:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80040c0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80040c2:	e16d      	b.n	80043a0 <EM_ProcessEvent+0x428>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80040c4:	4b59      	ldr	r3, [pc, #356]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d105      	bne.n	80040d8 <EM_ProcessEvent+0x160>
			{
				eNextState = FuncMainMenuExitHandler();
 80040cc:	f000 fbc2 	bl	8004854 <FuncMainMenuExitHandler>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b54      	ldr	r3, [pc, #336]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80040d6:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evBlueBtn)
 80040d8:	4b54      	ldr	r3, [pc, #336]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <EM_ProcessEvent+0x174>
			{
				eNextState = FuncSignalMenuEntryHandler();
 80040e0:	f000 fbcc 	bl	800487c <FuncSignalMenuEntryHandler>
 80040e4:	4603      	mov	r3, r0
 80040e6:	461a      	mov	r2, r3
 80040e8:	4b4f      	ldr	r3, [pc, #316]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80040ea:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80040ec:	4b4f      	ldr	r3, [pc, #316]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	f040 8157 	bne.w	80043a4 <EM_ProcessEvent+0x42c>
			{
				eNextState = FuncAuxMenuEntryHandler();
 80040f6:	f000 fc05 	bl	8004904 <FuncAuxMenuEntryHandler>
 80040fa:	4603      	mov	r3, r0
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b4a      	ldr	r3, [pc, #296]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004100:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004102:	e14f      	b.n	80043a4 <EM_ProcessEvent+0x42c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004104:	4b49      	ldr	r3, [pc, #292]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b05      	cmp	r3, #5
 800410a:	d105      	bne.n	8004118 <EM_ProcessEvent+0x1a0>
			{
				eNextState = FuncSignalMenuInputHandler();
 800410c:	f000 fbd4 	bl	80048b8 <FuncSignalMenuInputHandler>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	4b44      	ldr	r3, [pc, #272]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004116:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004118:	4b44      	ldr	r3, [pc, #272]	; (800422c <EM_ProcessEvent+0x2b4>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b06      	cmp	r3, #6
 800411e:	f040 8143 	bne.w	80043a8 <EM_ProcessEvent+0x430>
			{
				eNextState = FuncSignalMenuExitHandler();
 8004122:	f000 fbdb 	bl	80048dc <FuncSignalMenuExitHandler>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800412c:	701a      	strb	r2, [r3, #0]
			}


			break;
 800412e:	e13b      	b.n	80043a8 <EM_ProcessEvent+0x430>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b05      	cmp	r3, #5
 8004136:	d105      	bne.n	8004144 <EM_ProcessEvent+0x1cc>
			{
				eNextState = FuncAuxMenuInputHandler();
 8004138:	f000 fc02 	bl	8004940 <FuncAuxMenuInputHandler>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	4b39      	ldr	r3, [pc, #228]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004142:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004144:	4b39      	ldr	r3, [pc, #228]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b06      	cmp	r3, #6
 800414a:	d105      	bne.n	8004158 <EM_ProcessEvent+0x1e0>
			{
				eNextState = FuncAuxMenuExitHandler();
 800414c:	f000 fc46 	bl	80049dc <FuncAuxMenuExitHandler>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	4b34      	ldr	r3, [pc, #208]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004156:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8004158:	4b34      	ldr	r3, [pc, #208]	; (800422c <EM_ProcessEvent+0x2b4>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b03      	cmp	r3, #3
 800415e:	f040 8125 	bne.w	80043ac <EM_ProcessEvent+0x434>
			{
				eNextState = FuncAuxToggleDutyMode();
 8004162:	f000 fc29 	bl	80049b8 <FuncAuxToggleDutyMode>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800416c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800416e:	e11d      	b.n	80043ac <EM_ProcessEvent+0x434>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8004170:	4b2e      	ldr	r3, [pc, #184]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b06      	cmp	r3, #6
 8004176:	d108      	bne.n	800418a <EM_ProcessEvent+0x212>
			{
				eNextState = GainMainMenuExitHandler();
 8004178:	f000 fc62 	bl	8004a40 <GainMainMenuExitHandler>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	4b29      	ldr	r3, [pc, #164]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004182:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004184:	2002      	movs	r0, #2
 8004186:	f000 fd3b 	bl	8004c00 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 800418a:	4b28      	ldr	r3, [pc, #160]	; (800422c <EM_ProcessEvent+0x2b4>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <EM_ProcessEvent+0x226>
			{
				eNextState = GainSignalMenuEntryHandler();
 8004192:	f000 fc67 	bl	8004a64 <GainSignalMenuEntryHandler>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	4b23      	ldr	r3, [pc, #140]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800419c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <EM_ProcessEvent+0x2b4>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	f040 8104 	bne.w	80043b0 <EM_ProcessEvent+0x438>
			{
				eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80041a8:	2001      	movs	r0, #1
 80041aa:	f001 ffb1 	bl	8006110 <SM_GetOutputChannel>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	71fb      	strb	r3, [r7, #7]
				if(aux_output_func != PWM_FUNC_MODE)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	f000 80f8 	beq.w	80043b0 <EM_ProcessEvent+0x438>
					eNextState = GainAuxMenuEntryHandler();
 80041c0:	f000 fcbe 	bl	8004b40 <GainAuxMenuEntryHandler>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80041ca:	701a      	strb	r2, [r3, #0]
			}

			break;
 80041cc:	e0f0      	b.n	80043b0 <EM_ProcessEvent+0x438>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80041ce:	4b17      	ldr	r3, [pc, #92]	; (800422c <EM_ProcessEvent+0x2b4>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d105      	bne.n	80041e2 <EM_ProcessEvent+0x26a>
			{
				eNextState = GainSignalMenuInputHandler();
 80041d6:	f000 fc77 	bl	8004ac8 <GainSignalMenuInputHandler>
 80041da:	4603      	mov	r3, r0
 80041dc:	461a      	mov	r2, r3
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80041e0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <EM_ProcessEvent+0x2b4>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b06      	cmp	r3, #6
 80041e8:	f040 80e4 	bne.w	80043b4 <EM_ProcessEvent+0x43c>
			{
				eNextState = GainSignalMenuExitHandler();
 80041ec:	f000 fc96 	bl	8004b1c <GainSignalMenuExitHandler>
 80041f0:	4603      	mov	r3, r0
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80041f6:	701a      	strb	r2, [r3, #0]
			}

			break;
 80041f8:	e0dc      	b.n	80043b4 <EM_ProcessEvent+0x43c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <EM_ProcessEvent+0x2b4>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d105      	bne.n	800420e <EM_ProcessEvent+0x296>
			{
				eNextState = GainAuxMenuInputHandler();
 8004202:	f000 fccd 	bl	8004ba0 <GainAuxMenuInputHandler>
 8004206:	4603      	mov	r3, r0
 8004208:	461a      	mov	r2, r3
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800420c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b06      	cmp	r3, #6
 8004214:	f040 80d0 	bne.w	80043b8 <EM_ProcessEvent+0x440>
			{
				eNextState = GainAuxMenuExitHandler();
 8004218:	f000 fcd4 	bl	8004bc4 <GainAuxMenuExitHandler>
 800421c:	4603      	mov	r3, r0
 800421e:	461a      	mov	r2, r3
 8004220:	4b01      	ldr	r3, [pc, #4]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004222:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004224:	e0c8      	b.n	80043b8 <EM_ProcessEvent+0x440>
 8004226:	bf00      	nop
 8004228:	20001e52 	.word	0x20001e52
 800422c:	20001e53 	.word	0x20001e53

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Main_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8004230:	4b69      	ldr	r3, [pc, #420]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b06      	cmp	r3, #6
 8004236:	d108      	bne.n	800424a <EM_ProcessEvent+0x2d2>
			{
				eNextState = FreqMainMenuExitHandler();
 8004238:	f000 fa40 	bl	80046bc <FreqMainMenuExitHandler>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	4b66      	ldr	r3, [pc, #408]	; (80043dc <EM_ProcessEvent+0x464>)
 8004242:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004244:	2002      	movs	r0, #2
 8004246:	f000 fcdb 	bl	8004c00 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <EM_ProcessEvent+0x460>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d105      	bne.n	800425e <EM_ProcessEvent+0x2e6>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8004252:	f000 fa4b 	bl	80046ec <FreqPresetMenuEntryHandler>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	4b60      	ldr	r3, [pc, #384]	; (80043dc <EM_ProcessEvent+0x464>)
 800425c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800425e:	4b5e      	ldr	r3, [pc, #376]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d105      	bne.n	8004272 <EM_ProcessEvent+0x2fa>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8004266:	f000 fa91 	bl	800478c <FreqAdjustMenuEntryHandler>
 800426a:	4603      	mov	r3, r0
 800426c:	461a      	mov	r2, r3
 800426e:	4b5b      	ldr	r3, [pc, #364]	; (80043dc <EM_ProcessEvent+0x464>)
 8004270:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8004272:	4b59      	ldr	r3, [pc, #356]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b03      	cmp	r3, #3
 8004278:	f040 80a0 	bne.w	80043bc <EM_ProcessEvent+0x444>
			{
				eNextState = FreqSweepMenuEntryHandler();
 800427c:	f000 f8c0 	bl	8004400 <FreqSweepMenuEntryHandler>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	4b55      	ldr	r3, [pc, #340]	; (80043dc <EM_ProcessEvent+0x464>)
 8004286:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004288:	e098      	b.n	80043bc <EM_ProcessEvent+0x444>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Preset_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <EM_ProcessEvent+0x460>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b05      	cmp	r3, #5
 8004290:	d105      	bne.n	800429e <EM_ProcessEvent+0x326>
			{
				eNextState = FreqPresetMenuInputHandler();
 8004292:	f000 fa57 	bl	8004744 <FreqPresetMenuInputHandler>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	4b50      	ldr	r3, [pc, #320]	; (80043dc <EM_ProcessEvent+0x464>)
 800429c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800429e:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	f040 808c 	bne.w	80043c0 <EM_ProcessEvent+0x448>
			{
				eNextState = FreqPresetMenuExitHandler();
 80042a8:	f000 fa5e 	bl	8004768 <FreqPresetMenuExitHandler>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	4b4a      	ldr	r3, [pc, #296]	; (80043dc <EM_ProcessEvent+0x464>)
 80042b2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80042b4:	e084      	b.n	80043c0 <EM_ProcessEvent+0x448>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Adjust_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80042b6:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d105      	bne.n	80042ca <EM_ProcessEvent+0x352>
			{
				eNextState = FreqAdjustMenuInputHandler();
 80042be:	f000 fa81 	bl	80047c4 <FreqAdjustMenuInputHandler>
 80042c2:	4603      	mov	r3, r0
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b45      	ldr	r3, [pc, #276]	; (80043dc <EM_ProcessEvent+0x464>)
 80042c8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80042ca:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d178      	bne.n	80043c4 <EM_ProcessEvent+0x44c>
			{
				eNextState = FreqAdjustMenuExitHandler();
 80042d2:	f000 fa83 	bl	80047dc <FreqAdjustMenuExitHandler>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	4b40      	ldr	r3, [pc, #256]	; (80043dc <EM_ProcessEvent+0x464>)
 80042dc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80042de:	e071      	b.n	80043c4 <EM_ProcessEvent+0x44c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Sweep_Menu_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 80042e0:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d106      	bne.n	80042f6 <EM_ProcessEvent+0x37e>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 80042e8:	2007      	movs	r0, #7
 80042ea:	f000 f8df 	bl	80044ac <FreqSweepMenuInputHandler>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	4b3a      	ldr	r3, [pc, #232]	; (80043dc <EM_ProcessEvent+0x464>)
 80042f4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d106      	bne.n	800430c <EM_ProcessEvent+0x394>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 80042fe:	2008      	movs	r0, #8
 8004300:	f000 f8d4 	bl	80044ac <FreqSweepMenuInputHandler>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	4b34      	ldr	r3, [pc, #208]	; (80043dc <EM_ProcessEvent+0x464>)
 800430a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 800430c:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <EM_ProcessEvent+0x460>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d106      	bne.n	8004322 <EM_ProcessEvent+0x3aa>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004314:	2009      	movs	r0, #9
 8004316:	f000 f8c9 	bl	80044ac <FreqSweepMenuInputHandler>
 800431a:	4603      	mov	r3, r0
 800431c:	461a      	mov	r2, r3
 800431e:	4b2f      	ldr	r3, [pc, #188]	; (80043dc <EM_ProcessEvent+0x464>)
 8004320:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8004322:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d106      	bne.n	8004338 <EM_ProcessEvent+0x3c0>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 800432a:	200a      	movs	r0, #10
 800432c:	f000 f8be 	bl	80044ac <FreqSweepMenuInputHandler>
 8004330:	4603      	mov	r3, r0
 8004332:	461a      	mov	r2, r3
 8004334:	4b29      	ldr	r3, [pc, #164]	; (80043dc <EM_ProcessEvent+0x464>)
 8004336:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <EM_ProcessEvent+0x460>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b05      	cmp	r3, #5
 800433e:	d106      	bne.n	800434e <EM_ProcessEvent+0x3d6>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8004340:	200b      	movs	r0, #11
 8004342:	f000 f8b3 	bl	80044ac <FreqSweepMenuInputHandler>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <EM_ProcessEvent+0x464>)
 800434c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b06      	cmp	r3, #6
 8004354:	d138      	bne.n	80043c8 <EM_ProcessEvent+0x450>
			{
				eNextState = FreqSweepMenuExitHandler();
 8004356:	f000 f97f 	bl	8004658 <FreqSweepMenuExitHandler>
 800435a:	4603      	mov	r3, r0
 800435c:	461a      	mov	r2, r3
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <EM_ProcessEvent+0x464>)
 8004360:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004362:	e031      	b.n	80043c8 <EM_ProcessEvent+0x450>

			#ifdef EVENT_MENU_DEBUG
				  printf("Bias_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d105      	bne.n	8004378 <EM_ProcessEvent+0x400>
			{
				eNextState = BiasMenuInputHandler();
 800436c:	f7ff fde0 	bl	8003f30 <BiasMenuInputHandler>
 8004370:	4603      	mov	r3, r0
 8004372:	461a      	mov	r2, r3
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <EM_ProcessEvent+0x464>)
 8004376:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <EM_ProcessEvent+0x460>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b06      	cmp	r3, #6
 800437e:	d125      	bne.n	80043cc <EM_ProcessEvent+0x454>
			{
				eNextState = BiasMenuExitHandler();
 8004380:	f7ff fde8 	bl	8003f54 <BiasMenuExitHandler>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <EM_ProcessEvent+0x464>)
 800438a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800438c:	2002      	movs	r0, #2
 800438e:	f000 fc37 	bl	8004c00 <ToplevelMenu_setStatus>
			}

			break;
 8004392:	e01b      	b.n	80043cc <EM_ProcessEvent+0x454>

		default:
			break;
 8004394:	bf00      	nop
 8004396:	e01a      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 8004398:	bf00      	nop
 800439a:	e018      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 800439c:	bf00      	nop
 800439e:	e016      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043a0:	bf00      	nop
 80043a2:	e014      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043a4:	bf00      	nop
 80043a6:	e012      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043a8:	bf00      	nop
 80043aa:	e010      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043ac:	bf00      	nop
 80043ae:	e00e      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043b0:	bf00      	nop
 80043b2:	e00c      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043b4:	bf00      	nop
 80043b6:	e00a      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043b8:	bf00      	nop
 80043ba:	e008      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043bc:	bf00      	nop
 80043be:	e006      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043c0:	bf00      	nop
 80043c2:	e004      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043c4:	bf00      	nop
 80043c6:	e002      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043cc:	bf00      	nop
	}

}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20001e53 	.word	0x20001e53
 80043dc:	20001e52 	.word	0x20001e52

080043e0 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80043ea:	4a04      	ldr	r2, [pc, #16]	; (80043fc <EM_SetNewEvent+0x1c>)
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	7013      	strb	r3, [r2, #0]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20001e53 	.word	0x20001e53

08004400 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004404:	f7fd f84a 	bl	800149c <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <FreqSweepMenuEntryHandler+0x98>)
 8004418:	edd3 7a00 	vldr	s15, [r3]
 800441c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	d009      	beq.n	800443a <FreqSweepMenuEntryHandler+0x3a>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <FreqSweepMenuEntryHandler+0x98>)
 8004436:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <FreqSweepMenuEntryHandler+0x98>)
 800443c:	edd3 7a00 	vldr	s15, [r3]
 8004440:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004444:	eef4 7a47 	vcmp.f32	s15, s14
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	d101      	bne.n	8004452 <FreqSweepMenuEntryHandler+0x52>
	{
		FS_SetSweepModeDown();
 800444e:	f001 f8f7 	bl	8005640 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004452:	2000      	movs	r0, #0
 8004454:	f001 f94a 	bl	80056ec <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004458:	2000      	movs	r0, #0
 800445a:	f001 f9a5 	bl	80057a8 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 800445e:	f001 f9df 	bl	8005820 <FS_GetCalculatedSweepFrequencyInHertz>
 8004462:	eef0 7a40 	vmov.f32	s15, s0
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <FreqSweepMenuEntryHandler+0x9c>)
 8004468:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <FreqSweepMenuEntryHandler+0xa0>)
 800446e:	2200      	movs	r2, #0
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004472:	2009      	movs	r0, #9
 8004474:	f000 f81a 	bl	80044ac <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <FreqSweepMenuEntryHandler+0xa0>)
 800447a:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800447e:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <FreqSweepMenuEntryHandler+0xa0>)
 8004482:	2200      	movs	r2, #0
 8004484:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <FreqSweepMenuEntryHandler+0xa4>)
 8004488:	2204      	movs	r2, #4
 800448a:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <FreqSweepMenuEntryHandler+0xa8>)
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004492:	230d      	movs	r3, #13
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000124 	.word	0x20000124
 800449c:	2000208c 	.word	0x2000208c
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	20001e56 	.word	0x20001e56
 80044a8:	20001e53 	.word	0x20001e53

080044ac <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	3b07      	subs	r3, #7
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	f200 80b2 	bhi.w	8004624 <FreqSweepMenuInputHandler+0x178>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <FreqSweepMenuInputHandler+0x1c>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044dd 	.word	0x080044dd
 80044cc:	080044f7 	.word	0x080044f7
 80044d0:	08004615 	.word	0x08004615
 80044d4:	0800461d 	.word	0x0800461d
 80044d8:	08004531 	.word	0x08004531
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 80044dc:	4b56      	ldr	r3, [pc, #344]	; (8004638 <FreqSweepMenuInputHandler+0x18c>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a55      	ldr	r2, [pc, #340]	; (8004638 <FreqSweepMenuInputHandler+0x18c>)
 80044e2:	f083 0301 	eor.w	r3, r3, #1
 80044e6:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 80044e8:	4b53      	ldr	r3, [pc, #332]	; (8004638 <FreqSweepMenuInputHandler+0x18c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a52      	ldr	r2, [pc, #328]	; (8004638 <FreqSweepMenuInputHandler+0x18c>)
 80044ee:	f083 0301 	eor.w	r3, r3, #1
 80044f2:	6013      	str	r3, [r2, #0]
			break;
 80044f4:	e097      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 80044f6:	4b51      	ldr	r3, [pc, #324]	; (800463c <FreqSweepMenuInputHandler+0x190>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	4b4e      	ldr	r3, [pc, #312]	; (800463c <FreqSweepMenuInputHandler+0x190>)
 8004502:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004504:	4b4d      	ldr	r3, [pc, #308]	; (800463c <FreqSweepMenuInputHandler+0x190>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d004      	beq.n	8004516 <FreqSweepMenuInputHandler+0x6a>
 800450c:	2b02      	cmp	r3, #2
 800450e:	d008      	beq.n	8004522 <FreqSweepMenuInputHandler+0x76>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <FreqSweepMenuInputHandler+0x70>
 8004514:	e006      	b.n	8004524 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 8004516:	f001 f893 	bl	8005640 <FS_SetSweepModeDown>
					break;
 800451a:	e003      	b.n	8004524 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 800451c:	f001 f8be 	bl	800569c <FS_SetSweepModeUp>
					break;
 8004520:	e000      	b.n	8004524 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8004522:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004524:	4b46      	ldr	r3, [pc, #280]	; (8004640 <FreqSweepMenuInputHandler+0x194>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f001 f8df 	bl	80056ec <FS_SetEncoderControlMode>

			break;
 800452e:	e07a      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004530:	4b43      	ldr	r3, [pc, #268]	; (8004640 <FreqSweepMenuInputHandler+0x194>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <FreqSweepMenuInputHandler+0x92>
 8004538:	2b01      	cmp	r3, #1
 800453a:	d00b      	beq.n	8004554 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 800453c:	e073      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 800453e:	2000      	movs	r0, #0
 8004540:	f001 f932 	bl	80057a8 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004544:	f001 f96c 	bl	8005820 <FS_GetCalculatedSweepFrequencyInHertz>
 8004548:	eef0 7a40 	vmov.f32	s15, s0
 800454c:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <FreqSweepMenuInputHandler+0x198>)
 800454e:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004552:	e05e      	b.n	8004612 <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <FreqSweepMenuInputHandler+0x190>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <FreqSweepMenuInputHandler+0xb6>
 800455c:	2b01      	cmp	r3, #1
 800455e:	d02a      	beq.n	80045b6 <FreqSweepMenuInputHandler+0x10a>
							break;
 8004560:	e056      	b.n	8004610 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004562:	4b39      	ldr	r3, [pc, #228]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b0c      	cmp	r3, #12
 8004568:	d803      	bhi.n	8004572 <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 800456c:	220d      	movs	r2, #13
 800456e:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004570:	e04e      	b.n	8004610 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004572:	4b35      	ldr	r3, [pc, #212]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800457e:	4b33      	ldr	r3, [pc, #204]	; (800464c <FreqSweepMenuInputHandler+0x1a0>)
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	dd09      	ble.n	80045a2 <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 800458e:	4b2f      	ldr	r3, [pc, #188]	; (800464c <FreqSweepMenuInputHandler+0x1a0>)
 8004590:	edd3 7a00 	vldr	s15, [r3]
 8004594:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 8004596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459a:	ee17 2a90 	vmov	r2, s15
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80045a0:	e036      	b.n	8004610 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 80045a2:	4b29      	ldr	r3, [pc, #164]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	4b28      	ldr	r3, [pc, #160]	; (8004650 <FreqSweepMenuInputHandler+0x1a4>)
 80045b0:	edc3 7a00 	vstr	s15, [r3]
							break;
 80045b4:	e02c      	b.n	8004610 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80045be:	4293      	cmp	r3, r2
 80045c0:	d904      	bls.n	80045cc <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80045c2:	4b21      	ldr	r3, [pc, #132]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80045ca:	e020      	b.n	800460e <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80045cc:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <FreqSweepMenuInputHandler+0x1a4>)
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e6:	d509      	bpl.n	80045fc <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 80045e8:	4b19      	ldr	r3, [pc, #100]	; (8004650 <FreqSweepMenuInputHandler+0x1a4>)
 80045ea:	edd3 7a00 	vldr	s15, [r3]
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f4:	ee17 2a90 	vmov	r2, s15
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80045fa:	e008      	b.n	800460e <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004608:	4b10      	ldr	r3, [pc, #64]	; (800464c <FreqSweepMenuInputHandler+0x1a0>)
 800460a:	edc3 7a00 	vstr	s15, [r3]
							break;
 800460e:	bf00      	nop
					break;
 8004610:	bf00      	nop
			break;
 8004612:	e008      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004614:	2000      	movs	r0, #0
 8004616:	f001 f869 	bl	80056ec <FS_SetEncoderControlMode>

			break;
 800461a:	e004      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 800461c:	2001      	movs	r0, #1
 800461e:	f001 f865 	bl	80056ec <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004622:	e000      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004624:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <FreqSweepMenuInputHandler+0x1a8>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800462c:	230d      	movs	r3, #13
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40000c00 	.word	0x40000c00
 800463c:	20001e54 	.word	0x20001e54
 8004640:	20001e55 	.word	0x20001e55
 8004644:	2000208c 	.word	0x2000208c
 8004648:	40012c00 	.word	0x40012c00
 800464c:	20000124 	.word	0x20000124
 8004650:	20000120 	.word	0x20000120
 8004654:	20001e53 	.word	0x20001e53

08004658 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800465c:	f7fc ff1e 	bl	800149c <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <FreqSweepMenuExitHandler+0x34>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a09      	ldr	r2, [pc, #36]	; (800468c <FreqSweepMenuExitHandler+0x34>)
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 800466c:	4b07      	ldr	r3, [pc, #28]	; (800468c <FreqSweepMenuExitHandler+0x34>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a06      	ldr	r2, [pc, #24]	; (800468c <FreqSweepMenuExitHandler+0x34>)
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <FreqSweepMenuExitHandler+0x38>)
 800467a:	2201      	movs	r2, #1
 800467c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <FreqSweepMenuExitHandler+0x3c>)
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004684:	230a      	movs	r3, #10
}
 8004686:	4618      	mov	r0, r3
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40000c00 	.word	0x40000c00
 8004690:	20001e56 	.word	0x20001e56
 8004694:	20001e53 	.word	0x20001e53

08004698 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800469c:	f7fc fefe 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <FreqMainMenuEntryHandler+0x1c>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 80046a6:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <FreqMainMenuEntryHandler+0x20>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80046ac:	230a      	movs	r3, #10
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20001e56 	.word	0x20001e56
 80046b8:	20001e53 	.word	0x20001e53

080046bc <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <FreqMainMenuExitHandler+0x24>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80046c6:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <FreqMainMenuExitHandler+0x28>)
 80046c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046cc:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 80046ce:	f7fc fee5 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <FreqMainMenuExitHandler+0x2c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80046d8:	2301      	movs	r3, #1
}
 80046da:	4618      	mov	r0, r3
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20001e56 	.word	0x20001e56
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	20001e53 	.word	0x20001e53

080046ec <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80046f2:	f7fc fed3 	bl	800149c <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 80046f6:	f000 ff97 	bl	8005628 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 80046fa:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <FreqPresetMenuEntryHandler+0x48>)
 80046fc:	2202      	movs	r2, #2
 80046fe:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004700:	f000 ff44 	bl	800558c <FreqO_GetFPresetObject>
 8004704:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <FreqPresetMenuEntryHandler+0x4c>)
 800470e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004712:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <FreqPresetMenuEntryHandler+0x4c>)
 8004716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c
 800471c:	e002      	b.n	8004724 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 800471e:	4807      	ldr	r0, [pc, #28]	; (800473c <FreqPresetMenuEntryHandler+0x50>)
 8004720:	f7fc ff02 	bl	8001528 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <FreqPresetMenuEntryHandler+0x54>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800472a:	230b      	movs	r3, #11
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20001e56 	.word	0x20001e56
 8004738:	40012c00 	.word	0x40012c00
 800473c:	08014608 	.word	0x08014608
 8004740:	20001e53 	.word	0x20001e53

08004744 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004748:	2000      	movs	r0, #0
 800474a:	f001 ff5d 	bl	8006608 <SM_GetEncoderValue>
 800474e:	4603      	mov	r3, r0
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fe49 	bl	80053e8 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004756:	4b03      	ldr	r3, [pc, #12]	; (8004764 <FreqPresetMenuInputHandler+0x20>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800475c:	230b      	movs	r3, #11
}
 800475e:	4618      	mov	r0, r3
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20001e53 	.word	0x20001e53

08004768 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800476c:	f7fc fe96 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <FreqPresetMenuExitHandler+0x1c>)
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <FreqPresetMenuExitHandler+0x20>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800477c:	230a      	movs	r3, #10
}
 800477e:	4618      	mov	r0, r3
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20001e56 	.word	0x20001e56
 8004788:	20001e53 	.word	0x20001e53

0800478c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004790:	f7fc fe84 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004794:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <FreqAdjustMenuEntryHandler+0x2c>)
 8004796:	2203      	movs	r2, #3
 8004798:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 800479a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800479e:	4a07      	ldr	r2, [pc, #28]	; (80047bc <FreqAdjustMenuEntryHandler+0x30>)
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <FreqAdjustMenuEntryHandler+0x30>)
 80047a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <FreqAdjustMenuEntryHandler+0x34>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80047b2:	230c      	movs	r3, #12
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20001e56 	.word	0x20001e56
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	20001e53 	.word	0x20001e53

080047c4 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 80047c8:	f000 feb4 	bl	8005534 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80047cc:	4b02      	ldr	r3, [pc, #8]	; (80047d8 <FreqAdjustMenuInputHandler+0x14>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80047d2:	230c      	movs	r3, #12
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20001e53 	.word	0x20001e53

080047dc <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80047e0:	f7fc fe5c 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <FreqAdjustMenuExitHandler+0x1c>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <FreqAdjustMenuExitHandler+0x20>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80047f0:	230a      	movs	r3, #10
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20001e56 	.word	0x20001e56
 80047fc:	20001e53 	.word	0x20001e53

08004800 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <FreqMenu_getStatus+0x14>)
 8004806:	781b      	ldrb	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20001e56 	.word	0x20001e56

08004818 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <FuncMenu_getStatus+0x14>)
 800481e:	781b      	ldrb	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20001e57 	.word	0x20001e57

08004830 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004834:	f7fc fe32 	bl	800149c <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <FuncMainMenuEntryHandler+0x1c>)
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <FuncMainMenuEntryHandler+0x20>)
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004844:	2303      	movs	r3, #3
}
 8004846:	4618      	mov	r0, r3
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20001e57 	.word	0x20001e57
 8004850:	20001e53 	.word	0x20001e53

08004854 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <FuncMainMenuExitHandler+0x20>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800485e:	2002      	movs	r0, #2
 8004860:	f000 f9ce 	bl	8004c00 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8004864:	f7fc fe1a 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <FuncMainMenuExitHandler+0x24>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800486e:	2301      	movs	r3, #1
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20001e57 	.word	0x20001e57
 8004878:	20001e53 	.word	0x20001e53

0800487c <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004880:	f7fc fe0c 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004884:	f000 fffa 	bl	800587c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <FuncSignalMenuEntryHandler+0x30>)
 800488a:	2202      	movs	r2, #2
 800488c:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <FuncSignalMenuEntryHandler+0x34>)
 8004890:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <FuncSignalMenuEntryHandler+0x34>)
 8004898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <FuncSignalMenuEntryHandler+0x38>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80048a4:	2304      	movs	r3, #4
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20001e57 	.word	0x20001e57
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	20001e53 	.word	0x20001e53

080048b8 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80048bc:	2000      	movs	r0, #0
 80048be:	f001 fea3 	bl	8006608 <SM_GetEncoderValue>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 ffe5 	bl	8005894 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 80048ca:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <FuncSignalMenuInputHandler+0x20>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80048d0:	2304      	movs	r3, #4
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20001e53 	.word	0x20001e53

080048dc <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <FuncSignalMenuExitHandler+0x20>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80048e6:	f7fc fdd9 	bl	800149c <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 80048ea:	f001 ff31 	bl	8006750 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 80048ee:	4b04      	ldr	r3, [pc, #16]	; (8004900 <FuncSignalMenuExitHandler+0x24>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80048f4:	2303      	movs	r3, #3
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20001e57 	.word	0x20001e57
 8004900:	20001e53 	.word	0x20001e53

08004904 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004908:	f7fc fdc8 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 800490c:	f000 ffb6 	bl	800587c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004910:	4b08      	ldr	r3, [pc, #32]	; (8004934 <FuncAuxMenuEntryHandler+0x30>)
 8004912:	2203      	movs	r2, #3
 8004914:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8004916:	4b08      	ldr	r3, [pc, #32]	; (8004938 <FuncAuxMenuEntryHandler+0x34>)
 8004918:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <FuncAuxMenuEntryHandler+0x34>)
 8004920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004924:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <FuncAuxMenuEntryHandler+0x38>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800492c:	2305      	movs	r3, #5
}
 800492e:	4618      	mov	r0, r3
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20001e57 	.word	0x20001e57
 8004938:	40012c00 	.word	0x40012c00
 800493c:	20001e53 	.word	0x20001e53

08004940 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004946:	f001 fee7 	bl	8006718 <SM_IsFuncPwmDutyMode>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004950:	2000      	movs	r0, #0
 8004952:	f001 fe59 	bl	8006608 <SM_GetEncoderValue>
 8004956:	4603      	mov	r3, r0
 8004958:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	4618      	mov	r0, r3
 800495e:	f7fb fdf9 	bl	8000554 <__aeabi_ui2d>
 8004962:	4603      	mov	r3, r0
 8004964:	460c      	mov	r4, r1
 8004966:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80049a8 <FuncAuxMenuInputHandler+0x68>
 800496a:	ec44 3b10 	vmov	d0, r3, r4
 800496e:	f00e f93b 	bl	8012be8 <pow>
 8004972:	ec53 2b10 	vmov	r2, r3, d0
 8004976:	4c0e      	ldr	r4, [pc, #56]	; (80049b0 <FuncAuxMenuInputHandler+0x70>)
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	f7fc f93c 	bl	8000bf8 <__aeabi_d2uiz>
 8004980:	4603      	mov	r3, r0
 8004982:	6363      	str	r3, [r4, #52]	; 0x34
 8004984:	e006      	b.n	8004994 <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004986:	2000      	movs	r0, #0
 8004988:	f001 fe3e 	bl	8006608 <SM_GetEncoderValue>
 800498c:	4603      	mov	r3, r0
 800498e:	4618      	mov	r0, r3
 8004990:	f000 ffba 	bl	8005908 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <FuncAuxMenuInputHandler+0x74>)
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800499a:	2305      	movs	r3, #5
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd90      	pop	{r4, r7, pc}
 80049a4:	f3af 8000 	nop.w
 80049a8:	00000000 	.word	0x00000000
 80049ac:	40000000 	.word	0x40000000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	20001e53 	.word	0x20001e53

080049b8 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 80049bc:	f001 feb8 	bl	8006730 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <FuncAuxToggleDutyMode+0x1c>)
 80049c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 80049c8:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <FuncAuxToggleDutyMode+0x20>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80049ce:	2305      	movs	r3, #5
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	20001e53 	.word	0x20001e53

080049dc <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <FuncAuxMenuExitHandler+0x20>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 80049e6:	f001 feb3 	bl	8006750 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 80049ea:	f7fc fd57 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 80049ee:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <FuncAuxMenuExitHandler+0x24>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80049f4:	2303      	movs	r3, #3
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20001e57 	.word	0x20001e57
 8004a00:	20001e53 	.word	0x20001e53

08004a04 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <GainMenu_getStatus+0x14>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20001e58 	.word	0x20001e58

08004a1c <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a20:	f7fc fd3c 	bl	800149c <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <GainMainMenuEntryHandler+0x1c>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004a2a:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <GainMainMenuEntryHandler+0x20>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004a30:	2306      	movs	r3, #6
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20001e58 	.word	0x20001e58
 8004a3c:	20001e53 	.word	0x20001e53

08004a40 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <GainMainMenuExitHandler+0x1c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004a4a:	f7fc fd27 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <GainMainMenuExitHandler+0x20>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004a54:	2301      	movs	r3, #1
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20001e58 	.word	0x20001e58
 8004a60:	20001e53 	.word	0x20001e53

08004a64 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a6a:	f7fc fd17 	bl	800149c <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004a6e:	f001 f943 	bl	8005cf8 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004a72:	f001 fe79 	bl	8006768 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <GainSignalMenuEntryHandler+0x54>)
 8004a78:	2202      	movs	r2, #2
 8004a7a:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f001 fb47 	bl	8006110 <SM_GetOutputChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004a88:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <GainSignalMenuEntryHandler+0x58>)
 8004a92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004a98:	4b08      	ldr	r3, [pc, #32]	; (8004abc <GainSignalMenuEntryHandler+0x58>)
 8004a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aa0:	e002      	b.n	8004aa8 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004aa2:	4807      	ldr	r0, [pc, #28]	; (8004ac0 <GainSignalMenuEntryHandler+0x5c>)
 8004aa4:	f7fc fd40 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <GainSignalMenuEntryHandler+0x60>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004aae:	2307      	movs	r3, #7
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20001e58 	.word	0x20001e58
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	08014644 	.word	0x08014644
 8004ac4:	20001e53 	.word	0x20001e53

08004ac8 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif

	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f001 fb1e 	bl	8006110 <SM_GetOutputChannel>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004ada:	607b      	str	r3, [r7, #4]
	if(tmpFuncProfile)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d012      	beq.n	8004b08 <GainSignalMenuInputHandler+0x40>
	{
		if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b06      	cmp	r3, #6
 8004ae8:	d107      	bne.n	8004afa <GainSignalMenuInputHandler+0x32>
		{
			GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8004aea:	2001      	movs	r0, #1
 8004aec:	f001 fd8c 	bl	8006608 <SM_GetEncoderValue>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 f90c 	bl	8005d10 <GO_MapEncoderPositionToSignalOutput>
 8004af8:	e006      	b.n	8004b08 <GainSignalMenuInputHandler+0x40>

		}
		else
		{
			VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004afa:	2000      	movs	r0, #0
 8004afc:	f001 fd84 	bl	8006608 <SM_GetEncoderValue>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 ffa2 	bl	8006a4c <VPP_MapEncoderPositionToSignalOutput>
		}
	}
	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evYellowBtn;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <GainSignalMenuInputHandler+0x50>)
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004b0e:	2307      	movs	r3, #7
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20001e53 	.word	0x20001e53

08004b1c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <GainSignalMenuExitHandler+0x1c>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b26:	f7fc fcb9 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <GainSignalMenuExitHandler+0x20>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004b30:	2306      	movs	r3, #6
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20001e58 	.word	0x20001e58
 8004b3c:	20001e53 	.word	0x20001e53

08004b40 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b46:	f7fc fca9 	bl	800149c <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004b4a:	f001 fe0d 	bl	8006768 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <GainAuxMenuEntryHandler+0x50>)
 8004b50:	2203      	movs	r2, #3
 8004b52:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 8004b54:	2001      	movs	r0, #1
 8004b56:	f001 fadb 	bl	8006110 <SM_GetOutputChannel>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004b60:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <GainAuxMenuEntryHandler+0x54>)
 8004b6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <GainAuxMenuEntryHandler+0x54>)
 8004b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b76:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b78:	e002      	b.n	8004b80 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004b7a:	4807      	ldr	r0, [pc, #28]	; (8004b98 <GainAuxMenuEntryHandler+0x58>)
 8004b7c:	f7fc fcd4 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <GainAuxMenuEntryHandler+0x5c>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004b86:	2308      	movs	r3, #8
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20001e58 	.word	0x20001e58
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	08014644 	.word	0x08014644
 8004b9c:	20001e53 	.word	0x20001e53

08004ba0 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f001 fd2f 	bl	8006608 <SM_GetEncoderValue>
 8004baa:	4603      	mov	r3, r0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 ff87 	bl	8006ac0 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8004bb2:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <GainAuxMenuInputHandler+0x20>)
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004bb8:	2308      	movs	r3, #8
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20001e53 	.word	0x20001e53

08004bc4 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <GainAuxMenuExitHandler+0x1c>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004bce:	f7fc fc65 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <GainAuxMenuExitHandler+0x20>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004bd8:	2306      	movs	r3, #6
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20001e58 	.word	0x20001e58
 8004be4:	20001e53 	.word	0x20001e53

08004be8 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <ToplevelMenu_getStatus+0x14>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000000 	.word	0x20000000

08004c00 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004c0a:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <ToplevelMenu_setStatus+0x1c>)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	7013      	strb	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	20000000 	.word	0x20000000

08004c20 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c24:	f7fc fc3a 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <ToplevelOutputMenuEntryHandler+0x1c>)
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004c2e:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <ToplevelOutputMenuEntryHandler+0x20>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004c34:	2301      	movs	r3, #1
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	20001e53 	.word	0x20001e53

08004c44 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c48:	f7fc fc28 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <ToplevelOutputMenuExitHandler+0x1c>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <ToplevelOutputMenuExitHandler+0x20>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000000 	.word	0x20000000
 8004c64:	20001e53 	.word	0x20001e53

08004c68 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c6c:	f7fc fc16 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <ToplevelInputMenuEntryHandler+0x1c>)
 8004c72:	2203      	movs	r2, #3
 8004c74:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004c76:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <ToplevelInputMenuEntryHandler+0x20>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004c7c:	2302      	movs	r3, #2
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000000 	.word	0x20000000
 8004c88:	20001e53 	.word	0x20001e53

08004c8c <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	4603      	mov	r3, r0
 8004c94:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d003      	beq.n	8004ca4 <ToplevelInputMenuInputHandler+0x18>
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	f000 80fa 	beq.w	8004e96 <ToplevelInputMenuInputHandler+0x20a>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8004ca2:	e113      	b.n	8004ecc <ToplevelInputMenuInputHandler+0x240>
				if(isTriggerInputEnabled)
 8004ca4:	4b8d      	ldr	r3, [pc, #564]	; (8004edc <ToplevelInputMenuInputHandler+0x250>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d034      	beq.n	8004d16 <ToplevelInputMenuInputHandler+0x8a>
					OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_ECE);
 8004cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cba:	6093      	str	r3, [r2, #8]
					OUTPUT_TIMER->SMCR &= ~(TIM_TS_TI1FP1);
 8004cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cc6:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8004cca:	6093      	str	r3, [r2, #8]
					OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
 8004ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cd6:	f023 0304 	bic.w	r3, r3, #4
 8004cda:	6093      	str	r3, [r2, #8]
					HAL_COMP_Stop(&hcomp1);
 8004cdc:	4880      	ldr	r0, [pc, #512]	; (8004ee0 <ToplevelInputMenuInputHandler+0x254>)
 8004cde:	f005 fc35 	bl	800a54c <HAL_COMP_Stop>
					HAL_ADC_Stop_DMA(&hadc1);
 8004ce2:	4880      	ldr	r0, [pc, #512]	; (8004ee4 <ToplevelInputMenuInputHandler+0x258>)
 8004ce4:	f004 f9ce 	bl	8009084 <HAL_ADC_Stop_DMA>
					GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 8004ce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	6213      	str	r3, [r2, #32]
					GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8004cf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004d02:	f023 0308 	bic.w	r3, r3, #8
 8004d06:	6213      	str	r3, [r2, #32]
					isTriggerInputEnabled = DISABLE_TRIGGER_INPUT;
 8004d08:	4b74      	ldr	r3, [pc, #464]	; (8004edc <ToplevelInputMenuInputHandler+0x250>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
					FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f000 fe34 	bl	800597c <FuncO_ApplyProfileToSignal>
				break;
 8004d14:	e0da      	b.n	8004ecc <ToplevelInputMenuInputHandler+0x240>
					switch(activeInputerTriggerMode)
 8004d16:	4b74      	ldr	r3, [pc, #464]	; (8004ee8 <ToplevelInputMenuInputHandler+0x25c>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d04a      	beq.n	8004db4 <ToplevelInputMenuInputHandler+0x128>
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	f000 8087 	beq.w	8004e32 <ToplevelInputMenuInputHandler+0x1a6>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 80b2 	bne.w	8004e8e <ToplevelInputMenuInputHandler+0x202>
							HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d30:	486e      	ldr	r0, [pc, #440]	; (8004eec <ToplevelInputMenuInputHandler+0x260>)
 8004d32:	f006 ff4f 	bl	800bbd4 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 8004d36:	2200      	movs	r2, #0
 8004d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d3c:	486b      	ldr	r0, [pc, #428]	; (8004eec <ToplevelInputMenuInputHandler+0x260>)
 8004d3e:	f006 ff49 	bl	800bbd4 <HAL_GPIO_WritePin>
							GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset
 8004d42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004d4c:	f023 0303 	bic.w	r3, r3, #3
 8004d50:	6013      	str	r3, [r2, #0]
							GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 8004d52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004d5c:	f043 0302 	orr.w	r3, r3, #2
 8004d60:	6013      	str	r3, [r2, #0]
							GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 8004d62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004d6c:	f023 031e 	bic.w	r3, r3, #30
 8004d70:	6213      	str	r3, [r2, #32]
							GPIOA->AFR[0] |= GPIO_AF1_TIM2;	// set alt pin function to TIM2 CH1
 8004d72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	6213      	str	r3, [r2, #32]
							OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);		// enable timer external clock source
 8004d82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d90:	6093      	str	r3, [r2, #8]
							OUTPUT_TIMER->SMCR |= (TIM_TS_TI1FP1);		// enable timer "Filtered timer input 1" (tim_ti1fp1)
 8004d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d9c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004da0:	6093      	str	r3, [r2, #8]
							OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);		// enable timer reset trigger mode
 8004da2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dac:	f043 0304 	orr.w	r3, r3, #4
 8004db0:	6093      	str	r3, [r2, #8]
							break;
 8004db2:	e06c      	b.n	8004e8e <ToplevelInputMenuInputHandler+0x202>
							HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dba:	484c      	ldr	r0, [pc, #304]	; (8004eec <ToplevelInputMenuInputHandler+0x260>)
 8004dbc:	f006 ff0a 	bl	800bbd4 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dc6:	4849      	ldr	r0, [pc, #292]	; (8004eec <ToplevelInputMenuInputHandler+0x260>)
 8004dc8:	f006 ff04 	bl	800bbd4 <HAL_GPIO_WritePin>
							COMP1->CSR |= COMP_CSR_EN;
 8004dcc:	4b48      	ldr	r3, [pc, #288]	; (8004ef0 <ToplevelInputMenuInputHandler+0x264>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a47      	ldr	r2, [pc, #284]	; (8004ef0 <ToplevelInputMenuInputHandler+0x264>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	6013      	str	r3, [r2, #0]
							GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 8004dd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004de2:	f023 031e 	bic.w	r3, r3, #30
 8004de6:	6213      	str	r3, [r2, #32]
							GPIOA->AFR[0] |= (GPIO_AF8_COMP1);
 8004de8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004df2:	f043 0308 	orr.w	r3, r3, #8
 8004df6:	6213      	str	r3, [r2, #32]
							OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8004df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e02:	f023 0301 	bic.w	r3, r3, #1
 8004e06:	6013      	str	r3, [r2, #0]
							HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004e08:	2100      	movs	r1, #0
 8004e0a:	483a      	ldr	r0, [pc, #232]	; (8004ef4 <ToplevelInputMenuInputHandler+0x268>)
 8004e0c:	f005 feca 	bl	800aba4 <HAL_DAC_Stop_DMA>
							HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, comp1_output_value, 1, DAC_ALIGN_12B_R);
 8004e10:	2300      	movs	r3, #0
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2301      	movs	r3, #1
 8004e16:	4a38      	ldr	r2, [pc, #224]	; (8004ef8 <ToplevelInputMenuInputHandler+0x26c>)
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4836      	ldr	r0, [pc, #216]	; (8004ef4 <ToplevelInputMenuInputHandler+0x268>)
 8004e1c:	f005 fe00 	bl	800aa20 <HAL_DAC_Start_DMA>
							OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8004e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6013      	str	r3, [r2, #0]
							break;
 8004e30:	e02d      	b.n	8004e8e <ToplevelInputMenuInputHandler+0x202>
							HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8004e32:	2201      	movs	r2, #1
 8004e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e38:	482c      	ldr	r0, [pc, #176]	; (8004eec <ToplevelInputMenuInputHandler+0x260>)
 8004e3a:	f006 fecb 	bl	800bbd4 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e44:	4829      	ldr	r0, [pc, #164]	; (8004eec <ToplevelInputMenuInputHandler+0x260>)
 8004e46:	f006 fec5 	bl	800bbd4 <HAL_GPIO_WritePin>
							HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
 8004e4a:	2278      	movs	r2, #120	; 0x78
 8004e4c:	492b      	ldr	r1, [pc, #172]	; (8004efc <ToplevelInputMenuInputHandler+0x270>)
 8004e4e:	4825      	ldr	r0, [pc, #148]	; (8004ee4 <ToplevelInputMenuInputHandler+0x258>)
 8004e50:	f004 f84a 	bl	8008ee8 <HAL_ADC_Start_DMA>
							OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8004e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	6013      	str	r3, [r2, #0]
							HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004e64:	2100      	movs	r1, #0
 8004e66:	4823      	ldr	r0, [pc, #140]	; (8004ef4 <ToplevelInputMenuInputHandler+0x268>)
 8004e68:	f005 fe9c 	bl	800aba4 <HAL_DAC_Stop_DMA>
							HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	2378      	movs	r3, #120	; 0x78
 8004e72:	4a22      	ldr	r2, [pc, #136]	; (8004efc <ToplevelInputMenuInputHandler+0x270>)
 8004e74:	2100      	movs	r1, #0
 8004e76:	481f      	ldr	r0, [pc, #124]	; (8004ef4 <ToplevelInputMenuInputHandler+0x268>)
 8004e78:	f005 fdd2 	bl	800aa20 <HAL_DAC_Start_DMA>
							OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8004e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	6013      	str	r3, [r2, #0]
							break;
 8004e8c:	bf00      	nop
					isTriggerInputEnabled = ENABLE_TRIGGER_INPUT;
 8004e8e:	4b13      	ldr	r3, [pc, #76]	; (8004edc <ToplevelInputMenuInputHandler+0x250>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	701a      	strb	r2, [r3, #0]
				break;
 8004e94:	e01a      	b.n	8004ecc <ToplevelInputMenuInputHandler+0x240>
				switch(activeInputerTriggerMode)
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <ToplevelInputMenuInputHandler+0x25c>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d007      	beq.n	8004eae <ToplevelInputMenuInputHandler+0x222>
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d009      	beq.n	8004eb6 <ToplevelInputMenuInputHandler+0x22a>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10b      	bne.n	8004ebe <ToplevelInputMenuInputHandler+0x232>
						activeInputerTriggerMode = INPUT_TRIGGER_COMP;
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <ToplevelInputMenuInputHandler+0x25c>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	701a      	strb	r2, [r3, #0]
						break;
 8004eac:	e007      	b.n	8004ebe <ToplevelInputMenuInputHandler+0x232>
						activeInputerTriggerMode = INPUT_TRIGGER_ADC;
 8004eae:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <ToplevelInputMenuInputHandler+0x25c>)
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	701a      	strb	r2, [r3, #0]
						break;
 8004eb4:	e003      	b.n	8004ebe <ToplevelInputMenuInputHandler+0x232>
						activeInputerTriggerMode = INPUT_TRIGGER_TIM;
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <ToplevelInputMenuInputHandler+0x25c>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
						break;
 8004ebc:	bf00      	nop
				ToplevelInputMenuInputHandler(evBlueBtn);
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f7ff fee4 	bl	8004c8c <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f7ff fee1 	bl	8004c8c <ToplevelInputMenuInputHandler>
				break;
 8004eca:	bf00      	nop
		}
	// stay in this state
	eNewEvent = evIdle;
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <ToplevelInputMenuInputHandler+0x274>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004ed2:	2302      	movs	r3, #2
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20001e59 	.word	0x20001e59
 8004ee0:	200027e8 	.word	0x200027e8
 8004ee4:	2000271c 	.word	0x2000271c
 8004ee8:	20001e5a 	.word	0x20001e5a
 8004eec:	48000800 	.word	0x48000800
 8004ef0:	40010200 	.word	0x40010200
 8004ef4:	20002820 	.word	0x20002820
 8004ef8:	2000214c 	.word	0x2000214c
 8004efc:	20001ea0 	.word	0x20001ea0
 8004f00:	20001e53 	.word	0x20001e53

08004f04 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f08:	f7fc fac8 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <ToplevelInputMenuExitHandler+0x1c>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <ToplevelInputMenuExitHandler+0x20>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000000 	.word	0x20000000
 8004f24:	20001e53 	.word	0x20001e53

08004f28 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4013      	ands	r3, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d101      	bne.n	8004f42 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40010400 	.word	0x40010400

08004f54 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <IM_Init+0x1c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <IM_Init+0x1c>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6013      	str	r3, [r2, #0]
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40014400 	.word	0x40014400

08004f74 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004f78:	4b2a      	ldr	r3, [pc, #168]	; (8005024 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d11f      	bne.n	8004fc4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x50>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f92:	4b25      	ldr	r3, [pc, #148]	; (8005028 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8004f94:	edd3 7a00 	vldr	s15, [r3]
 8004f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa0:	db0a      	blt.n	8004fb8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x44>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004fa2:	4b22      	ldr	r3, [pc, #136]	; (800502c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8004fa4:	edd3 7a00 	vldr	s15, [r3]
 8004fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb0:	ee17 2a90 	vmov	r2, s15
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004fb6:	e02f      	b.n	8005018 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			OUTPUT_TIMER->ARR++;
 8004fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	3201      	adds	r2, #1
 8004fc0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004fc2:	e029      	b.n	8005018 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d105      	bne.n	8004fda <IM_SWEEP_UPDATE_TIM_IRQHandler+0x66>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004fd8:	e01e      	b.n	8005018 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8004fea:	edd3 7a00 	vldr	s15, [r3]
 8004fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff6:	d80a      	bhi.n	800500e <IM_SWEEP_UPDATE_TIM_IRQHandler+0x9a>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8004ffa:	edd3 7a00 	vldr	s15, [r3]
 8004ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005006:	ee17 2a90 	vmov	r2, s15
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800500c:	e004      	b.n	8005018 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
				OUTPUT_TIMER->ARR--;
 800500e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	3a01      	subs	r2, #1
 8005016:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40000c00 	.word	0x40000c00
 8005028:	20000124 	.word	0x20000124
 800502c:	20000120 	.word	0x20000120

08005030 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <IM_BTN1_EXTI14_Handler+0x44>)
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	4a0e      	ldr	r2, [pc, #56]	; (8005078 <IM_BTN1_EXTI14_Handler+0x48>)
 8005040:	8812      	ldrh	r2, [r2, #0]
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005048:	dd0c      	ble.n	8005064 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800504a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800504e:	f7ff ff6b 	bl	8004f28 <LL_EXTI_IsActiveFlag_0_31>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8005058:	2001      	movs	r0, #1
 800505a:	f7ff f9c1 	bl	80043e0 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 800505e:	4807      	ldr	r0, [pc, #28]	; (800507c <IM_BTN1_EXTI14_Handler+0x4c>)
 8005060:	f00b fca8 	bl	80109b4 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <IM_BTN1_EXTI14_Handler+0x48>)
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	8013      	strh	r3, [r2, #0]


}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40014400 	.word	0x40014400
 8005078:	20001e5c 	.word	0x20001e5c
 800507c:	0801467c 	.word	0x0801467c

08005080 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005086:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <IM_BTN2_EXTI15_Handler+0x44>)
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	4a0e      	ldr	r2, [pc, #56]	; (80050c8 <IM_BTN2_EXTI15_Handler+0x48>)
 8005090:	8812      	ldrh	r2, [r2, #0]
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005098:	dd0c      	ble.n	80050b4 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 800509a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800509e:	f7ff ff43 	bl	8004f28 <LL_EXTI_IsActiveFlag_0_31>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80050a8:	2003      	movs	r0, #3
 80050aa:	f7ff f999 	bl	80043e0 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80050ae:	4807      	ldr	r0, [pc, #28]	; (80050cc <IM_BTN2_EXTI15_Handler+0x4c>)
 80050b0:	f00b fc80 	bl	80109b4 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80050b4:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <IM_BTN2_EXTI15_Handler+0x48>)
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	8013      	strh	r3, [r2, #0]


}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40014400 	.word	0x40014400
 80050c8:	20001e5e 	.word	0x20001e5e
 80050cc:	08014694 	.word	0x08014694

080050d0 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80050d6:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <IM_BTN3_EXTI0_Handler+0x40>)
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <IM_BTN3_EXTI0_Handler+0x44>)
 80050e0:	8812      	ldrh	r2, [r2, #0]
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e8:	dd0b      	ble.n	8005102 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 80050ea:	2001      	movs	r0, #1
 80050ec:	f7ff ff1c 	bl	8004f28 <LL_EXTI_IsActiveFlag_0_31>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 80050f6:	2004      	movs	r0, #4
 80050f8:	f7ff f972 	bl	80043e0 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 80050fc:	4806      	ldr	r0, [pc, #24]	; (8005118 <IM_BTN3_EXTI0_Handler+0x48>)
 80050fe:	f00b fc59 	bl	80109b4 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8005102:	4a04      	ldr	r2, [pc, #16]	; (8005114 <IM_BTN3_EXTI0_Handler+0x44>)
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	8013      	strh	r3, [r2, #0]


}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40014400 	.word	0x40014400
 8005114:	20001e60 	.word	0x20001e60
 8005118:	080146b0 	.word	0x080146b0

0800511c <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005122:	4b0e      	ldr	r3, [pc, #56]	; (800515c <IM_BTN4_EXTI1_Handler+0x40>)
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <IM_BTN4_EXTI1_Handler+0x44>)
 800512c:	8812      	ldrh	r2, [r2, #0]
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005134:	dd0b      	ble.n	800514e <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8005136:	2002      	movs	r0, #2
 8005138:	f7ff fef6 	bl	8004f28 <LL_EXTI_IsActiveFlag_0_31>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8005142:	2002      	movs	r0, #2
 8005144:	f7ff f94c 	bl	80043e0 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005148:	4806      	ldr	r0, [pc, #24]	; (8005164 <IM_BTN4_EXTI1_Handler+0x48>)
 800514a:	f00b fc33 	bl	80109b4 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 800514e:	4a04      	ldr	r2, [pc, #16]	; (8005160 <IM_BTN4_EXTI1_Handler+0x44>)
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	8013      	strh	r3, [r2, #0]


}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40014400 	.word	0x40014400
 8005160:	20001e62 	.word	0x20001e62
 8005164:	080146c8 	.word	0x080146c8

08005168 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <IM_ENC_EXTI2_Handler+0x40>)
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <IM_ENC_EXTI2_Handler+0x44>)
 8005178:	8812      	ldrh	r2, [r2, #0]
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005180:	dd0b      	ble.n	800519a <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8005182:	2004      	movs	r0, #4
 8005184:	f7ff fed0 	bl	8004f28 <LL_EXTI_IsActiveFlag_0_31>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 800518e:	2006      	movs	r0, #6
 8005190:	f7ff f926 	bl	80043e0 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8005194:	4806      	ldr	r0, [pc, #24]	; (80051b0 <IM_ENC_EXTI2_Handler+0x48>)
 8005196:	f00b fc0d 	bl	80109b4 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 800519a:	4a04      	ldr	r2, [pc, #16]	; (80051ac <IM_ENC_EXTI2_Handler+0x44>)
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	8013      	strh	r3, [r2, #0]


}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40014400 	.word	0x40014400
 80051ac:	20001e64 	.word	0x20001e64
 80051b0:	080146e0 	.word	0x080146e0

080051b4 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80051ba:	4b11      	ldr	r3, [pc, #68]	; (8005200 <IM_ENC_DIRF_Handler+0x4c>)
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c6:	d117      	bne.n	80051f8 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80051c8:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <IM_ENC_DIRF_Handler+0x50>)
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <IM_ENC_DIRF_Handler+0x54>)
 80051d2:	8812      	ldrh	r2, [r2, #0]
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	dd0b      	ble.n	80051f2 <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 80051da:	2005      	movs	r0, #5
 80051dc:	f7ff f900 	bl	80043e0 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 80051e0:	480a      	ldr	r0, [pc, #40]	; (800520c <IM_ENC_DIRF_Handler+0x58>)
 80051e2:	f00b fbe7 	bl	80109b4 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <IM_ENC_DIRF_Handler+0x4c>)
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	4a05      	ldr	r2, [pc, #20]	; (8005200 <IM_ENC_DIRF_Handler+0x4c>)
 80051ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051f0:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 80051f2:	4a05      	ldr	r2, [pc, #20]	; (8005208 <IM_ENC_DIRF_Handler+0x54>)
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	8013      	strh	r3, [r2, #0]


	}


}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40014400 	.word	0x40014400
 8005208:	20001e66 	.word	0x20001e66
 800520c:	080146fc 	.word	0x080146fc

08005210 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005214:	4b03      	ldr	r3, [pc, #12]	; (8005224 <BO_GetBiasPolarity+0x14>)
 8005216:	781b      	ldrb	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000001 	.word	0x20000001

08005228 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <BO_GetDcBiasEncoderValue+0x14>)
 800522e:	881b      	ldrh	r3, [r3, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000002 	.word	0x20000002

08005240 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 800524a:	2000      	movs	r0, #0
 800524c:	f001 f9dc 	bl	8006608 <SM_GetEncoderValue>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8005256:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800525e:	d214      	bcs.n	800528a <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005274:	2200      	movs	r2, #0
 8005276:	2110      	movs	r1, #16
 8005278:	4814      	ldr	r0, [pc, #80]	; (80052cc <BO_MapEncoderPositionToSignalOutput+0x8c>)
 800527a:	f005 fce9 	bl	800ac50 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 800527e:	2201      	movs	r2, #1
 8005280:	2108      	movs	r1, #8
 8005282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005286:	f006 fca5 	bl	800bbd4 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005290:	d314      	bcc.n	80052bc <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005294:	2201      	movs	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80052a6:	2200      	movs	r2, #0
 80052a8:	2110      	movs	r1, #16
 80052aa:	4808      	ldr	r0, [pc, #32]	; (80052cc <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80052ac:	f005 fcd0 	bl	800ac50 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80052b0:	2200      	movs	r2, #0
 80052b2:	2108      	movs	r1, #8
 80052b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052b8:	f006 fc8c 	bl	800bbd4 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 80052bc:	bf00      	nop
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000002 	.word	0x20000002
 80052c8:	20000001 	.word	0x20000001
 80052cc:	20002820 	.word	0x20002820

080052d0 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 80052d4:	2110      	movs	r1, #16
 80052d6:	4803      	ldr	r0, [pc, #12]	; (80052e4 <BO_GetOutputBias+0x14>)
 80052d8:	f005 fd00 	bl	800acdc <HAL_DAC_GetValue>
 80052dc:	4603      	mov	r3, r0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20002820 	.word	0x20002820

080052e8 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	e06b      	b.n	80053cc <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 80052f4:	493a      	ldr	r1, [pc, #232]	; (80053e0 <FreqO_InitFreqProfiles+0xf8>)
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3308      	adds	r3, #8
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d129      	bne.n	800535e <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 800530a:	4935      	ldr	r1, [pc, #212]	; (80053e0 <FreqO_InitFreqProfiles+0xf8>)
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	3304      	adds	r3, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a31      	ldr	r2, [pc, #196]	; (80053e4 <FreqO_InitFreqProfiles+0xfc>)
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800532a:	492d      	ldr	r1, [pc, #180]	; (80053e0 <FreqO_InitFreqProfiles+0xf8>)
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3310      	adds	r3, #16
 800533a:	edd3 7a00 	vldr	s15, [r3]
 800533e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005346:	ee17 0a90 	vmov	r0, s15
 800534a:	4925      	ldr	r1, [pc, #148]	; (80053e0 <FreqO_InitFreqProfiles+0xf8>)
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	330c      	adds	r3, #12
 800535a:	6018      	str	r0, [r3, #0]
 800535c:	e033      	b.n	80053c6 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 800535e:	4920      	ldr	r1, [pc, #128]	; (80053e0 <FreqO_InitFreqProfiles+0xf8>)
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3304      	adds	r3, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <FreqO_InitFreqProfiles+0xfc>)
 8005372:	fbb2 f1f3 	udiv	r1, r2, r3
 8005376:	481a      	ldr	r0, [pc, #104]	; (80053e0 <FreqO_InitFreqProfiles+0xf8>)
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4403      	add	r3, r0
 8005384:	3308      	adds	r3, #8
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	fbb1 f3f3 	udiv	r3, r1, r3
 800538c:	ee07 3a90 	vmov	s15, r3
 8005390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005394:	4912      	ldr	r1, [pc, #72]	; (80053e0 <FreqO_InitFreqProfiles+0xf8>)
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3310      	adds	r3, #16
 80053a4:	edd3 7a00 	vldr	s15, [r3]
 80053a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b0:	ee17 0a90 	vmov	r0, s15
 80053b4:	490a      	ldr	r1, [pc, #40]	; (80053e0 <FreqO_InitFreqProfiles+0xf8>)
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	330c      	adds	r3, #12
 80053c4:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3301      	adds	r3, #1
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b0d      	cmp	r3, #13
 80053d0:	dd90      	ble.n	80052f4 <FreqO_InitFreqProfiles+0xc>
	}
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000004 	.word	0x20000004
 80053e4:	00155cc0 	.word	0x00155cc0

080053e8 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 80053f2:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <FreqO_MapEncoderPositionCoarse+0x78>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 80053fa:	4b1a      	ldr	r3, [pc, #104]	; (8005464 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	88fa      	ldrh	r2, [r7, #6]
 8005400:	429a      	cmp	r2, r3
 8005402:	d910      	bls.n	8005426 <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b0d      	cmp	r3, #13
 800540e:	d901      	bls.n	8005414 <FreqO_MapEncoderPositionCoarse+0x2c>
 8005410:	230d      	movs	r3, #13
 8005412:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f8f3 	bl	8005600 <FreqO_GetProfileByIndex>
 800541a:	4603      	mov	r3, r0
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4618      	mov	r0, r3
 8005420:	f000 f848 	bl	80054b4 <FreqO_ApplyProfile>
 8005424:	e014      	b.n	8005450 <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	429a      	cmp	r2, r3
 800542e:	d20f      	bcs.n	8005450 <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3b01      	subs	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b0d      	cmp	r3, #13
 800543a:	d901      	bls.n	8005440 <FreqO_MapEncoderPositionCoarse+0x58>
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f8dd 	bl	8005600 <FreqO_GetProfileByIndex>
 8005446:	4603      	mov	r3, r0
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f832 	bl	80054b4 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8005450:	4a04      	ldr	r2, [pc, #16]	; (8005464 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	8013      	strh	r3, [r2, #0]

}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	2000011c 	.word	0x2000011c
 8005464:	20001e68 	.word	0x20001e68

08005468 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005472:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <FreqO_MapEncoderPositionFine+0x48>)
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	88fa      	ldrh	r2, [r7, #6]
 8005478:	429a      	cmp	r2, r3
 800547a:	d905      	bls.n	8005488 <FreqO_MapEncoderPositionFine+0x20>
	{
		OUTPUT_TIMER->ARR++;
 800547c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	3201      	adds	r2, #1
 8005484:	62da      	str	r2, [r3, #44]	; 0x2c
 8005486:	e009      	b.n	800549c <FreqO_MapEncoderPositionFine+0x34>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <FreqO_MapEncoderPositionFine+0x48>)
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	88fa      	ldrh	r2, [r7, #6]
 800548e:	429a      	cmp	r2, r3
 8005490:	d204      	bcs.n	800549c <FreqO_MapEncoderPositionFine+0x34>
	{
		OUTPUT_TIMER->ARR--;
 8005492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	3a01      	subs	r2, #1
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 800549c:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <FreqO_MapEncoderPositionFine+0x48>)
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	8013      	strh	r3, [r2, #0]

}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	20001e68 	.word	0x20001e68

080054b4 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f871 	bl	80055a4 <FreqO_FindFPresetObject>
 80054c2:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d026      	beq.n	8005518 <FreqO_ApplyProfile+0x64>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 80054ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 80054d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80054de:	2001      	movs	r0, #1
 80054e0:	f000 fe16 	bl	8006110 <SM_GetOutputChannel>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 80054ee:	7afb      	ldrb	r3, [r7, #11]
 80054f0:	2b06      	cmp	r3, #6
 80054f2:	d10d      	bne.n	8005510 <FreqO_ApplyProfile+0x5c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <FreqO_ApplyProfile+0x74>)
 80054f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	4a09      	ldr	r2, [pc, #36]	; (8005528 <FreqO_ApplyProfile+0x74>)
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005506:	4b08      	ldr	r3, [pc, #32]	; (8005528 <FreqO_ApplyProfile+0x74>)
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	4a07      	ldr	r2, [pc, #28]	; (8005528 <FreqO_ApplyProfile+0x74>)
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005510:	4a06      	ldr	r2, [pc, #24]	; (800552c <FreqO_ApplyProfile+0x78>)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005516:	e002      	b.n	800551e <FreqO_ApplyProfile+0x6a>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005518:	4805      	ldr	r0, [pc, #20]	; (8005530 <FreqO_ApplyProfile+0x7c>)
 800551a:	f7fc f805 	bl	8001528 <DM_SetErrorDebugMsg>
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40000400 	.word	0x40000400
 800552c:	2000011c 	.word	0x2000011c
 8005530:	08014714 	.word	0x08014714

08005534 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 800553a:	2000      	movs	r0, #0
 800553c:	f001 f864 	bl	8006608 <SM_GetEncoderValue>
 8005540:	4603      	mov	r3, r0
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff ff90 	bl	8005468 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005548:	2001      	movs	r0, #1
 800554a:	f000 fde1 	bl	8006110 <SM_GetOutputChannel>
 800554e:	4603      	mov	r3, r0
 8005550:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	2b06      	cmp	r3, #6
 800555c:	d110      	bne.n	8005580 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <FreqO_AdjustFreq+0x54>)
 8005560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005564:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005566:	2000      	movs	r0, #0
 8005568:	f001 f84e 	bl	8006608 <SM_GetEncoderValue>
 800556c:	4603      	mov	r3, r0
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <FreqO_AdjustFreq+0x54>)
 8005574:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005576:	4b04      	ldr	r3, [pc, #16]	; (8005588 <FreqO_AdjustFreq+0x54>)
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	4a03      	ldr	r2, [pc, #12]	; (8005588 <FreqO_AdjustFreq+0x54>)
 800557c:	085b      	lsrs	r3, r3, #1
 800557e:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40000400 	.word	0x40000400

0800558c <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
	return freq_profile;
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <FreqO_GetFPresetObject+0x14>)
 8005592:	681b      	ldr	r3, [r3, #0]
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2000011c 	.word	0x2000011c

080055a4 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e016      	b.n	80055e0 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 80055b2:	4911      	ldr	r1, [pc, #68]	; (80055f8 <FreqO_FindFPresetObject+0x54>)
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3304      	adds	r3, #4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d107      	bne.n	80055da <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <FreqO_FindFPresetObject+0x54>)
 80055d6:	4413      	add	r3, r2
 80055d8:	e009      	b.n	80055ee <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3301      	adds	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b0d      	cmp	r3, #13
 80055e4:	dde5      	ble.n	80055b2 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 80055e6:	4805      	ldr	r0, [pc, #20]	; (80055fc <FreqO_FindFPresetObject+0x58>)
 80055e8:	f7fb ff9e 	bl	8001528 <DM_SetErrorDebugMsg>
	return 0;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000004 	.word	0x20000004
 80055fc:	0801473c 	.word	0x0801473c

08005600 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4a04      	ldr	r2, [pc, #16]	; (8005624 <FreqO_GetProfileByIndex+0x24>)
 8005614:	4413      	add	r3, r2
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000004 	.word	0x20000004

08005628 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <FreqO_ResetLastEncoderValue+0x14>)
 800562e:	2200      	movs	r2, #0
 8005630:	801a      	strh	r2, [r3, #0]
}
 8005632:	bf00      	nop
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20001e68 	.word	0x20001e68

08005640 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005644:	4b10      	ldr	r3, [pc, #64]	; (8005688 <FS_SetSweepModeDown+0x48>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a0f      	ldr	r2, [pc, #60]	; (8005688 <FS_SetSweepModeDown+0x48>)
 800564a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800564e:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005650:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <FS_SetSweepModeDown+0x48>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a0c      	ldr	r2, [pc, #48]	; (8005688 <FS_SetSweepModeDown+0x48>)
 8005656:	f043 0310 	orr.w	r3, r3, #16
 800565a:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 800565c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566a:	4b08      	ldr	r3, [pc, #32]	; (800568c <FS_SetSweepModeDown+0x4c>)
 800566c:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <FS_SetSweepModeDown+0x50>)
 8005672:	4a08      	ldr	r2, [pc, #32]	; (8005694 <FS_SetSweepModeDown+0x54>)
 8005674:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005676:	4b08      	ldr	r3, [pc, #32]	; (8005698 <FS_SetSweepModeDown+0x58>)
 8005678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800567c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	40000c00 	.word	0x40000c00
 800568c:	20000120 	.word	0x20000120
 8005690:	20000124 	.word	0x20000124
 8005694:	477fff00 	.word	0x477fff00
 8005698:	40012c00 	.word	0x40012c00

0800569c <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <FS_SetSweepModeUp+0x40>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <FS_SetSweepModeUp+0x40>)
 80056a6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80056aa:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <FS_SetSweepModeUp+0x40>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <FS_SetSweepModeUp+0x40>)
 80056b2:	f023 0310 	bic.w	r3, r3, #16
 80056b6:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80056b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <FS_SetSweepModeUp+0x44>)
 80056c8:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <FS_SetSweepModeUp+0x48>)
 80056ce:	4a06      	ldr	r2, [pc, #24]	; (80056e8 <FS_SetSweepModeUp+0x4c>)
 80056d0:	601a      	str	r2, [r3, #0]


}
 80056d2:	bf00      	nop
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	20000124 	.word	0x20000124
 80056e4:	20000120 	.word	0x20000120
 80056e8:	41500000 	.word	0x41500000

080056ec <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d03a      	beq.n	8005772 <FS_SetEncoderControlMode+0x86>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80056fc:	4a25      	ldr	r2, [pc, #148]	; (8005794 <FS_SetEncoderControlMode+0xa8>)
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8005702:	4b25      	ldr	r3, [pc, #148]	; (8005798 <FS_SetEncoderControlMode+0xac>)
 8005704:	220d      	movs	r2, #13
 8005706:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005708:	4b23      	ldr	r3, [pc, #140]	; (8005798 <FS_SetEncoderControlMode+0xac>)
 800570a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800570e:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005710:	4b22      	ldr	r3, [pc, #136]	; (800579c <FS_SetEncoderControlMode+0xb0>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <FS_SetEncoderControlMode+0x32>
 8005718:	2b01      	cmp	r3, #1
 800571a:	d015      	beq.n	8005748 <FS_SetEncoderControlMode+0x5c>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 800571c:	e033      	b.n	8005786 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 800571e:	4b1e      	ldr	r3, [pc, #120]	; (8005798 <FS_SetEncoderControlMode+0xac>)
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <FS_SetEncoderControlMode+0xb4>)
 800572c:	edd3 7a00 	vldr	s15, [r3]
 8005730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005738:	dc00      	bgt.n	800573c <FS_SetEncoderControlMode+0x50>
				break;
 800573a:	e024      	b.n	8005786 <FS_SetEncoderControlMode+0x9a>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 800573c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005740:	4a15      	ldr	r2, [pc, #84]	; (8005798 <FS_SetEncoderControlMode+0xac>)
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005746:	e01e      	b.n	8005786 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <FS_SetEncoderControlMode+0xac>)
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005754:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <FS_SetEncoderControlMode+0xb8>)
 8005756:	edd3 7a00 	vldr	s15, [r3]
 800575a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800575e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005762:	d400      	bmi.n	8005766 <FS_SetEncoderControlMode+0x7a>
				break;
 8005764:	e00f      	b.n	8005786 <FS_SetEncoderControlMode+0x9a>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800576a:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <FS_SetEncoderControlMode+0xac>)
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005770:	e009      	b.n	8005786 <FS_SetEncoderControlMode+0x9a>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005772:	4a08      	ldr	r2, [pc, #32]	; (8005794 <FS_SetEncoderControlMode+0xa8>)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <FS_SetEncoderControlMode+0xac>)
 800577a:	2201      	movs	r2, #1
 800577c:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <FS_SetEncoderControlMode+0xac>)
 8005780:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005784:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20001e55 	.word	0x20001e55
 8005798:	40012c00 	.word	0x40012c00
 800579c:	20001e54 	.word	0x20001e54
 80057a0:	20000124 	.word	0x20000124
 80057a4:	20000120 	.word	0x20000120

080057a8 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 80057a8:	b590      	push	{r4, r7, lr}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d122      	bne.n	80057fe <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fa fec9 	bl	8000554 <__aeabi_ui2d>
 80057c2:	4603      	mov	r3, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005808 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 80057ca:	ec44 3b10 	vmov	d0, r3, r4
 80057ce:	f00d fa0b 	bl	8012be8 <pow>
 80057d2:	ec51 0b10 	vmov	r0, r1, d0
 80057d6:	a30e      	add	r3, pc, #56	; (adr r3, 8005810 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f7fa fd7e 	bl	80002dc <__adddf3>
 80057e0:	4603      	mov	r3, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4618      	mov	r0, r3
 80057e6:	4621      	mov	r1, r4
 80057e8:	f7fb fa06 	bl	8000bf8 <__aeabi_d2uiz>
 80057ec:	4603      	mov	r3, r0
 80057ee:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f6:	d002      	beq.n	80057fe <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 80057f8:	4a08      	ldr	r2, [pc, #32]	; (800581c <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	bd90      	pop	{r4, r7, pc}
 8005806:	bf00      	nop
 8005808:	00000000 	.word	0x00000000
 800580c:	40080000 	.word	0x40080000
 8005810:	00000000 	.word	0x00000000
 8005814:	40d06800 	.word	0x40d06800
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40000c00 	.word	0x40000c00

08005820 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005824:	4b13      	ldr	r3, [pc, #76]	; (8005874 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 800582c:	4b11      	ldr	r3, [pc, #68]	; (8005874 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005838:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005878 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 800583c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005840:	e011      	b.n	8005866 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800585e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005878 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005862:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005866:	eeb0 0a67 	vmov.f32	s0, s15
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40000c00 	.word	0x40000c00
 8005878:	4d2037a0 	.word	0x4d2037a0

0800587c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <FuncO_ResetLastEncoderValue+0x14>)
 8005882:	2200      	movs	r2, #0
 8005884:	801a      	strh	r2, [r3, #0]
}
 8005886:	bf00      	nop
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	20001e96 	.word	0x20001e96

08005894 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800589e:	2000      	movs	r0, #0
 80058a0:	f000 fc36 	bl	8006110 <SM_GetOutputChannel>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80058ae:	4b15      	ldr	r3, [pc, #84]	; (8005904 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d90c      	bls.n	80058d2 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	3301      	adds	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d901      	bls.n	80058c8 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 80058c4:	2305      	movs	r3, #5
 80058c6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f856 	bl	800597c <FuncO_ApplyProfileToSignal>
 80058d0:	e010      	b.n	80058f4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 80058d2:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d20b      	bcs.n	80058f4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	3b01      	subs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d901      	bls.n	80058ec <FuncO_MapEncoderPositionToSignalOutput+0x58>
 80058e8:	2300      	movs	r3, #0
 80058ea:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f844 	bl	800597c <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 80058f4:	4a03      	ldr	r2, [pc, #12]	; (8005904 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	8013      	strh	r3, [r2, #0]
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20001e96 	.word	0x20001e96

08005908 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005912:	2001      	movs	r0, #1
 8005914:	f000 fbfc 	bl	8006110 <SM_GetOutputChannel>
 8005918:	4603      	mov	r3, r0
 800591a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	429a      	cmp	r2, r3
 800592a:	d90c      	bls.n	8005946 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	3301      	adds	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b06      	cmp	r3, #6
 8005936:	d901      	bls.n	800593c <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005938:	2306      	movs	r3, #6
 800593a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f882 	bl	8005a48 <FuncO_ApplyProfileToAux>
 8005944:	e010      	b.n	8005968 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005946:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	429a      	cmp	r2, r3
 800594e:	d20b      	bcs.n	8005968 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	3b01      	subs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b06      	cmp	r3, #6
 800595a:	d901      	bls.n	8005960 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f870 	bl	8005a48 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005968:	4a03      	ldr	r2, [pc, #12]	; (8005978 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	8013      	strh	r3, [r2, #0]
}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20001e96 	.word	0x20001e96

0800597c <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 800597c:	b590      	push	{r4, r7, lr}
 800597e:	b087      	sub	sp, #28
 8005980:	af02      	add	r7, sp, #8
 8005982:	4603      	mov	r3, r0
 8005984:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005986:	79fc      	ldrb	r4, [r7, #7]
 8005988:	2000      	movs	r0, #0
 800598a:	f000 fbc1 	bl	8006110 <SM_GetOutputChannel>
 800598e:	4601      	mov	r1, r0
 8005990:	00e3      	lsls	r3, r4, #3
 8005992:	4a29      	ldr	r2, [pc, #164]	; (8005a38 <FuncO_ApplyProfileToSignal+0xbc>)
 8005994:	4413      	add	r3, r2
 8005996:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 800599a:	4828      	ldr	r0, [pc, #160]	; (8005a3c <FuncO_ApplyProfileToSignal+0xc0>)
 800599c:	f00b f80a 	bl	80109b4 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80059a0:	79fc      	ldrb	r4, [r7, #7]
 80059a2:	2000      	movs	r0, #0
 80059a4:	f000 fbb4 	bl	8006110 <SM_GetOutputChannel>
 80059a8:	4601      	mov	r1, r0
 80059aa:	4a23      	ldr	r2, [pc, #140]	; (8005a38 <FuncO_ApplyProfileToSignal+0xbc>)
 80059ac:	00e3      	lsls	r3, r4, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80059b4:	2000      	movs	r0, #0
 80059b6:	f000 fbab 	bl	8006110 <SM_GetOutputChannel>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 feda 	bl	8006780 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80059cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80059dc:	2100      	movs	r1, #0
 80059de:	4818      	ldr	r0, [pc, #96]	; (8005a40 <FuncO_ApplyProfileToSignal+0xc4>)
 80059e0:	f005 f8e0 	bl	800aba4 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80059e4:	2000      	movs	r0, #0
 80059e6:	f000 fb93 	bl	8006110 <SM_GetOutputChannel>
 80059ea:	4603      	mov	r3, r0
 80059ec:	f103 0208 	add.w	r2, r3, #8
 80059f0:	2300      	movs	r3, #0
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	2378      	movs	r3, #120	; 0x78
 80059f6:	2100      	movs	r1, #0
 80059f8:	4811      	ldr	r0, [pc, #68]	; (8005a40 <FuncO_ApplyProfileToSignal+0xc4>)
 80059fa:	f005 f811 	bl	800aa20 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80059fe:	2100      	movs	r1, #0
 8005a00:	4810      	ldr	r0, [pc, #64]	; (8005a44 <FuncO_ApplyProfileToSignal+0xc8>)
 8005a02:	f005 f8cf 	bl	800aba4 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005a06:	2001      	movs	r0, #1
 8005a08:	f000 fb82 	bl	8006110 <SM_GetOutputChannel>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f103 0208 	add.w	r2, r3, #8
 8005a12:	2300      	movs	r3, #0
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	2378      	movs	r3, #120	; 0x78
 8005a18:	2100      	movs	r1, #0
 8005a1a:	480a      	ldr	r0, [pc, #40]	; (8005a44 <FuncO_ApplyProfileToSignal+0xc8>)
 8005a1c:	f005 f800 	bl	800aa20 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	6013      	str	r3, [r2, #0]



}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}
 8005a38:	20000128 	.word	0x20000128
 8005a3c:	0801476c 	.word	0x0801476c
 8005a40:	20002820 	.word	0x20002820
 8005a44:	2000280c 	.word	0x2000280c

08005a48 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	4603      	mov	r3, r0
 8005a50:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005a52:	79fc      	ldrb	r4, [r7, #7]
 8005a54:	2001      	movs	r0, #1
 8005a56:	f000 fb5b 	bl	8006110 <SM_GetOutputChannel>
 8005a5a:	4601      	mov	r1, r0
 8005a5c:	00e3      	lsls	r3, r4, #3
 8005a5e:	4a96      	ldr	r2, [pc, #600]	; (8005cb8 <FuncO_ApplyProfileToAux+0x270>)
 8005a60:	4413      	add	r3, r2
 8005a62:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	d10a      	bne.n	8005a82 <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005a6c:	4893      	ldr	r0, [pc, #588]	; (8005cbc <FuncO_ApplyProfileToAux+0x274>)
 8005a6e:	f00a ffa1 	bl	80109b4 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005a72:	f000 fdb5 	bl	80065e0 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005a76:	f000 fb61 	bl	800613c <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005a7a:	4b91      	ldr	r3, [pc, #580]	; (8005cc0 <FuncO_ApplyProfileToAux+0x278>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim2);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005a80:	e115      	b.n	8005cae <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005a82:	4b8f      	ldr	r3, [pc, #572]	; (8005cc0 <FuncO_ApplyProfileToAux+0x278>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 808e 	beq.w	8005ba8 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005a8c:	488d      	ldr	r0, [pc, #564]	; (8005cc4 <FuncO_ApplyProfileToAux+0x27c>)
 8005a8e:	f00a ff91 	bl	80109b4 <puts>
		SM_DisablePwmToAux();
 8005a92:	f000 fc8f 	bl	80063b4 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005a96:	f000 fcc9 	bl	800642c <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005a9a:	488b      	ldr	r0, [pc, #556]	; (8005cc8 <FuncO_ApplyProfileToAux+0x280>)
 8005a9c:	f00a ff8a 	bl	80109b4 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005aa0:	79fc      	ldrb	r4, [r7, #7]
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	f000 fb34 	bl	8006110 <SM_GetOutputChannel>
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	4a83      	ldr	r2, [pc, #524]	; (8005cb8 <FuncO_ApplyProfileToAux+0x270>)
 8005aac:	00e3      	lsls	r3, r4, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005ab4:	4884      	ldr	r0, [pc, #528]	; (8005cc8 <FuncO_ApplyProfileToAux+0x280>)
 8005ab6:	f00a ff7d 	bl	80109b4 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005aba:	2001      	movs	r0, #1
 8005abc:	f000 fb28 	bl	8006110 <SM_GetOutputChannel>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005aca:	4880      	ldr	r0, [pc, #512]	; (8005ccc <FuncO_ApplyProfileToAux+0x284>)
 8005acc:	f00a fefe 	bl	80108cc <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005ad0:	7b7b      	ldrb	r3, [r7, #13]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fe82 	bl	80067dc <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005ad8:	487d      	ldr	r0, [pc, #500]	; (8005cd0 <FuncO_ApplyProfileToAux+0x288>)
 8005ada:	f00a ff6b 	bl	80109b4 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 8005ade:	487d      	ldr	r0, [pc, #500]	; (8005cd4 <FuncO_ApplyProfileToAux+0x28c>)
 8005ae0:	f007 f9a0 	bl	800ce24 <HAL_TIM_Base_Stop>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	4619      	mov	r1, r3
 8005aec:	487a      	ldr	r0, [pc, #488]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005aee:	f00a feed 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005af2:	487a      	ldr	r0, [pc, #488]	; (8005cdc <FuncO_ApplyProfileToAux+0x294>)
 8005af4:	f00a ff5e 	bl	80109b4 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005af8:	2100      	movs	r1, #0
 8005afa:	4879      	ldr	r0, [pc, #484]	; (8005ce0 <FuncO_ApplyProfileToAux+0x298>)
 8005afc:	f005 f852 	bl	800aba4 <HAL_DAC_Stop_DMA>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	4619      	mov	r1, r3
 8005b08:	4873      	ldr	r0, [pc, #460]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005b0a:	f00a fedf 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005b0e:	4875      	ldr	r0, [pc, #468]	; (8005ce4 <FuncO_ApplyProfileToAux+0x29c>)
 8005b10:	f00a ff50 	bl	80109b4 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005b14:	2001      	movs	r0, #1
 8005b16:	f000 fafb 	bl	8006110 <SM_GetOutputChannel>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f103 0208 	add.w	r2, r3, #8
 8005b20:	2300      	movs	r3, #0
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2378      	movs	r3, #120	; 0x78
 8005b26:	2100      	movs	r1, #0
 8005b28:	486d      	ldr	r0, [pc, #436]	; (8005ce0 <FuncO_ApplyProfileToAux+0x298>)
 8005b2a:	f004 ff79 	bl	800aa20 <HAL_DAC_Start_DMA>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005b32:	7bbb      	ldrb	r3, [r7, #14]
 8005b34:	4619      	mov	r1, r3
 8005b36:	4868      	ldr	r0, [pc, #416]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005b38:	f00a fec8 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005b3c:	486a      	ldr	r0, [pc, #424]	; (8005ce8 <FuncO_ApplyProfileToAux+0x2a0>)
 8005b3e:	f00a ff39 	bl	80109b4 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005b42:	2100      	movs	r1, #0
 8005b44:	4869      	ldr	r0, [pc, #420]	; (8005cec <FuncO_ApplyProfileToAux+0x2a4>)
 8005b46:	f005 f82d 	bl	800aba4 <HAL_DAC_Stop_DMA>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005b4e:	7bbb      	ldrb	r3, [r7, #14]
 8005b50:	4619      	mov	r1, r3
 8005b52:	4861      	ldr	r0, [pc, #388]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005b54:	f00a feba 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005b58:	4865      	ldr	r0, [pc, #404]	; (8005cf0 <FuncO_ApplyProfileToAux+0x2a8>)
 8005b5a:	f00a ff2b 	bl	80109b4 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005b5e:	2000      	movs	r0, #0
 8005b60:	f000 fad6 	bl	8006110 <SM_GetOutputChannel>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f103 0208 	add.w	r2, r3, #8
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	2378      	movs	r3, #120	; 0x78
 8005b70:	2100      	movs	r1, #0
 8005b72:	485e      	ldr	r0, [pc, #376]	; (8005cec <FuncO_ApplyProfileToAux+0x2a4>)
 8005b74:	f004 ff54 	bl	800aa20 <HAL_DAC_Start_DMA>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005b7c:	7bbb      	ldrb	r3, [r7, #14]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4855      	ldr	r0, [pc, #340]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005b82:	f00a fea3 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005b86:	485b      	ldr	r0, [pc, #364]	; (8005cf4 <FuncO_ApplyProfileToAux+0x2ac>)
 8005b88:	f00a ff14 	bl	80109b4 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 8005b8c:	4851      	ldr	r0, [pc, #324]	; (8005cd4 <FuncO_ApplyProfileToAux+0x28c>)
 8005b8e:	f007 f91b 	bl	800cdc8 <HAL_TIM_Base_Start>
 8005b92:	4603      	mov	r3, r0
 8005b94:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	484f      	ldr	r0, [pc, #316]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005b9c:	f00a fe96 	bl	80108cc <iprintf>
		last_output_mode_was_pwm = 0;
 8005ba0:	4b47      	ldr	r3, [pc, #284]	; (8005cc0 <FuncO_ApplyProfileToAux+0x278>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
}
 8005ba6:	e082      	b.n	8005cae <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005ba8:	4847      	ldr	r0, [pc, #284]	; (8005cc8 <FuncO_ApplyProfileToAux+0x280>)
 8005baa:	f00a ff03 	bl	80109b4 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005bae:	79fc      	ldrb	r4, [r7, #7]
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	f000 faad 	bl	8006110 <SM_GetOutputChannel>
 8005bb6:	4601      	mov	r1, r0
 8005bb8:	4a3f      	ldr	r2, [pc, #252]	; (8005cb8 <FuncO_ApplyProfileToAux+0x270>)
 8005bba:	00e3      	lsls	r3, r4, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005bc2:	4841      	ldr	r0, [pc, #260]	; (8005cc8 <FuncO_ApplyProfileToAux+0x280>)
 8005bc4:	f00a fef6 	bl	80109b4 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f000 faa1 	bl	8006110 <SM_GetOutputChannel>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8005bd8:	483c      	ldr	r0, [pc, #240]	; (8005ccc <FuncO_ApplyProfileToAux+0x284>)
 8005bda:	f00a fe77 	bl	80108cc <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fdfb 	bl	80067dc <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005be6:	483a      	ldr	r0, [pc, #232]	; (8005cd0 <FuncO_ApplyProfileToAux+0x288>)
 8005be8:	f00a fee4 	bl	80109b4 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 8005bec:	4839      	ldr	r0, [pc, #228]	; (8005cd4 <FuncO_ApplyProfileToAux+0x28c>)
 8005bee:	f007 f919 	bl	800ce24 <HAL_TIM_Base_Stop>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4837      	ldr	r0, [pc, #220]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005bfc:	f00a fe66 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005c00:	4836      	ldr	r0, [pc, #216]	; (8005cdc <FuncO_ApplyProfileToAux+0x294>)
 8005c02:	f00a fed7 	bl	80109b4 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005c06:	2100      	movs	r1, #0
 8005c08:	4835      	ldr	r0, [pc, #212]	; (8005ce0 <FuncO_ApplyProfileToAux+0x298>)
 8005c0a:	f004 ffcb 	bl	800aba4 <HAL_DAC_Stop_DMA>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005c12:	7bbb      	ldrb	r3, [r7, #14]
 8005c14:	4619      	mov	r1, r3
 8005c16:	4830      	ldr	r0, [pc, #192]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005c18:	f00a fe58 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005c1c:	4831      	ldr	r0, [pc, #196]	; (8005ce4 <FuncO_ApplyProfileToAux+0x29c>)
 8005c1e:	f00a fec9 	bl	80109b4 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005c22:	2001      	movs	r0, #1
 8005c24:	f000 fa74 	bl	8006110 <SM_GetOutputChannel>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f103 0208 	add.w	r2, r3, #8
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	2378      	movs	r3, #120	; 0x78
 8005c34:	2100      	movs	r1, #0
 8005c36:	482a      	ldr	r0, [pc, #168]	; (8005ce0 <FuncO_ApplyProfileToAux+0x298>)
 8005c38:	f004 fef2 	bl	800aa20 <HAL_DAC_Start_DMA>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005c40:	7bbb      	ldrb	r3, [r7, #14]
 8005c42:	4619      	mov	r1, r3
 8005c44:	4824      	ldr	r0, [pc, #144]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005c46:	f00a fe41 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005c4a:	4827      	ldr	r0, [pc, #156]	; (8005ce8 <FuncO_ApplyProfileToAux+0x2a0>)
 8005c4c:	f00a feb2 	bl	80109b4 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005c50:	2100      	movs	r1, #0
 8005c52:	4826      	ldr	r0, [pc, #152]	; (8005cec <FuncO_ApplyProfileToAux+0x2a4>)
 8005c54:	f004 ffa6 	bl	800aba4 <HAL_DAC_Stop_DMA>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005c5c:	7bbb      	ldrb	r3, [r7, #14]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	481d      	ldr	r0, [pc, #116]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005c62:	f00a fe33 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005c66:	4822      	ldr	r0, [pc, #136]	; (8005cf0 <FuncO_ApplyProfileToAux+0x2a8>)
 8005c68:	f00a fea4 	bl	80109b4 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f000 fa4f 	bl	8006110 <SM_GetOutputChannel>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f103 0208 	add.w	r2, r3, #8
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2378      	movs	r3, #120	; 0x78
 8005c7e:	2100      	movs	r1, #0
 8005c80:	481a      	ldr	r0, [pc, #104]	; (8005cec <FuncO_ApplyProfileToAux+0x2a4>)
 8005c82:	f004 fecd 	bl	800aa20 <HAL_DAC_Start_DMA>
 8005c86:	4603      	mov	r3, r0
 8005c88:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005c8a:	7bbb      	ldrb	r3, [r7, #14]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4812      	ldr	r0, [pc, #72]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005c90:	f00a fe1c 	bl	80108cc <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005c94:	4817      	ldr	r0, [pc, #92]	; (8005cf4 <FuncO_ApplyProfileToAux+0x2ac>)
 8005c96:	f00a fe8d 	bl	80109b4 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 8005c9a:	480e      	ldr	r0, [pc, #56]	; (8005cd4 <FuncO_ApplyProfileToAux+0x28c>)
 8005c9c:	f007 f894 	bl	800cdc8 <HAL_TIM_Base_Start>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	480b      	ldr	r0, [pc, #44]	; (8005cd8 <FuncO_ApplyProfileToAux+0x290>)
 8005caa:	f00a fe0f 	bl	80108cc <iprintf>
}
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd90      	pop	{r4, r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000128 	.word	0x20000128
 8005cbc:	08014780 	.word	0x08014780
 8005cc0:	20001e94 	.word	0x20001e94
 8005cc4:	080147a8 	.word	0x080147a8
 8005cc8:	080147d4 	.word	0x080147d4
 8005ccc:	08014800 	.word	0x08014800
 8005cd0:	08014818 	.word	0x08014818
 8005cd4:	20002a74 	.word	0x20002a74
 8005cd8:	0801484c 	.word	0x0801484c
 8005cdc:	08014858 	.word	0x08014858
 8005ce0:	2000280c 	.word	0x2000280c
 8005ce4:	0801489c 	.word	0x0801489c
 8005ce8:	080148e0 	.word	0x080148e0
 8005cec:	20002820 	.word	0x20002820
 8005cf0:	08014924 	.word	0x08014924
 8005cf4:	08014968 	.word	0x08014968

08005cf8 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005cfc:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <GO_ResetLastEncoderValue+0x14>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	801a      	strh	r2, [r3, #0]
}
 8005d02:	bf00      	nop
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	20001e98 	.word	0x20001e98

08005d10 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f000 f9f8 	bl	8006110 <SM_GetOutputChannel>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	88fa      	ldrh	r2, [r7, #6]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d90c      	bls.n	8005d4e <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	3301      	adds	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	2b07      	cmp	r3, #7
 8005d3e:	d901      	bls.n	8005d44 <GO_MapEncoderPositionToSignalOutput+0x34>
 8005d40:	2307      	movs	r3, #7
 8005d42:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f81c 	bl	8005d84 <GO_ApplyPresetToSignal>
 8005d4c:	e010      	b.n	8005d70 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	88fa      	ldrh	r2, [r7, #6]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d20b      	bcs.n	8005d70 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b07      	cmp	r3, #7
 8005d62:	d901      	bls.n	8005d68 <GO_MapEncoderPositionToSignalOutput+0x58>
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f80a 	bl	8005d84 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8005d70:	4a03      	ldr	r2, [pc, #12]	; (8005d80 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20001e98 	.word	0x20001e98

08005d84 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005d8e:	79fc      	ldrb	r4, [r7, #7]
 8005d90:	2000      	movs	r0, #0
 8005d92:	f000 f9bd 	bl	8006110 <SM_GetOutputChannel>
 8005d96:	4601      	mov	r1, r0
 8005d98:	4623      	mov	r3, r4
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4423      	add	r3, r4
 8005d9e:	4a4f      	ldr	r2, [pc, #316]	; (8005edc <GO_ApplyPresetToSignal+0x158>)
 8005da0:	4413      	add	r3, r2
 8005da2:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	2b07      	cmp	r3, #7
 8005daa:	f200 8093 	bhi.w	8005ed4 <GO_ApplyPresetToSignal+0x150>
 8005dae:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <GO_ApplyPresetToSignal+0x30>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005dd5 	.word	0x08005dd5
 8005db8:	08005df5 	.word	0x08005df5
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e35 	.word	0x08005e35
 8005dc4:	08005e55 	.word	0x08005e55
 8005dc8:	08005e75 	.word	0x08005e75
 8005dcc:	08005e95 	.word	0x08005e95
 8005dd0:	08005eb5 	.word	0x08005eb5
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	4841      	ldr	r0, [pc, #260]	; (8005ee0 <GO_ApplyPresetToSignal+0x15c>)
 8005dda:	f005 fefb 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005dde:	2200      	movs	r2, #0
 8005de0:	2120      	movs	r1, #32
 8005de2:	4840      	ldr	r0, [pc, #256]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005de4:	f005 fef6 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005de8:	2200      	movs	r2, #0
 8005dea:	2110      	movs	r1, #16
 8005dec:	483d      	ldr	r0, [pc, #244]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005dee:	f005 fef1 	bl	800bbd4 <HAL_GPIO_WritePin>
			break;
 8005df2:	e06f      	b.n	8005ed4 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005df4:	2201      	movs	r2, #1
 8005df6:	2101      	movs	r1, #1
 8005df8:	4839      	ldr	r0, [pc, #228]	; (8005ee0 <GO_ApplyPresetToSignal+0x15c>)
 8005dfa:	f005 feeb 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2120      	movs	r1, #32
 8005e02:	4838      	ldr	r0, [pc, #224]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e04:	f005 fee6 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2110      	movs	r1, #16
 8005e0c:	4835      	ldr	r0, [pc, #212]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e0e:	f005 fee1 	bl	800bbd4 <HAL_GPIO_WritePin>
			break;
 8005e12:	e05f      	b.n	8005ed4 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005e14:	2200      	movs	r2, #0
 8005e16:	2101      	movs	r1, #1
 8005e18:	4831      	ldr	r0, [pc, #196]	; (8005ee0 <GO_ApplyPresetToSignal+0x15c>)
 8005e1a:	f005 fedb 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005e1e:	2201      	movs	r2, #1
 8005e20:	2120      	movs	r1, #32
 8005e22:	4830      	ldr	r0, [pc, #192]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e24:	f005 fed6 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2110      	movs	r1, #16
 8005e2c:	482d      	ldr	r0, [pc, #180]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e2e:	f005 fed1 	bl	800bbd4 <HAL_GPIO_WritePin>
			break;
 8005e32:	e04f      	b.n	8005ed4 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005e34:	2201      	movs	r2, #1
 8005e36:	2101      	movs	r1, #1
 8005e38:	4829      	ldr	r0, [pc, #164]	; (8005ee0 <GO_ApplyPresetToSignal+0x15c>)
 8005e3a:	f005 fecb 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005e3e:	2201      	movs	r2, #1
 8005e40:	2120      	movs	r1, #32
 8005e42:	4828      	ldr	r0, [pc, #160]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e44:	f005 fec6 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2110      	movs	r1, #16
 8005e4c:	4825      	ldr	r0, [pc, #148]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e4e:	f005 fec1 	bl	800bbd4 <HAL_GPIO_WritePin>
			break;
 8005e52:	e03f      	b.n	8005ed4 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005e54:	2200      	movs	r2, #0
 8005e56:	2101      	movs	r1, #1
 8005e58:	4821      	ldr	r0, [pc, #132]	; (8005ee0 <GO_ApplyPresetToSignal+0x15c>)
 8005e5a:	f005 febb 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2120      	movs	r1, #32
 8005e62:	4820      	ldr	r0, [pc, #128]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e64:	f005 feb6 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2110      	movs	r1, #16
 8005e6c:	481d      	ldr	r0, [pc, #116]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e6e:	f005 feb1 	bl	800bbd4 <HAL_GPIO_WritePin>
			break;
 8005e72:	e02f      	b.n	8005ed4 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005e74:	2201      	movs	r2, #1
 8005e76:	2101      	movs	r1, #1
 8005e78:	4819      	ldr	r0, [pc, #100]	; (8005ee0 <GO_ApplyPresetToSignal+0x15c>)
 8005e7a:	f005 feab 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2120      	movs	r1, #32
 8005e82:	4818      	ldr	r0, [pc, #96]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e84:	f005 fea6 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005e88:	2201      	movs	r2, #1
 8005e8a:	2110      	movs	r1, #16
 8005e8c:	4815      	ldr	r0, [pc, #84]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005e8e:	f005 fea1 	bl	800bbd4 <HAL_GPIO_WritePin>
			break;
 8005e92:	e01f      	b.n	8005ed4 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005e94:	2200      	movs	r2, #0
 8005e96:	2101      	movs	r1, #1
 8005e98:	4811      	ldr	r0, [pc, #68]	; (8005ee0 <GO_ApplyPresetToSignal+0x15c>)
 8005e9a:	f005 fe9b 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	2120      	movs	r1, #32
 8005ea2:	4810      	ldr	r0, [pc, #64]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005ea4:	f005 fe96 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	2110      	movs	r1, #16
 8005eac:	480d      	ldr	r0, [pc, #52]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005eae:	f005 fe91 	bl	800bbd4 <HAL_GPIO_WritePin>
			break;
 8005eb2:	e00f      	b.n	8005ed4 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	4809      	ldr	r0, [pc, #36]	; (8005ee0 <GO_ApplyPresetToSignal+0x15c>)
 8005eba:	f005 fe8b 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	2120      	movs	r1, #32
 8005ec2:	4808      	ldr	r0, [pc, #32]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005ec4:	f005 fe86 	bl	800bbd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005ec8:	2201      	movs	r2, #1
 8005eca:	2110      	movs	r1, #16
 8005ecc:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <GO_ApplyPresetToSignal+0x160>)
 8005ece:	f005 fe81 	bl	800bbd4 <HAL_GPIO_WritePin>
			break;
 8005ed2:	bf00      	nop
	}

}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd90      	pop	{r4, r7, pc}
 8005edc:	20000160 	.word	0x20000160
 8005ee0:	48000400 	.word	0x48000400
 8005ee4:	48000800 	.word	0x48000800

08005ee8 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8005eec:	f7ff f9fc 	bl	80052e8 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 8005ef0:	f000 f8ae 	bl	8006050 <_InitOutputChannels>
	_InitAmpProfiles();
 8005ef4:	f000 f824 	bl	8005f40 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8005ef8:	2110      	movs	r1, #16
 8005efa:	4810      	ldr	r0, [pc, #64]	; (8005f3c <SM_Init+0x54>)
 8005efc:	f004 fd3d 	bl	800a97a <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 8005f00:	2201      	movs	r2, #1
 8005f02:	2108      	movs	r1, #8
 8005f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f08:	f005 fe64 	bl	800bbd4 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	f7ff fd2d 	bl	800597c <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8005f22:	2059      	movs	r0, #89	; 0x59
 8005f24:	f000 fc2c 	bl	8006780 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f7ff fd8d 	bl	8005a48 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 8005f2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f32:	f7ff fabf 	bl	80054b4 <FreqO_ApplyProfile>

}
 8005f36:	bf00      	nop
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20002820 	.word	0x20002820

08005f40 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b08b      	sub	sp, #44	; 0x2c
 8005f44:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005f46:	2300      	movs	r3, #0
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4a:	e033      	b.n	8005fb4 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005f4c:	493c      	ldr	r1, [pc, #240]	; (8006040 <_InitAmpProfiles+0x100>)
 8005f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8005f60:	4b38      	ldr	r3, [pc, #224]	; (8006044 <_InitAmpProfiles+0x104>)
 8005f62:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005f64:	4936      	ldr	r1, [pc, #216]	; (8006040 <_InitAmpProfiles+0x100>)
 8005f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f68:	4613      	mov	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	3308      	adds	r3, #8
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005f82:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005f8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f96:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005f9a:	4929      	ldr	r1, [pc, #164]	; (8006040 <_InitAmpProfiles+0x100>)
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3310      	adds	r3, #16
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	2b61      	cmp	r3, #97	; 0x61
 8005fb8:	ddc8      	ble.n	8005f4c <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	e037      	b.n	8006030 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8005fc0:	4b21      	ldr	r3, [pc, #132]	; (8006048 <_InitAmpProfiles+0x108>)
 8005fc2:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005fc4:	491e      	ldr	r1, [pc, #120]	; (8006040 <_InitAmpProfiles+0x100>)
 8005fc6:	6a3a      	ldr	r2, [r7, #32]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005fd8:	ed97 7a06 	vldr	s14, [r7, #24]
 8005fdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8005fe0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005fe4:	ee16 0a90 	vmov	r0, s13
 8005fe8:	f7fa fad6 	bl	8000598 <__aeabi_f2d>
 8005fec:	4603      	mov	r3, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	ec44 3b10 	vmov	d0, r3, r4
 8005ff4:	f00c fd78 	bl	8012ae8 <log10>
 8005ff8:	ec51 0b10 	vmov	r0, r1, d0
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <_InitAmpProfiles+0x10c>)
 8006002:	f7fa fb21 	bl	8000648 <__aeabi_dmul>
 8006006:	4603      	mov	r3, r0
 8006008:	460c      	mov	r4, r1
 800600a:	4618      	mov	r0, r3
 800600c:	4621      	mov	r1, r4
 800600e:	f7fa fe13 	bl	8000c38 <__aeabi_d2f>
 8006012:	4603      	mov	r3, r0
 8006014:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8006016:	490a      	ldr	r1, [pc, #40]	; (8006040 <_InitAmpProfiles+0x100>)
 8006018:	6a3a      	ldr	r2, [r7, #32]
 800601a:	4613      	mov	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	330c      	adds	r3, #12
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	3301      	adds	r3, #1
 800602e:	623b      	str	r3, [r7, #32]
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	2b61      	cmp	r3, #97	; 0x61
 8006034:	ddc4      	ble.n	8005fc0 <_InitAmpProfiles+0x80>

	}
}
 8006036:	bf00      	nop
 8006038:	372c      	adds	r7, #44	; 0x2c
 800603a:	46bd      	mov	sp, r7
 800603c:	bd90      	pop	{r4, r7, pc}
 800603e:	bf00      	nop
 8006040:	20000178 	.word	0x20000178
 8006044:	402ccccd 	.word	0x402ccccd
 8006048:	3a83126f 	.word	0x3a83126f
 800604c:	40340000 	.word	0x40340000

08006050 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8006056:	4b28      	ldr	r3, [pc, #160]	; (80060f8 <_InitOutputChannels+0xa8>)
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800605c:	4b27      	ldr	r3, [pc, #156]	; (80060fc <_InitOutputChannels+0xac>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <_InitOutputChannels+0xa8>)
 8006062:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <_InitOutputChannels+0xa8>)
 8006066:	4a25      	ldr	r2, [pc, #148]	; (80060fc <_InitOutputChannels+0xac>)
 8006068:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800606c:	2300      	movs	r3, #0
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	e00b      	b.n	800608a <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006072:	4a23      	ldr	r2, [pc, #140]	; (8006100 <_InitOutputChannels+0xb0>)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800607a:	491f      	ldr	r1, [pc, #124]	; (80060f8 <_InitOutputChannels+0xa8>)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3302      	adds	r3, #2
 8006080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3301      	adds	r3, #1
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b77      	cmp	r3, #119	; 0x77
 800608e:	ddf0      	ble.n	8006072 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006090:	4b19      	ldr	r3, [pc, #100]	; (80060f8 <_InitOutputChannels+0xa8>)
 8006092:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <_InitOutputChannels+0xb4>)
 8006094:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006098:	4b17      	ldr	r3, [pc, #92]	; (80060f8 <_InitOutputChannels+0xa8>)
 800609a:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <_InitOutputChannels+0xb8>)
 800609c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <_InitOutputChannels+0xbc>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80060a6:	4b15      	ldr	r3, [pc, #84]	; (80060fc <_InitOutputChannels+0xac>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4a18      	ldr	r2, [pc, #96]	; (800610c <_InitOutputChannels+0xbc>)
 80060ac:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80060ae:	4b17      	ldr	r3, [pc, #92]	; (800610c <_InitOutputChannels+0xbc>)
 80060b0:	4a12      	ldr	r2, [pc, #72]	; (80060fc <_InitOutputChannels+0xac>)
 80060b2:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80060b6:	2300      	movs	r3, #0
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	e00b      	b.n	80060d4 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80060bc:	4a10      	ldr	r2, [pc, #64]	; (8006100 <_InitOutputChannels+0xb0>)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80060c4:	4911      	ldr	r1, [pc, #68]	; (800610c <_InitOutputChannels+0xbc>)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	3302      	adds	r3, #2
 80060ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b77      	cmp	r3, #119	; 0x77
 80060d8:	ddf0      	ble.n	80060bc <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80060da:	4b0c      	ldr	r3, [pc, #48]	; (800610c <_InitOutputChannels+0xbc>)
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <_InitOutputChannels+0xb4>)
 80060de:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <_InitOutputChannels+0xbc>)
 80060e4:	4a08      	ldr	r2, [pc, #32]	; (8006108 <_InitOutputChannels+0xb8>)
 80060e6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20002154 	.word	0x20002154
 80060fc:	20000128 	.word	0x20000128
 8006100:	200014b4 	.word	0x200014b4
 8006104:	20000b34 	.word	0x20000b34
 8006108:	20000175 	.word	0x20000175
 800610c:	20002348 	.word	0x20002348

08006110 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8006120:	4b04      	ldr	r3, [pc, #16]	; (8006134 <SM_GetOutputChannel+0x24>)
 8006122:	e000      	b.n	8006126 <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8006124:	4b04      	ldr	r3, [pc, #16]	; (8006138 <SM_GetOutputChannel+0x28>)
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20002154 	.word	0x20002154
 8006138:	20002348 	.word	0x20002348

0800613c <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b096      	sub	sp, #88	; 0x58
 8006140:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8006142:	4889      	ldr	r0, [pc, #548]	; (8006368 <SM_EnablePwmToAux+0x22c>)
 8006144:	f00a fc36 	bl	80109b4 <puts>

	HAL_StatusTypeDef res = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800614e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	605a      	str	r2, [r3, #4]
 8006158:	609a      	str	r2, [r3, #8]
 800615a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800615c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	605a      	str	r2, [r3, #4]
 8006166:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006168:	f107 031c 	add.w	r3, r7, #28
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	609a      	str	r2, [r3, #8]
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	611a      	str	r2, [r3, #16]
 8006178:	615a      	str	r2, [r3, #20]
 800617a:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800617c:	f107 0308 	add.w	r3, r7, #8
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 800618c:	4b77      	ldr	r3, [pc, #476]	; (800636c <SM_EnablePwmToAux+0x230>)
 800618e:	4a78      	ldr	r2, [pc, #480]	; (8006370 <SM_EnablePwmToAux+0x234>)
 8006190:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006192:	4b76      	ldr	r3, [pc, #472]	; (800636c <SM_EnablePwmToAux+0x230>)
 8006194:	2200      	movs	r2, #0
 8006196:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006198:	4b74      	ldr	r3, [pc, #464]	; (800636c <SM_EnablePwmToAux+0x230>)
 800619a:	2210      	movs	r2, #16
 800619c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 800619e:	4b73      	ldr	r3, [pc, #460]	; (800636c <SM_EnablePwmToAux+0x230>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80061a4:	4b71      	ldr	r3, [pc, #452]	; (800636c <SM_EnablePwmToAux+0x230>)
 80061a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061aa:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80061ac:	4b6f      	ldr	r3, [pc, #444]	; (800636c <SM_EnablePwmToAux+0x230>)
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 80061b2:	486e      	ldr	r0, [pc, #440]	; (800636c <SM_EnablePwmToAux+0x230>)
 80061b4:	f006 fdb0 	bl	800cd18 <HAL_TIM_Base_Init>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d107      	bne.n	80061d4 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 80061c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061c8:	4619      	mov	r1, r3
 80061ca:	486a      	ldr	r0, [pc, #424]	; (8006374 <SM_EnablePwmToAux+0x238>)
 80061cc:	f00a fb7e 	bl	80108cc <iprintf>
		Error_Handler();
 80061d0:	f001 fbae 	bl	8007930 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061d8:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 80061da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061de:	4619      	mov	r1, r3
 80061e0:	4862      	ldr	r0, [pc, #392]	; (800636c <SM_EnablePwmToAux+0x230>)
 80061e2:	f007 fbb9 	bl	800d958 <HAL_TIM_ConfigClockSource>
 80061e6:	4603      	mov	r3, r0
 80061e8:	461a      	mov	r2, r3
 80061ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d107      	bne.n	8006202 <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 80061f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061f6:	4619      	mov	r1, r3
 80061f8:	485f      	ldr	r0, [pc, #380]	; (8006378 <SM_EnablePwmToAux+0x23c>)
 80061fa:	f00a fb67 	bl	80108cc <iprintf>
		Error_Handler();
 80061fe:	f001 fb97 	bl	8007930 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8006202:	485a      	ldr	r0, [pc, #360]	; (800636c <SM_EnablePwmToAux+0x230>)
 8006204:	f006 fe9b 	bl	800cf3e <HAL_TIM_PWM_Init>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006210:	4293      	cmp	r3, r2
 8006212:	d107      	bne.n	8006224 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8006214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006218:	4619      	mov	r1, r3
 800621a:	4858      	ldr	r0, [pc, #352]	; (800637c <SM_EnablePwmToAux+0x240>)
 800621c:	f00a fb56 	bl	80108cc <iprintf>
		Error_Handler();
 8006220:	f001 fb86 	bl	8007930 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006224:	2320      	movs	r3, #32
 8006226:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006228:	2300      	movs	r3, #0
 800622a:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 800622c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006230:	4619      	mov	r1, r3
 8006232:	484e      	ldr	r0, [pc, #312]	; (800636c <SM_EnablePwmToAux+0x230>)
 8006234:	f008 f946 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006240:	4293      	cmp	r3, r2
 8006242:	d107      	bne.n	8006254 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006248:	4619      	mov	r1, r3
 800624a:	484d      	ldr	r0, [pc, #308]	; (8006380 <SM_EnablePwmToAux+0x244>)
 800624c:	f00a fb3e 	bl	80108cc <iprintf>
		Error_Handler();
 8006250:	f001 fb6e 	bl	8007930 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006254:	2360      	movs	r3, #96	; 0x60
 8006256:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800625c:	2300      	movs	r3, #0
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006260:	2300      	movs	r3, #0
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006264:	f107 031c 	add.w	r3, r7, #28
 8006268:	2200      	movs	r2, #0
 800626a:	4619      	mov	r1, r3
 800626c:	483f      	ldr	r0, [pc, #252]	; (800636c <SM_EnablePwmToAux+0x230>)
 800626e:	f007 fa63 	bl	800d738 <HAL_TIM_PWM_ConfigChannel>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800627a:	4293      	cmp	r3, r2
 800627c:	d107      	bne.n	800628e <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 800627e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006282:	4619      	mov	r1, r3
 8006284:	483f      	ldr	r0, [pc, #252]	; (8006384 <SM_EnablePwmToAux+0x248>)
 8006286:	f00a fb21 	bl	80108cc <iprintf>
		Error_Handler();
 800628a:	f001 fb51 	bl	8007930 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 800628e:	483e      	ldr	r0, [pc, #248]	; (8006388 <SM_EnablePwmToAux+0x24c>)
 8006290:	f00a fb90 	bl	80109b4 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006294:	4b3d      	ldr	r3, [pc, #244]	; (800638c <SM_EnablePwmToAux+0x250>)
 8006296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006298:	4a3c      	ldr	r2, [pc, #240]	; (800638c <SM_EnablePwmToAux+0x250>)
 800629a:	f043 0301 	orr.w	r3, r3, #1
 800629e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062a0:	4b3a      	ldr	r3, [pc, #232]	; (800638c <SM_EnablePwmToAux+0x250>)
 80062a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80062ac:	2340      	movs	r3, #64	; 0x40
 80062ae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b0:	2302      	movs	r3, #2
 80062b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80062bc:	2302      	movs	r3, #2
 80062be:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 80062c0:	4833      	ldr	r0, [pc, #204]	; (8006390 <SM_EnablePwmToAux+0x254>)
 80062c2:	f00a fb77 	bl	80109b4 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062c6:	f107 0308 	add.w	r3, r7, #8
 80062ca:	4619      	mov	r1, r3
 80062cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062d0:	f005 fa1c 	bl	800b70c <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 80062d4:	482f      	ldr	r0, [pc, #188]	; (8006394 <SM_EnablePwmToAux+0x258>)
 80062d6:	f00a fb6d 	bl	80109b4 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 80062da:	4b2c      	ldr	r3, [pc, #176]	; (800638c <SM_EnablePwmToAux+0x250>)
 80062dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062de:	4a2b      	ldr	r2, [pc, #172]	; (800638c <SM_EnablePwmToAux+0x250>)
 80062e0:	f043 0302 	orr.w	r3, r3, #2
 80062e4:	6593      	str	r3, [r2, #88]	; 0x58
 80062e6:	4b29      	ldr	r3, [pc, #164]	; (800638c <SM_EnablePwmToAux+0x250>)
 80062e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 80062f2:	4829      	ldr	r0, [pc, #164]	; (8006398 <SM_EnablePwmToAux+0x25c>)
 80062f4:	f00a fb5e 	bl	80109b4 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80062f8:	2200      	movs	r2, #0
 80062fa:	2100      	movs	r1, #0
 80062fc:	201d      	movs	r0, #29
 80062fe:	f004 fad8 	bl	800a8b2 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 8006302:	4826      	ldr	r0, [pc, #152]	; (800639c <SM_EnablePwmToAux+0x260>)
 8006304:	f00a fb56 	bl	80109b4 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006308:	201d      	movs	r0, #29
 800630a:	f004 faec 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 800630e:	4824      	ldr	r0, [pc, #144]	; (80063a0 <SM_EnablePwmToAux+0x264>)
 8006310:	f00a fb50 	bl	80109b4 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006314:	2100      	movs	r1, #0
 8006316:	4815      	ldr	r0, [pc, #84]	; (800636c <SM_EnablePwmToAux+0x230>)
 8006318:	f006 fe72 	bl	800d000 <HAL_TIM_PWM_Start>
 800631c:	4603      	mov	r3, r0
 800631e:	461a      	mov	r2, r3
 8006320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006324:	4293      	cmp	r3, r2
 8006326:	d107      	bne.n	8006338 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8006328:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800632c:	4619      	mov	r1, r3
 800632e:	481d      	ldr	r0, [pc, #116]	; (80063a4 <SM_EnablePwmToAux+0x268>)
 8006330:	f00a facc 	bl	80108cc <iprintf>
		Error_Handler();
 8006334:	f001 fafc 	bl	8007930 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8006338:	481b      	ldr	r0, [pc, #108]	; (80063a8 <SM_EnablePwmToAux+0x26c>)
 800633a:	f00a fb3b 	bl	80109b4 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 800633e:	2007      	movs	r0, #7
 8006340:	f7ff fd20 	bl	8005d84 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006344:	4819      	ldr	r0, [pc, #100]	; (80063ac <SM_EnablePwmToAux+0x270>)
 8006346:	f00a fb35 	bl	80109b4 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <SM_EnablePwmToAux+0x234>)
 800634c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006350:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006352:	4817      	ldr	r0, [pc, #92]	; (80063b0 <SM_EnablePwmToAux+0x274>)
 8006354:	f00a fb2e 	bl	80109b4 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <SM_EnablePwmToAux+0x234>)
 800635a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006360:	bf00      	nop
 8006362:	3758      	adds	r7, #88	; 0x58
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	08014a14 	.word	0x08014a14
 800636c:	200020fc 	.word	0x200020fc
 8006370:	40000400 	.word	0x40000400
 8006374:	08014a28 	.word	0x08014a28
 8006378:	08014a5c 	.word	0x08014a5c
 800637c:	08014a98 	.word	0x08014a98
 8006380:	08014ac8 	.word	0x08014ac8
 8006384:	08014b10 	.word	0x08014b10
 8006388:	08014b4c 	.word	0x08014b4c
 800638c:	40021000 	.word	0x40021000
 8006390:	08014b7c 	.word	0x08014b7c
 8006394:	08014ba0 	.word	0x08014ba0
 8006398:	08014bd8 	.word	0x08014bd8
 800639c:	08014c00 	.word	0x08014c00
 80063a0:	08014c28 	.word	0x08014c28
 80063a4:	08014c50 	.word	0x08014c50
 80063a8:	08014c84 	.word	0x08014c84
 80063ac:	08014cb0 	.word	0x08014cb0
 80063b0:	08014ce4 	.word	0x08014ce4

080063b4 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 80063ba:	4815      	ldr	r0, [pc, #84]	; (8006410 <SM_DisablePwmToAux+0x5c>)
 80063bc:	f00a fa86 	bl	80108cc <iprintf>

	HAL_StatusTypeDef res = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 80063c4:	4813      	ldr	r0, [pc, #76]	; (8006414 <SM_DisablePwmToAux+0x60>)
 80063c6:	f00a faf5 	bl	80109b4 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 80063ca:	2100      	movs	r1, #0
 80063cc:	4812      	ldr	r0, [pc, #72]	; (8006418 <SM_DisablePwmToAux+0x64>)
 80063ce:	f006 fef1 	bl	800d1b4 <HAL_TIM_PWM_Stop>
 80063d2:	4603      	mov	r3, r0
 80063d4:	461a      	mov	r2, r3
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	4293      	cmp	r3, r2
 80063da:	d106      	bne.n	80063ea <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 80063dc:	79fb      	ldrb	r3, [r7, #7]
 80063de:	4619      	mov	r1, r3
 80063e0:	480e      	ldr	r0, [pc, #56]	; (800641c <SM_DisablePwmToAux+0x68>)
 80063e2:	f00a fa73 	bl	80108cc <iprintf>
		Error_Handler();
 80063e6:	f001 faa3 	bl	8007930 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 80063ea:	480d      	ldr	r0, [pc, #52]	; (8006420 <SM_DisablePwmToAux+0x6c>)
 80063ec:	f00a fae2 	bl	80109b4 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <SM_DisablePwmToAux+0x70>)
 80063f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f4:	4a0b      	ldr	r2, [pc, #44]	; (8006424 <SM_DisablePwmToAux+0x70>)
 80063f6:	f023 0302 	bic.w	r3, r3, #2
 80063fa:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 80063fc:	480a      	ldr	r0, [pc, #40]	; (8006428 <SM_DisablePwmToAux+0x74>)
 80063fe:	f00a fad9 	bl	80109b4 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8006402:	201d      	movs	r0, #29
 8006404:	f004 fa7d 	bl	800a902 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	08014d14 	.word	0x08014d14
 8006414:	08014d28 	.word	0x08014d28
 8006418:	200020fc 	.word	0x200020fc
 800641c:	08014d50 	.word	0x08014d50
 8006420:	08014d84 	.word	0x08014d84
 8006424:	40021000 	.word	0x40021000
 8006428:	08014dc0 	.word	0x08014dc0

0800642c <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b0b2      	sub	sp, #200	; 0xc8
 8006430:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006432:	4860      	ldr	r0, [pc, #384]	; (80065b4 <SM_EnableDacToAux+0x188>)
 8006434:	f00a fa4a 	bl	80108cc <iprintf>

	HAL_StatusTypeDef res = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 800643e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006442:	2230      	movs	r2, #48	; 0x30
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f009 fddc 	bl	8010004 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800644c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 800645c:	4b56      	ldr	r3, [pc, #344]	; (80065b8 <SM_EnableDacToAux+0x18c>)
 800645e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006460:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006464:	4618      	mov	r0, r3
 8006466:	f004 fa66 	bl	800a936 <HAL_DAC_Init>
 800646a:	4603      	mov	r3, r0
 800646c:	461a      	mov	r2, r3
 800646e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006472:	4293      	cmp	r3, r2
 8006474:	d107      	bne.n	8006486 <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006476:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800647a:	4619      	mov	r1, r3
 800647c:	484f      	ldr	r0, [pc, #316]	; (80065bc <SM_EnableDacToAux+0x190>)
 800647e:	f00a fa25 	bl	80108cc <iprintf>
		Error_Handler();
 8006482:	f001 fa55 	bl	8007930 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800648a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 800648e:	2300      	movs	r3, #0
 8006490:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006494:	2300      	movs	r3, #0
 8006496:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800649a:	2300      	movs	r3, #0
 800649c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_TRGO;
 80064a0:	2312      	movs	r3, #18
 80064a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80064b8:	2300      	movs	r3, #0
 80064ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 80064be:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80064c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80064c6:	2200      	movs	r2, #0
 80064c8:	4618      	mov	r0, r3
 80064ca:	f004 fc1d 	bl	800ad08 <HAL_DAC_ConfigChannel>
 80064ce:	4603      	mov	r3, r0
 80064d0:	461a      	mov	r2, r3
 80064d2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d107      	bne.n	80064ea <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 80064da:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80064de:	4619      	mov	r1, r3
 80064e0:	4837      	ldr	r0, [pc, #220]	; (80065c0 <SM_EnableDacToAux+0x194>)
 80064e2:	f00a f9f3 	bl	80108cc <iprintf>
		Error_Handler();
 80064e6:	f001 fa23 	bl	8007930 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 80064ea:	4836      	ldr	r0, [pc, #216]	; (80065c4 <SM_EnableDacToAux+0x198>)
 80064ec:	f00a fa62 	bl	80109b4 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 80064f0:	4b35      	ldr	r3, [pc, #212]	; (80065c8 <SM_EnableDacToAux+0x19c>)
 80064f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f4:	4a34      	ldr	r2, [pc, #208]	; (80065c8 <SM_EnableDacToAux+0x19c>)
 80064f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064fc:	4b32      	ldr	r3, [pc, #200]	; (80065c8 <SM_EnableDacToAux+0x19c>)
 80064fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006508:	4830      	ldr	r0, [pc, #192]	; (80065cc <SM_EnableDacToAux+0x1a0>)
 800650a:	f00a fa53 	bl	80109b4 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800650e:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <SM_EnableDacToAux+0x19c>)
 8006510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006512:	4a2d      	ldr	r2, [pc, #180]	; (80065c8 <SM_EnableDacToAux+0x19c>)
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800651a:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <SM_EnableDacToAux+0x19c>)
 800651c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006526:	2340      	movs	r3, #64	; 0x40
 8006528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800652c:	2303      	movs	r3, #3
 800652e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006532:	2300      	movs	r3, #0
 8006534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006538:	4825      	ldr	r0, [pc, #148]	; (80065d0 <SM_EnableDacToAux+0x1a4>)
 800653a:	f00a fa3b 	bl	80109b4 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800653e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006542:	4619      	mov	r1, r3
 8006544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006548:	f005 f8e0 	bl	800b70c <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 800654c:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <SM_EnableDacToAux+0x1a8>)
 800654e:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006550:	2329      	movs	r3, #41	; 0x29
 8006552:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006554:	2310      	movs	r3, #16
 8006556:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006558:	2300      	movs	r3, #0
 800655a:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006564:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800656c:	2320      	movs	r3, #32
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006570:	2300      	movs	r3, #0
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006574:	f107 030c 	add.w	r3, r7, #12
 8006578:	4618      	mov	r0, r3
 800657a:	f004 fdfb 	bl	800b174 <HAL_DMA_Init>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006586:	4293      	cmp	r3, r2
 8006588:	d107      	bne.n	800659a <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 800658a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800658e:	4619      	mov	r1, r3
 8006590:	4811      	ldr	r0, [pc, #68]	; (80065d8 <SM_EnableDacToAux+0x1ac>)
 8006592:	f00a f99b 	bl	80108cc <iprintf>
		Error_Handler();
 8006596:	f001 f9cb 	bl	8007930 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 800659a:	4810      	ldr	r0, [pc, #64]	; (80065dc <SM_EnableDacToAux+0x1b0>)
 800659c:	f00a fa0a 	bl	80109b4 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 80065a0:	f107 030c 	add.w	r3, r7, #12
 80065a4:	677b      	str	r3, [r7, #116]	; 0x74
 80065a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 80065ac:	bf00      	nop
 80065ae:	37c8      	adds	r7, #200	; 0xc8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	08014de8 	.word	0x08014de8
 80065b8:	50000c00 	.word	0x50000c00
 80065bc:	08014dfc 	.word	0x08014dfc
 80065c0:	08014e28 	.word	0x08014e28
 80065c4:	08014e60 	.word	0x08014e60
 80065c8:	40021000 	.word	0x40021000
 80065cc:	08014e90 	.word	0x08014e90
 80065d0:	08014ec0 	.word	0x08014ec0
 80065d4:	40020030 	.word	0x40020030
 80065d8:	08014ee4 	.word	0x08014ee4
 80065dc:	08014f10 	.word	0x08014f10

080065e0 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 80065e4:	4806      	ldr	r0, [pc, #24]	; (8006600 <SM_DisableDacToAux+0x20>)
 80065e6:	f00a f9e5 	bl	80109b4 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 80065ea:	4806      	ldr	r0, [pc, #24]	; (8006604 <SM_DisableDacToAux+0x24>)
 80065ec:	f00a f9e2 	bl	80109b4 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 80065f0:	2140      	movs	r1, #64	; 0x40
 80065f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065f6:	f005 fa0b 	bl	800ba10 <HAL_GPIO_DeInit>

}
 80065fa:	bf00      	nop
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	08014f34 	.word	0x08014f34
 8006604:	08014f48 	.word	0x08014f48

08006608 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006618:	4b08      	ldr	r3, [pc, #32]	; (800663c <SM_GetEncoderValue+0x34>)
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	b29a      	uxth	r2, r3
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <SM_GetEncoderValue+0x34>)
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	b29b      	uxth	r3, r3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	e002      	b.n	8006630 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 800662a:	4b04      	ldr	r3, [pc, #16]	; (800663c <SM_GetEncoderValue+0x34>)
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	b29b      	uxth	r3, r3
	}
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	40012c00 	.word	0x40012c00

08006640 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <SM_GetOutputInHertz+0x18>
 8006650:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	e008      	b.n	800666a <SM_GetOutputInHertz+0x2a>
 8006658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006666:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 800666a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <SM_GetOutputInHertz+0x3c>
 8006674:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	e008      	b.n	800668e <SM_GetOutputInHertz+0x4e>
 800667c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668a:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 800668e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006692:	edd7 7a01 	vldr	s15, [r7, #4]
 8006696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800669a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80066c4 <SM_GetOutputInHertz+0x84>
 800669e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a2:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 80066a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80066aa:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80066c8 <SM_GetOutputInHertz+0x88>
 80066ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80066b6:	eeb0 0a67 	vmov.f32	s0, s15
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	4d2037a0 	.word	0x4d2037a0
 80066c8:	42f00000 	.word	0x42f00000

080066cc <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 80066d8:	887b      	ldrh	r3, [r7, #2]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <SM_ConvertPeriodToHertz+0x16>
 80066de:	2301      	movs	r3, #1
 80066e0:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 80066e2:	887b      	ldrh	r3, [r7, #2]
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006714 <SM_ConvertPeriodToHertz+0x48>
 80066fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006702:	eef0 7a66 	vmov.f32	s15, s13
}
 8006706:	eeb0 0a67 	vmov.f32	s0, s15
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	4d2037a0 	.word	0x4d2037a0

08006718 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 800671c:	4b03      	ldr	r3, [pc, #12]	; (800672c <SM_IsFuncPwmDutyMode+0x14>)
 800671e:	781b      	ldrb	r3, [r3, #0]
}
 8006720:	4618      	mov	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20001e9a 	.word	0x20001e9a

08006730 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f083 0301 	eor.w	r3, r3, #1
 800673c:	b2da      	uxtb	r2, r3
 800673e:	4b03      	ldr	r3, [pc, #12]	; (800674c <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006740:	701a      	strb	r2, [r3, #0]
}
 8006742:	bf00      	nop
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	20001e9a 	.word	0x20001e9a

08006750 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <SM_ResetFuncPwmDutyMode+0x14>)
 8006756:	2200      	movs	r2, #0
 8006758:	701a      	strb	r2, [r3, #0]

}
 800675a:	bf00      	nop
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	20001e9a 	.word	0x20001e9a

08006768 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 800676c:	4b03      	ldr	r3, [pc, #12]	; (800677c <VPP_ResetLastEncoderValue+0x14>)
 800676e:	2200      	movs	r2, #0
 8006770:	801a      	strh	r2, [r3, #0]
}
 8006772:	bf00      	nop
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20001e9c 	.word	0x20001e9c

08006780 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	4603      	mov	r3, r0
 8006788:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800678a:	79fa      	ldrb	r2, [r7, #7]
 800678c:	4613      	mov	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4a10      	ldr	r2, [pc, #64]	; (80067d8 <VPP_ApplyProfileToSignal+0x58>)
 8006796:	4413      	add	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 800679a:	2000      	movs	r0, #0
 800679c:	f7ff fcb8 	bl	8006110 <SM_GetOutputChannel>
 80067a0:	4602      	mov	r2, r0
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	7a1b      	ldrb	r3, [r3, #8]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff fae9 	bl	8005d84 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8b1b      	ldrh	r3, [r3, #24]
 80067c2:	4618      	mov	r0, r3
 80067c4:	eef0 0a47 	vmov.f32	s1, s14
 80067c8:	eeb0 0a67 	vmov.f32	s0, s15
 80067cc:	f000 f830 	bl	8006830 <_ProcessSignalDataTable>


}
 80067d0:	bf00      	nop
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20000178 	.word	0x20000178

080067dc <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80067e6:	79fa      	ldrb	r2, [r7, #7]
 80067e8:	4613      	mov	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4a0e      	ldr	r2, [pc, #56]	; (800682c <VPP_ApplyProfileToAux+0x50>)
 80067f2:	4413      	add	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 80067f6:	2001      	movs	r0, #1
 80067f8:	f7ff fc8a 	bl	8006110 <SM_GetOutputChannel>
 80067fc:	4602      	mov	r2, r0
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	edd3 7a04 	vldr	s15, [r3, #16]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	ed93 7a05 	vldr	s14, [r3, #20]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8b1b      	ldrh	r3, [r3, #24]
 8006814:	4618      	mov	r0, r3
 8006816:	eef0 0a47 	vmov.f32	s1, s14
 800681a:	eeb0 0a67 	vmov.f32	s0, s15
 800681e:	f000 f88d 	bl	800693c <_ProcessAuxDataTable>



}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000178 	.word	0x20000178

08006830 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af00      	add	r7, sp, #0
 8006836:	ed87 0a03 	vstr	s0, [r7, #12]
 800683a:	edc7 0a02 	vstr	s1, [r7, #8]
 800683e:	4603      	mov	r3, r0
 8006840:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8006842:	2000      	movs	r0, #0
 8006844:	f7ff fc64 	bl	8006110 <SM_GetOutputChannel>
 8006848:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b06      	cmp	r3, #6
 8006854:	d06b      	beq.n	800692e <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
 800685a:	e00c      	b.n	8006876 <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	4933      	ldr	r1, [pc, #204]	; (8006938 <_ProcessSignalDataTable+0x108>)
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	3301      	adds	r3, #1
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	2b77      	cmp	r3, #119	; 0x77
 800687a:	ddef      	ble.n	800685c <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 800687c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006880:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006888:	88fb      	ldrh	r3, [r7, #6]
 800688a:	089b      	lsrs	r3, r3, #2
 800688c:	b29b      	uxth	r3, r3
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006896:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	e02e      	b.n	80068fe <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80068a0:	4a25      	ldr	r2, [pc, #148]	; (8006938 <_ProcessSignalDataTable+0x108>)
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80068b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068bc:	ee17 1a90 	vmov	r1, s15
 80068c0:	4a1d      	ldr	r2, [pc, #116]	; (8006938 <_ProcessSignalDataTable+0x108>)
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80068c8:	4a1b      	ldr	r2, [pc, #108]	; (8006938 <_ProcessSignalDataTable+0x108>)
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80068dc:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80068e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ec:	ee17 1a90 	vmov	r1, s15
 80068f0:	4a11      	ldr	r2, [pc, #68]	; (8006938 <_ProcessSignalDataTable+0x108>)
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	3301      	adds	r3, #1
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b77      	cmp	r3, #119	; 0x77
 8006902:	ddcd      	ble.n	80068a0 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006904:	2300      	movs	r3, #0
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	e00e      	b.n	8006928 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 800690a:	2000      	movs	r0, #0
 800690c:	f7ff fc00 	bl	8006110 <SM_GetOutputChannel>
 8006910:	4601      	mov	r1, r0
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <_ProcessSignalDataTable+0x108>)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	3302      	adds	r3, #2
 800691e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	3301      	adds	r3, #1
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b77      	cmp	r3, #119	; 0x77
 800692c:	dded      	ble.n	800690a <_ProcessSignalDataTable+0xda>
		}
	}

}
 800692e:	bf00      	nop
 8006930:	3728      	adds	r7, #40	; 0x28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	2000253c 	.word	0x2000253c

0800693c <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	ed87 0a03 	vstr	s0, [r7, #12]
 8006946:	edc7 0a02 	vstr	s1, [r7, #8]
 800694a:	4603      	mov	r3, r0
 800694c:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 800694e:	2001      	movs	r0, #1
 8006950:	f7ff fbde 	bl	8006110 <SM_GetOutputChannel>
 8006954:	4603      	mov	r3, r0
 8006956:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b06      	cmp	r3, #6
 800695e:	d059      	beq.n	8006a14 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	e00f      	b.n	8006986 <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8006966:	2001      	movs	r0, #1
 8006968:	f7ff fbd2 	bl	8006110 <SM_GetOutputChannel>
 800696c:	4603      	mov	r3, r0
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4933      	ldr	r1, [pc, #204]	; (8006a48 <_ProcessAuxDataTable+0x10c>)
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b77      	cmp	r3, #119	; 0x77
 800698a:	ddec      	ble.n	8006966 <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 800698c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006990:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	089b      	lsrs	r3, r3, #2
 800699c:	b29b      	uxth	r3, r3
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069a6:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80069aa:	2300      	movs	r3, #0
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e02e      	b.n	8006a0e <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80069b0:	4a25      	ldr	r2, [pc, #148]	; (8006a48 <_ProcessAuxDataTable+0x10c>)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80069c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069cc:	ee17 1a90 	vmov	r1, s15
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <_ProcessAuxDataTable+0x10c>)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80069d8:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <_ProcessAuxDataTable+0x10c>)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80069ec:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80069f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80069f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069fc:	ee17 1a90 	vmov	r1, s15
 8006a00:	4a11      	ldr	r2, [pc, #68]	; (8006a48 <_ProcessAuxDataTable+0x10c>)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b77      	cmp	r3, #119	; 0x77
 8006a12:	ddcd      	ble.n	80069b0 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a14:	2300      	movs	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	e00e      	b.n	8006a38 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	f7ff fb78 	bl	8006110 <SM_GetOutputChannel>
 8006a20:	4601      	mov	r1, r0
 8006a22:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <_ProcessAuxDataTable+0x10c>)
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	3301      	adds	r3, #1
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	2b77      	cmp	r3, #119	; 0x77
 8006a3c:	dded      	ble.n	8006a1a <_ProcessAuxDataTable+0xde>
	}
}
 8006a3e:	bf00      	nop
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	2000253c 	.word	0x2000253c

08006a4c <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8006a56:	2000      	movs	r0, #0
 8006a58:	f7ff fb5a 	bl	8006110 <SM_GetOutputChannel>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006a66:	4b15      	ldr	r3, [pc, #84]	; (8006abc <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	88fa      	ldrh	r2, [r7, #6]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d90c      	bls.n	8006a8a <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	3301      	adds	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b61      	cmp	r3, #97	; 0x61
 8006a7a:	d901      	bls.n	8006a80 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8006a7c:	2361      	movs	r3, #97	; 0x61
 8006a7e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fe7c 	bl	8006780 <VPP_ApplyProfileToSignal>
 8006a88:	e010      	b.n	8006aac <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006a8a:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d20b      	bcs.n	8006aac <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b61      	cmp	r3, #97	; 0x61
 8006a9e:	d901      	bls.n	8006aa4 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff fe6a 	bl	8006780 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8006aac:	4a03      	ldr	r2, [pc, #12]	; (8006abc <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	8013      	strh	r3, [r2, #0]

}
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20001e9c 	.word	0x20001e9c

08006ac0 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8006aca:	2001      	movs	r0, #1
 8006acc:	f7ff fb20 	bl	8006110 <SM_GetOutputChannel>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006ada:	4b15      	ldr	r3, [pc, #84]	; (8006b30 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	88fa      	ldrh	r2, [r7, #6]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d90c      	bls.n	8006afe <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	2b61      	cmp	r3, #97	; 0x61
 8006aee:	d901      	bls.n	8006af4 <VPP_MapEncoderPositionToAuxOutput+0x34>
 8006af0:	2361      	movs	r3, #97	; 0x61
 8006af2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff fe70 	bl	80067dc <VPP_ApplyProfileToAux>
 8006afc:	e010      	b.n	8006b20 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006afe:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d20b      	bcs.n	8006b20 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	2b61      	cmp	r3, #97	; 0x61
 8006b12:	d901      	bls.n	8006b18 <VPP_MapEncoderPositionToAuxOutput+0x58>
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fe5e 	bl	80067dc <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8006b20:	4a03      	ldr	r2, [pc, #12]	; (8006b30 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	8013      	strh	r3, [r2, #0]

}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20001e9c 	.word	0x20001e9c

08006b34 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08c      	sub	sp, #48	; 0x30
 8006b38:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	605a      	str	r2, [r3, #4]
 8006b44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	2220      	movs	r2, #32
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f009 fa59 	bl	8010004 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006b52:	4b32      	ldr	r3, [pc, #200]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006b5a:	4b30      	ldr	r3, [pc, #192]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006b60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006b62:	4b2e      	ldr	r3, [pc, #184]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006b68:	4b2c      	ldr	r3, [pc, #176]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006b6e:	4b2b      	ldr	r3, [pc, #172]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006b74:	4b29      	ldr	r3, [pc, #164]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006b7a:	4b28      	ldr	r3, [pc, #160]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006b80:	4b26      	ldr	r3, [pc, #152]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006b86:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006b8c:	4b23      	ldr	r3, [pc, #140]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006b92:	4b22      	ldr	r3, [pc, #136]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006b9a:	4b20      	ldr	r3, [pc, #128]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ba0:	4b1e      	ldr	r3, [pc, #120]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006bae:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006bb6:	4b19      	ldr	r3, [pc, #100]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006bbe:	4817      	ldr	r0, [pc, #92]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006bc0:	f001 ffd2 	bl	8008b68 <HAL_ADC_Init>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006bca:	f000 feb1 	bl	8007930 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4810      	ldr	r0, [pc, #64]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006bda:	f003 f8a3 	bl	8009d24 <HAL_ADCEx_MultiModeConfigChannel>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006be4:	f000 fea4 	bl	8007930 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <MX_ADC1_Init+0xec>)
 8006bea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006bec:	2306      	movs	r3, #6
 8006bee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006bf4:	237f      	movs	r3, #127	; 0x7f
 8006bf6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006c00:	1d3b      	adds	r3, r7, #4
 8006c02:	4619      	mov	r1, r3
 8006c04:	4805      	ldr	r0, [pc, #20]	; (8006c1c <MX_ADC1_Init+0xe8>)
 8006c06:	f002 fabd 	bl	8009184 <HAL_ADC_ConfigChannel>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006c10:	f000 fe8e 	bl	8007930 <Error_Handler>
  }

}
 8006c14:	bf00      	nop
 8006c16:	3730      	adds	r7, #48	; 0x30
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	2000271c 	.word	0x2000271c
 8006c20:	0c900008 	.word	0x0c900008

08006c24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08a      	sub	sp, #40	; 0x28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c2c:	f107 0314 	add.w	r3, r7, #20
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	605a      	str	r2, [r3, #4]
 8006c36:	609a      	str	r2, [r3, #8]
 8006c38:	60da      	str	r2, [r3, #12]
 8006c3a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c44:	d14f      	bne.n	8006ce6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006c46:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <HAL_ADC_MspInit+0xcc>)
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	4a29      	ldr	r2, [pc, #164]	; (8006cf0 <HAL_ADC_MspInit+0xcc>)
 8006c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c52:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <HAL_ADC_MspInit+0xcc>)
 8006c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c5e:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <HAL_ADC_MspInit+0xcc>)
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	4a23      	ldr	r2, [pc, #140]	; (8006cf0 <HAL_ADC_MspInit+0xcc>)
 8006c64:	f043 0301 	orr.w	r3, r3, #1
 8006c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c6a:	4b21      	ldr	r3, [pc, #132]	; (8006cf0 <HAL_ADC_MspInit+0xcc>)
 8006c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c76:	2304      	movs	r3, #4
 8006c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c82:	f107 0314 	add.w	r3, r7, #20
 8006c86:	4619      	mov	r1, r3
 8006c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c8c:	f004 fd3e 	bl	800b70c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006c90:	4b18      	ldr	r3, [pc, #96]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006c92:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <HAL_ADC_MspInit+0xd4>)
 8006c94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006c96:	4b17      	ldr	r3, [pc, #92]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006c98:	2205      	movs	r2, #5
 8006c9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c9c:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ca2:	4b14      	ldr	r3, [pc, #80]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006ca8:	4b12      	ldr	r3, [pc, #72]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006caa:	2280      	movs	r2, #128	; 0x80
 8006cac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006cae:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006cb6:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006cc4:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006cca:	480a      	ldr	r0, [pc, #40]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006ccc:	f004 fa52 	bl	800b174 <HAL_DMA_Init>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006cd6:	f000 fe2b 	bl	8007930 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a05      	ldr	r2, [pc, #20]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006cde:	655a      	str	r2, [r3, #84]	; 0x54
 8006ce0:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <HAL_ADC_MspInit+0xd0>)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	3728      	adds	r7, #40	; 0x28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	20002788 	.word	0x20002788
 8006cf8:	40020008 	.word	0x40020008

08006cfc <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006d00:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <MX_COMP1_Init+0x44>)
 8006d02:	4a10      	ldr	r2, [pc, #64]	; (8006d44 <MX_COMP1_Init+0x48>)
 8006d04:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006d06:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <MX_COMP1_Init+0x44>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006d0c:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <MX_COMP1_Init+0x44>)
 8006d0e:	4a0e      	ldr	r2, [pc, #56]	; (8006d48 <MX_COMP1_Init+0x4c>)
 8006d10:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006d12:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <MX_COMP1_Init+0x44>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8006d18:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <MX_COMP1_Init+0x44>)
 8006d1a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8006d1e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <MX_COMP1_Init+0x44>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8006d26:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <MX_COMP1_Init+0x44>)
 8006d28:	2231      	movs	r2, #49	; 0x31
 8006d2a:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006d2c:	4804      	ldr	r0, [pc, #16]	; (8006d40 <MX_COMP1_Init+0x44>)
 8006d2e:	f003 fa79 	bl	800a224 <HAL_COMP_Init>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8006d38:	f000 fdfa 	bl	8007930 <Error_Handler>
  }

}
 8006d3c:	bf00      	nop
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	200027e8 	.word	0x200027e8
 8006d44:	40010200 	.word	0x40010200
 8006d48:	00800030 	.word	0x00800030

08006d4c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d54:	f107 030c 	add.w	r3, r7, #12
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <HAL_COMP_MspInit+0x6c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d120      	bne.n	8006db0 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <HAL_COMP_MspInit+0x70>)
 8006d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d72:	4a12      	ldr	r2, [pc, #72]	; (8006dbc <HAL_COMP_MspInit+0x70>)
 8006d74:	f043 0301 	orr.w	r3, r3, #1
 8006d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <HAL_COMP_MspInit+0x70>)
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	60bb      	str	r3, [r7, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006d86:	2302      	movs	r3, #2
 8006d88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d92:	f107 030c 	add.w	r3, r7, #12
 8006d96:	4619      	mov	r1, r3
 8006d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d9c:	f004 fcb6 	bl	800b70c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8006da0:	2200      	movs	r2, #0
 8006da2:	2100      	movs	r1, #0
 8006da4:	2040      	movs	r0, #64	; 0x40
 8006da6:	f003 fd84 	bl	800a8b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8006daa:	2040      	movs	r0, #64	; 0x40
 8006dac:	f003 fd9b 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006db0:	bf00      	nop
 8006db2:	3720      	adds	r7, #32
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40010200 	.word	0x40010200
 8006dbc:	40021000 	.word	0x40021000

08006dc0 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08c      	sub	sp, #48	; 0x30
 8006dc4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	2230      	movs	r2, #48	; 0x30
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f009 f919 	bl	8010004 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006dd2:	4b1e      	ldr	r3, [pc, #120]	; (8006e4c <MX_DAC1_Init+0x8c>)
 8006dd4:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <MX_DAC1_Init+0x90>)
 8006dd6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006dd8:	481c      	ldr	r0, [pc, #112]	; (8006e4c <MX_DAC1_Init+0x8c>)
 8006dda:	f003 fdac 	bl	800a936 <HAL_DAC_Init>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006de4:	f000 fda4 	bl	8007930 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dec:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006df2:	2300      	movs	r3, #0
 8006df4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006dfa:	2312      	movs	r3, #18
 8006dfc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006e06:	2301      	movs	r3, #1
 8006e08:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006e0e:	463b      	mov	r3, r7
 8006e10:	2200      	movs	r2, #0
 8006e12:	4619      	mov	r1, r3
 8006e14:	480d      	ldr	r0, [pc, #52]	; (8006e4c <MX_DAC1_Init+0x8c>)
 8006e16:	f003 ff77 	bl	800ad08 <HAL_DAC_ConfigChannel>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006e20:	f000 fd86 	bl	8007930 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	2210      	movs	r2, #16
 8006e30:	4619      	mov	r1, r3
 8006e32:	4806      	ldr	r0, [pc, #24]	; (8006e4c <MX_DAC1_Init+0x8c>)
 8006e34:	f003 ff68 	bl	800ad08 <HAL_DAC_ConfigChannel>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006e3e:	f000 fd77 	bl	8007930 <Error_Handler>
  }

}
 8006e42:	bf00      	nop
 8006e44:	3730      	adds	r7, #48	; 0x30
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20002820 	.word	0x20002820
 8006e50:	50000800 	.word	0x50000800

08006e54 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08c      	sub	sp, #48	; 0x30
 8006e58:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	2230      	movs	r2, #48	; 0x30
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f009 f8cf 	bl	8010004 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006e66:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <MX_DAC2_Init+0x6c>)
 8006e68:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <MX_DAC2_Init+0x70>)
 8006e6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006e6c:	4814      	ldr	r0, [pc, #80]	; (8006ec0 <MX_DAC2_Init+0x6c>)
 8006e6e:	f003 fd62 	bl	800a936 <HAL_DAC_Init>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006e78:	f000 fd5a 	bl	8007930 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006e7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e80:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006e86:	2300      	movs	r3, #0
 8006e88:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006e8e:	2312      	movs	r3, #18
 8006e90:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4805      	ldr	r0, [pc, #20]	; (8006ec0 <MX_DAC2_Init+0x6c>)
 8006eaa:	f003 ff2d 	bl	800ad08 <HAL_DAC_ConfigChannel>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006eb4:	f000 fd3c 	bl	8007930 <Error_Handler>
  }

}
 8006eb8:	bf00      	nop
 8006eba:	3730      	adds	r7, #48	; 0x30
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	2000280c 	.word	0x2000280c
 8006ec4:	50000c00 	.word	0x50000c00

08006ec8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08c      	sub	sp, #48	; 0x30
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ed0:	f107 031c 	add.w	r3, r7, #28
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	609a      	str	r2, [r3, #8]
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a56      	ldr	r2, [pc, #344]	; (8007040 <HAL_DAC_MspInit+0x178>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d150      	bne.n	8006f8c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006eea:	4b56      	ldr	r3, [pc, #344]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eee:	4a55      	ldr	r2, [pc, #340]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ef6:	4b53      	ldr	r3, [pc, #332]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f02:	4b50      	ldr	r3, [pc, #320]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f06:	4a4f      	ldr	r2, [pc, #316]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f0e:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006f1a:	2330      	movs	r3, #48	; 0x30
 8006f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f26:	f107 031c 	add.w	r3, r7, #28
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f30:	f004 fbec 	bl	800b70c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006f34:	4b44      	ldr	r3, [pc, #272]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f36:	4a45      	ldr	r2, [pc, #276]	; (800704c <HAL_DAC_MspInit+0x184>)
 8006f38:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006f3a:	4b43      	ldr	r3, [pc, #268]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f3c:	2206      	movs	r2, #6
 8006f3e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f40:	4b41      	ldr	r3, [pc, #260]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f42:	2210      	movs	r2, #16
 8006f44:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f46:	4b40      	ldr	r3, [pc, #256]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006f4c:	4b3e      	ldr	r3, [pc, #248]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f4e:	2280      	movs	r2, #128	; 0x80
 8006f50:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f52:	4b3d      	ldr	r3, [pc, #244]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f58:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f5a:	4b3b      	ldr	r3, [pc, #236]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f60:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006f62:	4b39      	ldr	r3, [pc, #228]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f64:	2220      	movs	r2, #32
 8006f66:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006f68:	4b37      	ldr	r3, [pc, #220]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006f6e:	4836      	ldr	r0, [pc, #216]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f70:	f004 f900 	bl	800b174 <HAL_DMA_Init>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006f7a:	f000 fcd9 	bl	8007930 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a31      	ldr	r2, [pc, #196]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f82:	609a      	str	r2, [r3, #8]
 8006f84:	4a30      	ldr	r2, [pc, #192]	; (8007048 <HAL_DAC_MspInit+0x180>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8006f8a:	e054      	b.n	8007036 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <HAL_DAC_MspInit+0x188>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d14f      	bne.n	8007036 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006f96:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9a:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fa2:	4b28      	ldr	r3, [pc, #160]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fae:	4b25      	ldr	r3, [pc, #148]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb2:	4a24      	ldr	r2, [pc, #144]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fba:	4b22      	ldr	r3, [pc, #136]	; (8007044 <HAL_DAC_MspInit+0x17c>)
 8006fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006fc6:	2340      	movs	r3, #64	; 0x40
 8006fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fd2:	f107 031c 	add.w	r3, r7, #28
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fdc:	f004 fb96 	bl	800b70c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006fe0:	4b1c      	ldr	r3, [pc, #112]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8006fe2:	4a1d      	ldr	r2, [pc, #116]	; (8007058 <HAL_DAC_MspInit+0x190>)
 8006fe4:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006fe6:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8006fe8:	2229      	movs	r2, #41	; 0x29
 8006fea:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fec:	4b19      	ldr	r3, [pc, #100]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8006fee:	2210      	movs	r2, #16
 8006ff0:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ff2:	4b18      	ldr	r3, [pc, #96]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006ff8:	4b16      	ldr	r3, [pc, #88]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8006ffa:	2280      	movs	r2, #128	; 0x80
 8006ffc:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ffe:	4b15      	ldr	r3, [pc, #84]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8007000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007004:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007006:	4b13      	ldr	r3, [pc, #76]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8007008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800700c:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800700e:	4b11      	ldr	r3, [pc, #68]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8007010:	2220      	movs	r2, #32
 8007012:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007014:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8007016:	2200      	movs	r2, #0
 8007018:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800701a:	480e      	ldr	r0, [pc, #56]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 800701c:	f004 f8aa 	bl	800b174 <HAL_DMA_Init>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8007026:	f000 fc83 	bl	8007930 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a09      	ldr	r2, [pc, #36]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 800702e:	609a      	str	r2, [r3, #8]
 8007030:	4a08      	ldr	r2, [pc, #32]	; (8007054 <HAL_DAC_MspInit+0x18c>)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007036:	bf00      	nop
 8007038:	3730      	adds	r7, #48	; 0x30
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	50000800 	.word	0x50000800
 8007044:	40021000 	.word	0x40021000
 8007048:	20002090 	.word	0x20002090
 800704c:	4002001c 	.word	0x4002001c
 8007050:	50000c00 	.word	0x50000c00
 8007054:	20002834 	.word	0x20002834
 8007058:	40020030 	.word	0x40020030

0800705c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007062:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <MX_DMA_Init+0x70>)
 8007064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007066:	4a19      	ldr	r2, [pc, #100]	; (80070cc <MX_DMA_Init+0x70>)
 8007068:	f043 0304 	orr.w	r3, r3, #4
 800706c:	6493      	str	r3, [r2, #72]	; 0x48
 800706e:	4b17      	ldr	r3, [pc, #92]	; (80070cc <MX_DMA_Init+0x70>)
 8007070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	607b      	str	r3, [r7, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800707a:	4b14      	ldr	r3, [pc, #80]	; (80070cc <MX_DMA_Init+0x70>)
 800707c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707e:	4a13      	ldr	r2, [pc, #76]	; (80070cc <MX_DMA_Init+0x70>)
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	6493      	str	r3, [r2, #72]	; 0x48
 8007086:	4b11      	ldr	r3, [pc, #68]	; (80070cc <MX_DMA_Init+0x70>)
 8007088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007092:	2200      	movs	r2, #0
 8007094:	2101      	movs	r1, #1
 8007096:	200b      	movs	r0, #11
 8007098:	f003 fc0b 	bl	800a8b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800709c:	200b      	movs	r0, #11
 800709e:	f003 fc22 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80070a2:	2200      	movs	r2, #0
 80070a4:	2100      	movs	r1, #0
 80070a6:	200c      	movs	r0, #12
 80070a8:	f003 fc03 	bl	800a8b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80070ac:	200c      	movs	r0, #12
 80070ae:	f003 fc1a 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80070b2:	2200      	movs	r2, #0
 80070b4:	2100      	movs	r1, #0
 80070b6:	200d      	movs	r0, #13
 80070b8:	f003 fbfb 	bl	800a8b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80070bc:	200d      	movs	r0, #13
 80070be:	f003 fc12 	bl	800a8e6 <HAL_NVIC_EnableIRQ>

}
 80070c2:	bf00      	nop
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40021000 	.word	0x40021000

080070d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070d4:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <__NVIC_GetPriorityGrouping+0x18>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	0a1b      	lsrs	r3, r3, #8
 80070da:	f003 0307 	and.w	r3, r3, #7
}
 80070de:	4618      	mov	r0, r3
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	e000ed00 	.word	0xe000ed00

080070ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	db0b      	blt.n	8007116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	f003 021f 	and.w	r2, r3, #31
 8007104:	4907      	ldr	r1, [pc, #28]	; (8007124 <__NVIC_EnableIRQ+0x38>)
 8007106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710a:	095b      	lsrs	r3, r3, #5
 800710c:	2001      	movs	r0, #1
 800710e:	fa00 f202 	lsl.w	r2, r0, r2
 8007112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	e000e100 	.word	0xe000e100

08007128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	6039      	str	r1, [r7, #0]
 8007132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007138:	2b00      	cmp	r3, #0
 800713a:	db0a      	blt.n	8007152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	b2da      	uxtb	r2, r3
 8007140:	490c      	ldr	r1, [pc, #48]	; (8007174 <__NVIC_SetPriority+0x4c>)
 8007142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007146:	0112      	lsls	r2, r2, #4
 8007148:	b2d2      	uxtb	r2, r2
 800714a:	440b      	add	r3, r1
 800714c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007150:	e00a      	b.n	8007168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4908      	ldr	r1, [pc, #32]	; (8007178 <__NVIC_SetPriority+0x50>)
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	3b04      	subs	r3, #4
 8007160:	0112      	lsls	r2, r2, #4
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	440b      	add	r3, r1
 8007166:	761a      	strb	r2, [r3, #24]
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	e000e100 	.word	0xe000e100
 8007178:	e000ed00 	.word	0xe000ed00

0800717c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800717c:	b480      	push	{r7}
 800717e:	b089      	sub	sp, #36	; 0x24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f1c3 0307 	rsb	r3, r3, #7
 8007196:	2b04      	cmp	r3, #4
 8007198:	bf28      	it	cs
 800719a:	2304      	movcs	r3, #4
 800719c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	3304      	adds	r3, #4
 80071a2:	2b06      	cmp	r3, #6
 80071a4:	d902      	bls.n	80071ac <NVIC_EncodePriority+0x30>
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3b03      	subs	r3, #3
 80071aa:	e000      	b.n	80071ae <NVIC_EncodePriority+0x32>
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ba:	43da      	mvns	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	401a      	ands	r2, r3
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	fa01 f303 	lsl.w	r3, r1, r3
 80071ce:	43d9      	mvns	r1, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071d4:	4313      	orrs	r3, r2
         );
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3724      	adds	r7, #36	; 0x24
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80071ee:	4a14      	ldr	r2, [pc, #80]	; (8007240 <LL_SYSCFG_SetEXTISource+0x5c>)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	3302      	adds	r3, #2
 80071f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	0c1b      	lsrs	r3, r3, #16
 8007200:	43db      	mvns	r3, r3
 8007202:	ea02 0103 	and.w	r1, r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	0c1b      	lsrs	r3, r3, #16
 800720a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	fa93 f3a3 	rbit	r3, r3
 8007212:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	fab3 f383 	clz	r3, r3
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	409a      	lsls	r2, r3
 8007224:	4806      	ldr	r0, [pc, #24]	; (8007240 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	430a      	orrs	r2, r1
 800722e:	3302      	adds	r3, #2
 8007230:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007234:	bf00      	nop
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	40010000 	.word	0x40010000

08007244 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007244:	b480      	push	{r7}
 8007246:	b089      	sub	sp, #36	; 0x24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	fa93 f3a3 	rbit	r3, r3
 800725e:	613b      	str	r3, [r7, #16]
  return result;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	fab3 f383 	clz	r3, r3
 8007266:	b2db      	uxtb	r3, r3
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	2103      	movs	r1, #3
 800726c:	fa01 f303 	lsl.w	r3, r1, r3
 8007270:	43db      	mvns	r3, r3
 8007272:	401a      	ands	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	fa93 f3a3 	rbit	r3, r3
 800727e:	61bb      	str	r3, [r7, #24]
  return result;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	fab3 f383 	clz	r3, r3
 8007286:	b2db      	uxtb	r3, r3
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	fa01 f303 	lsl.w	r3, r1, r3
 8007290:	431a      	orrs	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	601a      	str	r2, [r3, #0]
}
 8007296:	bf00      	nop
 8007298:	3724      	adds	r7, #36	; 0x24
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b089      	sub	sp, #36	; 0x24
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	fa93 f3a3 	rbit	r3, r3
 80072bc:	613b      	str	r3, [r7, #16]
  return result;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	fab3 f383 	clz	r3, r3
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	2103      	movs	r1, #3
 80072ca:	fa01 f303 	lsl.w	r3, r1, r3
 80072ce:	43db      	mvns	r3, r3
 80072d0:	401a      	ands	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	fa93 f3a3 	rbit	r3, r3
 80072dc:	61bb      	str	r3, [r7, #24]
  return result;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	fab3 f383 	clz	r3, r3
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	fa01 f303 	lsl.w	r3, r1, r3
 80072ee:	431a      	orrs	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	60da      	str	r2, [r3, #12]
}
 80072f4:	bf00      	nop
 80072f6:	3724      	adds	r7, #36	; 0x24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007324:	4b08      	ldr	r3, [pc, #32]	; (8007348 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007328:	4907      	ldr	r1, [pc, #28]	; (8007348 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4313      	orrs	r3, r2
 800732e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4013      	ands	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800733a:	68fb      	ldr	r3, [r7, #12]
}
 800733c:	bf00      	nop
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40021000 	.word	0x40021000

0800734c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08a      	sub	sp, #40	; 0x28
 8007350:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007352:	f107 031c 	add.w	r3, r7, #28
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	605a      	str	r2, [r3, #4]
 800735c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	605a      	str	r2, [r3, #4]
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	611a      	str	r2, [r3, #16]
 800736c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800736e:	2004      	movs	r0, #4
 8007370:	f7ff ffd4 	bl	800731c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007374:	2020      	movs	r0, #32
 8007376:	f7ff ffd1 	bl	800731c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800737a:	2001      	movs	r0, #1
 800737c:	f7ff ffce 	bl	800731c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007380:	2002      	movs	r0, #2
 8007382:	f7ff ffcb 	bl	800731c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007386:	2108      	movs	r1, #8
 8007388:	48d3      	ldr	r0, [pc, #844]	; (80076d8 <MX_GPIO_Init+0x38c>)
 800738a:	f7ff ffb9 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 800738e:	2108      	movs	r1, #8
 8007390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007394:	f7ff ffb4 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 8007398:	2110      	movs	r1, #16
 800739a:	48cf      	ldr	r0, [pc, #828]	; (80076d8 <MX_GPIO_Init+0x38c>)
 800739c:	f7ff ffb0 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 80073a0:	2120      	movs	r1, #32
 80073a2:	48cd      	ldr	r0, [pc, #820]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80073a4:	f7ff ffac 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 80073a8:	2101      	movs	r1, #1
 80073aa:	48cc      	ldr	r0, [pc, #816]	; (80076dc <MX_GPIO_Init+0x390>)
 80073ac:	f7ff ffa8 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80073b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073b4:	48c8      	ldr	r0, [pc, #800]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80073b6:	f7ff ffa3 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80073ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073be:	48c6      	ldr	r0, [pc, #792]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80073c0:	f7ff ff9e 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80073c4:	2140      	movs	r1, #64	; 0x40
 80073c6:	48c5      	ldr	r0, [pc, #788]	; (80076dc <MX_GPIO_Init+0x390>)
 80073c8:	f7ff ff9a 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80073cc:	2180      	movs	r1, #128	; 0x80
 80073ce:	48c3      	ldr	r0, [pc, #780]	; (80076dc <MX_GPIO_Init+0x390>)
 80073d0:	f7ff ff96 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80073d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073d8:	48c0      	ldr	r0, [pc, #768]	; (80076dc <MX_GPIO_Init+0x390>)
 80073da:	f7ff ff91 	bl	8007300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80073de:	49c0      	ldr	r1, [pc, #768]	; (80076e0 <MX_GPIO_Init+0x394>)
 80073e0:	2002      	movs	r0, #2
 80073e2:	f7ff feff 	bl	80071e4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80073e6:	49bf      	ldr	r1, [pc, #764]	; (80076e4 <MX_GPIO_Init+0x398>)
 80073e8:	2002      	movs	r0, #2
 80073ea:	f7ff fefb 	bl	80071e4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80073ee:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80073f2:	2005      	movs	r0, #5
 80073f4:	f7ff fef6 	bl	80071e4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80073f8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80073fc:	2005      	movs	r0, #5
 80073fe:	f7ff fef1 	bl	80071e4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007402:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007406:	2002      	movs	r0, #2
 8007408:	f7ff feec 	bl	80071e4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800740c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007410:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007418:	2300      	movs	r3, #0
 800741a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800741e:	2302      	movs	r3, #2
 8007420:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007424:	f107 031c 	add.w	r3, r7, #28
 8007428:	4618      	mov	r0, r3
 800742a:	f007 fb09 	bl	800ea40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800742e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007432:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800743a:	2300      	movs	r3, #0
 800743c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007440:	2302      	movs	r3, #2
 8007442:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007446:	f107 031c 	add.w	r3, r7, #28
 800744a:	4618      	mov	r0, r3
 800744c:	f007 faf8 	bl	800ea40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007450:	2301      	movs	r3, #1
 8007452:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800745a:	2300      	movs	r3, #0
 800745c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007460:	2302      	movs	r3, #2
 8007462:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007466:	f107 031c 	add.w	r3, r7, #28
 800746a:	4618      	mov	r0, r3
 800746c:	f007 fae8 	bl	800ea40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007470:	2302      	movs	r3, #2
 8007472:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800747a:	2300      	movs	r3, #0
 800747c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007480:	2302      	movs	r3, #2
 8007482:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007486:	f107 031c 	add.w	r3, r7, #28
 800748a:	4618      	mov	r0, r3
 800748c:	f007 fad8 	bl	800ea40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007490:	2304      	movs	r3, #4
 8007492:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800749a:	2300      	movs	r3, #0
 800749c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80074a0:	2302      	movs	r3, #2
 80074a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80074a6:	f107 031c 	add.w	r3, r7, #28
 80074aa:	4618      	mov	r0, r3
 80074ac:	f007 fac8 	bl	800ea40 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80074b0:	2201      	movs	r2, #1
 80074b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80074b6:	4888      	ldr	r0, [pc, #544]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80074b8:	f7ff fef3 	bl	80072a2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80074bc:	2201      	movs	r2, #1
 80074be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074c2:	4885      	ldr	r0, [pc, #532]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80074c4:	f7ff feed 	bl	80072a2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80074c8:	2201      	movs	r2, #1
 80074ca:	2101      	movs	r1, #1
 80074cc:	4886      	ldr	r0, [pc, #536]	; (80076e8 <MX_GPIO_Init+0x39c>)
 80074ce:	f7ff fee8 	bl	80072a2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80074d2:	2201      	movs	r2, #1
 80074d4:	2102      	movs	r1, #2
 80074d6:	4884      	ldr	r0, [pc, #528]	; (80076e8 <MX_GPIO_Init+0x39c>)
 80074d8:	f7ff fee3 	bl	80072a2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 80074dc:	2201      	movs	r2, #1
 80074de:	2104      	movs	r1, #4
 80074e0:	487d      	ldr	r0, [pc, #500]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80074e2:	f7ff fede 	bl	80072a2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80074e6:	2200      	movs	r2, #0
 80074e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80074ec:	487a      	ldr	r0, [pc, #488]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80074ee:	f7ff fea9 	bl	8007244 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80074f2:	2200      	movs	r2, #0
 80074f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074f8:	4877      	ldr	r0, [pc, #476]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80074fa:	f7ff fea3 	bl	8007244 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80074fe:	2200      	movs	r2, #0
 8007500:	2101      	movs	r1, #1
 8007502:	4879      	ldr	r0, [pc, #484]	; (80076e8 <MX_GPIO_Init+0x39c>)
 8007504:	f7ff fe9e 	bl	8007244 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007508:	2200      	movs	r2, #0
 800750a:	2102      	movs	r1, #2
 800750c:	4876      	ldr	r0, [pc, #472]	; (80076e8 <MX_GPIO_Init+0x39c>)
 800750e:	f7ff fe99 	bl	8007244 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007512:	2200      	movs	r2, #0
 8007514:	2104      	movs	r1, #4
 8007516:	4870      	ldr	r0, [pc, #448]	; (80076d8 <MX_GPIO_Init+0x38c>)
 8007518:	f7ff fe94 	bl	8007244 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 800751c:	2308      	movs	r3, #8
 800751e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007520:	2301      	movs	r3, #1
 8007522:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007528:	2300      	movs	r3, #0
 800752a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800752c:	2302      	movs	r3, #2
 800752e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007530:	1d3b      	adds	r3, r7, #4
 8007532:	4619      	mov	r1, r3
 8007534:	4868      	ldr	r0, [pc, #416]	; (80076d8 <MX_GPIO_Init+0x38c>)
 8007536:	f007 fc76 	bl	800ee26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 800753a:	2308      	movs	r3, #8
 800753c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800753e:	2301      	movs	r3, #1
 8007540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	4619      	mov	r1, r3
 8007552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007556:	f007 fc66 	bl	800ee26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 800755a:	2310      	movs	r3, #16
 800755c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800755e:	2301      	movs	r3, #1
 8007560:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007566:	2300      	movs	r3, #0
 8007568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800756a:	2300      	movs	r3, #0
 800756c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 800756e:	1d3b      	adds	r3, r7, #4
 8007570:	4619      	mov	r1, r3
 8007572:	4859      	ldr	r0, [pc, #356]	; (80076d8 <MX_GPIO_Init+0x38c>)
 8007574:	f007 fc57 	bl	800ee26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007578:	2320      	movs	r3, #32
 800757a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800757c:	2301      	movs	r3, #1
 800757e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 800758c:	1d3b      	adds	r3, r7, #4
 800758e:	4619      	mov	r1, r3
 8007590:	4851      	ldr	r0, [pc, #324]	; (80076d8 <MX_GPIO_Init+0x38c>)
 8007592:	f007 fc48 	bl	800ee26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007596:	2301      	movs	r3, #1
 8007598:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800759a:	2301      	movs	r3, #1
 800759c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80075a6:	2300      	movs	r3, #0
 80075a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 80075aa:	1d3b      	adds	r3, r7, #4
 80075ac:	4619      	mov	r1, r3
 80075ae:	484b      	ldr	r0, [pc, #300]	; (80076dc <MX_GPIO_Init+0x390>)
 80075b0:	f007 fc39 	bl	800ee26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80075b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80075ba:	2301      	movs	r3, #1
 80075bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80075ca:	1d3b      	adds	r3, r7, #4
 80075cc:	4619      	mov	r1, r3
 80075ce:	4842      	ldr	r0, [pc, #264]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80075d0:	f007 fc29 	bl	800ee26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80075d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80075da:	2301      	movs	r3, #1
 80075dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80075ea:	1d3b      	adds	r3, r7, #4
 80075ec:	4619      	mov	r1, r3
 80075ee:	483a      	ldr	r0, [pc, #232]	; (80076d8 <MX_GPIO_Init+0x38c>)
 80075f0:	f007 fc19 	bl	800ee26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80075f4:	2340      	movs	r3, #64	; 0x40
 80075f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80075f8:	2301      	movs	r3, #1
 80075fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80075fc:	2303      	movs	r3, #3
 80075fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007600:	2300      	movs	r3, #0
 8007602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007608:	1d3b      	adds	r3, r7, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4833      	ldr	r0, [pc, #204]	; (80076dc <MX_GPIO_Init+0x390>)
 800760e:	f007 fc0a 	bl	800ee26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007612:	2380      	movs	r3, #128	; 0x80
 8007614:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007616:	2301      	movs	r3, #1
 8007618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800761a:	2303      	movs	r3, #3
 800761c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800761e:	2300      	movs	r3, #0
 8007620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007626:	1d3b      	adds	r3, r7, #4
 8007628:	4619      	mov	r1, r3
 800762a:	482c      	ldr	r0, [pc, #176]	; (80076dc <MX_GPIO_Init+0x390>)
 800762c:	f007 fbfb 	bl	800ee26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007634:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007636:	2301      	movs	r3, #1
 8007638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800763a:	2303      	movs	r3, #3
 800763c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800763e:	2300      	movs	r3, #0
 8007640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007646:	1d3b      	adds	r3, r7, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4824      	ldr	r0, [pc, #144]	; (80076dc <MX_GPIO_Init+0x390>)
 800764c:	f007 fbeb 	bl	800ee26 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007650:	f7ff fd3e 	bl	80070d0 <__NVIC_GetPriorityGrouping>
 8007654:	4603      	mov	r3, r0
 8007656:	2200      	movs	r2, #0
 8007658:	2100      	movs	r1, #0
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff fd8e 	bl	800717c <NVIC_EncodePriority>
 8007660:	4603      	mov	r3, r0
 8007662:	4619      	mov	r1, r3
 8007664:	2006      	movs	r0, #6
 8007666:	f7ff fd5f 	bl	8007128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800766a:	2006      	movs	r0, #6
 800766c:	f7ff fd3e 	bl	80070ec <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007670:	f7ff fd2e 	bl	80070d0 <__NVIC_GetPriorityGrouping>
 8007674:	4603      	mov	r3, r0
 8007676:	2200      	movs	r2, #0
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fd7e 	bl	800717c <NVIC_EncodePriority>
 8007680:	4603      	mov	r3, r0
 8007682:	4619      	mov	r1, r3
 8007684:	2007      	movs	r0, #7
 8007686:	f7ff fd4f 	bl	8007128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800768a:	2007      	movs	r0, #7
 800768c:	f7ff fd2e 	bl	80070ec <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007690:	f7ff fd1e 	bl	80070d0 <__NVIC_GetPriorityGrouping>
 8007694:	4603      	mov	r3, r0
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff fd6e 	bl	800717c <NVIC_EncodePriority>
 80076a0:	4603      	mov	r3, r0
 80076a2:	4619      	mov	r1, r3
 80076a4:	2008      	movs	r0, #8
 80076a6:	f7ff fd3f 	bl	8007128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80076aa:	2008      	movs	r0, #8
 80076ac:	f7ff fd1e 	bl	80070ec <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80076b0:	f7ff fd0e 	bl	80070d0 <__NVIC_GetPriorityGrouping>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2200      	movs	r2, #0
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fd5e 	bl	800717c <NVIC_EncodePriority>
 80076c0:	4603      	mov	r3, r0
 80076c2:	4619      	mov	r1, r3
 80076c4:	2028      	movs	r0, #40	; 0x28
 80076c6:	f7ff fd2f 	bl	8007128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80076ca:	2028      	movs	r0, #40	; 0x28
 80076cc:	f7ff fd0e 	bl	80070ec <__NVIC_EnableIRQ>

}
 80076d0:	bf00      	nop
 80076d2:	3728      	adds	r7, #40	; 0x28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	e009      	b.n	80076ec <MX_GPIO_Init+0x3a0>
 80076d8:	48000800 	.word	0x48000800
 80076dc:	48000400 	.word	0x48000400
 80076e0:	0f000003 	.word	0x0f000003
 80076e4:	f0000003 	.word	0xf0000003
 80076e8:	48001400 	.word	0x48001400
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop

080076f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80076f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80076fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d013      	beq.n	8007730 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007708:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800770c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007710:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007718:	e000      	b.n	800771c <ITM_SendChar+0x2c>
    {
      __NOP();
 800771a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800771c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f9      	beq.n	800771a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007726:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007730:	687b      	ldr	r3, [r7, #4]
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]
  int i=0;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	e009      	b.n	8007768 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	60ba      	str	r2, [r7, #8]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff ffc7 	bl	80076f0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	3301      	adds	r3, #1
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	dbf1      	blt.n	8007754 <_write+0x16>
  return len;
 8007770:	687b      	ldr	r3, [r7, #4]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 8007784:	4808      	ldr	r0, [pc, #32]	; (80077a8 <HAL_COMP_TriggerCallback+0x2c>)
 8007786:	f002 ff87 	bl	800a698 <HAL_COMP_GetOutputLevel>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <HAL_COMP_TriggerCallback+0x30>)
 8007792:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007796:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 8007798:	e002      	b.n	80077a0 <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 800779a:	4b04      	ldr	r3, [pc, #16]	; (80077ac <HAL_COMP_TriggerCallback+0x30>)
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	200027e8 	.word	0x200027e8
 80077ac:	2000214c 	.word	0x2000214c

080077b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80077b4:	f000 feeb 	bl	800858e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80077b8:	f000 f84c 	bl	8007854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80077bc:	f7ff fdc6 	bl	800734c <MX_GPIO_Init>
  MX_DMA_Init();
 80077c0:	f7ff fc4c 	bl	800705c <MX_DMA_Init>
  MX_DAC1_Init();
 80077c4:	f7ff fafc 	bl	8006dc0 <MX_DAC1_Init>
  MX_ADC1_Init();
 80077c8:	f7ff f9b4 	bl	8006b34 <MX_ADC1_Init>
  MX_COMP1_Init();
 80077cc:	f7ff fa96 	bl	8006cfc <MX_COMP1_Init>
  MX_SPI3_Init();
 80077d0:	f000 f8ec 	bl	80079ac <MX_SPI3_Init>
  MX_RNG_Init();
 80077d4:	f000 f8dc 	bl	8007990 <MX_RNG_Init>
  MX_TIM1_Init();
 80077d8:	f000 fb46 	bl	8007e68 <MX_TIM1_Init>
  MX_TIM8_Init();
 80077dc:	f000 fc9c 	bl	8008118 <MX_TIM8_Init>
  MX_TIM16_Init();
 80077e0:	f000 fd54 	bl	800828c <MX_TIM16_Init>
  MX_TIM15_Init();
 80077e4:	f000 fd00 	bl	80081e8 <MX_TIM15_Init>
  MX_TIM5_Init();
 80077e8:	f000 fc48 	bl	800807c <MX_TIM5_Init>
  MX_TIM3_Init();
 80077ec:	f000 fbf8 	bl	8007fe0 <MX_TIM3_Init>
  MX_DAC2_Init();
 80077f0:	f7ff fb30 	bl	8006e54 <MX_DAC2_Init>
  MX_TIM17_Init();
 80077f4:	f000 fd72 	bl	80082dc <MX_TIM17_Init>
  MX_TIM2_Init();
 80077f8:	f000 fba6 	bl	8007f48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 80077fc:	f7fe fb74 	bl	8005ee8 <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 8007800:	4810      	ldr	r0, [pc, #64]	; (8007844 <main+0x94>)
 8007802:	f005 fb37 	bl	800ce74 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007806:	2200      	movs	r2, #0
 8007808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800780c:	480e      	ldr	r0, [pc, #56]	; (8007848 <main+0x98>)
 800780e:	f004 f9e1 	bl	800bbd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007812:	2200      	movs	r2, #0
 8007814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007818:	480b      	ldr	r0, [pc, #44]	; (8007848 <main+0x98>)
 800781a:	f004 f9db 	bl	800bbd4 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 800781e:	480b      	ldr	r0, [pc, #44]	; (800784c <main+0x9c>)
 8007820:	f005 fad2 	bl	800cdc8 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <main+0xa0>)
 8007826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800782a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 800782c:	4b08      	ldr	r3, [pc, #32]	; (8007850 <main+0xa0>)
 800782e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007832:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 8007834:	f7f9 fa76 	bl	8000d24 <DM_Init>
  DM_PostInit();
 8007838:	f7f9 fa82 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 800783c:	f7fd fb8a 	bl	8004f54 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007840:	e7fe      	b.n	8007840 <main+0x90>
 8007842:	bf00      	nop
 8007844:	20002990 	.word	0x20002990
 8007848:	48000800 	.word	0x48000800
 800784c:	20002a28 	.word	0x20002a28
 8007850:	40001000 	.word	0x40001000

08007854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b0a8      	sub	sp, #160	; 0xa0
 8007858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800785a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800785e:	2238      	movs	r2, #56	; 0x38
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f008 fbce 	bl	8010004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	605a      	str	r2, [r3, #4]
 8007872:	609a      	str	r2, [r3, #8]
 8007874:	60da      	str	r2, [r3, #12]
 8007876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007878:	463b      	mov	r3, r7
 800787a:	2254      	movs	r2, #84	; 0x54
 800787c:	2100      	movs	r1, #0
 800787e:	4618      	mov	r0, r3
 8007880:	f008 fbc0 	bl	8010004 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007884:	2000      	movs	r0, #0
 8007886:	f004 f9bd 	bl	800bc04 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800788a:	2322      	movs	r3, #34	; 0x22
 800788c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800788e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007892:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007894:	2340      	movs	r3, #64	; 0x40
 8007896:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007898:	2301      	movs	r3, #1
 800789a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800789e:	2302      	movs	r3, #2
 80078a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80078a4:	2302      	movs	r3, #2
 80078a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80078aa:	2302      	movs	r3, #2
 80078ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80078b0:	232a      	movs	r3, #42	; 0x2a
 80078b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 80078b6:	231e      	movs	r3, #30
 80078b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80078bc:	2304      	movs	r3, #4
 80078be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80078c2:	2302      	movs	r3, #2
 80078c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80078c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80078cc:	4618      	mov	r0, r3
 80078ce:	f004 fa3d 	bl	800bd4c <HAL_RCC_OscConfig>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80078d8:	f000 f82a 	bl	8007930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80078dc:	230f      	movs	r3, #15
 80078de:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80078e0:	2303      	movs	r3, #3
 80078e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80078e4:	2300      	movs	r3, #0
 80078e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80078e8:	2300      	movs	r3, #0
 80078ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80078ec:	2300      	movs	r3, #0
 80078ee:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80078f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80078f4:	2108      	movs	r1, #8
 80078f6:	4618      	mov	r0, r3
 80078f8:	f004 fd40 	bl	800c37c <HAL_RCC_ClockConfig>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007902:	f000 f815 	bl	8007930 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007906:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800790a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800790c:	2300      	movs	r3, #0
 800790e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007914:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007916:	463b      	mov	r3, r7
 8007918:	4618      	mov	r0, r3
 800791a:	f004 ff1f 	bl	800c75c <HAL_RCCEx_PeriphCLKConfig>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007924:	f000 f804 	bl	8007930 <Error_Handler>
  }
}
 8007928:	bf00      	nop
 800792a:	37a0      	adds	r7, #160	; 0xa0
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007934:	bf00      	nop
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f043 0204 	orr.w	r2, r3, #4
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	601a      	str	r2, [r3, #0]
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
	...

08007960 <LL_AHB2_GRP1_EnableClock>:
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007968:	4b08      	ldr	r3, [pc, #32]	; (800798c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800796a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800796c:	4907      	ldr	r1, [pc, #28]	; (800798c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4313      	orrs	r3, r2
 8007972:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007974:	4b05      	ldr	r3, [pc, #20]	; (800798c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4013      	ands	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800797e:	68fb      	ldr	r3, [r7, #12]
}
 8007980:	bf00      	nop
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	40021000 	.word	0x40021000

08007990 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007994:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007998:	f7ff ffe2 	bl	8007960 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 800799c:	4802      	ldr	r0, [pc, #8]	; (80079a8 <MX_RNG_Init+0x18>)
 800799e:	f7ff ffce 	bl	800793e <LL_RNG_Enable>

}
 80079a2:	bf00      	nop
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	50060800 	.word	0x50060800

080079ac <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80079b0:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079b2:	4a1c      	ldr	r2, [pc, #112]	; (8007a24 <MX_SPI3_Init+0x78>)
 80079b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80079b6:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80079bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80079be:	4b18      	ldr	r3, [pc, #96]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80079c4:	4b16      	ldr	r3, [pc, #88]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80079ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80079cc:	4b14      	ldr	r3, [pc, #80]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80079d2:	4b13      	ldr	r3, [pc, #76]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80079e0:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079e2:	2210      	movs	r2, #16
 80079e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80079e6:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80079ec:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079f2:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80079f8:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <MX_SPI3_Init+0x74>)
 80079fa:	2207      	movs	r2, #7
 80079fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <MX_SPI3_Init+0x74>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007a04:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <MX_SPI3_Init+0x74>)
 8007a06:	2208      	movs	r2, #8
 8007a08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007a0a:	4805      	ldr	r0, [pc, #20]	; (8007a20 <MX_SPI3_Init+0x74>)
 8007a0c:	f005 f8f2 	bl	800cbf4 <HAL_SPI_Init>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007a16:	f7ff ff8b 	bl	8007930 <Error_Handler>
  }

}
 8007a1a:	bf00      	nop
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20002894 	.word	0x20002894
 8007a24:	40003c00 	.word	0x40003c00

08007a28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a30:	f107 0314 	add.w	r3, r7, #20
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	609a      	str	r2, [r3, #8]
 8007a3c:	60da      	str	r2, [r3, #12]
 8007a3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a17      	ldr	r2, [pc, #92]	; (8007aa4 <HAL_SPI_MspInit+0x7c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d128      	bne.n	8007a9c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007a4a:	4b17      	ldr	r3, [pc, #92]	; (8007aa8 <HAL_SPI_MspInit+0x80>)
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4e:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <HAL_SPI_MspInit+0x80>)
 8007a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a54:	6593      	str	r3, [r2, #88]	; 0x58
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <HAL_SPI_MspInit+0x80>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a62:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <HAL_SPI_MspInit+0x80>)
 8007a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a66:	4a10      	ldr	r2, [pc, #64]	; (8007aa8 <HAL_SPI_MspInit+0x80>)
 8007a68:	f043 0304 	orr.w	r3, r3, #4
 8007a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a6e:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <HAL_SPI_MspInit+0x80>)
 8007a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007a7a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a80:	2302      	movs	r3, #2
 8007a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007a8c:	2306      	movs	r3, #6
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a90:	f107 0314 	add.w	r3, r7, #20
 8007a94:	4619      	mov	r1, r3
 8007a96:	4805      	ldr	r0, [pc, #20]	; (8007aac <HAL_SPI_MspInit+0x84>)
 8007a98:	f003 fe38 	bl	800b70c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	3728      	adds	r7, #40	; 0x28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40003c00 	.word	0x40003c00
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	48000800 	.word	0x48000800

08007ab0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007ab4:	4b05      	ldr	r3, [pc, #20]	; (8007acc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4a04      	ldr	r2, [pc, #16]	; (8007acc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007abe:	6093      	str	r3, [r2, #8]
}
 8007ac0:	bf00      	nop
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40007000 	.word	0x40007000

08007ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <HAL_MspInit+0x44>)
 8007ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ada:	4a0e      	ldr	r2, [pc, #56]	; (8007b14 <HAL_MspInit+0x44>)
 8007adc:	f043 0301 	orr.w	r3, r3, #1
 8007ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8007ae2:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <HAL_MspInit+0x44>)
 8007ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	607b      	str	r3, [r7, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007aee:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <HAL_MspInit+0x44>)
 8007af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af2:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <HAL_MspInit+0x44>)
 8007af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007af8:	6593      	str	r3, [r2, #88]	; 0x58
 8007afa:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <HAL_MspInit+0x44>)
 8007afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007b06:	f7ff ffd3 	bl	8007ab0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40021000 	.word	0x40021000

08007b18 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007b22:	695a      	ldr	r2, [r3, #20]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4013      	ands	r3, r2
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d101      	bne.n	8007b32 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	40010400 	.word	0x40010400

08007b44 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007b4c:	4a04      	ldr	r2, [pc, #16]	; (8007b60 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6153      	str	r3, [r2, #20]
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40010400 	.word	0x40010400

08007b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b64:	b480      	push	{r7}
 8007b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b68:	bf00      	nop
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8007b78:	4801      	ldr	r0, [pc, #4]	; (8007b80 <HardFault_Handler+0xc>)
 8007b7a:	f7f9 fcd5 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b7e:	e7fe      	b.n	8007b7e <HardFault_Handler+0xa>
 8007b80:	08014f6c 	.word	0x08014f6c

08007b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8007b88:	4801      	ldr	r0, [pc, #4]	; (8007b90 <MemManage_Handler+0xc>)
 8007b8a:	f7f9 fccd 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b8e:	e7fe      	b.n	8007b8e <MemManage_Handler+0xa>
 8007b90:	08014f78 	.word	0x08014f78

08007b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <BusFault_Handler+0xc>)
 8007b9a:	f7f9 fcc5 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b9e:	e7fe      	b.n	8007b9e <BusFault_Handler+0xa>
 8007ba0:	08014f88 	.word	0x08014f88

08007ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8007ba8:	4801      	ldr	r0, [pc, #4]	; (8007bb0 <UsageFault_Handler+0xc>)
 8007baa:	f7f9 fcbd 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007bae:	e7fe      	b.n	8007bae <UsageFault_Handler+0xa>
 8007bb0:	08014f94 	.word	0x08014f94

08007bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007bb8:	bf00      	nop
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007bc6:	bf00      	nop
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007bd4:	bf00      	nop
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007be2:	f000 fd27 	bl	8008634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007be6:	bf00      	nop
 8007be8:	bd80      	pop	{r7, pc}

08007bea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007bee:	f7fd fa6f 	bl	80050d0 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	f7ff ff90 	bl	8007b18 <LL_EXTI_IsActiveFlag_0_31>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f7ff ffa0 	bl	8007b44 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007c04:	bf00      	nop
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007c0c:	f7fd fa86 	bl	800511c <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007c10:	2002      	movs	r0, #2
 8007c12:	f7ff ff81 	bl	8007b18 <LL_EXTI_IsActiveFlag_0_31>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007c1c:	2002      	movs	r0, #2
 8007c1e:	f7ff ff91 	bl	8007b44 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007c22:	bf00      	nop
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007c2a:	f7fd fa9d 	bl	8005168 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007c2e:	2004      	movs	r0, #4
 8007c30:	f7ff ff72 	bl	8007b18 <LL_EXTI_IsActiveFlag_0_31>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007c3a:	2004      	movs	r0, #4
 8007c3c:	f7ff ff82 	bl	8007b44 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007c40:	bf00      	nop
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007c48:	4802      	ldr	r0, [pc, #8]	; (8007c54 <DMA1_Channel1_IRQHandler+0x10>)
 8007c4a:	f003 fc0f 	bl	800b46c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007c4e:	bf00      	nop
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20002788 	.word	0x20002788

08007c58 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007c5c:	4802      	ldr	r0, [pc, #8]	; (8007c68 <DMA1_Channel2_IRQHandler+0x10>)
 8007c5e:	f003 fc05 	bl	800b46c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007c62:	bf00      	nop
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20002090 	.word	0x20002090

08007c6c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007c70:	4802      	ldr	r0, [pc, #8]	; (8007c7c <DMA1_Channel3_IRQHandler+0x10>)
 8007c72:	f003 fbfb 	bl	800b46c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007c76:	bf00      	nop
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20002834 	.word	0x20002834

08007c80 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007c84:	f7f9 f876 	bl	8000d74 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007c88:	f7fd fa94 	bl	80051b4 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007c8c:	4803      	ldr	r0, [pc, #12]	; (8007c9c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007c8e:	f005 fbd3 	bl	800d438 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007c92:	4803      	ldr	r0, [pc, #12]	; (8007ca0 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007c94:	f005 fbd0 	bl	800d438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007c98:	bf00      	nop
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20002a28 	.word	0x20002a28
 8007ca0:	20002944 	.word	0x20002944

08007ca4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8007ca8:	f7fc f966 	bl	8003f78 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007cac:	4803      	ldr	r0, [pc, #12]	; (8007cbc <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8007cae:	f005 fbc3 	bl	800d438 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8007cb2:	4803      	ldr	r0, [pc, #12]	; (8007cc0 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8007cb4:	f005 fbc0 	bl	800d438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007cb8:	bf00      	nop
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	20002a28 	.word	0x20002a28
 8007cc0:	20002990 	.word	0x20002990

08007cc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007cc8:	4802      	ldr	r0, [pc, #8]	; (8007cd4 <TIM3_IRQHandler+0x10>)
 8007cca:	f005 fbb5 	bl	800d438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007cce:	bf00      	nop
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200020fc 	.word	0x200020fc

08007cd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007cdc:	f7fd f9a8 	bl	8005030 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007ce0:	f7fd f9ce 	bl	8005080 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007ce4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ce8:	f7ff ff16 	bl	8007b18 <LL_EXTI_IsActiveFlag_0_31>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007cf2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007cf6:	f7ff ff25 	bl	8007b44 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007cfa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007cfe:	f7ff ff0b 	bl	8007b18 <LL_EXTI_IsActiveFlag_0_31>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007d08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d0c:	f7ff ff1a 	bl	8007b44 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007d10:	bf00      	nop
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007d18:	f7fd f92c 	bl	8004f74 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007d1c:	4802      	ldr	r0, [pc, #8]	; (8007d28 <TIM5_IRQHandler+0x14>)
 8007d1e:	f005 fb8b 	bl	800d438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007d22:	bf00      	nop
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	200029dc 	.word	0x200029dc

08007d2c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8007d30:	4802      	ldr	r0, [pc, #8]	; (8007d3c <COMP1_2_3_IRQHandler+0x10>)
 8007d32:	f002 fc3d 	bl	800a5b0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8007d36:	bf00      	nop
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	200027e8 	.word	0x200027e8

08007d40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e00a      	b.n	8007d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007d52:	f3af 8000 	nop.w
 8007d56:	4601      	mov	r1, r0
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	60ba      	str	r2, [r7, #8]
 8007d5e:	b2ca      	uxtb	r2, r1
 8007d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	3301      	adds	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	dbf0      	blt.n	8007d52 <_read+0x12>
	}

return len;
 8007d70:	687b      	ldr	r3, [r7, #4]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <_close>:
	}
	return len;
}

int _close(int file)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
	return -1;
 8007d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007da2:	605a      	str	r2, [r3, #4]
	return 0;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <_isatty>:

int _isatty(int file)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
	return 1;
 8007dba:	2301      	movs	r3, #1
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
	return 0;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007dec:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <_sbrk+0x50>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <_sbrk+0x16>
		heap_end = &end;
 8007df4:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <_sbrk+0x50>)
 8007df6:	4a10      	ldr	r2, [pc, #64]	; (8007e38 <_sbrk+0x54>)
 8007df8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007dfa:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <_sbrk+0x50>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007e00:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <_sbrk+0x50>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4413      	add	r3, r2
 8007e08:	466a      	mov	r2, sp
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d907      	bls.n	8007e1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007e0e:	f008 f8cf 	bl	800ffb0 <__errno>
 8007e12:	4602      	mov	r2, r0
 8007e14:	230c      	movs	r3, #12
 8007e16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e1c:	e006      	b.n	8007e2c <_sbrk+0x48>
	}

	heap_end += incr;
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <_sbrk+0x50>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4413      	add	r3, r2
 8007e26:	4a03      	ldr	r2, [pc, #12]	; (8007e34 <_sbrk+0x50>)
 8007e28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20002080 	.word	0x20002080
 8007e38:	20002b18 	.word	0x20002b18

08007e3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <SystemInit+0x28>)
 8007e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e46:	4a07      	ldr	r2, [pc, #28]	; (8007e64 <SystemInit+0x28>)
 8007e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007e50:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <SystemInit+0x28>)
 8007e52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e56:	609a      	str	r2, [r3, #8]
#endif
}
 8007e58:	bf00      	nop
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	e000ed00 	.word	0xe000ed00

08007e68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b09a      	sub	sp, #104	; 0x68
 8007e6c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007e6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e72:	2224      	movs	r2, #36	; 0x24
 8007e74:	2100      	movs	r1, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f008 f8c4 	bl	8010004 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	605a      	str	r2, [r3, #4]
 8007e86:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007e88:	1d3b      	adds	r3, r7, #4
 8007e8a:	2234      	movs	r2, #52	; 0x34
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f008 f8b8 	bl	8010004 <memset>

  htim1.Instance = TIM1;
 8007e94:	4b2a      	ldr	r3, [pc, #168]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007e96:	4a2b      	ldr	r2, [pc, #172]	; (8007f44 <MX_TIM1_Init+0xdc>)
 8007e98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007e9a:	4b29      	ldr	r3, [pc, #164]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8007ea0:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007ea2:	2260      	movs	r2, #96	; 0x60
 8007ea4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007ea6:	4b26      	ldr	r3, [pc, #152]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007eac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007eae:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007eb4:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007eba:	4b21      	ldr	r3, [pc, #132]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007ebc:	2280      	movs	r2, #128	; 0x80
 8007ebe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007edc:	2300      	movs	r3, #0
 8007ede:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007ee4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4815      	ldr	r0, [pc, #84]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007eec:	f005 f9fe 	bl	800d2ec <HAL_TIM_Encoder_Init>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007ef6:	f7ff fd1b 	bl	8007930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007efa:	2320      	movs	r3, #32
 8007efc:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007efe:	2300      	movs	r3, #0
 8007f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f02:	2300      	movs	r3, #0
 8007f04:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007f06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	480c      	ldr	r0, [pc, #48]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007f0e:	f006 fad9 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007f18:	f7ff fd0a 	bl	8007930 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007f20:	2300      	movs	r3, #0
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007f24:	1d3b      	adds	r3, r7, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4805      	ldr	r0, [pc, #20]	; (8007f40 <MX_TIM1_Init+0xd8>)
 8007f2a:	f006 fb61 	bl	800e5f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007f34:	f7ff fcfc 	bl	8007930 <Error_Handler>
  }

}
 8007f38:	bf00      	nop
 8007f3a:	3768      	adds	r7, #104	; 0x68
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20002a28 	.word	0x20002a28
 8007f44:	40012c00 	.word	0x40012c00

08007f48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f4e:	f107 0310 	add.w	r3, r7, #16
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	605a      	str	r2, [r3, #4]
 8007f58:	609a      	str	r2, [r3, #8]
 8007f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f5c:	1d3b      	adds	r3, r7, #4
 8007f5e:	2200      	movs	r2, #0
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	605a      	str	r2, [r3, #4]
 8007f64:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007f66:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <MX_TIM2_Init+0x94>)
 8007f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007f6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007f6e:	4b1b      	ldr	r3, [pc, #108]	; (8007fdc <MX_TIM2_Init+0x94>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f74:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <MX_TIM2_Init+0x94>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007f7a:	4b18      	ldr	r3, [pc, #96]	; (8007fdc <MX_TIM2_Init+0x94>)
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f80:	4b16      	ldr	r3, [pc, #88]	; (8007fdc <MX_TIM2_Init+0x94>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f86:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <MX_TIM2_Init+0x94>)
 8007f88:	2280      	movs	r2, #128	; 0x80
 8007f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007f8c:	4813      	ldr	r0, [pc, #76]	; (8007fdc <MX_TIM2_Init+0x94>)
 8007f8e:	f004 fec3 	bl	800cd18 <HAL_TIM_Base_Init>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007f98:	f7ff fcca 	bl	8007930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007fa2:	f107 0310 	add.w	r3, r7, #16
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	480c      	ldr	r0, [pc, #48]	; (8007fdc <MX_TIM2_Init+0x94>)
 8007faa:	f005 fcd5 	bl	800d958 <HAL_TIM_ConfigClockSource>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007fb4:	f7ff fcbc 	bl	8007930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007fb8:	2320      	movs	r3, #32
 8007fba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007fc0:	1d3b      	adds	r3, r7, #4
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4805      	ldr	r0, [pc, #20]	; (8007fdc <MX_TIM2_Init+0x94>)
 8007fc6:	f006 fa7d 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007fd0:	f7ff fcae 	bl	8007930 <Error_Handler>
  }

}
 8007fd4:	bf00      	nop
 8007fd6:	3720      	adds	r7, #32
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20002a74 	.word	0x20002a74

08007fe0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fe6:	f107 0310 	add.w	r3, r7, #16
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	605a      	str	r2, [r3, #4]
 8007ff0:	609a      	str	r2, [r3, #8]
 8007ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ff4:	1d3b      	adds	r3, r7, #4
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	605a      	str	r2, [r3, #4]
 8007ffc:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007ffe:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <MX_TIM3_Init+0x94>)
 8008000:	4a1d      	ldr	r2, [pc, #116]	; (8008078 <MX_TIM3_Init+0x98>)
 8008002:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008004:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <MX_TIM3_Init+0x94>)
 8008006:	2200      	movs	r2, #0
 8008008:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800800a:	4b1a      	ldr	r3, [pc, #104]	; (8008074 <MX_TIM3_Init+0x94>)
 800800c:	2210      	movs	r2, #16
 800800e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008010:	4b18      	ldr	r3, [pc, #96]	; (8008074 <MX_TIM3_Init+0x94>)
 8008012:	2201      	movs	r2, #1
 8008014:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008016:	4b17      	ldr	r3, [pc, #92]	; (8008074 <MX_TIM3_Init+0x94>)
 8008018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800801c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800801e:	4b15      	ldr	r3, [pc, #84]	; (8008074 <MX_TIM3_Init+0x94>)
 8008020:	2280      	movs	r2, #128	; 0x80
 8008022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008024:	4813      	ldr	r0, [pc, #76]	; (8008074 <MX_TIM3_Init+0x94>)
 8008026:	f004 fe77 	bl	800cd18 <HAL_TIM_Base_Init>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008030:	f7ff fc7e 	bl	8007930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008038:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800803a:	f107 0310 	add.w	r3, r7, #16
 800803e:	4619      	mov	r1, r3
 8008040:	480c      	ldr	r0, [pc, #48]	; (8008074 <MX_TIM3_Init+0x94>)
 8008042:	f005 fc89 	bl	800d958 <HAL_TIM_ConfigClockSource>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800804c:	f7ff fc70 	bl	8007930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008050:	2320      	movs	r3, #32
 8008052:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008054:	2300      	movs	r3, #0
 8008056:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008058:	1d3b      	adds	r3, r7, #4
 800805a:	4619      	mov	r1, r3
 800805c:	4805      	ldr	r0, [pc, #20]	; (8008074 <MX_TIM3_Init+0x94>)
 800805e:	f006 fa31 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008068:	f7ff fc62 	bl	8007930 <Error_Handler>
  }

}
 800806c:	bf00      	nop
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200020fc 	.word	0x200020fc
 8008078:	40000400 	.word	0x40000400

0800807c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008082:	f107 0310 	add.w	r3, r7, #16
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	609a      	str	r2, [r3, #8]
 800808e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008090:	1d3b      	adds	r3, r7, #4
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	605a      	str	r2, [r3, #4]
 8008098:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800809a:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <MX_TIM5_Init+0x94>)
 800809c:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <MX_TIM5_Init+0x98>)
 800809e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80080a0:	4b1b      	ldr	r3, [pc, #108]	; (8008110 <MX_TIM5_Init+0x94>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080a6:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <MX_TIM5_Init+0x94>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80080ac:	4b18      	ldr	r3, [pc, #96]	; (8008110 <MX_TIM5_Init+0x94>)
 80080ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080b4:	4b16      	ldr	r3, [pc, #88]	; (8008110 <MX_TIM5_Init+0x94>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80080ba:	4b15      	ldr	r3, [pc, #84]	; (8008110 <MX_TIM5_Init+0x94>)
 80080bc:	2280      	movs	r2, #128	; 0x80
 80080be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80080c0:	4813      	ldr	r0, [pc, #76]	; (8008110 <MX_TIM5_Init+0x94>)
 80080c2:	f004 fe29 	bl	800cd18 <HAL_TIM_Base_Init>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80080cc:	f7ff fc30 	bl	8007930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80080d6:	f107 0310 	add.w	r3, r7, #16
 80080da:	4619      	mov	r1, r3
 80080dc:	480c      	ldr	r0, [pc, #48]	; (8008110 <MX_TIM5_Init+0x94>)
 80080de:	f005 fc3b 	bl	800d958 <HAL_TIM_ConfigClockSource>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80080e8:	f7ff fc22 	bl	8007930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080ec:	2300      	movs	r3, #0
 80080ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80080f4:	1d3b      	adds	r3, r7, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4805      	ldr	r0, [pc, #20]	; (8008110 <MX_TIM5_Init+0x94>)
 80080fa:	f006 f9e3 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008104:	f7ff fc14 	bl	8007930 <Error_Handler>
  }

}
 8008108:	bf00      	nop
 800810a:	3720      	adds	r7, #32
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	200029dc 	.word	0x200029dc
 8008114:	40000c00 	.word	0x40000c00

08008118 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b094      	sub	sp, #80	; 0x50
 800811c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800811e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	605a      	str	r2, [r3, #4]
 8008128:	609a      	str	r2, [r3, #8]
 800812a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800812c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	605a      	str	r2, [r3, #4]
 8008136:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008138:	463b      	mov	r3, r7
 800813a:	2234      	movs	r2, #52	; 0x34
 800813c:	2100      	movs	r1, #0
 800813e:	4618      	mov	r0, r3
 8008140:	f007 ff60 	bl	8010004 <memset>

  htim8.Instance = TIM8;
 8008144:	4b26      	ldr	r3, [pc, #152]	; (80081e0 <MX_TIM8_Init+0xc8>)
 8008146:	4a27      	ldr	r2, [pc, #156]	; (80081e4 <MX_TIM8_Init+0xcc>)
 8008148:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800814a:	4b25      	ldr	r3, [pc, #148]	; (80081e0 <MX_TIM8_Init+0xc8>)
 800814c:	2200      	movs	r2, #0
 800814e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008150:	4b23      	ldr	r3, [pc, #140]	; (80081e0 <MX_TIM8_Init+0xc8>)
 8008152:	2200      	movs	r2, #0
 8008154:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008156:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <MX_TIM8_Init+0xc8>)
 8008158:	2201      	movs	r2, #1
 800815a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800815c:	4b20      	ldr	r3, [pc, #128]	; (80081e0 <MX_TIM8_Init+0xc8>)
 800815e:	2200      	movs	r2, #0
 8008160:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008162:	4b1f      	ldr	r3, [pc, #124]	; (80081e0 <MX_TIM8_Init+0xc8>)
 8008164:	2200      	movs	r2, #0
 8008166:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008168:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <MX_TIM8_Init+0xc8>)
 800816a:	2280      	movs	r2, #128	; 0x80
 800816c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800816e:	481c      	ldr	r0, [pc, #112]	; (80081e0 <MX_TIM8_Init+0xc8>)
 8008170:	f004 fdd2 	bl	800cd18 <HAL_TIM_Base_Init>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800817a:	f7ff fbd9 	bl	8007930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800817e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008182:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008188:	4619      	mov	r1, r3
 800818a:	4815      	ldr	r0, [pc, #84]	; (80081e0 <MX_TIM8_Init+0xc8>)
 800818c:	f005 fbe4 	bl	800d958 <HAL_TIM_ConfigClockSource>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008196:	f7ff fbcb 	bl	8007930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800819a:	2320      	movs	r3, #32
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800819e:	2300      	movs	r3, #0
 80081a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80081a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081aa:	4619      	mov	r1, r3
 80081ac:	480c      	ldr	r0, [pc, #48]	; (80081e0 <MX_TIM8_Init+0xc8>)
 80081ae:	f006 f989 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80081b8:	f7ff fbba 	bl	8007930 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80081bc:	2300      	movs	r3, #0
 80081be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80081c0:	2300      	movs	r3, #0
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80081c4:	463b      	mov	r3, r7
 80081c6:	4619      	mov	r1, r3
 80081c8:	4805      	ldr	r0, [pc, #20]	; (80081e0 <MX_TIM8_Init+0xc8>)
 80081ca:	f006 fa11 	bl	800e5f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80081d4:	f7ff fbac 	bl	8007930 <Error_Handler>
  }

}
 80081d8:	bf00      	nop
 80081da:	3750      	adds	r7, #80	; 0x50
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	200028f8 	.word	0x200028f8
 80081e4:	40013400 	.word	0x40013400

080081e8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081ee:	f107 0310 	add.w	r3, r7, #16
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	605a      	str	r2, [r3, #4]
 80081f8:	609a      	str	r2, [r3, #8]
 80081fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081fc:	1d3b      	adds	r3, r7, #4
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	605a      	str	r2, [r3, #4]
 8008204:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008206:	4b1f      	ldr	r3, [pc, #124]	; (8008284 <MX_TIM15_Init+0x9c>)
 8008208:	4a1f      	ldr	r2, [pc, #124]	; (8008288 <MX_TIM15_Init+0xa0>)
 800820a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 800820c:	4b1d      	ldr	r3, [pc, #116]	; (8008284 <MX_TIM15_Init+0x9c>)
 800820e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008212:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008214:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <MX_TIM15_Init+0x9c>)
 8008216:	2200      	movs	r2, #0
 8008218:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 800821a:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <MX_TIM15_Init+0x9c>)
 800821c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008220:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008222:	4b18      	ldr	r3, [pc, #96]	; (8008284 <MX_TIM15_Init+0x9c>)
 8008224:	2200      	movs	r2, #0
 8008226:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008228:	4b16      	ldr	r3, [pc, #88]	; (8008284 <MX_TIM15_Init+0x9c>)
 800822a:	2200      	movs	r2, #0
 800822c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800822e:	4b15      	ldr	r3, [pc, #84]	; (8008284 <MX_TIM15_Init+0x9c>)
 8008230:	2200      	movs	r2, #0
 8008232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008234:	4813      	ldr	r0, [pc, #76]	; (8008284 <MX_TIM15_Init+0x9c>)
 8008236:	f004 fd6f 	bl	800cd18 <HAL_TIM_Base_Init>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008240:	f7ff fb76 	bl	8007930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008248:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800824a:	f107 0310 	add.w	r3, r7, #16
 800824e:	4619      	mov	r1, r3
 8008250:	480c      	ldr	r0, [pc, #48]	; (8008284 <MX_TIM15_Init+0x9c>)
 8008252:	f005 fb81 	bl	800d958 <HAL_TIM_ConfigClockSource>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800825c:	f7ff fb68 	bl	8007930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008260:	2300      	movs	r3, #0
 8008262:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008268:	1d3b      	adds	r3, r7, #4
 800826a:	4619      	mov	r1, r3
 800826c:	4805      	ldr	r0, [pc, #20]	; (8008284 <MX_TIM15_Init+0x9c>)
 800826e:	f006 f929 	bl	800e4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008278:	f7ff fb5a 	bl	8007930 <Error_Handler>
  }

}
 800827c:	bf00      	nop
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	20002944 	.word	0x20002944
 8008288:	40014000 	.word	0x40014000

0800828c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008290:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <MX_TIM16_Init+0x48>)
 8008292:	4a11      	ldr	r2, [pc, #68]	; (80082d8 <MX_TIM16_Init+0x4c>)
 8008294:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008296:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <MX_TIM16_Init+0x48>)
 8008298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800829c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800829e:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <MX_TIM16_Init+0x48>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <MX_TIM16_Init+0x48>)
 80082a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082ac:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <MX_TIM16_Init+0x48>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <MX_TIM16_Init+0x48>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <MX_TIM16_Init+0x48>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80082be:	4805      	ldr	r0, [pc, #20]	; (80082d4 <MX_TIM16_Init+0x48>)
 80082c0:	f004 fd2a 	bl	800cd18 <HAL_TIM_Base_Init>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80082ca:	f7ff fb31 	bl	8007930 <Error_Handler>
  }

}
 80082ce:	bf00      	nop
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20002ac0 	.word	0x20002ac0
 80082d8:	40014400 	.word	0x40014400

080082dc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80082e0:	4b10      	ldr	r3, [pc, #64]	; (8008324 <MX_TIM17_Init+0x48>)
 80082e2:	4a11      	ldr	r2, [pc, #68]	; (8008328 <MX_TIM17_Init+0x4c>)
 80082e4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 80082e6:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <MX_TIM17_Init+0x48>)
 80082e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082ec:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082ee:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <MX_TIM17_Init+0x48>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <MX_TIM17_Init+0x48>)
 80082f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082fa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082fc:	4b09      	ldr	r3, [pc, #36]	; (8008324 <MX_TIM17_Init+0x48>)
 80082fe:	2200      	movs	r2, #0
 8008300:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8008302:	4b08      	ldr	r3, [pc, #32]	; (8008324 <MX_TIM17_Init+0x48>)
 8008304:	2200      	movs	r2, #0
 8008306:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <MX_TIM17_Init+0x48>)
 800830a:	2200      	movs	r2, #0
 800830c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800830e:	4805      	ldr	r0, [pc, #20]	; (8008324 <MX_TIM17_Init+0x48>)
 8008310:	f004 fd02 	bl	800cd18 <HAL_TIM_Base_Init>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800831a:	f7ff fb09 	bl	8007930 <Error_Handler>
  }

}
 800831e:	bf00      	nop
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20002990 	.word	0x20002990
 8008328:	40014800 	.word	0x40014800

0800832c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	; 0x28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	605a      	str	r2, [r3, #4]
 800833e:	609a      	str	r2, [r3, #8]
 8008340:	60da      	str	r2, [r3, #12]
 8008342:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1f      	ldr	r2, [pc, #124]	; (80083c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d137      	bne.n	80083be <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800834e:	4b1f      	ldr	r3, [pc, #124]	; (80083cc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008352:	4a1e      	ldr	r2, [pc, #120]	; (80083cc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008358:	6613      	str	r3, [r2, #96]	; 0x60
 800835a:	4b1c      	ldr	r3, [pc, #112]	; (80083cc <HAL_TIM_Encoder_MspInit+0xa0>)
 800835c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800835e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008366:	4b19      	ldr	r3, [pc, #100]	; (80083cc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836a:	4a18      	ldr	r2, [pc, #96]	; (80083cc <HAL_TIM_Encoder_MspInit+0xa0>)
 800836c:	f043 0304 	orr.w	r3, r3, #4
 8008370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008372:	4b16      	ldr	r3, [pc, #88]	; (80083cc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008376:	f003 0304 	and.w	r3, r3, #4
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800837e:	2303      	movs	r3, #3
 8008380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008382:	2302      	movs	r3, #2
 8008384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800838a:	2300      	movs	r3, #0
 800838c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800838e:	2302      	movs	r3, #2
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008392:	f107 0314 	add.w	r3, r7, #20
 8008396:	4619      	mov	r1, r3
 8008398:	480d      	ldr	r0, [pc, #52]	; (80083d0 <HAL_TIM_Encoder_MspInit+0xa4>)
 800839a:	f003 f9b7 	bl	800b70c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800839e:	2200      	movs	r2, #0
 80083a0:	2100      	movs	r1, #0
 80083a2:	2018      	movs	r0, #24
 80083a4:	f002 fa85 	bl	800a8b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80083a8:	2018      	movs	r0, #24
 80083aa:	f002 fa9c 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80083ae:	2200      	movs	r2, #0
 80083b0:	2101      	movs	r1, #1
 80083b2:	201a      	movs	r0, #26
 80083b4:	f002 fa7d 	bl	800a8b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80083b8:	201a      	movs	r0, #26
 80083ba:	f002 fa94 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80083be:	bf00      	nop
 80083c0:	3728      	adds	r7, #40	; 0x28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	40012c00 	.word	0x40012c00
 80083cc:	40021000 	.word	0x40021000
 80083d0:	48000800 	.word	0x48000800

080083d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	; 0x28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e4:	d10c      	bne.n	8008400 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80083e6:	4b4e      	ldr	r3, [pc, #312]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80083e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ea:	4a4d      	ldr	r2, [pc, #308]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80083ec:	f043 0301 	orr.w	r3, r3, #1
 80083f0:	6593      	str	r3, [r2, #88]	; 0x58
 80083f2:	4b4b      	ldr	r3, [pc, #300]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80083f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	627b      	str	r3, [r7, #36]	; 0x24
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80083fe:	e08a      	b.n	8008516 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM3)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a47      	ldr	r2, [pc, #284]	; (8008524 <HAL_TIM_Base_MspInit+0x150>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d114      	bne.n	8008434 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800840a:	4b45      	ldr	r3, [pc, #276]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 800840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840e:	4a44      	ldr	r2, [pc, #272]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 8008410:	f043 0302 	orr.w	r3, r3, #2
 8008414:	6593      	str	r3, [r2, #88]	; 0x58
 8008416:	4b42      	ldr	r3, [pc, #264]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 8008418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	623b      	str	r3, [r7, #32]
 8008420:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008422:	2200      	movs	r2, #0
 8008424:	2100      	movs	r1, #0
 8008426:	201d      	movs	r0, #29
 8008428:	f002 fa43 	bl	800a8b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800842c:	201d      	movs	r0, #29
 800842e:	f002 fa5a 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
}
 8008432:	e070      	b.n	8008516 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM5)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a3b      	ldr	r2, [pc, #236]	; (8008528 <HAL_TIM_Base_MspInit+0x154>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d114      	bne.n	8008468 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800843e:	4b38      	ldr	r3, [pc, #224]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 8008440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008442:	4a37      	ldr	r2, [pc, #220]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 8008444:	f043 0308 	orr.w	r3, r3, #8
 8008448:	6593      	str	r3, [r2, #88]	; 0x58
 800844a:	4b35      	ldr	r3, [pc, #212]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 800844c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844e:	f003 0308 	and.w	r3, r3, #8
 8008452:	61fb      	str	r3, [r7, #28]
 8008454:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008456:	2200      	movs	r2, #0
 8008458:	2102      	movs	r1, #2
 800845a:	2032      	movs	r0, #50	; 0x32
 800845c:	f002 fa29 	bl	800a8b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008460:	2032      	movs	r0, #50	; 0x32
 8008462:	f002 fa40 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
}
 8008466:	e056      	b.n	8008516 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM8)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a2f      	ldr	r2, [pc, #188]	; (800852c <HAL_TIM_Base_MspInit+0x158>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d10c      	bne.n	800848c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008472:	4b2b      	ldr	r3, [pc, #172]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 8008474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008476:	4a2a      	ldr	r2, [pc, #168]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 8008478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800847c:	6613      	str	r3, [r2, #96]	; 0x60
 800847e:	4b28      	ldr	r3, [pc, #160]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 8008480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008486:	61bb      	str	r3, [r7, #24]
 8008488:	69bb      	ldr	r3, [r7, #24]
}
 800848a:	e044      	b.n	8008516 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM15)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a27      	ldr	r2, [pc, #156]	; (8008530 <HAL_TIM_Base_MspInit+0x15c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d114      	bne.n	80084c0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008496:	4b22      	ldr	r3, [pc, #136]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 8008498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800849a:	4a21      	ldr	r2, [pc, #132]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 800849c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a0:	6613      	str	r3, [r2, #96]	; 0x60
 80084a2:	4b1f      	ldr	r3, [pc, #124]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80084a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084aa:	617b      	str	r3, [r7, #20]
 80084ac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80084ae:	2200      	movs	r2, #0
 80084b0:	2100      	movs	r1, #0
 80084b2:	2018      	movs	r0, #24
 80084b4:	f002 f9fd 	bl	800a8b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80084b8:	2018      	movs	r0, #24
 80084ba:	f002 fa14 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
}
 80084be:	e02a      	b.n	8008516 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM16)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <HAL_TIM_Base_MspInit+0x160>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d10c      	bne.n	80084e4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80084ca:	4b15      	ldr	r3, [pc, #84]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80084cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ce:	4a14      	ldr	r2, [pc, #80]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80084d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d4:	6613      	str	r3, [r2, #96]	; 0x60
 80084d6:	4b12      	ldr	r3, [pc, #72]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80084d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084de:	613b      	str	r3, [r7, #16]
 80084e0:	693b      	ldr	r3, [r7, #16]
}
 80084e2:	e018      	b.n	8008516 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM17)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a13      	ldr	r2, [pc, #76]	; (8008538 <HAL_TIM_Base_MspInit+0x164>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d113      	bne.n	8008516 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80084ee:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80084f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f2:	4a0b      	ldr	r2, [pc, #44]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80084f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084f8:	6613      	str	r3, [r2, #96]	; 0x60
 80084fa:	4b09      	ldr	r3, [pc, #36]	; (8008520 <HAL_TIM_Base_MspInit+0x14c>)
 80084fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008506:	2200      	movs	r2, #0
 8008508:	2101      	movs	r1, #1
 800850a:	201a      	movs	r0, #26
 800850c:	f002 f9d1 	bl	800a8b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008510:	201a      	movs	r0, #26
 8008512:	f002 f9e8 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
}
 8008516:	bf00      	nop
 8008518:	3728      	adds	r7, #40	; 0x28
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	40021000 	.word	0x40021000
 8008524:	40000400 	.word	0x40000400
 8008528:	40000c00 	.word	0x40000c00
 800852c:	40013400 	.word	0x40013400
 8008530:	40014000 	.word	0x40014000
 8008534:	40014400 	.word	0x40014400
 8008538:	40014800 	.word	0x40014800

0800853c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800853c:	480d      	ldr	r0, [pc, #52]	; (8008574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800853e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008540:	480d      	ldr	r0, [pc, #52]	; (8008578 <LoopForever+0x6>)
  ldr r1, =_edata
 8008542:	490e      	ldr	r1, [pc, #56]	; (800857c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008544:	4a0e      	ldr	r2, [pc, #56]	; (8008580 <LoopForever+0xe>)
  movs r3, #0
 8008546:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008548:	e002      	b.n	8008550 <LoopCopyDataInit>

0800854a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800854a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800854c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800854e:	3304      	adds	r3, #4

08008550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008554:	d3f9      	bcc.n	800854a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008556:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008558:	4c0b      	ldr	r4, [pc, #44]	; (8008588 <LoopForever+0x16>)
  movs r3, #0
 800855a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800855c:	e001      	b.n	8008562 <LoopFillZerobss>

0800855e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800855e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008560:	3204      	adds	r2, #4

08008562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008564:	d3fb      	bcc.n	800855e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008566:	f7ff fc69 	bl	8007e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800856a:	f007 fd27 	bl	800ffbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800856e:	f7ff f91f 	bl	80077b0 <main>

08008572 <LoopForever>:

LoopForever:
    b LoopForever
 8008572:	e7fe      	b.n	8008572 <LoopForever>
  ldr   r0, =_estack
 8008574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800857c:	20001e08 	.word	0x20001e08
  ldr r2, =_sidata
 8008580:	08015508 	.word	0x08015508
  ldr r2, =_sbss
 8008584:	20001e08 	.word	0x20001e08
  ldr r4, =_ebss
 8008588:	20002b14 	.word	0x20002b14

0800858c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800858c:	e7fe      	b.n	800858c <ADC1_2_IRQHandler>

0800858e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008598:	2003      	movs	r0, #3
 800859a:	f002 f97f 	bl	800a89c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800859e:	2000      	movs	r0, #0
 80085a0:	f000 f80e 	bl	80085c0 <HAL_InitTick>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	71fb      	strb	r3, [r7, #7]
 80085ae:	e001      	b.n	80085b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80085b0:	f7ff fa8e 	bl	8007ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80085b4:	79fb      	ldrb	r3, [r7, #7]

}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80085cc:	4b16      	ldr	r3, [pc, #88]	; (8008628 <HAL_InitTick+0x68>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d022      	beq.n	800861a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80085d4:	4b15      	ldr	r3, [pc, #84]	; (800862c <HAL_InitTick+0x6c>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	4b13      	ldr	r3, [pc, #76]	; (8008628 <HAL_InitTick+0x68>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80085e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80085e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e8:	4618      	mov	r0, r3
 80085ea:	f002 f998 	bl	800a91e <HAL_SYSTICK_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10f      	bne.n	8008614 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b0f      	cmp	r3, #15
 80085f8:	d809      	bhi.n	800860e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085fa:	2200      	movs	r2, #0
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008602:	f002 f956 	bl	800a8b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008606:	4a0a      	ldr	r2, [pc, #40]	; (8008630 <HAL_InitTick+0x70>)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	e007      	b.n	800861e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
 8008612:	e004      	b.n	800861e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	73fb      	strb	r3, [r7, #15]
 8008618:	e001      	b.n	800861e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800861e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000c38 	.word	0x20000c38
 800862c:	20000c30 	.word	0x20000c30
 8008630:	20000c34 	.word	0x20000c34

08008634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008638:	4b05      	ldr	r3, [pc, #20]	; (8008650 <HAL_IncTick+0x1c>)
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	4b05      	ldr	r3, [pc, #20]	; (8008654 <HAL_IncTick+0x20>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4413      	add	r3, r2
 8008642:	4a03      	ldr	r2, [pc, #12]	; (8008650 <HAL_IncTick+0x1c>)
 8008644:	6013      	str	r3, [r2, #0]
}
 8008646:	bf00      	nop
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20002b0c 	.word	0x20002b0c
 8008654:	20000c38 	.word	0x20000c38

08008658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  return uwTick;
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <HAL_GetTick+0x14>)
 800865e:	681b      	ldr	r3, [r3, #0]
}
 8008660:	4618      	mov	r0, r3
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20002b0c 	.word	0x20002b0c

08008670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008678:	f7ff ffee 	bl	8008658 <HAL_GetTick>
 800867c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008688:	d004      	beq.n	8008694 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <HAL_Delay+0x40>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008694:	bf00      	nop
 8008696:	f7ff ffdf 	bl	8008658 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d8f7      	bhi.n	8008696 <HAL_Delay+0x26>
  {
  }
}
 80086a6:	bf00      	nop
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000c38 	.word	0x20000c38

080086b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	609a      	str	r2, [r3, #8]
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	609a      	str	r2, [r3, #8]
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800871c:	b490      	push	{r4, r7}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3360      	adds	r3, #96	; 0x60
 800872e:	461a      	mov	r2, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008738:	6822      	ldr	r2, [r4, #0]
 800873a:	4b08      	ldr	r3, [pc, #32]	; (800875c <LL_ADC_SetOffset+0x40>)
 800873c:	4013      	ands	r3, r2
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	4313      	orrs	r3, r2
 800874a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800874e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008750:	bf00      	nop
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bc90      	pop	{r4, r7}
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	03fff000 	.word	0x03fff000

08008760 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008760:	b490      	push	{r4, r7}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3360      	adds	r3, #96	; 0x60
 800876e:	461a      	mov	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bc90      	pop	{r4, r7}
 8008786:	4770      	bx	lr

08008788 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008788:	b490      	push	{r4, r7}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3360      	adds	r3, #96	; 0x60
 8008798:	461a      	mov	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc90      	pop	{r4, r7}
 80087b6:	4770      	bx	lr

080087b8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80087b8:	b490      	push	{r4, r7}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3360      	adds	r3, #96	; 0x60
 80087c8:	461a      	mov	r2, r3
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4313      	orrs	r3, r2
 80087dc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bc90      	pop	{r4, r7}
 80087e6:	4770      	bx	lr

080087e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80087e8:	b490      	push	{r4, r7}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3360      	adds	r3, #96	; 0x60
 80087f8:	461a      	mov	r2, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4313      	orrs	r3, r2
 800880c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800880e:	bf00      	nop
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bc90      	pop	{r4, r7}
 8008816:	4770      	bx	lr

08008818 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	615a      	str	r2, [r3, #20]
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008852:	2301      	movs	r3, #1
 8008854:	e000      	b.n	8008858 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008864:	b490      	push	{r4, r7}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3330      	adds	r3, #48	; 0x30
 8008874:	461a      	mov	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	0a1b      	lsrs	r3, r3, #8
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	f003 030c 	and.w	r3, r3, #12
 8008880:	4413      	add	r3, r2
 8008882:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008884:	6822      	ldr	r2, [r4, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f003 031f 	and.w	r3, r3, #31
 800888c:	211f      	movs	r1, #31
 800888e:	fa01 f303 	lsl.w	r3, r1, r3
 8008892:	43db      	mvns	r3, r3
 8008894:	401a      	ands	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	0e9b      	lsrs	r3, r3, #26
 800889a:	f003 011f 	and.w	r1, r3, #31
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f003 031f 	and.w	r3, r3, #31
 80088a4:	fa01 f303 	lsl.w	r3, r1, r3
 80088a8:	4313      	orrs	r3, r2
 80088aa:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80088ac:	bf00      	nop
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc90      	pop	{r4, r7}
 80088b4:	4770      	bx	lr

080088b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80088b6:	b490      	push	{r4, r7}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3314      	adds	r3, #20
 80088c6:	461a      	mov	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	0e5b      	lsrs	r3, r3, #25
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	4413      	add	r3, r2
 80088d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	0d1b      	lsrs	r3, r3, #20
 80088dc:	f003 031f 	and.w	r3, r3, #31
 80088e0:	2107      	movs	r1, #7
 80088e2:	fa01 f303 	lsl.w	r3, r1, r3
 80088e6:	43db      	mvns	r3, r3
 80088e8:	401a      	ands	r2, r3
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	0d1b      	lsrs	r3, r3, #20
 80088ee:	f003 031f 	and.w	r3, r3, #31
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	fa01 f303 	lsl.w	r3, r1, r3
 80088f8:	4313      	orrs	r3, r2
 80088fa:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80088fc:	bf00      	nop
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bc90      	pop	{r4, r7}
 8008904:	4770      	bx	lr
	...

08008908 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008920:	43db      	mvns	r3, r3
 8008922:	401a      	ands	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f003 0318 	and.w	r3, r3, #24
 800892a:	4908      	ldr	r1, [pc, #32]	; (800894c <LL_ADC_SetChannelSingleDiff+0x44>)
 800892c:	40d9      	lsrs	r1, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	400b      	ands	r3, r1
 8008932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008936:	431a      	orrs	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800893e:	bf00      	nop
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	0007ffff 	.word	0x0007ffff

08008950 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f003 031f 	and.w	r3, r3, #31
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800897c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6093      	str	r3, [r2, #8]
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a4:	d101      	bne.n	80089aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80089c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80089cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089f4:	d101      	bne.n	80089fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e000      	b.n	80089fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a1c:	f043 0201 	orr.w	r2, r3, #1
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a44:	f043 0202 	orr.w	r2, r3, #2
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d101      	bne.n	8008a70 <LL_ADC_IsEnabled+0x18>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e000      	b.n	8008a72 <LL_ADC_IsEnabled+0x1a>
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d101      	bne.n	8008a96 <LL_ADC_IsDisableOngoing+0x18>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e000      	b.n	8008a98 <LL_ADC_IsDisableOngoing+0x1a>
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ab8:	f043 0204 	orr.w	r2, r3, #4
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008adc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ae0:	f043 0210 	orr.w	r2, r3, #16
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d101      	bne.n	8008b0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e000      	b.n	8008b0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b2e:	f043 0220 	orr.w	r2, r3, #32
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d101      	bne.n	8008b5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008b68:	b590      	push	{r4, r7, lr}
 8008b6a:	b089      	sub	sp, #36	; 0x24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e1ad      	b.n	8008ede <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d109      	bne.n	8008ba4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7fe f847 	bl	8006c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff fef1 	bl	8008990 <LL_ADC_IsDeepPowerDownEnabled>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff fed7 	bl	800896c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff ff0c 	bl	80089e0 <LL_ADC_IsInternalRegulatorEnabled>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d113      	bne.n	8008bf6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff fef0 	bl	80089b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008bd8:	4b9e      	ldr	r3, [pc, #632]	; (8008e54 <HAL_ADC_Init+0x2ec>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	099b      	lsrs	r3, r3, #6
 8008bde:	4a9e      	ldr	r2, [pc, #632]	; (8008e58 <HAL_ADC_Init+0x2f0>)
 8008be0:	fba2 2303 	umull	r2, r3, r2, r3
 8008be4:	099b      	lsrs	r3, r3, #6
 8008be6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008be8:	e002      	b.n	8008bf0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1f9      	bne.n	8008bea <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff fef0 	bl	80089e0 <LL_ADC_IsInternalRegulatorEnabled>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10d      	bne.n	8008c22 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c0a:	f043 0210 	orr.w	r2, r3, #16
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c16:	f043 0201 	orr.w	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff ff64 	bl	8008af4 <LL_ADC_REG_IsConversionOngoing>
 8008c2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c32:	f003 0310 	and.w	r3, r3, #16
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f040 8148 	bne.w	8008ecc <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f040 8144 	bne.w	8008ecc <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008c4c:	f043 0202 	orr.w	r2, r3, #2
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fefd 	bl	8008a58 <LL_ADC_IsEnabled>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d141      	bne.n	8008ce8 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c6c:	d004      	beq.n	8008c78 <HAL_ADC_Init+0x110>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a7a      	ldr	r2, [pc, #488]	; (8008e5c <HAL_ADC_Init+0x2f4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d10f      	bne.n	8008c98 <HAL_ADC_Init+0x130>
 8008c78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008c7c:	f7ff feec 	bl	8008a58 <LL_ADC_IsEnabled>
 8008c80:	4604      	mov	r4, r0
 8008c82:	4876      	ldr	r0, [pc, #472]	; (8008e5c <HAL_ADC_Init+0x2f4>)
 8008c84:	f7ff fee8 	bl	8008a58 <LL_ADC_IsEnabled>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	4323      	orrs	r3, r4
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bf0c      	ite	eq
 8008c90:	2301      	moveq	r3, #1
 8008c92:	2300      	movne	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	e012      	b.n	8008cbe <HAL_ADC_Init+0x156>
 8008c98:	4871      	ldr	r0, [pc, #452]	; (8008e60 <HAL_ADC_Init+0x2f8>)
 8008c9a:	f7ff fedd 	bl	8008a58 <LL_ADC_IsEnabled>
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4870      	ldr	r0, [pc, #448]	; (8008e64 <HAL_ADC_Init+0x2fc>)
 8008ca2:	f7ff fed9 	bl	8008a58 <LL_ADC_IsEnabled>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	431c      	orrs	r4, r3
 8008caa:	486f      	ldr	r0, [pc, #444]	; (8008e68 <HAL_ADC_Init+0x300>)
 8008cac:	f7ff fed4 	bl	8008a58 <LL_ADC_IsEnabled>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4323      	orrs	r3, r4
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bf0c      	ite	eq
 8008cb8:	2301      	moveq	r3, #1
 8008cba:	2300      	movne	r3, #0
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d012      	beq.n	8008ce8 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cca:	d004      	beq.n	8008cd6 <HAL_ADC_Init+0x16e>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a62      	ldr	r2, [pc, #392]	; (8008e5c <HAL_ADC_Init+0x2f4>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d101      	bne.n	8008cda <HAL_ADC_Init+0x172>
 8008cd6:	4a65      	ldr	r2, [pc, #404]	; (8008e6c <HAL_ADC_Init+0x304>)
 8008cd8:	e000      	b.n	8008cdc <HAL_ADC_Init+0x174>
 8008cda:	4a65      	ldr	r2, [pc, #404]	; (8008e70 <HAL_ADC_Init+0x308>)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f7ff fce6 	bl	80086b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	7f5b      	ldrb	r3, [r3, #29]
 8008cec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008cf2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008cf8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008cfe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d06:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d106      	bne.n	8008d24 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	045b      	lsls	r3, r3, #17
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d009      	beq.n	8008d40 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	4b4b      	ldr	r3, [pc, #300]	; (8008e74 <HAL_ADC_Init+0x30c>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6812      	ldr	r2, [r2, #0]
 8008d4e:	69b9      	ldr	r1, [r7, #24]
 8008d50:	430b      	orrs	r3, r1
 8008d52:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff fec0 	bl	8008af4 <LL_ADC_REG_IsConversionOngoing>
 8008d74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fee1 	bl	8008b42 <LL_ADC_INJ_IsConversionOngoing>
 8008d80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d17f      	bne.n	8008e88 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d17c      	bne.n	8008e88 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008d92:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d9a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008daa:	f023 0302 	bic.w	r3, r3, #2
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	6812      	ldr	r2, [r2, #0]
 8008db2:	69b9      	ldr	r1, [r7, #24]
 8008db4:	430b      	orrs	r3, r1
 8008db6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d017      	beq.n	8008df0 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	691a      	ldr	r2, [r3, #16]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008dce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008dd8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008ddc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6911      	ldr	r1, [r2, #16]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6812      	ldr	r2, [r2, #0]
 8008de8:	430b      	orrs	r3, r1
 8008dea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008dee:	e013      	b.n	8008e18 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691a      	ldr	r2, [r3, #16]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008dfe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6812      	ldr	r2, [r2, #0]
 8008e0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008e10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d12a      	bne.n	8008e78 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e2c:	f023 0304 	bic.w	r3, r3, #4
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e38:	4311      	orrs	r1, r2
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008e3e:	4311      	orrs	r1, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008e44:	430a      	orrs	r2, r1
 8008e46:	431a      	orrs	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f042 0201 	orr.w	r2, r2, #1
 8008e50:	611a      	str	r2, [r3, #16]
 8008e52:	e019      	b.n	8008e88 <HAL_ADC_Init+0x320>
 8008e54:	20000c30 	.word	0x20000c30
 8008e58:	053e2d63 	.word	0x053e2d63
 8008e5c:	50000100 	.word	0x50000100
 8008e60:	50000400 	.word	0x50000400
 8008e64:	50000500 	.word	0x50000500
 8008e68:	50000600 	.word	0x50000600
 8008e6c:	50000300 	.word	0x50000300
 8008e70:	50000700 	.word	0x50000700
 8008e74:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691a      	ldr	r2, [r3, #16]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0201 	bic.w	r2, r2, #1
 8008e86:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d10c      	bne.n	8008eaa <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e96:	f023 010f 	bic.w	r1, r3, #15
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	1e5a      	subs	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8008ea8:	e007      	b.n	8008eba <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 020f 	bic.w	r2, r2, #15
 8008eb8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ebe:	f023 0303 	bic.w	r3, r3, #3
 8008ec2:	f043 0201 	orr.w	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008eca:	e007      	b.n	8008edc <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed0:	f043 0210 	orr.w	r2, r3, #16
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3724      	adds	r7, #36	; 0x24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd90      	pop	{r4, r7, pc}
 8008ee6:	bf00      	nop

08008ee8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008efc:	d004      	beq.n	8008f08 <HAL_ADC_Start_DMA+0x20>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a58      	ldr	r2, [pc, #352]	; (8009064 <HAL_ADC_Start_DMA+0x17c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d101      	bne.n	8008f0c <HAL_ADC_Start_DMA+0x24>
 8008f08:	4b57      	ldr	r3, [pc, #348]	; (8009068 <HAL_ADC_Start_DMA+0x180>)
 8008f0a:	e000      	b.n	8008f0e <HAL_ADC_Start_DMA+0x26>
 8008f0c:	4b57      	ldr	r3, [pc, #348]	; (800906c <HAL_ADC_Start_DMA+0x184>)
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fd1e 	bl	8008950 <LL_ADC_GetMultimode>
 8008f14:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff fdea 	bl	8008af4 <LL_ADC_REG_IsConversionOngoing>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f040 8096 	bne.w	8009054 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d101      	bne.n	8008f36 <HAL_ADC_Start_DMA+0x4e>
 8008f32:	2302      	movs	r3, #2
 8008f34:	e091      	b.n	800905a <HAL_ADC_Start_DMA+0x172>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b05      	cmp	r3, #5
 8008f48:	d002      	beq.n	8008f50 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	d17a      	bne.n	8009046 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 fd7b 	bl	8009a4c <ADC_Enable>
 8008f56:	4603      	mov	r3, r0
 8008f58:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d16d      	bne.n	800903c <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008f68:	f023 0301 	bic.w	r3, r3, #1
 8008f6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a3a      	ldr	r2, [pc, #232]	; (8009064 <HAL_ADC_Start_DMA+0x17c>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d009      	beq.n	8008f92 <HAL_ADC_Start_DMA+0xaa>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a3b      	ldr	r2, [pc, #236]	; (8009070 <HAL_ADC_Start_DMA+0x188>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d002      	beq.n	8008f8e <HAL_ADC_Start_DMA+0xa6>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	e003      	b.n	8008f96 <HAL_ADC_Start_DMA+0xae>
 8008f8e:	4b39      	ldr	r3, [pc, #228]	; (8009074 <HAL_ADC_Start_DMA+0x18c>)
 8008f90:	e001      	b.n	8008f96 <HAL_ADC_Start_DMA+0xae>
 8008f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d002      	beq.n	8008fa4 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d105      	bne.n	8008fb0 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fa8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d006      	beq.n	8008fca <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc0:	f023 0206 	bic.w	r2, r3, #6
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	661a      	str	r2, [r3, #96]	; 0x60
 8008fc8:	e002      	b.n	8008fd0 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd4:	4a28      	ldr	r2, [pc, #160]	; (8009078 <HAL_ADC_Start_DMA+0x190>)
 8008fd6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fdc:	4a27      	ldr	r2, [pc, #156]	; (800907c <HAL_ADC_Start_DMA+0x194>)
 8008fde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	4a26      	ldr	r2, [pc, #152]	; (8009080 <HAL_ADC_Start_DMA+0x198>)
 8008fe6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	221c      	movs	r2, #28
 8008fee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0210 	orr.w	r2, r2, #16
 8009006:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3340      	adds	r3, #64	; 0x40
 8009022:	4619      	mov	r1, r3
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f002 f94c 	bl	800b2c4 <HAL_DMA_Start_IT>
 800902c:	4603      	mov	r3, r0
 800902e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff fd35 	bl	8008aa4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800903a:	e00d      	b.n	8009058 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009044:	e008      	b.n	8009058 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009052:	e001      	b.n	8009058 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009054:	2302      	movs	r3, #2
 8009056:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	50000100 	.word	0x50000100
 8009068:	50000300 	.word	0x50000300
 800906c:	50000700 	.word	0x50000700
 8009070:	50000500 	.word	0x50000500
 8009074:	50000400 	.word	0x50000400
 8009078:	08009bb1 	.word	0x08009bb1
 800907c:	08009c89 	.word	0x08009c89
 8009080:	08009ca5 	.word	0x08009ca5

08009084 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <HAL_ADC_Stop_DMA+0x16>
 8009096:	2302      	movs	r3, #2
 8009098:	e051      	b.n	800913e <HAL_ADC_Stop_DMA+0xba>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80090a2:	2103      	movs	r1, #3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fc1d 	bl	80098e4 <ADC_ConversionStop>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d13f      	bne.n	8009134 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68da      	ldr	r2, [r3, #12]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0201 	bic.w	r2, r2, #1
 80090c2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d10f      	bne.n	80090f2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d6:	4618      	mov	r0, r3
 80090d8:	f002 f96f 	bl	800b3ba <HAL_DMA_Abort>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d005      	beq.n	80090f2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0210 	bic.w	r2, r2, #16
 8009100:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fcf9 	bl	8009b00 <ADC_Disable>
 800910e:	4603      	mov	r3, r0
 8009110:	73fb      	strb	r3, [r7, #15]
 8009112:	e002      	b.n	800911a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fcf3 	bl	8009b00 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d109      	bne.n	8009134 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009124:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009128:	f023 0301 	bic.w	r3, r3, #1
 800912c:	f043 0201 	orr.w	r2, r3, #1
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009162:	bf00      	nop
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
	...

08009184 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b0a6      	sub	sp, #152	; 0x98
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d101      	bne.n	80091a6 <HAL_ADC_ConfigChannel+0x22>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e38e      	b.n	80098c4 <HAL_ADC_ConfigChannel+0x740>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff fc9e 	bl	8008af4 <LL_ADC_REG_IsConversionOngoing>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f040 836f 	bne.w	800989e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	6859      	ldr	r1, [r3, #4]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	461a      	mov	r2, r3
 80091ce:	f7ff fb49 	bl	8008864 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff fc8c 	bl	8008af4 <LL_ADC_REG_IsConversionOngoing>
 80091dc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff fcac 	bl	8008b42 <LL_ADC_INJ_IsConversionOngoing>
 80091ea:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80091ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f040 817b 	bne.w	80094ee <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80091f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f040 8176 	bne.w	80094ee <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800920a:	d10f      	bne.n	800922c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6818      	ldr	r0, [r3, #0]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2200      	movs	r2, #0
 8009216:	4619      	mov	r1, r3
 8009218:	f7ff fb4d 	bl	80088b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff faf7 	bl	8008818 <LL_ADC_SetSamplingTimeCommonConfig>
 800922a:	e00e      	b.n	800924a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	6819      	ldr	r1, [r3, #0]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	461a      	mov	r2, r3
 800923a:	f7ff fb3c 	bl	80088b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2100      	movs	r1, #0
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff fae7 	bl	8008818 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	695a      	ldr	r2, [r3, #20]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	08db      	lsrs	r3, r3, #3
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	fa02 f303 	lsl.w	r3, r2, r3
 8009260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b04      	cmp	r3, #4
 800926a:	d022      	beq.n	80092b2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	6919      	ldr	r1, [r3, #16]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800927c:	f7ff fa4e 	bl	800871c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	6919      	ldr	r1, [r3, #16]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	461a      	mov	r2, r3
 800928e:	f7ff fa93 	bl	80087b8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6919      	ldr	r1, [r3, #16]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	7f1b      	ldrb	r3, [r3, #28]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d102      	bne.n	80092a8 <HAL_ADC_ConfigChannel+0x124>
 80092a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092a6:	e000      	b.n	80092aa <HAL_ADC_ConfigChannel+0x126>
 80092a8:	2300      	movs	r3, #0
 80092aa:	461a      	mov	r2, r3
 80092ac:	f7ff fa9c 	bl	80087e8 <LL_ADC_SetOffsetSaturation>
 80092b0:	e11d      	b.n	80094ee <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2100      	movs	r1, #0
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7ff fa51 	bl	8008760 <LL_ADC_GetOffsetChannel>
 80092be:	4603      	mov	r3, r0
 80092c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <HAL_ADC_ConfigChannel+0x15a>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2100      	movs	r1, #0
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7ff fa46 	bl	8008760 <LL_ADC_GetOffsetChannel>
 80092d4:	4603      	mov	r3, r0
 80092d6:	0e9b      	lsrs	r3, r3, #26
 80092d8:	f003 021f 	and.w	r2, r3, #31
 80092dc:	e012      	b.n	8009304 <HAL_ADC_ConfigChannel+0x180>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2100      	movs	r1, #0
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff fa3b 	bl	8008760 <LL_ADC_GetOffsetChannel>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092f4:	fa93 f3a3 	rbit	r3, r3
 80092f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80092fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092fc:	fab3 f383 	clz	r3, r3
 8009300:	b2db      	uxtb	r3, r3
 8009302:	461a      	mov	r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800930c:	2b00      	cmp	r3, #0
 800930e:	d105      	bne.n	800931c <HAL_ADC_ConfigChannel+0x198>
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	0e9b      	lsrs	r3, r3, #26
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	e00a      	b.n	8009332 <HAL_ADC_ConfigChannel+0x1ae>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009324:	fa93 f3a3 	rbit	r3, r3
 8009328:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800932a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800932c:	fab3 f383 	clz	r3, r3
 8009330:	b2db      	uxtb	r3, r3
 8009332:	429a      	cmp	r2, r3
 8009334:	d106      	bne.n	8009344 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2200      	movs	r2, #0
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff fa22 	bl	8008788 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2101      	movs	r1, #1
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff fa08 	bl	8008760 <LL_ADC_GetOffsetChannel>
 8009350:	4603      	mov	r3, r0
 8009352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10a      	bne.n	8009370 <HAL_ADC_ConfigChannel+0x1ec>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2101      	movs	r1, #1
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff f9fd 	bl	8008760 <LL_ADC_GetOffsetChannel>
 8009366:	4603      	mov	r3, r0
 8009368:	0e9b      	lsrs	r3, r3, #26
 800936a:	f003 021f 	and.w	r2, r3, #31
 800936e:	e010      	b.n	8009392 <HAL_ADC_ConfigChannel+0x20e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2101      	movs	r1, #1
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff f9f2 	bl	8008760 <LL_ADC_GetOffsetChannel>
 800937c:	4603      	mov	r3, r0
 800937e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009382:	fa93 f3a3 	rbit	r3, r3
 8009386:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938a:	fab3 f383 	clz	r3, r3
 800938e:	b2db      	uxtb	r3, r3
 8009390:	461a      	mov	r2, r3
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800939a:	2b00      	cmp	r3, #0
 800939c:	d105      	bne.n	80093aa <HAL_ADC_ConfigChannel+0x226>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	0e9b      	lsrs	r3, r3, #26
 80093a4:	f003 031f 	and.w	r3, r3, #31
 80093a8:	e00a      	b.n	80093c0 <HAL_ADC_ConfigChannel+0x23c>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093b2:	fa93 f3a3 	rbit	r3, r3
 80093b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80093b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ba:	fab3 f383 	clz	r3, r3
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d106      	bne.n	80093d2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2200      	movs	r2, #0
 80093ca:	2101      	movs	r1, #1
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff f9db 	bl	8008788 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2102      	movs	r1, #2
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff f9c1 	bl	8008760 <LL_ADC_GetOffsetChannel>
 80093de:	4603      	mov	r3, r0
 80093e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <HAL_ADC_ConfigChannel+0x27a>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2102      	movs	r1, #2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff f9b6 	bl	8008760 <LL_ADC_GetOffsetChannel>
 80093f4:	4603      	mov	r3, r0
 80093f6:	0e9b      	lsrs	r3, r3, #26
 80093f8:	f003 021f 	and.w	r2, r3, #31
 80093fc:	e010      	b.n	8009420 <HAL_ADC_ConfigChannel+0x29c>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2102      	movs	r1, #2
 8009404:	4618      	mov	r0, r3
 8009406:	f7ff f9ab 	bl	8008760 <LL_ADC_GetOffsetChannel>
 800940a:	4603      	mov	r3, r0
 800940c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009410:	fa93 f3a3 	rbit	r3, r3
 8009414:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009418:	fab3 f383 	clz	r3, r3
 800941c:	b2db      	uxtb	r3, r3
 800941e:	461a      	mov	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009428:	2b00      	cmp	r3, #0
 800942a:	d105      	bne.n	8009438 <HAL_ADC_ConfigChannel+0x2b4>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	0e9b      	lsrs	r3, r3, #26
 8009432:	f003 031f 	and.w	r3, r3, #31
 8009436:	e00a      	b.n	800944e <HAL_ADC_ConfigChannel+0x2ca>
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800943e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009440:	fa93 f3a3 	rbit	r3, r3
 8009444:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009448:	fab3 f383 	clz	r3, r3
 800944c:	b2db      	uxtb	r3, r3
 800944e:	429a      	cmp	r2, r3
 8009450:	d106      	bne.n	8009460 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2200      	movs	r2, #0
 8009458:	2102      	movs	r1, #2
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff f994 	bl	8008788 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2103      	movs	r1, #3
 8009466:	4618      	mov	r0, r3
 8009468:	f7ff f97a 	bl	8008760 <LL_ADC_GetOffsetChannel>
 800946c:	4603      	mov	r3, r0
 800946e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10a      	bne.n	800948c <HAL_ADC_ConfigChannel+0x308>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2103      	movs	r1, #3
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff f96f 	bl	8008760 <LL_ADC_GetOffsetChannel>
 8009482:	4603      	mov	r3, r0
 8009484:	0e9b      	lsrs	r3, r3, #26
 8009486:	f003 021f 	and.w	r2, r3, #31
 800948a:	e010      	b.n	80094ae <HAL_ADC_ConfigChannel+0x32a>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2103      	movs	r1, #3
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff f964 	bl	8008760 <LL_ADC_GetOffsetChannel>
 8009498:	4603      	mov	r3, r0
 800949a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800949c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800949e:	fa93 f3a3 	rbit	r3, r3
 80094a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80094a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a6:	fab3 f383 	clz	r3, r3
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d105      	bne.n	80094c6 <HAL_ADC_ConfigChannel+0x342>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	0e9b      	lsrs	r3, r3, #26
 80094c0:	f003 031f 	and.w	r3, r3, #31
 80094c4:	e00a      	b.n	80094dc <HAL_ADC_ConfigChannel+0x358>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ce:	fa93 f3a3 	rbit	r3, r3
 80094d2:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80094d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d6:	fab3 f383 	clz	r3, r3
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	429a      	cmp	r2, r3
 80094de:	d106      	bne.n	80094ee <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2200      	movs	r2, #0
 80094e6:	2103      	movs	r1, #3
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff f94d 	bl	8008788 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff fab0 	bl	8008a58 <LL_ADC_IsEnabled>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f040 810c 	bne.w	8009718 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6818      	ldr	r0, [r3, #0]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	6819      	ldr	r1, [r3, #0]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	461a      	mov	r2, r3
 800950e:	f7ff f9fb 	bl	8008908 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	4aaf      	ldr	r2, [pc, #700]	; (80097d4 <HAL_ADC_ConfigChannel+0x650>)
 8009518:	4293      	cmp	r3, r2
 800951a:	f040 80fd 	bne.w	8009718 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10b      	bne.n	8009546 <HAL_ADC_ConfigChannel+0x3c2>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	0e9b      	lsrs	r3, r3, #26
 8009534:	3301      	adds	r3, #1
 8009536:	f003 031f 	and.w	r3, r3, #31
 800953a:	2b09      	cmp	r3, #9
 800953c:	bf94      	ite	ls
 800953e:	2301      	movls	r3, #1
 8009540:	2300      	movhi	r3, #0
 8009542:	b2db      	uxtb	r3, r3
 8009544:	e012      	b.n	800956c <HAL_ADC_ConfigChannel+0x3e8>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800954c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800954e:	fa93 f3a3 	rbit	r3, r3
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009556:	fab3 f383 	clz	r3, r3
 800955a:	b2db      	uxtb	r3, r3
 800955c:	3301      	adds	r3, #1
 800955e:	f003 031f 	and.w	r3, r3, #31
 8009562:	2b09      	cmp	r3, #9
 8009564:	bf94      	ite	ls
 8009566:	2301      	movls	r3, #1
 8009568:	2300      	movhi	r3, #0
 800956a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800956c:	2b00      	cmp	r3, #0
 800956e:	d064      	beq.n	800963a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009578:	2b00      	cmp	r3, #0
 800957a:	d107      	bne.n	800958c <HAL_ADC_ConfigChannel+0x408>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	0e9b      	lsrs	r3, r3, #26
 8009582:	3301      	adds	r3, #1
 8009584:	069b      	lsls	r3, r3, #26
 8009586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800958a:	e00e      	b.n	80095aa <HAL_ADC_ConfigChannel+0x426>
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	fa93 f3a3 	rbit	r3, r3
 8009598:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800959a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959c:	fab3 f383 	clz	r3, r3
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	3301      	adds	r3, #1
 80095a4:	069b      	lsls	r3, r3, #26
 80095a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d109      	bne.n	80095ca <HAL_ADC_ConfigChannel+0x446>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	0e9b      	lsrs	r3, r3, #26
 80095bc:	3301      	adds	r3, #1
 80095be:	f003 031f 	and.w	r3, r3, #31
 80095c2:	2101      	movs	r1, #1
 80095c4:	fa01 f303 	lsl.w	r3, r1, r3
 80095c8:	e010      	b.n	80095ec <HAL_ADC_ConfigChannel+0x468>
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	fa93 f3a3 	rbit	r3, r3
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	fab3 f383 	clz	r3, r3
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	3301      	adds	r3, #1
 80095e2:	f003 031f 	and.w	r3, r3, #31
 80095e6:	2101      	movs	r1, #1
 80095e8:	fa01 f303 	lsl.w	r3, r1, r3
 80095ec:	ea42 0103 	orr.w	r1, r2, r3
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <HAL_ADC_ConfigChannel+0x48e>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	0e9b      	lsrs	r3, r3, #26
 8009602:	3301      	adds	r3, #1
 8009604:	f003 021f 	and.w	r2, r3, #31
 8009608:	4613      	mov	r3, r2
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	4413      	add	r3, r2
 800960e:	051b      	lsls	r3, r3, #20
 8009610:	e011      	b.n	8009636 <HAL_ADC_ConfigChannel+0x4b2>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	fa93 f3a3 	rbit	r3, r3
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	fab3 f383 	clz	r3, r3
 8009626:	b2db      	uxtb	r3, r3
 8009628:	3301      	adds	r3, #1
 800962a:	f003 021f 	and.w	r2, r3, #31
 800962e:	4613      	mov	r3, r2
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	4413      	add	r3, r2
 8009634:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009636:	430b      	orrs	r3, r1
 8009638:	e069      	b.n	800970e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009642:	2b00      	cmp	r3, #0
 8009644:	d107      	bne.n	8009656 <HAL_ADC_ConfigChannel+0x4d2>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	0e9b      	lsrs	r3, r3, #26
 800964c:	3301      	adds	r3, #1
 800964e:	069b      	lsls	r3, r3, #26
 8009650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009654:	e00e      	b.n	8009674 <HAL_ADC_ConfigChannel+0x4f0>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	fa93 f3a3 	rbit	r3, r3
 8009662:	61fb      	str	r3, [r7, #28]
  return result;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	fab3 f383 	clz	r3, r3
 800966a:	b2db      	uxtb	r3, r3
 800966c:	3301      	adds	r3, #1
 800966e:	069b      	lsls	r3, r3, #26
 8009670:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800967c:	2b00      	cmp	r3, #0
 800967e:	d109      	bne.n	8009694 <HAL_ADC_ConfigChannel+0x510>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	0e9b      	lsrs	r3, r3, #26
 8009686:	3301      	adds	r3, #1
 8009688:	f003 031f 	and.w	r3, r3, #31
 800968c:	2101      	movs	r1, #1
 800968e:	fa01 f303 	lsl.w	r3, r1, r3
 8009692:	e010      	b.n	80096b6 <HAL_ADC_ConfigChannel+0x532>
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	fa93 f3a3 	rbit	r3, r3
 80096a0:	617b      	str	r3, [r7, #20]
  return result;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	fab3 f383 	clz	r3, r3
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	3301      	adds	r3, #1
 80096ac:	f003 031f 	and.w	r3, r3, #31
 80096b0:	2101      	movs	r1, #1
 80096b2:	fa01 f303 	lsl.w	r3, r1, r3
 80096b6:	ea42 0103 	orr.w	r1, r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10d      	bne.n	80096e2 <HAL_ADC_ConfigChannel+0x55e>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	0e9b      	lsrs	r3, r3, #26
 80096cc:	3301      	adds	r3, #1
 80096ce:	f003 021f 	and.w	r2, r3, #31
 80096d2:	4613      	mov	r3, r2
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	4413      	add	r3, r2
 80096d8:	3b1e      	subs	r3, #30
 80096da:	051b      	lsls	r3, r3, #20
 80096dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80096e0:	e014      	b.n	800970c <HAL_ADC_ConfigChannel+0x588>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	fa93 f3a3 	rbit	r3, r3
 80096ee:	60fb      	str	r3, [r7, #12]
  return result;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	fab3 f383 	clz	r3, r3
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	3301      	adds	r3, #1
 80096fa:	f003 021f 	and.w	r2, r3, #31
 80096fe:	4613      	mov	r3, r2
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	4413      	add	r3, r2
 8009704:	3b1e      	subs	r3, #30
 8009706:	051b      	lsls	r3, r3, #20
 8009708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800970c:	430b      	orrs	r3, r1
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	6892      	ldr	r2, [r2, #8]
 8009712:	4619      	mov	r1, r3
 8009714:	f7ff f8cf 	bl	80088b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	4b2e      	ldr	r3, [pc, #184]	; (80097d8 <HAL_ADC_ConfigChannel+0x654>)
 800971e:	4013      	ands	r3, r2
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 80c9 	beq.w	80098b8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800972e:	d004      	beq.n	800973a <HAL_ADC_ConfigChannel+0x5b6>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a29      	ldr	r2, [pc, #164]	; (80097dc <HAL_ADC_ConfigChannel+0x658>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d101      	bne.n	800973e <HAL_ADC_ConfigChannel+0x5ba>
 800973a:	4b29      	ldr	r3, [pc, #164]	; (80097e0 <HAL_ADC_ConfigChannel+0x65c>)
 800973c:	e000      	b.n	8009740 <HAL_ADC_ConfigChannel+0x5bc>
 800973e:	4b29      	ldr	r3, [pc, #164]	; (80097e4 <HAL_ADC_ConfigChannel+0x660>)
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe ffdd 	bl	8008700 <LL_ADC_GetCommonPathInternalCh>
 8009746:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a26      	ldr	r2, [pc, #152]	; (80097e8 <HAL_ADC_ConfigChannel+0x664>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d004      	beq.n	800975e <HAL_ADC_ConfigChannel+0x5da>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a24      	ldr	r2, [pc, #144]	; (80097ec <HAL_ADC_ConfigChannel+0x668>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d14e      	bne.n	80097fc <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800975e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d148      	bne.n	80097fc <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009772:	d005      	beq.n	8009780 <HAL_ADC_ConfigChannel+0x5fc>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a1d      	ldr	r2, [pc, #116]	; (80097f0 <HAL_ADC_ConfigChannel+0x66c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	f040 8099 	bne.w	80098b2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009788:	d004      	beq.n	8009794 <HAL_ADC_ConfigChannel+0x610>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a13      	ldr	r2, [pc, #76]	; (80097dc <HAL_ADC_ConfigChannel+0x658>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d101      	bne.n	8009798 <HAL_ADC_ConfigChannel+0x614>
 8009794:	4a12      	ldr	r2, [pc, #72]	; (80097e0 <HAL_ADC_ConfigChannel+0x65c>)
 8009796:	e000      	b.n	800979a <HAL_ADC_ConfigChannel+0x616>
 8009798:	4a12      	ldr	r2, [pc, #72]	; (80097e4 <HAL_ADC_ConfigChannel+0x660>)
 800979a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800979e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7fe ff98 	bl	80086da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80097aa:	4b12      	ldr	r3, [pc, #72]	; (80097f4 <HAL_ADC_ConfigChannel+0x670>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	099b      	lsrs	r3, r3, #6
 80097b0:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <HAL_ADC_ConfigChannel+0x674>)
 80097b2:	fba2 2303 	umull	r2, r3, r2, r3
 80097b6:	099a      	lsrs	r2, r3, #6
 80097b8:	4613      	mov	r3, r2
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80097c2:	e002      	b.n	80097ca <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f9      	bne.n	80097c4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80097d0:	e06f      	b.n	80098b2 <HAL_ADC_ConfigChannel+0x72e>
 80097d2:	bf00      	nop
 80097d4:	407f0000 	.word	0x407f0000
 80097d8:	80080000 	.word	0x80080000
 80097dc:	50000100 	.word	0x50000100
 80097e0:	50000300 	.word	0x50000300
 80097e4:	50000700 	.word	0x50000700
 80097e8:	c3210000 	.word	0xc3210000
 80097ec:	90c00010 	.word	0x90c00010
 80097f0:	50000600 	.word	0x50000600
 80097f4:	20000c30 	.word	0x20000c30
 80097f8:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a32      	ldr	r2, [pc, #200]	; (80098cc <HAL_ADC_ConfigChannel+0x748>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d125      	bne.n	8009852 <HAL_ADC_ConfigChannel+0x6ce>
 8009806:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800980a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d11f      	bne.n	8009852 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a2e      	ldr	r2, [pc, #184]	; (80098d0 <HAL_ADC_ConfigChannel+0x74c>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d104      	bne.n	8009826 <HAL_ADC_ConfigChannel+0x6a2>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a2c      	ldr	r2, [pc, #176]	; (80098d4 <HAL_ADC_ConfigChannel+0x750>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d047      	beq.n	80098b6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800982e:	d004      	beq.n	800983a <HAL_ADC_ConfigChannel+0x6b6>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a26      	ldr	r2, [pc, #152]	; (80098d0 <HAL_ADC_ConfigChannel+0x74c>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d101      	bne.n	800983e <HAL_ADC_ConfigChannel+0x6ba>
 800983a:	4a27      	ldr	r2, [pc, #156]	; (80098d8 <HAL_ADC_ConfigChannel+0x754>)
 800983c:	e000      	b.n	8009840 <HAL_ADC_ConfigChannel+0x6bc>
 800983e:	4a27      	ldr	r2, [pc, #156]	; (80098dc <HAL_ADC_ConfigChannel+0x758>)
 8009840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009848:	4619      	mov	r1, r3
 800984a:	4610      	mov	r0, r2
 800984c:	f7fe ff45 	bl	80086da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009850:	e031      	b.n	80098b6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a22      	ldr	r2, [pc, #136]	; (80098e0 <HAL_ADC_ConfigChannel+0x75c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d12d      	bne.n	80098b8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800985c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d127      	bne.n	80098b8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <HAL_ADC_ConfigChannel+0x74c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d022      	beq.n	80098b8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800987a:	d004      	beq.n	8009886 <HAL_ADC_ConfigChannel+0x702>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a13      	ldr	r2, [pc, #76]	; (80098d0 <HAL_ADC_ConfigChannel+0x74c>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d101      	bne.n	800988a <HAL_ADC_ConfigChannel+0x706>
 8009886:	4a14      	ldr	r2, [pc, #80]	; (80098d8 <HAL_ADC_ConfigChannel+0x754>)
 8009888:	e000      	b.n	800988c <HAL_ADC_ConfigChannel+0x708>
 800988a:	4a14      	ldr	r2, [pc, #80]	; (80098dc <HAL_ADC_ConfigChannel+0x758>)
 800988c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009890:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f7fe ff1f 	bl	80086da <LL_ADC_SetCommonPathInternalCh>
 800989c:	e00c      	b.n	80098b8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a2:	f043 0220 	orr.w	r2, r3, #32
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80098b0:	e002      	b.n	80098b8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80098b2:	bf00      	nop
 80098b4:	e000      	b.n	80098b8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80098b6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80098c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3798      	adds	r7, #152	; 0x98
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	c7520000 	.word	0xc7520000
 80098d0:	50000100 	.word	0x50000100
 80098d4:	50000500 	.word	0x50000500
 80098d8:	50000300 	.word	0x50000300
 80098dc:	50000700 	.word	0x50000700
 80098e0:	cb840000 	.word	0xcb840000

080098e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff f8fa 	bl	8008af4 <LL_ADC_REG_IsConversionOngoing>
 8009900:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff f91b 	bl	8008b42 <LL_ADC_INJ_IsConversionOngoing>
 800990c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d103      	bne.n	800991c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 8090 	beq.w	8009a3c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d02a      	beq.n	8009980 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	7f5b      	ldrb	r3, [r3, #29]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d126      	bne.n	8009980 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	7f1b      	ldrb	r3, [r3, #28]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d122      	bne.n	8009980 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800993a:	2301      	movs	r3, #1
 800993c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800993e:	e014      	b.n	800996a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	4a41      	ldr	r2, [pc, #260]	; (8009a48 <ADC_ConversionStop+0x164>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d90d      	bls.n	8009964 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800994c:	f043 0210 	orr.w	r2, r3, #16
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009958:	f043 0201 	orr.w	r2, r3, #1
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e06c      	b.n	8009a3e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	3301      	adds	r3, #1
 8009968:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009974:	2b40      	cmp	r3, #64	; 0x40
 8009976:	d1e3      	bne.n	8009940 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2240      	movs	r2, #64	; 0x40
 800997e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	2b02      	cmp	r3, #2
 8009984:	d014      	beq.n	80099b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff f8b2 	bl	8008af4 <LL_ADC_REG_IsConversionOngoing>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00c      	beq.n	80099b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff f86f 	bl	8008a7e <LL_ADC_IsDisableOngoing>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d104      	bne.n	80099b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff f88e 	bl	8008acc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d014      	beq.n	80099e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff f8c1 	bl	8008b42 <LL_ADC_INJ_IsConversionOngoing>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00c      	beq.n	80099e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff f857 	bl	8008a7e <LL_ADC_IsDisableOngoing>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d104      	bne.n	80099e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff f89d 	bl	8008b1a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d004      	beq.n	80099f0 <ADC_ConversionStop+0x10c>
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d105      	bne.n	80099f6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80099ea:	230c      	movs	r3, #12
 80099ec:	617b      	str	r3, [r7, #20]
        break;
 80099ee:	e005      	b.n	80099fc <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80099f0:	2308      	movs	r3, #8
 80099f2:	617b      	str	r3, [r7, #20]
        break;
 80099f4:	e002      	b.n	80099fc <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80099f6:	2304      	movs	r3, #4
 80099f8:	617b      	str	r3, [r7, #20]
        break;
 80099fa:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80099fc:	f7fe fe2c 	bl	8008658 <HAL_GetTick>
 8009a00:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009a02:	e014      	b.n	8009a2e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009a04:	f7fe fe28 	bl	8008658 <HAL_GetTick>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	2b05      	cmp	r3, #5
 8009a10:	d90d      	bls.n	8009a2e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a16:	f043 0210 	orr.w	r2, r3, #16
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a22:	f043 0201 	orr.w	r2, r3, #1
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e007      	b.n	8009a3e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689a      	ldr	r2, [r3, #8]
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	4013      	ands	r3, r2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1e3      	bne.n	8009a04 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	a33fffff 	.word	0xa33fffff

08009a4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fffd 	bl	8008a58 <LL_ADC_IsEnabled>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d146      	bne.n	8009af2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	4b24      	ldr	r3, [pc, #144]	; (8009afc <ADC_Enable+0xb0>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00d      	beq.n	8009a8e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a76:	f043 0210 	orr.w	r2, r3, #16
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a82:	f043 0201 	orr.w	r2, r3, #1
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e032      	b.n	8009af4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fe ffb8 	bl	8008a08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009a98:	f7fe fdde 	bl	8008658 <HAL_GetTick>
 8009a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009a9e:	e021      	b.n	8009ae4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe ffd7 	bl	8008a58 <LL_ADC_IsEnabled>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d104      	bne.n	8009aba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fe ffa7 	bl	8008a08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009aba:	f7fe fdcd 	bl	8008658 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d90d      	bls.n	8009ae4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009acc:	f043 0210 	orr.w	r2, r3, #16
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad8:	f043 0201 	orr.w	r2, r3, #1
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e007      	b.n	8009af4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d1d6      	bne.n	8009aa0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	8000003f 	.word	0x8000003f

08009b00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe ffb6 	bl	8008a7e <LL_ADC_IsDisableOngoing>
 8009b12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe ff9d 	bl	8008a58 <LL_ADC_IsEnabled>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d040      	beq.n	8009ba6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d13d      	bne.n	8009ba6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f003 030d 	and.w	r3, r3, #13
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d10c      	bne.n	8009b52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe ff77 	bl	8008a30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2203      	movs	r2, #3
 8009b48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009b4a:	f7fe fd85 	bl	8008658 <HAL_GetTick>
 8009b4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009b50:	e022      	b.n	8009b98 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b56:	f043 0210 	orr.w	r2, r3, #16
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b62:	f043 0201 	orr.w	r2, r3, #1
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e01c      	b.n	8009ba8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009b6e:	f7fe fd73 	bl	8008658 <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d90d      	bls.n	8009b98 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b80:	f043 0210 	orr.w	r2, r3, #16
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b8c:	f043 0201 	orr.w	r2, r3, #1
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e007      	b.n	8009ba8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e3      	bne.n	8009b6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d14b      	bne.n	8009c62 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d021      	beq.n	8009c28 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fe28 	bl	800883e <LL_ADC_REG_IsTriggerSourceSWStart>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d032      	beq.n	8009c5a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d12b      	bne.n	8009c5a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d11f      	bne.n	8009c5a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c1e:	f043 0201 	orr.w	r2, r3, #1
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c26:	e018      	b.n	8009c5a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d111      	bne.n	8009c5a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d105      	bne.n	8009c5a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c52:	f043 0201 	orr.w	r2, r3, #1
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7ff fa73 	bl	8009146 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009c60:	e00e      	b.n	8009c80 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c66:	f003 0310 	and.w	r3, r3, #16
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7ff fa7d 	bl	800916e <HAL_ADC_ErrorCallback>
}
 8009c74:	e004      	b.n	8009c80 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
}
 8009c80:	bf00      	nop
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c94:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f7ff fa5f 	bl	800915a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009c9c:	bf00      	nop
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc2:	f043 0204 	orr.w	r2, r3, #4
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f7ff fa4f 	bl	800916e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009cd0:	bf00      	nop
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <LL_ADC_IsEnabled>:
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d101      	bne.n	8009cf0 <LL_ADC_IsEnabled+0x18>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <LL_ADC_IsEnabled+0x1a>
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <LL_ADC_REG_IsConversionOngoing>:
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0304 	and.w	r3, r3, #4
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d101      	bne.n	8009d16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e000      	b.n	8009d18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009d24:	b590      	push	{r4, r7, lr}
 8009d26:	b0a1      	sub	sp, #132	; 0x84
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d101      	bne.n	8009d42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009d3e:	2302      	movs	r3, #2
 8009d40:	e0e3      	b.n	8009f0a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d52:	d102      	bne.n	8009d5a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8009d54:	4b6f      	ldr	r3, [pc, #444]	; (8009f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009d56:	60bb      	str	r3, [r7, #8]
 8009d58:	e009      	b.n	8009d6e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a6e      	ldr	r2, [pc, #440]	; (8009f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d102      	bne.n	8009d6a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009d64:	4b6d      	ldr	r3, [pc, #436]	; (8009f1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009d66:	60bb      	str	r3, [r7, #8]
 8009d68:	e001      	b.n	8009d6e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10b      	bne.n	8009d8c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d78:	f043 0220 	orr.w	r2, r3, #32
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e0be      	b.n	8009f0a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff ffb5 	bl	8009cfe <LL_ADC_REG_IsConversionOngoing>
 8009d94:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7ff ffaf 	bl	8009cfe <LL_ADC_REG_IsConversionOngoing>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 80a0 	bne.w	8009ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 809c 	bne.w	8009ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009db8:	d004      	beq.n	8009dc4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a55      	ldr	r2, [pc, #340]	; (8009f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d101      	bne.n	8009dc8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009dc4:	4b56      	ldr	r3, [pc, #344]	; (8009f20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009dc6:	e000      	b.n	8009dca <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009dc8:	4b56      	ldr	r3, [pc, #344]	; (8009f24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009dca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d04b      	beq.n	8009e6c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	6859      	ldr	r1, [r3, #4]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009de6:	035b      	lsls	r3, r3, #13
 8009de8:	430b      	orrs	r3, r1
 8009dea:	431a      	orrs	r2, r3
 8009dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009df8:	d004      	beq.n	8009e04 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a45      	ldr	r2, [pc, #276]	; (8009f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d10f      	bne.n	8009e24 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009e04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009e08:	f7ff ff66 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4841      	ldr	r0, [pc, #260]	; (8009f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009e10:	f7ff ff62 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009e14:	4603      	mov	r3, r0
 8009e16:	4323      	orrs	r3, r4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	bf0c      	ite	eq
 8009e1c:	2301      	moveq	r3, #1
 8009e1e:	2300      	movne	r3, #0
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	e012      	b.n	8009e4a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009e24:	483c      	ldr	r0, [pc, #240]	; (8009f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009e26:	f7ff ff57 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	483b      	ldr	r0, [pc, #236]	; (8009f1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009e2e:	f7ff ff53 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009e32:	4603      	mov	r3, r0
 8009e34:	431c      	orrs	r4, r3
 8009e36:	483c      	ldr	r0, [pc, #240]	; (8009f28 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009e38:	f7ff ff4e 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	4323      	orrs	r3, r4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	bf0c      	ite	eq
 8009e44:	2301      	moveq	r3, #1
 8009e46:	2300      	movne	r3, #0
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d056      	beq.n	8009efc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009e56:	f023 030f 	bic.w	r3, r3, #15
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	6811      	ldr	r1, [r2, #0]
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	6892      	ldr	r2, [r2, #8]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	431a      	orrs	r2, r3
 8009e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e68:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009e6a:	e047      	b.n	8009efc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e76:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e80:	d004      	beq.n	8009e8c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a23      	ldr	r2, [pc, #140]	; (8009f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d10f      	bne.n	8009eac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009e8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009e90:	f7ff ff22 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009e94:	4604      	mov	r4, r0
 8009e96:	481f      	ldr	r0, [pc, #124]	; (8009f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009e98:	f7ff ff1e 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	4323      	orrs	r3, r4
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bf0c      	ite	eq
 8009ea4:	2301      	moveq	r3, #1
 8009ea6:	2300      	movne	r3, #0
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	e012      	b.n	8009ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009eac:	481a      	ldr	r0, [pc, #104]	; (8009f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009eae:	f7ff ff13 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4819      	ldr	r0, [pc, #100]	; (8009f1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009eb6:	f7ff ff0f 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	431c      	orrs	r4, r3
 8009ebe:	481a      	ldr	r0, [pc, #104]	; (8009f28 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009ec0:	f7ff ff0a 	bl	8009cd8 <LL_ADC_IsEnabled>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	4323      	orrs	r3, r4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	bf0c      	ite	eq
 8009ecc:	2301      	moveq	r3, #1
 8009ece:	2300      	movne	r3, #0
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d012      	beq.n	8009efc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009ede:	f023 030f 	bic.w	r3, r3, #15
 8009ee2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ee4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009ee6:	e009      	b.n	8009efc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eec:	f043 0220 	orr.w	r2, r3, #32
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009efa:	e000      	b.n	8009efe <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009efc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009f06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3784      	adds	r7, #132	; 0x84
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd90      	pop	{r4, r7, pc}
 8009f12:	bf00      	nop
 8009f14:	50000100 	.word	0x50000100
 8009f18:	50000400 	.word	0x50000400
 8009f1c:	50000500 	.word	0x50000500
 8009f20:	50000300 	.word	0x50000300
 8009f24:	50000700 	.word	0x50000700
 8009f28:	50000600 	.word	0x50000600

08009f2c <LL_EXTI_EnableIT_0_31>:
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009f34:	4b05      	ldr	r3, [pc, #20]	; (8009f4c <LL_EXTI_EnableIT_0_31+0x20>)
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	4904      	ldr	r1, [pc, #16]	; (8009f4c <LL_EXTI_EnableIT_0_31+0x20>)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	600b      	str	r3, [r1, #0]
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	40010400 	.word	0x40010400

08009f50 <LL_EXTI_EnableIT_32_63>:
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009f58:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <LL_EXTI_EnableIT_32_63+0x20>)
 8009f5a:	6a1a      	ldr	r2, [r3, #32]
 8009f5c:	4904      	ldr	r1, [pc, #16]	; (8009f70 <LL_EXTI_EnableIT_32_63+0x20>)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	620b      	str	r3, [r1, #32]
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	40010400 	.word	0x40010400

08009f74 <LL_EXTI_DisableIT_0_31>:
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <LL_EXTI_DisableIT_0_31+0x24>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	43db      	mvns	r3, r3
 8009f84:	4904      	ldr	r1, [pc, #16]	; (8009f98 <LL_EXTI_DisableIT_0_31+0x24>)
 8009f86:	4013      	ands	r3, r2
 8009f88:	600b      	str	r3, [r1, #0]
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	40010400 	.word	0x40010400

08009f9c <LL_EXTI_DisableIT_32_63>:
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009fa4:	4b06      	ldr	r3, [pc, #24]	; (8009fc0 <LL_EXTI_DisableIT_32_63+0x24>)
 8009fa6:	6a1a      	ldr	r2, [r3, #32]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	43db      	mvns	r3, r3
 8009fac:	4904      	ldr	r1, [pc, #16]	; (8009fc0 <LL_EXTI_DisableIT_32_63+0x24>)
 8009fae:	4013      	ands	r3, r2
 8009fb0:	620b      	str	r3, [r1, #32]
}
 8009fb2:	bf00      	nop
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	40010400 	.word	0x40010400

08009fc4 <LL_EXTI_EnableEvent_0_31>:
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	4904      	ldr	r1, [pc, #16]	; (8009fe4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	604b      	str	r3, [r1, #4]
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	40010400 	.word	0x40010400

08009fe8 <LL_EXTI_EnableEvent_32_63>:
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ff4:	4904      	ldr	r1, [pc, #16]	; (800a008 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	40010400 	.word	0x40010400

0800a00c <LL_EXTI_DisableEvent_0_31>:
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a014:	4b06      	ldr	r3, [pc, #24]	; (800a030 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	43db      	mvns	r3, r3
 800a01c:	4904      	ldr	r1, [pc, #16]	; (800a030 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a01e:	4013      	ands	r3, r2
 800a020:	604b      	str	r3, [r1, #4]
}
 800a022:	bf00      	nop
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	40010400 	.word	0x40010400

0800a034 <LL_EXTI_DisableEvent_32_63>:
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a03c:	4b06      	ldr	r3, [pc, #24]	; (800a058 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a03e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	43db      	mvns	r3, r3
 800a044:	4904      	ldr	r1, [pc, #16]	; (800a058 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a046:	4013      	ands	r3, r2
 800a048:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	40010400 	.word	0x40010400

0800a05c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	4904      	ldr	r1, [pc, #16]	; (800a07c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	608b      	str	r3, [r1, #8]
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	40010400 	.word	0x40010400

0800a080 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a088:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a08a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a08c:	4904      	ldr	r1, [pc, #16]	; (800a0a0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4313      	orrs	r3, r2
 800a092:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	40010400 	.word	0x40010400

0800a0a4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a0ac:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	43db      	mvns	r3, r3
 800a0b4:	4904      	ldr	r1, [pc, #16]	; (800a0c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	608b      	str	r3, [r1, #8]
}
 800a0ba:	bf00      	nop
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	40010400 	.word	0x40010400

0800a0cc <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a0d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	43db      	mvns	r3, r3
 800a0dc:	4904      	ldr	r1, [pc, #16]	; (800a0f0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a0de:	4013      	ands	r3, r2
 800a0e0:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40010400 	.word	0x40010400

0800a0f4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a0fc:	4b05      	ldr	r3, [pc, #20]	; (800a114 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a0fe:	68da      	ldr	r2, [r3, #12]
 800a100:	4904      	ldr	r1, [pc, #16]	; (800a114 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4313      	orrs	r3, r2
 800a106:	60cb      	str	r3, [r1, #12]
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	40010400 	.word	0x40010400

0800a118 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a124:	4904      	ldr	r1, [pc, #16]	; (800a138 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4313      	orrs	r3, r2
 800a12a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	40010400 	.word	0x40010400

0800a13c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a144:	4b06      	ldr	r3, [pc, #24]	; (800a160 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	43db      	mvns	r3, r3
 800a14c:	4904      	ldr	r1, [pc, #16]	; (800a160 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a14e:	4013      	ands	r3, r2
 800a150:	60cb      	str	r3, [r1, #12]
}
 800a152:	bf00      	nop
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	40010400 	.word	0x40010400

0800a164 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a16c:	4b06      	ldr	r3, [pc, #24]	; (800a188 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	43db      	mvns	r3, r3
 800a174:	4904      	ldr	r1, [pc, #16]	; (800a188 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a176:	4013      	ands	r3, r2
 800a178:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a17a:	bf00      	nop
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	40010400 	.word	0x40010400

0800a18c <LL_EXTI_IsActiveFlag_0_31>:
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a194:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800a196:	695a      	ldr	r2, [r3, #20]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4013      	ands	r3, r2
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d101      	bne.n	800a1a6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e000      	b.n	800a1a8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	40010400 	.word	0x40010400

0800a1b8 <LL_EXTI_IsActiveFlag_32_63>:
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a1c0:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800a1c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d101      	bne.n	800a1d2 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e000      	b.n	800a1d4 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	40010400 	.word	0x40010400

0800a1e4 <LL_EXTI_ClearFlag_0_31>:
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a1ec:	4a04      	ldr	r2, [pc, #16]	; (800a200 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6153      	str	r3, [r2, #20]
}
 800a1f2:	bf00      	nop
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	40010400 	.word	0x40010400

0800a204 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800a20c:	4a04      	ldr	r2, [pc, #16]	; (800a220 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6353      	str	r3, [r2, #52]	; 0x34
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	40010400 	.word	0x40010400

0800a224 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d102      	bne.n	800a240 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	77fb      	strb	r3, [r7, #31]
 800a23e:	e180      	b.n	800a542 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a24a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a24e:	d102      	bne.n	800a256 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	77fb      	strb	r3, [r7, #31]
 800a254:	e175      	b.n	800a542 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	7f5b      	ldrb	r3, [r3, #29]
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d108      	bne.n	800a272 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7fc fd6d 	bl	8006d4c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a27c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800a298:	4313      	orrs	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	4b98      	ldr	r3, [pc, #608]	; (800a504 <HAL_COMP_Init+0x2e0>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	6979      	ldr	r1, [r7, #20]
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d015      	beq.n	800a2ea <HAL_COMP_Init+0xc6>
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d112      	bne.n	800a2ea <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a2c4:	4b90      	ldr	r3, [pc, #576]	; (800a508 <HAL_COMP_Init+0x2e4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	099b      	lsrs	r3, r3, #6
 800a2ca:	4a90      	ldr	r2, [pc, #576]	; (800a50c <HAL_COMP_Init+0x2e8>)
 800a2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d0:	099a      	lsrs	r2, r3, #6
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a2dc:	e002      	b.n	800a2e4 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1f9      	bne.n	800a2de <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a88      	ldr	r2, [pc, #544]	; (800a510 <HAL_COMP_Init+0x2ec>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d028      	beq.n	800a346 <HAL_COMP_Init+0x122>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a86      	ldr	r2, [pc, #536]	; (800a514 <HAL_COMP_Init+0x2f0>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d020      	beq.n	800a340 <HAL_COMP_Init+0x11c>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a85      	ldr	r2, [pc, #532]	; (800a518 <HAL_COMP_Init+0x2f4>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d018      	beq.n	800a33a <HAL_COMP_Init+0x116>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a83      	ldr	r2, [pc, #524]	; (800a51c <HAL_COMP_Init+0x2f8>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d010      	beq.n	800a334 <HAL_COMP_Init+0x110>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a82      	ldr	r2, [pc, #520]	; (800a520 <HAL_COMP_Init+0x2fc>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d008      	beq.n	800a32e <HAL_COMP_Init+0x10a>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a80      	ldr	r2, [pc, #512]	; (800a524 <HAL_COMP_Init+0x300>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d101      	bne.n	800a32a <HAL_COMP_Init+0x106>
 800a326:	2301      	movs	r3, #1
 800a328:	e00f      	b.n	800a34a <HAL_COMP_Init+0x126>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e00d      	b.n	800a34a <HAL_COMP_Init+0x126>
 800a32e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a332:	e00a      	b.n	800a34a <HAL_COMP_Init+0x126>
 800a334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a338:	e007      	b.n	800a34a <HAL_COMP_Init+0x126>
 800a33a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a33e:	e004      	b.n	800a34a <HAL_COMP_Init+0x126>
 800a340:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a344:	e001      	b.n	800a34a <HAL_COMP_Init+0x126>
 800a346:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a34a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	f003 0303 	and.w	r3, r3, #3
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 80b6 	beq.w	800a4c6 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	f003 0310 	and.w	r3, r3, #16
 800a362:	2b00      	cmp	r3, #0
 800a364:	d011      	beq.n	800a38a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a6e      	ldr	r2, [pc, #440]	; (800a524 <HAL_COMP_Init+0x300>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d004      	beq.n	800a37a <HAL_COMP_Init+0x156>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a6c      	ldr	r2, [pc, #432]	; (800a528 <HAL_COMP_Init+0x304>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d103      	bne.n	800a382 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800a37a:	6938      	ldr	r0, [r7, #16]
 800a37c:	f7ff fe80 	bl	800a080 <LL_EXTI_EnableRisingTrig_32_63>
 800a380:	e014      	b.n	800a3ac <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800a382:	6938      	ldr	r0, [r7, #16]
 800a384:	f7ff fe6a 	bl	800a05c <LL_EXTI_EnableRisingTrig_0_31>
 800a388:	e010      	b.n	800a3ac <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a65      	ldr	r2, [pc, #404]	; (800a524 <HAL_COMP_Init+0x300>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d004      	beq.n	800a39e <HAL_COMP_Init+0x17a>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a63      	ldr	r2, [pc, #396]	; (800a528 <HAL_COMP_Init+0x304>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d103      	bne.n	800a3a6 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800a39e:	6938      	ldr	r0, [r7, #16]
 800a3a0:	f7ff fe94 	bl	800a0cc <LL_EXTI_DisableRisingTrig_32_63>
 800a3a4:	e002      	b.n	800a3ac <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800a3a6:	6938      	ldr	r0, [r7, #16]
 800a3a8:	f7ff fe7c 	bl	800a0a4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	f003 0320 	and.w	r3, r3, #32
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d011      	beq.n	800a3dc <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a59      	ldr	r2, [pc, #356]	; (800a524 <HAL_COMP_Init+0x300>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d004      	beq.n	800a3cc <HAL_COMP_Init+0x1a8>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a58      	ldr	r2, [pc, #352]	; (800a528 <HAL_COMP_Init+0x304>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d103      	bne.n	800a3d4 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800a3cc:	6938      	ldr	r0, [r7, #16]
 800a3ce:	f7ff fea3 	bl	800a118 <LL_EXTI_EnableFallingTrig_32_63>
 800a3d2:	e014      	b.n	800a3fe <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800a3d4:	6938      	ldr	r0, [r7, #16]
 800a3d6:	f7ff fe8d 	bl	800a0f4 <LL_EXTI_EnableFallingTrig_0_31>
 800a3da:	e010      	b.n	800a3fe <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a50      	ldr	r2, [pc, #320]	; (800a524 <HAL_COMP_Init+0x300>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d004      	beq.n	800a3f0 <HAL_COMP_Init+0x1cc>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a4f      	ldr	r2, [pc, #316]	; (800a528 <HAL_COMP_Init+0x304>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d103      	bne.n	800a3f8 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800a3f0:	6938      	ldr	r0, [r7, #16]
 800a3f2:	f7ff feb7 	bl	800a164 <LL_EXTI_DisableFallingTrig_32_63>
 800a3f6:	e002      	b.n	800a3fe <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800a3f8:	6938      	ldr	r0, [r7, #16]
 800a3fa:	f7ff fe9f 	bl	800a13c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a48      	ldr	r2, [pc, #288]	; (800a524 <HAL_COMP_Init+0x300>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d004      	beq.n	800a412 <HAL_COMP_Init+0x1ee>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a46      	ldr	r2, [pc, #280]	; (800a528 <HAL_COMP_Init+0x304>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d103      	bne.n	800a41a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800a412:	6938      	ldr	r0, [r7, #16]
 800a414:	f7ff fef6 	bl	800a204 <LL_EXTI_ClearFlag_32_63>
 800a418:	e002      	b.n	800a420 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800a41a:	6938      	ldr	r0, [r7, #16]
 800a41c:	f7ff fee2 	bl	800a1e4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d011      	beq.n	800a450 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a3c      	ldr	r2, [pc, #240]	; (800a524 <HAL_COMP_Init+0x300>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d004      	beq.n	800a440 <HAL_COMP_Init+0x21c>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a3b      	ldr	r2, [pc, #236]	; (800a528 <HAL_COMP_Init+0x304>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d103      	bne.n	800a448 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800a440:	6938      	ldr	r0, [r7, #16]
 800a442:	f7ff fdd1 	bl	8009fe8 <LL_EXTI_EnableEvent_32_63>
 800a446:	e014      	b.n	800a472 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800a448:	6938      	ldr	r0, [r7, #16]
 800a44a:	f7ff fdbb 	bl	8009fc4 <LL_EXTI_EnableEvent_0_31>
 800a44e:	e010      	b.n	800a472 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a33      	ldr	r2, [pc, #204]	; (800a524 <HAL_COMP_Init+0x300>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d004      	beq.n	800a464 <HAL_COMP_Init+0x240>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a32      	ldr	r2, [pc, #200]	; (800a528 <HAL_COMP_Init+0x304>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d103      	bne.n	800a46c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800a464:	6938      	ldr	r0, [r7, #16]
 800a466:	f7ff fde5 	bl	800a034 <LL_EXTI_DisableEvent_32_63>
 800a46a:	e002      	b.n	800a472 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800a46c:	6938      	ldr	r0, [r7, #16]
 800a46e:	f7ff fdcd 	bl	800a00c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d011      	beq.n	800a4a2 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a28      	ldr	r2, [pc, #160]	; (800a524 <HAL_COMP_Init+0x300>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d004      	beq.n	800a492 <HAL_COMP_Init+0x26e>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a26      	ldr	r2, [pc, #152]	; (800a528 <HAL_COMP_Init+0x304>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d103      	bne.n	800a49a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800a492:	6938      	ldr	r0, [r7, #16]
 800a494:	f7ff fd5c 	bl	8009f50 <LL_EXTI_EnableIT_32_63>
 800a498:	e04b      	b.n	800a532 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800a49a:	6938      	ldr	r0, [r7, #16]
 800a49c:	f7ff fd46 	bl	8009f2c <LL_EXTI_EnableIT_0_31>
 800a4a0:	e047      	b.n	800a532 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a1f      	ldr	r2, [pc, #124]	; (800a524 <HAL_COMP_Init+0x300>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d004      	beq.n	800a4b6 <HAL_COMP_Init+0x292>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a1d      	ldr	r2, [pc, #116]	; (800a528 <HAL_COMP_Init+0x304>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d103      	bne.n	800a4be <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800a4b6:	6938      	ldr	r0, [r7, #16]
 800a4b8:	f7ff fd70 	bl	8009f9c <LL_EXTI_DisableIT_32_63>
 800a4bc:	e039      	b.n	800a532 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800a4be:	6938      	ldr	r0, [r7, #16]
 800a4c0:	f7ff fd58 	bl	8009f74 <LL_EXTI_DisableIT_0_31>
 800a4c4:	e035      	b.n	800a532 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a16      	ldr	r2, [pc, #88]	; (800a524 <HAL_COMP_Init+0x300>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d004      	beq.n	800a4da <HAL_COMP_Init+0x2b6>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a14      	ldr	r2, [pc, #80]	; (800a528 <HAL_COMP_Init+0x304>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d103      	bne.n	800a4e2 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800a4da:	6938      	ldr	r0, [r7, #16]
 800a4dc:	f7ff fdaa 	bl	800a034 <LL_EXTI_DisableEvent_32_63>
 800a4e0:	e002      	b.n	800a4e8 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800a4e2:	6938      	ldr	r0, [r7, #16]
 800a4e4:	f7ff fd92 	bl	800a00c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a0d      	ldr	r2, [pc, #52]	; (800a524 <HAL_COMP_Init+0x300>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d004      	beq.n	800a4fc <HAL_COMP_Init+0x2d8>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a0c      	ldr	r2, [pc, #48]	; (800a528 <HAL_COMP_Init+0x304>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d117      	bne.n	800a52c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800a4fc:	6938      	ldr	r0, [r7, #16]
 800a4fe:	f7ff fd4d 	bl	8009f9c <LL_EXTI_DisableIT_32_63>
 800a502:	e016      	b.n	800a532 <HAL_COMP_Init+0x30e>
 800a504:	ff007e0f 	.word	0xff007e0f
 800a508:	20000c30 	.word	0x20000c30
 800a50c:	053e2d63 	.word	0x053e2d63
 800a510:	40010200 	.word	0x40010200
 800a514:	40010204 	.word	0x40010204
 800a518:	40010208 	.word	0x40010208
 800a51c:	4001020c 	.word	0x4001020c
 800a520:	40010210 	.word	0x40010210
 800a524:	40010214 	.word	0x40010214
 800a528:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800a52c:	6938      	ldr	r0, [r7, #16]
 800a52e:	f7ff fd21 	bl	8009f74 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	7f5b      	ldrb	r3, [r3, #29]
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d102      	bne.n	800a542 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800a542:	7ffb      	ldrb	r3, [r7, #31]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d102      	bne.n	800a564 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	73fb      	strb	r3, [r7, #15]
 800a562:	e01d      	b.n	800a5a0 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a56e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a572:	d102      	bne.n	800a57a <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	73fb      	strb	r3, [r7, #15]
 800a578:	e012      	b.n	800a5a0 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	7f5b      	ldrb	r3, [r3, #29]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00b      	beq.n	800a59c <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f022 0201 	bic.w	r2, r2, #1
 800a592:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	775a      	strb	r2, [r3, #29]
 800a59a:	e001      	b.n	800a5a0 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a2f      	ldr	r2, [pc, #188]	; (800a67c <HAL_COMP_IRQHandler+0xcc>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d028      	beq.n	800a614 <HAL_COMP_IRQHandler+0x64>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a2e      	ldr	r2, [pc, #184]	; (800a680 <HAL_COMP_IRQHandler+0xd0>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d020      	beq.n	800a60e <HAL_COMP_IRQHandler+0x5e>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a2c      	ldr	r2, [pc, #176]	; (800a684 <HAL_COMP_IRQHandler+0xd4>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d018      	beq.n	800a608 <HAL_COMP_IRQHandler+0x58>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a2b      	ldr	r2, [pc, #172]	; (800a688 <HAL_COMP_IRQHandler+0xd8>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d010      	beq.n	800a602 <HAL_COMP_IRQHandler+0x52>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a29      	ldr	r2, [pc, #164]	; (800a68c <HAL_COMP_IRQHandler+0xdc>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d008      	beq.n	800a5fc <HAL_COMP_IRQHandler+0x4c>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a28      	ldr	r2, [pc, #160]	; (800a690 <HAL_COMP_IRQHandler+0xe0>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d101      	bne.n	800a5f8 <HAL_COMP_IRQHandler+0x48>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e00f      	b.n	800a618 <HAL_COMP_IRQHandler+0x68>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	e00d      	b.n	800a618 <HAL_COMP_IRQHandler+0x68>
 800a5fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a600:	e00a      	b.n	800a618 <HAL_COMP_IRQHandler+0x68>
 800a602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a606:	e007      	b.n	800a618 <HAL_COMP_IRQHandler+0x68>
 800a608:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a60c:	e004      	b.n	800a618 <HAL_COMP_IRQHandler+0x68>
 800a60e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a612:	e001      	b.n	800a618 <HAL_COMP_IRQHandler+0x68>
 800a614:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a618:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a1b      	ldr	r2, [pc, #108]	; (800a690 <HAL_COMP_IRQHandler+0xe0>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d004      	beq.n	800a632 <HAL_COMP_IRQHandler+0x82>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a19      	ldr	r2, [pc, #100]	; (800a694 <HAL_COMP_IRQHandler+0xe4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d108      	bne.n	800a644 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800a632:	68b8      	ldr	r0, [r7, #8]
 800a634:	f7ff fdc0 	bl	800a1b8 <LL_EXTI_IsActiveFlag_32_63>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00a      	beq.n	800a654 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800a63e:	2302      	movs	r3, #2
 800a640:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800a642:	e007      	b.n	800a654 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800a644:	68b8      	ldr	r0, [r7, #8]
 800a646:	f7ff fda1 	bl	800a18c <LL_EXTI_IsActiveFlag_0_31>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800a650:	2301      	movs	r3, #1
 800a652:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00c      	beq.n	800a674 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d103      	bne.n	800a668 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800a660:	68b8      	ldr	r0, [r7, #8]
 800a662:	f7ff fdcf 	bl	800a204 <LL_EXTI_ClearFlag_32_63>
 800a666:	e002      	b.n	800a66e <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800a668:	68b8      	ldr	r0, [r7, #8]
 800a66a:	f7ff fdbb 	bl	800a1e4 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7fd f884 	bl	800777c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800a674:	bf00      	nop
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	40010200 	.word	0x40010200
 800a680:	40010204 	.word	0x40010204
 800a684:	40010208 	.word	0x40010208
 800a688:	4001020c 	.word	0x4001020c
 800a68c:	40010210 	.word	0x40010210
 800a690:	40010214 	.word	0x40010214
 800a694:	40010218 	.word	0x40010218

0800a698 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	0f9b      	lsrs	r3, r3, #30
 800a6a8:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <__NVIC_SetPriorityGrouping>:
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f003 0307 	and.w	r3, r3, #7
 800a6c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6c8:	4b0c      	ldr	r3, [pc, #48]	; (800a6fc <__NVIC_SetPriorityGrouping+0x44>)
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a6e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a6e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a6ea:	4a04      	ldr	r2, [pc, #16]	; (800a6fc <__NVIC_SetPriorityGrouping+0x44>)
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	60d3      	str	r3, [r2, #12]
}
 800a6f0:	bf00      	nop
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	e000ed00 	.word	0xe000ed00

0800a700 <__NVIC_GetPriorityGrouping>:
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a704:	4b04      	ldr	r3, [pc, #16]	; (800a718 <__NVIC_GetPriorityGrouping+0x18>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	0a1b      	lsrs	r3, r3, #8
 800a70a:	f003 0307 	and.w	r3, r3, #7
}
 800a70e:	4618      	mov	r0, r3
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	e000ed00 	.word	0xe000ed00

0800a71c <__NVIC_EnableIRQ>:
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	db0b      	blt.n	800a746 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	f003 021f 	and.w	r2, r3, #31
 800a734:	4907      	ldr	r1, [pc, #28]	; (800a754 <__NVIC_EnableIRQ+0x38>)
 800a736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a73a:	095b      	lsrs	r3, r3, #5
 800a73c:	2001      	movs	r0, #1
 800a73e:	fa00 f202 	lsl.w	r2, r0, r2
 800a742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	e000e100 	.word	0xe000e100

0800a758 <__NVIC_DisableIRQ>:
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a766:	2b00      	cmp	r3, #0
 800a768:	db10      	blt.n	800a78c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a76a:	79fb      	ldrb	r3, [r7, #7]
 800a76c:	f003 021f 	and.w	r2, r3, #31
 800a770:	4909      	ldr	r1, [pc, #36]	; (800a798 <__NVIC_DisableIRQ+0x40>)
 800a772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a776:	095b      	lsrs	r3, r3, #5
 800a778:	2001      	movs	r0, #1
 800a77a:	fa00 f202 	lsl.w	r2, r0, r2
 800a77e:	3320      	adds	r3, #32
 800a780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a788:	f3bf 8f6f 	isb	sy
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	e000e100 	.word	0xe000e100

0800a79c <__NVIC_SetPriority>:
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	6039      	str	r1, [r7, #0]
 800a7a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	db0a      	blt.n	800a7c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	490c      	ldr	r1, [pc, #48]	; (800a7e8 <__NVIC_SetPriority+0x4c>)
 800a7b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7ba:	0112      	lsls	r2, r2, #4
 800a7bc:	b2d2      	uxtb	r2, r2
 800a7be:	440b      	add	r3, r1
 800a7c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a7c4:	e00a      	b.n	800a7dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	4908      	ldr	r1, [pc, #32]	; (800a7ec <__NVIC_SetPriority+0x50>)
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	f003 030f 	and.w	r3, r3, #15
 800a7d2:	3b04      	subs	r3, #4
 800a7d4:	0112      	lsls	r2, r2, #4
 800a7d6:	b2d2      	uxtb	r2, r2
 800a7d8:	440b      	add	r3, r1
 800a7da:	761a      	strb	r2, [r3, #24]
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	e000e100 	.word	0xe000e100
 800a7ec:	e000ed00 	.word	0xe000ed00

0800a7f0 <NVIC_EncodePriority>:
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b089      	sub	sp, #36	; 0x24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	f1c3 0307 	rsb	r3, r3, #7
 800a80a:	2b04      	cmp	r3, #4
 800a80c:	bf28      	it	cs
 800a80e:	2304      	movcs	r3, #4
 800a810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	3304      	adds	r3, #4
 800a816:	2b06      	cmp	r3, #6
 800a818:	d902      	bls.n	800a820 <NVIC_EncodePriority+0x30>
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	3b03      	subs	r3, #3
 800a81e:	e000      	b.n	800a822 <NVIC_EncodePriority+0x32>
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	fa02 f303 	lsl.w	r3, r2, r3
 800a82e:	43da      	mvns	r2, r3
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	401a      	ands	r2, r3
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	fa01 f303 	lsl.w	r3, r1, r3
 800a842:	43d9      	mvns	r1, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a848:	4313      	orrs	r3, r2
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3724      	adds	r7, #36	; 0x24
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
	...

0800a858 <SysTick_Config>:
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3b01      	subs	r3, #1
 800a864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a868:	d301      	bcc.n	800a86e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800a86a:	2301      	movs	r3, #1
 800a86c:	e00f      	b.n	800a88e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a86e:	4a0a      	ldr	r2, [pc, #40]	; (800a898 <SysTick_Config+0x40>)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3b01      	subs	r3, #1
 800a874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a876:	210f      	movs	r1, #15
 800a878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a87c:	f7ff ff8e 	bl	800a79c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a880:	4b05      	ldr	r3, [pc, #20]	; (800a898 <SysTick_Config+0x40>)
 800a882:	2200      	movs	r2, #0
 800a884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a886:	4b04      	ldr	r3, [pc, #16]	; (800a898 <SysTick_Config+0x40>)
 800a888:	2207      	movs	r2, #7
 800a88a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	e000e010 	.word	0xe000e010

0800a89c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ff07 	bl	800a6b8 <__NVIC_SetPriorityGrouping>
}
 800a8aa:	bf00      	nop
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b086      	sub	sp, #24
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	607a      	str	r2, [r7, #4]
 800a8be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a8c0:	f7ff ff1e 	bl	800a700 <__NVIC_GetPriorityGrouping>
 800a8c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	68b9      	ldr	r1, [r7, #8]
 800a8ca:	6978      	ldr	r0, [r7, #20]
 800a8cc:	f7ff ff90 	bl	800a7f0 <NVIC_EncodePriority>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff ff5f 	bl	800a79c <__NVIC_SetPriority>
}
 800a8de:	bf00      	nop
 800a8e0:	3718      	adds	r7, #24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a8f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7ff ff11 	bl	800a71c <__NVIC_EnableIRQ>
}
 800a8fa:	bf00      	nop
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	4603      	mov	r3, r0
 800a90a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a90c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff ff21 	bl	800a758 <__NVIC_DisableIRQ>
}
 800a916:	bf00      	nop
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b082      	sub	sp, #8
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff ff96 	bl	800a858 <SysTick_Config>
 800a92c:	4603      	mov	r3, r0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e014      	b.n	800a972 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	791b      	ldrb	r3, [r3, #4]
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d105      	bne.n	800a95e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7fc fab5 	bl	8006ec8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2202      	movs	r2, #2
 800a962:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b082      	sub	sp, #8
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	795b      	ldrb	r3, [r3, #5]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d101      	bne.n	800a990 <HAL_DAC_Start+0x16>
 800a98c:	2302      	movs	r3, #2
 800a98e:	e043      	b.n	800aa18 <HAL_DAC_Start+0x9e>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2202      	movs	r2, #2
 800a99a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6819      	ldr	r1, [r3, #0]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	f003 0310 	and.w	r3, r3, #16
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	409a      	lsls	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	430a      	orrs	r2, r1
 800a9b2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	f7fd fe5b 	bl	8008670 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10f      	bne.n	800a9e0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d11d      	bne.n	800aa0a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f042 0201 	orr.w	r2, r2, #1
 800a9dc:	605a      	str	r2, [r3, #4]
 800a9de:	e014      	b.n	800aa0a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	f003 0310 	and.w	r3, r3, #16
 800a9f0:	2102      	movs	r1, #2
 800a9f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d107      	bne.n	800aa0a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f042 0202 	orr.w	r2, r2, #2
 800aa08:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	795b      	ldrb	r3, [r3, #5]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d101      	bne.n	800aa3e <HAL_DAC_Start_DMA+0x1e>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e0a1      	b.n	800ab82 <HAL_DAC_Start_DMA+0x162>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2201      	movs	r2, #1
 800aa42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2202      	movs	r2, #2
 800aa48:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d12a      	bne.n	800aaa6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	4a4d      	ldr	r2, [pc, #308]	; (800ab8c <HAL_DAC_Start_DMA+0x16c>)
 800aa56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	4a4c      	ldr	r2, [pc, #304]	; (800ab90 <HAL_DAC_Start_DMA+0x170>)
 800aa5e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	4a4b      	ldr	r2, [pc, #300]	; (800ab94 <HAL_DAC_Start_DMA+0x174>)
 800aa66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa76:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	d009      	beq.n	800aa92 <HAL_DAC_Start_DMA+0x72>
 800aa7e:	2b08      	cmp	r3, #8
 800aa80:	d00c      	beq.n	800aa9c <HAL_DAC_Start_DMA+0x7c>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d000      	beq.n	800aa88 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800aa86:	e039      	b.n	800aafc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	613b      	str	r3, [r7, #16]
        break;
 800aa90:	e034      	b.n	800aafc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	330c      	adds	r3, #12
 800aa98:	613b      	str	r3, [r7, #16]
        break;
 800aa9a:	e02f      	b.n	800aafc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3310      	adds	r3, #16
 800aaa2:	613b      	str	r3, [r7, #16]
        break;
 800aaa4:	e02a      	b.n	800aafc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	4a3b      	ldr	r2, [pc, #236]	; (800ab98 <HAL_DAC_Start_DMA+0x178>)
 800aaac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	4a3a      	ldr	r2, [pc, #232]	; (800ab9c <HAL_DAC_Start_DMA+0x17c>)
 800aab4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	4a39      	ldr	r2, [pc, #228]	; (800aba0 <HAL_DAC_Start_DMA+0x180>)
 800aabc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800aacc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	2b04      	cmp	r3, #4
 800aad2:	d009      	beq.n	800aae8 <HAL_DAC_Start_DMA+0xc8>
 800aad4:	2b08      	cmp	r3, #8
 800aad6:	d00c      	beq.n	800aaf2 <HAL_DAC_Start_DMA+0xd2>
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d000      	beq.n	800aade <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800aadc:	e00e      	b.n	800aafc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3314      	adds	r3, #20
 800aae4:	613b      	str	r3, [r7, #16]
        break;
 800aae6:	e009      	b.n	800aafc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3318      	adds	r3, #24
 800aaee:	613b      	str	r3, [r7, #16]
        break;
 800aaf0:	e004      	b.n	800aafc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	331c      	adds	r3, #28
 800aaf8:	613b      	str	r3, [r7, #16]
        break;
 800aafa:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d111      	bne.n	800ab26 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab10:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6898      	ldr	r0, [r3, #8]
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	f000 fbd2 	bl	800b2c4 <HAL_DMA_Start_IT>
 800ab20:	4603      	mov	r3, r0
 800ab22:	75fb      	strb	r3, [r7, #23]
 800ab24:	e010      	b.n	800ab48 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ab34:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	68d8      	ldr	r0, [r3, #12]
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	f000 fbc0 	bl	800b2c4 <HAL_DMA_Start_IT>
 800ab44:	4603      	mov	r3, r0
 800ab46:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800ab4e:	7dfb      	ldrb	r3, [r7, #23]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10f      	bne.n	800ab74 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6819      	ldr	r1, [r3, #0]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	f003 0310 	and.w	r3, r3, #16
 800ab60:	2201      	movs	r2, #1
 800ab62:	409a      	lsls	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	430a      	orrs	r2, r1
 800ab6a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	f7fd fd7f 	bl	8008670 <HAL_Delay>
 800ab72:	e005      	b.n	800ab80 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	f043 0204 	orr.w	r2, r3, #4
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0800b061 	.word	0x0800b061
 800ab90:	0800b083 	.word	0x0800b083
 800ab94:	0800b09f 	.word	0x0800b09f
 800ab98:	0800b109 	.word	0x0800b109
 800ab9c:	0800b12b 	.word	0x0800b12b
 800aba0:	0800b147 	.word	0x0800b147

0800aba4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6819      	ldr	r1, [r3, #0]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	f003 0310 	and.w	r3, r3, #16
 800abba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800abbe:	fa02 f303 	lsl.w	r3, r2, r3
 800abc2:	43da      	mvns	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	400a      	ands	r2, r1
 800abca:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6819      	ldr	r1, [r3, #0]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	f003 0310 	and.w	r3, r3, #16
 800abd8:	2201      	movs	r2, #1
 800abda:	fa02 f303 	lsl.w	r3, r2, r3
 800abde:	43da      	mvns	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	400a      	ands	r2, r1
 800abe6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800abe8:	2001      	movs	r0, #1
 800abea:	f7fd fd41 	bl	8008670 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10f      	bne.n	800ac14 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 fbde 	bl	800b3ba <HAL_DMA_Abort>
 800abfe:	4603      	mov	r3, r0
 800ac00:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	e00e      	b.n	800ac32 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fbce 	bl	800b3ba <HAL_DMA_Abort>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800ac30:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d003      	beq.n	800ac40 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2204      	movs	r2, #4
 800ac3c:	711a      	strb	r2, [r3, #4]
 800ac3e:	e002      	b.n	800ac46 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b087      	sub	sp, #28
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
 800ac5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d105      	bne.n	800ac80 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4413      	add	r3, r2
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	617b      	str	r3, [r7, #20]
 800ac7e:	e004      	b.n	800ac8a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4413      	add	r3, r2
 800ac86:	3314      	adds	r3, #20
 800ac88:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	371c      	adds	r7, #28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d103      	bne.n	800acf4 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf2:	e002      	b.n	800acfa <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	; 0x28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800ad14:	2300      	movs	r3, #0
 800ad16:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	795b      	ldrb	r3, [r3, #5]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d101      	bne.n	800ad24 <HAL_DAC_ConfigChannel+0x1c>
 800ad20:	2302      	movs	r3, #2
 800ad22:	e194      	b.n	800b04e <HAL_DAC_ConfigChannel+0x346>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2201      	movs	r2, #1
 800ad28:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	2b04      	cmp	r3, #4
 800ad36:	d174      	bne.n	800ae22 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d137      	bne.n	800adae <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800ad3e:	f7fd fc8b 	bl	8008658 <HAL_GetTick>
 800ad42:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800ad44:	e011      	b.n	800ad6a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800ad46:	f7fd fc87 	bl	8008658 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d90a      	bls.n	800ad6a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	f043 0208 	orr.w	r2, r3, #8
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2203      	movs	r2, #3
 800ad64:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800ad66:	2303      	movs	r3, #3
 800ad68:	e171      	b.n	800b04e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1e6      	bne.n	800ad46 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f7fd fc79 	bl	8008670 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ad86:	641a      	str	r2, [r3, #64]	; 0x40
 800ad88:	e01e      	b.n	800adc8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800ad8a:	f7fd fc65 	bl	8008658 <HAL_GetTick>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d90a      	bls.n	800adae <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	f043 0208 	orr.w	r2, r3, #8
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2203      	movs	r2, #3
 800ada8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e14f      	b.n	800b04e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	dbe8      	blt.n	800ad8a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800adb8:	2001      	movs	r0, #1
 800adba:	f7fd fc59 	bl	8008670 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800adc6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f003 0310 	and.w	r3, r3, #16
 800add4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800add8:	fa01 f303 	lsl.w	r3, r1, r3
 800addc:	43db      	mvns	r3, r3
 800adde:	ea02 0103 	and.w	r1, r2, r3
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f003 0310 	and.w	r3, r3, #16
 800adec:	409a      	lsls	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f003 0310 	and.w	r3, r3, #16
 800ae02:	21ff      	movs	r1, #255	; 0xff
 800ae04:	fa01 f303 	lsl.w	r3, r1, r3
 800ae08:	43db      	mvns	r3, r3
 800ae0a:	ea02 0103 	and.w	r1, r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f003 0310 	and.w	r3, r3, #16
 800ae18:	409a      	lsls	r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d11d      	bne.n	800ae66 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae30:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f003 0310 	and.w	r3, r3, #16
 800ae38:	221f      	movs	r2, #31
 800ae3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae3e:	43db      	mvns	r3, r3
 800ae40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae42:	4013      	ands	r3, r2
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f003 0310 	and.w	r3, r3, #16
 800ae52:	69ba      	ldr	r2, [r7, #24]
 800ae54:	fa02 f303 	lsl.w	r3, r2, r3
 800ae58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f003 0310 	and.w	r3, r3, #16
 800ae74:	2207      	movs	r2, #7
 800ae76:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7a:	43db      	mvns	r3, r3
 800ae7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae7e:	4013      	ands	r3, r2
 800ae80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	f003 0301 	and.w	r3, r3, #1
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d002      	beq.n	800ae94 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	623b      	str	r3, [r7, #32]
 800ae92:	e011      	b.n	800aeb8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800aea0:	2301      	movs	r3, #1
 800aea2:	623b      	str	r3, [r7, #32]
 800aea4:	e008      	b.n	800aeb8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d102      	bne.n	800aeb4 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	623b      	str	r3, [r7, #32]
 800aeb2:	e001      	b.n	800aeb8 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	689a      	ldr	r2, [r3, #8]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	6a3a      	ldr	r2, [r7, #32]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f003 0310 	and.w	r3, r3, #16
 800aece:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aed2:	fa02 f303 	lsl.w	r3, r2, r3
 800aed6:	43db      	mvns	r3, r3
 800aed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeda:	4013      	ands	r3, r2
 800aedc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	791b      	ldrb	r3, [r3, #4]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d102      	bne.n	800aeec <HAL_DAC_ConfigChannel+0x1e4>
 800aee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeea:	e000      	b.n	800aeee <HAL_DAC_ConfigChannel+0x1e6>
 800aeec:	2300      	movs	r3, #0
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f003 0310 	and.w	r3, r3, #16
 800aefa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aefe:	fa02 f303 	lsl.w	r3, r2, r3
 800af02:	43db      	mvns	r3, r3
 800af04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af06:	4013      	ands	r3, r2
 800af08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	795b      	ldrb	r3, [r3, #5]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d102      	bne.n	800af18 <HAL_DAC_ConfigChannel+0x210>
 800af12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af16:	e000      	b.n	800af1a <HAL_DAC_ConfigChannel+0x212>
 800af18:	2300      	movs	r3, #0
 800af1a:	69ba      	ldr	r2, [r7, #24]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d114      	bne.n	800af5a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800af30:	f001 fbc2 	bl	800c6b8 <HAL_RCC_GetHCLKFreq>
 800af34:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	4a47      	ldr	r2, [pc, #284]	; (800b058 <HAL_DAC_ConfigChannel+0x350>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d904      	bls.n	800af48 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af44:	627b      	str	r3, [r7, #36]	; 0x24
 800af46:	e00d      	b.n	800af64 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	4a44      	ldr	r2, [pc, #272]	; (800b05c <HAL_DAC_ConfigChannel+0x354>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d909      	bls.n	800af64 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af56:	627b      	str	r3, [r7, #36]	; 0x24
 800af58:	e004      	b.n	800af64 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af60:	4313      	orrs	r3, r2
 800af62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f003 0310 	and.w	r3, r3, #16
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	fa02 f303 	lsl.w	r3, r2, r3
 800af70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af72:	4313      	orrs	r3, r2
 800af74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6819      	ldr	r1, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f003 0310 	and.w	r3, r3, #16
 800af8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800af8e:	fa02 f303 	lsl.w	r3, r2, r3
 800af92:	43da      	mvns	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	400a      	ands	r2, r1
 800af9a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f003 0310 	and.w	r3, r3, #16
 800afaa:	f640 72fe 	movw	r2, #4094	; 0xffe
 800afae:	fa02 f303 	lsl.w	r3, r2, r3
 800afb2:	43db      	mvns	r3, r3
 800afb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb6:	4013      	ands	r3, r2
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f003 0310 	and.w	r3, r3, #16
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	fa02 f303 	lsl.w	r3, r2, r3
 800afcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afce:	4313      	orrs	r3, r2
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6819      	ldr	r1, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f003 0310 	and.w	r3, r3, #16
 800afe6:	22c0      	movs	r2, #192	; 0xc0
 800afe8:	fa02 f303 	lsl.w	r3, r2, r3
 800afec:	43da      	mvns	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	400a      	ands	r2, r1
 800aff4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	089b      	lsrs	r3, r3, #2
 800affc:	f003 030f 	and.w	r3, r3, #15
 800b000:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	089b      	lsrs	r3, r3, #2
 800b008:	021b      	lsls	r3, r3, #8
 800b00a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	4313      	orrs	r3, r2
 800b012:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f003 0310 	and.w	r3, r3, #16
 800b020:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b024:	fa01 f303 	lsl.w	r3, r1, r3
 800b028:	43db      	mvns	r3, r3
 800b02a:	ea02 0103 	and.w	r1, r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f003 0310 	and.w	r3, r3, #16
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	409a      	lsls	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	430a      	orrs	r2, r1
 800b03e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2201      	movs	r2, #1
 800b044:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3728      	adds	r7, #40	; 0x28
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	09896800 	.word	0x09896800
 800b05c:	04c4b400 	.word	0x04c4b400

0800b060 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7ff fe16 	bl	800aca0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2201      	movs	r2, #1
 800b078:	711a      	strb	r2, [r3, #4]
}
 800b07a:	bf00      	nop
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f7ff fe0f 	bl	800acb4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b096:	bf00      	nop
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	f043 0204 	orr.w	r2, r3, #4
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f7ff fe05 	bl	800acc8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	711a      	strb	r2, [r3, #4]
}
 800b0c4:	bf00      	nop
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b114:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f7ff ffd8 	bl	800b0cc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2201      	movs	r2, #1
 800b120:	711a      	strb	r2, [r3, #4]
}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b084      	sub	sp, #16
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b136:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7ff ffd1 	bl	800b0e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b13e:	bf00      	nop
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b152:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	f043 0204 	orr.w	r2, r3, #4
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f7ff ffc7 	bl	800b0f4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2201      	movs	r2, #1
 800b16a:	711a      	strb	r2, [r3, #4]
}
 800b16c:	bf00      	nop
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d101      	bne.n	800b186 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	e08d      	b.n	800b2a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	4b47      	ldr	r3, [pc, #284]	; (800b2ac <HAL_DMA_Init+0x138>)
 800b18e:	429a      	cmp	r2, r3
 800b190:	d80f      	bhi.n	800b1b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	461a      	mov	r2, r3
 800b198:	4b45      	ldr	r3, [pc, #276]	; (800b2b0 <HAL_DMA_Init+0x13c>)
 800b19a:	4413      	add	r3, r2
 800b19c:	4a45      	ldr	r2, [pc, #276]	; (800b2b4 <HAL_DMA_Init+0x140>)
 800b19e:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a2:	091b      	lsrs	r3, r3, #4
 800b1a4:	009a      	lsls	r2, r3, #2
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a42      	ldr	r2, [pc, #264]	; (800b2b8 <HAL_DMA_Init+0x144>)
 800b1ae:	641a      	str	r2, [r3, #64]	; 0x40
 800b1b0:	e00e      	b.n	800b1d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4b40      	ldr	r3, [pc, #256]	; (800b2bc <HAL_DMA_Init+0x148>)
 800b1ba:	4413      	add	r3, r2
 800b1bc:	4a3d      	ldr	r2, [pc, #244]	; (800b2b4 <HAL_DMA_Init+0x140>)
 800b1be:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c2:	091b      	lsrs	r3, r3, #4
 800b1c4:	009a      	lsls	r2, r3, #2
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a3c      	ldr	r2, [pc, #240]	; (800b2c0 <HAL_DMA_Init+0x14c>)
 800b1ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2202      	movs	r2, #2
 800b1d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b1f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b20c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a1b      	ldr	r3, [r3, #32]
 800b212:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	4313      	orrs	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fa10 	bl	800b648 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b230:	d102      	bne.n	800b238 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b240:	b2d2      	uxtb	r2, r2
 800b242:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b24c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d010      	beq.n	800b278 <HAL_DMA_Init+0x104>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d80c      	bhi.n	800b278 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fa30 	bl	800b6c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b268:	2200      	movs	r2, #0
 800b26a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b274:	605a      	str	r2, [r3, #4]
 800b276:	e008      	b.n	800b28a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	40020407 	.word	0x40020407
 800b2b0:	bffdfff8 	.word	0xbffdfff8
 800b2b4:	cccccccd 	.word	0xcccccccd
 800b2b8:	40020000 	.word	0x40020000
 800b2bc:	bffdfbf8 	.word	0xbffdfbf8
 800b2c0:	40020400 	.word	0x40020400

0800b2c4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
 800b2d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d101      	bne.n	800b2e4 <HAL_DMA_Start_IT+0x20>
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	e066      	b.n	800b3b2 <HAL_DMA_Start_IT+0xee>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d155      	bne.n	800b3a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f022 0201 	bic.w	r2, r2, #1
 800b314:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	68b9      	ldr	r1, [r7, #8]
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	f000 f954 	bl	800b5ca <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b326:	2b00      	cmp	r3, #0
 800b328:	d008      	beq.n	800b33c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f042 020e 	orr.w	r2, r2, #14
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	e00f      	b.n	800b35c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f022 0204 	bic.w	r2, r2, #4
 800b34a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f042 020a 	orr.w	r2, r2, #10
 800b35a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d007      	beq.n	800b37a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b378:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d007      	beq.n	800b392 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b38c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b390:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f042 0201 	orr.w	r2, r2, #1
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	e005      	b.n	800b3b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b085      	sub	sp, #20
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d005      	beq.n	800b3de <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2204      	movs	r2, #4
 800b3d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	73fb      	strb	r3, [r7, #15]
 800b3dc:	e037      	b.n	800b44e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f022 020e 	bic.w	r2, r2, #14
 800b3ec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3fc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f022 0201 	bic.w	r2, r2, #1
 800b40c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b412:	f003 021f 	and.w	r2, r3, #31
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41a:	2101      	movs	r1, #1
 800b41c:	fa01 f202 	lsl.w	r2, r1, r2
 800b420:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b42a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00c      	beq.n	800b44e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b43e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b442:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b44c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b488:	f003 031f 	and.w	r3, r3, #31
 800b48c:	2204      	movs	r2, #4
 800b48e:	409a      	lsls	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4013      	ands	r3, r2
 800b494:	2b00      	cmp	r3, #0
 800b496:	d026      	beq.n	800b4e6 <HAL_DMA_IRQHandler+0x7a>
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	f003 0304 	and.w	r3, r3, #4
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d021      	beq.n	800b4e6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0320 	and.w	r3, r3, #32
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d107      	bne.n	800b4c0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f022 0204 	bic.w	r2, r2, #4
 800b4be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c4:	f003 021f 	and.w	r2, r3, #31
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4cc:	2104      	movs	r1, #4
 800b4ce:	fa01 f202 	lsl.w	r2, r1, r2
 800b4d2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d071      	beq.n	800b5c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b4e4:	e06c      	b.n	800b5c0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ea:	f003 031f 	and.w	r3, r3, #31
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	409a      	lsls	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d02e      	beq.n	800b558 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	f003 0302 	and.w	r3, r3, #2
 800b500:	2b00      	cmp	r3, #0
 800b502:	d029      	beq.n	800b558 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10b      	bne.n	800b52a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f022 020a 	bic.w	r2, r2, #10
 800b520:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b52e:	f003 021f 	and.w	r2, r3, #31
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b536:	2102      	movs	r1, #2
 800b538:	fa01 f202 	lsl.w	r2, r1, r2
 800b53c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d038      	beq.n	800b5c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b556:	e033      	b.n	800b5c0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b55c:	f003 031f 	and.w	r3, r3, #31
 800b560:	2208      	movs	r2, #8
 800b562:	409a      	lsls	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4013      	ands	r3, r2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d02a      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f003 0308 	and.w	r3, r3, #8
 800b572:	2b00      	cmp	r3, #0
 800b574:	d025      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f022 020e 	bic.w	r2, r2, #14
 800b584:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b58a:	f003 021f 	and.w	r2, r3, #31
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b592:	2101      	movs	r1, #1
 800b594:	fa01 f202 	lsl.w	r2, r1, r2
 800b598:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b5c0:	bf00      	nop
 800b5c2:	bf00      	nop
}
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b085      	sub	sp, #20
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	60b9      	str	r1, [r7, #8]
 800b5d4:	607a      	str	r2, [r7, #4]
 800b5d6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b5e0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d004      	beq.n	800b5f4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b5f2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f8:	f003 021f 	and.w	r2, r3, #31
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b600:	2101      	movs	r1, #1
 800b602:	fa01 f202 	lsl.w	r2, r1, r2
 800b606:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	2b10      	cmp	r3, #16
 800b616:	d108      	bne.n	800b62a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b628:	e007      	b.n	800b63a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	60da      	str	r2, [r3, #12]
}
 800b63a:	bf00      	nop
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
	...

0800b648 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	461a      	mov	r2, r3
 800b656:	4b16      	ldr	r3, [pc, #88]	; (800b6b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b658:	429a      	cmp	r2, r3
 800b65a:	d802      	bhi.n	800b662 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b65c:	4b15      	ldr	r3, [pc, #84]	; (800b6b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b65e:	617b      	str	r3, [r7, #20]
 800b660:	e001      	b.n	800b666 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b662:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b664:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	3b08      	subs	r3, #8
 800b672:	4a12      	ldr	r2, [pc, #72]	; (800b6bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b674:	fba2 2303 	umull	r2, r3, r2, r3
 800b678:	091b      	lsrs	r3, r3, #4
 800b67a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b680:	089b      	lsrs	r3, r3, #2
 800b682:	009a      	lsls	r2, r3, #2
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	4413      	add	r3, r2
 800b688:	461a      	mov	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a0b      	ldr	r2, [pc, #44]	; (800b6c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b692:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f003 031f 	and.w	r3, r3, #31
 800b69a:	2201      	movs	r2, #1
 800b69c:	409a      	lsls	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b6a2:	bf00      	nop
 800b6a4:	371c      	adds	r7, #28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	40020407 	.word	0x40020407
 800b6b4:	40020800 	.word	0x40020800
 800b6b8:	40020820 	.word	0x40020820
 800b6bc:	cccccccd 	.word	0xcccccccd
 800b6c0:	40020880 	.word	0x40020880

0800b6c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b6d8:	4413      	add	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	461a      	mov	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a08      	ldr	r2, [pc, #32]	; (800b708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b6e6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	f003 031f 	and.w	r3, r3, #31
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	409a      	lsls	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b6f8:	bf00      	nop
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	1000823f 	.word	0x1000823f
 800b708:	40020940 	.word	0x40020940

0800b70c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b71a:	e15a      	b.n	800b9d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	2101      	movs	r1, #1
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	fa01 f303 	lsl.w	r3, r1, r3
 800b728:	4013      	ands	r3, r2
 800b72a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 814c 	beq.w	800b9cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d00b      	beq.n	800b754 <HAL_GPIO_Init+0x48>
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	2b02      	cmp	r3, #2
 800b742:	d007      	beq.n	800b754 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b748:	2b11      	cmp	r3, #17
 800b74a:	d003      	beq.n	800b754 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	2b12      	cmp	r3, #18
 800b752:	d130      	bne.n	800b7b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	005b      	lsls	r3, r3, #1
 800b75e:	2203      	movs	r2, #3
 800b760:	fa02 f303 	lsl.w	r3, r2, r3
 800b764:	43db      	mvns	r3, r3
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	4013      	ands	r3, r2
 800b76a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	68da      	ldr	r2, [r3, #12]
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	fa02 f303 	lsl.w	r3, r2, r3
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b78a:	2201      	movs	r2, #1
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	fa02 f303 	lsl.w	r3, r2, r3
 800b792:	43db      	mvns	r3, r3
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	4013      	ands	r3, r2
 800b798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	091b      	lsrs	r3, r3, #4
 800b7a0:	f003 0201 	and.w	r2, r3, #1
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	005b      	lsls	r3, r3, #1
 800b7c0:	2203      	movs	r2, #3
 800b7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7c6:	43db      	mvns	r3, r3
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	689a      	ldr	r2, [r3, #8]
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	693a      	ldr	r2, [r7, #16]
 800b7e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d003      	beq.n	800b7f6 <HAL_GPIO_Init+0xea>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	2b12      	cmp	r3, #18
 800b7f4:	d123      	bne.n	800b83e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	08da      	lsrs	r2, r3, #3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3208      	adds	r2, #8
 800b7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	220f      	movs	r2, #15
 800b80e:	fa02 f303 	lsl.w	r3, r2, r3
 800b812:	43db      	mvns	r3, r3
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	4013      	ands	r3, r2
 800b818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	691a      	ldr	r2, [r3, #16]
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f003 0307 	and.w	r3, r3, #7
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	fa02 f303 	lsl.w	r3, r2, r3
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	08da      	lsrs	r2, r3, #3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3208      	adds	r2, #8
 800b838:	6939      	ldr	r1, [r7, #16]
 800b83a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	005b      	lsls	r3, r3, #1
 800b848:	2203      	movs	r2, #3
 800b84a:	fa02 f303 	lsl.w	r3, r2, r3
 800b84e:	43db      	mvns	r3, r3
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	4013      	ands	r3, r2
 800b854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	f003 0203 	and.w	r2, r3, #3
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	fa02 f303 	lsl.w	r3, r2, r3
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	4313      	orrs	r3, r2
 800b86a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80a6 	beq.w	800b9cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b880:	4b5b      	ldr	r3, [pc, #364]	; (800b9f0 <HAL_GPIO_Init+0x2e4>)
 800b882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b884:	4a5a      	ldr	r2, [pc, #360]	; (800b9f0 <HAL_GPIO_Init+0x2e4>)
 800b886:	f043 0301 	orr.w	r3, r3, #1
 800b88a:	6613      	str	r3, [r2, #96]	; 0x60
 800b88c:	4b58      	ldr	r3, [pc, #352]	; (800b9f0 <HAL_GPIO_Init+0x2e4>)
 800b88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	60bb      	str	r3, [r7, #8]
 800b896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b898:	4a56      	ldr	r2, [pc, #344]	; (800b9f4 <HAL_GPIO_Init+0x2e8>)
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	089b      	lsrs	r3, r3, #2
 800b89e:	3302      	adds	r3, #2
 800b8a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f003 0303 	and.w	r3, r3, #3
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	220f      	movs	r2, #15
 800b8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b4:	43db      	mvns	r3, r3
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b8c2:	d01f      	beq.n	800b904 <HAL_GPIO_Init+0x1f8>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a4c      	ldr	r2, [pc, #304]	; (800b9f8 <HAL_GPIO_Init+0x2ec>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d019      	beq.n	800b900 <HAL_GPIO_Init+0x1f4>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a4b      	ldr	r2, [pc, #300]	; (800b9fc <HAL_GPIO_Init+0x2f0>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d013      	beq.n	800b8fc <HAL_GPIO_Init+0x1f0>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a4a      	ldr	r2, [pc, #296]	; (800ba00 <HAL_GPIO_Init+0x2f4>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d00d      	beq.n	800b8f8 <HAL_GPIO_Init+0x1ec>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a49      	ldr	r2, [pc, #292]	; (800ba04 <HAL_GPIO_Init+0x2f8>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d007      	beq.n	800b8f4 <HAL_GPIO_Init+0x1e8>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a48      	ldr	r2, [pc, #288]	; (800ba08 <HAL_GPIO_Init+0x2fc>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d101      	bne.n	800b8f0 <HAL_GPIO_Init+0x1e4>
 800b8ec:	2305      	movs	r3, #5
 800b8ee:	e00a      	b.n	800b906 <HAL_GPIO_Init+0x1fa>
 800b8f0:	2306      	movs	r3, #6
 800b8f2:	e008      	b.n	800b906 <HAL_GPIO_Init+0x1fa>
 800b8f4:	2304      	movs	r3, #4
 800b8f6:	e006      	b.n	800b906 <HAL_GPIO_Init+0x1fa>
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e004      	b.n	800b906 <HAL_GPIO_Init+0x1fa>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e002      	b.n	800b906 <HAL_GPIO_Init+0x1fa>
 800b900:	2301      	movs	r3, #1
 800b902:	e000      	b.n	800b906 <HAL_GPIO_Init+0x1fa>
 800b904:	2300      	movs	r3, #0
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	f002 0203 	and.w	r2, r2, #3
 800b90c:	0092      	lsls	r2, r2, #2
 800b90e:	4093      	lsls	r3, r2
 800b910:	693a      	ldr	r2, [r7, #16]
 800b912:	4313      	orrs	r3, r2
 800b914:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b916:	4937      	ldr	r1, [pc, #220]	; (800b9f4 <HAL_GPIO_Init+0x2e8>)
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	089b      	lsrs	r3, r3, #2
 800b91c:	3302      	adds	r3, #2
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b924:	4b39      	ldr	r3, [pc, #228]	; (800ba0c <HAL_GPIO_Init+0x300>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	43db      	mvns	r3, r3
 800b92e:	693a      	ldr	r2, [r7, #16]
 800b930:	4013      	ands	r3, r2
 800b932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	4313      	orrs	r3, r2
 800b946:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b948:	4a30      	ldr	r2, [pc, #192]	; (800ba0c <HAL_GPIO_Init+0x300>)
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800b94e:	4b2f      	ldr	r3, [pc, #188]	; (800ba0c <HAL_GPIO_Init+0x300>)
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	43db      	mvns	r3, r3
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	4013      	ands	r3, r2
 800b95c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4313      	orrs	r3, r2
 800b970:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b972:	4a26      	ldr	r2, [pc, #152]	; (800ba0c <HAL_GPIO_Init+0x300>)
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b978:	4b24      	ldr	r3, [pc, #144]	; (800ba0c <HAL_GPIO_Init+0x300>)
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	43db      	mvns	r3, r3
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	4013      	ands	r3, r2
 800b986:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d003      	beq.n	800b99c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	4313      	orrs	r3, r2
 800b99a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b99c:	4a1b      	ldr	r2, [pc, #108]	; (800ba0c <HAL_GPIO_Init+0x300>)
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b9a2:	4b1a      	ldr	r3, [pc, #104]	; (800ba0c <HAL_GPIO_Init+0x300>)
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	43db      	mvns	r3, r3
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d003      	beq.n	800b9c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b9c6:	4a11      	ldr	r2, [pc, #68]	; (800ba0c <HAL_GPIO_Init+0x300>)
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f47f ae9d 	bne.w	800b71c <HAL_GPIO_Init+0x10>
  }
}
 800b9e2:	bf00      	nop
 800b9e4:	371c      	adds	r7, #28
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	40021000 	.word	0x40021000
 800b9f4:	40010000 	.word	0x40010000
 800b9f8:	48000400 	.word	0x48000400
 800b9fc:	48000800 	.word	0x48000800
 800ba00:	48000c00 	.word	0x48000c00
 800ba04:	48001000 	.word	0x48001000
 800ba08:	48001400 	.word	0x48001400
 800ba0c:	40010400 	.word	0x40010400

0800ba10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800ba1e:	e0bd      	b.n	800bb9c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800ba20:	2201      	movs	r2, #1
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	fa02 f303 	lsl.w	r3, r2, r3
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f000 80b0 	beq.w	800bb96 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800ba36:	4a60      	ldr	r2, [pc, #384]	; (800bbb8 <HAL_GPIO_DeInit+0x1a8>)
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	089b      	lsrs	r3, r3, #2
 800ba3c:	3302      	adds	r3, #2
 800ba3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba42:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	f003 0303 	and.w	r3, r3, #3
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	220f      	movs	r2, #15
 800ba4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	4013      	ands	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ba5e:	d01f      	beq.n	800baa0 <HAL_GPIO_DeInit+0x90>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a56      	ldr	r2, [pc, #344]	; (800bbbc <HAL_GPIO_DeInit+0x1ac>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d019      	beq.n	800ba9c <HAL_GPIO_DeInit+0x8c>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a55      	ldr	r2, [pc, #340]	; (800bbc0 <HAL_GPIO_DeInit+0x1b0>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d013      	beq.n	800ba98 <HAL_GPIO_DeInit+0x88>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a54      	ldr	r2, [pc, #336]	; (800bbc4 <HAL_GPIO_DeInit+0x1b4>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d00d      	beq.n	800ba94 <HAL_GPIO_DeInit+0x84>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a53      	ldr	r2, [pc, #332]	; (800bbc8 <HAL_GPIO_DeInit+0x1b8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d007      	beq.n	800ba90 <HAL_GPIO_DeInit+0x80>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a52      	ldr	r2, [pc, #328]	; (800bbcc <HAL_GPIO_DeInit+0x1bc>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d101      	bne.n	800ba8c <HAL_GPIO_DeInit+0x7c>
 800ba88:	2305      	movs	r3, #5
 800ba8a:	e00a      	b.n	800baa2 <HAL_GPIO_DeInit+0x92>
 800ba8c:	2306      	movs	r3, #6
 800ba8e:	e008      	b.n	800baa2 <HAL_GPIO_DeInit+0x92>
 800ba90:	2304      	movs	r3, #4
 800ba92:	e006      	b.n	800baa2 <HAL_GPIO_DeInit+0x92>
 800ba94:	2303      	movs	r3, #3
 800ba96:	e004      	b.n	800baa2 <HAL_GPIO_DeInit+0x92>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	e002      	b.n	800baa2 <HAL_GPIO_DeInit+0x92>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e000      	b.n	800baa2 <HAL_GPIO_DeInit+0x92>
 800baa0:	2300      	movs	r3, #0
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	f002 0203 	and.w	r2, r2, #3
 800baa8:	0092      	lsls	r2, r2, #2
 800baaa:	4093      	lsls	r3, r2
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d132      	bne.n	800bb18 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bab2:	4b47      	ldr	r3, [pc, #284]	; (800bbd0 <HAL_GPIO_DeInit+0x1c0>)
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	43db      	mvns	r3, r3
 800baba:	4945      	ldr	r1, [pc, #276]	; (800bbd0 <HAL_GPIO_DeInit+0x1c0>)
 800babc:	4013      	ands	r3, r2
 800babe:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bac0:	4b43      	ldr	r3, [pc, #268]	; (800bbd0 <HAL_GPIO_DeInit+0x1c0>)
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	43db      	mvns	r3, r3
 800bac8:	4941      	ldr	r1, [pc, #260]	; (800bbd0 <HAL_GPIO_DeInit+0x1c0>)
 800baca:	4013      	ands	r3, r2
 800bacc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bace:	4b40      	ldr	r3, [pc, #256]	; (800bbd0 <HAL_GPIO_DeInit+0x1c0>)
 800bad0:	689a      	ldr	r2, [r3, #8]
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	43db      	mvns	r3, r3
 800bad6:	493e      	ldr	r1, [pc, #248]	; (800bbd0 <HAL_GPIO_DeInit+0x1c0>)
 800bad8:	4013      	ands	r3, r2
 800bada:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800badc:	4b3c      	ldr	r3, [pc, #240]	; (800bbd0 <HAL_GPIO_DeInit+0x1c0>)
 800bade:	68da      	ldr	r2, [r3, #12]
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	43db      	mvns	r3, r3
 800bae4:	493a      	ldr	r1, [pc, #232]	; (800bbd0 <HAL_GPIO_DeInit+0x1c0>)
 800bae6:	4013      	ands	r3, r2
 800bae8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f003 0303 	and.w	r3, r3, #3
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	220f      	movs	r2, #15
 800baf4:	fa02 f303 	lsl.w	r3, r2, r3
 800baf8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bafa:	4a2f      	ldr	r2, [pc, #188]	; (800bbb8 <HAL_GPIO_DeInit+0x1a8>)
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	089b      	lsrs	r3, r3, #2
 800bb00:	3302      	adds	r3, #2
 800bb02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	43da      	mvns	r2, r3
 800bb0a:	482b      	ldr	r0, [pc, #172]	; (800bbb8 <HAL_GPIO_DeInit+0x1a8>)
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	089b      	lsrs	r3, r3, #2
 800bb10:	400a      	ands	r2, r1
 800bb12:	3302      	adds	r3, #2
 800bb14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	2103      	movs	r1, #3
 800bb22:	fa01 f303 	lsl.w	r3, r1, r3
 800bb26:	431a      	orrs	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	08da      	lsrs	r2, r3, #3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3208      	adds	r2, #8
 800bb34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	220f      	movs	r2, #15
 800bb42:	fa02 f303 	lsl.w	r3, r2, r3
 800bb46:	43db      	mvns	r3, r3
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	08d2      	lsrs	r2, r2, #3
 800bb4c:	4019      	ands	r1, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	3208      	adds	r2, #8
 800bb52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68da      	ldr	r2, [r3, #12]
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	005b      	lsls	r3, r3, #1
 800bb5e:	2103      	movs	r1, #3
 800bb60:	fa01 f303 	lsl.w	r3, r1, r3
 800bb64:	43db      	mvns	r3, r3
 800bb66:	401a      	ands	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685a      	ldr	r2, [r3, #4]
 800bb70:	2101      	movs	r1, #1
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	fa01 f303 	lsl.w	r3, r1, r3
 800bb78:	43db      	mvns	r3, r3
 800bb7a:	401a      	ands	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	689a      	ldr	r2, [r3, #8]
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	005b      	lsls	r3, r3, #1
 800bb88:	2103      	movs	r1, #3
 800bb8a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb8e:	43db      	mvns	r3, r3
 800bb90:	401a      	ands	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	609a      	str	r2, [r3, #8]
    }

    position++;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	fa22 f303 	lsr.w	r3, r2, r3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f47f af3b 	bne.w	800ba20 <HAL_GPIO_DeInit+0x10>
  }
}
 800bbaa:	bf00      	nop
 800bbac:	371c      	adds	r7, #28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	40010000 	.word	0x40010000
 800bbbc:	48000400 	.word	0x48000400
 800bbc0:	48000800 	.word	0x48000800
 800bbc4:	48000c00 	.word	0x48000c00
 800bbc8:	48001000 	.word	0x48001000
 800bbcc:	48001400 	.word	0x48001400
 800bbd0:	40010400 	.word	0x40010400

0800bbd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	807b      	strh	r3, [r7, #2]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bbe4:	787b      	ldrb	r3, [r7, #1]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bbea:	887a      	ldrh	r2, [r7, #2]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bbf0:	e002      	b.n	800bbf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bbf2:	887a      	ldrh	r2, [r7, #2]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d141      	bne.n	800bc96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bc12:	4b4b      	ldr	r3, [pc, #300]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bc1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc1e:	d131      	bne.n	800bc84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bc20:	4b47      	ldr	r3, [pc, #284]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc26:	4a46      	ldr	r2, [pc, #280]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bc30:	4b43      	ldr	r3, [pc, #268]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bc38:	4a41      	ldr	r2, [pc, #260]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bc40:	4b40      	ldr	r3, [pc, #256]	; (800bd44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2232      	movs	r2, #50	; 0x32
 800bc46:	fb02 f303 	mul.w	r3, r2, r3
 800bc4a:	4a3f      	ldr	r2, [pc, #252]	; (800bd48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800bc4c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc50:	0c9b      	lsrs	r3, r3, #18
 800bc52:	3301      	adds	r3, #1
 800bc54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bc56:	e002      	b.n	800bc5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bc5e:	4b38      	ldr	r3, [pc, #224]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc6a:	d102      	bne.n	800bc72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1f2      	bne.n	800bc58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bc72:	4b33      	ldr	r3, [pc, #204]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc7e:	d158      	bne.n	800bd32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800bc80:	2303      	movs	r3, #3
 800bc82:	e057      	b.n	800bd34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bc84:	4b2e      	ldr	r3, [pc, #184]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc8a:	4a2d      	ldr	r2, [pc, #180]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bc8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800bc94:	e04d      	b.n	800bd32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc9c:	d141      	bne.n	800bd22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bc9e:	4b28      	ldr	r3, [pc, #160]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcaa:	d131      	bne.n	800bd10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bcac:	4b24      	ldr	r3, [pc, #144]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcb2:	4a23      	ldr	r2, [pc, #140]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bcbc:	4b20      	ldr	r3, [pc, #128]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bcc4:	4a1e      	ldr	r2, [pc, #120]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bcca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bccc:	4b1d      	ldr	r3, [pc, #116]	; (800bd44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2232      	movs	r2, #50	; 0x32
 800bcd2:	fb02 f303 	mul.w	r3, r2, r3
 800bcd6:	4a1c      	ldr	r2, [pc, #112]	; (800bd48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800bcd8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcdc:	0c9b      	lsrs	r3, r3, #18
 800bcde:	3301      	adds	r3, #1
 800bce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bce2:	e002      	b.n	800bcea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bcea:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcec:	695b      	ldr	r3, [r3, #20]
 800bcee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcf6:	d102      	bne.n	800bcfe <HAL_PWREx_ControlVoltageScaling+0xfa>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1f2      	bne.n	800bce4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bcfe:	4b10      	ldr	r3, [pc, #64]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd0a:	d112      	bne.n	800bd32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	e011      	b.n	800bd34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bd10:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd16:	4a0a      	ldr	r2, [pc, #40]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800bd20:	e007      	b.n	800bd32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bd22:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bd2a:	4a05      	ldr	r2, [pc, #20]	; (800bd40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3714      	adds	r7, #20
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr
 800bd40:	40007000 	.word	0x40007000
 800bd44:	20000c30 	.word	0x20000c30
 800bd48:	431bde83 	.word	0x431bde83

0800bd4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b088      	sub	sp, #32
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e308      	b.n	800c370 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 0301 	and.w	r3, r3, #1
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d075      	beq.n	800be56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd6a:	4ba3      	ldr	r3, [pc, #652]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f003 030c 	and.w	r3, r3, #12
 800bd72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd74:	4ba0      	ldr	r3, [pc, #640]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	f003 0303 	and.w	r3, r3, #3
 800bd7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	2b0c      	cmp	r3, #12
 800bd82:	d102      	bne.n	800bd8a <HAL_RCC_OscConfig+0x3e>
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d002      	beq.n	800bd90 <HAL_RCC_OscConfig+0x44>
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	2b08      	cmp	r3, #8
 800bd8e:	d10b      	bne.n	800bda8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd90:	4b99      	ldr	r3, [pc, #612]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d05b      	beq.n	800be54 <HAL_RCC_OscConfig+0x108>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d157      	bne.n	800be54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e2e3      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdb0:	d106      	bne.n	800bdc0 <HAL_RCC_OscConfig+0x74>
 800bdb2:	4b91      	ldr	r3, [pc, #580]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a90      	ldr	r2, [pc, #576]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bdb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdbc:	6013      	str	r3, [r2, #0]
 800bdbe:	e01d      	b.n	800bdfc <HAL_RCC_OscConfig+0xb0>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bdc8:	d10c      	bne.n	800bde4 <HAL_RCC_OscConfig+0x98>
 800bdca:	4b8b      	ldr	r3, [pc, #556]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a8a      	ldr	r2, [pc, #552]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bdd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bdd4:	6013      	str	r3, [r2, #0]
 800bdd6:	4b88      	ldr	r3, [pc, #544]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a87      	ldr	r2, [pc, #540]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	e00b      	b.n	800bdfc <HAL_RCC_OscConfig+0xb0>
 800bde4:	4b84      	ldr	r3, [pc, #528]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a83      	ldr	r2, [pc, #524]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bdea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	4b81      	ldr	r3, [pc, #516]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a80      	ldr	r2, [pc, #512]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bdf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bdfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d013      	beq.n	800be2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be04:	f7fc fc28 	bl	8008658 <HAL_GetTick>
 800be08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be0a:	e008      	b.n	800be1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be0c:	f7fc fc24 	bl	8008658 <HAL_GetTick>
 800be10:	4602      	mov	r2, r0
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	2b64      	cmp	r3, #100	; 0x64
 800be18:	d901      	bls.n	800be1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e2a8      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be1e:	4b76      	ldr	r3, [pc, #472]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d0f0      	beq.n	800be0c <HAL_RCC_OscConfig+0xc0>
 800be2a:	e014      	b.n	800be56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be2c:	f7fc fc14 	bl	8008658 <HAL_GetTick>
 800be30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be32:	e008      	b.n	800be46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be34:	f7fc fc10 	bl	8008658 <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b64      	cmp	r3, #100	; 0x64
 800be40:	d901      	bls.n	800be46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e294      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be46:	4b6c      	ldr	r3, [pc, #432]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1f0      	bne.n	800be34 <HAL_RCC_OscConfig+0xe8>
 800be52:	e000      	b.n	800be56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0302 	and.w	r3, r3, #2
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d075      	beq.n	800bf4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800be62:	4b65      	ldr	r3, [pc, #404]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	f003 030c 	and.w	r3, r3, #12
 800be6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800be6c:	4b62      	ldr	r3, [pc, #392]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	f003 0303 	and.w	r3, r3, #3
 800be74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	2b0c      	cmp	r3, #12
 800be7a:	d102      	bne.n	800be82 <HAL_RCC_OscConfig+0x136>
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d002      	beq.n	800be88 <HAL_RCC_OscConfig+0x13c>
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	2b04      	cmp	r3, #4
 800be86:	d11f      	bne.n	800bec8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be88:	4b5b      	ldr	r3, [pc, #364]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be90:	2b00      	cmp	r3, #0
 800be92:	d005      	beq.n	800bea0 <HAL_RCC_OscConfig+0x154>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e267      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bea0:	4b55      	ldr	r3, [pc, #340]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	061b      	lsls	r3, r3, #24
 800beae:	4952      	ldr	r1, [pc, #328]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800beb0:	4313      	orrs	r3, r2
 800beb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800beb4:	4b51      	ldr	r3, [pc, #324]	; (800bffc <HAL_RCC_OscConfig+0x2b0>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fc fb81 	bl	80085c0 <HAL_InitTick>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d043      	beq.n	800bf4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	e253      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d023      	beq.n	800bf18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bed0:	4b49      	ldr	r3, [pc, #292]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a48      	ldr	r2, [pc, #288]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800beda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bedc:	f7fc fbbc 	bl	8008658 <HAL_GetTick>
 800bee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bee2:	e008      	b.n	800bef6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bee4:	f7fc fbb8 	bl	8008658 <HAL_GetTick>
 800bee8:	4602      	mov	r2, r0
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d901      	bls.n	800bef6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bef2:	2303      	movs	r3, #3
 800bef4:	e23c      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bef6:	4b40      	ldr	r3, [pc, #256]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0f0      	beq.n	800bee4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf02:	4b3d      	ldr	r3, [pc, #244]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	061b      	lsls	r3, r3, #24
 800bf10:	4939      	ldr	r1, [pc, #228]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bf12:	4313      	orrs	r3, r2
 800bf14:	604b      	str	r3, [r1, #4]
 800bf16:	e01a      	b.n	800bf4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf18:	4b37      	ldr	r3, [pc, #220]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a36      	ldr	r2, [pc, #216]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bf1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf24:	f7fc fb98 	bl	8008658 <HAL_GetTick>
 800bf28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf2a:	e008      	b.n	800bf3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf2c:	f7fc fb94 	bl	8008658 <HAL_GetTick>
 800bf30:	4602      	mov	r2, r0
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d901      	bls.n	800bf3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	e218      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf3e:	4b2e      	ldr	r3, [pc, #184]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d1f0      	bne.n	800bf2c <HAL_RCC_OscConfig+0x1e0>
 800bf4a:	e000      	b.n	800bf4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bf4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 0308 	and.w	r3, r3, #8
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d03c      	beq.n	800bfd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d01c      	beq.n	800bf9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf62:	4b25      	ldr	r3, [pc, #148]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bf64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf68:	4a23      	ldr	r2, [pc, #140]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bf6a:	f043 0301 	orr.w	r3, r3, #1
 800bf6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf72:	f7fc fb71 	bl	8008658 <HAL_GetTick>
 800bf76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bf78:	e008      	b.n	800bf8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf7a:	f7fc fb6d 	bl	8008658 <HAL_GetTick>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d901      	bls.n	800bf8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	e1f1      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bf8c:	4b1a      	ldr	r3, [pc, #104]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bf8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf92:	f003 0302 	and.w	r3, r3, #2
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d0ef      	beq.n	800bf7a <HAL_RCC_OscConfig+0x22e>
 800bf9a:	e01b      	b.n	800bfd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bf9c:	4b16      	ldr	r3, [pc, #88]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bf9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfa2:	4a15      	ldr	r2, [pc, #84]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bfa4:	f023 0301 	bic.w	r3, r3, #1
 800bfa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfac:	f7fc fb54 	bl	8008658 <HAL_GetTick>
 800bfb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bfb2:	e008      	b.n	800bfc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfb4:	f7fc fb50 	bl	8008658 <HAL_GetTick>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d901      	bls.n	800bfc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	e1d4      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bfc6:	4b0c      	ldr	r3, [pc, #48]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bfc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfcc:	f003 0302 	and.w	r3, r3, #2
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1ef      	bne.n	800bfb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0304 	and.w	r3, r3, #4
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 80ab 	beq.w	800c138 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bfe6:	4b04      	ldr	r3, [pc, #16]	; (800bff8 <HAL_RCC_OscConfig+0x2ac>)
 800bfe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d106      	bne.n	800c000 <HAL_RCC_OscConfig+0x2b4>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e005      	b.n	800c002 <HAL_RCC_OscConfig+0x2b6>
 800bff6:	bf00      	nop
 800bff8:	40021000 	.word	0x40021000
 800bffc:	20000c34 	.word	0x20000c34
 800c000:	2300      	movs	r3, #0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00d      	beq.n	800c022 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c006:	4baf      	ldr	r3, [pc, #700]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c00a:	4aae      	ldr	r2, [pc, #696]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c00c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c010:	6593      	str	r3, [r2, #88]	; 0x58
 800c012:	4bac      	ldr	r3, [pc, #688]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c01e:	2301      	movs	r3, #1
 800c020:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c022:	4ba9      	ldr	r3, [pc, #676]	; (800c2c8 <HAL_RCC_OscConfig+0x57c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d118      	bne.n	800c060 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c02e:	4ba6      	ldr	r3, [pc, #664]	; (800c2c8 <HAL_RCC_OscConfig+0x57c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4aa5      	ldr	r2, [pc, #660]	; (800c2c8 <HAL_RCC_OscConfig+0x57c>)
 800c034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c03a:	f7fc fb0d 	bl	8008658 <HAL_GetTick>
 800c03e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c040:	e008      	b.n	800c054 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c042:	f7fc fb09 	bl	8008658 <HAL_GetTick>
 800c046:	4602      	mov	r2, r0
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d901      	bls.n	800c054 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c050:	2303      	movs	r3, #3
 800c052:	e18d      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c054:	4b9c      	ldr	r3, [pc, #624]	; (800c2c8 <HAL_RCC_OscConfig+0x57c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d0f0      	beq.n	800c042 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d108      	bne.n	800c07a <HAL_RCC_OscConfig+0x32e>
 800c068:	4b96      	ldr	r3, [pc, #600]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c06e:	4a95      	ldr	r2, [pc, #596]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c070:	f043 0301 	orr.w	r3, r3, #1
 800c074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c078:	e024      	b.n	800c0c4 <HAL_RCC_OscConfig+0x378>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	2b05      	cmp	r3, #5
 800c080:	d110      	bne.n	800c0a4 <HAL_RCC_OscConfig+0x358>
 800c082:	4b90      	ldr	r3, [pc, #576]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c088:	4a8e      	ldr	r2, [pc, #568]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c08a:	f043 0304 	orr.w	r3, r3, #4
 800c08e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c092:	4b8c      	ldr	r3, [pc, #560]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c098:	4a8a      	ldr	r2, [pc, #552]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c09a:	f043 0301 	orr.w	r3, r3, #1
 800c09e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c0a2:	e00f      	b.n	800c0c4 <HAL_RCC_OscConfig+0x378>
 800c0a4:	4b87      	ldr	r3, [pc, #540]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0aa:	4a86      	ldr	r2, [pc, #536]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c0ac:	f023 0301 	bic.w	r3, r3, #1
 800c0b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c0b4:	4b83      	ldr	r3, [pc, #524]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ba:	4a82      	ldr	r2, [pc, #520]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c0bc:	f023 0304 	bic.w	r3, r3, #4
 800c0c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d016      	beq.n	800c0fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0cc:	f7fc fac4 	bl	8008658 <HAL_GetTick>
 800c0d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c0d2:	e00a      	b.n	800c0ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0d4:	f7fc fac0 	bl	8008658 <HAL_GetTick>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d901      	bls.n	800c0ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	e142      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c0ea:	4b76      	ldr	r3, [pc, #472]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0f0:	f003 0302 	and.w	r3, r3, #2
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d0ed      	beq.n	800c0d4 <HAL_RCC_OscConfig+0x388>
 800c0f8:	e015      	b.n	800c126 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0fa:	f7fc faad 	bl	8008658 <HAL_GetTick>
 800c0fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c100:	e00a      	b.n	800c118 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c102:	f7fc faa9 	bl	8008658 <HAL_GetTick>
 800c106:	4602      	mov	r2, r0
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c110:	4293      	cmp	r3, r2
 800c112:	d901      	bls.n	800c118 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e12b      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c118:	4b6a      	ldr	r3, [pc, #424]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c11e:	f003 0302 	and.w	r3, r3, #2
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1ed      	bne.n	800c102 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c126:	7ffb      	ldrb	r3, [r7, #31]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d105      	bne.n	800c138 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c12c:	4b65      	ldr	r3, [pc, #404]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c130:	4a64      	ldr	r2, [pc, #400]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c136:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0320 	and.w	r3, r3, #32
 800c140:	2b00      	cmp	r3, #0
 800c142:	d03c      	beq.n	800c1be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d01c      	beq.n	800c186 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c14c:	4b5d      	ldr	r3, [pc, #372]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c14e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c152:	4a5c      	ldr	r2, [pc, #368]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c154:	f043 0301 	orr.w	r3, r3, #1
 800c158:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c15c:	f7fc fa7c 	bl	8008658 <HAL_GetTick>
 800c160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c162:	e008      	b.n	800c176 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c164:	f7fc fa78 	bl	8008658 <HAL_GetTick>
 800c168:	4602      	mov	r2, r0
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d901      	bls.n	800c176 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e0fc      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c176:	4b53      	ldr	r3, [pc, #332]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c17c:	f003 0302 	and.w	r3, r3, #2
 800c180:	2b00      	cmp	r3, #0
 800c182:	d0ef      	beq.n	800c164 <HAL_RCC_OscConfig+0x418>
 800c184:	e01b      	b.n	800c1be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c186:	4b4f      	ldr	r3, [pc, #316]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c18c:	4a4d      	ldr	r2, [pc, #308]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c18e:	f023 0301 	bic.w	r3, r3, #1
 800c192:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c196:	f7fc fa5f 	bl	8008658 <HAL_GetTick>
 800c19a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c19c:	e008      	b.n	800c1b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c19e:	f7fc fa5b 	bl	8008658 <HAL_GetTick>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d901      	bls.n	800c1b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	e0df      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c1b0:	4b44      	ldr	r3, [pc, #272]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c1b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1b6:	f003 0302 	and.w	r3, r3, #2
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1ef      	bne.n	800c19e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 80d3 	beq.w	800c36e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c1c8:	4b3e      	ldr	r3, [pc, #248]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	f003 030c 	and.w	r3, r3, #12
 800c1d0:	2b0c      	cmp	r3, #12
 800c1d2:	f000 808d 	beq.w	800c2f0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	69db      	ldr	r3, [r3, #28]
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d15a      	bne.n	800c294 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1de:	4b39      	ldr	r3, [pc, #228]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a38      	ldr	r2, [pc, #224]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c1e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c1e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1ea:	f7fc fa35 	bl	8008658 <HAL_GetTick>
 800c1ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c1f0:	e008      	b.n	800c204 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1f2:	f7fc fa31 	bl	8008658 <HAL_GetTick>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d901      	bls.n	800c204 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800c200:	2303      	movs	r3, #3
 800c202:	e0b5      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c204:	4b2f      	ldr	r3, [pc, #188]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1f0      	bne.n	800c1f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c210:	4b2c      	ldr	r3, [pc, #176]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c212:	68da      	ldr	r2, [r3, #12]
 800c214:	4b2d      	ldr	r3, [pc, #180]	; (800c2cc <HAL_RCC_OscConfig+0x580>)
 800c216:	4013      	ands	r3, r2
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	6a11      	ldr	r1, [r2, #32]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c220:	3a01      	subs	r2, #1
 800c222:	0112      	lsls	r2, r2, #4
 800c224:	4311      	orrs	r1, r2
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c22a:	0212      	lsls	r2, r2, #8
 800c22c:	4311      	orrs	r1, r2
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c232:	0852      	lsrs	r2, r2, #1
 800c234:	3a01      	subs	r2, #1
 800c236:	0552      	lsls	r2, r2, #21
 800c238:	4311      	orrs	r1, r2
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c23e:	0852      	lsrs	r2, r2, #1
 800c240:	3a01      	subs	r2, #1
 800c242:	0652      	lsls	r2, r2, #25
 800c244:	4311      	orrs	r1, r2
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c24a:	06d2      	lsls	r2, r2, #27
 800c24c:	430a      	orrs	r2, r1
 800c24e:	491d      	ldr	r1, [pc, #116]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c250:	4313      	orrs	r3, r2
 800c252:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c254:	4b1b      	ldr	r3, [pc, #108]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a1a      	ldr	r2, [pc, #104]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c25a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c25e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c260:	4b18      	ldr	r3, [pc, #96]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	4a17      	ldr	r2, [pc, #92]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c26a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c26c:	f7fc f9f4 	bl	8008658 <HAL_GetTick>
 800c270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c272:	e008      	b.n	800c286 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c274:	f7fc f9f0 	bl	8008658 <HAL_GetTick>
 800c278:	4602      	mov	r2, r0
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d901      	bls.n	800c286 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e074      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c286:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d0f0      	beq.n	800c274 <HAL_RCC_OscConfig+0x528>
 800c292:	e06c      	b.n	800c36e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c294:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a0a      	ldr	r2, [pc, #40]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c29a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c29e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c2a0:	4b08      	ldr	r3, [pc, #32]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	4a07      	ldr	r2, [pc, #28]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c2a6:	f023 0303 	bic.w	r3, r3, #3
 800c2aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c2ac:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	4a04      	ldr	r2, [pc, #16]	; (800c2c4 <HAL_RCC_OscConfig+0x578>)
 800c2b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c2b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2bc:	f7fc f9cc 	bl	8008658 <HAL_GetTick>
 800c2c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c2c2:	e00e      	b.n	800c2e2 <HAL_RCC_OscConfig+0x596>
 800c2c4:	40021000 	.word	0x40021000
 800c2c8:	40007000 	.word	0x40007000
 800c2cc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2d0:	f7fc f9c2 	bl	8008658 <HAL_GetTick>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d901      	bls.n	800c2e2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	e046      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c2e2:	4b25      	ldr	r3, [pc, #148]	; (800c378 <HAL_RCC_OscConfig+0x62c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1f0      	bne.n	800c2d0 <HAL_RCC_OscConfig+0x584>
 800c2ee:	e03e      	b.n	800c36e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	69db      	ldr	r3, [r3, #28]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d101      	bne.n	800c2fc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e039      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c2fc:	4b1e      	ldr	r3, [pc, #120]	; (800c378 <HAL_RCC_OscConfig+0x62c>)
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f003 0203 	and.w	r2, r3, #3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d12c      	bne.n	800c36a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31a:	3b01      	subs	r3, #1
 800c31c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c31e:	429a      	cmp	r2, r3
 800c320:	d123      	bne.n	800c36a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c32e:	429a      	cmp	r2, r3
 800c330:	d11b      	bne.n	800c36a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c33e:	429a      	cmp	r2, r3
 800c340:	d113      	bne.n	800c36a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c34c:	085b      	lsrs	r3, r3, #1
 800c34e:	3b01      	subs	r3, #1
 800c350:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c352:	429a      	cmp	r2, r3
 800c354:	d109      	bne.n	800c36a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c360:	085b      	lsrs	r3, r3, #1
 800c362:	3b01      	subs	r3, #1
 800c364:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c366:	429a      	cmp	r2, r3
 800c368:	d001      	beq.n	800c36e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e000      	b.n	800c370 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3720      	adds	r7, #32
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	40021000 	.word	0x40021000

0800c37c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c386:	2300      	movs	r3, #0
 800c388:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d101      	bne.n	800c394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	e11e      	b.n	800c5d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c394:	4b91      	ldr	r3, [pc, #580]	; (800c5dc <HAL_RCC_ClockConfig+0x260>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 030f 	and.w	r3, r3, #15
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d910      	bls.n	800c3c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3a2:	4b8e      	ldr	r3, [pc, #568]	; (800c5dc <HAL_RCC_ClockConfig+0x260>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f023 020f 	bic.w	r2, r3, #15
 800c3aa:	498c      	ldr	r1, [pc, #560]	; (800c5dc <HAL_RCC_ClockConfig+0x260>)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3b2:	4b8a      	ldr	r3, [pc, #552]	; (800c5dc <HAL_RCC_ClockConfig+0x260>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f003 030f 	and.w	r3, r3, #15
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d001      	beq.n	800c3c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e106      	b.n	800c5d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 0301 	and.w	r3, r3, #1
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d073      	beq.n	800c4b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	2b03      	cmp	r3, #3
 800c3d6:	d129      	bne.n	800c42c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3d8:	4b81      	ldr	r3, [pc, #516]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e0f4      	b.n	800c5d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c3e8:	f000 f972 	bl	800c6d0 <RCC_GetSysClockFreqFromPLLSource>
 800c3ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	4a7c      	ldr	r2, [pc, #496]	; (800c5e4 <HAL_RCC_ClockConfig+0x268>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d93f      	bls.n	800c476 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c3f6:	4b7a      	ldr	r3, [pc, #488]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d009      	beq.n	800c416 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d033      	beq.n	800c476 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c412:	2b00      	cmp	r3, #0
 800c414:	d12f      	bne.n	800c476 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c416:	4b72      	ldr	r3, [pc, #456]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c41e:	4a70      	ldr	r2, [pc, #448]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c424:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c426:	2380      	movs	r3, #128	; 0x80
 800c428:	617b      	str	r3, [r7, #20]
 800c42a:	e024      	b.n	800c476 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	2b02      	cmp	r3, #2
 800c432:	d107      	bne.n	800c444 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c434:	4b6a      	ldr	r3, [pc, #424]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d109      	bne.n	800c454 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	e0c6      	b.n	800c5d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c444:	4b66      	ldr	r3, [pc, #408]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	e0be      	b.n	800c5d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c454:	f000 f8ce 	bl	800c5f4 <HAL_RCC_GetSysClockFreq>
 800c458:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	4a61      	ldr	r2, [pc, #388]	; (800c5e4 <HAL_RCC_ClockConfig+0x268>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d909      	bls.n	800c476 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c462:	4b5f      	ldr	r3, [pc, #380]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c46a:	4a5d      	ldr	r2, [pc, #372]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c470:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c472:	2380      	movs	r3, #128	; 0x80
 800c474:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c476:	4b5a      	ldr	r3, [pc, #360]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	f023 0203 	bic.w	r2, r3, #3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	4957      	ldr	r1, [pc, #348]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c484:	4313      	orrs	r3, r2
 800c486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c488:	f7fc f8e6 	bl	8008658 <HAL_GetTick>
 800c48c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c48e:	e00a      	b.n	800c4a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c490:	f7fc f8e2 	bl	8008658 <HAL_GetTick>
 800c494:	4602      	mov	r2, r0
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d901      	bls.n	800c4a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	e095      	b.n	800c5d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4a6:	4b4e      	ldr	r3, [pc, #312]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	f003 020c 	and.w	r2, r3, #12
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d1eb      	bne.n	800c490 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d023      	beq.n	800c50c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 0304 	and.w	r3, r3, #4
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d005      	beq.n	800c4dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c4d0:	4b43      	ldr	r3, [pc, #268]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	4a42      	ldr	r2, [pc, #264]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c4d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c4da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0308 	and.w	r3, r3, #8
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d007      	beq.n	800c4f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800c4e8:	4b3d      	ldr	r3, [pc, #244]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c4f0:	4a3b      	ldr	r2, [pc, #236]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c4f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c4f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4f8:	4b39      	ldr	r3, [pc, #228]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	4936      	ldr	r1, [pc, #216]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c506:	4313      	orrs	r3, r2
 800c508:	608b      	str	r3, [r1, #8]
 800c50a:	e008      	b.n	800c51e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	2b80      	cmp	r3, #128	; 0x80
 800c510:	d105      	bne.n	800c51e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800c512:	4b33      	ldr	r3, [pc, #204]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	4a32      	ldr	r2, [pc, #200]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c51c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c51e:	4b2f      	ldr	r3, [pc, #188]	; (800c5dc <HAL_RCC_ClockConfig+0x260>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 030f 	and.w	r3, r3, #15
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d21d      	bcs.n	800c568 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c52c:	4b2b      	ldr	r3, [pc, #172]	; (800c5dc <HAL_RCC_ClockConfig+0x260>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f023 020f 	bic.w	r2, r3, #15
 800c534:	4929      	ldr	r1, [pc, #164]	; (800c5dc <HAL_RCC_ClockConfig+0x260>)
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	4313      	orrs	r3, r2
 800c53a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c53c:	f7fc f88c 	bl	8008658 <HAL_GetTick>
 800c540:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c542:	e00a      	b.n	800c55a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c544:	f7fc f888 	bl	8008658 <HAL_GetTick>
 800c548:	4602      	mov	r2, r0
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c552:	4293      	cmp	r3, r2
 800c554:	d901      	bls.n	800c55a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800c556:	2303      	movs	r3, #3
 800c558:	e03b      	b.n	800c5d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c55a:	4b20      	ldr	r3, [pc, #128]	; (800c5dc <HAL_RCC_ClockConfig+0x260>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 030f 	and.w	r3, r3, #15
 800c562:	683a      	ldr	r2, [r7, #0]
 800c564:	429a      	cmp	r2, r3
 800c566:	d1ed      	bne.n	800c544 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0304 	and.w	r3, r3, #4
 800c570:	2b00      	cmp	r3, #0
 800c572:	d008      	beq.n	800c586 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c574:	4b1a      	ldr	r3, [pc, #104]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	4917      	ldr	r1, [pc, #92]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c582:	4313      	orrs	r3, r2
 800c584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0308 	and.w	r3, r3, #8
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d009      	beq.n	800c5a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c592:	4b13      	ldr	r3, [pc, #76]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	490f      	ldr	r1, [pc, #60]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c5a6:	f000 f825 	bl	800c5f4 <HAL_RCC_GetSysClockFreq>
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4b0c      	ldr	r3, [pc, #48]	; (800c5e0 <HAL_RCC_ClockConfig+0x264>)
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	091b      	lsrs	r3, r3, #4
 800c5b2:	f003 030f 	and.w	r3, r3, #15
 800c5b6:	4a0c      	ldr	r2, [pc, #48]	; (800c5e8 <HAL_RCC_ClockConfig+0x26c>)
 800c5b8:	5cd3      	ldrb	r3, [r2, r3]
 800c5ba:	f003 031f 	and.w	r3, r3, #31
 800c5be:	fa21 f303 	lsr.w	r3, r1, r3
 800c5c2:	4a0a      	ldr	r2, [pc, #40]	; (800c5ec <HAL_RCC_ClockConfig+0x270>)
 800c5c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c5c6:	4b0a      	ldr	r3, [pc, #40]	; (800c5f0 <HAL_RCC_ClockConfig+0x274>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fb fff8 	bl	80085c0 <HAL_InitTick>
 800c5d0:	4603      	mov	r3, r0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	40022000 	.word	0x40022000
 800c5e0:	40021000 	.word	0x40021000
 800c5e4:	04c4b400 	.word	0x04c4b400
 800c5e8:	08014fa0 	.word	0x08014fa0
 800c5ec:	20000c30 	.word	0x20000c30
 800c5f0:	20000c34 	.word	0x20000c34

0800c5f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c5fa:	4b2c      	ldr	r3, [pc, #176]	; (800c6ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	f003 030c 	and.w	r3, r3, #12
 800c602:	2b04      	cmp	r3, #4
 800c604:	d102      	bne.n	800c60c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c606:	4b2a      	ldr	r3, [pc, #168]	; (800c6b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c608:	613b      	str	r3, [r7, #16]
 800c60a:	e047      	b.n	800c69c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c60c:	4b27      	ldr	r3, [pc, #156]	; (800c6ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f003 030c 	and.w	r3, r3, #12
 800c614:	2b08      	cmp	r3, #8
 800c616:	d102      	bne.n	800c61e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c618:	4b26      	ldr	r3, [pc, #152]	; (800c6b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c61a:	613b      	str	r3, [r7, #16]
 800c61c:	e03e      	b.n	800c69c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c61e:	4b23      	ldr	r3, [pc, #140]	; (800c6ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	f003 030c 	and.w	r3, r3, #12
 800c626:	2b0c      	cmp	r3, #12
 800c628:	d136      	bne.n	800c698 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c62a:	4b20      	ldr	r3, [pc, #128]	; (800c6ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	f003 0303 	and.w	r3, r3, #3
 800c632:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c634:	4b1d      	ldr	r3, [pc, #116]	; (800c6ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	091b      	lsrs	r3, r3, #4
 800c63a:	f003 030f 	and.w	r3, r3, #15
 800c63e:	3301      	adds	r3, #1
 800c640:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2b03      	cmp	r3, #3
 800c646:	d10c      	bne.n	800c662 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c648:	4a1a      	ldr	r2, [pc, #104]	; (800c6b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c650:	4a16      	ldr	r2, [pc, #88]	; (800c6ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800c652:	68d2      	ldr	r2, [r2, #12]
 800c654:	0a12      	lsrs	r2, r2, #8
 800c656:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c65a:	fb02 f303 	mul.w	r3, r2, r3
 800c65e:	617b      	str	r3, [r7, #20]
      break;
 800c660:	e00c      	b.n	800c67c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c662:	4a13      	ldr	r2, [pc, #76]	; (800c6b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	fbb2 f3f3 	udiv	r3, r2, r3
 800c66a:	4a10      	ldr	r2, [pc, #64]	; (800c6ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800c66c:	68d2      	ldr	r2, [r2, #12]
 800c66e:	0a12      	lsrs	r2, r2, #8
 800c670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c674:	fb02 f303 	mul.w	r3, r2, r3
 800c678:	617b      	str	r3, [r7, #20]
      break;
 800c67a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c67c:	4b0b      	ldr	r3, [pc, #44]	; (800c6ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	0e5b      	lsrs	r3, r3, #25
 800c682:	f003 0303 	and.w	r3, r3, #3
 800c686:	3301      	adds	r3, #1
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	fbb2 f3f3 	udiv	r3, r2, r3
 800c694:	613b      	str	r3, [r7, #16]
 800c696:	e001      	b.n	800c69c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c698:	2300      	movs	r3, #0
 800c69a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c69c:	693b      	ldr	r3, [r7, #16]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	371c      	adds	r7, #28
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	40021000 	.word	0x40021000
 800c6b0:	00f42400 	.word	0x00f42400
 800c6b4:	007a1200 	.word	0x007a1200

0800c6b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c6bc:	4b03      	ldr	r3, [pc, #12]	; (800c6cc <HAL_RCC_GetHCLKFreq+0x14>)
 800c6be:	681b      	ldr	r3, [r3, #0]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	20000c30 	.word	0x20000c30

0800c6d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b087      	sub	sp, #28
 800c6d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c6d6:	4b1e      	ldr	r3, [pc, #120]	; (800c750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	f003 0303 	and.w	r3, r3, #3
 800c6de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c6e0:	4b1b      	ldr	r3, [pc, #108]	; (800c750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	091b      	lsrs	r3, r3, #4
 800c6e6:	f003 030f 	and.w	r3, r3, #15
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	2b03      	cmp	r3, #3
 800c6f2:	d10c      	bne.n	800c70e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c6f4:	4a17      	ldr	r2, [pc, #92]	; (800c754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6fc:	4a14      	ldr	r2, [pc, #80]	; (800c750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c6fe:	68d2      	ldr	r2, [r2, #12]
 800c700:	0a12      	lsrs	r2, r2, #8
 800c702:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c706:	fb02 f303 	mul.w	r3, r2, r3
 800c70a:	617b      	str	r3, [r7, #20]
    break;
 800c70c:	e00c      	b.n	800c728 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c70e:	4a12      	ldr	r2, [pc, #72]	; (800c758 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	fbb2 f3f3 	udiv	r3, r2, r3
 800c716:	4a0e      	ldr	r2, [pc, #56]	; (800c750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c718:	68d2      	ldr	r2, [r2, #12]
 800c71a:	0a12      	lsrs	r2, r2, #8
 800c71c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c720:	fb02 f303 	mul.w	r3, r2, r3
 800c724:	617b      	str	r3, [r7, #20]
    break;
 800c726:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c728:	4b09      	ldr	r3, [pc, #36]	; (800c750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	0e5b      	lsrs	r3, r3, #25
 800c72e:	f003 0303 	and.w	r3, r3, #3
 800c732:	3301      	adds	r3, #1
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c740:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c742:	687b      	ldr	r3, [r7, #4]
}
 800c744:	4618      	mov	r0, r3
 800c746:	371c      	adds	r7, #28
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	40021000 	.word	0x40021000
 800c754:	007a1200 	.word	0x007a1200
 800c758:	00f42400 	.word	0x00f42400

0800c75c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c764:	2300      	movs	r3, #0
 800c766:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c768:	2300      	movs	r3, #0
 800c76a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c774:	2b00      	cmp	r3, #0
 800c776:	f000 8098 	beq.w	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c77a:	2300      	movs	r3, #0
 800c77c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c77e:	4b43      	ldr	r3, [pc, #268]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10d      	bne.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c78a:	4b40      	ldr	r3, [pc, #256]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c78e:	4a3f      	ldr	r2, [pc, #252]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c794:	6593      	str	r3, [r2, #88]	; 0x58
 800c796:	4b3d      	ldr	r3, [pc, #244]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c79a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c79e:	60bb      	str	r3, [r7, #8]
 800c7a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c7a6:	4b3a      	ldr	r3, [pc, #232]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a39      	ldr	r2, [pc, #228]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c7ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c7b2:	f7fb ff51 	bl	8008658 <HAL_GetTick>
 800c7b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c7b8:	e009      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7ba:	f7fb ff4d 	bl	8008658 <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d902      	bls.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	74fb      	strb	r3, [r7, #19]
        break;
 800c7cc:	e005      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c7ce:	4b30      	ldr	r3, [pc, #192]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d0ef      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c7da:	7cfb      	ldrb	r3, [r7, #19]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d159      	bne.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c7e0:	4b2a      	ldr	r3, [pc, #168]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d01e      	beq.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d019      	beq.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c7fc:	4b23      	ldr	r3, [pc, #140]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c7fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c808:	4b20      	ldr	r3, [pc, #128]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c80e:	4a1f      	ldr	r2, [pc, #124]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c818:	4b1c      	ldr	r3, [pc, #112]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c81e:	4a1b      	ldr	r2, [pc, #108]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c828:	4a18      	ldr	r2, [pc, #96]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	f003 0301 	and.w	r3, r3, #1
 800c836:	2b00      	cmp	r3, #0
 800c838:	d016      	beq.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c83a:	f7fb ff0d 	bl	8008658 <HAL_GetTick>
 800c83e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c840:	e00b      	b.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c842:	f7fb ff09 	bl	8008658 <HAL_GetTick>
 800c846:	4602      	mov	r2, r0
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c850:	4293      	cmp	r3, r2
 800c852:	d902      	bls.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c854:	2303      	movs	r3, #3
 800c856:	74fb      	strb	r3, [r7, #19]
            break;
 800c858:	e006      	b.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c85a:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c860:	f003 0302 	and.w	r3, r3, #2
 800c864:	2b00      	cmp	r3, #0
 800c866:	d0ec      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c868:	7cfb      	ldrb	r3, [r7, #19]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10b      	bne.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c86e:	4b07      	ldr	r3, [pc, #28]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c87c:	4903      	ldr	r1, [pc, #12]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c87e:	4313      	orrs	r3, r2
 800c880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c884:	e008      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c886:	7cfb      	ldrb	r3, [r7, #19]
 800c888:	74bb      	strb	r3, [r7, #18]
 800c88a:	e005      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c88c:	40021000 	.word	0x40021000
 800c890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c894:	7cfb      	ldrb	r3, [r7, #19]
 800c896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c898:	7c7b      	ldrb	r3, [r7, #17]
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d105      	bne.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c89e:	4baf      	ldr	r3, [pc, #700]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8a2:	4aae      	ldr	r2, [pc, #696]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c8a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 0301 	and.w	r3, r3, #1
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00a      	beq.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c8b6:	4ba9      	ldr	r3, [pc, #676]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8bc:	f023 0203 	bic.w	r2, r3, #3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	49a5      	ldr	r1, [pc, #660]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0302 	and.w	r3, r3, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00a      	beq.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c8d8:	4ba0      	ldr	r3, [pc, #640]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8de:	f023 020c 	bic.w	r2, r3, #12
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	499d      	ldr	r1, [pc, #628]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f003 0304 	and.w	r3, r3, #4
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00a      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c8fa:	4b98      	ldr	r3, [pc, #608]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c900:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	4994      	ldr	r1, [pc, #592]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c90a:	4313      	orrs	r3, r2
 800c90c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 0308 	and.w	r3, r3, #8
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00a      	beq.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c91c:	4b8f      	ldr	r3, [pc, #572]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c91e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c922:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	498c      	ldr	r1, [pc, #560]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c92c:	4313      	orrs	r3, r2
 800c92e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 0310 	and.w	r3, r3, #16
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00a      	beq.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c93e:	4b87      	ldr	r3, [pc, #540]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	4983      	ldr	r1, [pc, #524]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c94e:	4313      	orrs	r3, r2
 800c950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f003 0320 	and.w	r3, r3, #32
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00a      	beq.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c960:	4b7e      	ldr	r3, [pc, #504]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c966:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	699b      	ldr	r3, [r3, #24]
 800c96e:	497b      	ldr	r1, [pc, #492]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c970:	4313      	orrs	r3, r2
 800c972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00a      	beq.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c982:	4b76      	ldr	r3, [pc, #472]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c988:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	69db      	ldr	r3, [r3, #28]
 800c990:	4972      	ldr	r1, [pc, #456]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c992:	4313      	orrs	r3, r2
 800c994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00a      	beq.n	800c9ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c9a4:	4b6d      	ldr	r3, [pc, #436]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a1b      	ldr	r3, [r3, #32]
 800c9b2:	496a      	ldr	r1, [pc, #424]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00a      	beq.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c9c6:	4b65      	ldr	r3, [pc, #404]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d4:	4961      	ldr	r1, [pc, #388]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00a      	beq.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c9e8:	4b5c      	ldr	r3, [pc, #368]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c9ee:	f023 0203 	bic.w	r2, r3, #3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f6:	4959      	ldr	r1, [pc, #356]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00a      	beq.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ca0a:	4b54      	ldr	r3, [pc, #336]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	4950      	ldr	r1, [pc, #320]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d015      	beq.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ca2c:	4b4b      	ldr	r3, [pc, #300]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca3a:	4948      	ldr	r1, [pc, #288]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca4a:	d105      	bne.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ca4c:	4b43      	ldr	r3, [pc, #268]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	4a42      	ldr	r2, [pc, #264]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d015      	beq.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ca64:	4b3d      	ldr	r3, [pc, #244]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca72:	493a      	ldr	r1, [pc, #232]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca82:	d105      	bne.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ca84:	4b35      	ldr	r3, [pc, #212]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	4a34      	ldr	r2, [pc, #208]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d015      	beq.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ca9c:	4b2f      	ldr	r3, [pc, #188]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caaa:	492c      	ldr	r1, [pc, #176]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800caac:	4313      	orrs	r3, r2
 800caae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800caba:	d105      	bne.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cabc:	4b27      	ldr	r3, [pc, #156]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	4a26      	ldr	r2, [pc, #152]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cac6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d015      	beq.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cad4:	4b21      	ldr	r3, [pc, #132]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cada:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae2:	491e      	ldr	r1, [pc, #120]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cae4:	4313      	orrs	r3, r2
 800cae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800caf2:	d105      	bne.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800caf4:	4b19      	ldr	r3, [pc, #100]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	4a18      	ldr	r2, [pc, #96]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cafa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cafe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d015      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cb0c:	4b13      	ldr	r3, [pc, #76]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1a:	4910      	ldr	r1, [pc, #64]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb2a:	d105      	bne.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cb2c:	4b0b      	ldr	r3, [pc, #44]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	4a0a      	ldr	r2, [pc, #40]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d018      	beq.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800cb44:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb52:	4902      	ldr	r1, [pc, #8]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb54:	4313      	orrs	r3, r2
 800cb56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cb5a:	e001      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800cb5c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb68:	d105      	bne.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cb6a:	4b21      	ldr	r3, [pc, #132]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	4a20      	ldr	r2, [pc, #128]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cb70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb74:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d015      	beq.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800cb82:	4b1b      	ldr	r3, [pc, #108]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cb84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb88:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb90:	4917      	ldr	r1, [pc, #92]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cb92:	4313      	orrs	r3, r2
 800cb94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cba0:	d105      	bne.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cba2:	4b13      	ldr	r3, [pc, #76]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	4a12      	ldr	r2, [pc, #72]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbac:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d015      	beq.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cbba:	4b0d      	ldr	r3, [pc, #52]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cbbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cbc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbc8:	4909      	ldr	r1, [pc, #36]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbd8:	d105      	bne.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cbda:	4b05      	ldr	r3, [pc, #20]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	4a04      	ldr	r2, [pc, #16]	; (800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cbe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbe4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800cbe6:	7cbb      	ldrb	r3, [r7, #18]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	40021000 	.word	0x40021000

0800cbf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e084      	b.n	800cd10 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d106      	bne.n	800cc26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7fa ff01 	bl	8007a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2202      	movs	r2, #2
 800cc2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc3c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cc46:	d902      	bls.n	800cc4e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	60fb      	str	r3, [r7, #12]
 800cc4c:	e002      	b.n	800cc54 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cc4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc52:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800cc5c:	d007      	beq.n	800cc6e <HAL_SPI_Init+0x7a>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cc66:	d002      	beq.n	800cc6e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10b      	bne.n	800cc8e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cc7e:	d903      	bls.n	800cc88 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2202      	movs	r2, #2
 800cc84:	631a      	str	r2, [r3, #48]	; 0x30
 800cc86:	e002      	b.n	800cc8e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	431a      	orrs	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	691b      	ldr	r3, [r3, #16]
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	695b      	ldr	r3, [r3, #20]
 800cca2:	431a      	orrs	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	699b      	ldr	r3, [r3, #24]
 800cca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ccac:	431a      	orrs	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	69db      	ldr	r3, [r3, #28]
 800ccb2:	431a      	orrs	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a1b      	ldr	r3, [r3, #32]
 800ccb8:	ea42 0103 	orr.w	r1, r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	430a      	orrs	r2, r1
 800ccc6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	699b      	ldr	r3, [r3, #24]
 800cccc:	0c1b      	lsrs	r3, r3, #16
 800ccce:	f003 0204 	and.w	r2, r3, #4
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccdc:	431a      	orrs	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	ea42 0103 	orr.w	r1, r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	68fa      	ldr	r2, [r7, #12]
 800ccec:	430a      	orrs	r2, r1
 800ccee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	69da      	ldr	r2, [r3, #28]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ccfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d101      	bne.n	800cd2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e049      	b.n	800cdbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d106      	bne.n	800cd44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7fb fb48 	bl	80083d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2202      	movs	r2, #2
 800cd48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	3304      	adds	r3, #4
 800cd54:	4619      	mov	r1, r3
 800cd56:	4610      	mov	r0, r2
 800cd58:	f000 ff20 	bl	800db9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2201      	movs	r2, #1
 800cd78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2201      	movs	r2, #1
 800cd88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
	...

0800cdc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d001      	beq.n	800cde0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e019      	b.n	800ce14 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2202      	movs	r2, #2
 800cde4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689a      	ldr	r2, [r3, #8]
 800cdee:	4b0c      	ldr	r3, [pc, #48]	; (800ce20 <HAL_TIM_Base_Start+0x58>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b06      	cmp	r3, #6
 800cdf8:	d00b      	beq.n	800ce12 <HAL_TIM_Base_Start+0x4a>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce00:	d007      	beq.n	800ce12 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f042 0201 	orr.w	r2, r2, #1
 800ce10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	00010007 	.word	0x00010007

0800ce24 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	6a1a      	ldr	r2, [r3, #32]
 800ce32:	f241 1311 	movw	r3, #4369	; 0x1111
 800ce36:	4013      	ands	r3, r2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10f      	bne.n	800ce5c <HAL_TIM_Base_Stop+0x38>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6a1a      	ldr	r2, [r3, #32]
 800ce42:	f244 4344 	movw	r3, #17476	; 0x4444
 800ce46:	4013      	ands	r3, r2
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d107      	bne.n	800ce5c <HAL_TIM_Base_Stop+0x38>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f022 0201 	bic.w	r2, r2, #1
 800ce5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
	...

0800ce74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d001      	beq.n	800ce8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e021      	b.n	800ced0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2202      	movs	r2, #2
 800ce90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68da      	ldr	r2, [r3, #12]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f042 0201 	orr.w	r2, r2, #1
 800cea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	689a      	ldr	r2, [r3, #8]
 800ceaa:	4b0c      	ldr	r3, [pc, #48]	; (800cedc <HAL_TIM_Base_Start_IT+0x68>)
 800ceac:	4013      	ands	r3, r2
 800ceae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2b06      	cmp	r3, #6
 800ceb4:	d00b      	beq.n	800cece <HAL_TIM_Base_Start_IT+0x5a>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cebc:	d007      	beq.n	800cece <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f042 0201 	orr.w	r2, r2, #1
 800cecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3714      	adds	r7, #20
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr
 800cedc:	00010007 	.word	0x00010007

0800cee0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68da      	ldr	r2, [r3, #12]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f022 0201 	bic.w	r2, r2, #1
 800cef6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	6a1a      	ldr	r2, [r3, #32]
 800cefe:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf02:	4013      	ands	r3, r2
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10f      	bne.n	800cf28 <HAL_TIM_Base_Stop_IT+0x48>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6a1a      	ldr	r2, [r3, #32]
 800cf0e:	f244 4344 	movw	r3, #17476	; 0x4444
 800cf12:	4013      	ands	r3, r2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d107      	bne.n	800cf28 <HAL_TIM_Base_Stop_IT+0x48>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f022 0201 	bic.w	r2, r2, #1
 800cf26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	370c      	adds	r7, #12
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e049      	b.n	800cfe4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f841 	bl	800cfec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	f000 fe0d 	bl	800db9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <HAL_TIM_PWM_Start+0x24>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d016:	b2db      	uxtb	r3, r3
 800d018:	2b01      	cmp	r3, #1
 800d01a:	bf14      	ite	ne
 800d01c:	2301      	movne	r3, #1
 800d01e:	2300      	moveq	r3, #0
 800d020:	b2db      	uxtb	r3, r3
 800d022:	e03c      	b.n	800d09e <HAL_TIM_PWM_Start+0x9e>
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2b04      	cmp	r3, #4
 800d028:	d109      	bne.n	800d03e <HAL_TIM_PWM_Start+0x3e>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d030:	b2db      	uxtb	r3, r3
 800d032:	2b01      	cmp	r3, #1
 800d034:	bf14      	ite	ne
 800d036:	2301      	movne	r3, #1
 800d038:	2300      	moveq	r3, #0
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	e02f      	b.n	800d09e <HAL_TIM_PWM_Start+0x9e>
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	2b08      	cmp	r3, #8
 800d042:	d109      	bne.n	800d058 <HAL_TIM_PWM_Start+0x58>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	bf14      	ite	ne
 800d050:	2301      	movne	r3, #1
 800d052:	2300      	moveq	r3, #0
 800d054:	b2db      	uxtb	r3, r3
 800d056:	e022      	b.n	800d09e <HAL_TIM_PWM_Start+0x9e>
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	2b0c      	cmp	r3, #12
 800d05c:	d109      	bne.n	800d072 <HAL_TIM_PWM_Start+0x72>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d064:	b2db      	uxtb	r3, r3
 800d066:	2b01      	cmp	r3, #1
 800d068:	bf14      	ite	ne
 800d06a:	2301      	movne	r3, #1
 800d06c:	2300      	moveq	r3, #0
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	e015      	b.n	800d09e <HAL_TIM_PWM_Start+0x9e>
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b10      	cmp	r3, #16
 800d076:	d109      	bne.n	800d08c <HAL_TIM_PWM_Start+0x8c>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	2b01      	cmp	r3, #1
 800d082:	bf14      	ite	ne
 800d084:	2301      	movne	r3, #1
 800d086:	2300      	moveq	r3, #0
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	e008      	b.n	800d09e <HAL_TIM_PWM_Start+0x9e>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b01      	cmp	r3, #1
 800d096:	bf14      	ite	ne
 800d098:	2301      	movne	r3, #1
 800d09a:	2300      	moveq	r3, #0
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e073      	b.n	800d18e <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d104      	bne.n	800d0b6 <HAL_TIM_PWM_Start+0xb6>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2202      	movs	r2, #2
 800d0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0b4:	e023      	b.n	800d0fe <HAL_TIM_PWM_Start+0xfe>
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	2b04      	cmp	r3, #4
 800d0ba:	d104      	bne.n	800d0c6 <HAL_TIM_PWM_Start+0xc6>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2202      	movs	r2, #2
 800d0c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0c4:	e01b      	b.n	800d0fe <HAL_TIM_PWM_Start+0xfe>
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	2b08      	cmp	r3, #8
 800d0ca:	d104      	bne.n	800d0d6 <HAL_TIM_PWM_Start+0xd6>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0d4:	e013      	b.n	800d0fe <HAL_TIM_PWM_Start+0xfe>
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b0c      	cmp	r3, #12
 800d0da:	d104      	bne.n	800d0e6 <HAL_TIM_PWM_Start+0xe6>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2202      	movs	r2, #2
 800d0e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0e4:	e00b      	b.n	800d0fe <HAL_TIM_PWM_Start+0xfe>
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b10      	cmp	r3, #16
 800d0ea:	d104      	bne.n	800d0f6 <HAL_TIM_PWM_Start+0xf6>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0f4:	e003      	b.n	800d0fe <HAL_TIM_PWM_Start+0xfe>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2201      	movs	r2, #1
 800d104:	6839      	ldr	r1, [r7, #0]
 800d106:	4618      	mov	r0, r3
 800d108:	f001 f9b6 	bl	800e478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a21      	ldr	r2, [pc, #132]	; (800d198 <HAL_TIM_PWM_Start+0x198>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d018      	beq.n	800d148 <HAL_TIM_PWM_Start+0x148>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a20      	ldr	r2, [pc, #128]	; (800d19c <HAL_TIM_PWM_Start+0x19c>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d013      	beq.n	800d148 <HAL_TIM_PWM_Start+0x148>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a1e      	ldr	r2, [pc, #120]	; (800d1a0 <HAL_TIM_PWM_Start+0x1a0>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d00e      	beq.n	800d148 <HAL_TIM_PWM_Start+0x148>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a1d      	ldr	r2, [pc, #116]	; (800d1a4 <HAL_TIM_PWM_Start+0x1a4>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d009      	beq.n	800d148 <HAL_TIM_PWM_Start+0x148>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a1b      	ldr	r2, [pc, #108]	; (800d1a8 <HAL_TIM_PWM_Start+0x1a8>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d004      	beq.n	800d148 <HAL_TIM_PWM_Start+0x148>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4a1a      	ldr	r2, [pc, #104]	; (800d1ac <HAL_TIM_PWM_Start+0x1ac>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d101      	bne.n	800d14c <HAL_TIM_PWM_Start+0x14c>
 800d148:	2301      	movs	r3, #1
 800d14a:	e000      	b.n	800d14e <HAL_TIM_PWM_Start+0x14e>
 800d14c:	2300      	movs	r3, #0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d007      	beq.n	800d162 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d160:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	689a      	ldr	r2, [r3, #8]
 800d168:	4b11      	ldr	r3, [pc, #68]	; (800d1b0 <HAL_TIM_PWM_Start+0x1b0>)
 800d16a:	4013      	ands	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2b06      	cmp	r3, #6
 800d172:	d00b      	beq.n	800d18c <HAL_TIM_PWM_Start+0x18c>
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d17a:	d007      	beq.n	800d18c <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f042 0201 	orr.w	r2, r2, #1
 800d18a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	40012c00 	.word	0x40012c00
 800d19c:	40013400 	.word	0x40013400
 800d1a0:	40014000 	.word	0x40014000
 800d1a4:	40014400 	.word	0x40014400
 800d1a8:	40014800 	.word	0x40014800
 800d1ac:	40015000 	.word	0x40015000
 800d1b0:	00010007 	.word	0x00010007

0800d1b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f001 f956 	bl	800e478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a40      	ldr	r2, [pc, #256]	; (800d2d4 <HAL_TIM_PWM_Stop+0x120>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d018      	beq.n	800d208 <HAL_TIM_PWM_Stop+0x54>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a3f      	ldr	r2, [pc, #252]	; (800d2d8 <HAL_TIM_PWM_Stop+0x124>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d013      	beq.n	800d208 <HAL_TIM_PWM_Stop+0x54>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a3d      	ldr	r2, [pc, #244]	; (800d2dc <HAL_TIM_PWM_Stop+0x128>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d00e      	beq.n	800d208 <HAL_TIM_PWM_Stop+0x54>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a3c      	ldr	r2, [pc, #240]	; (800d2e0 <HAL_TIM_PWM_Stop+0x12c>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d009      	beq.n	800d208 <HAL_TIM_PWM_Stop+0x54>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a3a      	ldr	r2, [pc, #232]	; (800d2e4 <HAL_TIM_PWM_Stop+0x130>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d004      	beq.n	800d208 <HAL_TIM_PWM_Stop+0x54>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a39      	ldr	r2, [pc, #228]	; (800d2e8 <HAL_TIM_PWM_Stop+0x134>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d101      	bne.n	800d20c <HAL_TIM_PWM_Stop+0x58>
 800d208:	2301      	movs	r3, #1
 800d20a:	e000      	b.n	800d20e <HAL_TIM_PWM_Stop+0x5a>
 800d20c:	2300      	movs	r3, #0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d017      	beq.n	800d242 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	6a1a      	ldr	r2, [r3, #32]
 800d218:	f241 1311 	movw	r3, #4369	; 0x1111
 800d21c:	4013      	ands	r3, r2
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10f      	bne.n	800d242 <HAL_TIM_PWM_Stop+0x8e>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	6a1a      	ldr	r2, [r3, #32]
 800d228:	f244 4344 	movw	r3, #17476	; 0x4444
 800d22c:	4013      	ands	r3, r2
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d107      	bne.n	800d242 <HAL_TIM_PWM_Stop+0x8e>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d240:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6a1a      	ldr	r2, [r3, #32]
 800d248:	f241 1311 	movw	r3, #4369	; 0x1111
 800d24c:	4013      	ands	r3, r2
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10f      	bne.n	800d272 <HAL_TIM_PWM_Stop+0xbe>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	6a1a      	ldr	r2, [r3, #32]
 800d258:	f244 4344 	movw	r3, #17476	; 0x4444
 800d25c:	4013      	ands	r3, r2
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d107      	bne.n	800d272 <HAL_TIM_PWM_Stop+0xbe>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f022 0201 	bic.w	r2, r2, #1
 800d270:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d104      	bne.n	800d282 <HAL_TIM_PWM_Stop+0xce>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d280:	e023      	b.n	800d2ca <HAL_TIM_PWM_Stop+0x116>
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b04      	cmp	r3, #4
 800d286:	d104      	bne.n	800d292 <HAL_TIM_PWM_Stop+0xde>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d290:	e01b      	b.n	800d2ca <HAL_TIM_PWM_Stop+0x116>
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	2b08      	cmp	r3, #8
 800d296:	d104      	bne.n	800d2a2 <HAL_TIM_PWM_Stop+0xee>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2a0:	e013      	b.n	800d2ca <HAL_TIM_PWM_Stop+0x116>
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b0c      	cmp	r3, #12
 800d2a6:	d104      	bne.n	800d2b2 <HAL_TIM_PWM_Stop+0xfe>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2b0:	e00b      	b.n	800d2ca <HAL_TIM_PWM_Stop+0x116>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b10      	cmp	r3, #16
 800d2b6:	d104      	bne.n	800d2c2 <HAL_TIM_PWM_Stop+0x10e>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2c0:	e003      	b.n	800d2ca <HAL_TIM_PWM_Stop+0x116>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	40012c00 	.word	0x40012c00
 800d2d8:	40013400 	.word	0x40013400
 800d2dc:	40014000 	.word	0x40014000
 800d2e0:	40014400 	.word	0x40014400
 800d2e4:	40014800 	.word	0x40014800
 800d2e8:	40015000 	.word	0x40015000

0800d2ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b086      	sub	sp, #24
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e097      	b.n	800d430 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d306:	b2db      	uxtb	r3, r3
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d106      	bne.n	800d31a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7fb f809 	bl	800832c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2202      	movs	r2, #2
 800d31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	6812      	ldr	r2, [r2, #0]
 800d32c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d330:	f023 0307 	bic.w	r3, r3, #7
 800d334:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3304      	adds	r3, #4
 800d33e:	4619      	mov	r1, r3
 800d340:	4610      	mov	r0, r2
 800d342:	f000 fc2b 	bl	800db9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	6a1b      	ldr	r3, [r3, #32]
 800d35c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	4313      	orrs	r3, r2
 800d366:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d36e:	f023 0303 	bic.w	r3, r3, #3
 800d372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	689a      	ldr	r2, [r3, #8]
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	021b      	lsls	r3, r3, #8
 800d37e:	4313      	orrs	r3, r2
 800d380:	693a      	ldr	r2, [r7, #16]
 800d382:	4313      	orrs	r3, r2
 800d384:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d38c:	f023 030c 	bic.w	r3, r3, #12
 800d390:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d39c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	021b      	lsls	r3, r3, #8
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	693a      	ldr	r2, [r7, #16]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	011a      	lsls	r2, r3, #4
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	6a1b      	ldr	r3, [r3, #32]
 800d3ba:	031b      	lsls	r3, r3, #12
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	693a      	ldr	r2, [r7, #16]
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d3ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d3d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	685a      	ldr	r2, [r3, #4]
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	695b      	ldr	r3, [r3, #20]
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	697a      	ldr	r2, [r7, #20]
 800d3ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2201      	movs	r2, #1
 800d40a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3718      	adds	r7, #24
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	f003 0302 	and.w	r3, r3, #2
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d122      	bne.n	800d494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	f003 0302 	and.w	r3, r3, #2
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d11b      	bne.n	800d494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f06f 0202 	mvn.w	r2, #2
 800d464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2201      	movs	r2, #1
 800d46a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	f003 0303 	and.w	r3, r3, #3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fb70 	bl	800db60 <HAL_TIM_IC_CaptureCallback>
 800d480:	e005      	b.n	800d48e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fb62 	bl	800db4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fb73 	bl	800db74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	f003 0304 	and.w	r3, r3, #4
 800d49e:	2b04      	cmp	r3, #4
 800d4a0:	d122      	bne.n	800d4e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	f003 0304 	and.w	r3, r3, #4
 800d4ac:	2b04      	cmp	r3, #4
 800d4ae:	d11b      	bne.n	800d4e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f06f 0204 	mvn.w	r2, #4
 800d4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2202      	movs	r2, #2
 800d4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	699b      	ldr	r3, [r3, #24]
 800d4c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d003      	beq.n	800d4d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fb46 	bl	800db60 <HAL_TIM_IC_CaptureCallback>
 800d4d4:	e005      	b.n	800d4e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fb38 	bl	800db4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 fb49 	bl	800db74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	691b      	ldr	r3, [r3, #16]
 800d4ee:	f003 0308 	and.w	r3, r3, #8
 800d4f2:	2b08      	cmp	r3, #8
 800d4f4:	d122      	bne.n	800d53c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	f003 0308 	and.w	r3, r3, #8
 800d500:	2b08      	cmp	r3, #8
 800d502:	d11b      	bne.n	800d53c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f06f 0208 	mvn.w	r2, #8
 800d50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2204      	movs	r2, #4
 800d512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	69db      	ldr	r3, [r3, #28]
 800d51a:	f003 0303 	and.w	r3, r3, #3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d003      	beq.n	800d52a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fb1c 	bl	800db60 <HAL_TIM_IC_CaptureCallback>
 800d528:	e005      	b.n	800d536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fb0e 	bl	800db4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 fb1f 	bl	800db74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	691b      	ldr	r3, [r3, #16]
 800d542:	f003 0310 	and.w	r3, r3, #16
 800d546:	2b10      	cmp	r3, #16
 800d548:	d122      	bne.n	800d590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	f003 0310 	and.w	r3, r3, #16
 800d554:	2b10      	cmp	r3, #16
 800d556:	d11b      	bne.n	800d590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f06f 0210 	mvn.w	r2, #16
 800d560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2208      	movs	r2, #8
 800d566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	69db      	ldr	r3, [r3, #28]
 800d56e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d572:	2b00      	cmp	r3, #0
 800d574:	d003      	beq.n	800d57e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 faf2 	bl	800db60 <HAL_TIM_IC_CaptureCallback>
 800d57c:	e005      	b.n	800d58a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fae4 	bl	800db4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 faf5 	bl	800db74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	f003 0301 	and.w	r3, r3, #1
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d10e      	bne.n	800d5bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	f003 0301 	and.w	r3, r3, #1
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d107      	bne.n	800d5bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f06f 0201 	mvn.w	r2, #1
 800d5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 fabe 	bl	800db38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5c6:	2b80      	cmp	r3, #128	; 0x80
 800d5c8:	d10e      	bne.n	800d5e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5d4:	2b80      	cmp	r3, #128	; 0x80
 800d5d6:	d107      	bne.n	800d5e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d5e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f001 f8c0 	bl	800e768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5f6:	d10e      	bne.n	800d616 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d602:	2b80      	cmp	r3, #128	; 0x80
 800d604:	d107      	bne.n	800d616 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f001 f8b3 	bl	800e77c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d620:	2b40      	cmp	r3, #64	; 0x40
 800d622:	d10e      	bne.n	800d642 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d62e:	2b40      	cmp	r3, #64	; 0x40
 800d630:	d107      	bne.n	800d642 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 faa3 	bl	800db88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	f003 0320 	and.w	r3, r3, #32
 800d64c:	2b20      	cmp	r3, #32
 800d64e:	d10e      	bne.n	800d66e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	f003 0320 	and.w	r3, r3, #32
 800d65a:	2b20      	cmp	r3, #32
 800d65c:	d107      	bne.n	800d66e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f06f 0220 	mvn.w	r2, #32
 800d666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f001 f873 	bl	800e754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d67c:	d10f      	bne.n	800d69e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d68c:	d107      	bne.n	800d69e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f001 f879 	bl	800e790 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d6a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6ac:	d10f      	bne.n	800d6ce <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d6b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6bc:	d107      	bne.n	800d6ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d6c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f001 f86b 	bl	800e7a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6dc:	d10f      	bne.n	800d6fe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6ec:	d107      	bne.n	800d6fe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d6f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f001 f85d 	bl	800e7b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d708:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d70c:	d10f      	bne.n	800d72e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d718:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d71c:	d107      	bne.n	800d72e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f001 f84f 	bl	800e7cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d72e:	bf00      	nop
 800d730:	3708      	adds	r7, #8
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
	...

0800d738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d101      	bne.n	800d752 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d74e:	2302      	movs	r3, #2
 800d750:	e0fd      	b.n	800d94e <HAL_TIM_PWM_ConfigChannel+0x216>
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b14      	cmp	r3, #20
 800d75e:	f200 80f0 	bhi.w	800d942 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800d762:	a201      	add	r2, pc, #4	; (adr r2, 800d768 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d768:	0800d7bd 	.word	0x0800d7bd
 800d76c:	0800d943 	.word	0x0800d943
 800d770:	0800d943 	.word	0x0800d943
 800d774:	0800d943 	.word	0x0800d943
 800d778:	0800d7fd 	.word	0x0800d7fd
 800d77c:	0800d943 	.word	0x0800d943
 800d780:	0800d943 	.word	0x0800d943
 800d784:	0800d943 	.word	0x0800d943
 800d788:	0800d83f 	.word	0x0800d83f
 800d78c:	0800d943 	.word	0x0800d943
 800d790:	0800d943 	.word	0x0800d943
 800d794:	0800d943 	.word	0x0800d943
 800d798:	0800d87f 	.word	0x0800d87f
 800d79c:	0800d943 	.word	0x0800d943
 800d7a0:	0800d943 	.word	0x0800d943
 800d7a4:	0800d943 	.word	0x0800d943
 800d7a8:	0800d8c1 	.word	0x0800d8c1
 800d7ac:	0800d943 	.word	0x0800d943
 800d7b0:	0800d943 	.word	0x0800d943
 800d7b4:	0800d943 	.word	0x0800d943
 800d7b8:	0800d901 	.word	0x0800d901
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	68b9      	ldr	r1, [r7, #8]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fa92 	bl	800dcec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	699a      	ldr	r2, [r3, #24]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f042 0208 	orr.w	r2, r2, #8
 800d7d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	699a      	ldr	r2, [r3, #24]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f022 0204 	bic.w	r2, r2, #4
 800d7e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	6999      	ldr	r1, [r3, #24]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	691a      	ldr	r2, [r3, #16]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	430a      	orrs	r2, r1
 800d7f8:	619a      	str	r2, [r3, #24]
      break;
 800d7fa:	e0a3      	b.n	800d944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68b9      	ldr	r1, [r7, #8]
 800d802:	4618      	mov	r0, r3
 800d804:	f000 fb0c 	bl	800de20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	699a      	ldr	r2, [r3, #24]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	699a      	ldr	r2, [r3, #24]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	6999      	ldr	r1, [r3, #24]
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	021a      	lsls	r2, r3, #8
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	430a      	orrs	r2, r1
 800d83a:	619a      	str	r2, [r3, #24]
      break;
 800d83c:	e082      	b.n	800d944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68b9      	ldr	r1, [r7, #8]
 800d844:	4618      	mov	r0, r3
 800d846:	f000 fb7f 	bl	800df48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	69da      	ldr	r2, [r3, #28]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f042 0208 	orr.w	r2, r2, #8
 800d858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	69da      	ldr	r2, [r3, #28]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f022 0204 	bic.w	r2, r2, #4
 800d868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	69d9      	ldr	r1, [r3, #28]
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	691a      	ldr	r2, [r3, #16]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	430a      	orrs	r2, r1
 800d87a:	61da      	str	r2, [r3, #28]
      break;
 800d87c:	e062      	b.n	800d944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	68b9      	ldr	r1, [r7, #8]
 800d884:	4618      	mov	r0, r3
 800d886:	f000 fbf1 	bl	800e06c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	69da      	ldr	r2, [r3, #28]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	69da      	ldr	r2, [r3, #28]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	69d9      	ldr	r1, [r3, #28]
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	021a      	lsls	r2, r3, #8
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	430a      	orrs	r2, r1
 800d8bc:	61da      	str	r2, [r3, #28]
      break;
 800d8be:	e041      	b.n	800d944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68b9      	ldr	r1, [r7, #8]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 fc64 	bl	800e194 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f042 0208 	orr.w	r2, r2, #8
 800d8da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f022 0204 	bic.w	r2, r2, #4
 800d8ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	691a      	ldr	r2, [r3, #16]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	430a      	orrs	r2, r1
 800d8fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d8fe:	e021      	b.n	800d944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	4618      	mov	r0, r3
 800d908:	f000 fcae 	bl	800e268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d91a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d92a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	691b      	ldr	r3, [r3, #16]
 800d936:	021a      	lsls	r2, r3, #8
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	430a      	orrs	r2, r1
 800d93e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d940:	e000      	b.n	800d944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800d942:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2200      	movs	r2, #0
 800d948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop

0800d958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d101      	bne.n	800d970 <HAL_TIM_ConfigClockSource+0x18>
 800d96c:	2302      	movs	r3, #2
 800d96e:	e0d2      	b.n	800db16 <HAL_TIM_ConfigClockSource+0x1be>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2202      	movs	r2, #2
 800d97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800d98e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d99a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9ac:	f000 80a9 	beq.w	800db02 <HAL_TIM_ConfigClockSource+0x1aa>
 800d9b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9b4:	d81a      	bhi.n	800d9ec <HAL_TIM_ConfigClockSource+0x94>
 800d9b6:	2b30      	cmp	r3, #48	; 0x30
 800d9b8:	f000 809a 	beq.w	800daf0 <HAL_TIM_ConfigClockSource+0x198>
 800d9bc:	2b30      	cmp	r3, #48	; 0x30
 800d9be:	d809      	bhi.n	800d9d4 <HAL_TIM_ConfigClockSource+0x7c>
 800d9c0:	2b10      	cmp	r3, #16
 800d9c2:	f000 8095 	beq.w	800daf0 <HAL_TIM_ConfigClockSource+0x198>
 800d9c6:	2b20      	cmp	r3, #32
 800d9c8:	f000 8092 	beq.w	800daf0 <HAL_TIM_ConfigClockSource+0x198>
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f000 808f 	beq.w	800daf0 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d9d2:	e097      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800d9d4:	2b50      	cmp	r3, #80	; 0x50
 800d9d6:	d05b      	beq.n	800da90 <HAL_TIM_ConfigClockSource+0x138>
 800d9d8:	2b50      	cmp	r3, #80	; 0x50
 800d9da:	d802      	bhi.n	800d9e2 <HAL_TIM_ConfigClockSource+0x8a>
 800d9dc:	2b40      	cmp	r3, #64	; 0x40
 800d9de:	d077      	beq.n	800dad0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d9e0:	e090      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800d9e2:	2b60      	cmp	r3, #96	; 0x60
 800d9e4:	d064      	beq.n	800dab0 <HAL_TIM_ConfigClockSource+0x158>
 800d9e6:	2b70      	cmp	r3, #112	; 0x70
 800d9e8:	d028      	beq.n	800da3c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800d9ea:	e08b      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800d9ec:	4a4c      	ldr	r2, [pc, #304]	; (800db20 <HAL_TIM_ConfigClockSource+0x1c8>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d07e      	beq.n	800daf0 <HAL_TIM_ConfigClockSource+0x198>
 800d9f2:	4a4b      	ldr	r2, [pc, #300]	; (800db20 <HAL_TIM_ConfigClockSource+0x1c8>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d810      	bhi.n	800da1a <HAL_TIM_ConfigClockSource+0xc2>
 800d9f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9fc:	d078      	beq.n	800daf0 <HAL_TIM_ConfigClockSource+0x198>
 800d9fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da02:	d803      	bhi.n	800da0c <HAL_TIM_ConfigClockSource+0xb4>
 800da04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da08:	d02f      	beq.n	800da6a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800da0a:	e07b      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800da0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800da10:	d06e      	beq.n	800daf0 <HAL_TIM_ConfigClockSource+0x198>
 800da12:	4a44      	ldr	r2, [pc, #272]	; (800db24 <HAL_TIM_ConfigClockSource+0x1cc>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d06b      	beq.n	800daf0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800da18:	e074      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800da1a:	4a43      	ldr	r2, [pc, #268]	; (800db28 <HAL_TIM_ConfigClockSource+0x1d0>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d067      	beq.n	800daf0 <HAL_TIM_ConfigClockSource+0x198>
 800da20:	4a41      	ldr	r2, [pc, #260]	; (800db28 <HAL_TIM_ConfigClockSource+0x1d0>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d803      	bhi.n	800da2e <HAL_TIM_ConfigClockSource+0xd6>
 800da26:	4a41      	ldr	r2, [pc, #260]	; (800db2c <HAL_TIM_ConfigClockSource+0x1d4>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d061      	beq.n	800daf0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800da2c:	e06a      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800da2e:	4a40      	ldr	r2, [pc, #256]	; (800db30 <HAL_TIM_ConfigClockSource+0x1d8>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d05d      	beq.n	800daf0 <HAL_TIM_ConfigClockSource+0x198>
 800da34:	4a3f      	ldr	r2, [pc, #252]	; (800db34 <HAL_TIM_ConfigClockSource+0x1dc>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d05a      	beq.n	800daf0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800da3a:	e063      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6818      	ldr	r0, [r3, #0]
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	6899      	ldr	r1, [r3, #8]
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	685a      	ldr	r2, [r3, #4]
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	f000 fcf4 	bl	800e438 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800da5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	609a      	str	r2, [r3, #8]
      break;
 800da68:	e04c      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6818      	ldr	r0, [r3, #0]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	6899      	ldr	r1, [r3, #8]
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	685a      	ldr	r2, [r3, #4]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f000 fcdd 	bl	800e438 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	689a      	ldr	r2, [r3, #8]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da8c:	609a      	str	r2, [r3, #8]
      break;
 800da8e:	e039      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6818      	ldr	r0, [r3, #0]
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	6859      	ldr	r1, [r3, #4]
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	461a      	mov	r2, r3
 800da9e:	f000 fc4f 	bl	800e340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2150      	movs	r1, #80	; 0x50
 800daa8:	4618      	mov	r0, r3
 800daaa:	f000 fca8 	bl	800e3fe <TIM_ITRx_SetConfig>
      break;
 800daae:	e029      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6818      	ldr	r0, [r3, #0]
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	6859      	ldr	r1, [r3, #4]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	461a      	mov	r2, r3
 800dabe:	f000 fc6e 	bl	800e39e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2160      	movs	r1, #96	; 0x60
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 fc98 	bl	800e3fe <TIM_ITRx_SetConfig>
      break;
 800dace:	e019      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6818      	ldr	r0, [r3, #0]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	6859      	ldr	r1, [r3, #4]
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	461a      	mov	r2, r3
 800dade:	f000 fc2f 	bl	800e340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2140      	movs	r1, #64	; 0x40
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 fc88 	bl	800e3fe <TIM_ITRx_SetConfig>
      break;
 800daee:	e009      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4619      	mov	r1, r3
 800dafa:	4610      	mov	r0, r2
 800dafc:	f000 fc7f 	bl	800e3fe <TIM_ITRx_SetConfig>
      break;
 800db00:	e000      	b.n	800db04 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800db02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	00100030 	.word	0x00100030
 800db24:	00100020 	.word	0x00100020
 800db28:	00100050 	.word	0x00100050
 800db2c:	00100040 	.word	0x00100040
 800db30:	00100060 	.word	0x00100060
 800db34:	00100070 	.word	0x00100070

0800db38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db54:	bf00      	nop
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db7c:	bf00      	nop
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db90:	bf00      	nop
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4a46      	ldr	r2, [pc, #280]	; (800dcc8 <TIM_Base_SetConfig+0x12c>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d017      	beq.n	800dbe4 <TIM_Base_SetConfig+0x48>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbba:	d013      	beq.n	800dbe4 <TIM_Base_SetConfig+0x48>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4a43      	ldr	r2, [pc, #268]	; (800dccc <TIM_Base_SetConfig+0x130>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d00f      	beq.n	800dbe4 <TIM_Base_SetConfig+0x48>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4a42      	ldr	r2, [pc, #264]	; (800dcd0 <TIM_Base_SetConfig+0x134>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d00b      	beq.n	800dbe4 <TIM_Base_SetConfig+0x48>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4a41      	ldr	r2, [pc, #260]	; (800dcd4 <TIM_Base_SetConfig+0x138>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d007      	beq.n	800dbe4 <TIM_Base_SetConfig+0x48>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4a40      	ldr	r2, [pc, #256]	; (800dcd8 <TIM_Base_SetConfig+0x13c>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d003      	beq.n	800dbe4 <TIM_Base_SetConfig+0x48>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	4a3f      	ldr	r2, [pc, #252]	; (800dcdc <TIM_Base_SetConfig+0x140>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d108      	bne.n	800dbf6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4a33      	ldr	r2, [pc, #204]	; (800dcc8 <TIM_Base_SetConfig+0x12c>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d023      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc04:	d01f      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a30      	ldr	r2, [pc, #192]	; (800dccc <TIM_Base_SetConfig+0x130>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d01b      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4a2f      	ldr	r2, [pc, #188]	; (800dcd0 <TIM_Base_SetConfig+0x134>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d017      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4a2e      	ldr	r2, [pc, #184]	; (800dcd4 <TIM_Base_SetConfig+0x138>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d013      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a2d      	ldr	r2, [pc, #180]	; (800dcd8 <TIM_Base_SetConfig+0x13c>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d00f      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4a2d      	ldr	r2, [pc, #180]	; (800dce0 <TIM_Base_SetConfig+0x144>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d00b      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4a2c      	ldr	r2, [pc, #176]	; (800dce4 <TIM_Base_SetConfig+0x148>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d007      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4a2b      	ldr	r2, [pc, #172]	; (800dce8 <TIM_Base_SetConfig+0x14c>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d003      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	4a26      	ldr	r2, [pc, #152]	; (800dcdc <TIM_Base_SetConfig+0x140>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d108      	bne.n	800dc58 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	68fa      	ldr	r2, [r7, #12]
 800dc54:	4313      	orrs	r3, r2
 800dc56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	695b      	ldr	r3, [r3, #20]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	689a      	ldr	r2, [r3, #8]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a12      	ldr	r2, [pc, #72]	; (800dcc8 <TIM_Base_SetConfig+0x12c>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d013      	beq.n	800dcac <TIM_Base_SetConfig+0x110>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	4a14      	ldr	r2, [pc, #80]	; (800dcd8 <TIM_Base_SetConfig+0x13c>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d00f      	beq.n	800dcac <TIM_Base_SetConfig+0x110>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4a14      	ldr	r2, [pc, #80]	; (800dce0 <TIM_Base_SetConfig+0x144>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d00b      	beq.n	800dcac <TIM_Base_SetConfig+0x110>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4a13      	ldr	r2, [pc, #76]	; (800dce4 <TIM_Base_SetConfig+0x148>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d007      	beq.n	800dcac <TIM_Base_SetConfig+0x110>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a12      	ldr	r2, [pc, #72]	; (800dce8 <TIM_Base_SetConfig+0x14c>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d003      	beq.n	800dcac <TIM_Base_SetConfig+0x110>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4a0d      	ldr	r2, [pc, #52]	; (800dcdc <TIM_Base_SetConfig+0x140>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d103      	bne.n	800dcb4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	691a      	ldr	r2, [r3, #16]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	615a      	str	r2, [r3, #20]
}
 800dcba:	bf00      	nop
 800dcbc:	3714      	adds	r7, #20
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	40012c00 	.word	0x40012c00
 800dccc:	40000400 	.word	0x40000400
 800dcd0:	40000800 	.word	0x40000800
 800dcd4:	40000c00 	.word	0x40000c00
 800dcd8:	40013400 	.word	0x40013400
 800dcdc:	40015000 	.word	0x40015000
 800dce0:	40014000 	.word	0x40014000
 800dce4:	40014400 	.word	0x40014400
 800dce8:	40014800 	.word	0x40014800

0800dcec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b087      	sub	sp, #28
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	f023 0201 	bic.w	r2, r3, #1
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a1b      	ldr	r3, [r3, #32]
 800dd06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	699b      	ldr	r3, [r3, #24]
 800dd12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f023 0303 	bic.w	r3, r3, #3
 800dd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	f023 0302 	bic.w	r3, r3, #2
 800dd38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	697a      	ldr	r2, [r7, #20]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a30      	ldr	r2, [pc, #192]	; (800de08 <TIM_OC1_SetConfig+0x11c>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d013      	beq.n	800dd74 <TIM_OC1_SetConfig+0x88>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a2f      	ldr	r2, [pc, #188]	; (800de0c <TIM_OC1_SetConfig+0x120>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d00f      	beq.n	800dd74 <TIM_OC1_SetConfig+0x88>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a2e      	ldr	r2, [pc, #184]	; (800de10 <TIM_OC1_SetConfig+0x124>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d00b      	beq.n	800dd74 <TIM_OC1_SetConfig+0x88>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a2d      	ldr	r2, [pc, #180]	; (800de14 <TIM_OC1_SetConfig+0x128>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d007      	beq.n	800dd74 <TIM_OC1_SetConfig+0x88>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4a2c      	ldr	r2, [pc, #176]	; (800de18 <TIM_OC1_SetConfig+0x12c>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d003      	beq.n	800dd74 <TIM_OC1_SetConfig+0x88>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a2b      	ldr	r2, [pc, #172]	; (800de1c <TIM_OC1_SetConfig+0x130>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d10c      	bne.n	800dd8e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f023 0308 	bic.w	r3, r3, #8
 800dd7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	697a      	ldr	r2, [r7, #20]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	f023 0304 	bic.w	r3, r3, #4
 800dd8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a1d      	ldr	r2, [pc, #116]	; (800de08 <TIM_OC1_SetConfig+0x11c>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d013      	beq.n	800ddbe <TIM_OC1_SetConfig+0xd2>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a1c      	ldr	r2, [pc, #112]	; (800de0c <TIM_OC1_SetConfig+0x120>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d00f      	beq.n	800ddbe <TIM_OC1_SetConfig+0xd2>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a1b      	ldr	r2, [pc, #108]	; (800de10 <TIM_OC1_SetConfig+0x124>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d00b      	beq.n	800ddbe <TIM_OC1_SetConfig+0xd2>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a1a      	ldr	r2, [pc, #104]	; (800de14 <TIM_OC1_SetConfig+0x128>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d007      	beq.n	800ddbe <TIM_OC1_SetConfig+0xd2>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4a19      	ldr	r2, [pc, #100]	; (800de18 <TIM_OC1_SetConfig+0x12c>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d003      	beq.n	800ddbe <TIM_OC1_SetConfig+0xd2>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4a18      	ldr	r2, [pc, #96]	; (800de1c <TIM_OC1_SetConfig+0x130>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d111      	bne.n	800dde2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	693a      	ldr	r2, [r7, #16]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	699b      	ldr	r3, [r3, #24]
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	685a      	ldr	r2, [r3, #4]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	697a      	ldr	r2, [r7, #20]
 800ddfa:	621a      	str	r2, [r3, #32]
}
 800ddfc:	bf00      	nop
 800ddfe:	371c      	adds	r7, #28
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr
 800de08:	40012c00 	.word	0x40012c00
 800de0c:	40013400 	.word	0x40013400
 800de10:	40014000 	.word	0x40014000
 800de14:	40014400 	.word	0x40014400
 800de18:	40014800 	.word	0x40014800
 800de1c:	40015000 	.word	0x40015000

0800de20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	f023 0210 	bic.w	r2, r3, #16
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	699b      	ldr	r3, [r3, #24]
 800de46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	021b      	lsls	r3, r3, #8
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	4313      	orrs	r3, r2
 800de66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	f023 0320 	bic.w	r3, r3, #32
 800de6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	011b      	lsls	r3, r3, #4
 800de76:	697a      	ldr	r2, [r7, #20]
 800de78:	4313      	orrs	r3, r2
 800de7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	4a2c      	ldr	r2, [pc, #176]	; (800df30 <TIM_OC2_SetConfig+0x110>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d007      	beq.n	800de94 <TIM_OC2_SetConfig+0x74>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4a2b      	ldr	r2, [pc, #172]	; (800df34 <TIM_OC2_SetConfig+0x114>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d003      	beq.n	800de94 <TIM_OC2_SetConfig+0x74>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a2a      	ldr	r2, [pc, #168]	; (800df38 <TIM_OC2_SetConfig+0x118>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d10d      	bne.n	800deb0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	011b      	lsls	r3, r3, #4
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800deae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	4a1f      	ldr	r2, [pc, #124]	; (800df30 <TIM_OC2_SetConfig+0x110>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d013      	beq.n	800dee0 <TIM_OC2_SetConfig+0xc0>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4a1e      	ldr	r2, [pc, #120]	; (800df34 <TIM_OC2_SetConfig+0x114>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d00f      	beq.n	800dee0 <TIM_OC2_SetConfig+0xc0>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a1e      	ldr	r2, [pc, #120]	; (800df3c <TIM_OC2_SetConfig+0x11c>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d00b      	beq.n	800dee0 <TIM_OC2_SetConfig+0xc0>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4a1d      	ldr	r2, [pc, #116]	; (800df40 <TIM_OC2_SetConfig+0x120>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d007      	beq.n	800dee0 <TIM_OC2_SetConfig+0xc0>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a1c      	ldr	r2, [pc, #112]	; (800df44 <TIM_OC2_SetConfig+0x124>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d003      	beq.n	800dee0 <TIM_OC2_SetConfig+0xc0>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a17      	ldr	r2, [pc, #92]	; (800df38 <TIM_OC2_SetConfig+0x118>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d113      	bne.n	800df08 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800deee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	695b      	ldr	r3, [r3, #20]
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	693a      	ldr	r2, [r7, #16]
 800def8:	4313      	orrs	r3, r2
 800defa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	693a      	ldr	r2, [r7, #16]
 800df04:	4313      	orrs	r3, r2
 800df06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	693a      	ldr	r2, [r7, #16]
 800df0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	685a      	ldr	r2, [r3, #4]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	697a      	ldr	r2, [r7, #20]
 800df20:	621a      	str	r2, [r3, #32]
}
 800df22:	bf00      	nop
 800df24:	371c      	adds	r7, #28
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	40012c00 	.word	0x40012c00
 800df34:	40013400 	.word	0x40013400
 800df38:	40015000 	.word	0x40015000
 800df3c:	40014000 	.word	0x40014000
 800df40:	40014400 	.word	0x40014400
 800df44:	40014800 	.word	0x40014800

0800df48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df48:	b480      	push	{r7}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6a1b      	ldr	r3, [r3, #32]
 800df62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	69db      	ldr	r3, [r3, #28]
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f023 0303 	bic.w	r3, r3, #3
 800df82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	4313      	orrs	r3, r2
 800df8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	021b      	lsls	r3, r3, #8
 800df9c:	697a      	ldr	r2, [r7, #20]
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	4a2b      	ldr	r2, [pc, #172]	; (800e054 <TIM_OC3_SetConfig+0x10c>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d007      	beq.n	800dfba <TIM_OC3_SetConfig+0x72>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	4a2a      	ldr	r2, [pc, #168]	; (800e058 <TIM_OC3_SetConfig+0x110>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d003      	beq.n	800dfba <TIM_OC3_SetConfig+0x72>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4a29      	ldr	r2, [pc, #164]	; (800e05c <TIM_OC3_SetConfig+0x114>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d10d      	bne.n	800dfd6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	021b      	lsls	r3, r3, #8
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dfd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	4a1e      	ldr	r2, [pc, #120]	; (800e054 <TIM_OC3_SetConfig+0x10c>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d013      	beq.n	800e006 <TIM_OC3_SetConfig+0xbe>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4a1d      	ldr	r2, [pc, #116]	; (800e058 <TIM_OC3_SetConfig+0x110>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d00f      	beq.n	800e006 <TIM_OC3_SetConfig+0xbe>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4a1d      	ldr	r2, [pc, #116]	; (800e060 <TIM_OC3_SetConfig+0x118>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d00b      	beq.n	800e006 <TIM_OC3_SetConfig+0xbe>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a1c      	ldr	r2, [pc, #112]	; (800e064 <TIM_OC3_SetConfig+0x11c>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d007      	beq.n	800e006 <TIM_OC3_SetConfig+0xbe>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a1b      	ldr	r2, [pc, #108]	; (800e068 <TIM_OC3_SetConfig+0x120>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d003      	beq.n	800e006 <TIM_OC3_SetConfig+0xbe>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a16      	ldr	r2, [pc, #88]	; (800e05c <TIM_OC3_SetConfig+0x114>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d113      	bne.n	800e02e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e00c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	695b      	ldr	r3, [r3, #20]
 800e01a:	011b      	lsls	r3, r3, #4
 800e01c:	693a      	ldr	r2, [r7, #16]
 800e01e:	4313      	orrs	r3, r2
 800e020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	699b      	ldr	r3, [r3, #24]
 800e026:	011b      	lsls	r3, r3, #4
 800e028:	693a      	ldr	r2, [r7, #16]
 800e02a:	4313      	orrs	r3, r2
 800e02c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	693a      	ldr	r2, [r7, #16]
 800e032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	685a      	ldr	r2, [r3, #4]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	697a      	ldr	r2, [r7, #20]
 800e046:	621a      	str	r2, [r3, #32]
}
 800e048:	bf00      	nop
 800e04a:	371c      	adds	r7, #28
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	40012c00 	.word	0x40012c00
 800e058:	40013400 	.word	0x40013400
 800e05c:	40015000 	.word	0x40015000
 800e060:	40014000 	.word	0x40014000
 800e064:	40014400 	.word	0x40014400
 800e068:	40014800 	.word	0x40014800

0800e06c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b087      	sub	sp, #28
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6a1b      	ldr	r3, [r3, #32]
 800e07a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a1b      	ldr	r3, [r3, #32]
 800e086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	69db      	ldr	r3, [r3, #28]
 800e092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	021b      	lsls	r3, r3, #8
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e0ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	031b      	lsls	r3, r3, #12
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4a2c      	ldr	r2, [pc, #176]	; (800e17c <TIM_OC4_SetConfig+0x110>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d007      	beq.n	800e0e0 <TIM_OC4_SetConfig+0x74>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	4a2b      	ldr	r2, [pc, #172]	; (800e180 <TIM_OC4_SetConfig+0x114>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d003      	beq.n	800e0e0 <TIM_OC4_SetConfig+0x74>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4a2a      	ldr	r2, [pc, #168]	; (800e184 <TIM_OC4_SetConfig+0x118>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d10d      	bne.n	800e0fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e0e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	031b      	lsls	r3, r3, #12
 800e0ee:	697a      	ldr	r2, [r7, #20]
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	4a1f      	ldr	r2, [pc, #124]	; (800e17c <TIM_OC4_SetConfig+0x110>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d013      	beq.n	800e12c <TIM_OC4_SetConfig+0xc0>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4a1e      	ldr	r2, [pc, #120]	; (800e180 <TIM_OC4_SetConfig+0x114>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d00f      	beq.n	800e12c <TIM_OC4_SetConfig+0xc0>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	4a1e      	ldr	r2, [pc, #120]	; (800e188 <TIM_OC4_SetConfig+0x11c>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d00b      	beq.n	800e12c <TIM_OC4_SetConfig+0xc0>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a1d      	ldr	r2, [pc, #116]	; (800e18c <TIM_OC4_SetConfig+0x120>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d007      	beq.n	800e12c <TIM_OC4_SetConfig+0xc0>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a1c      	ldr	r2, [pc, #112]	; (800e190 <TIM_OC4_SetConfig+0x124>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d003      	beq.n	800e12c <TIM_OC4_SetConfig+0xc0>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a17      	ldr	r2, [pc, #92]	; (800e184 <TIM_OC4_SetConfig+0x118>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d113      	bne.n	800e154 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e132:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e13a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	695b      	ldr	r3, [r3, #20]
 800e140:	019b      	lsls	r3, r3, #6
 800e142:	693a      	ldr	r2, [r7, #16]
 800e144:	4313      	orrs	r3, r2
 800e146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	019b      	lsls	r3, r3, #6
 800e14e:	693a      	ldr	r2, [r7, #16]
 800e150:	4313      	orrs	r3, r2
 800e152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	685a      	ldr	r2, [r3, #4]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	697a      	ldr	r2, [r7, #20]
 800e16c:	621a      	str	r2, [r3, #32]
}
 800e16e:	bf00      	nop
 800e170:	371c      	adds	r7, #28
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop
 800e17c:	40012c00 	.word	0x40012c00
 800e180:	40013400 	.word	0x40013400
 800e184:	40015000 	.word	0x40015000
 800e188:	40014000 	.word	0x40014000
 800e18c:	40014400 	.word	0x40014400
 800e190:	40014800 	.word	0x40014800

0800e194 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e194:	b480      	push	{r7}
 800e196:	b087      	sub	sp, #28
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6a1b      	ldr	r3, [r3, #32]
 800e1a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6a1b      	ldr	r3, [r3, #32]
 800e1ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e1d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	041b      	lsls	r3, r3, #16
 800e1e0:	693a      	ldr	r2, [r7, #16]
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a19      	ldr	r2, [pc, #100]	; (800e250 <TIM_OC5_SetConfig+0xbc>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d013      	beq.n	800e216 <TIM_OC5_SetConfig+0x82>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a18      	ldr	r2, [pc, #96]	; (800e254 <TIM_OC5_SetConfig+0xc0>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d00f      	beq.n	800e216 <TIM_OC5_SetConfig+0x82>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a17      	ldr	r2, [pc, #92]	; (800e258 <TIM_OC5_SetConfig+0xc4>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d00b      	beq.n	800e216 <TIM_OC5_SetConfig+0x82>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a16      	ldr	r2, [pc, #88]	; (800e25c <TIM_OC5_SetConfig+0xc8>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d007      	beq.n	800e216 <TIM_OC5_SetConfig+0x82>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a15      	ldr	r2, [pc, #84]	; (800e260 <TIM_OC5_SetConfig+0xcc>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d003      	beq.n	800e216 <TIM_OC5_SetConfig+0x82>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4a14      	ldr	r2, [pc, #80]	; (800e264 <TIM_OC5_SetConfig+0xd0>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d109      	bne.n	800e22a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e21c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	021b      	lsls	r3, r3, #8
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	4313      	orrs	r3, r2
 800e228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	697a      	ldr	r2, [r7, #20]
 800e22e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	685a      	ldr	r2, [r3, #4]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	693a      	ldr	r2, [r7, #16]
 800e242:	621a      	str	r2, [r3, #32]
}
 800e244:	bf00      	nop
 800e246:	371c      	adds	r7, #28
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr
 800e250:	40012c00 	.word	0x40012c00
 800e254:	40013400 	.word	0x40013400
 800e258:	40014000 	.word	0x40014000
 800e25c:	40014400 	.word	0x40014400
 800e260:	40014800 	.word	0x40014800
 800e264:	40015000 	.word	0x40015000

0800e268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e268:	b480      	push	{r7}
 800e26a:	b087      	sub	sp, #28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6a1b      	ldr	r3, [r3, #32]
 800e276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	021b      	lsls	r3, r3, #8
 800e2a2:	68fa      	ldr	r2, [r7, #12]
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	051b      	lsls	r3, r3, #20
 800e2b6:	693a      	ldr	r2, [r7, #16]
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a1a      	ldr	r2, [pc, #104]	; (800e328 <TIM_OC6_SetConfig+0xc0>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d013      	beq.n	800e2ec <TIM_OC6_SetConfig+0x84>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4a19      	ldr	r2, [pc, #100]	; (800e32c <TIM_OC6_SetConfig+0xc4>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d00f      	beq.n	800e2ec <TIM_OC6_SetConfig+0x84>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a18      	ldr	r2, [pc, #96]	; (800e330 <TIM_OC6_SetConfig+0xc8>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d00b      	beq.n	800e2ec <TIM_OC6_SetConfig+0x84>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4a17      	ldr	r2, [pc, #92]	; (800e334 <TIM_OC6_SetConfig+0xcc>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d007      	beq.n	800e2ec <TIM_OC6_SetConfig+0x84>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4a16      	ldr	r2, [pc, #88]	; (800e338 <TIM_OC6_SetConfig+0xd0>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d003      	beq.n	800e2ec <TIM_OC6_SetConfig+0x84>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a15      	ldr	r2, [pc, #84]	; (800e33c <TIM_OC6_SetConfig+0xd4>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d109      	bne.n	800e300 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e2f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	695b      	ldr	r3, [r3, #20]
 800e2f8:	029b      	lsls	r3, r3, #10
 800e2fa:	697a      	ldr	r2, [r7, #20]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	685a      	ldr	r2, [r3, #4]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	693a      	ldr	r2, [r7, #16]
 800e318:	621a      	str	r2, [r3, #32]
}
 800e31a:	bf00      	nop
 800e31c:	371c      	adds	r7, #28
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop
 800e328:	40012c00 	.word	0x40012c00
 800e32c:	40013400 	.word	0x40013400
 800e330:	40014000 	.word	0x40014000
 800e334:	40014400 	.word	0x40014400
 800e338:	40014800 	.word	0x40014800
 800e33c:	40015000 	.word	0x40015000

0800e340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e340:	b480      	push	{r7}
 800e342:	b087      	sub	sp, #28
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6a1b      	ldr	r3, [r3, #32]
 800e350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6a1b      	ldr	r3, [r3, #32]
 800e356:	f023 0201 	bic.w	r2, r3, #1
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	699b      	ldr	r3, [r3, #24]
 800e362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e36a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	011b      	lsls	r3, r3, #4
 800e370:	693a      	ldr	r2, [r7, #16]
 800e372:	4313      	orrs	r3, r2
 800e374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	f023 030a 	bic.w	r3, r3, #10
 800e37c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e37e:	697a      	ldr	r2, [r7, #20]
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	4313      	orrs	r3, r2
 800e384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	693a      	ldr	r2, [r7, #16]
 800e38a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	697a      	ldr	r2, [r7, #20]
 800e390:	621a      	str	r2, [r3, #32]
}
 800e392:	bf00      	nop
 800e394:	371c      	adds	r7, #28
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr

0800e39e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e39e:	b480      	push	{r7}
 800e3a0:	b087      	sub	sp, #28
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	60f8      	str	r0, [r7, #12]
 800e3a6:	60b9      	str	r1, [r7, #8]
 800e3a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6a1b      	ldr	r3, [r3, #32]
 800e3ae:	f023 0210 	bic.w	r2, r3, #16
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	031b      	lsls	r3, r3, #12
 800e3ce:	697a      	ldr	r2, [r7, #20]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e3da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	011b      	lsls	r3, r3, #4
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	697a      	ldr	r2, [r7, #20]
 800e3ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	693a      	ldr	r2, [r7, #16]
 800e3f0:	621a      	str	r2, [r3, #32]
}
 800e3f2:	bf00      	nop
 800e3f4:	371c      	adds	r7, #28
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e3fe:	b480      	push	{r7}
 800e400:	b085      	sub	sp, #20
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
 800e406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	4313      	orrs	r3, r2
 800e420:	f043 0307 	orr.w	r3, r3, #7
 800e424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	609a      	str	r2, [r3, #8]
}
 800e42c:	bf00      	nop
 800e42e:	3714      	adds	r7, #20
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e438:	b480      	push	{r7}
 800e43a:	b087      	sub	sp, #28
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	689b      	ldr	r3, [r3, #8]
 800e44a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	021a      	lsls	r2, r3, #8
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	431a      	orrs	r2, r3
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	4313      	orrs	r3, r2
 800e460:	697a      	ldr	r2, [r7, #20]
 800e462:	4313      	orrs	r3, r2
 800e464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	609a      	str	r2, [r3, #8]
}
 800e46c:	bf00      	nop
 800e46e:	371c      	adds	r7, #28
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e478:	b480      	push	{r7}
 800e47a:	b087      	sub	sp, #28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f003 031f 	and.w	r3, r3, #31
 800e48a:	2201      	movs	r2, #1
 800e48c:	fa02 f303 	lsl.w	r3, r2, r3
 800e490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6a1a      	ldr	r2, [r3, #32]
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	43db      	mvns	r3, r3
 800e49a:	401a      	ands	r2, r3
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6a1a      	ldr	r2, [r3, #32]
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	f003 031f 	and.w	r3, r3, #31
 800e4aa:	6879      	ldr	r1, [r7, #4]
 800e4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	621a      	str	r2, [r3, #32]
}
 800e4b6:	bf00      	nop
 800e4b8:	371c      	adds	r7, #28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
	...

0800e4c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d101      	bne.n	800e4dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e4d8:	2302      	movs	r3, #2
 800e4da:	e074      	b.n	800e5c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a34      	ldr	r2, [pc, #208]	; (800e5d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d009      	beq.n	800e51a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a33      	ldr	r2, [pc, #204]	; (800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d004      	beq.n	800e51a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a31      	ldr	r2, [pc, #196]	; (800e5dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d108      	bne.n	800e52c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e520:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	68fa      	ldr	r2, [r7, #12]
 800e528:	4313      	orrs	r3, r2
 800e52a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	4313      	orrs	r3, r2
 800e540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a21      	ldr	r2, [pc, #132]	; (800e5d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d022      	beq.n	800e59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e55c:	d01d      	beq.n	800e59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4a1f      	ldr	r2, [pc, #124]	; (800e5e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d018      	beq.n	800e59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a1d      	ldr	r2, [pc, #116]	; (800e5e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d013      	beq.n	800e59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a1c      	ldr	r2, [pc, #112]	; (800e5e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d00e      	beq.n	800e59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a15      	ldr	r2, [pc, #84]	; (800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d009      	beq.n	800e59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a18      	ldr	r2, [pc, #96]	; (800e5ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d004      	beq.n	800e59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a11      	ldr	r2, [pc, #68]	; (800e5dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d10c      	bne.n	800e5b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	68ba      	ldr	r2, [r7, #8]
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5c4:	2300      	movs	r3, #0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3714      	adds	r7, #20
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr
 800e5d2:	bf00      	nop
 800e5d4:	40012c00 	.word	0x40012c00
 800e5d8:	40013400 	.word	0x40013400
 800e5dc:	40015000 	.word	0x40015000
 800e5e0:	40000400 	.word	0x40000400
 800e5e4:	40000800 	.word	0x40000800
 800e5e8:	40000c00 	.word	0x40000c00
 800e5ec:	40014000 	.word	0x40014000

0800e5f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e604:	2b01      	cmp	r3, #1
 800e606:	d101      	bne.n	800e60c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e608:	2302      	movs	r3, #2
 800e60a:	e096      	b.n	800e73a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2201      	movs	r2, #1
 800e610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	68db      	ldr	r3, [r3, #12]
 800e61e:	4313      	orrs	r3, r2
 800e620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	4313      	orrs	r3, r2
 800e62e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	4313      	orrs	r3, r2
 800e63c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4313      	orrs	r3, r2
 800e64a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	691b      	ldr	r3, [r3, #16]
 800e656:	4313      	orrs	r3, r2
 800e658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	695b      	ldr	r3, [r3, #20]
 800e664:	4313      	orrs	r3, r2
 800e666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e672:	4313      	orrs	r3, r2
 800e674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	699b      	ldr	r3, [r3, #24]
 800e680:	041b      	lsls	r3, r3, #16
 800e682:	4313      	orrs	r3, r2
 800e684:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a2f      	ldr	r2, [pc, #188]	; (800e748 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d009      	beq.n	800e6a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a2d      	ldr	r2, [pc, #180]	; (800e74c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d004      	beq.n	800e6a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a2c      	ldr	r2, [pc, #176]	; (800e750 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d106      	bne.n	800e6b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	69db      	ldr	r3, [r3, #28]
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a24      	ldr	r2, [pc, #144]	; (800e748 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d009      	beq.n	800e6d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a22      	ldr	r2, [pc, #136]	; (800e74c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d004      	beq.n	800e6d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a21      	ldr	r2, [pc, #132]	; (800e750 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d12b      	bne.n	800e728 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6da:	051b      	lsls	r3, r3, #20
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	6a1b      	ldr	r3, [r3, #32]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a11      	ldr	r2, [pc, #68]	; (800e748 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d009      	beq.n	800e71a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a10      	ldr	r2, [pc, #64]	; (800e74c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d004      	beq.n	800e71a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a0e      	ldr	r2, [pc, #56]	; (800e750 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d106      	bne.n	800e728 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e724:	4313      	orrs	r3, r2
 800e726:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3714      	adds	r7, #20
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	40012c00 	.word	0x40012c00
 800e74c:	40013400 	.word	0x40013400
 800e750:	40015000 	.word	0x40015000

0800e754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e75c:	bf00      	nop
 800e75e:	370c      	adds	r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e770:	bf00      	nop
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e784:	bf00      	nop
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e798:	bf00      	nop
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e7ac:	bf00      	nop
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <LL_EXTI_EnableIT_0_31>:
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800e7e8:	4b05      	ldr	r3, [pc, #20]	; (800e800 <LL_EXTI_EnableIT_0_31+0x20>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	4904      	ldr	r1, [pc, #16]	; (800e800 <LL_EXTI_EnableIT_0_31+0x20>)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	600b      	str	r3, [r1, #0]
}
 800e7f4:	bf00      	nop
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr
 800e800:	40010400 	.word	0x40010400

0800e804 <LL_EXTI_EnableIT_32_63>:
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800e80c:	4b05      	ldr	r3, [pc, #20]	; (800e824 <LL_EXTI_EnableIT_32_63+0x20>)
 800e80e:	6a1a      	ldr	r2, [r3, #32]
 800e810:	4904      	ldr	r1, [pc, #16]	; (800e824 <LL_EXTI_EnableIT_32_63+0x20>)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	4313      	orrs	r3, r2
 800e816:	620b      	str	r3, [r1, #32]
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr
 800e824:	40010400 	.word	0x40010400

0800e828 <LL_EXTI_DisableIT_0_31>:
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800e830:	4b06      	ldr	r3, [pc, #24]	; (800e84c <LL_EXTI_DisableIT_0_31+0x24>)
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	43db      	mvns	r3, r3
 800e838:	4904      	ldr	r1, [pc, #16]	; (800e84c <LL_EXTI_DisableIT_0_31+0x24>)
 800e83a:	4013      	ands	r3, r2
 800e83c:	600b      	str	r3, [r1, #0]
}
 800e83e:	bf00      	nop
 800e840:	370c      	adds	r7, #12
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	40010400 	.word	0x40010400

0800e850 <LL_EXTI_DisableIT_32_63>:
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800e858:	4b06      	ldr	r3, [pc, #24]	; (800e874 <LL_EXTI_DisableIT_32_63+0x24>)
 800e85a:	6a1a      	ldr	r2, [r3, #32]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	43db      	mvns	r3, r3
 800e860:	4904      	ldr	r1, [pc, #16]	; (800e874 <LL_EXTI_DisableIT_32_63+0x24>)
 800e862:	4013      	ands	r3, r2
 800e864:	620b      	str	r3, [r1, #32]
}
 800e866:	bf00      	nop
 800e868:	370c      	adds	r7, #12
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop
 800e874:	40010400 	.word	0x40010400

0800e878 <LL_EXTI_EnableEvent_0_31>:
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800e880:	4b05      	ldr	r3, [pc, #20]	; (800e898 <LL_EXTI_EnableEvent_0_31+0x20>)
 800e882:	685a      	ldr	r2, [r3, #4]
 800e884:	4904      	ldr	r1, [pc, #16]	; (800e898 <LL_EXTI_EnableEvent_0_31+0x20>)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4313      	orrs	r3, r2
 800e88a:	604b      	str	r3, [r1, #4]
}
 800e88c:	bf00      	nop
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	40010400 	.word	0x40010400

0800e89c <LL_EXTI_EnableEvent_32_63>:
{
 800e89c:	b480      	push	{r7}
 800e89e:	b083      	sub	sp, #12
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800e8a4:	4b05      	ldr	r3, [pc, #20]	; (800e8bc <LL_EXTI_EnableEvent_32_63+0x20>)
 800e8a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8a8:	4904      	ldr	r1, [pc, #16]	; (800e8bc <LL_EXTI_EnableEvent_32_63+0x20>)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 800e8b0:	bf00      	nop
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr
 800e8bc:	40010400 	.word	0x40010400

0800e8c0 <LL_EXTI_DisableEvent_0_31>:
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800e8c8:	4b06      	ldr	r3, [pc, #24]	; (800e8e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800e8ca:	685a      	ldr	r2, [r3, #4]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	43db      	mvns	r3, r3
 800e8d0:	4904      	ldr	r1, [pc, #16]	; (800e8e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	604b      	str	r3, [r1, #4]
}
 800e8d6:	bf00      	nop
 800e8d8:	370c      	adds	r7, #12
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	40010400 	.word	0x40010400

0800e8e8 <LL_EXTI_DisableEvent_32_63>:
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800e8f0:	4b06      	ldr	r3, [pc, #24]	; (800e90c <LL_EXTI_DisableEvent_32_63+0x24>)
 800e8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	43db      	mvns	r3, r3
 800e8f8:	4904      	ldr	r1, [pc, #16]	; (800e90c <LL_EXTI_DisableEvent_32_63+0x24>)
 800e8fa:	4013      	ands	r3, r2
 800e8fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 800e8fe:	bf00      	nop
 800e900:	370c      	adds	r7, #12
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr
 800e90a:	bf00      	nop
 800e90c:	40010400 	.word	0x40010400

0800e910 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800e918:	4b05      	ldr	r3, [pc, #20]	; (800e930 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800e91a:	689a      	ldr	r2, [r3, #8]
 800e91c:	4904      	ldr	r1, [pc, #16]	; (800e930 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4313      	orrs	r3, r2
 800e922:	608b      	str	r3, [r1, #8]
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr
 800e930:	40010400 	.word	0x40010400

0800e934 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e93c:	4b05      	ldr	r3, [pc, #20]	; (800e954 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e93e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e940:	4904      	ldr	r1, [pc, #16]	; (800e954 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	4313      	orrs	r3, r2
 800e946:	628b      	str	r3, [r1, #40]	; 0x28
}
 800e948:	bf00      	nop
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	40010400 	.word	0x40010400

0800e958 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800e960:	4b06      	ldr	r3, [pc, #24]	; (800e97c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800e962:	689a      	ldr	r2, [r3, #8]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	43db      	mvns	r3, r3
 800e968:	4904      	ldr	r1, [pc, #16]	; (800e97c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800e96a:	4013      	ands	r3, r2
 800e96c:	608b      	str	r3, [r1, #8]
}
 800e96e:	bf00      	nop
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	40010400 	.word	0x40010400

0800e980 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800e988:	4b06      	ldr	r3, [pc, #24]	; (800e9a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800e98a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	43db      	mvns	r3, r3
 800e990:	4904      	ldr	r1, [pc, #16]	; (800e9a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800e992:	4013      	ands	r3, r2
 800e994:	628b      	str	r3, [r1, #40]	; 0x28
}
 800e996:	bf00      	nop
 800e998:	370c      	adds	r7, #12
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	40010400 	.word	0x40010400

0800e9a8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800e9b0:	4b05      	ldr	r3, [pc, #20]	; (800e9c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800e9b2:	68da      	ldr	r2, [r3, #12]
 800e9b4:	4904      	ldr	r1, [pc, #16]	; (800e9c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4313      	orrs	r3, r2
 800e9ba:	60cb      	str	r3, [r1, #12]
}
 800e9bc:	bf00      	nop
 800e9be:	370c      	adds	r7, #12
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr
 800e9c8:	40010400 	.word	0x40010400

0800e9cc <LL_EXTI_EnableFallingTrig_32_63>:
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800e9d4:	4b05      	ldr	r3, [pc, #20]	; (800e9ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800e9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d8:	4904      	ldr	r1, [pc, #16]	; (800e9ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800e9e0:	bf00      	nop
 800e9e2:	370c      	adds	r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr
 800e9ec:	40010400 	.word	0x40010400

0800e9f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800e9f8:	4b06      	ldr	r3, [pc, #24]	; (800ea14 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800e9fa:	68da      	ldr	r2, [r3, #12]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	43db      	mvns	r3, r3
 800ea00:	4904      	ldr	r1, [pc, #16]	; (800ea14 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ea02:	4013      	ands	r3, r2
 800ea04:	60cb      	str	r3, [r1, #12]
}
 800ea06:	bf00      	nop
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	40010400 	.word	0x40010400

0800ea18 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ea20:	4b06      	ldr	r3, [pc, #24]	; (800ea3c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ea22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	43db      	mvns	r3, r3
 800ea28:	4904      	ldr	r1, [pc, #16]	; (800ea3c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ea2a:	4013      	ands	r3, r2
 800ea2c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ea2e:	bf00      	nop
 800ea30:	370c      	adds	r7, #12
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	40010400 	.word	0x40010400

0800ea40 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	7a1b      	ldrb	r3, [r3, #8]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	f000 80c8 	beq.w	800ebe6 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d05d      	beq.n	800eb1a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	7a5b      	ldrb	r3, [r3, #9]
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d00e      	beq.n	800ea84 <LL_EXTI_Init+0x44>
 800ea66:	2b02      	cmp	r3, #2
 800ea68:	d017      	beq.n	800ea9a <LL_EXTI_Init+0x5a>
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d120      	bne.n	800eab0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff ff24 	bl	800e8c0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7ff feaf 	bl	800e7e0 <LL_EXTI_EnableIT_0_31>
          break;
 800ea82:	e018      	b.n	800eab6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fecd 	bl	800e828 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7ff fef0 	bl	800e878 <LL_EXTI_EnableEvent_0_31>
          break;
 800ea98:	e00d      	b.n	800eab6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7ff fe9e 	bl	800e7e0 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7ff fee5 	bl	800e878 <LL_EXTI_EnableEvent_0_31>
          break;
 800eaae:	e002      	b.n	800eab6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800eab0:	2301      	movs	r3, #1
 800eab2:	60fb      	str	r3, [r7, #12]
          break;
 800eab4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	7a9b      	ldrb	r3, [r3, #10]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d02d      	beq.n	800eb1a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	7a9b      	ldrb	r3, [r3, #10]
 800eac2:	2b02      	cmp	r3, #2
 800eac4:	d00e      	beq.n	800eae4 <LL_EXTI_Init+0xa4>
 800eac6:	2b03      	cmp	r3, #3
 800eac8:	d017      	beq.n	800eafa <LL_EXTI_Init+0xba>
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d120      	bne.n	800eb10 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7ff ff8c 	bl	800e9f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4618      	mov	r0, r3
 800eade:	f7ff ff17 	bl	800e910 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800eae2:	e01b      	b.n	800eb1c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff ff35 	bl	800e958 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7ff ff58 	bl	800e9a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800eaf8:	e010      	b.n	800eb1c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7ff ff06 	bl	800e910 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7ff ff4d 	bl	800e9a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800eb0e:	e005      	b.n	800eb1c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f043 0302 	orr.w	r3, r3, #2
 800eb16:	60fb      	str	r3, [r7, #12]
            break;
 800eb18:	e000      	b.n	800eb1c <LL_EXTI_Init+0xdc>
        }
      }
 800eb1a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d075      	beq.n	800ec10 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	7a5b      	ldrb	r3, [r3, #9]
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d00e      	beq.n	800eb4a <LL_EXTI_Init+0x10a>
 800eb2c:	2b02      	cmp	r3, #2
 800eb2e:	d017      	beq.n	800eb60 <LL_EXTI_Init+0x120>
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d120      	bne.n	800eb76 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fed5 	bl	800e8e8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff fe5e 	bl	800e804 <LL_EXTI_EnableIT_32_63>
          break;
 800eb48:	e01a      	b.n	800eb80 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7ff fe7e 	bl	800e850 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7ff fe9f 	bl	800e89c <LL_EXTI_EnableEvent_32_63>
          break;
 800eb5e:	e00f      	b.n	800eb80 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7ff fe4d 	bl	800e804 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff fe94 	bl	800e89c <LL_EXTI_EnableEvent_32_63>
          break;
 800eb74:	e004      	b.n	800eb80 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f043 0304 	orr.w	r3, r3, #4
 800eb7c:	60fb      	str	r3, [r7, #12]
          break;
 800eb7e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	7a9b      	ldrb	r3, [r3, #10]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d043      	beq.n	800ec10 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	7a9b      	ldrb	r3, [r3, #10]
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d00e      	beq.n	800ebae <LL_EXTI_Init+0x16e>
 800eb90:	2b03      	cmp	r3, #3
 800eb92:	d017      	beq.n	800ebc4 <LL_EXTI_Init+0x184>
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d120      	bne.n	800ebda <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff ff3b 	bl	800ea18 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff fec4 	bl	800e934 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800ebac:	e031      	b.n	800ec12 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7ff fee4 	bl	800e980 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7ff ff05 	bl	800e9cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ebc2:	e026      	b.n	800ec12 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7ff feb3 	bl	800e934 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7ff fefa 	bl	800e9cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ebd8:	e01b      	b.n	800ec12 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f043 0305 	orr.w	r3, r3, #5
 800ebe0:	60fb      	str	r3, [r7, #12]
            break;
 800ebe2:	bf00      	nop
 800ebe4:	e015      	b.n	800ec12 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7ff fe1c 	bl	800e828 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7ff fe63 	bl	800e8c0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7ff fe26 	bl	800e850 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7ff fe6d 	bl	800e8e8 <LL_EXTI_DisableEvent_32_63>
 800ec0e:	e000      	b.n	800ec12 <LL_EXTI_Init+0x1d2>
      }
 800ec10:	bf00      	nop
  }

  return status;
 800ec12:	68fb      	ldr	r3, [r7, #12]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <LL_GPIO_SetPinMode>:
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b089      	sub	sp, #36	; 0x24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	fa93 f3a3 	rbit	r3, r3
 800ec36:	613b      	str	r3, [r7, #16]
  return result;
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	fab3 f383 	clz	r3, r3
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	005b      	lsls	r3, r3, #1
 800ec42:	2103      	movs	r1, #3
 800ec44:	fa01 f303 	lsl.w	r3, r1, r3
 800ec48:	43db      	mvns	r3, r3
 800ec4a:	401a      	ands	r2, r3
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	fa93 f3a3 	rbit	r3, r3
 800ec56:	61bb      	str	r3, [r7, #24]
  return result;
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	fab3 f383 	clz	r3, r3
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	005b      	lsls	r3, r3, #1
 800ec62:	6879      	ldr	r1, [r7, #4]
 800ec64:	fa01 f303 	lsl.w	r3, r1, r3
 800ec68:	431a      	orrs	r2, r3
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	601a      	str	r2, [r3, #0]
}
 800ec6e:	bf00      	nop
 800ec70:	3724      	adds	r7, #36	; 0x24
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <LL_GPIO_SetPinOutputType>:
{
 800ec7a:	b480      	push	{r7}
 800ec7c:	b085      	sub	sp, #20
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	60f8      	str	r0, [r7, #12]
 800ec82:	60b9      	str	r1, [r7, #8]
 800ec84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	685a      	ldr	r2, [r3, #4]
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	43db      	mvns	r3, r3
 800ec8e:	401a      	ands	r2, r3
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	6879      	ldr	r1, [r7, #4]
 800ec94:	fb01 f303 	mul.w	r3, r1, r3
 800ec98:	431a      	orrs	r2, r3
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	605a      	str	r2, [r3, #4]
}
 800ec9e:	bf00      	nop
 800eca0:	3714      	adds	r7, #20
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <LL_GPIO_SetPinSpeed>:
{
 800ecaa:	b480      	push	{r7}
 800ecac:	b089      	sub	sp, #36	; 0x24
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	60f8      	str	r0, [r7, #12]
 800ecb2:	60b9      	str	r1, [r7, #8]
 800ecb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	689a      	ldr	r2, [r3, #8]
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	fa93 f3a3 	rbit	r3, r3
 800ecc4:	613b      	str	r3, [r7, #16]
  return result;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	fab3 f383 	clz	r3, r3
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	2103      	movs	r1, #3
 800ecd2:	fa01 f303 	lsl.w	r3, r1, r3
 800ecd6:	43db      	mvns	r3, r3
 800ecd8:	401a      	ands	r2, r3
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	fa93 f3a3 	rbit	r3, r3
 800ece4:	61bb      	str	r3, [r7, #24]
  return result;
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	fab3 f383 	clz	r3, r3
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	6879      	ldr	r1, [r7, #4]
 800ecf2:	fa01 f303 	lsl.w	r3, r1, r3
 800ecf6:	431a      	orrs	r2, r3
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	609a      	str	r2, [r3, #8]
}
 800ecfc:	bf00      	nop
 800ecfe:	3724      	adds	r7, #36	; 0x24
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <LL_GPIO_SetPinPull>:
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b089      	sub	sp, #36	; 0x24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	68da      	ldr	r2, [r3, #12]
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	fa93 f3a3 	rbit	r3, r3
 800ed22:	613b      	str	r3, [r7, #16]
  return result;
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	fab3 f383 	clz	r3, r3
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	2103      	movs	r1, #3
 800ed30:	fa01 f303 	lsl.w	r3, r1, r3
 800ed34:	43db      	mvns	r3, r3
 800ed36:	401a      	ands	r2, r3
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	fa93 f3a3 	rbit	r3, r3
 800ed42:	61bb      	str	r3, [r7, #24]
  return result;
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	fab3 f383 	clz	r3, r3
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	005b      	lsls	r3, r3, #1
 800ed4e:	6879      	ldr	r1, [r7, #4]
 800ed50:	fa01 f303 	lsl.w	r3, r1, r3
 800ed54:	431a      	orrs	r2, r3
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	60da      	str	r2, [r3, #12]
}
 800ed5a:	bf00      	nop
 800ed5c:	3724      	adds	r7, #36	; 0x24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr

0800ed66 <LL_GPIO_SetAFPin_0_7>:
{
 800ed66:	b480      	push	{r7}
 800ed68:	b089      	sub	sp, #36	; 0x24
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	60f8      	str	r0, [r7, #12]
 800ed6e:	60b9      	str	r1, [r7, #8]
 800ed70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6a1a      	ldr	r2, [r3, #32]
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	fa93 f3a3 	rbit	r3, r3
 800ed80:	613b      	str	r3, [r7, #16]
  return result;
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	fab3 f383 	clz	r3, r3
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	210f      	movs	r1, #15
 800ed8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed92:	43db      	mvns	r3, r3
 800ed94:	401a      	ands	r2, r3
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	fa93 f3a3 	rbit	r3, r3
 800eda0:	61bb      	str	r3, [r7, #24]
  return result;
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	fab3 f383 	clz	r3, r3
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	6879      	ldr	r1, [r7, #4]
 800edae:	fa01 f303 	lsl.w	r3, r1, r3
 800edb2:	431a      	orrs	r2, r3
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	621a      	str	r2, [r3, #32]
}
 800edb8:	bf00      	nop
 800edba:	3724      	adds	r7, #36	; 0x24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <LL_GPIO_SetAFPin_8_15>:
{
 800edc4:	b480      	push	{r7}
 800edc6:	b089      	sub	sp, #36	; 0x24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	0a1b      	lsrs	r3, r3, #8
 800edd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	fa93 f3a3 	rbit	r3, r3
 800ede0:	613b      	str	r3, [r7, #16]
  return result;
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	fab3 f383 	clz	r3, r3
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	210f      	movs	r1, #15
 800edee:	fa01 f303 	lsl.w	r3, r1, r3
 800edf2:	43db      	mvns	r3, r3
 800edf4:	401a      	ands	r2, r3
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	0a1b      	lsrs	r3, r3, #8
 800edfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	fa93 f3a3 	rbit	r3, r3
 800ee02:	61bb      	str	r3, [r7, #24]
  return result;
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	fab3 f383 	clz	r3, r3
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	6879      	ldr	r1, [r7, #4]
 800ee10:	fa01 f303 	lsl.w	r3, r1, r3
 800ee14:	431a      	orrs	r2, r3
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ee1a:	bf00      	nop
 800ee1c:	3724      	adds	r7, #36	; 0x24
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr

0800ee26 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b086      	sub	sp, #24
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	fa93 f3a3 	rbit	r3, r3
 800ee3c:	60bb      	str	r3, [r7, #8]
  return result;
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	fab3 f383 	clz	r3, r3
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ee48:	e040      	b.n	800eecc <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	2101      	movs	r1, #1
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	fa01 f303 	lsl.w	r3, r1, r3
 800ee56:	4013      	ands	r3, r2
 800ee58:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d032      	beq.n	800eec6 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	461a      	mov	r2, r3
 800ee66:	6939      	ldr	r1, [r7, #16]
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f7ff fed7 	bl	800ec1c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d003      	beq.n	800ee7e <LL_GPIO_Init+0x58>
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d106      	bne.n	800ee8c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	461a      	mov	r2, r3
 800ee84:	6939      	ldr	r1, [r7, #16]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f7ff ff0f 	bl	800ecaa <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6939      	ldr	r1, [r7, #16]
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7ff ff37 	bl	800ed08 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	d111      	bne.n	800eec6 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	2bff      	cmp	r3, #255	; 0xff
 800eea6:	d807      	bhi.n	800eeb8 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	695b      	ldr	r3, [r3, #20]
 800eeac:	461a      	mov	r2, r3
 800eeae:	6939      	ldr	r1, [r7, #16]
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7ff ff58 	bl	800ed66 <LL_GPIO_SetAFPin_0_7>
 800eeb6:	e006      	b.n	800eec6 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	695b      	ldr	r3, [r3, #20]
 800eebc:	461a      	mov	r2, r3
 800eebe:	6939      	ldr	r1, [r7, #16]
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7ff ff7f 	bl	800edc4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	3301      	adds	r3, #1
 800eeca:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	fa22 f303 	lsr.w	r3, r2, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1b7      	bne.n	800ee4a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d003      	beq.n	800eeea <LL_GPIO_Init+0xc4>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d107      	bne.n	800eefa <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	6819      	ldr	r1, [r3, #0]
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	461a      	mov	r2, r3
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff fec0 	bl	800ec7a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3718      	adds	r7, #24
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800ef04:	b590      	push	{r4, r7, lr}
 800ef06:	b085      	sub	sp, #20
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	4608      	mov	r0, r1
 800ef0e:	4611      	mov	r1, r2
 800ef10:	461a      	mov	r2, r3
 800ef12:	4623      	mov	r3, r4
 800ef14:	80fb      	strh	r3, [r7, #6]
 800ef16:	4603      	mov	r3, r0
 800ef18:	80bb      	strh	r3, [r7, #4]
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	70fb      	strb	r3, [r7, #3]
 800ef1e:	4613      	mov	r3, r2
 800ef20:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800ef22:	2300      	movs	r3, #0
 800ef24:	60fb      	str	r3, [r7, #12]
 800ef26:	e026      	b.n	800ef76 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800ef28:	2300      	movs	r3, #0
 800ef2a:	60bb      	str	r3, [r7, #8]
 800ef2c:	e01c      	b.n	800ef68 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	88fb      	ldrh	r3, [r7, #6]
 800ef34:	4413      	add	r3, r2
 800ef36:	b298      	uxth	r0, r3
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef3e:	4413      	add	r3, r2
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	88bb      	ldrh	r3, [r7, #4]
 800ef4e:	4413      	add	r3, r2
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	4413      	add	r3, r2
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	883a      	ldrh	r2, [r7, #0]
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	f000 fc1f 	bl	800f7a0 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	3301      	adds	r3, #1
 800ef66:	60bb      	str	r3, [r7, #8]
 800ef68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	dbde      	blt.n	800ef2e <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	3301      	adds	r3, #1
 800ef74:	60fb      	str	r3, [r7, #12]
 800ef76:	78fb      	ldrb	r3, [r7, #3]
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	dbd4      	blt.n	800ef28 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800ef7e:	bf00      	nop
 800ef80:	3714      	adds	r7, #20
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd90      	pop	{r4, r7, pc}

0800ef86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800ef86:	b590      	push	{r4, r7, lr}
 800ef88:	b087      	sub	sp, #28
 800ef8a:	af02      	add	r7, sp, #8
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	4608      	mov	r0, r1
 800ef90:	4611      	mov	r1, r2
 800ef92:	461a      	mov	r2, r3
 800ef94:	4623      	mov	r3, r4
 800ef96:	80fb      	strh	r3, [r7, #6]
 800ef98:	4603      	mov	r3, r0
 800ef9a:	80bb      	strh	r3, [r7, #4]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	807b      	strh	r3, [r7, #2]
 800efa0:	4613      	mov	r3, r2
 800efa2:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800efa4:	2300      	movs	r3, #0
 800efa6:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800efa8:	7bfa      	ldrb	r2, [r7, #15]
 800efaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800efae:	429a      	cmp	r2, r3
 800efb0:	d939      	bls.n	800f026 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800efb2:	88ba      	ldrh	r2, [r7, #4]
 800efb4:	7bfb      	ldrb	r3, [r7, #15]
 800efb6:	441a      	add	r2, r3
 800efb8:	88b9      	ldrh	r1, [r7, #4]
 800efba:	883b      	ldrh	r3, [r7, #0]
 800efbc:	4419      	add	r1, r3
 800efbe:	7bfb      	ldrb	r3, [r7, #15]
 800efc0:	1acb      	subs	r3, r1, r3
 800efc2:	429a      	cmp	r2, r3
 800efc4:	f000 8089 	beq.w	800f0da <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800efc8:	88fa      	ldrh	r2, [r7, #6]
 800efca:	7bfb      	ldrb	r3, [r7, #15]
 800efcc:	441a      	add	r2, r3
 800efce:	88f9      	ldrh	r1, [r7, #6]
 800efd0:	887b      	ldrh	r3, [r7, #2]
 800efd2:	4419      	add	r1, r3
 800efd4:	7bfb      	ldrb	r3, [r7, #15]
 800efd6:	1acb      	subs	r3, r1, r3
 800efd8:	429a      	cmp	r2, r3
 800efda:	d07e      	beq.n	800f0da <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800efdc:	7bfb      	ldrb	r3, [r7, #15]
 800efde:	b29a      	uxth	r2, r3
 800efe0:	88fb      	ldrh	r3, [r7, #6]
 800efe2:	4413      	add	r3, r2
 800efe4:	b298      	uxth	r0, r3
 800efe6:	7bfb      	ldrb	r3, [r7, #15]
 800efe8:	b29a      	uxth	r2, r3
 800efea:	88bb      	ldrh	r3, [r7, #4]
 800efec:	4413      	add	r3, r2
 800efee:	b299      	uxth	r1, r3
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	005b      	lsls	r3, r3, #1
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	887a      	ldrh	r2, [r7, #2]
 800effa:	1ad3      	subs	r3, r2, r3
 800effc:	b29b      	uxth	r3, r3
 800effe:	3301      	adds	r3, #1
 800f000:	b29c      	uxth	r4, r3
 800f002:	7bfb      	ldrb	r3, [r7, #15]
 800f004:	b29b      	uxth	r3, r3
 800f006:	005b      	lsls	r3, r3, #1
 800f008:	b29b      	uxth	r3, r3
 800f00a:	883a      	ldrh	r2, [r7, #0]
 800f00c:	1ad3      	subs	r3, r2, r3
 800f00e:	b29b      	uxth	r3, r3
 800f010:	3301      	adds	r3, #1
 800f012:	b29a      	uxth	r2, r3
 800f014:	2304      	movs	r3, #4
 800f016:	9301      	str	r3, [sp, #4]
 800f018:	8c3b      	ldrh	r3, [r7, #32]
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	4613      	mov	r3, r2
 800f01e:	4622      	mov	r2, r4
 800f020:	f000 fd18 	bl	800fa54 <ILI9341_Draw_Rectangle>
				goto finish;
 800f024:	e05a      	b.n	800f0dc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f026:	7bfb      	ldrb	r3, [r7, #15]
 800f028:	b29a      	uxth	r2, r3
 800f02a:	88fb      	ldrh	r3, [r7, #6]
 800f02c:	4413      	add	r3, r2
 800f02e:	b298      	uxth	r0, r3
 800f030:	7bfb      	ldrb	r3, [r7, #15]
 800f032:	b29a      	uxth	r2, r3
 800f034:	88bb      	ldrh	r3, [r7, #4]
 800f036:	4413      	add	r3, r2
 800f038:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800f03a:	7bfb      	ldrb	r3, [r7, #15]
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	887a      	ldrh	r2, [r7, #2]
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f044:	3301      	adds	r3, #1
 800f046:	b29a      	uxth	r2, r3
 800f048:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f04a:	f000 fa6b 	bl	800f524 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f04e:	7bfb      	ldrb	r3, [r7, #15]
 800f050:	b29a      	uxth	r2, r3
 800f052:	88fb      	ldrh	r3, [r7, #6]
 800f054:	4413      	add	r3, r2
 800f056:	b298      	uxth	r0, r3
										(y + h) - b,
 800f058:	88ba      	ldrh	r2, [r7, #4]
 800f05a:	883b      	ldrh	r3, [r7, #0]
 800f05c:	4413      	add	r3, r2
 800f05e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	b29b      	uxth	r3, r3
 800f064:	1ad3      	subs	r3, r2, r3
 800f066:	b299      	uxth	r1, r3
										(w - b)+1,
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	887a      	ldrh	r2, [r7, #2]
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f072:	3301      	adds	r3, #1
 800f074:	b29a      	uxth	r2, r3
 800f076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f078:	f000 fa54 	bl	800f524 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
 800f07e:	b29a      	uxth	r2, r3
 800f080:	88fb      	ldrh	r3, [r7, #6]
 800f082:	4413      	add	r3, r2
 800f084:	b298      	uxth	r0, r3
 800f086:	7bfb      	ldrb	r3, [r7, #15]
 800f088:	b29a      	uxth	r2, r3
 800f08a:	88bb      	ldrh	r3, [r7, #4]
 800f08c:	4413      	add	r3, r2
 800f08e:	b299      	uxth	r1, r3
 800f090:	7bfb      	ldrb	r3, [r7, #15]
 800f092:	b29b      	uxth	r3, r3
 800f094:	005b      	lsls	r3, r3, #1
 800f096:	b29b      	uxth	r3, r3
 800f098:	883a      	ldrh	r2, [r7, #0]
 800f09a:	1ad3      	subs	r3, r2, r3
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f0a0:	f000 faa4 	bl	800f5ec <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800f0a4:	88fa      	ldrh	r2, [r7, #6]
 800f0a6:	887b      	ldrh	r3, [r7, #2]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	7bfb      	ldrb	r3, [r7, #15]
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	b298      	uxth	r0, r3
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	88bb      	ldrh	r3, [r7, #4]
 800f0ba:	4413      	add	r3, r2
 800f0bc:	b299      	uxth	r1, r3
 800f0be:	7bfb      	ldrb	r3, [r7, #15]
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	883a      	ldrh	r2, [r7, #0]
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f0ce:	f000 fa8d 	bl	800f5ec <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800f0d2:	7bfb      	ldrb	r3, [r7, #15]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800f0d8:	e766      	b.n	800efa8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800f0da:	bf00      	nop
	// done
	return;
 800f0dc:	bf00      	nop
}
 800f0de:	3714      	adds	r7, #20
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd90      	pop	{r4, r7, pc}

0800f0e4 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f0e4:	b590      	push	{r4, r7, lr}
 800f0e6:	b089      	sub	sp, #36	; 0x24
 800f0e8:	af02      	add	r7, sp, #8
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	4608      	mov	r0, r1
 800f0ee:	4611      	mov	r1, r2
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	4623      	mov	r3, r4
 800f0f4:	71fb      	strb	r3, [r7, #7]
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	80bb      	strh	r3, [r7, #4]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	807b      	strh	r3, [r7, #2]
 800f0fe:	4613      	mov	r3, r2
 800f100:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800f102:	79fb      	ldrb	r3, [r7, #7]
 800f104:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800f106:	7dfb      	ldrb	r3, [r7, #23]
 800f108:	2b1f      	cmp	r3, #31
 800f10a:	d802      	bhi.n	800f112 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	71fb      	strb	r3, [r7, #7]
 800f110:	e002      	b.n	800f118 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	3b20      	subs	r3, #32
 800f116:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f118:	2300      	movs	r3, #0
 800f11a:	753b      	strb	r3, [r7, #20]
 800f11c:	e012      	b.n	800f144 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800f11e:	7dfa      	ldrb	r2, [r7, #23]
 800f120:	7d38      	ldrb	r0, [r7, #20]
 800f122:	7d39      	ldrb	r1, [r7, #20]
 800f124:	4c48      	ldr	r4, [pc, #288]	; (800f248 <ILI9341_Draw_Char+0x164>)
 800f126:	4613      	mov	r3, r2
 800f128:	005b      	lsls	r3, r3, #1
 800f12a:	4413      	add	r3, r2
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	4423      	add	r3, r4
 800f130:	4403      	add	r3, r0
 800f132:	781a      	ldrb	r2, [r3, #0]
 800f134:	f107 0318 	add.w	r3, r7, #24
 800f138:	440b      	add	r3, r1
 800f13a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f13e:	7d3b      	ldrb	r3, [r7, #20]
 800f140:	3301      	adds	r3, #1
 800f142:	753b      	strb	r3, [r7, #20]
 800f144:	7d3b      	ldrb	r3, [r7, #20]
 800f146:	2b05      	cmp	r3, #5
 800f148:	d9e9      	bls.n	800f11e <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800f14a:	2300      	movs	r3, #0
 800f14c:	757b      	strb	r3, [r7, #21]
 800f14e:	e074      	b.n	800f23a <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800f150:	2300      	movs	r3, #0
 800f152:	75bb      	strb	r3, [r7, #22]
 800f154:	e06b      	b.n	800f22e <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800f156:	7d7b      	ldrb	r3, [r7, #21]
 800f158:	f107 0218 	add.w	r2, r7, #24
 800f15c:	4413      	add	r3, r2
 800f15e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f162:	461a      	mov	r2, r3
 800f164:	7dbb      	ldrb	r3, [r7, #22]
 800f166:	fa42 f303 	asr.w	r3, r2, r3
 800f16a:	f003 0301 	and.w	r3, r3, #1
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d02d      	beq.n	800f1ce <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800f172:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f174:	2b01      	cmp	r3, #1
 800f176:	d10e      	bne.n	800f196 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800f178:	7d7b      	ldrb	r3, [r7, #21]
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	88bb      	ldrh	r3, [r7, #4]
 800f17e:	4413      	add	r3, r2
 800f180:	b298      	uxth	r0, r3
 800f182:	7dbb      	ldrb	r3, [r7, #22]
 800f184:	b29a      	uxth	r2, r3
 800f186:	887b      	ldrh	r3, [r7, #2]
 800f188:	4413      	add	r3, r2
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	883a      	ldrh	r2, [r7, #0]
 800f18e:	4619      	mov	r1, r3
 800f190:	f000 fb06 	bl	800f7a0 <ILI9341_Draw_Pixel>
 800f194:	e048      	b.n	800f228 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800f196:	7d7b      	ldrb	r3, [r7, #21]
 800f198:	b29b      	uxth	r3, r3
 800f19a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f19c:	fb12 f303 	smulbb	r3, r2, r3
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	88bb      	ldrh	r3, [r7, #4]
 800f1a4:	4413      	add	r3, r2
 800f1a6:	b298      	uxth	r0, r3
 800f1a8:	7dbb      	ldrb	r3, [r7, #22]
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f1ae:	fb12 f303 	smulbb	r3, r2, r3
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	887b      	ldrh	r3, [r7, #2]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	b299      	uxth	r1, r3
 800f1ba:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f1bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f1be:	2301      	movs	r3, #1
 800f1c0:	9301      	str	r3, [sp, #4]
 800f1c2:	883b      	ldrh	r3, [r7, #0]
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	4623      	mov	r3, r4
 800f1c8:	f000 fc44 	bl	800fa54 <ILI9341_Draw_Rectangle>
 800f1cc:	e02c      	b.n	800f228 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800f1ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d10e      	bne.n	800f1f2 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800f1d4:	7d7b      	ldrb	r3, [r7, #21]
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	88bb      	ldrh	r3, [r7, #4]
 800f1da:	4413      	add	r3, r2
 800f1dc:	b298      	uxth	r0, r3
 800f1de:	7dbb      	ldrb	r3, [r7, #22]
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	887b      	ldrh	r3, [r7, #2]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	f000 fad8 	bl	800f7a0 <ILI9341_Draw_Pixel>
 800f1f0:	e01a      	b.n	800f228 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800f1f2:	7d7b      	ldrb	r3, [r7, #21]
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f1f8:	fb12 f303 	smulbb	r3, r2, r3
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	88bb      	ldrh	r3, [r7, #4]
 800f200:	4413      	add	r3, r2
 800f202:	b298      	uxth	r0, r3
 800f204:	7dbb      	ldrb	r3, [r7, #22]
 800f206:	b29b      	uxth	r3, r3
 800f208:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f20a:	fb12 f303 	smulbb	r3, r2, r3
 800f20e:	b29a      	uxth	r2, r3
 800f210:	887b      	ldrh	r3, [r7, #2]
 800f212:	4413      	add	r3, r2
 800f214:	b299      	uxth	r1, r3
 800f216:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f218:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f21a:	2301      	movs	r3, #1
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f220:	9300      	str	r3, [sp, #0]
 800f222:	4623      	mov	r3, r4
 800f224:	f000 fc16 	bl	800fa54 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800f228:	7dbb      	ldrb	r3, [r7, #22]
 800f22a:	3301      	adds	r3, #1
 800f22c:	75bb      	strb	r3, [r7, #22]
 800f22e:	7dbb      	ldrb	r3, [r7, #22]
 800f230:	2b07      	cmp	r3, #7
 800f232:	d990      	bls.n	800f156 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800f234:	7d7b      	ldrb	r3, [r7, #21]
 800f236:	3301      	adds	r3, #1
 800f238:	757b      	strb	r3, [r7, #21]
 800f23a:	7d7b      	ldrb	r3, [r7, #21]
 800f23c:	2b05      	cmp	r3, #5
 800f23e:	d987      	bls.n	800f150 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800f240:	bf00      	nop
 800f242:	371c      	adds	r7, #28
 800f244:	46bd      	mov	sp, r7
 800f246:	bd90      	pop	{r4, r7, pc}
 800f248:	08014fb0 	.word	0x08014fb0

0800f24c <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f24c:	b590      	push	{r4, r7, lr}
 800f24e:	b087      	sub	sp, #28
 800f250:	af02      	add	r7, sp, #8
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	4608      	mov	r0, r1
 800f256:	4611      	mov	r1, r2
 800f258:	461a      	mov	r2, r3
 800f25a:	4603      	mov	r3, r0
 800f25c:	817b      	strh	r3, [r7, #10]
 800f25e:	460b      	mov	r3, r1
 800f260:	813b      	strh	r3, [r7, #8]
 800f262:	4613      	mov	r3, r2
 800f264:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800f266:	897b      	ldrh	r3, [r7, #10]
 800f268:	3b01      	subs	r3, #1
 800f26a:	b298      	uxth	r0, r3
 800f26c:	8c3b      	ldrh	r3, [r7, #32]
 800f26e:	00db      	lsls	r3, r3, #3
 800f270:	b29a      	uxth	r2, r3
 800f272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f274:	8939      	ldrh	r1, [r7, #8]
 800f276:	f000 f9b9 	bl	800f5ec <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800f27a:	897b      	ldrh	r3, [r7, #10]
 800f27c:	3b02      	subs	r3, #2
 800f27e:	b298      	uxth	r0, r3
 800f280:	8c3b      	ldrh	r3, [r7, #32]
 800f282:	00db      	lsls	r3, r3, #3
 800f284:	b29a      	uxth	r2, r3
 800f286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f288:	8939      	ldrh	r1, [r7, #8]
 800f28a:	f000 f9af 	bl	800f5ec <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800f28e:	e016      	b.n	800f2be <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	1c5a      	adds	r2, r3, #1
 800f294:	60fa      	str	r2, [r7, #12]
 800f296:	7818      	ldrb	r0, [r3, #0]
 800f298:	88fc      	ldrh	r4, [r7, #6]
 800f29a:	893a      	ldrh	r2, [r7, #8]
 800f29c:	8979      	ldrh	r1, [r7, #10]
 800f29e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2a0:	9301      	str	r3, [sp, #4]
 800f2a2:	8c3b      	ldrh	r3, [r7, #32]
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	4623      	mov	r3, r4
 800f2a8:	f7ff ff1c 	bl	800f0e4 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800f2ac:	8c3b      	ldrh	r3, [r7, #32]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	0052      	lsls	r2, r2, #1
 800f2b2:	4413      	add	r3, r2
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	b29a      	uxth	r2, r3
 800f2b8:	897b      	ldrh	r3, [r7, #10]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1e4      	bne.n	800f290 <ILI9341_Draw_Text+0x44>
    }


}
 800f2c6:	bf00      	nop
 800f2c8:	3714      	adds	r7, #20
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd90      	pop	{r4, r7, pc}

0800f2ce <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800f2ce:	b580      	push	{r7, lr}
 800f2d0:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800f2d2:	f000 fca3 	bl	800fc1c <_LCD_Enable>
	ILI9341_SPI_Init();
 800f2d6:	f000 f907 	bl	800f4e8 <ILI9341_SPI_Init>
	_LCD_Reset();
 800f2da:	f000 fcaf 	bl	800fc3c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800f2de:	2001      	movs	r0, #1
 800f2e0:	f000 fd7a 	bl	800fdd8 <_LCD_SendCommand>
	HAL_Delay(2000);
 800f2e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f2e8:	f7f9 f9c2 	bl	8008670 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800f2ec:	20cb      	movs	r0, #203	; 0xcb
 800f2ee:	f000 fd73 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800f2f2:	2039      	movs	r0, #57	; 0x39
 800f2f4:	f000 fda2 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x2C);
 800f2f8:	202c      	movs	r0, #44	; 0x2c
 800f2fa:	f000 fd9f 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x00);
 800f2fe:	2000      	movs	r0, #0
 800f300:	f000 fd9c 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x34);
 800f304:	2034      	movs	r0, #52	; 0x34
 800f306:	f000 fd99 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x02);
 800f30a:	2002      	movs	r0, #2
 800f30c:	f000 fd96 	bl	800fe3c <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800f310:	20cf      	movs	r0, #207	; 0xcf
 800f312:	f000 fd61 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f316:	2000      	movs	r0, #0
 800f318:	f000 fd90 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f31c:	20c1      	movs	r0, #193	; 0xc1
 800f31e:	f000 fd8d 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x30);
 800f322:	2030      	movs	r0, #48	; 0x30
 800f324:	f000 fd8a 	bl	800fe3c <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800f328:	20e8      	movs	r0, #232	; 0xe8
 800f32a:	f000 fd55 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800f32e:	2085      	movs	r0, #133	; 0x85
 800f330:	f000 fd84 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x00);
 800f334:	2000      	movs	r0, #0
 800f336:	f000 fd81 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x78);
 800f33a:	2078      	movs	r0, #120	; 0x78
 800f33c:	f000 fd7e 	bl	800fe3c <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800f340:	20ea      	movs	r0, #234	; 0xea
 800f342:	f000 fd49 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f346:	2000      	movs	r0, #0
 800f348:	f000 fd78 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x00);
 800f34c:	2000      	movs	r0, #0
 800f34e:	f000 fd75 	bl	800fe3c <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800f352:	20ed      	movs	r0, #237	; 0xed
 800f354:	f000 fd40 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800f358:	2064      	movs	r0, #100	; 0x64
 800f35a:	f000 fd6f 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x03);
 800f35e:	2003      	movs	r0, #3
 800f360:	f000 fd6c 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x12);
 800f364:	2012      	movs	r0, #18
 800f366:	f000 fd69 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x81);
 800f36a:	2081      	movs	r0, #129	; 0x81
 800f36c:	f000 fd66 	bl	800fe3c <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800f370:	20f7      	movs	r0, #247	; 0xf7
 800f372:	f000 fd31 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800f376:	2020      	movs	r0, #32
 800f378:	f000 fd60 	bl	800fe3c <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800f37c:	20c0      	movs	r0, #192	; 0xc0
 800f37e:	f000 fd2b 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800f382:	2023      	movs	r0, #35	; 0x23
 800f384:	f000 fd5a 	bl	800fe3c <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800f388:	20c1      	movs	r0, #193	; 0xc1
 800f38a:	f000 fd25 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800f38e:	2010      	movs	r0, #16
 800f390:	f000 fd54 	bl	800fe3c <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800f394:	20c5      	movs	r0, #197	; 0xc5
 800f396:	f000 fd1f 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800f39a:	203e      	movs	r0, #62	; 0x3e
 800f39c:	f000 fd4e 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x28);
 800f3a0:	2028      	movs	r0, #40	; 0x28
 800f3a2:	f000 fd4b 	bl	800fe3c <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800f3a6:	20c7      	movs	r0, #199	; 0xc7
 800f3a8:	f000 fd16 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800f3ac:	2086      	movs	r0, #134	; 0x86
 800f3ae:	f000 fd45 	bl	800fe3c <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800f3b2:	2036      	movs	r0, #54	; 0x36
 800f3b4:	f000 fd10 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800f3b8:	2048      	movs	r0, #72	; 0x48
 800f3ba:	f000 fd3f 	bl	800fe3c <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800f3be:	203a      	movs	r0, #58	; 0x3a
 800f3c0:	f000 fd0a 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800f3c4:	2055      	movs	r0, #85	; 0x55
 800f3c6:	f000 fd39 	bl	800fe3c <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800f3ca:	20b1      	movs	r0, #177	; 0xb1
 800f3cc:	f000 fd04 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	f000 fd33 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x18);
 800f3d6:	2018      	movs	r0, #24
 800f3d8:	f000 fd30 	bl	800fe3c <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800f3dc:	20b6      	movs	r0, #182	; 0xb6
 800f3de:	f000 fcfb 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800f3e2:	2008      	movs	r0, #8
 800f3e4:	f000 fd2a 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x82);
 800f3e8:	2082      	movs	r0, #130	; 0x82
 800f3ea:	f000 fd27 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x27);
 800f3ee:	2027      	movs	r0, #39	; 0x27
 800f3f0:	f000 fd24 	bl	800fe3c <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800f3f4:	20f2      	movs	r0, #242	; 0xf2
 800f3f6:	f000 fcef 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	f000 fd1e 	bl	800fe3c <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800f400:	2026      	movs	r0, #38	; 0x26
 800f402:	f000 fce9 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800f406:	2001      	movs	r0, #1
 800f408:	f000 fd18 	bl	800fe3c <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800f40c:	20e0      	movs	r0, #224	; 0xe0
 800f40e:	f000 fce3 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800f412:	200f      	movs	r0, #15
 800f414:	f000 fd12 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x31);
 800f418:	2031      	movs	r0, #49	; 0x31
 800f41a:	f000 fd0f 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x2B);
 800f41e:	202b      	movs	r0, #43	; 0x2b
 800f420:	f000 fd0c 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f424:	200c      	movs	r0, #12
 800f426:	f000 fd09 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f42a:	200e      	movs	r0, #14
 800f42c:	f000 fd06 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x08);
 800f430:	2008      	movs	r0, #8
 800f432:	f000 fd03 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x4E);
 800f436:	204e      	movs	r0, #78	; 0x4e
 800f438:	f000 fd00 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0xF1);
 800f43c:	20f1      	movs	r0, #241	; 0xf1
 800f43e:	f000 fcfd 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x37);
 800f442:	2037      	movs	r0, #55	; 0x37
 800f444:	f000 fcfa 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x07);
 800f448:	2007      	movs	r0, #7
 800f44a:	f000 fcf7 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x10);
 800f44e:	2010      	movs	r0, #16
 800f450:	f000 fcf4 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x03);
 800f454:	2003      	movs	r0, #3
 800f456:	f000 fcf1 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f45a:	200e      	movs	r0, #14
 800f45c:	f000 fcee 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x09);
 800f460:	2009      	movs	r0, #9
 800f462:	f000 fceb 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x00);
 800f466:	2000      	movs	r0, #0
 800f468:	f000 fce8 	bl	800fe3c <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800f46c:	20e1      	movs	r0, #225	; 0xe1
 800f46e:	f000 fcb3 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f472:	2000      	movs	r0, #0
 800f474:	f000 fce2 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f478:	200e      	movs	r0, #14
 800f47a:	f000 fcdf 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x14);
 800f47e:	2014      	movs	r0, #20
 800f480:	f000 fcdc 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x03);
 800f484:	2003      	movs	r0, #3
 800f486:	f000 fcd9 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x11);
 800f48a:	2011      	movs	r0, #17
 800f48c:	f000 fcd6 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x07);
 800f490:	2007      	movs	r0, #7
 800f492:	f000 fcd3 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x31);
 800f496:	2031      	movs	r0, #49	; 0x31
 800f498:	f000 fcd0 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f49c:	20c1      	movs	r0, #193	; 0xc1
 800f49e:	f000 fccd 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x48);
 800f4a2:	2048      	movs	r0, #72	; 0x48
 800f4a4:	f000 fcca 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x08);
 800f4a8:	2008      	movs	r0, #8
 800f4aa:	f000 fcc7 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800f4ae:	200f      	movs	r0, #15
 800f4b0:	f000 fcc4 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f4b4:	200c      	movs	r0, #12
 800f4b6:	f000 fcc1 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x31);
 800f4ba:	2031      	movs	r0, #49	; 0x31
 800f4bc:	f000 fcbe 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x36);
 800f4c0:	2036      	movs	r0, #54	; 0x36
 800f4c2:	f000 fcbb 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800f4c6:	200f      	movs	r0, #15
 800f4c8:	f000 fcb8 	bl	800fe3c <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800f4cc:	2011      	movs	r0, #17
 800f4ce:	f000 fc83 	bl	800fdd8 <_LCD_SendCommand>
	HAL_Delay(240);
 800f4d2:	20f0      	movs	r0, #240	; 0xf0
 800f4d4:	f7f9 f8cc 	bl	8008670 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800f4d8:	2029      	movs	r0, #41	; 0x29
 800f4da:	f000 fc7d 	bl	800fdd8 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800f4de:	2000      	movs	r0, #0
 800f4e0:	f000 fb4e 	bl	800fb80 <ILI9341_Set_Rotation>
}
 800f4e4:	bf00      	nop
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f4ec:	4b0b      	ldr	r3, [pc, #44]	; (800f51c <ILI9341_SPI_Init+0x34>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4f4:	2b40      	cmp	r3, #64	; 0x40
 800f4f6:	d005      	beq.n	800f504 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800f4f8:	4b08      	ldr	r3, [pc, #32]	; (800f51c <ILI9341_SPI_Init+0x34>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a07      	ldr	r2, [pc, #28]	; (800f51c <ILI9341_SPI_Init+0x34>)
 800f4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f502:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f504:	4b06      	ldr	r3, [pc, #24]	; (800f520 <ILI9341_SPI_Init+0x38>)
 800f506:	695b      	ldr	r3, [r3, #20]
 800f508:	4a05      	ldr	r2, [pc, #20]	; (800f520 <ILI9341_SPI_Init+0x38>)
 800f50a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f50e:	6153      	str	r3, [r2, #20]
}
 800f510:	bf00      	nop
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
 800f51a:	bf00      	nop
 800f51c:	40003c00 	.word	0x40003c00
 800f520:	48000400 	.word	0x48000400

0800f524 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800f524:	b590      	push	{r4, r7, lr}
 800f526:	b087      	sub	sp, #28
 800f528:	af02      	add	r7, sp, #8
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	4611      	mov	r1, r2
 800f530:	461a      	mov	r2, r3
 800f532:	4623      	mov	r3, r4
 800f534:	80fb      	strh	r3, [r7, #6]
 800f536:	4603      	mov	r3, r0
 800f538:	80bb      	strh	r3, [r7, #4]
 800f53a:	460b      	mov	r3, r1
 800f53c:	807b      	strh	r3, [r7, #2]
 800f53e:	4613      	mov	r3, r2
 800f540:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800f542:	4b28      	ldr	r3, [pc, #160]	; (800f5e4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800f544:	881b      	ldrh	r3, [r3, #0]
 800f546:	b29b      	uxth	r3, r3
 800f548:	88fa      	ldrh	r2, [r7, #6]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d246      	bcs.n	800f5dc <ILI9341_Draw_Horizontal_Line+0xb8>
 800f54e:	4b26      	ldr	r3, [pc, #152]	; (800f5e8 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800f550:	881b      	ldrh	r3, [r3, #0]
 800f552:	b29b      	uxth	r3, r3
 800f554:	88ba      	ldrh	r2, [r7, #4]
 800f556:	429a      	cmp	r2, r3
 800f558:	d240      	bcs.n	800f5dc <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800f55a:	88fa      	ldrh	r2, [r7, #6]
 800f55c:	887b      	ldrh	r3, [r7, #2]
 800f55e:	4413      	add	r3, r2
 800f560:	3b01      	subs	r3, #1
 800f562:	4a20      	ldr	r2, [pc, #128]	; (800f5e4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800f564:	8812      	ldrh	r2, [r2, #0]
 800f566:	b292      	uxth	r2, r2
 800f568:	4293      	cmp	r3, r2
 800f56a:	db05      	blt.n	800f578 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800f56c:	4b1d      	ldr	r3, [pc, #116]	; (800f5e4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800f56e:	881b      	ldrh	r3, [r3, #0]
 800f570:	b29a      	uxth	r2, r3
 800f572:	88fb      	ldrh	r3, [r7, #6]
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800f578:	88fa      	ldrh	r2, [r7, #6]
 800f57a:	887b      	ldrh	r3, [r7, #2]
 800f57c:	4413      	add	r3, r2
 800f57e:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800f580:	3b01      	subs	r3, #1
 800f582:	b29a      	uxth	r2, r3
 800f584:	88bb      	ldrh	r3, [r7, #4]
 800f586:	88b9      	ldrh	r1, [r7, #4]
 800f588:	88f8      	ldrh	r0, [r7, #6]
 800f58a:	f000 f893 	bl	800f6b4 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800f58e:	2300      	movs	r3, #0
 800f590:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800f592:	887b      	ldrh	r3, [r7, #2]
 800f594:	f003 0301 	and.w	r3, r3, #1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d009      	beq.n	800f5b0 <ILI9341_Draw_Horizontal_Line+0x8c>
 800f59c:	887b      	ldrh	r3, [r7, #2]
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d906      	bls.n	800f5b0 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800f5a6:	887b      	ldrh	r3, [r7, #2]
 800f5a8:	085b      	lsrs	r3, r3, #1
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	005b      	lsls	r3, r3, #1
 800f5ae:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800f5b0:	887c      	ldrh	r4, [r7, #2]
 800f5b2:	883a      	ldrh	r2, [r7, #0]
 800f5b4:	88b9      	ldrh	r1, [r7, #4]
 800f5b6:	88f8      	ldrh	r0, [r7, #6]
 800f5b8:	2303      	movs	r3, #3
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	4623      	mov	r3, r4
 800f5be:	f000 fb5b 	bl	800fc78 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800f5c2:	7bfb      	ldrb	r3, [r7, #15]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00a      	beq.n	800f5de <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800f5c8:	88fa      	ldrh	r2, [r7, #6]
 800f5ca:	887b      	ldrh	r3, [r7, #2]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	883a      	ldrh	r2, [r7, #0]
 800f5d2:	88b9      	ldrh	r1, [r7, #4]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f000 f8e3 	bl	800f7a0 <ILI9341_Draw_Pixel>
 800f5da:	e000      	b.n	800f5de <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800f5dc:	bf00      	nop
							(ypos),
							colour);
	}


}
 800f5de:	3714      	adds	r7, #20
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd90      	pop	{r4, r7, pc}
 800f5e4:	20000c3e 	.word	0x20000c3e
 800f5e8:	20000c3c 	.word	0x20000c3c

0800f5ec <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800f5ec:	b590      	push	{r4, r7, lr}
 800f5ee:	b087      	sub	sp, #28
 800f5f0:	af02      	add	r7, sp, #8
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	4608      	mov	r0, r1
 800f5f6:	4611      	mov	r1, r2
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	4623      	mov	r3, r4
 800f5fc:	80fb      	strh	r3, [r7, #6]
 800f5fe:	4603      	mov	r3, r0
 800f600:	80bb      	strh	r3, [r7, #4]
 800f602:	460b      	mov	r3, r1
 800f604:	807b      	strh	r3, [r7, #2]
 800f606:	4613      	mov	r3, r2
 800f608:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800f60a:	4b28      	ldr	r3, [pc, #160]	; (800f6ac <ILI9341_Draw_Vertical_Line+0xc0>)
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	b29b      	uxth	r3, r3
 800f610:	88fa      	ldrh	r2, [r7, #6]
 800f612:	429a      	cmp	r2, r3
 800f614:	d246      	bcs.n	800f6a4 <ILI9341_Draw_Vertical_Line+0xb8>
 800f616:	4b26      	ldr	r3, [pc, #152]	; (800f6b0 <ILI9341_Draw_Vertical_Line+0xc4>)
 800f618:	881b      	ldrh	r3, [r3, #0]
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	88ba      	ldrh	r2, [r7, #4]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d240      	bcs.n	800f6a4 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800f622:	88ba      	ldrh	r2, [r7, #4]
 800f624:	887b      	ldrh	r3, [r7, #2]
 800f626:	4413      	add	r3, r2
 800f628:	3b01      	subs	r3, #1
 800f62a:	4a21      	ldr	r2, [pc, #132]	; (800f6b0 <ILI9341_Draw_Vertical_Line+0xc4>)
 800f62c:	8812      	ldrh	r2, [r2, #0]
 800f62e:	b292      	uxth	r2, r2
 800f630:	4293      	cmp	r3, r2
 800f632:	db05      	blt.n	800f640 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800f634:	4b1e      	ldr	r3, [pc, #120]	; (800f6b0 <ILI9341_Draw_Vertical_Line+0xc4>)
 800f636:	881b      	ldrh	r3, [r3, #0]
 800f638:	b29a      	uxth	r2, r3
 800f63a:	88bb      	ldrh	r3, [r7, #4]
 800f63c:	1ad3      	subs	r3, r2, r3
 800f63e:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800f640:	88ba      	ldrh	r2, [r7, #4]
 800f642:	887b      	ldrh	r3, [r7, #2]
 800f644:	4413      	add	r3, r2
 800f646:	b29b      	uxth	r3, r3
 800f648:	3b01      	subs	r3, #1
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	88fa      	ldrh	r2, [r7, #6]
 800f64e:	88b9      	ldrh	r1, [r7, #4]
 800f650:	88f8      	ldrh	r0, [r7, #6]
 800f652:	f000 f82f 	bl	800f6b4 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800f656:	2300      	movs	r3, #0
 800f658:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800f65a:	887b      	ldrh	r3, [r7, #2]
 800f65c:	f003 0301 	and.w	r3, r3, #1
 800f660:	2b00      	cmp	r3, #0
 800f662:	d009      	beq.n	800f678 <ILI9341_Draw_Vertical_Line+0x8c>
 800f664:	887b      	ldrh	r3, [r7, #2]
 800f666:	2b01      	cmp	r3, #1
 800f668:	d906      	bls.n	800f678 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800f66a:	2301      	movs	r3, #1
 800f66c:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800f66e:	887b      	ldrh	r3, [r7, #2]
 800f670:	085b      	lsrs	r3, r3, #1
 800f672:	b29b      	uxth	r3, r3
 800f674:	005b      	lsls	r3, r3, #1
 800f676:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800f678:	7bfb      	ldrb	r3, [r7, #15]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d008      	beq.n	800f690 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800f67e:	88ba      	ldrh	r2, [r7, #4]
 800f680:	887b      	ldrh	r3, [r7, #2]
 800f682:	4413      	add	r3, r2
 800f684:	b299      	uxth	r1, r3
 800f686:	883a      	ldrh	r2, [r7, #0]
 800f688:	88fb      	ldrh	r3, [r7, #6]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 f888 	bl	800f7a0 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800f690:	887c      	ldrh	r4, [r7, #2]
 800f692:	883a      	ldrh	r2, [r7, #0]
 800f694:	88b9      	ldrh	r1, [r7, #4]
 800f696:	88f8      	ldrh	r0, [r7, #6]
 800f698:	2303      	movs	r3, #3
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	4623      	mov	r3, r4
 800f69e:	f000 faeb 	bl	800fc78 <_LCD_Write_Frame>
 800f6a2:	e000      	b.n	800f6a6 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800f6a4:	bf00      	nop
}
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd90      	pop	{r4, r7, pc}
 800f6ac:	20000c3e 	.word	0x20000c3e
 800f6b0:	20000c3c 	.word	0x20000c3c

0800f6b4 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800f6b4:	b590      	push	{r4, r7, lr}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	4608      	mov	r0, r1
 800f6be:	4611      	mov	r1, r2
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	4623      	mov	r3, r4
 800f6c4:	80fb      	strh	r3, [r7, #6]
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	80bb      	strh	r3, [r7, #4]
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	807b      	strh	r3, [r7, #2]
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800f6d2:	202a      	movs	r0, #42	; 0x2a
 800f6d4:	f000 fb80 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800f6d8:	88fb      	ldrh	r3, [r7, #6]
 800f6da:	0a1b      	lsrs	r3, r3, #8
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f000 fbab 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(sc);
 800f6e6:	88fb      	ldrh	r3, [r7, #6]
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f000 fba6 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800f6f0:	887b      	ldrh	r3, [r7, #2]
 800f6f2:	0a1b      	lsrs	r3, r3, #8
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f000 fb9f 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(ec);
 800f6fe:	887b      	ldrh	r3, [r7, #2]
 800f700:	b2db      	uxtb	r3, r3
 800f702:	4618      	mov	r0, r3
 800f704:	f000 fb9a 	bl	800fe3c <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800f708:	202b      	movs	r0, #43	; 0x2b
 800f70a:	f000 fb65 	bl	800fdd8 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800f70e:	88bb      	ldrh	r3, [r7, #4]
 800f710:	0a1b      	lsrs	r3, r3, #8
 800f712:	b29b      	uxth	r3, r3
 800f714:	b2db      	uxtb	r3, r3
 800f716:	4618      	mov	r0, r3
 800f718:	f000 fb90 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(sp);
 800f71c:	88bb      	ldrh	r3, [r7, #4]
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	4618      	mov	r0, r3
 800f722:	f000 fb8b 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800f726:	883b      	ldrh	r3, [r7, #0]
 800f728:	0a1b      	lsrs	r3, r3, #8
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	4618      	mov	r0, r3
 800f730:	f000 fb84 	bl	800fe3c <_LCD_SendData>
	_LCD_SendData(ep);
 800f734:	883b      	ldrh	r3, [r7, #0]
 800f736:	b2db      	uxtb	r3, r3
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 fb7f 	bl	800fe3c <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800f73e:	202c      	movs	r0, #44	; 0x2c
 800f740:	f000 fb4a 	bl	800fdd8 <_LCD_SendCommand>
}
 800f744:	bf00      	nop
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd90      	pop	{r4, r7, pc}

0800f74c <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af02      	add	r7, sp, #8
 800f752:	4603      	mov	r3, r0
 800f754:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800f756:	4b10      	ldr	r3, [pc, #64]	; (800f798 <ILI9341_Fill_Screen+0x4c>)
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	4b0f      	ldr	r3, [pc, #60]	; (800f79c <ILI9341_Fill_Screen+0x50>)
 800f75e:	881b      	ldrh	r3, [r3, #0]
 800f760:	b29b      	uxth	r3, r3
 800f762:	2100      	movs	r1, #0
 800f764:	2000      	movs	r0, #0
 800f766:	f7ff ffa5 	bl	800f6b4 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800f76a:	4b0b      	ldr	r3, [pc, #44]	; (800f798 <ILI9341_Fill_Screen+0x4c>)
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	b29b      	uxth	r3, r3
 800f770:	461a      	mov	r2, r3
 800f772:	4b0a      	ldr	r3, [pc, #40]	; (800f79c <ILI9341_Fill_Screen+0x50>)
 800f774:	881b      	ldrh	r3, [r3, #0]
 800f776:	b29b      	uxth	r3, r3
 800f778:	fb03 f302 	mul.w	r3, r3, r2
 800f77c:	4619      	mov	r1, r3
 800f77e:	88fa      	ldrh	r2, [r7, #6]
 800f780:	2304      	movs	r3, #4
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	460b      	mov	r3, r1
 800f786:	2100      	movs	r1, #0
 800f788:	2000      	movs	r0, #0
 800f78a:	f000 fa75 	bl	800fc78 <_LCD_Write_Frame>
}
 800f78e:	bf00      	nop
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	20000c3e 	.word	0x20000c3e
 800f79c:	20000c3c 	.word	0x20000c3c

0800f7a0 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b08e      	sub	sp, #56	; 0x38
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	80fb      	strh	r3, [r7, #6]
 800f7aa:	460b      	mov	r3, r1
 800f7ac:	80bb      	strh	r3, [r7, #4]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800f7b2:	4b98      	ldr	r3, [pc, #608]	; (800fa14 <ILI9341_Draw_Pixel+0x274>)
 800f7b4:	881b      	ldrh	r3, [r3, #0]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	88fa      	ldrh	r2, [r7, #6]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	f080 8143 	bcs.w	800fa46 <ILI9341_Draw_Pixel+0x2a6>
 800f7c0:	4b95      	ldr	r3, [pc, #596]	; (800fa18 <ILI9341_Draw_Pixel+0x278>)
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	88ba      	ldrh	r2, [r7, #4]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	f080 813c 	bcs.w	800fa46 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f7ce:	4b93      	ldr	r3, [pc, #588]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f7d0:	695b      	ldr	r3, [r3, #20]
 800f7d2:	4a92      	ldr	r2, [pc, #584]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f7d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7d8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f7da:	4b90      	ldr	r3, [pc, #576]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f7dc:	695b      	ldr	r3, [r3, #20]
 800f7de:	4a8f      	ldr	r2, [pc, #572]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f7e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7e4:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800f7e6:	220a      	movs	r2, #10
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	202a      	movs	r0, #42	; 0x2a
 800f7ec:	f000 fb58 	bl	800fea0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f7f4:	e008      	b.n	800f808 <ILI9341_Draw_Pixel+0x68>
 800f7f6:	4b89      	ldr	r3, [pc, #548]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f7f8:	695b      	ldr	r3, [r3, #20]
 800f7fa:	4a88      	ldr	r2, [pc, #544]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f7fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f800:	6153      	str	r3, [r2, #20]
 800f802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f804:	3301      	adds	r3, #1
 800f806:	637b      	str	r3, [r7, #52]	; 0x34
 800f808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f80a:	2b02      	cmp	r3, #2
 800f80c:	ddf3      	ble.n	800f7f6 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f80e:	4b83      	ldr	r3, [pc, #524]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f810:	695b      	ldr	r3, [r3, #20]
 800f812:	4a82      	ldr	r2, [pc, #520]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f818:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f81a:	4b80      	ldr	r3, [pc, #512]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f81c:	695b      	ldr	r3, [r3, #20]
 800f81e:	4a7f      	ldr	r2, [pc, #508]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f824:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f826:	4b7d      	ldr	r3, [pc, #500]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f828:	695b      	ldr	r3, [r3, #20]
 800f82a:	4a7c      	ldr	r2, [pc, #496]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f82c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f830:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800f832:	88fb      	ldrh	r3, [r7, #6]
 800f834:	0a1b      	lsrs	r3, r3, #8
 800f836:	b29b      	uxth	r3, r3
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	753b      	strb	r3, [r7, #20]
 800f83c:	88fb      	ldrh	r3, [r7, #6]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	757b      	strb	r3, [r7, #21]
 800f842:	88fb      	ldrh	r3, [r7, #6]
 800f844:	3301      	adds	r3, #1
 800f846:	121b      	asrs	r3, r3, #8
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	75bb      	strb	r3, [r7, #22]
 800f84c:	88fb      	ldrh	r3, [r7, #6]
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	3301      	adds	r3, #1
 800f852:	b2db      	uxtb	r3, r3
 800f854:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800f856:	f107 0014 	add.w	r0, r7, #20
 800f85a:	230a      	movs	r3, #10
 800f85c:	2200      	movs	r2, #0
 800f85e:	2104      	movs	r1, #4
 800f860:	f000 fb50 	bl	800ff04 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f864:	2300      	movs	r3, #0
 800f866:	633b      	str	r3, [r7, #48]	; 0x30
 800f868:	e008      	b.n	800f87c <ILI9341_Draw_Pixel+0xdc>
 800f86a:	4b6c      	ldr	r3, [pc, #432]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f86c:	695b      	ldr	r3, [r3, #20]
 800f86e:	4a6b      	ldr	r2, [pc, #428]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f874:	6153      	str	r3, [r2, #20]
 800f876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f878:	3301      	adds	r3, #1
 800f87a:	633b      	str	r3, [r7, #48]	; 0x30
 800f87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87e:	2b02      	cmp	r3, #2
 800f880:	ddf3      	ble.n	800f86a <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f882:	4b66      	ldr	r3, [pc, #408]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f884:	695b      	ldr	r3, [r3, #20]
 800f886:	4a65      	ldr	r2, [pc, #404]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f88c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f88e:	4b63      	ldr	r3, [pc, #396]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f890:	695b      	ldr	r3, [r3, #20]
 800f892:	4a62      	ldr	r2, [pc, #392]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f898:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f89a:	4b60      	ldr	r3, [pc, #384]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f89c:	695b      	ldr	r3, [r3, #20]
 800f89e:	4a5f      	ldr	r2, [pc, #380]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f8a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8a4:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800f8a6:	220a      	movs	r2, #10
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	202b      	movs	r0, #43	; 0x2b
 800f8ac:	f000 faf8 	bl	800fea0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8b4:	e008      	b.n	800f8c8 <ILI9341_Draw_Pixel+0x128>
 800f8b6:	4b59      	ldr	r3, [pc, #356]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f8b8:	695b      	ldr	r3, [r3, #20]
 800f8ba:	4a58      	ldr	r2, [pc, #352]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f8bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8c0:	6153      	str	r3, [r2, #20]
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	ddf3      	ble.n	800f8b6 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f8ce:	4b53      	ldr	r3, [pc, #332]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f8d0:	695b      	ldr	r3, [r3, #20]
 800f8d2:	4a52      	ldr	r2, [pc, #328]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8d8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f8da:	4b50      	ldr	r3, [pc, #320]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f8dc:	695b      	ldr	r3, [r3, #20]
 800f8de:	4a4f      	ldr	r2, [pc, #316]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8e4:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f8e6:	4b4d      	ldr	r3, [pc, #308]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f8e8:	695b      	ldr	r3, [r3, #20]
 800f8ea:	4a4c      	ldr	r2, [pc, #304]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f8ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8f0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800f8f2:	88bb      	ldrh	r3, [r7, #4]
 800f8f4:	0a1b      	lsrs	r3, r3, #8
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	743b      	strb	r3, [r7, #16]
 800f8fc:	88bb      	ldrh	r3, [r7, #4]
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	747b      	strb	r3, [r7, #17]
 800f902:	88bb      	ldrh	r3, [r7, #4]
 800f904:	3301      	adds	r3, #1
 800f906:	121b      	asrs	r3, r3, #8
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	74bb      	strb	r3, [r7, #18]
 800f90c:	88bb      	ldrh	r3, [r7, #4]
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	3301      	adds	r3, #1
 800f912:	b2db      	uxtb	r3, r3
 800f914:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800f916:	f107 0010 	add.w	r0, r7, #16
 800f91a:	230a      	movs	r3, #10
 800f91c:	2200      	movs	r2, #0
 800f91e:	2104      	movs	r1, #4
 800f920:	f000 faf0 	bl	800ff04 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f924:	2300      	movs	r3, #0
 800f926:	62bb      	str	r3, [r7, #40]	; 0x28
 800f928:	e008      	b.n	800f93c <ILI9341_Draw_Pixel+0x19c>
 800f92a:	4b3c      	ldr	r3, [pc, #240]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f92c:	695b      	ldr	r3, [r3, #20]
 800f92e:	4a3b      	ldr	r2, [pc, #236]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f934:	6153      	str	r3, [r2, #20]
 800f936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f938:	3301      	adds	r3, #1
 800f93a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93e:	2b02      	cmp	r3, #2
 800f940:	ddf3      	ble.n	800f92a <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f942:	4b36      	ldr	r3, [pc, #216]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f944:	695b      	ldr	r3, [r3, #20]
 800f946:	4a35      	ldr	r2, [pc, #212]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f94c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f94e:	4b33      	ldr	r3, [pc, #204]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	4a32      	ldr	r2, [pc, #200]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f958:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f95a:	4b30      	ldr	r3, [pc, #192]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f95c:	695b      	ldr	r3, [r3, #20]
 800f95e:	4a2f      	ldr	r2, [pc, #188]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f964:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800f966:	220a      	movs	r2, #10
 800f968:	2100      	movs	r1, #0
 800f96a:	202c      	movs	r0, #44	; 0x2c
 800f96c:	f000 fa98 	bl	800fea0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f970:	2300      	movs	r3, #0
 800f972:	627b      	str	r3, [r7, #36]	; 0x24
 800f974:	e008      	b.n	800f988 <ILI9341_Draw_Pixel+0x1e8>
 800f976:	4b29      	ldr	r3, [pc, #164]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f978:	695b      	ldr	r3, [r3, #20]
 800f97a:	4a28      	ldr	r2, [pc, #160]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f97c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f980:	6153      	str	r3, [r2, #20]
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	3301      	adds	r3, #1
 800f986:	627b      	str	r3, [r7, #36]	; 0x24
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	ddf3      	ble.n	800f976 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f98e:	4b23      	ldr	r3, [pc, #140]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f990:	695b      	ldr	r3, [r3, #20]
 800f992:	4a22      	ldr	r2, [pc, #136]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f998:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f99a:	4b20      	ldr	r3, [pc, #128]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f99c:	695b      	ldr	r3, [r3, #20]
 800f99e:	4a1f      	ldr	r2, [pc, #124]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9a4:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f9a6:	4b1d      	ldr	r3, [pc, #116]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f9a8:	695b      	ldr	r3, [r3, #20]
 800f9aa:	4a1c      	ldr	r2, [pc, #112]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f9ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9b0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800f9b2:	887b      	ldrh	r3, [r7, #2]
 800f9b4:	0a1b      	lsrs	r3, r3, #8
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	733b      	strb	r3, [r7, #12]
 800f9bc:	887b      	ldrh	r3, [r7, #2]
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800f9c2:	f107 000c 	add.w	r0, r7, #12
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	2102      	movs	r1, #2
 800f9cc:	f000 fa9a 	bl	800ff04 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	623b      	str	r3, [r7, #32]
 800f9d4:	e008      	b.n	800f9e8 <ILI9341_Draw_Pixel+0x248>
 800f9d6:	4b11      	ldr	r3, [pc, #68]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	4a10      	ldr	r2, [pc, #64]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f9dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9e0:	6153      	str	r3, [r2, #20]
 800f9e2:	6a3b      	ldr	r3, [r7, #32]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	623b      	str	r3, [r7, #32]
 800f9e8:	6a3b      	ldr	r3, [r7, #32]
 800f9ea:	2b02      	cmp	r3, #2
 800f9ec:	ddf3      	ble.n	800f9d6 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	61fb      	str	r3, [r7, #28]
 800f9f2:	e008      	b.n	800fa06 <ILI9341_Draw_Pixel+0x266>
 800f9f4:	4b09      	ldr	r3, [pc, #36]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f9f6:	695b      	ldr	r3, [r3, #20]
 800f9f8:	4a08      	ldr	r2, [pc, #32]	; (800fa1c <ILI9341_Draw_Pixel+0x27c>)
 800f9fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9fe:	6153      	str	r3, [r2, #20]
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	3301      	adds	r3, #1
 800fa04:	61fb      	str	r3, [r7, #28]
 800fa06:	69fb      	ldr	r3, [r7, #28]
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	ddf3      	ble.n	800f9f4 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	61bb      	str	r3, [r7, #24]
 800fa10:	e00f      	b.n	800fa32 <ILI9341_Draw_Pixel+0x292>
 800fa12:	bf00      	nop
 800fa14:	20000c3e 	.word	0x20000c3e
 800fa18:	20000c3c 	.word	0x20000c3c
 800fa1c:	48000400 	.word	0x48000400
 800fa20:	4b0b      	ldr	r3, [pc, #44]	; (800fa50 <ILI9341_Draw_Pixel+0x2b0>)
 800fa22:	695b      	ldr	r3, [r3, #20]
 800fa24:	4a0a      	ldr	r2, [pc, #40]	; (800fa50 <ILI9341_Draw_Pixel+0x2b0>)
 800fa26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa2a:	6153      	str	r3, [r2, #20]
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	3301      	adds	r3, #1
 800fa30:	61bb      	str	r3, [r7, #24]
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	2b02      	cmp	r3, #2
 800fa36:	ddf3      	ble.n	800fa20 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fa38:	4b05      	ldr	r3, [pc, #20]	; (800fa50 <ILI9341_Draw_Pixel+0x2b0>)
 800fa3a:	695b      	ldr	r3, [r3, #20]
 800fa3c:	4a04      	ldr	r2, [pc, #16]	; (800fa50 <ILI9341_Draw_Pixel+0x2b0>)
 800fa3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa42:	6153      	str	r3, [r2, #20]
 800fa44:	e000      	b.n	800fa48 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800fa46:	bf00      	nop


}
 800fa48:	3738      	adds	r7, #56	; 0x38
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	48000400 	.word	0x48000400

0800fa54 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800fa54:	b590      	push	{r4, r7, lr}
 800fa56:	b087      	sub	sp, #28
 800fa58:	af02      	add	r7, sp, #8
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	4608      	mov	r0, r1
 800fa5e:	4611      	mov	r1, r2
 800fa60:	461a      	mov	r2, r3
 800fa62:	4623      	mov	r3, r4
 800fa64:	80fb      	strh	r3, [r7, #6]
 800fa66:	4603      	mov	r3, r0
 800fa68:	80bb      	strh	r3, [r7, #4]
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	807b      	strh	r3, [r7, #2]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fa72:	4b41      	ldr	r3, [pc, #260]	; (800fb78 <ILI9341_Draw_Rectangle+0x124>)
 800fa74:	881b      	ldrh	r3, [r3, #0]
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	88fa      	ldrh	r2, [r7, #6]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d278      	bcs.n	800fb70 <ILI9341_Draw_Rectangle+0x11c>
 800fa7e:	4b3f      	ldr	r3, [pc, #252]	; (800fb7c <ILI9341_Draw_Rectangle+0x128>)
 800fa80:	881b      	ldrh	r3, [r3, #0]
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	88ba      	ldrh	r2, [r7, #4]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d272      	bcs.n	800fb70 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800fa8a:	88fa      	ldrh	r2, [r7, #6]
 800fa8c:	887b      	ldrh	r3, [r7, #2]
 800fa8e:	4413      	add	r3, r2
 800fa90:	3b01      	subs	r3, #1
 800fa92:	4a39      	ldr	r2, [pc, #228]	; (800fb78 <ILI9341_Draw_Rectangle+0x124>)
 800fa94:	8812      	ldrh	r2, [r2, #0]
 800fa96:	b292      	uxth	r2, r2
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	db05      	blt.n	800faa8 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800fa9c:	4b36      	ldr	r3, [pc, #216]	; (800fb78 <ILI9341_Draw_Rectangle+0x124>)
 800fa9e:	881b      	ldrh	r3, [r3, #0]
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	88fb      	ldrh	r3, [r7, #6]
 800faa4:	1ad3      	subs	r3, r2, r3
 800faa6:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800faa8:	88ba      	ldrh	r2, [r7, #4]
 800faaa:	883b      	ldrh	r3, [r7, #0]
 800faac:	4413      	add	r3, r2
 800faae:	3b01      	subs	r3, #1
 800fab0:	4a32      	ldr	r2, [pc, #200]	; (800fb7c <ILI9341_Draw_Rectangle+0x128>)
 800fab2:	8812      	ldrh	r2, [r2, #0]
 800fab4:	b292      	uxth	r2, r2
 800fab6:	4293      	cmp	r3, r2
 800fab8:	db05      	blt.n	800fac6 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800faba:	4b30      	ldr	r3, [pc, #192]	; (800fb7c <ILI9341_Draw_Rectangle+0x128>)
 800fabc:	881b      	ldrh	r3, [r3, #0]
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	88bb      	ldrh	r3, [r7, #4]
 800fac2:	1ad3      	subs	r3, r2, r3
 800fac4:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800fac6:	88fa      	ldrh	r2, [r7, #6]
 800fac8:	887b      	ldrh	r3, [r7, #2]
 800faca:	4413      	add	r3, r2
 800facc:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800face:	3b01      	subs	r3, #1
 800fad0:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800fad2:	88ba      	ldrh	r2, [r7, #4]
 800fad4:	883b      	ldrh	r3, [r7, #0]
 800fad6:	4413      	add	r3, r2
 800fad8:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800fada:	3b01      	subs	r3, #1
 800fadc:	b29b      	uxth	r3, r3
 800fade:	88b9      	ldrh	r1, [r7, #4]
 800fae0:	88f8      	ldrh	r0, [r7, #6]
 800fae2:	4622      	mov	r2, r4
 800fae4:	f7ff fde6 	bl	800f6b4 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800fae8:	883a      	ldrh	r2, [r7, #0]
 800faea:	887b      	ldrh	r3, [r7, #2]
 800faec:	fb12 f303 	smulbb	r3, r2, r3
 800faf0:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800faf2:	2300      	movs	r3, #0
 800faf4:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800faf6:	89fb      	ldrh	r3, [r7, #14]
 800faf8:	f003 0301 	and.w	r3, r3, #1
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d009      	beq.n	800fb14 <ILI9341_Draw_Rectangle+0xc0>
 800fb00:	89fb      	ldrh	r3, [r7, #14]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d906      	bls.n	800fb14 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800fb06:	2301      	movs	r3, #1
 800fb08:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800fb0a:	89fb      	ldrh	r3, [r7, #14]
 800fb0c:	085b      	lsrs	r3, r3, #1
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	005b      	lsls	r3, r3, #1
 800fb12:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800fb14:	89fc      	ldrh	r4, [r7, #14]
 800fb16:	8c3a      	ldrh	r2, [r7, #32]
 800fb18:	88b9      	ldrh	r1, [r7, #4]
 800fb1a:	88f8      	ldrh	r0, [r7, #6]
 800fb1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	4623      	mov	r3, r4
 800fb24:	f000 f8a8 	bl	800fc78 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800fb28:	7b7b      	ldrb	r3, [r7, #13]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d021      	beq.n	800fb72 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800fb2e:	88fa      	ldrh	r2, [r7, #6]
 800fb30:	887b      	ldrh	r3, [r7, #2]
 800fb32:	4413      	add	r3, r2
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	3b02      	subs	r3, #2
 800fb38:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800fb3a:	88ba      	ldrh	r2, [r7, #4]
 800fb3c:	883b      	ldrh	r3, [r7, #0]
 800fb3e:	4413      	add	r3, r2
 800fb40:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800fb42:	3b01      	subs	r3, #1
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	8c3a      	ldrh	r2, [r7, #32]
 800fb48:	4619      	mov	r1, r3
 800fb4a:	f7ff fe29 	bl	800f7a0 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800fb4e:	88fa      	ldrh	r2, [r7, #6]
 800fb50:	887b      	ldrh	r3, [r7, #2]
 800fb52:	4413      	add	r3, r2
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	3b01      	subs	r3, #1
 800fb58:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800fb5a:	88ba      	ldrh	r2, [r7, #4]
 800fb5c:	883b      	ldrh	r3, [r7, #0]
 800fb5e:	4413      	add	r3, r2
 800fb60:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800fb62:	3b01      	subs	r3, #1
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	8c3a      	ldrh	r2, [r7, #32]
 800fb68:	4619      	mov	r1, r3
 800fb6a:	f7ff fe19 	bl	800f7a0 <ILI9341_Draw_Pixel>
 800fb6e:	e000      	b.n	800fb72 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fb70:	bf00      	nop
							colour);
	}
}
 800fb72:	3714      	adds	r7, #20
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd90      	pop	{r4, r7, pc}
 800fb78:	20000c3e 	.word	0x20000c3e
 800fb7c:	20000c3c 	.word	0x20000c3c

0800fb80 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800fb8a:	79fb      	ldrb	r3, [r7, #7]
 800fb8c:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800fb8e:	2036      	movs	r0, #54	; 0x36
 800fb90:	f000 f922 	bl	800fdd8 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800fb94:	7bfb      	ldrb	r3, [r7, #15]
 800fb96:	2b03      	cmp	r3, #3
 800fb98:	d836      	bhi.n	800fc08 <ILI9341_Set_Rotation+0x88>
 800fb9a:	a201      	add	r2, pc, #4	; (adr r2, 800fba0 <ILI9341_Set_Rotation+0x20>)
 800fb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba0:	0800fbb1 	.word	0x0800fbb1
 800fba4:	0800fbc7 	.word	0x0800fbc7
 800fba8:	0800fbdd 	.word	0x0800fbdd
 800fbac:	0800fbf3 	.word	0x0800fbf3
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800fbb0:	2048      	movs	r0, #72	; 0x48
 800fbb2:	f000 f943 	bl	800fe3c <_LCD_SendData>
			LCD_WIDTH = 240;
 800fbb6:	4b17      	ldr	r3, [pc, #92]	; (800fc14 <ILI9341_Set_Rotation+0x94>)
 800fbb8:	22f0      	movs	r2, #240	; 0xf0
 800fbba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800fbbc:	4b16      	ldr	r3, [pc, #88]	; (800fc18 <ILI9341_Set_Rotation+0x98>)
 800fbbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fbc2:	801a      	strh	r2, [r3, #0]
			break;
 800fbc4:	e021      	b.n	800fc0a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800fbc6:	2028      	movs	r0, #40	; 0x28
 800fbc8:	f000 f938 	bl	800fe3c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800fbcc:	4b11      	ldr	r3, [pc, #68]	; (800fc14 <ILI9341_Set_Rotation+0x94>)
 800fbce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fbd2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800fbd4:	4b10      	ldr	r3, [pc, #64]	; (800fc18 <ILI9341_Set_Rotation+0x98>)
 800fbd6:	22f0      	movs	r2, #240	; 0xf0
 800fbd8:	801a      	strh	r2, [r3, #0]
			break;
 800fbda:	e016      	b.n	800fc0a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800fbdc:	2088      	movs	r0, #136	; 0x88
 800fbde:	f000 f92d 	bl	800fe3c <_LCD_SendData>
			LCD_WIDTH  = 240;
 800fbe2:	4b0c      	ldr	r3, [pc, #48]	; (800fc14 <ILI9341_Set_Rotation+0x94>)
 800fbe4:	22f0      	movs	r2, #240	; 0xf0
 800fbe6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800fbe8:	4b0b      	ldr	r3, [pc, #44]	; (800fc18 <ILI9341_Set_Rotation+0x98>)
 800fbea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fbee:	801a      	strh	r2, [r3, #0]
			break;
 800fbf0:	e00b      	b.n	800fc0a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800fbf2:	20e8      	movs	r0, #232	; 0xe8
 800fbf4:	f000 f922 	bl	800fe3c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800fbf8:	4b06      	ldr	r3, [pc, #24]	; (800fc14 <ILI9341_Set_Rotation+0x94>)
 800fbfa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fbfe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800fc00:	4b05      	ldr	r3, [pc, #20]	; (800fc18 <ILI9341_Set_Rotation+0x98>)
 800fc02:	22f0      	movs	r2, #240	; 0xf0
 800fc04:	801a      	strh	r2, [r3, #0]
			break;
 800fc06:	e000      	b.n	800fc0a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800fc08:	bf00      	nop
	}
}
 800fc0a:	bf00      	nop
 800fc0c:	3710      	adds	r7, #16
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	bf00      	nop
 800fc14:	20000c3e 	.word	0x20000c3e
 800fc18:	20000c3c 	.word	0x20000c3c

0800fc1c <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800fc20:	4b05      	ldr	r3, [pc, #20]	; (800fc38 <_LCD_Enable+0x1c>)
 800fc22:	695b      	ldr	r3, [r3, #20]
 800fc24:	4a04      	ldr	r2, [pc, #16]	; (800fc38 <_LCD_Enable+0x1c>)
 800fc26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fc2a:	6153      	str	r3, [r2, #20]
}
 800fc2c:	bf00      	nop
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	48000400 	.word	0x48000400

0800fc3c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800fc40:	4b0c      	ldr	r3, [pc, #48]	; (800fc74 <_LCD_Reset+0x38>)
 800fc42:	695b      	ldr	r3, [r3, #20]
 800fc44:	4a0b      	ldr	r2, [pc, #44]	; (800fc74 <_LCD_Reset+0x38>)
 800fc46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc4a:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800fc4c:	20c8      	movs	r0, #200	; 0xc8
 800fc4e:	f7f8 fd0f 	bl	8008670 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fc52:	4b08      	ldr	r3, [pc, #32]	; (800fc74 <_LCD_Reset+0x38>)
 800fc54:	695b      	ldr	r3, [r3, #20]
 800fc56:	4a07      	ldr	r2, [pc, #28]	; (800fc74 <_LCD_Reset+0x38>)
 800fc58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc5c:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800fc5e:	20c8      	movs	r0, #200	; 0xc8
 800fc60:	f7f8 fd06 	bl	8008670 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800fc64:	4b03      	ldr	r3, [pc, #12]	; (800fc74 <_LCD_Reset+0x38>)
 800fc66:	695b      	ldr	r3, [r3, #20]
 800fc68:	4a02      	ldr	r2, [pc, #8]	; (800fc74 <_LCD_Reset+0x38>)
 800fc6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fc6e:	6153      	str	r3, [r2, #20]
}
 800fc70:	bf00      	nop
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	48000400 	.word	0x48000400

0800fc78 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800fc78:	b5b0      	push	{r4, r5, r7, lr}
 800fc7a:	b08e      	sub	sp, #56	; 0x38
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	607b      	str	r3, [r7, #4]
 800fc80:	4603      	mov	r3, r0
 800fc82:	81fb      	strh	r3, [r7, #14]
 800fc84:	460b      	mov	r3, r1
 800fc86:	81bb      	strh	r3, [r7, #12]
 800fc88:	4613      	mov	r3, r2
 800fc8a:	817b      	strh	r3, [r7, #10]
 800fc8c:	466b      	mov	r3, sp
 800fc8e:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800fc90:	2300      	movs	r3, #0
 800fc92:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	4a4d      	ldr	r2, [pc, #308]	; (800fdd0 <_LCD_Write_Frame+0x158>)
 800fc9a:	8812      	ldrh	r2, [r2, #0]
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d202      	bcs.n	800fca6 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fca4:	e002      	b.n	800fcac <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800fca6:	4b4a      	ldr	r3, [pc, #296]	; (800fdd0 <_LCD_Write_Frame+0x158>)
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800fcac:	897b      	ldrh	r3, [r7, #10]
 800fcae:	0a1b      	lsrs	r3, r3, #8
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800fcb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	61bb      	str	r3, [r7, #24]
 800fcbc:	4601      	mov	r1, r0
 800fcbe:	f04f 0200 	mov.w	r2, #0
 800fcc2:	f04f 0300 	mov.w	r3, #0
 800fcc6:	f04f 0400 	mov.w	r4, #0
 800fcca:	00d4      	lsls	r4, r2, #3
 800fccc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800fcd0:	00cb      	lsls	r3, r1, #3
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	f04f 0200 	mov.w	r2, #0
 800fcd8:	f04f 0300 	mov.w	r3, #0
 800fcdc:	f04f 0400 	mov.w	r4, #0
 800fce0:	00d4      	lsls	r4, r2, #3
 800fce2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800fce6:	00cb      	lsls	r3, r1, #3
 800fce8:	1dc3      	adds	r3, r0, #7
 800fcea:	08db      	lsrs	r3, r3, #3
 800fcec:	00db      	lsls	r3, r3, #3
 800fcee:	ebad 0d03 	sub.w	sp, sp, r3
 800fcf2:	466b      	mov	r3, sp
 800fcf4:	3300      	adds	r3, #0
 800fcf6:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	633b      	str	r3, [r7, #48]	; 0x30
 800fcfc:	e00d      	b.n	800fd1a <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800fcfe:	697a      	ldr	r2, [r7, #20]
 800fd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd02:	4413      	add	r3, r2
 800fd04:	7ffa      	ldrb	r2, [r7, #31]
 800fd06:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800fd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	897a      	ldrh	r2, [r7, #10]
 800fd0e:	b2d1      	uxtb	r1, r2
 800fd10:	697a      	ldr	r2, [r7, #20]
 800fd12:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800fd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd16:	3302      	adds	r3, #2
 800fd18:	633b      	str	r3, [r7, #48]	; 0x30
 800fd1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d3ed      	bcc.n	800fcfe <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800fd28:	2301      	movs	r3, #1
 800fd2a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00d      	beq.n	800fd52 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800fd36:	693a      	ldr	r2, [r7, #16]
 800fd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd3e:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd44:	fbb3 f2f2 	udiv	r2, r3, r2
 800fd48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd4a:	fb01 f202 	mul.w	r2, r1, r2
 800fd4e:	1a9b      	subs	r3, r3, r2
 800fd50:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fd52:	4b20      	ldr	r3, [pc, #128]	; (800fdd4 <_LCD_Write_Frame+0x15c>)
 800fd54:	695b      	ldr	r3, [r3, #20]
 800fd56:	4a1f      	ldr	r2, [pc, #124]	; (800fdd4 <_LCD_Write_Frame+0x15c>)
 800fd58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd5c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd5e:	4b1d      	ldr	r3, [pc, #116]	; (800fdd4 <_LCD_Write_Frame+0x15c>)
 800fd60:	695b      	ldr	r3, [r3, #20]
 800fd62:	4a1c      	ldr	r2, [pc, #112]	; (800fdd4 <_LCD_Write_Frame+0x15c>)
 800fd64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd68:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800fd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d00f      	beq.n	800fd90 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800fd70:	2300      	movs	r3, #0
 800fd72:	627b      	str	r3, [r7, #36]	; 0x24
 800fd74:	e008      	b.n	800fd88 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800fd76:	6978      	ldr	r0, [r7, #20]
 800fd78:	230a      	movs	r3, #10
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd7e:	f000 f8c1 	bl	800ff04 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800fd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd84:	3301      	adds	r3, #1
 800fd86:	627b      	str	r3, [r7, #36]	; 0x24
 800fd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d3f2      	bcc.n	800fd76 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800fd90:	6978      	ldr	r0, [r7, #20]
 800fd92:	230a      	movs	r3, #10
 800fd94:	2200      	movs	r2, #0
 800fd96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd98:	f000 f8b4 	bl	800ff04 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	623b      	str	r3, [r7, #32]
 800fda0:	e008      	b.n	800fdb4 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fda2:	4b0c      	ldr	r3, [pc, #48]	; (800fdd4 <_LCD_Write_Frame+0x15c>)
 800fda4:	695b      	ldr	r3, [r3, #20]
 800fda6:	4a0b      	ldr	r2, [pc, #44]	; (800fdd4 <_LCD_Write_Frame+0x15c>)
 800fda8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdac:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fdae:	6a3b      	ldr	r3, [r7, #32]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	623b      	str	r3, [r7, #32]
 800fdb4:	6a3b      	ldr	r3, [r7, #32]
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	ddf3      	ble.n	800fda2 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fdba:	4b06      	ldr	r3, [pc, #24]	; (800fdd4 <_LCD_Write_Frame+0x15c>)
 800fdbc:	695b      	ldr	r3, [r3, #20]
 800fdbe:	4a05      	ldr	r2, [pc, #20]	; (800fdd4 <_LCD_Write_Frame+0x15c>)
 800fdc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdc4:	6153      	str	r3, [r2, #20]
 800fdc6:	46ad      	mov	sp, r5

}
 800fdc8:	bf00      	nop
 800fdca:	3738      	adds	r7, #56	; 0x38
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bdb0      	pop	{r4, r5, r7, pc}
 800fdd0:	20000c40 	.word	0x20000c40
 800fdd4:	48000400 	.word	0x48000400

0800fdd8 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b084      	sub	sp, #16
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	4603      	mov	r3, r0
 800fde0:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fde2:	4b15      	ldr	r3, [pc, #84]	; (800fe38 <_LCD_SendCommand+0x60>)
 800fde4:	695b      	ldr	r3, [r3, #20]
 800fde6:	4a14      	ldr	r2, [pc, #80]	; (800fe38 <_LCD_SendCommand+0x60>)
 800fde8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdec:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fdee:	4b12      	ldr	r3, [pc, #72]	; (800fe38 <_LCD_SendCommand+0x60>)
 800fdf0:	695b      	ldr	r3, [r3, #20]
 800fdf2:	4a11      	ldr	r2, [pc, #68]	; (800fe38 <_LCD_SendCommand+0x60>)
 800fdf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdf8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800fdfa:	79fb      	ldrb	r3, [r7, #7]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	2100      	movs	r1, #0
 800fe00:	4618      	mov	r0, r3
 800fe02:	f000 f84d 	bl	800fea0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fe06:	2300      	movs	r3, #0
 800fe08:	60fb      	str	r3, [r7, #12]
 800fe0a:	e008      	b.n	800fe1e <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe0c:	4b0a      	ldr	r3, [pc, #40]	; (800fe38 <_LCD_SendCommand+0x60>)
 800fe0e:	695b      	ldr	r3, [r3, #20]
 800fe10:	4a09      	ldr	r2, [pc, #36]	; (800fe38 <_LCD_SendCommand+0x60>)
 800fe12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe16:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	60fb      	str	r3, [r7, #12]
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2b02      	cmp	r3, #2
 800fe22:	ddf3      	ble.n	800fe0c <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fe24:	4b04      	ldr	r3, [pc, #16]	; (800fe38 <_LCD_SendCommand+0x60>)
 800fe26:	695b      	ldr	r3, [r3, #20]
 800fe28:	4a03      	ldr	r2, [pc, #12]	; (800fe38 <_LCD_SendCommand+0x60>)
 800fe2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe2e:	6153      	str	r3, [r2, #20]
}
 800fe30:	bf00      	nop
 800fe32:	3710      	adds	r7, #16
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	48000400 	.word	0x48000400

0800fe3c <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	4603      	mov	r3, r0
 800fe44:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fe46:	4b15      	ldr	r3, [pc, #84]	; (800fe9c <_LCD_SendData+0x60>)
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	4a14      	ldr	r2, [pc, #80]	; (800fe9c <_LCD_SendData+0x60>)
 800fe4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe50:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe52:	4b12      	ldr	r3, [pc, #72]	; (800fe9c <_LCD_SendData+0x60>)
 800fe54:	695b      	ldr	r3, [r3, #20]
 800fe56:	4a11      	ldr	r2, [pc, #68]	; (800fe9c <_LCD_SendData+0x60>)
 800fe58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe5c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800fe5e:	79fb      	ldrb	r3, [r7, #7]
 800fe60:	2200      	movs	r2, #0
 800fe62:	2100      	movs	r1, #0
 800fe64:	4618      	mov	r0, r3
 800fe66:	f000 f81b 	bl	800fea0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	60fb      	str	r3, [r7, #12]
 800fe6e:	e008      	b.n	800fe82 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe70:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <_LCD_SendData+0x60>)
 800fe72:	695b      	ldr	r3, [r3, #20]
 800fe74:	4a09      	ldr	r2, [pc, #36]	; (800fe9c <_LCD_SendData+0x60>)
 800fe76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe7a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	60fb      	str	r3, [r7, #12]
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	ddf3      	ble.n	800fe70 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe88:	4b04      	ldr	r3, [pc, #16]	; (800fe9c <_LCD_SendData+0x60>)
 800fe8a:	695b      	ldr	r3, [r3, #20]
 800fe8c:	4a03      	ldr	r2, [pc, #12]	; (800fe9c <_LCD_SendData+0x60>)
 800fe8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe92:	6153      	str	r3, [r2, #20]
}
 800fe94:	bf00      	nop
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	48000400 	.word	0x48000400

0800fea0 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b085      	sub	sp, #20
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	4603      	mov	r3, r0
 800fea8:	71fb      	strb	r3, [r7, #7]
 800feaa:	460b      	mov	r3, r1
 800feac:	71bb      	strb	r3, [r7, #6]
 800feae:	4613      	mov	r3, r2
 800feb0:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800feb2:	2300      	movs	r3, #0
 800feb4:	60fb      	str	r3, [r7, #12]
 800feb6:	e003      	b.n	800fec0 <_SPI_SendByte+0x20>
   		asm("nop");
 800feb8:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	3301      	adds	r3, #1
 800febe:	60fb      	str	r3, [r7, #12]
 800fec0:	79bb      	ldrb	r3, [r7, #6]
 800fec2:	68fa      	ldr	r2, [r7, #12]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	dbf7      	blt.n	800feb8 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800fec8:	4b0c      	ldr	r3, [pc, #48]	; (800fefc <_SPI_SendByte+0x5c>)
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	f003 0302 	and.w	r3, r3, #2
 800fed0:	2b02      	cmp	r3, #2
 800fed2:	d102      	bne.n	800feda <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800fed4:	4a0a      	ldr	r2, [pc, #40]	; (800ff00 <_SPI_SendByte+0x60>)
 800fed6:	79fb      	ldrb	r3, [r7, #7]
 800fed8:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800feda:	2300      	movs	r3, #0
 800fedc:	60bb      	str	r3, [r7, #8]
 800fede:	e003      	b.n	800fee8 <_SPI_SendByte+0x48>
   		asm("nop");
 800fee0:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	3301      	adds	r3, #1
 800fee6:	60bb      	str	r3, [r7, #8]
 800fee8:	797b      	ldrb	r3, [r7, #5]
 800feea:	68ba      	ldr	r2, [r7, #8]
 800feec:	429a      	cmp	r2, r3
 800feee:	dbf7      	blt.n	800fee0 <_SPI_SendByte+0x40>

#endif

}
 800fef0:	bf00      	nop
 800fef2:	3714      	adds	r7, #20
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr
 800fefc:	40003c00 	.word	0x40003c00
 800ff00:	40003c0c 	.word	0x40003c0c

0800ff04 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b089      	sub	sp, #36	; 0x24
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	4611      	mov	r1, r2
 800ff10:	461a      	mov	r2, r3
 800ff12:	460b      	mov	r3, r1
 800ff14:	71fb      	strb	r3, [r7, #7]
 800ff16:	4613      	mov	r3, r2
 800ff18:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	61fb      	str	r3, [r7, #28]
 800ff1e:	e003      	b.n	800ff28 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800ff20:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	3301      	adds	r3, #1
 800ff26:	61fb      	str	r3, [r7, #28]
 800ff28:	79fb      	ldrb	r3, [r7, #7]
 800ff2a:	69fa      	ldr	r2, [r7, #28]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	dbf7      	blt.n	800ff20 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800ff34:	e01d      	b.n	800ff72 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ff36:	4b1c      	ldr	r3, [pc, #112]	; (800ffa8 <_SPI_SendByteMultiByte+0xa4>)
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	f003 0302 	and.w	r3, r3, #2
 800ff3e:	2b02      	cmp	r3, #2
 800ff40:	d117      	bne.n	800ff72 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d90a      	bls.n	800ff5e <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800ff48:	69bb      	ldr	r3, [r7, #24]
 800ff4a:	881a      	ldrh	r2, [r3, #0]
 800ff4c:	4b16      	ldr	r3, [pc, #88]	; (800ffa8 <_SPI_SendByteMultiByte+0xa4>)
 800ff4e:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800ff50:	69bb      	ldr	r3, [r7, #24]
 800ff52:	3302      	adds	r3, #2
 800ff54:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	3b02      	subs	r3, #2
 800ff5a:	60bb      	str	r3, [r7, #8]
 800ff5c:	e009      	b.n	800ff72 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800ff5e:	4a13      	ldr	r2, [pc, #76]	; (800ffac <_SPI_SendByteMultiByte+0xa8>)
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1de      	bne.n	800ff36 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800ff78:	4b0b      	ldr	r3, [pc, #44]	; (800ffa8 <_SPI_SendByteMultiByte+0xa4>)
 800ff7a:	689b      	ldr	r3, [r3, #8]
 800ff7c:	4a0a      	ldr	r2, [pc, #40]	; (800ffa8 <_SPI_SendByteMultiByte+0xa4>)
 800ff7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff82:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800ff84:	2300      	movs	r3, #0
 800ff86:	617b      	str	r3, [r7, #20]
 800ff88:	e003      	b.n	800ff92 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800ff8a:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	617b      	str	r3, [r7, #20]
 800ff92:	79bb      	ldrb	r3, [r7, #6]
 800ff94:	697a      	ldr	r2, [r7, #20]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	dbf7      	blt.n	800ff8a <_SPI_SendByteMultiByte+0x86>

#endif

}
 800ff9a:	bf00      	nop
 800ff9c:	3724      	adds	r7, #36	; 0x24
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	40003c00 	.word	0x40003c00
 800ffac:	40003c0c 	.word	0x40003c0c

0800ffb0 <__errno>:
 800ffb0:	4b01      	ldr	r3, [pc, #4]	; (800ffb8 <__errno+0x8>)
 800ffb2:	6818      	ldr	r0, [r3, #0]
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	20001c34 	.word	0x20001c34

0800ffbc <__libc_init_array>:
 800ffbc:	b570      	push	{r4, r5, r6, lr}
 800ffbe:	4e0d      	ldr	r6, [pc, #52]	; (800fff4 <__libc_init_array+0x38>)
 800ffc0:	4c0d      	ldr	r4, [pc, #52]	; (800fff8 <__libc_init_array+0x3c>)
 800ffc2:	1ba4      	subs	r4, r4, r6
 800ffc4:	10a4      	asrs	r4, r4, #2
 800ffc6:	2500      	movs	r5, #0
 800ffc8:	42a5      	cmp	r5, r4
 800ffca:	d109      	bne.n	800ffe0 <__libc_init_array+0x24>
 800ffcc:	4e0b      	ldr	r6, [pc, #44]	; (800fffc <__libc_init_array+0x40>)
 800ffce:	4c0c      	ldr	r4, [pc, #48]	; (8010000 <__libc_init_array+0x44>)
 800ffd0:	f004 f8a0 	bl	8014114 <_init>
 800ffd4:	1ba4      	subs	r4, r4, r6
 800ffd6:	10a4      	asrs	r4, r4, #2
 800ffd8:	2500      	movs	r5, #0
 800ffda:	42a5      	cmp	r5, r4
 800ffdc:	d105      	bne.n	800ffea <__libc_init_array+0x2e>
 800ffde:	bd70      	pop	{r4, r5, r6, pc}
 800ffe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ffe4:	4798      	blx	r3
 800ffe6:	3501      	adds	r5, #1
 800ffe8:	e7ee      	b.n	800ffc8 <__libc_init_array+0xc>
 800ffea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ffee:	4798      	blx	r3
 800fff0:	3501      	adds	r5, #1
 800fff2:	e7f2      	b.n	800ffda <__libc_init_array+0x1e>
 800fff4:	08015500 	.word	0x08015500
 800fff8:	08015500 	.word	0x08015500
 800fffc:	08015500 	.word	0x08015500
 8010000:	08015504 	.word	0x08015504

08010004 <memset>:
 8010004:	4402      	add	r2, r0
 8010006:	4603      	mov	r3, r0
 8010008:	4293      	cmp	r3, r2
 801000a:	d100      	bne.n	801000e <memset+0xa>
 801000c:	4770      	bx	lr
 801000e:	f803 1b01 	strb.w	r1, [r3], #1
 8010012:	e7f9      	b.n	8010008 <memset+0x4>

08010014 <__cvt>:
 8010014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010018:	ec55 4b10 	vmov	r4, r5, d0
 801001c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801001e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010022:	2d00      	cmp	r5, #0
 8010024:	460e      	mov	r6, r1
 8010026:	4691      	mov	r9, r2
 8010028:	4619      	mov	r1, r3
 801002a:	bfb8      	it	lt
 801002c:	4622      	movlt	r2, r4
 801002e:	462b      	mov	r3, r5
 8010030:	f027 0720 	bic.w	r7, r7, #32
 8010034:	bfbb      	ittet	lt
 8010036:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801003a:	461d      	movlt	r5, r3
 801003c:	2300      	movge	r3, #0
 801003e:	232d      	movlt	r3, #45	; 0x2d
 8010040:	bfb8      	it	lt
 8010042:	4614      	movlt	r4, r2
 8010044:	2f46      	cmp	r7, #70	; 0x46
 8010046:	700b      	strb	r3, [r1, #0]
 8010048:	d004      	beq.n	8010054 <__cvt+0x40>
 801004a:	2f45      	cmp	r7, #69	; 0x45
 801004c:	d100      	bne.n	8010050 <__cvt+0x3c>
 801004e:	3601      	adds	r6, #1
 8010050:	2102      	movs	r1, #2
 8010052:	e000      	b.n	8010056 <__cvt+0x42>
 8010054:	2103      	movs	r1, #3
 8010056:	ab03      	add	r3, sp, #12
 8010058:	9301      	str	r3, [sp, #4]
 801005a:	ab02      	add	r3, sp, #8
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	4632      	mov	r2, r6
 8010060:	4653      	mov	r3, sl
 8010062:	ec45 4b10 	vmov	d0, r4, r5
 8010066:	f000 fe3f 	bl	8010ce8 <_dtoa_r>
 801006a:	2f47      	cmp	r7, #71	; 0x47
 801006c:	4680      	mov	r8, r0
 801006e:	d102      	bne.n	8010076 <__cvt+0x62>
 8010070:	f019 0f01 	tst.w	r9, #1
 8010074:	d026      	beq.n	80100c4 <__cvt+0xb0>
 8010076:	2f46      	cmp	r7, #70	; 0x46
 8010078:	eb08 0906 	add.w	r9, r8, r6
 801007c:	d111      	bne.n	80100a2 <__cvt+0x8e>
 801007e:	f898 3000 	ldrb.w	r3, [r8]
 8010082:	2b30      	cmp	r3, #48	; 0x30
 8010084:	d10a      	bne.n	801009c <__cvt+0x88>
 8010086:	2200      	movs	r2, #0
 8010088:	2300      	movs	r3, #0
 801008a:	4620      	mov	r0, r4
 801008c:	4629      	mov	r1, r5
 801008e:	f7f0 fd43 	bl	8000b18 <__aeabi_dcmpeq>
 8010092:	b918      	cbnz	r0, 801009c <__cvt+0x88>
 8010094:	f1c6 0601 	rsb	r6, r6, #1
 8010098:	f8ca 6000 	str.w	r6, [sl]
 801009c:	f8da 3000 	ldr.w	r3, [sl]
 80100a0:	4499      	add	r9, r3
 80100a2:	2200      	movs	r2, #0
 80100a4:	2300      	movs	r3, #0
 80100a6:	4620      	mov	r0, r4
 80100a8:	4629      	mov	r1, r5
 80100aa:	f7f0 fd35 	bl	8000b18 <__aeabi_dcmpeq>
 80100ae:	b938      	cbnz	r0, 80100c0 <__cvt+0xac>
 80100b0:	2230      	movs	r2, #48	; 0x30
 80100b2:	9b03      	ldr	r3, [sp, #12]
 80100b4:	454b      	cmp	r3, r9
 80100b6:	d205      	bcs.n	80100c4 <__cvt+0xb0>
 80100b8:	1c59      	adds	r1, r3, #1
 80100ba:	9103      	str	r1, [sp, #12]
 80100bc:	701a      	strb	r2, [r3, #0]
 80100be:	e7f8      	b.n	80100b2 <__cvt+0x9e>
 80100c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80100c4:	9b03      	ldr	r3, [sp, #12]
 80100c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100c8:	eba3 0308 	sub.w	r3, r3, r8
 80100cc:	4640      	mov	r0, r8
 80100ce:	6013      	str	r3, [r2, #0]
 80100d0:	b004      	add	sp, #16
 80100d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080100d6 <__exponent>:
 80100d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100d8:	2900      	cmp	r1, #0
 80100da:	4604      	mov	r4, r0
 80100dc:	bfba      	itte	lt
 80100de:	4249      	neglt	r1, r1
 80100e0:	232d      	movlt	r3, #45	; 0x2d
 80100e2:	232b      	movge	r3, #43	; 0x2b
 80100e4:	2909      	cmp	r1, #9
 80100e6:	f804 2b02 	strb.w	r2, [r4], #2
 80100ea:	7043      	strb	r3, [r0, #1]
 80100ec:	dd20      	ble.n	8010130 <__exponent+0x5a>
 80100ee:	f10d 0307 	add.w	r3, sp, #7
 80100f2:	461f      	mov	r7, r3
 80100f4:	260a      	movs	r6, #10
 80100f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80100fa:	fb06 1115 	mls	r1, r6, r5, r1
 80100fe:	3130      	adds	r1, #48	; 0x30
 8010100:	2d09      	cmp	r5, #9
 8010102:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010106:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 801010a:	4629      	mov	r1, r5
 801010c:	dc09      	bgt.n	8010122 <__exponent+0x4c>
 801010e:	3130      	adds	r1, #48	; 0x30
 8010110:	3b02      	subs	r3, #2
 8010112:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010116:	42bb      	cmp	r3, r7
 8010118:	4622      	mov	r2, r4
 801011a:	d304      	bcc.n	8010126 <__exponent+0x50>
 801011c:	1a10      	subs	r0, r2, r0
 801011e:	b003      	add	sp, #12
 8010120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010122:	4613      	mov	r3, r2
 8010124:	e7e7      	b.n	80100f6 <__exponent+0x20>
 8010126:	f813 2b01 	ldrb.w	r2, [r3], #1
 801012a:	f804 2b01 	strb.w	r2, [r4], #1
 801012e:	e7f2      	b.n	8010116 <__exponent+0x40>
 8010130:	2330      	movs	r3, #48	; 0x30
 8010132:	4419      	add	r1, r3
 8010134:	7083      	strb	r3, [r0, #2]
 8010136:	1d02      	adds	r2, r0, #4
 8010138:	70c1      	strb	r1, [r0, #3]
 801013a:	e7ef      	b.n	801011c <__exponent+0x46>

0801013c <_printf_float>:
 801013c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010140:	b08d      	sub	sp, #52	; 0x34
 8010142:	460c      	mov	r4, r1
 8010144:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010148:	4616      	mov	r6, r2
 801014a:	461f      	mov	r7, r3
 801014c:	4605      	mov	r5, r0
 801014e:	f001 fcfd 	bl	8011b4c <_localeconv_r>
 8010152:	6803      	ldr	r3, [r0, #0]
 8010154:	9304      	str	r3, [sp, #16]
 8010156:	4618      	mov	r0, r3
 8010158:	f7f0 f862 	bl	8000220 <strlen>
 801015c:	2300      	movs	r3, #0
 801015e:	930a      	str	r3, [sp, #40]	; 0x28
 8010160:	f8d8 3000 	ldr.w	r3, [r8]
 8010164:	9005      	str	r0, [sp, #20]
 8010166:	3307      	adds	r3, #7
 8010168:	f023 0307 	bic.w	r3, r3, #7
 801016c:	f103 0208 	add.w	r2, r3, #8
 8010170:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010174:	f8d4 b000 	ldr.w	fp, [r4]
 8010178:	f8c8 2000 	str.w	r2, [r8]
 801017c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010180:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010184:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010188:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801018c:	9307      	str	r3, [sp, #28]
 801018e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010196:	4ba7      	ldr	r3, [pc, #668]	; (8010434 <_printf_float+0x2f8>)
 8010198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801019c:	f7f0 fcee 	bl	8000b7c <__aeabi_dcmpun>
 80101a0:	bb70      	cbnz	r0, 8010200 <_printf_float+0xc4>
 80101a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101a6:	4ba3      	ldr	r3, [pc, #652]	; (8010434 <_printf_float+0x2f8>)
 80101a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101ac:	f7f0 fcc8 	bl	8000b40 <__aeabi_dcmple>
 80101b0:	bb30      	cbnz	r0, 8010200 <_printf_float+0xc4>
 80101b2:	2200      	movs	r2, #0
 80101b4:	2300      	movs	r3, #0
 80101b6:	4640      	mov	r0, r8
 80101b8:	4649      	mov	r1, r9
 80101ba:	f7f0 fcb7 	bl	8000b2c <__aeabi_dcmplt>
 80101be:	b110      	cbz	r0, 80101c6 <_printf_float+0x8a>
 80101c0:	232d      	movs	r3, #45	; 0x2d
 80101c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101c6:	4a9c      	ldr	r2, [pc, #624]	; (8010438 <_printf_float+0x2fc>)
 80101c8:	4b9c      	ldr	r3, [pc, #624]	; (801043c <_printf_float+0x300>)
 80101ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80101ce:	bf8c      	ite	hi
 80101d0:	4690      	movhi	r8, r2
 80101d2:	4698      	movls	r8, r3
 80101d4:	2303      	movs	r3, #3
 80101d6:	f02b 0204 	bic.w	r2, fp, #4
 80101da:	6123      	str	r3, [r4, #16]
 80101dc:	6022      	str	r2, [r4, #0]
 80101de:	f04f 0900 	mov.w	r9, #0
 80101e2:	9700      	str	r7, [sp, #0]
 80101e4:	4633      	mov	r3, r6
 80101e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80101e8:	4621      	mov	r1, r4
 80101ea:	4628      	mov	r0, r5
 80101ec:	f000 f9e6 	bl	80105bc <_printf_common>
 80101f0:	3001      	adds	r0, #1
 80101f2:	f040 808d 	bne.w	8010310 <_printf_float+0x1d4>
 80101f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101fa:	b00d      	add	sp, #52	; 0x34
 80101fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010200:	4642      	mov	r2, r8
 8010202:	464b      	mov	r3, r9
 8010204:	4640      	mov	r0, r8
 8010206:	4649      	mov	r1, r9
 8010208:	f7f0 fcb8 	bl	8000b7c <__aeabi_dcmpun>
 801020c:	b110      	cbz	r0, 8010214 <_printf_float+0xd8>
 801020e:	4a8c      	ldr	r2, [pc, #560]	; (8010440 <_printf_float+0x304>)
 8010210:	4b8c      	ldr	r3, [pc, #560]	; (8010444 <_printf_float+0x308>)
 8010212:	e7da      	b.n	80101ca <_printf_float+0x8e>
 8010214:	6861      	ldr	r1, [r4, #4]
 8010216:	1c4b      	adds	r3, r1, #1
 8010218:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801021c:	a80a      	add	r0, sp, #40	; 0x28
 801021e:	d13e      	bne.n	801029e <_printf_float+0x162>
 8010220:	2306      	movs	r3, #6
 8010222:	6063      	str	r3, [r4, #4]
 8010224:	2300      	movs	r3, #0
 8010226:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801022a:	ab09      	add	r3, sp, #36	; 0x24
 801022c:	9300      	str	r3, [sp, #0]
 801022e:	ec49 8b10 	vmov	d0, r8, r9
 8010232:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010236:	6022      	str	r2, [r4, #0]
 8010238:	f8cd a004 	str.w	sl, [sp, #4]
 801023c:	6861      	ldr	r1, [r4, #4]
 801023e:	4628      	mov	r0, r5
 8010240:	f7ff fee8 	bl	8010014 <__cvt>
 8010244:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010248:	2b47      	cmp	r3, #71	; 0x47
 801024a:	4680      	mov	r8, r0
 801024c:	d109      	bne.n	8010262 <_printf_float+0x126>
 801024e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010250:	1cd8      	adds	r0, r3, #3
 8010252:	db02      	blt.n	801025a <_printf_float+0x11e>
 8010254:	6862      	ldr	r2, [r4, #4]
 8010256:	4293      	cmp	r3, r2
 8010258:	dd47      	ble.n	80102ea <_printf_float+0x1ae>
 801025a:	f1aa 0a02 	sub.w	sl, sl, #2
 801025e:	fa5f fa8a 	uxtb.w	sl, sl
 8010262:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010268:	d824      	bhi.n	80102b4 <_printf_float+0x178>
 801026a:	3901      	subs	r1, #1
 801026c:	4652      	mov	r2, sl
 801026e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010272:	9109      	str	r1, [sp, #36]	; 0x24
 8010274:	f7ff ff2f 	bl	80100d6 <__exponent>
 8010278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801027a:	1813      	adds	r3, r2, r0
 801027c:	2a01      	cmp	r2, #1
 801027e:	4681      	mov	r9, r0
 8010280:	6123      	str	r3, [r4, #16]
 8010282:	dc02      	bgt.n	801028a <_printf_float+0x14e>
 8010284:	6822      	ldr	r2, [r4, #0]
 8010286:	07d1      	lsls	r1, r2, #31
 8010288:	d501      	bpl.n	801028e <_printf_float+0x152>
 801028a:	3301      	adds	r3, #1
 801028c:	6123      	str	r3, [r4, #16]
 801028e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010292:	2b00      	cmp	r3, #0
 8010294:	d0a5      	beq.n	80101e2 <_printf_float+0xa6>
 8010296:	232d      	movs	r3, #45	; 0x2d
 8010298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801029c:	e7a1      	b.n	80101e2 <_printf_float+0xa6>
 801029e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80102a2:	f000 8177 	beq.w	8010594 <_printf_float+0x458>
 80102a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80102aa:	d1bb      	bne.n	8010224 <_printf_float+0xe8>
 80102ac:	2900      	cmp	r1, #0
 80102ae:	d1b9      	bne.n	8010224 <_printf_float+0xe8>
 80102b0:	2301      	movs	r3, #1
 80102b2:	e7b6      	b.n	8010222 <_printf_float+0xe6>
 80102b4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80102b8:	d119      	bne.n	80102ee <_printf_float+0x1b2>
 80102ba:	2900      	cmp	r1, #0
 80102bc:	6863      	ldr	r3, [r4, #4]
 80102be:	dd0c      	ble.n	80102da <_printf_float+0x19e>
 80102c0:	6121      	str	r1, [r4, #16]
 80102c2:	b913      	cbnz	r3, 80102ca <_printf_float+0x18e>
 80102c4:	6822      	ldr	r2, [r4, #0]
 80102c6:	07d2      	lsls	r2, r2, #31
 80102c8:	d502      	bpl.n	80102d0 <_printf_float+0x194>
 80102ca:	3301      	adds	r3, #1
 80102cc:	440b      	add	r3, r1
 80102ce:	6123      	str	r3, [r4, #16]
 80102d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80102d4:	f04f 0900 	mov.w	r9, #0
 80102d8:	e7d9      	b.n	801028e <_printf_float+0x152>
 80102da:	b913      	cbnz	r3, 80102e2 <_printf_float+0x1a6>
 80102dc:	6822      	ldr	r2, [r4, #0]
 80102de:	07d0      	lsls	r0, r2, #31
 80102e0:	d501      	bpl.n	80102e6 <_printf_float+0x1aa>
 80102e2:	3302      	adds	r3, #2
 80102e4:	e7f3      	b.n	80102ce <_printf_float+0x192>
 80102e6:	2301      	movs	r3, #1
 80102e8:	e7f1      	b.n	80102ce <_printf_float+0x192>
 80102ea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80102ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80102f2:	4293      	cmp	r3, r2
 80102f4:	db05      	blt.n	8010302 <_printf_float+0x1c6>
 80102f6:	6822      	ldr	r2, [r4, #0]
 80102f8:	6123      	str	r3, [r4, #16]
 80102fa:	07d1      	lsls	r1, r2, #31
 80102fc:	d5e8      	bpl.n	80102d0 <_printf_float+0x194>
 80102fe:	3301      	adds	r3, #1
 8010300:	e7e5      	b.n	80102ce <_printf_float+0x192>
 8010302:	2b00      	cmp	r3, #0
 8010304:	bfd4      	ite	le
 8010306:	f1c3 0302 	rsble	r3, r3, #2
 801030a:	2301      	movgt	r3, #1
 801030c:	4413      	add	r3, r2
 801030e:	e7de      	b.n	80102ce <_printf_float+0x192>
 8010310:	6823      	ldr	r3, [r4, #0]
 8010312:	055a      	lsls	r2, r3, #21
 8010314:	d407      	bmi.n	8010326 <_printf_float+0x1ea>
 8010316:	6923      	ldr	r3, [r4, #16]
 8010318:	4642      	mov	r2, r8
 801031a:	4631      	mov	r1, r6
 801031c:	4628      	mov	r0, r5
 801031e:	47b8      	blx	r7
 8010320:	3001      	adds	r0, #1
 8010322:	d12b      	bne.n	801037c <_printf_float+0x240>
 8010324:	e767      	b.n	80101f6 <_printf_float+0xba>
 8010326:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801032a:	f240 80dc 	bls.w	80104e6 <_printf_float+0x3aa>
 801032e:	2200      	movs	r2, #0
 8010330:	2300      	movs	r3, #0
 8010332:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010336:	f7f0 fbef 	bl	8000b18 <__aeabi_dcmpeq>
 801033a:	2800      	cmp	r0, #0
 801033c:	d033      	beq.n	80103a6 <_printf_float+0x26a>
 801033e:	2301      	movs	r3, #1
 8010340:	4a41      	ldr	r2, [pc, #260]	; (8010448 <_printf_float+0x30c>)
 8010342:	4631      	mov	r1, r6
 8010344:	4628      	mov	r0, r5
 8010346:	47b8      	blx	r7
 8010348:	3001      	adds	r0, #1
 801034a:	f43f af54 	beq.w	80101f6 <_printf_float+0xba>
 801034e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010352:	429a      	cmp	r2, r3
 8010354:	db02      	blt.n	801035c <_printf_float+0x220>
 8010356:	6823      	ldr	r3, [r4, #0]
 8010358:	07d8      	lsls	r0, r3, #31
 801035a:	d50f      	bpl.n	801037c <_printf_float+0x240>
 801035c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010360:	4631      	mov	r1, r6
 8010362:	4628      	mov	r0, r5
 8010364:	47b8      	blx	r7
 8010366:	3001      	adds	r0, #1
 8010368:	f43f af45 	beq.w	80101f6 <_printf_float+0xba>
 801036c:	f04f 0800 	mov.w	r8, #0
 8010370:	f104 091a 	add.w	r9, r4, #26
 8010374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010376:	3b01      	subs	r3, #1
 8010378:	4543      	cmp	r3, r8
 801037a:	dc09      	bgt.n	8010390 <_printf_float+0x254>
 801037c:	6823      	ldr	r3, [r4, #0]
 801037e:	079b      	lsls	r3, r3, #30
 8010380:	f100 8103 	bmi.w	801058a <_printf_float+0x44e>
 8010384:	68e0      	ldr	r0, [r4, #12]
 8010386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010388:	4298      	cmp	r0, r3
 801038a:	bfb8      	it	lt
 801038c:	4618      	movlt	r0, r3
 801038e:	e734      	b.n	80101fa <_printf_float+0xbe>
 8010390:	2301      	movs	r3, #1
 8010392:	464a      	mov	r2, r9
 8010394:	4631      	mov	r1, r6
 8010396:	4628      	mov	r0, r5
 8010398:	47b8      	blx	r7
 801039a:	3001      	adds	r0, #1
 801039c:	f43f af2b 	beq.w	80101f6 <_printf_float+0xba>
 80103a0:	f108 0801 	add.w	r8, r8, #1
 80103a4:	e7e6      	b.n	8010374 <_printf_float+0x238>
 80103a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	dc2b      	bgt.n	8010404 <_printf_float+0x2c8>
 80103ac:	2301      	movs	r3, #1
 80103ae:	4a26      	ldr	r2, [pc, #152]	; (8010448 <_printf_float+0x30c>)
 80103b0:	4631      	mov	r1, r6
 80103b2:	4628      	mov	r0, r5
 80103b4:	47b8      	blx	r7
 80103b6:	3001      	adds	r0, #1
 80103b8:	f43f af1d 	beq.w	80101f6 <_printf_float+0xba>
 80103bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103be:	b923      	cbnz	r3, 80103ca <_printf_float+0x28e>
 80103c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103c2:	b913      	cbnz	r3, 80103ca <_printf_float+0x28e>
 80103c4:	6823      	ldr	r3, [r4, #0]
 80103c6:	07d9      	lsls	r1, r3, #31
 80103c8:	d5d8      	bpl.n	801037c <_printf_float+0x240>
 80103ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103ce:	4631      	mov	r1, r6
 80103d0:	4628      	mov	r0, r5
 80103d2:	47b8      	blx	r7
 80103d4:	3001      	adds	r0, #1
 80103d6:	f43f af0e 	beq.w	80101f6 <_printf_float+0xba>
 80103da:	f04f 0900 	mov.w	r9, #0
 80103de:	f104 0a1a 	add.w	sl, r4, #26
 80103e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103e4:	425b      	negs	r3, r3
 80103e6:	454b      	cmp	r3, r9
 80103e8:	dc01      	bgt.n	80103ee <_printf_float+0x2b2>
 80103ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103ec:	e794      	b.n	8010318 <_printf_float+0x1dc>
 80103ee:	2301      	movs	r3, #1
 80103f0:	4652      	mov	r2, sl
 80103f2:	4631      	mov	r1, r6
 80103f4:	4628      	mov	r0, r5
 80103f6:	47b8      	blx	r7
 80103f8:	3001      	adds	r0, #1
 80103fa:	f43f aefc 	beq.w	80101f6 <_printf_float+0xba>
 80103fe:	f109 0901 	add.w	r9, r9, #1
 8010402:	e7ee      	b.n	80103e2 <_printf_float+0x2a6>
 8010404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010406:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010408:	429a      	cmp	r2, r3
 801040a:	bfa8      	it	ge
 801040c:	461a      	movge	r2, r3
 801040e:	2a00      	cmp	r2, #0
 8010410:	4691      	mov	r9, r2
 8010412:	dd07      	ble.n	8010424 <_printf_float+0x2e8>
 8010414:	4613      	mov	r3, r2
 8010416:	4631      	mov	r1, r6
 8010418:	4642      	mov	r2, r8
 801041a:	4628      	mov	r0, r5
 801041c:	47b8      	blx	r7
 801041e:	3001      	adds	r0, #1
 8010420:	f43f aee9 	beq.w	80101f6 <_printf_float+0xba>
 8010424:	f104 031a 	add.w	r3, r4, #26
 8010428:	f04f 0b00 	mov.w	fp, #0
 801042c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010430:	9306      	str	r3, [sp, #24]
 8010432:	e015      	b.n	8010460 <_printf_float+0x324>
 8010434:	7fefffff 	.word	0x7fefffff
 8010438:	080151f8 	.word	0x080151f8
 801043c:	080151f4 	.word	0x080151f4
 8010440:	08015200 	.word	0x08015200
 8010444:	080151fc 	.word	0x080151fc
 8010448:	080154b4 	.word	0x080154b4
 801044c:	2301      	movs	r3, #1
 801044e:	9a06      	ldr	r2, [sp, #24]
 8010450:	4631      	mov	r1, r6
 8010452:	4628      	mov	r0, r5
 8010454:	47b8      	blx	r7
 8010456:	3001      	adds	r0, #1
 8010458:	f43f aecd 	beq.w	80101f6 <_printf_float+0xba>
 801045c:	f10b 0b01 	add.w	fp, fp, #1
 8010460:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010464:	ebaa 0309 	sub.w	r3, sl, r9
 8010468:	455b      	cmp	r3, fp
 801046a:	dcef      	bgt.n	801044c <_printf_float+0x310>
 801046c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010470:	429a      	cmp	r2, r3
 8010472:	44d0      	add	r8, sl
 8010474:	db15      	blt.n	80104a2 <_printf_float+0x366>
 8010476:	6823      	ldr	r3, [r4, #0]
 8010478:	07da      	lsls	r2, r3, #31
 801047a:	d412      	bmi.n	80104a2 <_printf_float+0x366>
 801047c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801047e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010480:	eba3 020a 	sub.w	r2, r3, sl
 8010484:	eba3 0a01 	sub.w	sl, r3, r1
 8010488:	4592      	cmp	sl, r2
 801048a:	bfa8      	it	ge
 801048c:	4692      	movge	sl, r2
 801048e:	f1ba 0f00 	cmp.w	sl, #0
 8010492:	dc0e      	bgt.n	80104b2 <_printf_float+0x376>
 8010494:	f04f 0800 	mov.w	r8, #0
 8010498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801049c:	f104 091a 	add.w	r9, r4, #26
 80104a0:	e019      	b.n	80104d6 <_printf_float+0x39a>
 80104a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104a6:	4631      	mov	r1, r6
 80104a8:	4628      	mov	r0, r5
 80104aa:	47b8      	blx	r7
 80104ac:	3001      	adds	r0, #1
 80104ae:	d1e5      	bne.n	801047c <_printf_float+0x340>
 80104b0:	e6a1      	b.n	80101f6 <_printf_float+0xba>
 80104b2:	4653      	mov	r3, sl
 80104b4:	4642      	mov	r2, r8
 80104b6:	4631      	mov	r1, r6
 80104b8:	4628      	mov	r0, r5
 80104ba:	47b8      	blx	r7
 80104bc:	3001      	adds	r0, #1
 80104be:	d1e9      	bne.n	8010494 <_printf_float+0x358>
 80104c0:	e699      	b.n	80101f6 <_printf_float+0xba>
 80104c2:	2301      	movs	r3, #1
 80104c4:	464a      	mov	r2, r9
 80104c6:	4631      	mov	r1, r6
 80104c8:	4628      	mov	r0, r5
 80104ca:	47b8      	blx	r7
 80104cc:	3001      	adds	r0, #1
 80104ce:	f43f ae92 	beq.w	80101f6 <_printf_float+0xba>
 80104d2:	f108 0801 	add.w	r8, r8, #1
 80104d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104da:	1a9b      	subs	r3, r3, r2
 80104dc:	eba3 030a 	sub.w	r3, r3, sl
 80104e0:	4543      	cmp	r3, r8
 80104e2:	dcee      	bgt.n	80104c2 <_printf_float+0x386>
 80104e4:	e74a      	b.n	801037c <_printf_float+0x240>
 80104e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104e8:	2a01      	cmp	r2, #1
 80104ea:	dc01      	bgt.n	80104f0 <_printf_float+0x3b4>
 80104ec:	07db      	lsls	r3, r3, #31
 80104ee:	d53a      	bpl.n	8010566 <_printf_float+0x42a>
 80104f0:	2301      	movs	r3, #1
 80104f2:	4642      	mov	r2, r8
 80104f4:	4631      	mov	r1, r6
 80104f6:	4628      	mov	r0, r5
 80104f8:	47b8      	blx	r7
 80104fa:	3001      	adds	r0, #1
 80104fc:	f43f ae7b 	beq.w	80101f6 <_printf_float+0xba>
 8010500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010504:	4631      	mov	r1, r6
 8010506:	4628      	mov	r0, r5
 8010508:	47b8      	blx	r7
 801050a:	3001      	adds	r0, #1
 801050c:	f108 0801 	add.w	r8, r8, #1
 8010510:	f43f ae71 	beq.w	80101f6 <_printf_float+0xba>
 8010514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010516:	2200      	movs	r2, #0
 8010518:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 801051c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010520:	2300      	movs	r3, #0
 8010522:	f7f0 faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8010526:	b9c8      	cbnz	r0, 801055c <_printf_float+0x420>
 8010528:	4653      	mov	r3, sl
 801052a:	4642      	mov	r2, r8
 801052c:	4631      	mov	r1, r6
 801052e:	4628      	mov	r0, r5
 8010530:	47b8      	blx	r7
 8010532:	3001      	adds	r0, #1
 8010534:	d10e      	bne.n	8010554 <_printf_float+0x418>
 8010536:	e65e      	b.n	80101f6 <_printf_float+0xba>
 8010538:	2301      	movs	r3, #1
 801053a:	4652      	mov	r2, sl
 801053c:	4631      	mov	r1, r6
 801053e:	4628      	mov	r0, r5
 8010540:	47b8      	blx	r7
 8010542:	3001      	adds	r0, #1
 8010544:	f43f ae57 	beq.w	80101f6 <_printf_float+0xba>
 8010548:	f108 0801 	add.w	r8, r8, #1
 801054c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801054e:	3b01      	subs	r3, #1
 8010550:	4543      	cmp	r3, r8
 8010552:	dcf1      	bgt.n	8010538 <_printf_float+0x3fc>
 8010554:	464b      	mov	r3, r9
 8010556:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801055a:	e6de      	b.n	801031a <_printf_float+0x1de>
 801055c:	f04f 0800 	mov.w	r8, #0
 8010560:	f104 0a1a 	add.w	sl, r4, #26
 8010564:	e7f2      	b.n	801054c <_printf_float+0x410>
 8010566:	2301      	movs	r3, #1
 8010568:	e7df      	b.n	801052a <_printf_float+0x3ee>
 801056a:	2301      	movs	r3, #1
 801056c:	464a      	mov	r2, r9
 801056e:	4631      	mov	r1, r6
 8010570:	4628      	mov	r0, r5
 8010572:	47b8      	blx	r7
 8010574:	3001      	adds	r0, #1
 8010576:	f43f ae3e 	beq.w	80101f6 <_printf_float+0xba>
 801057a:	f108 0801 	add.w	r8, r8, #1
 801057e:	68e3      	ldr	r3, [r4, #12]
 8010580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010582:	1a9b      	subs	r3, r3, r2
 8010584:	4543      	cmp	r3, r8
 8010586:	dcf0      	bgt.n	801056a <_printf_float+0x42e>
 8010588:	e6fc      	b.n	8010384 <_printf_float+0x248>
 801058a:	f04f 0800 	mov.w	r8, #0
 801058e:	f104 0919 	add.w	r9, r4, #25
 8010592:	e7f4      	b.n	801057e <_printf_float+0x442>
 8010594:	2900      	cmp	r1, #0
 8010596:	f43f ae8b 	beq.w	80102b0 <_printf_float+0x174>
 801059a:	2300      	movs	r3, #0
 801059c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80105a0:	ab09      	add	r3, sp, #36	; 0x24
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	ec49 8b10 	vmov	d0, r8, r9
 80105a8:	6022      	str	r2, [r4, #0]
 80105aa:	f8cd a004 	str.w	sl, [sp, #4]
 80105ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80105b2:	4628      	mov	r0, r5
 80105b4:	f7ff fd2e 	bl	8010014 <__cvt>
 80105b8:	4680      	mov	r8, r0
 80105ba:	e648      	b.n	801024e <_printf_float+0x112>

080105bc <_printf_common>:
 80105bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105c0:	4691      	mov	r9, r2
 80105c2:	461f      	mov	r7, r3
 80105c4:	688a      	ldr	r2, [r1, #8]
 80105c6:	690b      	ldr	r3, [r1, #16]
 80105c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80105cc:	4293      	cmp	r3, r2
 80105ce:	bfb8      	it	lt
 80105d0:	4613      	movlt	r3, r2
 80105d2:	f8c9 3000 	str.w	r3, [r9]
 80105d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80105da:	4606      	mov	r6, r0
 80105dc:	460c      	mov	r4, r1
 80105de:	b112      	cbz	r2, 80105e6 <_printf_common+0x2a>
 80105e0:	3301      	adds	r3, #1
 80105e2:	f8c9 3000 	str.w	r3, [r9]
 80105e6:	6823      	ldr	r3, [r4, #0]
 80105e8:	0699      	lsls	r1, r3, #26
 80105ea:	bf42      	ittt	mi
 80105ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80105f0:	3302      	addmi	r3, #2
 80105f2:	f8c9 3000 	strmi.w	r3, [r9]
 80105f6:	6825      	ldr	r5, [r4, #0]
 80105f8:	f015 0506 	ands.w	r5, r5, #6
 80105fc:	d107      	bne.n	801060e <_printf_common+0x52>
 80105fe:	f104 0a19 	add.w	sl, r4, #25
 8010602:	68e3      	ldr	r3, [r4, #12]
 8010604:	f8d9 2000 	ldr.w	r2, [r9]
 8010608:	1a9b      	subs	r3, r3, r2
 801060a:	42ab      	cmp	r3, r5
 801060c:	dc28      	bgt.n	8010660 <_printf_common+0xa4>
 801060e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010612:	6822      	ldr	r2, [r4, #0]
 8010614:	3300      	adds	r3, #0
 8010616:	bf18      	it	ne
 8010618:	2301      	movne	r3, #1
 801061a:	0692      	lsls	r2, r2, #26
 801061c:	d42d      	bmi.n	801067a <_printf_common+0xbe>
 801061e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010622:	4639      	mov	r1, r7
 8010624:	4630      	mov	r0, r6
 8010626:	47c0      	blx	r8
 8010628:	3001      	adds	r0, #1
 801062a:	d020      	beq.n	801066e <_printf_common+0xb2>
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	68e5      	ldr	r5, [r4, #12]
 8010630:	f8d9 2000 	ldr.w	r2, [r9]
 8010634:	f003 0306 	and.w	r3, r3, #6
 8010638:	2b04      	cmp	r3, #4
 801063a:	bf08      	it	eq
 801063c:	1aad      	subeq	r5, r5, r2
 801063e:	68a3      	ldr	r3, [r4, #8]
 8010640:	6922      	ldr	r2, [r4, #16]
 8010642:	bf0c      	ite	eq
 8010644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010648:	2500      	movne	r5, #0
 801064a:	4293      	cmp	r3, r2
 801064c:	bfc4      	itt	gt
 801064e:	1a9b      	subgt	r3, r3, r2
 8010650:	18ed      	addgt	r5, r5, r3
 8010652:	f04f 0900 	mov.w	r9, #0
 8010656:	341a      	adds	r4, #26
 8010658:	454d      	cmp	r5, r9
 801065a:	d11a      	bne.n	8010692 <_printf_common+0xd6>
 801065c:	2000      	movs	r0, #0
 801065e:	e008      	b.n	8010672 <_printf_common+0xb6>
 8010660:	2301      	movs	r3, #1
 8010662:	4652      	mov	r2, sl
 8010664:	4639      	mov	r1, r7
 8010666:	4630      	mov	r0, r6
 8010668:	47c0      	blx	r8
 801066a:	3001      	adds	r0, #1
 801066c:	d103      	bne.n	8010676 <_printf_common+0xba>
 801066e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010676:	3501      	adds	r5, #1
 8010678:	e7c3      	b.n	8010602 <_printf_common+0x46>
 801067a:	18e1      	adds	r1, r4, r3
 801067c:	1c5a      	adds	r2, r3, #1
 801067e:	2030      	movs	r0, #48	; 0x30
 8010680:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010684:	4422      	add	r2, r4
 8010686:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801068a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801068e:	3302      	adds	r3, #2
 8010690:	e7c5      	b.n	801061e <_printf_common+0x62>
 8010692:	2301      	movs	r3, #1
 8010694:	4622      	mov	r2, r4
 8010696:	4639      	mov	r1, r7
 8010698:	4630      	mov	r0, r6
 801069a:	47c0      	blx	r8
 801069c:	3001      	adds	r0, #1
 801069e:	d0e6      	beq.n	801066e <_printf_common+0xb2>
 80106a0:	f109 0901 	add.w	r9, r9, #1
 80106a4:	e7d8      	b.n	8010658 <_printf_common+0x9c>
	...

080106a8 <_printf_i>:
 80106a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80106b0:	460c      	mov	r4, r1
 80106b2:	7e09      	ldrb	r1, [r1, #24]
 80106b4:	b085      	sub	sp, #20
 80106b6:	296e      	cmp	r1, #110	; 0x6e
 80106b8:	4617      	mov	r7, r2
 80106ba:	4606      	mov	r6, r0
 80106bc:	4698      	mov	r8, r3
 80106be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106c0:	f000 80b3 	beq.w	801082a <_printf_i+0x182>
 80106c4:	d822      	bhi.n	801070c <_printf_i+0x64>
 80106c6:	2963      	cmp	r1, #99	; 0x63
 80106c8:	d036      	beq.n	8010738 <_printf_i+0x90>
 80106ca:	d80a      	bhi.n	80106e2 <_printf_i+0x3a>
 80106cc:	2900      	cmp	r1, #0
 80106ce:	f000 80b9 	beq.w	8010844 <_printf_i+0x19c>
 80106d2:	2958      	cmp	r1, #88	; 0x58
 80106d4:	f000 8083 	beq.w	80107de <_printf_i+0x136>
 80106d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80106e0:	e032      	b.n	8010748 <_printf_i+0xa0>
 80106e2:	2964      	cmp	r1, #100	; 0x64
 80106e4:	d001      	beq.n	80106ea <_printf_i+0x42>
 80106e6:	2969      	cmp	r1, #105	; 0x69
 80106e8:	d1f6      	bne.n	80106d8 <_printf_i+0x30>
 80106ea:	6820      	ldr	r0, [r4, #0]
 80106ec:	6813      	ldr	r3, [r2, #0]
 80106ee:	0605      	lsls	r5, r0, #24
 80106f0:	f103 0104 	add.w	r1, r3, #4
 80106f4:	d52a      	bpl.n	801074c <_printf_i+0xa4>
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	6011      	str	r1, [r2, #0]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	da03      	bge.n	8010706 <_printf_i+0x5e>
 80106fe:	222d      	movs	r2, #45	; 0x2d
 8010700:	425b      	negs	r3, r3
 8010702:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010706:	486f      	ldr	r0, [pc, #444]	; (80108c4 <_printf_i+0x21c>)
 8010708:	220a      	movs	r2, #10
 801070a:	e039      	b.n	8010780 <_printf_i+0xd8>
 801070c:	2973      	cmp	r1, #115	; 0x73
 801070e:	f000 809d 	beq.w	801084c <_printf_i+0x1a4>
 8010712:	d808      	bhi.n	8010726 <_printf_i+0x7e>
 8010714:	296f      	cmp	r1, #111	; 0x6f
 8010716:	d020      	beq.n	801075a <_printf_i+0xb2>
 8010718:	2970      	cmp	r1, #112	; 0x70
 801071a:	d1dd      	bne.n	80106d8 <_printf_i+0x30>
 801071c:	6823      	ldr	r3, [r4, #0]
 801071e:	f043 0320 	orr.w	r3, r3, #32
 8010722:	6023      	str	r3, [r4, #0]
 8010724:	e003      	b.n	801072e <_printf_i+0x86>
 8010726:	2975      	cmp	r1, #117	; 0x75
 8010728:	d017      	beq.n	801075a <_printf_i+0xb2>
 801072a:	2978      	cmp	r1, #120	; 0x78
 801072c:	d1d4      	bne.n	80106d8 <_printf_i+0x30>
 801072e:	2378      	movs	r3, #120	; 0x78
 8010730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010734:	4864      	ldr	r0, [pc, #400]	; (80108c8 <_printf_i+0x220>)
 8010736:	e055      	b.n	80107e4 <_printf_i+0x13c>
 8010738:	6813      	ldr	r3, [r2, #0]
 801073a:	1d19      	adds	r1, r3, #4
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	6011      	str	r1, [r2, #0]
 8010740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010748:	2301      	movs	r3, #1
 801074a:	e08c      	b.n	8010866 <_printf_i+0x1be>
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	6011      	str	r1, [r2, #0]
 8010750:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010754:	bf18      	it	ne
 8010756:	b21b      	sxthne	r3, r3
 8010758:	e7cf      	b.n	80106fa <_printf_i+0x52>
 801075a:	6813      	ldr	r3, [r2, #0]
 801075c:	6825      	ldr	r5, [r4, #0]
 801075e:	1d18      	adds	r0, r3, #4
 8010760:	6010      	str	r0, [r2, #0]
 8010762:	0628      	lsls	r0, r5, #24
 8010764:	d501      	bpl.n	801076a <_printf_i+0xc2>
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	e002      	b.n	8010770 <_printf_i+0xc8>
 801076a:	0668      	lsls	r0, r5, #25
 801076c:	d5fb      	bpl.n	8010766 <_printf_i+0xbe>
 801076e:	881b      	ldrh	r3, [r3, #0]
 8010770:	4854      	ldr	r0, [pc, #336]	; (80108c4 <_printf_i+0x21c>)
 8010772:	296f      	cmp	r1, #111	; 0x6f
 8010774:	bf14      	ite	ne
 8010776:	220a      	movne	r2, #10
 8010778:	2208      	moveq	r2, #8
 801077a:	2100      	movs	r1, #0
 801077c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010780:	6865      	ldr	r5, [r4, #4]
 8010782:	60a5      	str	r5, [r4, #8]
 8010784:	2d00      	cmp	r5, #0
 8010786:	f2c0 8095 	blt.w	80108b4 <_printf_i+0x20c>
 801078a:	6821      	ldr	r1, [r4, #0]
 801078c:	f021 0104 	bic.w	r1, r1, #4
 8010790:	6021      	str	r1, [r4, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d13d      	bne.n	8010812 <_printf_i+0x16a>
 8010796:	2d00      	cmp	r5, #0
 8010798:	f040 808e 	bne.w	80108b8 <_printf_i+0x210>
 801079c:	4665      	mov	r5, ip
 801079e:	2a08      	cmp	r2, #8
 80107a0:	d10b      	bne.n	80107ba <_printf_i+0x112>
 80107a2:	6823      	ldr	r3, [r4, #0]
 80107a4:	07db      	lsls	r3, r3, #31
 80107a6:	d508      	bpl.n	80107ba <_printf_i+0x112>
 80107a8:	6923      	ldr	r3, [r4, #16]
 80107aa:	6862      	ldr	r2, [r4, #4]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	bfde      	ittt	le
 80107b0:	2330      	movle	r3, #48	; 0x30
 80107b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80107b6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80107ba:	ebac 0305 	sub.w	r3, ip, r5
 80107be:	6123      	str	r3, [r4, #16]
 80107c0:	f8cd 8000 	str.w	r8, [sp]
 80107c4:	463b      	mov	r3, r7
 80107c6:	aa03      	add	r2, sp, #12
 80107c8:	4621      	mov	r1, r4
 80107ca:	4630      	mov	r0, r6
 80107cc:	f7ff fef6 	bl	80105bc <_printf_common>
 80107d0:	3001      	adds	r0, #1
 80107d2:	d14d      	bne.n	8010870 <_printf_i+0x1c8>
 80107d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107d8:	b005      	add	sp, #20
 80107da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107de:	4839      	ldr	r0, [pc, #228]	; (80108c4 <_printf_i+0x21c>)
 80107e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80107e4:	6813      	ldr	r3, [r2, #0]
 80107e6:	6821      	ldr	r1, [r4, #0]
 80107e8:	1d1d      	adds	r5, r3, #4
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	6015      	str	r5, [r2, #0]
 80107ee:	060a      	lsls	r2, r1, #24
 80107f0:	d50b      	bpl.n	801080a <_printf_i+0x162>
 80107f2:	07ca      	lsls	r2, r1, #31
 80107f4:	bf44      	itt	mi
 80107f6:	f041 0120 	orrmi.w	r1, r1, #32
 80107fa:	6021      	strmi	r1, [r4, #0]
 80107fc:	b91b      	cbnz	r3, 8010806 <_printf_i+0x15e>
 80107fe:	6822      	ldr	r2, [r4, #0]
 8010800:	f022 0220 	bic.w	r2, r2, #32
 8010804:	6022      	str	r2, [r4, #0]
 8010806:	2210      	movs	r2, #16
 8010808:	e7b7      	b.n	801077a <_printf_i+0xd2>
 801080a:	064d      	lsls	r5, r1, #25
 801080c:	bf48      	it	mi
 801080e:	b29b      	uxthmi	r3, r3
 8010810:	e7ef      	b.n	80107f2 <_printf_i+0x14a>
 8010812:	4665      	mov	r5, ip
 8010814:	fbb3 f1f2 	udiv	r1, r3, r2
 8010818:	fb02 3311 	mls	r3, r2, r1, r3
 801081c:	5cc3      	ldrb	r3, [r0, r3]
 801081e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010822:	460b      	mov	r3, r1
 8010824:	2900      	cmp	r1, #0
 8010826:	d1f5      	bne.n	8010814 <_printf_i+0x16c>
 8010828:	e7b9      	b.n	801079e <_printf_i+0xf6>
 801082a:	6813      	ldr	r3, [r2, #0]
 801082c:	6825      	ldr	r5, [r4, #0]
 801082e:	6961      	ldr	r1, [r4, #20]
 8010830:	1d18      	adds	r0, r3, #4
 8010832:	6010      	str	r0, [r2, #0]
 8010834:	0628      	lsls	r0, r5, #24
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	d501      	bpl.n	801083e <_printf_i+0x196>
 801083a:	6019      	str	r1, [r3, #0]
 801083c:	e002      	b.n	8010844 <_printf_i+0x19c>
 801083e:	066a      	lsls	r2, r5, #25
 8010840:	d5fb      	bpl.n	801083a <_printf_i+0x192>
 8010842:	8019      	strh	r1, [r3, #0]
 8010844:	2300      	movs	r3, #0
 8010846:	6123      	str	r3, [r4, #16]
 8010848:	4665      	mov	r5, ip
 801084a:	e7b9      	b.n	80107c0 <_printf_i+0x118>
 801084c:	6813      	ldr	r3, [r2, #0]
 801084e:	1d19      	adds	r1, r3, #4
 8010850:	6011      	str	r1, [r2, #0]
 8010852:	681d      	ldr	r5, [r3, #0]
 8010854:	6862      	ldr	r2, [r4, #4]
 8010856:	2100      	movs	r1, #0
 8010858:	4628      	mov	r0, r5
 801085a:	f7ef fce9 	bl	8000230 <memchr>
 801085e:	b108      	cbz	r0, 8010864 <_printf_i+0x1bc>
 8010860:	1b40      	subs	r0, r0, r5
 8010862:	6060      	str	r0, [r4, #4]
 8010864:	6863      	ldr	r3, [r4, #4]
 8010866:	6123      	str	r3, [r4, #16]
 8010868:	2300      	movs	r3, #0
 801086a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801086e:	e7a7      	b.n	80107c0 <_printf_i+0x118>
 8010870:	6923      	ldr	r3, [r4, #16]
 8010872:	462a      	mov	r2, r5
 8010874:	4639      	mov	r1, r7
 8010876:	4630      	mov	r0, r6
 8010878:	47c0      	blx	r8
 801087a:	3001      	adds	r0, #1
 801087c:	d0aa      	beq.n	80107d4 <_printf_i+0x12c>
 801087e:	6823      	ldr	r3, [r4, #0]
 8010880:	079b      	lsls	r3, r3, #30
 8010882:	d413      	bmi.n	80108ac <_printf_i+0x204>
 8010884:	68e0      	ldr	r0, [r4, #12]
 8010886:	9b03      	ldr	r3, [sp, #12]
 8010888:	4298      	cmp	r0, r3
 801088a:	bfb8      	it	lt
 801088c:	4618      	movlt	r0, r3
 801088e:	e7a3      	b.n	80107d8 <_printf_i+0x130>
 8010890:	2301      	movs	r3, #1
 8010892:	464a      	mov	r2, r9
 8010894:	4639      	mov	r1, r7
 8010896:	4630      	mov	r0, r6
 8010898:	47c0      	blx	r8
 801089a:	3001      	adds	r0, #1
 801089c:	d09a      	beq.n	80107d4 <_printf_i+0x12c>
 801089e:	3501      	adds	r5, #1
 80108a0:	68e3      	ldr	r3, [r4, #12]
 80108a2:	9a03      	ldr	r2, [sp, #12]
 80108a4:	1a9b      	subs	r3, r3, r2
 80108a6:	42ab      	cmp	r3, r5
 80108a8:	dcf2      	bgt.n	8010890 <_printf_i+0x1e8>
 80108aa:	e7eb      	b.n	8010884 <_printf_i+0x1dc>
 80108ac:	2500      	movs	r5, #0
 80108ae:	f104 0919 	add.w	r9, r4, #25
 80108b2:	e7f5      	b.n	80108a0 <_printf_i+0x1f8>
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d1ac      	bne.n	8010812 <_printf_i+0x16a>
 80108b8:	7803      	ldrb	r3, [r0, #0]
 80108ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80108be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108c2:	e76c      	b.n	801079e <_printf_i+0xf6>
 80108c4:	08015204 	.word	0x08015204
 80108c8:	08015215 	.word	0x08015215

080108cc <iprintf>:
 80108cc:	b40f      	push	{r0, r1, r2, r3}
 80108ce:	4b0a      	ldr	r3, [pc, #40]	; (80108f8 <iprintf+0x2c>)
 80108d0:	b513      	push	{r0, r1, r4, lr}
 80108d2:	681c      	ldr	r4, [r3, #0]
 80108d4:	b124      	cbz	r4, 80108e0 <iprintf+0x14>
 80108d6:	69a3      	ldr	r3, [r4, #24]
 80108d8:	b913      	cbnz	r3, 80108e0 <iprintf+0x14>
 80108da:	4620      	mov	r0, r4
 80108dc:	f001 f8ac 	bl	8011a38 <__sinit>
 80108e0:	ab05      	add	r3, sp, #20
 80108e2:	9a04      	ldr	r2, [sp, #16]
 80108e4:	68a1      	ldr	r1, [r4, #8]
 80108e6:	9301      	str	r3, [sp, #4]
 80108e8:	4620      	mov	r0, r4
 80108ea:	f001 fec1 	bl	8012670 <_vfiprintf_r>
 80108ee:	b002      	add	sp, #8
 80108f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108f4:	b004      	add	sp, #16
 80108f6:	4770      	bx	lr
 80108f8:	20001c34 	.word	0x20001c34

080108fc <_puts_r>:
 80108fc:	b570      	push	{r4, r5, r6, lr}
 80108fe:	460e      	mov	r6, r1
 8010900:	4605      	mov	r5, r0
 8010902:	b118      	cbz	r0, 801090c <_puts_r+0x10>
 8010904:	6983      	ldr	r3, [r0, #24]
 8010906:	b90b      	cbnz	r3, 801090c <_puts_r+0x10>
 8010908:	f001 f896 	bl	8011a38 <__sinit>
 801090c:	69ab      	ldr	r3, [r5, #24]
 801090e:	68ac      	ldr	r4, [r5, #8]
 8010910:	b913      	cbnz	r3, 8010918 <_puts_r+0x1c>
 8010912:	4628      	mov	r0, r5
 8010914:	f001 f890 	bl	8011a38 <__sinit>
 8010918:	4b23      	ldr	r3, [pc, #140]	; (80109a8 <_puts_r+0xac>)
 801091a:	429c      	cmp	r4, r3
 801091c:	d117      	bne.n	801094e <_puts_r+0x52>
 801091e:	686c      	ldr	r4, [r5, #4]
 8010920:	89a3      	ldrh	r3, [r4, #12]
 8010922:	071b      	lsls	r3, r3, #28
 8010924:	d51d      	bpl.n	8010962 <_puts_r+0x66>
 8010926:	6923      	ldr	r3, [r4, #16]
 8010928:	b1db      	cbz	r3, 8010962 <_puts_r+0x66>
 801092a:	3e01      	subs	r6, #1
 801092c:	68a3      	ldr	r3, [r4, #8]
 801092e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010932:	3b01      	subs	r3, #1
 8010934:	60a3      	str	r3, [r4, #8]
 8010936:	b9e9      	cbnz	r1, 8010974 <_puts_r+0x78>
 8010938:	2b00      	cmp	r3, #0
 801093a:	da2e      	bge.n	801099a <_puts_r+0x9e>
 801093c:	4622      	mov	r2, r4
 801093e:	210a      	movs	r1, #10
 8010940:	4628      	mov	r0, r5
 8010942:	f000 f883 	bl	8010a4c <__swbuf_r>
 8010946:	3001      	adds	r0, #1
 8010948:	d011      	beq.n	801096e <_puts_r+0x72>
 801094a:	200a      	movs	r0, #10
 801094c:	e011      	b.n	8010972 <_puts_r+0x76>
 801094e:	4b17      	ldr	r3, [pc, #92]	; (80109ac <_puts_r+0xb0>)
 8010950:	429c      	cmp	r4, r3
 8010952:	d101      	bne.n	8010958 <_puts_r+0x5c>
 8010954:	68ac      	ldr	r4, [r5, #8]
 8010956:	e7e3      	b.n	8010920 <_puts_r+0x24>
 8010958:	4b15      	ldr	r3, [pc, #84]	; (80109b0 <_puts_r+0xb4>)
 801095a:	429c      	cmp	r4, r3
 801095c:	bf08      	it	eq
 801095e:	68ec      	ldreq	r4, [r5, #12]
 8010960:	e7de      	b.n	8010920 <_puts_r+0x24>
 8010962:	4621      	mov	r1, r4
 8010964:	4628      	mov	r0, r5
 8010966:	f000 f8c3 	bl	8010af0 <__swsetup_r>
 801096a:	2800      	cmp	r0, #0
 801096c:	d0dd      	beq.n	801092a <_puts_r+0x2e>
 801096e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010972:	bd70      	pop	{r4, r5, r6, pc}
 8010974:	2b00      	cmp	r3, #0
 8010976:	da04      	bge.n	8010982 <_puts_r+0x86>
 8010978:	69a2      	ldr	r2, [r4, #24]
 801097a:	429a      	cmp	r2, r3
 801097c:	dc06      	bgt.n	801098c <_puts_r+0x90>
 801097e:	290a      	cmp	r1, #10
 8010980:	d004      	beq.n	801098c <_puts_r+0x90>
 8010982:	6823      	ldr	r3, [r4, #0]
 8010984:	1c5a      	adds	r2, r3, #1
 8010986:	6022      	str	r2, [r4, #0]
 8010988:	7019      	strb	r1, [r3, #0]
 801098a:	e7cf      	b.n	801092c <_puts_r+0x30>
 801098c:	4622      	mov	r2, r4
 801098e:	4628      	mov	r0, r5
 8010990:	f000 f85c 	bl	8010a4c <__swbuf_r>
 8010994:	3001      	adds	r0, #1
 8010996:	d1c9      	bne.n	801092c <_puts_r+0x30>
 8010998:	e7e9      	b.n	801096e <_puts_r+0x72>
 801099a:	6823      	ldr	r3, [r4, #0]
 801099c:	200a      	movs	r0, #10
 801099e:	1c5a      	adds	r2, r3, #1
 80109a0:	6022      	str	r2, [r4, #0]
 80109a2:	7018      	strb	r0, [r3, #0]
 80109a4:	e7e5      	b.n	8010972 <_puts_r+0x76>
 80109a6:	bf00      	nop
 80109a8:	08015254 	.word	0x08015254
 80109ac:	08015274 	.word	0x08015274
 80109b0:	08015234 	.word	0x08015234

080109b4 <puts>:
 80109b4:	4b02      	ldr	r3, [pc, #8]	; (80109c0 <puts+0xc>)
 80109b6:	4601      	mov	r1, r0
 80109b8:	6818      	ldr	r0, [r3, #0]
 80109ba:	f7ff bf9f 	b.w	80108fc <_puts_r>
 80109be:	bf00      	nop
 80109c0:	20001c34 	.word	0x20001c34

080109c4 <sniprintf>:
 80109c4:	b40c      	push	{r2, r3}
 80109c6:	b530      	push	{r4, r5, lr}
 80109c8:	4b17      	ldr	r3, [pc, #92]	; (8010a28 <sniprintf+0x64>)
 80109ca:	1e0c      	subs	r4, r1, #0
 80109cc:	b09d      	sub	sp, #116	; 0x74
 80109ce:	681d      	ldr	r5, [r3, #0]
 80109d0:	da08      	bge.n	80109e4 <sniprintf+0x20>
 80109d2:	238b      	movs	r3, #139	; 0x8b
 80109d4:	602b      	str	r3, [r5, #0]
 80109d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109da:	b01d      	add	sp, #116	; 0x74
 80109dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109e0:	b002      	add	sp, #8
 80109e2:	4770      	bx	lr
 80109e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80109e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80109ec:	bf14      	ite	ne
 80109ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80109f2:	4623      	moveq	r3, r4
 80109f4:	9304      	str	r3, [sp, #16]
 80109f6:	9307      	str	r3, [sp, #28]
 80109f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80109fc:	9002      	str	r0, [sp, #8]
 80109fe:	9006      	str	r0, [sp, #24]
 8010a00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010a06:	ab21      	add	r3, sp, #132	; 0x84
 8010a08:	a902      	add	r1, sp, #8
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	9301      	str	r3, [sp, #4]
 8010a0e:	f001 fd0d 	bl	801242c <_svfiprintf_r>
 8010a12:	1c43      	adds	r3, r0, #1
 8010a14:	bfbc      	itt	lt
 8010a16:	238b      	movlt	r3, #139	; 0x8b
 8010a18:	602b      	strlt	r3, [r5, #0]
 8010a1a:	2c00      	cmp	r4, #0
 8010a1c:	d0dd      	beq.n	80109da <sniprintf+0x16>
 8010a1e:	9b02      	ldr	r3, [sp, #8]
 8010a20:	2200      	movs	r2, #0
 8010a22:	701a      	strb	r2, [r3, #0]
 8010a24:	e7d9      	b.n	80109da <sniprintf+0x16>
 8010a26:	bf00      	nop
 8010a28:	20001c34 	.word	0x20001c34

08010a2c <strcat>:
 8010a2c:	b510      	push	{r4, lr}
 8010a2e:	4603      	mov	r3, r0
 8010a30:	781a      	ldrb	r2, [r3, #0]
 8010a32:	1c5c      	adds	r4, r3, #1
 8010a34:	b93a      	cbnz	r2, 8010a46 <strcat+0x1a>
 8010a36:	3b01      	subs	r3, #1
 8010a38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a40:	2a00      	cmp	r2, #0
 8010a42:	d1f9      	bne.n	8010a38 <strcat+0xc>
 8010a44:	bd10      	pop	{r4, pc}
 8010a46:	4623      	mov	r3, r4
 8010a48:	e7f2      	b.n	8010a30 <strcat+0x4>
	...

08010a4c <__swbuf_r>:
 8010a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4e:	460e      	mov	r6, r1
 8010a50:	4614      	mov	r4, r2
 8010a52:	4605      	mov	r5, r0
 8010a54:	b118      	cbz	r0, 8010a5e <__swbuf_r+0x12>
 8010a56:	6983      	ldr	r3, [r0, #24]
 8010a58:	b90b      	cbnz	r3, 8010a5e <__swbuf_r+0x12>
 8010a5a:	f000 ffed 	bl	8011a38 <__sinit>
 8010a5e:	4b21      	ldr	r3, [pc, #132]	; (8010ae4 <__swbuf_r+0x98>)
 8010a60:	429c      	cmp	r4, r3
 8010a62:	d12a      	bne.n	8010aba <__swbuf_r+0x6e>
 8010a64:	686c      	ldr	r4, [r5, #4]
 8010a66:	69a3      	ldr	r3, [r4, #24]
 8010a68:	60a3      	str	r3, [r4, #8]
 8010a6a:	89a3      	ldrh	r3, [r4, #12]
 8010a6c:	071a      	lsls	r2, r3, #28
 8010a6e:	d52e      	bpl.n	8010ace <__swbuf_r+0x82>
 8010a70:	6923      	ldr	r3, [r4, #16]
 8010a72:	b363      	cbz	r3, 8010ace <__swbuf_r+0x82>
 8010a74:	6923      	ldr	r3, [r4, #16]
 8010a76:	6820      	ldr	r0, [r4, #0]
 8010a78:	1ac0      	subs	r0, r0, r3
 8010a7a:	6963      	ldr	r3, [r4, #20]
 8010a7c:	b2f6      	uxtb	r6, r6
 8010a7e:	4283      	cmp	r3, r0
 8010a80:	4637      	mov	r7, r6
 8010a82:	dc04      	bgt.n	8010a8e <__swbuf_r+0x42>
 8010a84:	4621      	mov	r1, r4
 8010a86:	4628      	mov	r0, r5
 8010a88:	f000 ff6c 	bl	8011964 <_fflush_r>
 8010a8c:	bb28      	cbnz	r0, 8010ada <__swbuf_r+0x8e>
 8010a8e:	68a3      	ldr	r3, [r4, #8]
 8010a90:	3b01      	subs	r3, #1
 8010a92:	60a3      	str	r3, [r4, #8]
 8010a94:	6823      	ldr	r3, [r4, #0]
 8010a96:	1c5a      	adds	r2, r3, #1
 8010a98:	6022      	str	r2, [r4, #0]
 8010a9a:	701e      	strb	r6, [r3, #0]
 8010a9c:	6963      	ldr	r3, [r4, #20]
 8010a9e:	3001      	adds	r0, #1
 8010aa0:	4283      	cmp	r3, r0
 8010aa2:	d004      	beq.n	8010aae <__swbuf_r+0x62>
 8010aa4:	89a3      	ldrh	r3, [r4, #12]
 8010aa6:	07db      	lsls	r3, r3, #31
 8010aa8:	d519      	bpl.n	8010ade <__swbuf_r+0x92>
 8010aaa:	2e0a      	cmp	r6, #10
 8010aac:	d117      	bne.n	8010ade <__swbuf_r+0x92>
 8010aae:	4621      	mov	r1, r4
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	f000 ff57 	bl	8011964 <_fflush_r>
 8010ab6:	b190      	cbz	r0, 8010ade <__swbuf_r+0x92>
 8010ab8:	e00f      	b.n	8010ada <__swbuf_r+0x8e>
 8010aba:	4b0b      	ldr	r3, [pc, #44]	; (8010ae8 <__swbuf_r+0x9c>)
 8010abc:	429c      	cmp	r4, r3
 8010abe:	d101      	bne.n	8010ac4 <__swbuf_r+0x78>
 8010ac0:	68ac      	ldr	r4, [r5, #8]
 8010ac2:	e7d0      	b.n	8010a66 <__swbuf_r+0x1a>
 8010ac4:	4b09      	ldr	r3, [pc, #36]	; (8010aec <__swbuf_r+0xa0>)
 8010ac6:	429c      	cmp	r4, r3
 8010ac8:	bf08      	it	eq
 8010aca:	68ec      	ldreq	r4, [r5, #12]
 8010acc:	e7cb      	b.n	8010a66 <__swbuf_r+0x1a>
 8010ace:	4621      	mov	r1, r4
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	f000 f80d 	bl	8010af0 <__swsetup_r>
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d0cc      	beq.n	8010a74 <__swbuf_r+0x28>
 8010ada:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010ade:	4638      	mov	r0, r7
 8010ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	08015254 	.word	0x08015254
 8010ae8:	08015274 	.word	0x08015274
 8010aec:	08015234 	.word	0x08015234

08010af0 <__swsetup_r>:
 8010af0:	4b32      	ldr	r3, [pc, #200]	; (8010bbc <__swsetup_r+0xcc>)
 8010af2:	b570      	push	{r4, r5, r6, lr}
 8010af4:	681d      	ldr	r5, [r3, #0]
 8010af6:	4606      	mov	r6, r0
 8010af8:	460c      	mov	r4, r1
 8010afa:	b125      	cbz	r5, 8010b06 <__swsetup_r+0x16>
 8010afc:	69ab      	ldr	r3, [r5, #24]
 8010afe:	b913      	cbnz	r3, 8010b06 <__swsetup_r+0x16>
 8010b00:	4628      	mov	r0, r5
 8010b02:	f000 ff99 	bl	8011a38 <__sinit>
 8010b06:	4b2e      	ldr	r3, [pc, #184]	; (8010bc0 <__swsetup_r+0xd0>)
 8010b08:	429c      	cmp	r4, r3
 8010b0a:	d10f      	bne.n	8010b2c <__swsetup_r+0x3c>
 8010b0c:	686c      	ldr	r4, [r5, #4]
 8010b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	0715      	lsls	r5, r2, #28
 8010b16:	d42c      	bmi.n	8010b72 <__swsetup_r+0x82>
 8010b18:	06d0      	lsls	r0, r2, #27
 8010b1a:	d411      	bmi.n	8010b40 <__swsetup_r+0x50>
 8010b1c:	2209      	movs	r2, #9
 8010b1e:	6032      	str	r2, [r6, #0]
 8010b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b24:	81a3      	strh	r3, [r4, #12]
 8010b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b2a:	e03e      	b.n	8010baa <__swsetup_r+0xba>
 8010b2c:	4b25      	ldr	r3, [pc, #148]	; (8010bc4 <__swsetup_r+0xd4>)
 8010b2e:	429c      	cmp	r4, r3
 8010b30:	d101      	bne.n	8010b36 <__swsetup_r+0x46>
 8010b32:	68ac      	ldr	r4, [r5, #8]
 8010b34:	e7eb      	b.n	8010b0e <__swsetup_r+0x1e>
 8010b36:	4b24      	ldr	r3, [pc, #144]	; (8010bc8 <__swsetup_r+0xd8>)
 8010b38:	429c      	cmp	r4, r3
 8010b3a:	bf08      	it	eq
 8010b3c:	68ec      	ldreq	r4, [r5, #12]
 8010b3e:	e7e6      	b.n	8010b0e <__swsetup_r+0x1e>
 8010b40:	0751      	lsls	r1, r2, #29
 8010b42:	d512      	bpl.n	8010b6a <__swsetup_r+0x7a>
 8010b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b46:	b141      	cbz	r1, 8010b5a <__swsetup_r+0x6a>
 8010b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b4c:	4299      	cmp	r1, r3
 8010b4e:	d002      	beq.n	8010b56 <__swsetup_r+0x66>
 8010b50:	4630      	mov	r0, r6
 8010b52:	f001 fb69 	bl	8012228 <_free_r>
 8010b56:	2300      	movs	r3, #0
 8010b58:	6363      	str	r3, [r4, #52]	; 0x34
 8010b5a:	89a3      	ldrh	r3, [r4, #12]
 8010b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b60:	81a3      	strh	r3, [r4, #12]
 8010b62:	2300      	movs	r3, #0
 8010b64:	6063      	str	r3, [r4, #4]
 8010b66:	6923      	ldr	r3, [r4, #16]
 8010b68:	6023      	str	r3, [r4, #0]
 8010b6a:	89a3      	ldrh	r3, [r4, #12]
 8010b6c:	f043 0308 	orr.w	r3, r3, #8
 8010b70:	81a3      	strh	r3, [r4, #12]
 8010b72:	6923      	ldr	r3, [r4, #16]
 8010b74:	b94b      	cbnz	r3, 8010b8a <__swsetup_r+0x9a>
 8010b76:	89a3      	ldrh	r3, [r4, #12]
 8010b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b80:	d003      	beq.n	8010b8a <__swsetup_r+0x9a>
 8010b82:	4621      	mov	r1, r4
 8010b84:	4630      	mov	r0, r6
 8010b86:	f001 f813 	bl	8011bb0 <__smakebuf_r>
 8010b8a:	89a2      	ldrh	r2, [r4, #12]
 8010b8c:	f012 0301 	ands.w	r3, r2, #1
 8010b90:	d00c      	beq.n	8010bac <__swsetup_r+0xbc>
 8010b92:	2300      	movs	r3, #0
 8010b94:	60a3      	str	r3, [r4, #8]
 8010b96:	6963      	ldr	r3, [r4, #20]
 8010b98:	425b      	negs	r3, r3
 8010b9a:	61a3      	str	r3, [r4, #24]
 8010b9c:	6923      	ldr	r3, [r4, #16]
 8010b9e:	b953      	cbnz	r3, 8010bb6 <__swsetup_r+0xc6>
 8010ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ba4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010ba8:	d1ba      	bne.n	8010b20 <__swsetup_r+0x30>
 8010baa:	bd70      	pop	{r4, r5, r6, pc}
 8010bac:	0792      	lsls	r2, r2, #30
 8010bae:	bf58      	it	pl
 8010bb0:	6963      	ldrpl	r3, [r4, #20]
 8010bb2:	60a3      	str	r3, [r4, #8]
 8010bb4:	e7f2      	b.n	8010b9c <__swsetup_r+0xac>
 8010bb6:	2000      	movs	r0, #0
 8010bb8:	e7f7      	b.n	8010baa <__swsetup_r+0xba>
 8010bba:	bf00      	nop
 8010bbc:	20001c34 	.word	0x20001c34
 8010bc0:	08015254 	.word	0x08015254
 8010bc4:	08015274 	.word	0x08015274
 8010bc8:	08015234 	.word	0x08015234

08010bcc <quorem>:
 8010bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd0:	6903      	ldr	r3, [r0, #16]
 8010bd2:	690c      	ldr	r4, [r1, #16]
 8010bd4:	42a3      	cmp	r3, r4
 8010bd6:	4680      	mov	r8, r0
 8010bd8:	f2c0 8082 	blt.w	8010ce0 <quorem+0x114>
 8010bdc:	3c01      	subs	r4, #1
 8010bde:	f101 0714 	add.w	r7, r1, #20
 8010be2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010be6:	f100 0614 	add.w	r6, r0, #20
 8010bea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010bee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010bf2:	eb06 030c 	add.w	r3, r6, ip
 8010bf6:	3501      	adds	r5, #1
 8010bf8:	eb07 090c 	add.w	r9, r7, ip
 8010bfc:	9301      	str	r3, [sp, #4]
 8010bfe:	fbb0 f5f5 	udiv	r5, r0, r5
 8010c02:	b395      	cbz	r5, 8010c6a <quorem+0x9e>
 8010c04:	f04f 0a00 	mov.w	sl, #0
 8010c08:	4638      	mov	r0, r7
 8010c0a:	46b6      	mov	lr, r6
 8010c0c:	46d3      	mov	fp, sl
 8010c0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8010c12:	b293      	uxth	r3, r2
 8010c14:	fb05 a303 	mla	r3, r5, r3, sl
 8010c18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	ebab 0303 	sub.w	r3, fp, r3
 8010c22:	0c12      	lsrs	r2, r2, #16
 8010c24:	f8de b000 	ldr.w	fp, [lr]
 8010c28:	fb05 a202 	mla	r2, r5, r2, sl
 8010c2c:	fa13 f38b 	uxtah	r3, r3, fp
 8010c30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010c34:	fa1f fb82 	uxth.w	fp, r2
 8010c38:	f8de 2000 	ldr.w	r2, [lr]
 8010c3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c4a:	4581      	cmp	r9, r0
 8010c4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010c50:	f84e 3b04 	str.w	r3, [lr], #4
 8010c54:	d2db      	bcs.n	8010c0e <quorem+0x42>
 8010c56:	f856 300c 	ldr.w	r3, [r6, ip]
 8010c5a:	b933      	cbnz	r3, 8010c6a <quorem+0x9e>
 8010c5c:	9b01      	ldr	r3, [sp, #4]
 8010c5e:	3b04      	subs	r3, #4
 8010c60:	429e      	cmp	r6, r3
 8010c62:	461a      	mov	r2, r3
 8010c64:	d330      	bcc.n	8010cc8 <quorem+0xfc>
 8010c66:	f8c8 4010 	str.w	r4, [r8, #16]
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	f001 fa08 	bl	8012080 <__mcmp>
 8010c70:	2800      	cmp	r0, #0
 8010c72:	db25      	blt.n	8010cc0 <quorem+0xf4>
 8010c74:	3501      	adds	r5, #1
 8010c76:	4630      	mov	r0, r6
 8010c78:	f04f 0c00 	mov.w	ip, #0
 8010c7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8010c80:	f8d0 e000 	ldr.w	lr, [r0]
 8010c84:	b293      	uxth	r3, r2
 8010c86:	ebac 0303 	sub.w	r3, ip, r3
 8010c8a:	0c12      	lsrs	r2, r2, #16
 8010c8c:	fa13 f38e 	uxtah	r3, r3, lr
 8010c90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c9e:	45b9      	cmp	r9, r7
 8010ca0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010ca4:	f840 3b04 	str.w	r3, [r0], #4
 8010ca8:	d2e8      	bcs.n	8010c7c <quorem+0xb0>
 8010caa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010cae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010cb2:	b92a      	cbnz	r2, 8010cc0 <quorem+0xf4>
 8010cb4:	3b04      	subs	r3, #4
 8010cb6:	429e      	cmp	r6, r3
 8010cb8:	461a      	mov	r2, r3
 8010cba:	d30b      	bcc.n	8010cd4 <quorem+0x108>
 8010cbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	b003      	add	sp, #12
 8010cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cc8:	6812      	ldr	r2, [r2, #0]
 8010cca:	3b04      	subs	r3, #4
 8010ccc:	2a00      	cmp	r2, #0
 8010cce:	d1ca      	bne.n	8010c66 <quorem+0x9a>
 8010cd0:	3c01      	subs	r4, #1
 8010cd2:	e7c5      	b.n	8010c60 <quorem+0x94>
 8010cd4:	6812      	ldr	r2, [r2, #0]
 8010cd6:	3b04      	subs	r3, #4
 8010cd8:	2a00      	cmp	r2, #0
 8010cda:	d1ef      	bne.n	8010cbc <quorem+0xf0>
 8010cdc:	3c01      	subs	r4, #1
 8010cde:	e7ea      	b.n	8010cb6 <quorem+0xea>
 8010ce0:	2000      	movs	r0, #0
 8010ce2:	e7ee      	b.n	8010cc2 <quorem+0xf6>
 8010ce4:	0000      	movs	r0, r0
	...

08010ce8 <_dtoa_r>:
 8010ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cec:	ec57 6b10 	vmov	r6, r7, d0
 8010cf0:	b097      	sub	sp, #92	; 0x5c
 8010cf2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010cf4:	9106      	str	r1, [sp, #24]
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	920b      	str	r2, [sp, #44]	; 0x2c
 8010cfa:	9312      	str	r3, [sp, #72]	; 0x48
 8010cfc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010d00:	e9cd 6700 	strd	r6, r7, [sp]
 8010d04:	b93d      	cbnz	r5, 8010d16 <_dtoa_r+0x2e>
 8010d06:	2010      	movs	r0, #16
 8010d08:	f000 ff92 	bl	8011c30 <malloc>
 8010d0c:	6260      	str	r0, [r4, #36]	; 0x24
 8010d0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010d12:	6005      	str	r5, [r0, #0]
 8010d14:	60c5      	str	r5, [r0, #12]
 8010d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d18:	6819      	ldr	r1, [r3, #0]
 8010d1a:	b151      	cbz	r1, 8010d32 <_dtoa_r+0x4a>
 8010d1c:	685a      	ldr	r2, [r3, #4]
 8010d1e:	604a      	str	r2, [r1, #4]
 8010d20:	2301      	movs	r3, #1
 8010d22:	4093      	lsls	r3, r2
 8010d24:	608b      	str	r3, [r1, #8]
 8010d26:	4620      	mov	r0, r4
 8010d28:	f000 ffc9 	bl	8011cbe <_Bfree>
 8010d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d2e:	2200      	movs	r2, #0
 8010d30:	601a      	str	r2, [r3, #0]
 8010d32:	1e3b      	subs	r3, r7, #0
 8010d34:	bfbb      	ittet	lt
 8010d36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010d3a:	9301      	strlt	r3, [sp, #4]
 8010d3c:	2300      	movge	r3, #0
 8010d3e:	2201      	movlt	r2, #1
 8010d40:	bfac      	ite	ge
 8010d42:	f8c8 3000 	strge.w	r3, [r8]
 8010d46:	f8c8 2000 	strlt.w	r2, [r8]
 8010d4a:	4baf      	ldr	r3, [pc, #700]	; (8011008 <_dtoa_r+0x320>)
 8010d4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010d50:	ea33 0308 	bics.w	r3, r3, r8
 8010d54:	d114      	bne.n	8010d80 <_dtoa_r+0x98>
 8010d56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010d58:	f242 730f 	movw	r3, #9999	; 0x270f
 8010d5c:	6013      	str	r3, [r2, #0]
 8010d5e:	9b00      	ldr	r3, [sp, #0]
 8010d60:	b923      	cbnz	r3, 8010d6c <_dtoa_r+0x84>
 8010d62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010d66:	2800      	cmp	r0, #0
 8010d68:	f000 8542 	beq.w	80117f0 <_dtoa_r+0xb08>
 8010d6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801101c <_dtoa_r+0x334>
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	f000 8544 	beq.w	8011800 <_dtoa_r+0xb18>
 8010d78:	f10b 0303 	add.w	r3, fp, #3
 8010d7c:	f000 bd3e 	b.w	80117fc <_dtoa_r+0xb14>
 8010d80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010d84:	2200      	movs	r2, #0
 8010d86:	2300      	movs	r3, #0
 8010d88:	4630      	mov	r0, r6
 8010d8a:	4639      	mov	r1, r7
 8010d8c:	f7ef fec4 	bl	8000b18 <__aeabi_dcmpeq>
 8010d90:	4681      	mov	r9, r0
 8010d92:	b168      	cbz	r0, 8010db0 <_dtoa_r+0xc8>
 8010d94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010d96:	2301      	movs	r3, #1
 8010d98:	6013      	str	r3, [r2, #0]
 8010d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f000 8524 	beq.w	80117ea <_dtoa_r+0xb02>
 8010da2:	4b9a      	ldr	r3, [pc, #616]	; (801100c <_dtoa_r+0x324>)
 8010da4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010da6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8010daa:	6013      	str	r3, [r2, #0]
 8010dac:	f000 bd28 	b.w	8011800 <_dtoa_r+0xb18>
 8010db0:	aa14      	add	r2, sp, #80	; 0x50
 8010db2:	a915      	add	r1, sp, #84	; 0x54
 8010db4:	ec47 6b10 	vmov	d0, r6, r7
 8010db8:	4620      	mov	r0, r4
 8010dba:	f001 f9d8 	bl	801216e <__d2b>
 8010dbe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010dc2:	9004      	str	r0, [sp, #16]
 8010dc4:	2d00      	cmp	r5, #0
 8010dc6:	d07c      	beq.n	8010ec2 <_dtoa_r+0x1da>
 8010dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010dcc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010dd0:	46b2      	mov	sl, r6
 8010dd2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8010dd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010dda:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010dde:	2200      	movs	r2, #0
 8010de0:	4b8b      	ldr	r3, [pc, #556]	; (8011010 <_dtoa_r+0x328>)
 8010de2:	4650      	mov	r0, sl
 8010de4:	4659      	mov	r1, fp
 8010de6:	f7ef fa77 	bl	80002d8 <__aeabi_dsub>
 8010dea:	a381      	add	r3, pc, #516	; (adr r3, 8010ff0 <_dtoa_r+0x308>)
 8010dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df0:	f7ef fc2a 	bl	8000648 <__aeabi_dmul>
 8010df4:	a380      	add	r3, pc, #512	; (adr r3, 8010ff8 <_dtoa_r+0x310>)
 8010df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfa:	f7ef fa6f 	bl	80002dc <__adddf3>
 8010dfe:	4606      	mov	r6, r0
 8010e00:	4628      	mov	r0, r5
 8010e02:	460f      	mov	r7, r1
 8010e04:	f7ef fbb6 	bl	8000574 <__aeabi_i2d>
 8010e08:	a37d      	add	r3, pc, #500	; (adr r3, 8011000 <_dtoa_r+0x318>)
 8010e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0e:	f7ef fc1b 	bl	8000648 <__aeabi_dmul>
 8010e12:	4602      	mov	r2, r0
 8010e14:	460b      	mov	r3, r1
 8010e16:	4630      	mov	r0, r6
 8010e18:	4639      	mov	r1, r7
 8010e1a:	f7ef fa5f 	bl	80002dc <__adddf3>
 8010e1e:	4606      	mov	r6, r0
 8010e20:	460f      	mov	r7, r1
 8010e22:	f7ef fec1 	bl	8000ba8 <__aeabi_d2iz>
 8010e26:	2200      	movs	r2, #0
 8010e28:	4682      	mov	sl, r0
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	4639      	mov	r1, r7
 8010e30:	f7ef fe7c 	bl	8000b2c <__aeabi_dcmplt>
 8010e34:	b148      	cbz	r0, 8010e4a <_dtoa_r+0x162>
 8010e36:	4650      	mov	r0, sl
 8010e38:	f7ef fb9c 	bl	8000574 <__aeabi_i2d>
 8010e3c:	4632      	mov	r2, r6
 8010e3e:	463b      	mov	r3, r7
 8010e40:	f7ef fe6a 	bl	8000b18 <__aeabi_dcmpeq>
 8010e44:	b908      	cbnz	r0, 8010e4a <_dtoa_r+0x162>
 8010e46:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010e4a:	f1ba 0f16 	cmp.w	sl, #22
 8010e4e:	d859      	bhi.n	8010f04 <_dtoa_r+0x21c>
 8010e50:	4970      	ldr	r1, [pc, #448]	; (8011014 <_dtoa_r+0x32c>)
 8010e52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e5e:	f7ef fe83 	bl	8000b68 <__aeabi_dcmpgt>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	d050      	beq.n	8010f08 <_dtoa_r+0x220>
 8010e66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e70:	1b5d      	subs	r5, r3, r5
 8010e72:	f1b5 0801 	subs.w	r8, r5, #1
 8010e76:	bf49      	itett	mi
 8010e78:	f1c5 0301 	rsbmi	r3, r5, #1
 8010e7c:	2300      	movpl	r3, #0
 8010e7e:	9305      	strmi	r3, [sp, #20]
 8010e80:	f04f 0800 	movmi.w	r8, #0
 8010e84:	bf58      	it	pl
 8010e86:	9305      	strpl	r3, [sp, #20]
 8010e88:	f1ba 0f00 	cmp.w	sl, #0
 8010e8c:	db3e      	blt.n	8010f0c <_dtoa_r+0x224>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	44d0      	add	r8, sl
 8010e92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010e96:	9307      	str	r3, [sp, #28]
 8010e98:	9b06      	ldr	r3, [sp, #24]
 8010e9a:	2b09      	cmp	r3, #9
 8010e9c:	f200 8090 	bhi.w	8010fc0 <_dtoa_r+0x2d8>
 8010ea0:	2b05      	cmp	r3, #5
 8010ea2:	bfc4      	itt	gt
 8010ea4:	3b04      	subgt	r3, #4
 8010ea6:	9306      	strgt	r3, [sp, #24]
 8010ea8:	9b06      	ldr	r3, [sp, #24]
 8010eaa:	f1a3 0302 	sub.w	r3, r3, #2
 8010eae:	bfcc      	ite	gt
 8010eb0:	2500      	movgt	r5, #0
 8010eb2:	2501      	movle	r5, #1
 8010eb4:	2b03      	cmp	r3, #3
 8010eb6:	f200 808f 	bhi.w	8010fd8 <_dtoa_r+0x2f0>
 8010eba:	e8df f003 	tbb	[pc, r3]
 8010ebe:	7f7d      	.short	0x7f7d
 8010ec0:	7131      	.short	0x7131
 8010ec2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010ec6:	441d      	add	r5, r3
 8010ec8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010ecc:	2820      	cmp	r0, #32
 8010ece:	dd13      	ble.n	8010ef8 <_dtoa_r+0x210>
 8010ed0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010ed4:	9b00      	ldr	r3, [sp, #0]
 8010ed6:	fa08 f800 	lsl.w	r8, r8, r0
 8010eda:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010ede:	fa23 f000 	lsr.w	r0, r3, r0
 8010ee2:	ea48 0000 	orr.w	r0, r8, r0
 8010ee6:	f7ef fb35 	bl	8000554 <__aeabi_ui2d>
 8010eea:	2301      	movs	r3, #1
 8010eec:	4682      	mov	sl, r0
 8010eee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010ef2:	3d01      	subs	r5, #1
 8010ef4:	9313      	str	r3, [sp, #76]	; 0x4c
 8010ef6:	e772      	b.n	8010dde <_dtoa_r+0xf6>
 8010ef8:	9b00      	ldr	r3, [sp, #0]
 8010efa:	f1c0 0020 	rsb	r0, r0, #32
 8010efe:	fa03 f000 	lsl.w	r0, r3, r0
 8010f02:	e7f0      	b.n	8010ee6 <_dtoa_r+0x1fe>
 8010f04:	2301      	movs	r3, #1
 8010f06:	e7b1      	b.n	8010e6c <_dtoa_r+0x184>
 8010f08:	900f      	str	r0, [sp, #60]	; 0x3c
 8010f0a:	e7b0      	b.n	8010e6e <_dtoa_r+0x186>
 8010f0c:	9b05      	ldr	r3, [sp, #20]
 8010f0e:	eba3 030a 	sub.w	r3, r3, sl
 8010f12:	9305      	str	r3, [sp, #20]
 8010f14:	f1ca 0300 	rsb	r3, sl, #0
 8010f18:	9307      	str	r3, [sp, #28]
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8010f1e:	e7bb      	b.n	8010e98 <_dtoa_r+0x1b0>
 8010f20:	2301      	movs	r3, #1
 8010f22:	930a      	str	r3, [sp, #40]	; 0x28
 8010f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	dd59      	ble.n	8010fde <_dtoa_r+0x2f6>
 8010f2a:	9302      	str	r3, [sp, #8]
 8010f2c:	4699      	mov	r9, r3
 8010f2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010f30:	2200      	movs	r2, #0
 8010f32:	6072      	str	r2, [r6, #4]
 8010f34:	2204      	movs	r2, #4
 8010f36:	f102 0014 	add.w	r0, r2, #20
 8010f3a:	4298      	cmp	r0, r3
 8010f3c:	6871      	ldr	r1, [r6, #4]
 8010f3e:	d953      	bls.n	8010fe8 <_dtoa_r+0x300>
 8010f40:	4620      	mov	r0, r4
 8010f42:	f000 fe88 	bl	8011c56 <_Balloc>
 8010f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f48:	6030      	str	r0, [r6, #0]
 8010f4a:	f1b9 0f0e 	cmp.w	r9, #14
 8010f4e:	f8d3 b000 	ldr.w	fp, [r3]
 8010f52:	f200 80e6 	bhi.w	8011122 <_dtoa_r+0x43a>
 8010f56:	2d00      	cmp	r5, #0
 8010f58:	f000 80e3 	beq.w	8011122 <_dtoa_r+0x43a>
 8010f5c:	ed9d 7b00 	vldr	d7, [sp]
 8010f60:	f1ba 0f00 	cmp.w	sl, #0
 8010f64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010f68:	dd74      	ble.n	8011054 <_dtoa_r+0x36c>
 8010f6a:	4a2a      	ldr	r2, [pc, #168]	; (8011014 <_dtoa_r+0x32c>)
 8010f6c:	f00a 030f 	and.w	r3, sl, #15
 8010f70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010f74:	ed93 7b00 	vldr	d7, [r3]
 8010f78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8010f7c:	06f0      	lsls	r0, r6, #27
 8010f7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010f82:	d565      	bpl.n	8011050 <_dtoa_r+0x368>
 8010f84:	4b24      	ldr	r3, [pc, #144]	; (8011018 <_dtoa_r+0x330>)
 8010f86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010f8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010f8e:	f7ef fc85 	bl	800089c <__aeabi_ddiv>
 8010f92:	e9cd 0100 	strd	r0, r1, [sp]
 8010f96:	f006 060f 	and.w	r6, r6, #15
 8010f9a:	2503      	movs	r5, #3
 8010f9c:	4f1e      	ldr	r7, [pc, #120]	; (8011018 <_dtoa_r+0x330>)
 8010f9e:	e04c      	b.n	801103a <_dtoa_r+0x352>
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8010fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fa6:	4453      	add	r3, sl
 8010fa8:	f103 0901 	add.w	r9, r3, #1
 8010fac:	9302      	str	r3, [sp, #8]
 8010fae:	464b      	mov	r3, r9
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	bfb8      	it	lt
 8010fb4:	2301      	movlt	r3, #1
 8010fb6:	e7ba      	b.n	8010f2e <_dtoa_r+0x246>
 8010fb8:	2300      	movs	r3, #0
 8010fba:	e7b2      	b.n	8010f22 <_dtoa_r+0x23a>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	e7f0      	b.n	8010fa2 <_dtoa_r+0x2ba>
 8010fc0:	2501      	movs	r5, #1
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	9306      	str	r3, [sp, #24]
 8010fc6:	950a      	str	r5, [sp, #40]	; 0x28
 8010fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fcc:	9302      	str	r3, [sp, #8]
 8010fce:	4699      	mov	r9, r3
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	2312      	movs	r3, #18
 8010fd4:	920b      	str	r2, [sp, #44]	; 0x2c
 8010fd6:	e7aa      	b.n	8010f2e <_dtoa_r+0x246>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	930a      	str	r3, [sp, #40]	; 0x28
 8010fdc:	e7f4      	b.n	8010fc8 <_dtoa_r+0x2e0>
 8010fde:	2301      	movs	r3, #1
 8010fe0:	9302      	str	r3, [sp, #8]
 8010fe2:	4699      	mov	r9, r3
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	e7f5      	b.n	8010fd4 <_dtoa_r+0x2ec>
 8010fe8:	3101      	adds	r1, #1
 8010fea:	6071      	str	r1, [r6, #4]
 8010fec:	0052      	lsls	r2, r2, #1
 8010fee:	e7a2      	b.n	8010f36 <_dtoa_r+0x24e>
 8010ff0:	636f4361 	.word	0x636f4361
 8010ff4:	3fd287a7 	.word	0x3fd287a7
 8010ff8:	8b60c8b3 	.word	0x8b60c8b3
 8010ffc:	3fc68a28 	.word	0x3fc68a28
 8011000:	509f79fb 	.word	0x509f79fb
 8011004:	3fd34413 	.word	0x3fd34413
 8011008:	7ff00000 	.word	0x7ff00000
 801100c:	080154b5 	.word	0x080154b5
 8011010:	3ff80000 	.word	0x3ff80000
 8011014:	080152c0 	.word	0x080152c0
 8011018:	08015298 	.word	0x08015298
 801101c:	0801522f 	.word	0x0801522f
 8011020:	07f1      	lsls	r1, r6, #31
 8011022:	d508      	bpl.n	8011036 <_dtoa_r+0x34e>
 8011024:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011028:	e9d7 2300 	ldrd	r2, r3, [r7]
 801102c:	f7ef fb0c 	bl	8000648 <__aeabi_dmul>
 8011030:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011034:	3501      	adds	r5, #1
 8011036:	1076      	asrs	r6, r6, #1
 8011038:	3708      	adds	r7, #8
 801103a:	2e00      	cmp	r6, #0
 801103c:	d1f0      	bne.n	8011020 <_dtoa_r+0x338>
 801103e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011042:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011046:	f7ef fc29 	bl	800089c <__aeabi_ddiv>
 801104a:	e9cd 0100 	strd	r0, r1, [sp]
 801104e:	e01a      	b.n	8011086 <_dtoa_r+0x39e>
 8011050:	2502      	movs	r5, #2
 8011052:	e7a3      	b.n	8010f9c <_dtoa_r+0x2b4>
 8011054:	f000 80a0 	beq.w	8011198 <_dtoa_r+0x4b0>
 8011058:	f1ca 0600 	rsb	r6, sl, #0
 801105c:	4b9f      	ldr	r3, [pc, #636]	; (80112dc <_dtoa_r+0x5f4>)
 801105e:	4fa0      	ldr	r7, [pc, #640]	; (80112e0 <_dtoa_r+0x5f8>)
 8011060:	f006 020f 	and.w	r2, r6, #15
 8011064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011070:	f7ef faea 	bl	8000648 <__aeabi_dmul>
 8011074:	e9cd 0100 	strd	r0, r1, [sp]
 8011078:	1136      	asrs	r6, r6, #4
 801107a:	2300      	movs	r3, #0
 801107c:	2502      	movs	r5, #2
 801107e:	2e00      	cmp	r6, #0
 8011080:	d17f      	bne.n	8011182 <_dtoa_r+0x49a>
 8011082:	2b00      	cmp	r3, #0
 8011084:	d1e1      	bne.n	801104a <_dtoa_r+0x362>
 8011086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011088:	2b00      	cmp	r3, #0
 801108a:	f000 8087 	beq.w	801119c <_dtoa_r+0x4b4>
 801108e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011092:	2200      	movs	r2, #0
 8011094:	4b93      	ldr	r3, [pc, #588]	; (80112e4 <_dtoa_r+0x5fc>)
 8011096:	4630      	mov	r0, r6
 8011098:	4639      	mov	r1, r7
 801109a:	f7ef fd47 	bl	8000b2c <__aeabi_dcmplt>
 801109e:	2800      	cmp	r0, #0
 80110a0:	d07c      	beq.n	801119c <_dtoa_r+0x4b4>
 80110a2:	f1b9 0f00 	cmp.w	r9, #0
 80110a6:	d079      	beq.n	801119c <_dtoa_r+0x4b4>
 80110a8:	9b02      	ldr	r3, [sp, #8]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	dd35      	ble.n	801111a <_dtoa_r+0x432>
 80110ae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80110b2:	9308      	str	r3, [sp, #32]
 80110b4:	4639      	mov	r1, r7
 80110b6:	2200      	movs	r2, #0
 80110b8:	4b8b      	ldr	r3, [pc, #556]	; (80112e8 <_dtoa_r+0x600>)
 80110ba:	4630      	mov	r0, r6
 80110bc:	f7ef fac4 	bl	8000648 <__aeabi_dmul>
 80110c0:	e9cd 0100 	strd	r0, r1, [sp]
 80110c4:	9f02      	ldr	r7, [sp, #8]
 80110c6:	3501      	adds	r5, #1
 80110c8:	4628      	mov	r0, r5
 80110ca:	f7ef fa53 	bl	8000574 <__aeabi_i2d>
 80110ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110d2:	f7ef fab9 	bl	8000648 <__aeabi_dmul>
 80110d6:	2200      	movs	r2, #0
 80110d8:	4b84      	ldr	r3, [pc, #528]	; (80112ec <_dtoa_r+0x604>)
 80110da:	f7ef f8ff 	bl	80002dc <__adddf3>
 80110de:	4605      	mov	r5, r0
 80110e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80110e4:	2f00      	cmp	r7, #0
 80110e6:	d15d      	bne.n	80111a4 <_dtoa_r+0x4bc>
 80110e8:	2200      	movs	r2, #0
 80110ea:	4b81      	ldr	r3, [pc, #516]	; (80112f0 <_dtoa_r+0x608>)
 80110ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80110f0:	f7ef f8f2 	bl	80002d8 <__aeabi_dsub>
 80110f4:	462a      	mov	r2, r5
 80110f6:	4633      	mov	r3, r6
 80110f8:	e9cd 0100 	strd	r0, r1, [sp]
 80110fc:	f7ef fd34 	bl	8000b68 <__aeabi_dcmpgt>
 8011100:	2800      	cmp	r0, #0
 8011102:	f040 8288 	bne.w	8011616 <_dtoa_r+0x92e>
 8011106:	462a      	mov	r2, r5
 8011108:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801110c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011110:	f7ef fd0c 	bl	8000b2c <__aeabi_dcmplt>
 8011114:	2800      	cmp	r0, #0
 8011116:	f040 827c 	bne.w	8011612 <_dtoa_r+0x92a>
 801111a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801111e:	e9cd 2300 	strd	r2, r3, [sp]
 8011122:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011124:	2b00      	cmp	r3, #0
 8011126:	f2c0 8150 	blt.w	80113ca <_dtoa_r+0x6e2>
 801112a:	f1ba 0f0e 	cmp.w	sl, #14
 801112e:	f300 814c 	bgt.w	80113ca <_dtoa_r+0x6e2>
 8011132:	4b6a      	ldr	r3, [pc, #424]	; (80112dc <_dtoa_r+0x5f4>)
 8011134:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011138:	ed93 7b00 	vldr	d7, [r3]
 801113c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801113e:	2b00      	cmp	r3, #0
 8011140:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011144:	f280 80d8 	bge.w	80112f8 <_dtoa_r+0x610>
 8011148:	f1b9 0f00 	cmp.w	r9, #0
 801114c:	f300 80d4 	bgt.w	80112f8 <_dtoa_r+0x610>
 8011150:	f040 825e 	bne.w	8011610 <_dtoa_r+0x928>
 8011154:	2200      	movs	r2, #0
 8011156:	4b66      	ldr	r3, [pc, #408]	; (80112f0 <_dtoa_r+0x608>)
 8011158:	ec51 0b17 	vmov	r0, r1, d7
 801115c:	f7ef fa74 	bl	8000648 <__aeabi_dmul>
 8011160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011164:	f7ef fcf6 	bl	8000b54 <__aeabi_dcmpge>
 8011168:	464f      	mov	r7, r9
 801116a:	464e      	mov	r6, r9
 801116c:	2800      	cmp	r0, #0
 801116e:	f040 8234 	bne.w	80115da <_dtoa_r+0x8f2>
 8011172:	2331      	movs	r3, #49	; 0x31
 8011174:	f10b 0501 	add.w	r5, fp, #1
 8011178:	f88b 3000 	strb.w	r3, [fp]
 801117c:	f10a 0a01 	add.w	sl, sl, #1
 8011180:	e22f      	b.n	80115e2 <_dtoa_r+0x8fa>
 8011182:	07f2      	lsls	r2, r6, #31
 8011184:	d505      	bpl.n	8011192 <_dtoa_r+0x4aa>
 8011186:	e9d7 2300 	ldrd	r2, r3, [r7]
 801118a:	f7ef fa5d 	bl	8000648 <__aeabi_dmul>
 801118e:	3501      	adds	r5, #1
 8011190:	2301      	movs	r3, #1
 8011192:	1076      	asrs	r6, r6, #1
 8011194:	3708      	adds	r7, #8
 8011196:	e772      	b.n	801107e <_dtoa_r+0x396>
 8011198:	2502      	movs	r5, #2
 801119a:	e774      	b.n	8011086 <_dtoa_r+0x39e>
 801119c:	f8cd a020 	str.w	sl, [sp, #32]
 80111a0:	464f      	mov	r7, r9
 80111a2:	e791      	b.n	80110c8 <_dtoa_r+0x3e0>
 80111a4:	4b4d      	ldr	r3, [pc, #308]	; (80112dc <_dtoa_r+0x5f4>)
 80111a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80111aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80111ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d047      	beq.n	8011244 <_dtoa_r+0x55c>
 80111b4:	4602      	mov	r2, r0
 80111b6:	460b      	mov	r3, r1
 80111b8:	2000      	movs	r0, #0
 80111ba:	494e      	ldr	r1, [pc, #312]	; (80112f4 <_dtoa_r+0x60c>)
 80111bc:	f7ef fb6e 	bl	800089c <__aeabi_ddiv>
 80111c0:	462a      	mov	r2, r5
 80111c2:	4633      	mov	r3, r6
 80111c4:	f7ef f888 	bl	80002d8 <__aeabi_dsub>
 80111c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80111cc:	465d      	mov	r5, fp
 80111ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111d2:	f7ef fce9 	bl	8000ba8 <__aeabi_d2iz>
 80111d6:	4606      	mov	r6, r0
 80111d8:	f7ef f9cc 	bl	8000574 <__aeabi_i2d>
 80111dc:	4602      	mov	r2, r0
 80111de:	460b      	mov	r3, r1
 80111e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111e4:	f7ef f878 	bl	80002d8 <__aeabi_dsub>
 80111e8:	3630      	adds	r6, #48	; 0x30
 80111ea:	f805 6b01 	strb.w	r6, [r5], #1
 80111ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80111f2:	e9cd 0100 	strd	r0, r1, [sp]
 80111f6:	f7ef fc99 	bl	8000b2c <__aeabi_dcmplt>
 80111fa:	2800      	cmp	r0, #0
 80111fc:	d163      	bne.n	80112c6 <_dtoa_r+0x5de>
 80111fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011202:	2000      	movs	r0, #0
 8011204:	4937      	ldr	r1, [pc, #220]	; (80112e4 <_dtoa_r+0x5fc>)
 8011206:	f7ef f867 	bl	80002d8 <__aeabi_dsub>
 801120a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801120e:	f7ef fc8d 	bl	8000b2c <__aeabi_dcmplt>
 8011212:	2800      	cmp	r0, #0
 8011214:	f040 80b7 	bne.w	8011386 <_dtoa_r+0x69e>
 8011218:	eba5 030b 	sub.w	r3, r5, fp
 801121c:	429f      	cmp	r7, r3
 801121e:	f77f af7c 	ble.w	801111a <_dtoa_r+0x432>
 8011222:	2200      	movs	r2, #0
 8011224:	4b30      	ldr	r3, [pc, #192]	; (80112e8 <_dtoa_r+0x600>)
 8011226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801122a:	f7ef fa0d 	bl	8000648 <__aeabi_dmul>
 801122e:	2200      	movs	r2, #0
 8011230:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011234:	4b2c      	ldr	r3, [pc, #176]	; (80112e8 <_dtoa_r+0x600>)
 8011236:	e9dd 0100 	ldrd	r0, r1, [sp]
 801123a:	f7ef fa05 	bl	8000648 <__aeabi_dmul>
 801123e:	e9cd 0100 	strd	r0, r1, [sp]
 8011242:	e7c4      	b.n	80111ce <_dtoa_r+0x4e6>
 8011244:	462a      	mov	r2, r5
 8011246:	4633      	mov	r3, r6
 8011248:	f7ef f9fe 	bl	8000648 <__aeabi_dmul>
 801124c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011250:	eb0b 0507 	add.w	r5, fp, r7
 8011254:	465e      	mov	r6, fp
 8011256:	e9dd 0100 	ldrd	r0, r1, [sp]
 801125a:	f7ef fca5 	bl	8000ba8 <__aeabi_d2iz>
 801125e:	4607      	mov	r7, r0
 8011260:	f7ef f988 	bl	8000574 <__aeabi_i2d>
 8011264:	3730      	adds	r7, #48	; 0x30
 8011266:	4602      	mov	r2, r0
 8011268:	460b      	mov	r3, r1
 801126a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801126e:	f7ef f833 	bl	80002d8 <__aeabi_dsub>
 8011272:	f806 7b01 	strb.w	r7, [r6], #1
 8011276:	42ae      	cmp	r6, r5
 8011278:	e9cd 0100 	strd	r0, r1, [sp]
 801127c:	f04f 0200 	mov.w	r2, #0
 8011280:	d126      	bne.n	80112d0 <_dtoa_r+0x5e8>
 8011282:	4b1c      	ldr	r3, [pc, #112]	; (80112f4 <_dtoa_r+0x60c>)
 8011284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011288:	f7ef f828 	bl	80002dc <__adddf3>
 801128c:	4602      	mov	r2, r0
 801128e:	460b      	mov	r3, r1
 8011290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011294:	f7ef fc68 	bl	8000b68 <__aeabi_dcmpgt>
 8011298:	2800      	cmp	r0, #0
 801129a:	d174      	bne.n	8011386 <_dtoa_r+0x69e>
 801129c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80112a0:	2000      	movs	r0, #0
 80112a2:	4914      	ldr	r1, [pc, #80]	; (80112f4 <_dtoa_r+0x60c>)
 80112a4:	f7ef f818 	bl	80002d8 <__aeabi_dsub>
 80112a8:	4602      	mov	r2, r0
 80112aa:	460b      	mov	r3, r1
 80112ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112b0:	f7ef fc3c 	bl	8000b2c <__aeabi_dcmplt>
 80112b4:	2800      	cmp	r0, #0
 80112b6:	f43f af30 	beq.w	801111a <_dtoa_r+0x432>
 80112ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80112be:	2b30      	cmp	r3, #48	; 0x30
 80112c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80112c4:	d002      	beq.n	80112cc <_dtoa_r+0x5e4>
 80112c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80112ca:	e04a      	b.n	8011362 <_dtoa_r+0x67a>
 80112cc:	4615      	mov	r5, r2
 80112ce:	e7f4      	b.n	80112ba <_dtoa_r+0x5d2>
 80112d0:	4b05      	ldr	r3, [pc, #20]	; (80112e8 <_dtoa_r+0x600>)
 80112d2:	f7ef f9b9 	bl	8000648 <__aeabi_dmul>
 80112d6:	e9cd 0100 	strd	r0, r1, [sp]
 80112da:	e7bc      	b.n	8011256 <_dtoa_r+0x56e>
 80112dc:	080152c0 	.word	0x080152c0
 80112e0:	08015298 	.word	0x08015298
 80112e4:	3ff00000 	.word	0x3ff00000
 80112e8:	40240000 	.word	0x40240000
 80112ec:	401c0000 	.word	0x401c0000
 80112f0:	40140000 	.word	0x40140000
 80112f4:	3fe00000 	.word	0x3fe00000
 80112f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80112fc:	465d      	mov	r5, fp
 80112fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011302:	4630      	mov	r0, r6
 8011304:	4639      	mov	r1, r7
 8011306:	f7ef fac9 	bl	800089c <__aeabi_ddiv>
 801130a:	f7ef fc4d 	bl	8000ba8 <__aeabi_d2iz>
 801130e:	4680      	mov	r8, r0
 8011310:	f7ef f930 	bl	8000574 <__aeabi_i2d>
 8011314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011318:	f7ef f996 	bl	8000648 <__aeabi_dmul>
 801131c:	4602      	mov	r2, r0
 801131e:	460b      	mov	r3, r1
 8011320:	4630      	mov	r0, r6
 8011322:	4639      	mov	r1, r7
 8011324:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011328:	f7ee ffd6 	bl	80002d8 <__aeabi_dsub>
 801132c:	f805 6b01 	strb.w	r6, [r5], #1
 8011330:	eba5 060b 	sub.w	r6, r5, fp
 8011334:	45b1      	cmp	r9, r6
 8011336:	4602      	mov	r2, r0
 8011338:	460b      	mov	r3, r1
 801133a:	d139      	bne.n	80113b0 <_dtoa_r+0x6c8>
 801133c:	f7ee ffce 	bl	80002dc <__adddf3>
 8011340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011344:	4606      	mov	r6, r0
 8011346:	460f      	mov	r7, r1
 8011348:	f7ef fc0e 	bl	8000b68 <__aeabi_dcmpgt>
 801134c:	b9c8      	cbnz	r0, 8011382 <_dtoa_r+0x69a>
 801134e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011352:	4630      	mov	r0, r6
 8011354:	4639      	mov	r1, r7
 8011356:	f7ef fbdf 	bl	8000b18 <__aeabi_dcmpeq>
 801135a:	b110      	cbz	r0, 8011362 <_dtoa_r+0x67a>
 801135c:	f018 0f01 	tst.w	r8, #1
 8011360:	d10f      	bne.n	8011382 <_dtoa_r+0x69a>
 8011362:	9904      	ldr	r1, [sp, #16]
 8011364:	4620      	mov	r0, r4
 8011366:	f000 fcaa 	bl	8011cbe <_Bfree>
 801136a:	2300      	movs	r3, #0
 801136c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801136e:	702b      	strb	r3, [r5, #0]
 8011370:	f10a 0301 	add.w	r3, sl, #1
 8011374:	6013      	str	r3, [r2, #0]
 8011376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011378:	2b00      	cmp	r3, #0
 801137a:	f000 8241 	beq.w	8011800 <_dtoa_r+0xb18>
 801137e:	601d      	str	r5, [r3, #0]
 8011380:	e23e      	b.n	8011800 <_dtoa_r+0xb18>
 8011382:	f8cd a020 	str.w	sl, [sp, #32]
 8011386:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801138a:	2a39      	cmp	r2, #57	; 0x39
 801138c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8011390:	d108      	bne.n	80113a4 <_dtoa_r+0x6bc>
 8011392:	459b      	cmp	fp, r3
 8011394:	d10a      	bne.n	80113ac <_dtoa_r+0x6c4>
 8011396:	9b08      	ldr	r3, [sp, #32]
 8011398:	3301      	adds	r3, #1
 801139a:	9308      	str	r3, [sp, #32]
 801139c:	2330      	movs	r3, #48	; 0x30
 801139e:	f88b 3000 	strb.w	r3, [fp]
 80113a2:	465b      	mov	r3, fp
 80113a4:	781a      	ldrb	r2, [r3, #0]
 80113a6:	3201      	adds	r2, #1
 80113a8:	701a      	strb	r2, [r3, #0]
 80113aa:	e78c      	b.n	80112c6 <_dtoa_r+0x5de>
 80113ac:	461d      	mov	r5, r3
 80113ae:	e7ea      	b.n	8011386 <_dtoa_r+0x69e>
 80113b0:	2200      	movs	r2, #0
 80113b2:	4b9b      	ldr	r3, [pc, #620]	; (8011620 <_dtoa_r+0x938>)
 80113b4:	f7ef f948 	bl	8000648 <__aeabi_dmul>
 80113b8:	2200      	movs	r2, #0
 80113ba:	2300      	movs	r3, #0
 80113bc:	4606      	mov	r6, r0
 80113be:	460f      	mov	r7, r1
 80113c0:	f7ef fbaa 	bl	8000b18 <__aeabi_dcmpeq>
 80113c4:	2800      	cmp	r0, #0
 80113c6:	d09a      	beq.n	80112fe <_dtoa_r+0x616>
 80113c8:	e7cb      	b.n	8011362 <_dtoa_r+0x67a>
 80113ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113cc:	2a00      	cmp	r2, #0
 80113ce:	f000 808b 	beq.w	80114e8 <_dtoa_r+0x800>
 80113d2:	9a06      	ldr	r2, [sp, #24]
 80113d4:	2a01      	cmp	r2, #1
 80113d6:	dc6e      	bgt.n	80114b6 <_dtoa_r+0x7ce>
 80113d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80113da:	2a00      	cmp	r2, #0
 80113dc:	d067      	beq.n	80114ae <_dtoa_r+0x7c6>
 80113de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80113e2:	9f07      	ldr	r7, [sp, #28]
 80113e4:	9d05      	ldr	r5, [sp, #20]
 80113e6:	9a05      	ldr	r2, [sp, #20]
 80113e8:	2101      	movs	r1, #1
 80113ea:	441a      	add	r2, r3
 80113ec:	4620      	mov	r0, r4
 80113ee:	9205      	str	r2, [sp, #20]
 80113f0:	4498      	add	r8, r3
 80113f2:	f000 fd04 	bl	8011dfe <__i2b>
 80113f6:	4606      	mov	r6, r0
 80113f8:	2d00      	cmp	r5, #0
 80113fa:	dd0c      	ble.n	8011416 <_dtoa_r+0x72e>
 80113fc:	f1b8 0f00 	cmp.w	r8, #0
 8011400:	dd09      	ble.n	8011416 <_dtoa_r+0x72e>
 8011402:	4545      	cmp	r5, r8
 8011404:	9a05      	ldr	r2, [sp, #20]
 8011406:	462b      	mov	r3, r5
 8011408:	bfa8      	it	ge
 801140a:	4643      	movge	r3, r8
 801140c:	1ad2      	subs	r2, r2, r3
 801140e:	9205      	str	r2, [sp, #20]
 8011410:	1aed      	subs	r5, r5, r3
 8011412:	eba8 0803 	sub.w	r8, r8, r3
 8011416:	9b07      	ldr	r3, [sp, #28]
 8011418:	b1eb      	cbz	r3, 8011456 <_dtoa_r+0x76e>
 801141a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801141c:	2b00      	cmp	r3, #0
 801141e:	d067      	beq.n	80114f0 <_dtoa_r+0x808>
 8011420:	b18f      	cbz	r7, 8011446 <_dtoa_r+0x75e>
 8011422:	4631      	mov	r1, r6
 8011424:	463a      	mov	r2, r7
 8011426:	4620      	mov	r0, r4
 8011428:	f000 fd88 	bl	8011f3c <__pow5mult>
 801142c:	9a04      	ldr	r2, [sp, #16]
 801142e:	4601      	mov	r1, r0
 8011430:	4606      	mov	r6, r0
 8011432:	4620      	mov	r0, r4
 8011434:	f000 fcec 	bl	8011e10 <__multiply>
 8011438:	9904      	ldr	r1, [sp, #16]
 801143a:	9008      	str	r0, [sp, #32]
 801143c:	4620      	mov	r0, r4
 801143e:	f000 fc3e 	bl	8011cbe <_Bfree>
 8011442:	9b08      	ldr	r3, [sp, #32]
 8011444:	9304      	str	r3, [sp, #16]
 8011446:	9b07      	ldr	r3, [sp, #28]
 8011448:	1bda      	subs	r2, r3, r7
 801144a:	d004      	beq.n	8011456 <_dtoa_r+0x76e>
 801144c:	9904      	ldr	r1, [sp, #16]
 801144e:	4620      	mov	r0, r4
 8011450:	f000 fd74 	bl	8011f3c <__pow5mult>
 8011454:	9004      	str	r0, [sp, #16]
 8011456:	2101      	movs	r1, #1
 8011458:	4620      	mov	r0, r4
 801145a:	f000 fcd0 	bl	8011dfe <__i2b>
 801145e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011460:	4607      	mov	r7, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	f000 81d0 	beq.w	8011808 <_dtoa_r+0xb20>
 8011468:	461a      	mov	r2, r3
 801146a:	4601      	mov	r1, r0
 801146c:	4620      	mov	r0, r4
 801146e:	f000 fd65 	bl	8011f3c <__pow5mult>
 8011472:	9b06      	ldr	r3, [sp, #24]
 8011474:	2b01      	cmp	r3, #1
 8011476:	4607      	mov	r7, r0
 8011478:	dc40      	bgt.n	80114fc <_dtoa_r+0x814>
 801147a:	9b00      	ldr	r3, [sp, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d139      	bne.n	80114f4 <_dtoa_r+0x80c>
 8011480:	9b01      	ldr	r3, [sp, #4]
 8011482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011486:	2b00      	cmp	r3, #0
 8011488:	d136      	bne.n	80114f8 <_dtoa_r+0x810>
 801148a:	9b01      	ldr	r3, [sp, #4]
 801148c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011490:	0d1b      	lsrs	r3, r3, #20
 8011492:	051b      	lsls	r3, r3, #20
 8011494:	b12b      	cbz	r3, 80114a2 <_dtoa_r+0x7ba>
 8011496:	9b05      	ldr	r3, [sp, #20]
 8011498:	3301      	adds	r3, #1
 801149a:	9305      	str	r3, [sp, #20]
 801149c:	f108 0801 	add.w	r8, r8, #1
 80114a0:	2301      	movs	r3, #1
 80114a2:	9307      	str	r3, [sp, #28]
 80114a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d12a      	bne.n	8011500 <_dtoa_r+0x818>
 80114aa:	2001      	movs	r0, #1
 80114ac:	e030      	b.n	8011510 <_dtoa_r+0x828>
 80114ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80114b4:	e795      	b.n	80113e2 <_dtoa_r+0x6fa>
 80114b6:	9b07      	ldr	r3, [sp, #28]
 80114b8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80114bc:	42bb      	cmp	r3, r7
 80114be:	bfbf      	itttt	lt
 80114c0:	9b07      	ldrlt	r3, [sp, #28]
 80114c2:	9707      	strlt	r7, [sp, #28]
 80114c4:	1afa      	sublt	r2, r7, r3
 80114c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80114c8:	bfbb      	ittet	lt
 80114ca:	189b      	addlt	r3, r3, r2
 80114cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80114ce:	1bdf      	subge	r7, r3, r7
 80114d0:	2700      	movlt	r7, #0
 80114d2:	f1b9 0f00 	cmp.w	r9, #0
 80114d6:	bfb5      	itete	lt
 80114d8:	9b05      	ldrlt	r3, [sp, #20]
 80114da:	9d05      	ldrge	r5, [sp, #20]
 80114dc:	eba3 0509 	sublt.w	r5, r3, r9
 80114e0:	464b      	movge	r3, r9
 80114e2:	bfb8      	it	lt
 80114e4:	2300      	movlt	r3, #0
 80114e6:	e77e      	b.n	80113e6 <_dtoa_r+0x6fe>
 80114e8:	9f07      	ldr	r7, [sp, #28]
 80114ea:	9d05      	ldr	r5, [sp, #20]
 80114ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80114ee:	e783      	b.n	80113f8 <_dtoa_r+0x710>
 80114f0:	9a07      	ldr	r2, [sp, #28]
 80114f2:	e7ab      	b.n	801144c <_dtoa_r+0x764>
 80114f4:	2300      	movs	r3, #0
 80114f6:	e7d4      	b.n	80114a2 <_dtoa_r+0x7ba>
 80114f8:	9b00      	ldr	r3, [sp, #0]
 80114fa:	e7d2      	b.n	80114a2 <_dtoa_r+0x7ba>
 80114fc:	2300      	movs	r3, #0
 80114fe:	9307      	str	r3, [sp, #28]
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011506:	6918      	ldr	r0, [r3, #16]
 8011508:	f000 fc2b 	bl	8011d62 <__hi0bits>
 801150c:	f1c0 0020 	rsb	r0, r0, #32
 8011510:	4440      	add	r0, r8
 8011512:	f010 001f 	ands.w	r0, r0, #31
 8011516:	d047      	beq.n	80115a8 <_dtoa_r+0x8c0>
 8011518:	f1c0 0320 	rsb	r3, r0, #32
 801151c:	2b04      	cmp	r3, #4
 801151e:	dd3b      	ble.n	8011598 <_dtoa_r+0x8b0>
 8011520:	9b05      	ldr	r3, [sp, #20]
 8011522:	f1c0 001c 	rsb	r0, r0, #28
 8011526:	4403      	add	r3, r0
 8011528:	9305      	str	r3, [sp, #20]
 801152a:	4405      	add	r5, r0
 801152c:	4480      	add	r8, r0
 801152e:	9b05      	ldr	r3, [sp, #20]
 8011530:	2b00      	cmp	r3, #0
 8011532:	dd05      	ble.n	8011540 <_dtoa_r+0x858>
 8011534:	461a      	mov	r2, r3
 8011536:	9904      	ldr	r1, [sp, #16]
 8011538:	4620      	mov	r0, r4
 801153a:	f000 fd4d 	bl	8011fd8 <__lshift>
 801153e:	9004      	str	r0, [sp, #16]
 8011540:	f1b8 0f00 	cmp.w	r8, #0
 8011544:	dd05      	ble.n	8011552 <_dtoa_r+0x86a>
 8011546:	4639      	mov	r1, r7
 8011548:	4642      	mov	r2, r8
 801154a:	4620      	mov	r0, r4
 801154c:	f000 fd44 	bl	8011fd8 <__lshift>
 8011550:	4607      	mov	r7, r0
 8011552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011554:	b353      	cbz	r3, 80115ac <_dtoa_r+0x8c4>
 8011556:	4639      	mov	r1, r7
 8011558:	9804      	ldr	r0, [sp, #16]
 801155a:	f000 fd91 	bl	8012080 <__mcmp>
 801155e:	2800      	cmp	r0, #0
 8011560:	da24      	bge.n	80115ac <_dtoa_r+0x8c4>
 8011562:	2300      	movs	r3, #0
 8011564:	220a      	movs	r2, #10
 8011566:	9904      	ldr	r1, [sp, #16]
 8011568:	4620      	mov	r0, r4
 801156a:	f000 fbbf 	bl	8011cec <__multadd>
 801156e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011570:	9004      	str	r0, [sp, #16]
 8011572:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011576:	2b00      	cmp	r3, #0
 8011578:	f000 814d 	beq.w	8011816 <_dtoa_r+0xb2e>
 801157c:	2300      	movs	r3, #0
 801157e:	4631      	mov	r1, r6
 8011580:	220a      	movs	r2, #10
 8011582:	4620      	mov	r0, r4
 8011584:	f000 fbb2 	bl	8011cec <__multadd>
 8011588:	9b02      	ldr	r3, [sp, #8]
 801158a:	2b00      	cmp	r3, #0
 801158c:	4606      	mov	r6, r0
 801158e:	dc4f      	bgt.n	8011630 <_dtoa_r+0x948>
 8011590:	9b06      	ldr	r3, [sp, #24]
 8011592:	2b02      	cmp	r3, #2
 8011594:	dd4c      	ble.n	8011630 <_dtoa_r+0x948>
 8011596:	e011      	b.n	80115bc <_dtoa_r+0x8d4>
 8011598:	d0c9      	beq.n	801152e <_dtoa_r+0x846>
 801159a:	9a05      	ldr	r2, [sp, #20]
 801159c:	331c      	adds	r3, #28
 801159e:	441a      	add	r2, r3
 80115a0:	9205      	str	r2, [sp, #20]
 80115a2:	441d      	add	r5, r3
 80115a4:	4498      	add	r8, r3
 80115a6:	e7c2      	b.n	801152e <_dtoa_r+0x846>
 80115a8:	4603      	mov	r3, r0
 80115aa:	e7f6      	b.n	801159a <_dtoa_r+0x8b2>
 80115ac:	f1b9 0f00 	cmp.w	r9, #0
 80115b0:	dc38      	bgt.n	8011624 <_dtoa_r+0x93c>
 80115b2:	9b06      	ldr	r3, [sp, #24]
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	dd35      	ble.n	8011624 <_dtoa_r+0x93c>
 80115b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80115bc:	9b02      	ldr	r3, [sp, #8]
 80115be:	b963      	cbnz	r3, 80115da <_dtoa_r+0x8f2>
 80115c0:	4639      	mov	r1, r7
 80115c2:	2205      	movs	r2, #5
 80115c4:	4620      	mov	r0, r4
 80115c6:	f000 fb91 	bl	8011cec <__multadd>
 80115ca:	4601      	mov	r1, r0
 80115cc:	4607      	mov	r7, r0
 80115ce:	9804      	ldr	r0, [sp, #16]
 80115d0:	f000 fd56 	bl	8012080 <__mcmp>
 80115d4:	2800      	cmp	r0, #0
 80115d6:	f73f adcc 	bgt.w	8011172 <_dtoa_r+0x48a>
 80115da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115dc:	465d      	mov	r5, fp
 80115de:	ea6f 0a03 	mvn.w	sl, r3
 80115e2:	f04f 0900 	mov.w	r9, #0
 80115e6:	4639      	mov	r1, r7
 80115e8:	4620      	mov	r0, r4
 80115ea:	f000 fb68 	bl	8011cbe <_Bfree>
 80115ee:	2e00      	cmp	r6, #0
 80115f0:	f43f aeb7 	beq.w	8011362 <_dtoa_r+0x67a>
 80115f4:	f1b9 0f00 	cmp.w	r9, #0
 80115f8:	d005      	beq.n	8011606 <_dtoa_r+0x91e>
 80115fa:	45b1      	cmp	r9, r6
 80115fc:	d003      	beq.n	8011606 <_dtoa_r+0x91e>
 80115fe:	4649      	mov	r1, r9
 8011600:	4620      	mov	r0, r4
 8011602:	f000 fb5c 	bl	8011cbe <_Bfree>
 8011606:	4631      	mov	r1, r6
 8011608:	4620      	mov	r0, r4
 801160a:	f000 fb58 	bl	8011cbe <_Bfree>
 801160e:	e6a8      	b.n	8011362 <_dtoa_r+0x67a>
 8011610:	2700      	movs	r7, #0
 8011612:	463e      	mov	r6, r7
 8011614:	e7e1      	b.n	80115da <_dtoa_r+0x8f2>
 8011616:	f8dd a020 	ldr.w	sl, [sp, #32]
 801161a:	463e      	mov	r6, r7
 801161c:	e5a9      	b.n	8011172 <_dtoa_r+0x48a>
 801161e:	bf00      	nop
 8011620:	40240000 	.word	0x40240000
 8011624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011626:	f8cd 9008 	str.w	r9, [sp, #8]
 801162a:	2b00      	cmp	r3, #0
 801162c:	f000 80fa 	beq.w	8011824 <_dtoa_r+0xb3c>
 8011630:	2d00      	cmp	r5, #0
 8011632:	dd05      	ble.n	8011640 <_dtoa_r+0x958>
 8011634:	4631      	mov	r1, r6
 8011636:	462a      	mov	r2, r5
 8011638:	4620      	mov	r0, r4
 801163a:	f000 fccd 	bl	8011fd8 <__lshift>
 801163e:	4606      	mov	r6, r0
 8011640:	9b07      	ldr	r3, [sp, #28]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d04c      	beq.n	80116e0 <_dtoa_r+0x9f8>
 8011646:	6871      	ldr	r1, [r6, #4]
 8011648:	4620      	mov	r0, r4
 801164a:	f000 fb04 	bl	8011c56 <_Balloc>
 801164e:	6932      	ldr	r2, [r6, #16]
 8011650:	3202      	adds	r2, #2
 8011652:	4605      	mov	r5, r0
 8011654:	0092      	lsls	r2, r2, #2
 8011656:	f106 010c 	add.w	r1, r6, #12
 801165a:	300c      	adds	r0, #12
 801165c:	f000 faf0 	bl	8011c40 <memcpy>
 8011660:	2201      	movs	r2, #1
 8011662:	4629      	mov	r1, r5
 8011664:	4620      	mov	r0, r4
 8011666:	f000 fcb7 	bl	8011fd8 <__lshift>
 801166a:	9b00      	ldr	r3, [sp, #0]
 801166c:	f8cd b014 	str.w	fp, [sp, #20]
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	46b1      	mov	r9, r6
 8011676:	9307      	str	r3, [sp, #28]
 8011678:	4606      	mov	r6, r0
 801167a:	4639      	mov	r1, r7
 801167c:	9804      	ldr	r0, [sp, #16]
 801167e:	f7ff faa5 	bl	8010bcc <quorem>
 8011682:	4649      	mov	r1, r9
 8011684:	4605      	mov	r5, r0
 8011686:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801168a:	9804      	ldr	r0, [sp, #16]
 801168c:	f000 fcf8 	bl	8012080 <__mcmp>
 8011690:	4632      	mov	r2, r6
 8011692:	9000      	str	r0, [sp, #0]
 8011694:	4639      	mov	r1, r7
 8011696:	4620      	mov	r0, r4
 8011698:	f000 fd0c 	bl	80120b4 <__mdiff>
 801169c:	68c3      	ldr	r3, [r0, #12]
 801169e:	4602      	mov	r2, r0
 80116a0:	bb03      	cbnz	r3, 80116e4 <_dtoa_r+0x9fc>
 80116a2:	4601      	mov	r1, r0
 80116a4:	9008      	str	r0, [sp, #32]
 80116a6:	9804      	ldr	r0, [sp, #16]
 80116a8:	f000 fcea 	bl	8012080 <__mcmp>
 80116ac:	9a08      	ldr	r2, [sp, #32]
 80116ae:	4603      	mov	r3, r0
 80116b0:	4611      	mov	r1, r2
 80116b2:	4620      	mov	r0, r4
 80116b4:	9308      	str	r3, [sp, #32]
 80116b6:	f000 fb02 	bl	8011cbe <_Bfree>
 80116ba:	9b08      	ldr	r3, [sp, #32]
 80116bc:	b9a3      	cbnz	r3, 80116e8 <_dtoa_r+0xa00>
 80116be:	9a06      	ldr	r2, [sp, #24]
 80116c0:	b992      	cbnz	r2, 80116e8 <_dtoa_r+0xa00>
 80116c2:	9a07      	ldr	r2, [sp, #28]
 80116c4:	b982      	cbnz	r2, 80116e8 <_dtoa_r+0xa00>
 80116c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80116ca:	d029      	beq.n	8011720 <_dtoa_r+0xa38>
 80116cc:	9b00      	ldr	r3, [sp, #0]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	dd01      	ble.n	80116d6 <_dtoa_r+0x9ee>
 80116d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80116d6:	9b05      	ldr	r3, [sp, #20]
 80116d8:	1c5d      	adds	r5, r3, #1
 80116da:	f883 8000 	strb.w	r8, [r3]
 80116de:	e782      	b.n	80115e6 <_dtoa_r+0x8fe>
 80116e0:	4630      	mov	r0, r6
 80116e2:	e7c2      	b.n	801166a <_dtoa_r+0x982>
 80116e4:	2301      	movs	r3, #1
 80116e6:	e7e3      	b.n	80116b0 <_dtoa_r+0x9c8>
 80116e8:	9a00      	ldr	r2, [sp, #0]
 80116ea:	2a00      	cmp	r2, #0
 80116ec:	db04      	blt.n	80116f8 <_dtoa_r+0xa10>
 80116ee:	d125      	bne.n	801173c <_dtoa_r+0xa54>
 80116f0:	9a06      	ldr	r2, [sp, #24]
 80116f2:	bb1a      	cbnz	r2, 801173c <_dtoa_r+0xa54>
 80116f4:	9a07      	ldr	r2, [sp, #28]
 80116f6:	bb0a      	cbnz	r2, 801173c <_dtoa_r+0xa54>
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	ddec      	ble.n	80116d6 <_dtoa_r+0x9ee>
 80116fc:	2201      	movs	r2, #1
 80116fe:	9904      	ldr	r1, [sp, #16]
 8011700:	4620      	mov	r0, r4
 8011702:	f000 fc69 	bl	8011fd8 <__lshift>
 8011706:	4639      	mov	r1, r7
 8011708:	9004      	str	r0, [sp, #16]
 801170a:	f000 fcb9 	bl	8012080 <__mcmp>
 801170e:	2800      	cmp	r0, #0
 8011710:	dc03      	bgt.n	801171a <_dtoa_r+0xa32>
 8011712:	d1e0      	bne.n	80116d6 <_dtoa_r+0x9ee>
 8011714:	f018 0f01 	tst.w	r8, #1
 8011718:	d0dd      	beq.n	80116d6 <_dtoa_r+0x9ee>
 801171a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801171e:	d1d8      	bne.n	80116d2 <_dtoa_r+0x9ea>
 8011720:	9b05      	ldr	r3, [sp, #20]
 8011722:	9a05      	ldr	r2, [sp, #20]
 8011724:	1c5d      	adds	r5, r3, #1
 8011726:	2339      	movs	r3, #57	; 0x39
 8011728:	7013      	strb	r3, [r2, #0]
 801172a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801172e:	2b39      	cmp	r3, #57	; 0x39
 8011730:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011734:	d04f      	beq.n	80117d6 <_dtoa_r+0xaee>
 8011736:	3301      	adds	r3, #1
 8011738:	7013      	strb	r3, [r2, #0]
 801173a:	e754      	b.n	80115e6 <_dtoa_r+0x8fe>
 801173c:	9a05      	ldr	r2, [sp, #20]
 801173e:	2b00      	cmp	r3, #0
 8011740:	f102 0501 	add.w	r5, r2, #1
 8011744:	dd06      	ble.n	8011754 <_dtoa_r+0xa6c>
 8011746:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801174a:	d0e9      	beq.n	8011720 <_dtoa_r+0xa38>
 801174c:	f108 0801 	add.w	r8, r8, #1
 8011750:	9b05      	ldr	r3, [sp, #20]
 8011752:	e7c2      	b.n	80116da <_dtoa_r+0x9f2>
 8011754:	9a02      	ldr	r2, [sp, #8]
 8011756:	f805 8c01 	strb.w	r8, [r5, #-1]
 801175a:	eba5 030b 	sub.w	r3, r5, fp
 801175e:	4293      	cmp	r3, r2
 8011760:	d021      	beq.n	80117a6 <_dtoa_r+0xabe>
 8011762:	2300      	movs	r3, #0
 8011764:	220a      	movs	r2, #10
 8011766:	9904      	ldr	r1, [sp, #16]
 8011768:	4620      	mov	r0, r4
 801176a:	f000 fabf 	bl	8011cec <__multadd>
 801176e:	45b1      	cmp	r9, r6
 8011770:	9004      	str	r0, [sp, #16]
 8011772:	f04f 0300 	mov.w	r3, #0
 8011776:	f04f 020a 	mov.w	r2, #10
 801177a:	4649      	mov	r1, r9
 801177c:	4620      	mov	r0, r4
 801177e:	d105      	bne.n	801178c <_dtoa_r+0xaa4>
 8011780:	f000 fab4 	bl	8011cec <__multadd>
 8011784:	4681      	mov	r9, r0
 8011786:	4606      	mov	r6, r0
 8011788:	9505      	str	r5, [sp, #20]
 801178a:	e776      	b.n	801167a <_dtoa_r+0x992>
 801178c:	f000 faae 	bl	8011cec <__multadd>
 8011790:	4631      	mov	r1, r6
 8011792:	4681      	mov	r9, r0
 8011794:	2300      	movs	r3, #0
 8011796:	220a      	movs	r2, #10
 8011798:	4620      	mov	r0, r4
 801179a:	f000 faa7 	bl	8011cec <__multadd>
 801179e:	4606      	mov	r6, r0
 80117a0:	e7f2      	b.n	8011788 <_dtoa_r+0xaa0>
 80117a2:	f04f 0900 	mov.w	r9, #0
 80117a6:	2201      	movs	r2, #1
 80117a8:	9904      	ldr	r1, [sp, #16]
 80117aa:	4620      	mov	r0, r4
 80117ac:	f000 fc14 	bl	8011fd8 <__lshift>
 80117b0:	4639      	mov	r1, r7
 80117b2:	9004      	str	r0, [sp, #16]
 80117b4:	f000 fc64 	bl	8012080 <__mcmp>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	dcb6      	bgt.n	801172a <_dtoa_r+0xa42>
 80117bc:	d102      	bne.n	80117c4 <_dtoa_r+0xadc>
 80117be:	f018 0f01 	tst.w	r8, #1
 80117c2:	d1b2      	bne.n	801172a <_dtoa_r+0xa42>
 80117c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80117c8:	2b30      	cmp	r3, #48	; 0x30
 80117ca:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80117ce:	f47f af0a 	bne.w	80115e6 <_dtoa_r+0x8fe>
 80117d2:	4615      	mov	r5, r2
 80117d4:	e7f6      	b.n	80117c4 <_dtoa_r+0xadc>
 80117d6:	4593      	cmp	fp, r2
 80117d8:	d105      	bne.n	80117e6 <_dtoa_r+0xafe>
 80117da:	2331      	movs	r3, #49	; 0x31
 80117dc:	f10a 0a01 	add.w	sl, sl, #1
 80117e0:	f88b 3000 	strb.w	r3, [fp]
 80117e4:	e6ff      	b.n	80115e6 <_dtoa_r+0x8fe>
 80117e6:	4615      	mov	r5, r2
 80117e8:	e79f      	b.n	801172a <_dtoa_r+0xa42>
 80117ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011850 <_dtoa_r+0xb68>
 80117ee:	e007      	b.n	8011800 <_dtoa_r+0xb18>
 80117f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011854 <_dtoa_r+0xb6c>
 80117f6:	b11b      	cbz	r3, 8011800 <_dtoa_r+0xb18>
 80117f8:	f10b 0308 	add.w	r3, fp, #8
 80117fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80117fe:	6013      	str	r3, [r2, #0]
 8011800:	4658      	mov	r0, fp
 8011802:	b017      	add	sp, #92	; 0x5c
 8011804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011808:	9b06      	ldr	r3, [sp, #24]
 801180a:	2b01      	cmp	r3, #1
 801180c:	f77f ae35 	ble.w	801147a <_dtoa_r+0x792>
 8011810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011812:	9307      	str	r3, [sp, #28]
 8011814:	e649      	b.n	80114aa <_dtoa_r+0x7c2>
 8011816:	9b02      	ldr	r3, [sp, #8]
 8011818:	2b00      	cmp	r3, #0
 801181a:	dc03      	bgt.n	8011824 <_dtoa_r+0xb3c>
 801181c:	9b06      	ldr	r3, [sp, #24]
 801181e:	2b02      	cmp	r3, #2
 8011820:	f73f aecc 	bgt.w	80115bc <_dtoa_r+0x8d4>
 8011824:	465d      	mov	r5, fp
 8011826:	4639      	mov	r1, r7
 8011828:	9804      	ldr	r0, [sp, #16]
 801182a:	f7ff f9cf 	bl	8010bcc <quorem>
 801182e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011832:	f805 8b01 	strb.w	r8, [r5], #1
 8011836:	9a02      	ldr	r2, [sp, #8]
 8011838:	eba5 030b 	sub.w	r3, r5, fp
 801183c:	429a      	cmp	r2, r3
 801183e:	ddb0      	ble.n	80117a2 <_dtoa_r+0xaba>
 8011840:	2300      	movs	r3, #0
 8011842:	220a      	movs	r2, #10
 8011844:	9904      	ldr	r1, [sp, #16]
 8011846:	4620      	mov	r0, r4
 8011848:	f000 fa50 	bl	8011cec <__multadd>
 801184c:	9004      	str	r0, [sp, #16]
 801184e:	e7ea      	b.n	8011826 <_dtoa_r+0xb3e>
 8011850:	080154b4 	.word	0x080154b4
 8011854:	08015226 	.word	0x08015226

08011858 <__sflush_r>:
 8011858:	898a      	ldrh	r2, [r1, #12]
 801185a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801185e:	4605      	mov	r5, r0
 8011860:	0710      	lsls	r0, r2, #28
 8011862:	460c      	mov	r4, r1
 8011864:	d458      	bmi.n	8011918 <__sflush_r+0xc0>
 8011866:	684b      	ldr	r3, [r1, #4]
 8011868:	2b00      	cmp	r3, #0
 801186a:	dc05      	bgt.n	8011878 <__sflush_r+0x20>
 801186c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801186e:	2b00      	cmp	r3, #0
 8011870:	dc02      	bgt.n	8011878 <__sflush_r+0x20>
 8011872:	2000      	movs	r0, #0
 8011874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801187a:	2e00      	cmp	r6, #0
 801187c:	d0f9      	beq.n	8011872 <__sflush_r+0x1a>
 801187e:	2300      	movs	r3, #0
 8011880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011884:	682f      	ldr	r7, [r5, #0]
 8011886:	6a21      	ldr	r1, [r4, #32]
 8011888:	602b      	str	r3, [r5, #0]
 801188a:	d032      	beq.n	80118f2 <__sflush_r+0x9a>
 801188c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801188e:	89a3      	ldrh	r3, [r4, #12]
 8011890:	075a      	lsls	r2, r3, #29
 8011892:	d505      	bpl.n	80118a0 <__sflush_r+0x48>
 8011894:	6863      	ldr	r3, [r4, #4]
 8011896:	1ac0      	subs	r0, r0, r3
 8011898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801189a:	b10b      	cbz	r3, 80118a0 <__sflush_r+0x48>
 801189c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801189e:	1ac0      	subs	r0, r0, r3
 80118a0:	2300      	movs	r3, #0
 80118a2:	4602      	mov	r2, r0
 80118a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118a6:	6a21      	ldr	r1, [r4, #32]
 80118a8:	4628      	mov	r0, r5
 80118aa:	47b0      	blx	r6
 80118ac:	1c43      	adds	r3, r0, #1
 80118ae:	89a3      	ldrh	r3, [r4, #12]
 80118b0:	d106      	bne.n	80118c0 <__sflush_r+0x68>
 80118b2:	6829      	ldr	r1, [r5, #0]
 80118b4:	291d      	cmp	r1, #29
 80118b6:	d848      	bhi.n	801194a <__sflush_r+0xf2>
 80118b8:	4a29      	ldr	r2, [pc, #164]	; (8011960 <__sflush_r+0x108>)
 80118ba:	40ca      	lsrs	r2, r1
 80118bc:	07d6      	lsls	r6, r2, #31
 80118be:	d544      	bpl.n	801194a <__sflush_r+0xf2>
 80118c0:	2200      	movs	r2, #0
 80118c2:	6062      	str	r2, [r4, #4]
 80118c4:	04d9      	lsls	r1, r3, #19
 80118c6:	6922      	ldr	r2, [r4, #16]
 80118c8:	6022      	str	r2, [r4, #0]
 80118ca:	d504      	bpl.n	80118d6 <__sflush_r+0x7e>
 80118cc:	1c42      	adds	r2, r0, #1
 80118ce:	d101      	bne.n	80118d4 <__sflush_r+0x7c>
 80118d0:	682b      	ldr	r3, [r5, #0]
 80118d2:	b903      	cbnz	r3, 80118d6 <__sflush_r+0x7e>
 80118d4:	6560      	str	r0, [r4, #84]	; 0x54
 80118d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118d8:	602f      	str	r7, [r5, #0]
 80118da:	2900      	cmp	r1, #0
 80118dc:	d0c9      	beq.n	8011872 <__sflush_r+0x1a>
 80118de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118e2:	4299      	cmp	r1, r3
 80118e4:	d002      	beq.n	80118ec <__sflush_r+0x94>
 80118e6:	4628      	mov	r0, r5
 80118e8:	f000 fc9e 	bl	8012228 <_free_r>
 80118ec:	2000      	movs	r0, #0
 80118ee:	6360      	str	r0, [r4, #52]	; 0x34
 80118f0:	e7c0      	b.n	8011874 <__sflush_r+0x1c>
 80118f2:	2301      	movs	r3, #1
 80118f4:	4628      	mov	r0, r5
 80118f6:	47b0      	blx	r6
 80118f8:	1c41      	adds	r1, r0, #1
 80118fa:	d1c8      	bne.n	801188e <__sflush_r+0x36>
 80118fc:	682b      	ldr	r3, [r5, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d0c5      	beq.n	801188e <__sflush_r+0x36>
 8011902:	2b1d      	cmp	r3, #29
 8011904:	d001      	beq.n	801190a <__sflush_r+0xb2>
 8011906:	2b16      	cmp	r3, #22
 8011908:	d101      	bne.n	801190e <__sflush_r+0xb6>
 801190a:	602f      	str	r7, [r5, #0]
 801190c:	e7b1      	b.n	8011872 <__sflush_r+0x1a>
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011914:	81a3      	strh	r3, [r4, #12]
 8011916:	e7ad      	b.n	8011874 <__sflush_r+0x1c>
 8011918:	690f      	ldr	r7, [r1, #16]
 801191a:	2f00      	cmp	r7, #0
 801191c:	d0a9      	beq.n	8011872 <__sflush_r+0x1a>
 801191e:	0793      	lsls	r3, r2, #30
 8011920:	680e      	ldr	r6, [r1, #0]
 8011922:	bf08      	it	eq
 8011924:	694b      	ldreq	r3, [r1, #20]
 8011926:	600f      	str	r7, [r1, #0]
 8011928:	bf18      	it	ne
 801192a:	2300      	movne	r3, #0
 801192c:	eba6 0807 	sub.w	r8, r6, r7
 8011930:	608b      	str	r3, [r1, #8]
 8011932:	f1b8 0f00 	cmp.w	r8, #0
 8011936:	dd9c      	ble.n	8011872 <__sflush_r+0x1a>
 8011938:	4643      	mov	r3, r8
 801193a:	463a      	mov	r2, r7
 801193c:	6a21      	ldr	r1, [r4, #32]
 801193e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011940:	4628      	mov	r0, r5
 8011942:	47b0      	blx	r6
 8011944:	2800      	cmp	r0, #0
 8011946:	dc06      	bgt.n	8011956 <__sflush_r+0xfe>
 8011948:	89a3      	ldrh	r3, [r4, #12]
 801194a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801194e:	81a3      	strh	r3, [r4, #12]
 8011950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011954:	e78e      	b.n	8011874 <__sflush_r+0x1c>
 8011956:	4407      	add	r7, r0
 8011958:	eba8 0800 	sub.w	r8, r8, r0
 801195c:	e7e9      	b.n	8011932 <__sflush_r+0xda>
 801195e:	bf00      	nop
 8011960:	20400001 	.word	0x20400001

08011964 <_fflush_r>:
 8011964:	b538      	push	{r3, r4, r5, lr}
 8011966:	690b      	ldr	r3, [r1, #16]
 8011968:	4605      	mov	r5, r0
 801196a:	460c      	mov	r4, r1
 801196c:	b1db      	cbz	r3, 80119a6 <_fflush_r+0x42>
 801196e:	b118      	cbz	r0, 8011978 <_fflush_r+0x14>
 8011970:	6983      	ldr	r3, [r0, #24]
 8011972:	b90b      	cbnz	r3, 8011978 <_fflush_r+0x14>
 8011974:	f000 f860 	bl	8011a38 <__sinit>
 8011978:	4b0c      	ldr	r3, [pc, #48]	; (80119ac <_fflush_r+0x48>)
 801197a:	429c      	cmp	r4, r3
 801197c:	d109      	bne.n	8011992 <_fflush_r+0x2e>
 801197e:	686c      	ldr	r4, [r5, #4]
 8011980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011984:	b17b      	cbz	r3, 80119a6 <_fflush_r+0x42>
 8011986:	4621      	mov	r1, r4
 8011988:	4628      	mov	r0, r5
 801198a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801198e:	f7ff bf63 	b.w	8011858 <__sflush_r>
 8011992:	4b07      	ldr	r3, [pc, #28]	; (80119b0 <_fflush_r+0x4c>)
 8011994:	429c      	cmp	r4, r3
 8011996:	d101      	bne.n	801199c <_fflush_r+0x38>
 8011998:	68ac      	ldr	r4, [r5, #8]
 801199a:	e7f1      	b.n	8011980 <_fflush_r+0x1c>
 801199c:	4b05      	ldr	r3, [pc, #20]	; (80119b4 <_fflush_r+0x50>)
 801199e:	429c      	cmp	r4, r3
 80119a0:	bf08      	it	eq
 80119a2:	68ec      	ldreq	r4, [r5, #12]
 80119a4:	e7ec      	b.n	8011980 <_fflush_r+0x1c>
 80119a6:	2000      	movs	r0, #0
 80119a8:	bd38      	pop	{r3, r4, r5, pc}
 80119aa:	bf00      	nop
 80119ac:	08015254 	.word	0x08015254
 80119b0:	08015274 	.word	0x08015274
 80119b4:	08015234 	.word	0x08015234

080119b8 <std>:
 80119b8:	2300      	movs	r3, #0
 80119ba:	b510      	push	{r4, lr}
 80119bc:	4604      	mov	r4, r0
 80119be:	e9c0 3300 	strd	r3, r3, [r0]
 80119c2:	6083      	str	r3, [r0, #8]
 80119c4:	8181      	strh	r1, [r0, #12]
 80119c6:	6643      	str	r3, [r0, #100]	; 0x64
 80119c8:	81c2      	strh	r2, [r0, #14]
 80119ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119ce:	6183      	str	r3, [r0, #24]
 80119d0:	4619      	mov	r1, r3
 80119d2:	2208      	movs	r2, #8
 80119d4:	305c      	adds	r0, #92	; 0x5c
 80119d6:	f7fe fb15 	bl	8010004 <memset>
 80119da:	4b05      	ldr	r3, [pc, #20]	; (80119f0 <std+0x38>)
 80119dc:	6263      	str	r3, [r4, #36]	; 0x24
 80119de:	4b05      	ldr	r3, [pc, #20]	; (80119f4 <std+0x3c>)
 80119e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80119e2:	4b05      	ldr	r3, [pc, #20]	; (80119f8 <std+0x40>)
 80119e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119e6:	4b05      	ldr	r3, [pc, #20]	; (80119fc <std+0x44>)
 80119e8:	6224      	str	r4, [r4, #32]
 80119ea:	6323      	str	r3, [r4, #48]	; 0x30
 80119ec:	bd10      	pop	{r4, pc}
 80119ee:	bf00      	nop
 80119f0:	080128bd 	.word	0x080128bd
 80119f4:	080128df 	.word	0x080128df
 80119f8:	08012917 	.word	0x08012917
 80119fc:	0801293b 	.word	0x0801293b

08011a00 <_cleanup_r>:
 8011a00:	4901      	ldr	r1, [pc, #4]	; (8011a08 <_cleanup_r+0x8>)
 8011a02:	f000 b885 	b.w	8011b10 <_fwalk_reent>
 8011a06:	bf00      	nop
 8011a08:	08011965 	.word	0x08011965

08011a0c <__sfmoreglue>:
 8011a0c:	b570      	push	{r4, r5, r6, lr}
 8011a0e:	1e4a      	subs	r2, r1, #1
 8011a10:	2568      	movs	r5, #104	; 0x68
 8011a12:	4355      	muls	r5, r2
 8011a14:	460e      	mov	r6, r1
 8011a16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011a1a:	f000 fc53 	bl	80122c4 <_malloc_r>
 8011a1e:	4604      	mov	r4, r0
 8011a20:	b140      	cbz	r0, 8011a34 <__sfmoreglue+0x28>
 8011a22:	2100      	movs	r1, #0
 8011a24:	e9c0 1600 	strd	r1, r6, [r0]
 8011a28:	300c      	adds	r0, #12
 8011a2a:	60a0      	str	r0, [r4, #8]
 8011a2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011a30:	f7fe fae8 	bl	8010004 <memset>
 8011a34:	4620      	mov	r0, r4
 8011a36:	bd70      	pop	{r4, r5, r6, pc}

08011a38 <__sinit>:
 8011a38:	6983      	ldr	r3, [r0, #24]
 8011a3a:	b510      	push	{r4, lr}
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	bb33      	cbnz	r3, 8011a8e <__sinit+0x56>
 8011a40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011a44:	6503      	str	r3, [r0, #80]	; 0x50
 8011a46:	4b12      	ldr	r3, [pc, #72]	; (8011a90 <__sinit+0x58>)
 8011a48:	4a12      	ldr	r2, [pc, #72]	; (8011a94 <__sinit+0x5c>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	6282      	str	r2, [r0, #40]	; 0x28
 8011a4e:	4298      	cmp	r0, r3
 8011a50:	bf04      	itt	eq
 8011a52:	2301      	moveq	r3, #1
 8011a54:	6183      	streq	r3, [r0, #24]
 8011a56:	f000 f81f 	bl	8011a98 <__sfp>
 8011a5a:	6060      	str	r0, [r4, #4]
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f000 f81b 	bl	8011a98 <__sfp>
 8011a62:	60a0      	str	r0, [r4, #8]
 8011a64:	4620      	mov	r0, r4
 8011a66:	f000 f817 	bl	8011a98 <__sfp>
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	60e0      	str	r0, [r4, #12]
 8011a6e:	2104      	movs	r1, #4
 8011a70:	6860      	ldr	r0, [r4, #4]
 8011a72:	f7ff ffa1 	bl	80119b8 <std>
 8011a76:	2201      	movs	r2, #1
 8011a78:	2109      	movs	r1, #9
 8011a7a:	68a0      	ldr	r0, [r4, #8]
 8011a7c:	f7ff ff9c 	bl	80119b8 <std>
 8011a80:	2202      	movs	r2, #2
 8011a82:	2112      	movs	r1, #18
 8011a84:	68e0      	ldr	r0, [r4, #12]
 8011a86:	f7ff ff97 	bl	80119b8 <std>
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	61a3      	str	r3, [r4, #24]
 8011a8e:	bd10      	pop	{r4, pc}
 8011a90:	080151f0 	.word	0x080151f0
 8011a94:	08011a01 	.word	0x08011a01

08011a98 <__sfp>:
 8011a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a9a:	4b1b      	ldr	r3, [pc, #108]	; (8011b08 <__sfp+0x70>)
 8011a9c:	681e      	ldr	r6, [r3, #0]
 8011a9e:	69b3      	ldr	r3, [r6, #24]
 8011aa0:	4607      	mov	r7, r0
 8011aa2:	b913      	cbnz	r3, 8011aaa <__sfp+0x12>
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	f7ff ffc7 	bl	8011a38 <__sinit>
 8011aaa:	3648      	adds	r6, #72	; 0x48
 8011aac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ab0:	3b01      	subs	r3, #1
 8011ab2:	d503      	bpl.n	8011abc <__sfp+0x24>
 8011ab4:	6833      	ldr	r3, [r6, #0]
 8011ab6:	b133      	cbz	r3, 8011ac6 <__sfp+0x2e>
 8011ab8:	6836      	ldr	r6, [r6, #0]
 8011aba:	e7f7      	b.n	8011aac <__sfp+0x14>
 8011abc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ac0:	b16d      	cbz	r5, 8011ade <__sfp+0x46>
 8011ac2:	3468      	adds	r4, #104	; 0x68
 8011ac4:	e7f4      	b.n	8011ab0 <__sfp+0x18>
 8011ac6:	2104      	movs	r1, #4
 8011ac8:	4638      	mov	r0, r7
 8011aca:	f7ff ff9f 	bl	8011a0c <__sfmoreglue>
 8011ace:	6030      	str	r0, [r6, #0]
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d1f1      	bne.n	8011ab8 <__sfp+0x20>
 8011ad4:	230c      	movs	r3, #12
 8011ad6:	603b      	str	r3, [r7, #0]
 8011ad8:	4604      	mov	r4, r0
 8011ada:	4620      	mov	r0, r4
 8011adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ade:	4b0b      	ldr	r3, [pc, #44]	; (8011b0c <__sfp+0x74>)
 8011ae0:	6665      	str	r5, [r4, #100]	; 0x64
 8011ae2:	e9c4 5500 	strd	r5, r5, [r4]
 8011ae6:	60a5      	str	r5, [r4, #8]
 8011ae8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011aec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011af0:	2208      	movs	r2, #8
 8011af2:	4629      	mov	r1, r5
 8011af4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011af8:	f7fe fa84 	bl	8010004 <memset>
 8011afc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011b00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011b04:	e7e9      	b.n	8011ada <__sfp+0x42>
 8011b06:	bf00      	nop
 8011b08:	080151f0 	.word	0x080151f0
 8011b0c:	ffff0001 	.word	0xffff0001

08011b10 <_fwalk_reent>:
 8011b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b14:	4680      	mov	r8, r0
 8011b16:	4689      	mov	r9, r1
 8011b18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b1c:	2600      	movs	r6, #0
 8011b1e:	b914      	cbnz	r4, 8011b26 <_fwalk_reent+0x16>
 8011b20:	4630      	mov	r0, r6
 8011b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011b2a:	3f01      	subs	r7, #1
 8011b2c:	d501      	bpl.n	8011b32 <_fwalk_reent+0x22>
 8011b2e:	6824      	ldr	r4, [r4, #0]
 8011b30:	e7f5      	b.n	8011b1e <_fwalk_reent+0xe>
 8011b32:	89ab      	ldrh	r3, [r5, #12]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d907      	bls.n	8011b48 <_fwalk_reent+0x38>
 8011b38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	d003      	beq.n	8011b48 <_fwalk_reent+0x38>
 8011b40:	4629      	mov	r1, r5
 8011b42:	4640      	mov	r0, r8
 8011b44:	47c8      	blx	r9
 8011b46:	4306      	orrs	r6, r0
 8011b48:	3568      	adds	r5, #104	; 0x68
 8011b4a:	e7ee      	b.n	8011b2a <_fwalk_reent+0x1a>

08011b4c <_localeconv_r>:
 8011b4c:	4b04      	ldr	r3, [pc, #16]	; (8011b60 <_localeconv_r+0x14>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	6a18      	ldr	r0, [r3, #32]
 8011b52:	4b04      	ldr	r3, [pc, #16]	; (8011b64 <_localeconv_r+0x18>)
 8011b54:	2800      	cmp	r0, #0
 8011b56:	bf08      	it	eq
 8011b58:	4618      	moveq	r0, r3
 8011b5a:	30f0      	adds	r0, #240	; 0xf0
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop
 8011b60:	20001c34 	.word	0x20001c34
 8011b64:	20001c98 	.word	0x20001c98

08011b68 <__swhatbuf_r>:
 8011b68:	b570      	push	{r4, r5, r6, lr}
 8011b6a:	460e      	mov	r6, r1
 8011b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b70:	2900      	cmp	r1, #0
 8011b72:	b096      	sub	sp, #88	; 0x58
 8011b74:	4614      	mov	r4, r2
 8011b76:	461d      	mov	r5, r3
 8011b78:	da07      	bge.n	8011b8a <__swhatbuf_r+0x22>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	602b      	str	r3, [r5, #0]
 8011b7e:	89b3      	ldrh	r3, [r6, #12]
 8011b80:	061a      	lsls	r2, r3, #24
 8011b82:	d410      	bmi.n	8011ba6 <__swhatbuf_r+0x3e>
 8011b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b88:	e00e      	b.n	8011ba8 <__swhatbuf_r+0x40>
 8011b8a:	466a      	mov	r2, sp
 8011b8c:	f000 fefc 	bl	8012988 <_fstat_r>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	dbf2      	blt.n	8011b7a <__swhatbuf_r+0x12>
 8011b94:	9a01      	ldr	r2, [sp, #4]
 8011b96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b9e:	425a      	negs	r2, r3
 8011ba0:	415a      	adcs	r2, r3
 8011ba2:	602a      	str	r2, [r5, #0]
 8011ba4:	e7ee      	b.n	8011b84 <__swhatbuf_r+0x1c>
 8011ba6:	2340      	movs	r3, #64	; 0x40
 8011ba8:	2000      	movs	r0, #0
 8011baa:	6023      	str	r3, [r4, #0]
 8011bac:	b016      	add	sp, #88	; 0x58
 8011bae:	bd70      	pop	{r4, r5, r6, pc}

08011bb0 <__smakebuf_r>:
 8011bb0:	898b      	ldrh	r3, [r1, #12]
 8011bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bb4:	079d      	lsls	r5, r3, #30
 8011bb6:	4606      	mov	r6, r0
 8011bb8:	460c      	mov	r4, r1
 8011bba:	d507      	bpl.n	8011bcc <__smakebuf_r+0x1c>
 8011bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011bc0:	6023      	str	r3, [r4, #0]
 8011bc2:	6123      	str	r3, [r4, #16]
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	6163      	str	r3, [r4, #20]
 8011bc8:	b002      	add	sp, #8
 8011bca:	bd70      	pop	{r4, r5, r6, pc}
 8011bcc:	ab01      	add	r3, sp, #4
 8011bce:	466a      	mov	r2, sp
 8011bd0:	f7ff ffca 	bl	8011b68 <__swhatbuf_r>
 8011bd4:	9900      	ldr	r1, [sp, #0]
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	4630      	mov	r0, r6
 8011bda:	f000 fb73 	bl	80122c4 <_malloc_r>
 8011bde:	b948      	cbnz	r0, 8011bf4 <__smakebuf_r+0x44>
 8011be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011be4:	059a      	lsls	r2, r3, #22
 8011be6:	d4ef      	bmi.n	8011bc8 <__smakebuf_r+0x18>
 8011be8:	f023 0303 	bic.w	r3, r3, #3
 8011bec:	f043 0302 	orr.w	r3, r3, #2
 8011bf0:	81a3      	strh	r3, [r4, #12]
 8011bf2:	e7e3      	b.n	8011bbc <__smakebuf_r+0xc>
 8011bf4:	4b0d      	ldr	r3, [pc, #52]	; (8011c2c <__smakebuf_r+0x7c>)
 8011bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011bf8:	89a3      	ldrh	r3, [r4, #12]
 8011bfa:	6020      	str	r0, [r4, #0]
 8011bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c00:	81a3      	strh	r3, [r4, #12]
 8011c02:	9b00      	ldr	r3, [sp, #0]
 8011c04:	6163      	str	r3, [r4, #20]
 8011c06:	9b01      	ldr	r3, [sp, #4]
 8011c08:	6120      	str	r0, [r4, #16]
 8011c0a:	b15b      	cbz	r3, 8011c24 <__smakebuf_r+0x74>
 8011c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c10:	4630      	mov	r0, r6
 8011c12:	f000 fecb 	bl	80129ac <_isatty_r>
 8011c16:	b128      	cbz	r0, 8011c24 <__smakebuf_r+0x74>
 8011c18:	89a3      	ldrh	r3, [r4, #12]
 8011c1a:	f023 0303 	bic.w	r3, r3, #3
 8011c1e:	f043 0301 	orr.w	r3, r3, #1
 8011c22:	81a3      	strh	r3, [r4, #12]
 8011c24:	89a3      	ldrh	r3, [r4, #12]
 8011c26:	431d      	orrs	r5, r3
 8011c28:	81a5      	strh	r5, [r4, #12]
 8011c2a:	e7cd      	b.n	8011bc8 <__smakebuf_r+0x18>
 8011c2c:	08011a01 	.word	0x08011a01

08011c30 <malloc>:
 8011c30:	4b02      	ldr	r3, [pc, #8]	; (8011c3c <malloc+0xc>)
 8011c32:	4601      	mov	r1, r0
 8011c34:	6818      	ldr	r0, [r3, #0]
 8011c36:	f000 bb45 	b.w	80122c4 <_malloc_r>
 8011c3a:	bf00      	nop
 8011c3c:	20001c34 	.word	0x20001c34

08011c40 <memcpy>:
 8011c40:	b510      	push	{r4, lr}
 8011c42:	1e43      	subs	r3, r0, #1
 8011c44:	440a      	add	r2, r1
 8011c46:	4291      	cmp	r1, r2
 8011c48:	d100      	bne.n	8011c4c <memcpy+0xc>
 8011c4a:	bd10      	pop	{r4, pc}
 8011c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c54:	e7f7      	b.n	8011c46 <memcpy+0x6>

08011c56 <_Balloc>:
 8011c56:	b570      	push	{r4, r5, r6, lr}
 8011c58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	460e      	mov	r6, r1
 8011c5e:	b93d      	cbnz	r5, 8011c70 <_Balloc+0x1a>
 8011c60:	2010      	movs	r0, #16
 8011c62:	f7ff ffe5 	bl	8011c30 <malloc>
 8011c66:	6260      	str	r0, [r4, #36]	; 0x24
 8011c68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011c6c:	6005      	str	r5, [r0, #0]
 8011c6e:	60c5      	str	r5, [r0, #12]
 8011c70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011c72:	68eb      	ldr	r3, [r5, #12]
 8011c74:	b183      	cbz	r3, 8011c98 <_Balloc+0x42>
 8011c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011c7e:	b9b8      	cbnz	r0, 8011cb0 <_Balloc+0x5a>
 8011c80:	2101      	movs	r1, #1
 8011c82:	fa01 f506 	lsl.w	r5, r1, r6
 8011c86:	1d6a      	adds	r2, r5, #5
 8011c88:	0092      	lsls	r2, r2, #2
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	f000 fabe 	bl	801220c <_calloc_r>
 8011c90:	b160      	cbz	r0, 8011cac <_Balloc+0x56>
 8011c92:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011c96:	e00e      	b.n	8011cb6 <_Balloc+0x60>
 8011c98:	2221      	movs	r2, #33	; 0x21
 8011c9a:	2104      	movs	r1, #4
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	f000 fab5 	bl	801220c <_calloc_r>
 8011ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ca4:	60e8      	str	r0, [r5, #12]
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1e4      	bne.n	8011c76 <_Balloc+0x20>
 8011cac:	2000      	movs	r0, #0
 8011cae:	bd70      	pop	{r4, r5, r6, pc}
 8011cb0:	6802      	ldr	r2, [r0, #0]
 8011cb2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011cbc:	e7f7      	b.n	8011cae <_Balloc+0x58>

08011cbe <_Bfree>:
 8011cbe:	b570      	push	{r4, r5, r6, lr}
 8011cc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	460d      	mov	r5, r1
 8011cc6:	b93c      	cbnz	r4, 8011cd8 <_Bfree+0x1a>
 8011cc8:	2010      	movs	r0, #16
 8011cca:	f7ff ffb1 	bl	8011c30 <malloc>
 8011cce:	6270      	str	r0, [r6, #36]	; 0x24
 8011cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011cd4:	6004      	str	r4, [r0, #0]
 8011cd6:	60c4      	str	r4, [r0, #12]
 8011cd8:	b13d      	cbz	r5, 8011cea <_Bfree+0x2c>
 8011cda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011cdc:	686a      	ldr	r2, [r5, #4]
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ce4:	6029      	str	r1, [r5, #0]
 8011ce6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011cea:	bd70      	pop	{r4, r5, r6, pc}

08011cec <__multadd>:
 8011cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf0:	690d      	ldr	r5, [r1, #16]
 8011cf2:	461f      	mov	r7, r3
 8011cf4:	4606      	mov	r6, r0
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	f101 0c14 	add.w	ip, r1, #20
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	f8dc 0000 	ldr.w	r0, [ip]
 8011d02:	b281      	uxth	r1, r0
 8011d04:	fb02 7101 	mla	r1, r2, r1, r7
 8011d08:	0c0f      	lsrs	r7, r1, #16
 8011d0a:	0c00      	lsrs	r0, r0, #16
 8011d0c:	fb02 7000 	mla	r0, r2, r0, r7
 8011d10:	b289      	uxth	r1, r1
 8011d12:	3301      	adds	r3, #1
 8011d14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011d18:	429d      	cmp	r5, r3
 8011d1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011d1e:	f84c 1b04 	str.w	r1, [ip], #4
 8011d22:	dcec      	bgt.n	8011cfe <__multadd+0x12>
 8011d24:	b1d7      	cbz	r7, 8011d5c <__multadd+0x70>
 8011d26:	68a3      	ldr	r3, [r4, #8]
 8011d28:	42ab      	cmp	r3, r5
 8011d2a:	dc12      	bgt.n	8011d52 <__multadd+0x66>
 8011d2c:	6861      	ldr	r1, [r4, #4]
 8011d2e:	4630      	mov	r0, r6
 8011d30:	3101      	adds	r1, #1
 8011d32:	f7ff ff90 	bl	8011c56 <_Balloc>
 8011d36:	6922      	ldr	r2, [r4, #16]
 8011d38:	3202      	adds	r2, #2
 8011d3a:	f104 010c 	add.w	r1, r4, #12
 8011d3e:	4680      	mov	r8, r0
 8011d40:	0092      	lsls	r2, r2, #2
 8011d42:	300c      	adds	r0, #12
 8011d44:	f7ff ff7c 	bl	8011c40 <memcpy>
 8011d48:	4621      	mov	r1, r4
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	f7ff ffb7 	bl	8011cbe <_Bfree>
 8011d50:	4644      	mov	r4, r8
 8011d52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011d56:	3501      	adds	r5, #1
 8011d58:	615f      	str	r7, [r3, #20]
 8011d5a:	6125      	str	r5, [r4, #16]
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d62 <__hi0bits>:
 8011d62:	0c02      	lsrs	r2, r0, #16
 8011d64:	0412      	lsls	r2, r2, #16
 8011d66:	4603      	mov	r3, r0
 8011d68:	b9b2      	cbnz	r2, 8011d98 <__hi0bits+0x36>
 8011d6a:	0403      	lsls	r3, r0, #16
 8011d6c:	2010      	movs	r0, #16
 8011d6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011d72:	bf04      	itt	eq
 8011d74:	021b      	lsleq	r3, r3, #8
 8011d76:	3008      	addeq	r0, #8
 8011d78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011d7c:	bf04      	itt	eq
 8011d7e:	011b      	lsleq	r3, r3, #4
 8011d80:	3004      	addeq	r0, #4
 8011d82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011d86:	bf04      	itt	eq
 8011d88:	009b      	lsleq	r3, r3, #2
 8011d8a:	3002      	addeq	r0, #2
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	db06      	blt.n	8011d9e <__hi0bits+0x3c>
 8011d90:	005b      	lsls	r3, r3, #1
 8011d92:	d503      	bpl.n	8011d9c <__hi0bits+0x3a>
 8011d94:	3001      	adds	r0, #1
 8011d96:	4770      	bx	lr
 8011d98:	2000      	movs	r0, #0
 8011d9a:	e7e8      	b.n	8011d6e <__hi0bits+0xc>
 8011d9c:	2020      	movs	r0, #32
 8011d9e:	4770      	bx	lr

08011da0 <__lo0bits>:
 8011da0:	6803      	ldr	r3, [r0, #0]
 8011da2:	f013 0207 	ands.w	r2, r3, #7
 8011da6:	4601      	mov	r1, r0
 8011da8:	d00b      	beq.n	8011dc2 <__lo0bits+0x22>
 8011daa:	07da      	lsls	r2, r3, #31
 8011dac:	d423      	bmi.n	8011df6 <__lo0bits+0x56>
 8011dae:	0798      	lsls	r0, r3, #30
 8011db0:	bf49      	itett	mi
 8011db2:	085b      	lsrmi	r3, r3, #1
 8011db4:	089b      	lsrpl	r3, r3, #2
 8011db6:	2001      	movmi	r0, #1
 8011db8:	600b      	strmi	r3, [r1, #0]
 8011dba:	bf5c      	itt	pl
 8011dbc:	600b      	strpl	r3, [r1, #0]
 8011dbe:	2002      	movpl	r0, #2
 8011dc0:	4770      	bx	lr
 8011dc2:	b298      	uxth	r0, r3
 8011dc4:	b9a8      	cbnz	r0, 8011df2 <__lo0bits+0x52>
 8011dc6:	0c1b      	lsrs	r3, r3, #16
 8011dc8:	2010      	movs	r0, #16
 8011dca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011dce:	bf04      	itt	eq
 8011dd0:	0a1b      	lsreq	r3, r3, #8
 8011dd2:	3008      	addeq	r0, #8
 8011dd4:	071a      	lsls	r2, r3, #28
 8011dd6:	bf04      	itt	eq
 8011dd8:	091b      	lsreq	r3, r3, #4
 8011dda:	3004      	addeq	r0, #4
 8011ddc:	079a      	lsls	r2, r3, #30
 8011dde:	bf04      	itt	eq
 8011de0:	089b      	lsreq	r3, r3, #2
 8011de2:	3002      	addeq	r0, #2
 8011de4:	07da      	lsls	r2, r3, #31
 8011de6:	d402      	bmi.n	8011dee <__lo0bits+0x4e>
 8011de8:	085b      	lsrs	r3, r3, #1
 8011dea:	d006      	beq.n	8011dfa <__lo0bits+0x5a>
 8011dec:	3001      	adds	r0, #1
 8011dee:	600b      	str	r3, [r1, #0]
 8011df0:	4770      	bx	lr
 8011df2:	4610      	mov	r0, r2
 8011df4:	e7e9      	b.n	8011dca <__lo0bits+0x2a>
 8011df6:	2000      	movs	r0, #0
 8011df8:	4770      	bx	lr
 8011dfa:	2020      	movs	r0, #32
 8011dfc:	4770      	bx	lr

08011dfe <__i2b>:
 8011dfe:	b510      	push	{r4, lr}
 8011e00:	460c      	mov	r4, r1
 8011e02:	2101      	movs	r1, #1
 8011e04:	f7ff ff27 	bl	8011c56 <_Balloc>
 8011e08:	2201      	movs	r2, #1
 8011e0a:	6144      	str	r4, [r0, #20]
 8011e0c:	6102      	str	r2, [r0, #16]
 8011e0e:	bd10      	pop	{r4, pc}

08011e10 <__multiply>:
 8011e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e14:	4614      	mov	r4, r2
 8011e16:	690a      	ldr	r2, [r1, #16]
 8011e18:	6923      	ldr	r3, [r4, #16]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	bfb8      	it	lt
 8011e1e:	460b      	movlt	r3, r1
 8011e20:	4688      	mov	r8, r1
 8011e22:	bfbc      	itt	lt
 8011e24:	46a0      	movlt	r8, r4
 8011e26:	461c      	movlt	r4, r3
 8011e28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011e2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011e30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011e38:	eb07 0609 	add.w	r6, r7, r9
 8011e3c:	42b3      	cmp	r3, r6
 8011e3e:	bfb8      	it	lt
 8011e40:	3101      	addlt	r1, #1
 8011e42:	f7ff ff08 	bl	8011c56 <_Balloc>
 8011e46:	f100 0514 	add.w	r5, r0, #20
 8011e4a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011e4e:	462b      	mov	r3, r5
 8011e50:	2200      	movs	r2, #0
 8011e52:	4573      	cmp	r3, lr
 8011e54:	d316      	bcc.n	8011e84 <__multiply+0x74>
 8011e56:	f104 0214 	add.w	r2, r4, #20
 8011e5a:	f108 0114 	add.w	r1, r8, #20
 8011e5e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011e62:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011e66:	9300      	str	r3, [sp, #0]
 8011e68:	9b00      	ldr	r3, [sp, #0]
 8011e6a:	9201      	str	r2, [sp, #4]
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d80c      	bhi.n	8011e8a <__multiply+0x7a>
 8011e70:	2e00      	cmp	r6, #0
 8011e72:	dd03      	ble.n	8011e7c <__multiply+0x6c>
 8011e74:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d05d      	beq.n	8011f38 <__multiply+0x128>
 8011e7c:	6106      	str	r6, [r0, #16]
 8011e7e:	b003      	add	sp, #12
 8011e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e84:	f843 2b04 	str.w	r2, [r3], #4
 8011e88:	e7e3      	b.n	8011e52 <__multiply+0x42>
 8011e8a:	f8b2 b000 	ldrh.w	fp, [r2]
 8011e8e:	f1bb 0f00 	cmp.w	fp, #0
 8011e92:	d023      	beq.n	8011edc <__multiply+0xcc>
 8011e94:	4689      	mov	r9, r1
 8011e96:	46ac      	mov	ip, r5
 8011e98:	f04f 0800 	mov.w	r8, #0
 8011e9c:	f859 4b04 	ldr.w	r4, [r9], #4
 8011ea0:	f8dc a000 	ldr.w	sl, [ip]
 8011ea4:	b2a3      	uxth	r3, r4
 8011ea6:	fa1f fa8a 	uxth.w	sl, sl
 8011eaa:	fb0b a303 	mla	r3, fp, r3, sl
 8011eae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011eb2:	f8dc 4000 	ldr.w	r4, [ip]
 8011eb6:	4443      	add	r3, r8
 8011eb8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011ebc:	fb0b 840a 	mla	r4, fp, sl, r8
 8011ec0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011ec4:	46e2      	mov	sl, ip
 8011ec6:	b29b      	uxth	r3, r3
 8011ec8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011ecc:	454f      	cmp	r7, r9
 8011ece:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011ed2:	f84a 3b04 	str.w	r3, [sl], #4
 8011ed6:	d82b      	bhi.n	8011f30 <__multiply+0x120>
 8011ed8:	f8cc 8004 	str.w	r8, [ip, #4]
 8011edc:	9b01      	ldr	r3, [sp, #4]
 8011ede:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011ee2:	3204      	adds	r2, #4
 8011ee4:	f1ba 0f00 	cmp.w	sl, #0
 8011ee8:	d020      	beq.n	8011f2c <__multiply+0x11c>
 8011eea:	682b      	ldr	r3, [r5, #0]
 8011eec:	4689      	mov	r9, r1
 8011eee:	46a8      	mov	r8, r5
 8011ef0:	f04f 0b00 	mov.w	fp, #0
 8011ef4:	f8b9 c000 	ldrh.w	ip, [r9]
 8011ef8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011efc:	fb0a 440c 	mla	r4, sl, ip, r4
 8011f00:	445c      	add	r4, fp
 8011f02:	46c4      	mov	ip, r8
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011f0a:	f84c 3b04 	str.w	r3, [ip], #4
 8011f0e:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f12:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011f16:	0c1b      	lsrs	r3, r3, #16
 8011f18:	fb0a b303 	mla	r3, sl, r3, fp
 8011f1c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011f20:	454f      	cmp	r7, r9
 8011f22:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011f26:	d805      	bhi.n	8011f34 <__multiply+0x124>
 8011f28:	f8c8 3004 	str.w	r3, [r8, #4]
 8011f2c:	3504      	adds	r5, #4
 8011f2e:	e79b      	b.n	8011e68 <__multiply+0x58>
 8011f30:	46d4      	mov	ip, sl
 8011f32:	e7b3      	b.n	8011e9c <__multiply+0x8c>
 8011f34:	46e0      	mov	r8, ip
 8011f36:	e7dd      	b.n	8011ef4 <__multiply+0xe4>
 8011f38:	3e01      	subs	r6, #1
 8011f3a:	e799      	b.n	8011e70 <__multiply+0x60>

08011f3c <__pow5mult>:
 8011f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f40:	4615      	mov	r5, r2
 8011f42:	f012 0203 	ands.w	r2, r2, #3
 8011f46:	4606      	mov	r6, r0
 8011f48:	460f      	mov	r7, r1
 8011f4a:	d007      	beq.n	8011f5c <__pow5mult+0x20>
 8011f4c:	3a01      	subs	r2, #1
 8011f4e:	4c21      	ldr	r4, [pc, #132]	; (8011fd4 <__pow5mult+0x98>)
 8011f50:	2300      	movs	r3, #0
 8011f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011f56:	f7ff fec9 	bl	8011cec <__multadd>
 8011f5a:	4607      	mov	r7, r0
 8011f5c:	10ad      	asrs	r5, r5, #2
 8011f5e:	d035      	beq.n	8011fcc <__pow5mult+0x90>
 8011f60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011f62:	b93c      	cbnz	r4, 8011f74 <__pow5mult+0x38>
 8011f64:	2010      	movs	r0, #16
 8011f66:	f7ff fe63 	bl	8011c30 <malloc>
 8011f6a:	6270      	str	r0, [r6, #36]	; 0x24
 8011f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f70:	6004      	str	r4, [r0, #0]
 8011f72:	60c4      	str	r4, [r0, #12]
 8011f74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011f78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011f7c:	b94c      	cbnz	r4, 8011f92 <__pow5mult+0x56>
 8011f7e:	f240 2171 	movw	r1, #625	; 0x271
 8011f82:	4630      	mov	r0, r6
 8011f84:	f7ff ff3b 	bl	8011dfe <__i2b>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011f8e:	4604      	mov	r4, r0
 8011f90:	6003      	str	r3, [r0, #0]
 8011f92:	f04f 0800 	mov.w	r8, #0
 8011f96:	07eb      	lsls	r3, r5, #31
 8011f98:	d50a      	bpl.n	8011fb0 <__pow5mult+0x74>
 8011f9a:	4639      	mov	r1, r7
 8011f9c:	4622      	mov	r2, r4
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f7ff ff36 	bl	8011e10 <__multiply>
 8011fa4:	4639      	mov	r1, r7
 8011fa6:	4681      	mov	r9, r0
 8011fa8:	4630      	mov	r0, r6
 8011faa:	f7ff fe88 	bl	8011cbe <_Bfree>
 8011fae:	464f      	mov	r7, r9
 8011fb0:	106d      	asrs	r5, r5, #1
 8011fb2:	d00b      	beq.n	8011fcc <__pow5mult+0x90>
 8011fb4:	6820      	ldr	r0, [r4, #0]
 8011fb6:	b938      	cbnz	r0, 8011fc8 <__pow5mult+0x8c>
 8011fb8:	4622      	mov	r2, r4
 8011fba:	4621      	mov	r1, r4
 8011fbc:	4630      	mov	r0, r6
 8011fbe:	f7ff ff27 	bl	8011e10 <__multiply>
 8011fc2:	6020      	str	r0, [r4, #0]
 8011fc4:	f8c0 8000 	str.w	r8, [r0]
 8011fc8:	4604      	mov	r4, r0
 8011fca:	e7e4      	b.n	8011f96 <__pow5mult+0x5a>
 8011fcc:	4638      	mov	r0, r7
 8011fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fd2:	bf00      	nop
 8011fd4:	08015388 	.word	0x08015388

08011fd8 <__lshift>:
 8011fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fdc:	460c      	mov	r4, r1
 8011fde:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011fe2:	6923      	ldr	r3, [r4, #16]
 8011fe4:	6849      	ldr	r1, [r1, #4]
 8011fe6:	eb0a 0903 	add.w	r9, sl, r3
 8011fea:	68a3      	ldr	r3, [r4, #8]
 8011fec:	4607      	mov	r7, r0
 8011fee:	4616      	mov	r6, r2
 8011ff0:	f109 0501 	add.w	r5, r9, #1
 8011ff4:	42ab      	cmp	r3, r5
 8011ff6:	db32      	blt.n	801205e <__lshift+0x86>
 8011ff8:	4638      	mov	r0, r7
 8011ffa:	f7ff fe2c 	bl	8011c56 <_Balloc>
 8011ffe:	2300      	movs	r3, #0
 8012000:	4680      	mov	r8, r0
 8012002:	f100 0114 	add.w	r1, r0, #20
 8012006:	461a      	mov	r2, r3
 8012008:	4553      	cmp	r3, sl
 801200a:	db2b      	blt.n	8012064 <__lshift+0x8c>
 801200c:	6920      	ldr	r0, [r4, #16]
 801200e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012012:	f104 0314 	add.w	r3, r4, #20
 8012016:	f016 021f 	ands.w	r2, r6, #31
 801201a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801201e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012022:	d025      	beq.n	8012070 <__lshift+0x98>
 8012024:	f1c2 0e20 	rsb	lr, r2, #32
 8012028:	2000      	movs	r0, #0
 801202a:	681e      	ldr	r6, [r3, #0]
 801202c:	468a      	mov	sl, r1
 801202e:	4096      	lsls	r6, r2
 8012030:	4330      	orrs	r0, r6
 8012032:	f84a 0b04 	str.w	r0, [sl], #4
 8012036:	f853 0b04 	ldr.w	r0, [r3], #4
 801203a:	459c      	cmp	ip, r3
 801203c:	fa20 f00e 	lsr.w	r0, r0, lr
 8012040:	d814      	bhi.n	801206c <__lshift+0x94>
 8012042:	6048      	str	r0, [r1, #4]
 8012044:	b108      	cbz	r0, 801204a <__lshift+0x72>
 8012046:	f109 0502 	add.w	r5, r9, #2
 801204a:	3d01      	subs	r5, #1
 801204c:	4638      	mov	r0, r7
 801204e:	f8c8 5010 	str.w	r5, [r8, #16]
 8012052:	4621      	mov	r1, r4
 8012054:	f7ff fe33 	bl	8011cbe <_Bfree>
 8012058:	4640      	mov	r0, r8
 801205a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801205e:	3101      	adds	r1, #1
 8012060:	005b      	lsls	r3, r3, #1
 8012062:	e7c7      	b.n	8011ff4 <__lshift+0x1c>
 8012064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012068:	3301      	adds	r3, #1
 801206a:	e7cd      	b.n	8012008 <__lshift+0x30>
 801206c:	4651      	mov	r1, sl
 801206e:	e7dc      	b.n	801202a <__lshift+0x52>
 8012070:	3904      	subs	r1, #4
 8012072:	f853 2b04 	ldr.w	r2, [r3], #4
 8012076:	f841 2f04 	str.w	r2, [r1, #4]!
 801207a:	459c      	cmp	ip, r3
 801207c:	d8f9      	bhi.n	8012072 <__lshift+0x9a>
 801207e:	e7e4      	b.n	801204a <__lshift+0x72>

08012080 <__mcmp>:
 8012080:	6903      	ldr	r3, [r0, #16]
 8012082:	690a      	ldr	r2, [r1, #16]
 8012084:	1a9b      	subs	r3, r3, r2
 8012086:	b530      	push	{r4, r5, lr}
 8012088:	d10c      	bne.n	80120a4 <__mcmp+0x24>
 801208a:	0092      	lsls	r2, r2, #2
 801208c:	3014      	adds	r0, #20
 801208e:	3114      	adds	r1, #20
 8012090:	1884      	adds	r4, r0, r2
 8012092:	4411      	add	r1, r2
 8012094:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012098:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801209c:	4295      	cmp	r5, r2
 801209e:	d003      	beq.n	80120a8 <__mcmp+0x28>
 80120a0:	d305      	bcc.n	80120ae <__mcmp+0x2e>
 80120a2:	2301      	movs	r3, #1
 80120a4:	4618      	mov	r0, r3
 80120a6:	bd30      	pop	{r4, r5, pc}
 80120a8:	42a0      	cmp	r0, r4
 80120aa:	d3f3      	bcc.n	8012094 <__mcmp+0x14>
 80120ac:	e7fa      	b.n	80120a4 <__mcmp+0x24>
 80120ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120b2:	e7f7      	b.n	80120a4 <__mcmp+0x24>

080120b4 <__mdiff>:
 80120b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120b8:	460d      	mov	r5, r1
 80120ba:	4607      	mov	r7, r0
 80120bc:	4611      	mov	r1, r2
 80120be:	4628      	mov	r0, r5
 80120c0:	4614      	mov	r4, r2
 80120c2:	f7ff ffdd 	bl	8012080 <__mcmp>
 80120c6:	1e06      	subs	r6, r0, #0
 80120c8:	d108      	bne.n	80120dc <__mdiff+0x28>
 80120ca:	4631      	mov	r1, r6
 80120cc:	4638      	mov	r0, r7
 80120ce:	f7ff fdc2 	bl	8011c56 <_Balloc>
 80120d2:	2301      	movs	r3, #1
 80120d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80120d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120dc:	bfa4      	itt	ge
 80120de:	4623      	movge	r3, r4
 80120e0:	462c      	movge	r4, r5
 80120e2:	4638      	mov	r0, r7
 80120e4:	6861      	ldr	r1, [r4, #4]
 80120e6:	bfa6      	itte	ge
 80120e8:	461d      	movge	r5, r3
 80120ea:	2600      	movge	r6, #0
 80120ec:	2601      	movlt	r6, #1
 80120ee:	f7ff fdb2 	bl	8011c56 <_Balloc>
 80120f2:	692b      	ldr	r3, [r5, #16]
 80120f4:	60c6      	str	r6, [r0, #12]
 80120f6:	6926      	ldr	r6, [r4, #16]
 80120f8:	f105 0914 	add.w	r9, r5, #20
 80120fc:	f104 0214 	add.w	r2, r4, #20
 8012100:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012104:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012108:	f100 0514 	add.w	r5, r0, #20
 801210c:	f04f 0e00 	mov.w	lr, #0
 8012110:	f852 ab04 	ldr.w	sl, [r2], #4
 8012114:	f859 4b04 	ldr.w	r4, [r9], #4
 8012118:	fa1e f18a 	uxtah	r1, lr, sl
 801211c:	b2a3      	uxth	r3, r4
 801211e:	1ac9      	subs	r1, r1, r3
 8012120:	0c23      	lsrs	r3, r4, #16
 8012122:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012126:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801212a:	b289      	uxth	r1, r1
 801212c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012130:	45c8      	cmp	r8, r9
 8012132:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012136:	4694      	mov	ip, r2
 8012138:	f845 3b04 	str.w	r3, [r5], #4
 801213c:	d8e8      	bhi.n	8012110 <__mdiff+0x5c>
 801213e:	45bc      	cmp	ip, r7
 8012140:	d304      	bcc.n	801214c <__mdiff+0x98>
 8012142:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012146:	b183      	cbz	r3, 801216a <__mdiff+0xb6>
 8012148:	6106      	str	r6, [r0, #16]
 801214a:	e7c5      	b.n	80120d8 <__mdiff+0x24>
 801214c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012150:	fa1e f381 	uxtah	r3, lr, r1
 8012154:	141a      	asrs	r2, r3, #16
 8012156:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801215a:	b29b      	uxth	r3, r3
 801215c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012160:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012164:	f845 3b04 	str.w	r3, [r5], #4
 8012168:	e7e9      	b.n	801213e <__mdiff+0x8a>
 801216a:	3e01      	subs	r6, #1
 801216c:	e7e9      	b.n	8012142 <__mdiff+0x8e>

0801216e <__d2b>:
 801216e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012172:	460e      	mov	r6, r1
 8012174:	2101      	movs	r1, #1
 8012176:	ec59 8b10 	vmov	r8, r9, d0
 801217a:	4615      	mov	r5, r2
 801217c:	f7ff fd6b 	bl	8011c56 <_Balloc>
 8012180:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012184:	4607      	mov	r7, r0
 8012186:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801218a:	bb34      	cbnz	r4, 80121da <__d2b+0x6c>
 801218c:	9301      	str	r3, [sp, #4]
 801218e:	f1b8 0300 	subs.w	r3, r8, #0
 8012192:	d027      	beq.n	80121e4 <__d2b+0x76>
 8012194:	a802      	add	r0, sp, #8
 8012196:	f840 3d08 	str.w	r3, [r0, #-8]!
 801219a:	f7ff fe01 	bl	8011da0 <__lo0bits>
 801219e:	9900      	ldr	r1, [sp, #0]
 80121a0:	b1f0      	cbz	r0, 80121e0 <__d2b+0x72>
 80121a2:	9a01      	ldr	r2, [sp, #4]
 80121a4:	f1c0 0320 	rsb	r3, r0, #32
 80121a8:	fa02 f303 	lsl.w	r3, r2, r3
 80121ac:	430b      	orrs	r3, r1
 80121ae:	40c2      	lsrs	r2, r0
 80121b0:	617b      	str	r3, [r7, #20]
 80121b2:	9201      	str	r2, [sp, #4]
 80121b4:	9b01      	ldr	r3, [sp, #4]
 80121b6:	61bb      	str	r3, [r7, #24]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	bf14      	ite	ne
 80121bc:	2102      	movne	r1, #2
 80121be:	2101      	moveq	r1, #1
 80121c0:	6139      	str	r1, [r7, #16]
 80121c2:	b1c4      	cbz	r4, 80121f6 <__d2b+0x88>
 80121c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80121c8:	4404      	add	r4, r0
 80121ca:	6034      	str	r4, [r6, #0]
 80121cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80121d0:	6028      	str	r0, [r5, #0]
 80121d2:	4638      	mov	r0, r7
 80121d4:	b003      	add	sp, #12
 80121d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80121de:	e7d5      	b.n	801218c <__d2b+0x1e>
 80121e0:	6179      	str	r1, [r7, #20]
 80121e2:	e7e7      	b.n	80121b4 <__d2b+0x46>
 80121e4:	a801      	add	r0, sp, #4
 80121e6:	f7ff fddb 	bl	8011da0 <__lo0bits>
 80121ea:	9b01      	ldr	r3, [sp, #4]
 80121ec:	617b      	str	r3, [r7, #20]
 80121ee:	2101      	movs	r1, #1
 80121f0:	6139      	str	r1, [r7, #16]
 80121f2:	3020      	adds	r0, #32
 80121f4:	e7e5      	b.n	80121c2 <__d2b+0x54>
 80121f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80121fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80121fe:	6030      	str	r0, [r6, #0]
 8012200:	6918      	ldr	r0, [r3, #16]
 8012202:	f7ff fdae 	bl	8011d62 <__hi0bits>
 8012206:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801220a:	e7e1      	b.n	80121d0 <__d2b+0x62>

0801220c <_calloc_r>:
 801220c:	b538      	push	{r3, r4, r5, lr}
 801220e:	fb02 f401 	mul.w	r4, r2, r1
 8012212:	4621      	mov	r1, r4
 8012214:	f000 f856 	bl	80122c4 <_malloc_r>
 8012218:	4605      	mov	r5, r0
 801221a:	b118      	cbz	r0, 8012224 <_calloc_r+0x18>
 801221c:	4622      	mov	r2, r4
 801221e:	2100      	movs	r1, #0
 8012220:	f7fd fef0 	bl	8010004 <memset>
 8012224:	4628      	mov	r0, r5
 8012226:	bd38      	pop	{r3, r4, r5, pc}

08012228 <_free_r>:
 8012228:	b538      	push	{r3, r4, r5, lr}
 801222a:	4605      	mov	r5, r0
 801222c:	2900      	cmp	r1, #0
 801222e:	d045      	beq.n	80122bc <_free_r+0x94>
 8012230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012234:	1f0c      	subs	r4, r1, #4
 8012236:	2b00      	cmp	r3, #0
 8012238:	bfb8      	it	lt
 801223a:	18e4      	addlt	r4, r4, r3
 801223c:	f000 fc03 	bl	8012a46 <__malloc_lock>
 8012240:	4a1f      	ldr	r2, [pc, #124]	; (80122c0 <_free_r+0x98>)
 8012242:	6813      	ldr	r3, [r2, #0]
 8012244:	4610      	mov	r0, r2
 8012246:	b933      	cbnz	r3, 8012256 <_free_r+0x2e>
 8012248:	6063      	str	r3, [r4, #4]
 801224a:	6014      	str	r4, [r2, #0]
 801224c:	4628      	mov	r0, r5
 801224e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012252:	f000 bbf9 	b.w	8012a48 <__malloc_unlock>
 8012256:	42a3      	cmp	r3, r4
 8012258:	d90c      	bls.n	8012274 <_free_r+0x4c>
 801225a:	6821      	ldr	r1, [r4, #0]
 801225c:	1862      	adds	r2, r4, r1
 801225e:	4293      	cmp	r3, r2
 8012260:	bf04      	itt	eq
 8012262:	681a      	ldreq	r2, [r3, #0]
 8012264:	685b      	ldreq	r3, [r3, #4]
 8012266:	6063      	str	r3, [r4, #4]
 8012268:	bf04      	itt	eq
 801226a:	1852      	addeq	r2, r2, r1
 801226c:	6022      	streq	r2, [r4, #0]
 801226e:	6004      	str	r4, [r0, #0]
 8012270:	e7ec      	b.n	801224c <_free_r+0x24>
 8012272:	4613      	mov	r3, r2
 8012274:	685a      	ldr	r2, [r3, #4]
 8012276:	b10a      	cbz	r2, 801227c <_free_r+0x54>
 8012278:	42a2      	cmp	r2, r4
 801227a:	d9fa      	bls.n	8012272 <_free_r+0x4a>
 801227c:	6819      	ldr	r1, [r3, #0]
 801227e:	1858      	adds	r0, r3, r1
 8012280:	42a0      	cmp	r0, r4
 8012282:	d10b      	bne.n	801229c <_free_r+0x74>
 8012284:	6820      	ldr	r0, [r4, #0]
 8012286:	4401      	add	r1, r0
 8012288:	1858      	adds	r0, r3, r1
 801228a:	4282      	cmp	r2, r0
 801228c:	6019      	str	r1, [r3, #0]
 801228e:	d1dd      	bne.n	801224c <_free_r+0x24>
 8012290:	6810      	ldr	r0, [r2, #0]
 8012292:	6852      	ldr	r2, [r2, #4]
 8012294:	605a      	str	r2, [r3, #4]
 8012296:	4401      	add	r1, r0
 8012298:	6019      	str	r1, [r3, #0]
 801229a:	e7d7      	b.n	801224c <_free_r+0x24>
 801229c:	d902      	bls.n	80122a4 <_free_r+0x7c>
 801229e:	230c      	movs	r3, #12
 80122a0:	602b      	str	r3, [r5, #0]
 80122a2:	e7d3      	b.n	801224c <_free_r+0x24>
 80122a4:	6820      	ldr	r0, [r4, #0]
 80122a6:	1821      	adds	r1, r4, r0
 80122a8:	428a      	cmp	r2, r1
 80122aa:	bf04      	itt	eq
 80122ac:	6811      	ldreq	r1, [r2, #0]
 80122ae:	6852      	ldreq	r2, [r2, #4]
 80122b0:	6062      	str	r2, [r4, #4]
 80122b2:	bf04      	itt	eq
 80122b4:	1809      	addeq	r1, r1, r0
 80122b6:	6021      	streq	r1, [r4, #0]
 80122b8:	605c      	str	r4, [r3, #4]
 80122ba:	e7c7      	b.n	801224c <_free_r+0x24>
 80122bc:	bd38      	pop	{r3, r4, r5, pc}
 80122be:	bf00      	nop
 80122c0:	20002084 	.word	0x20002084

080122c4 <_malloc_r>:
 80122c4:	b570      	push	{r4, r5, r6, lr}
 80122c6:	1ccd      	adds	r5, r1, #3
 80122c8:	f025 0503 	bic.w	r5, r5, #3
 80122cc:	3508      	adds	r5, #8
 80122ce:	2d0c      	cmp	r5, #12
 80122d0:	bf38      	it	cc
 80122d2:	250c      	movcc	r5, #12
 80122d4:	2d00      	cmp	r5, #0
 80122d6:	4606      	mov	r6, r0
 80122d8:	db01      	blt.n	80122de <_malloc_r+0x1a>
 80122da:	42a9      	cmp	r1, r5
 80122dc:	d903      	bls.n	80122e6 <_malloc_r+0x22>
 80122de:	230c      	movs	r3, #12
 80122e0:	6033      	str	r3, [r6, #0]
 80122e2:	2000      	movs	r0, #0
 80122e4:	bd70      	pop	{r4, r5, r6, pc}
 80122e6:	f000 fbae 	bl	8012a46 <__malloc_lock>
 80122ea:	4a21      	ldr	r2, [pc, #132]	; (8012370 <_malloc_r+0xac>)
 80122ec:	6814      	ldr	r4, [r2, #0]
 80122ee:	4621      	mov	r1, r4
 80122f0:	b991      	cbnz	r1, 8012318 <_malloc_r+0x54>
 80122f2:	4c20      	ldr	r4, [pc, #128]	; (8012374 <_malloc_r+0xb0>)
 80122f4:	6823      	ldr	r3, [r4, #0]
 80122f6:	b91b      	cbnz	r3, 8012300 <_malloc_r+0x3c>
 80122f8:	4630      	mov	r0, r6
 80122fa:	f000 facf 	bl	801289c <_sbrk_r>
 80122fe:	6020      	str	r0, [r4, #0]
 8012300:	4629      	mov	r1, r5
 8012302:	4630      	mov	r0, r6
 8012304:	f000 faca 	bl	801289c <_sbrk_r>
 8012308:	1c43      	adds	r3, r0, #1
 801230a:	d124      	bne.n	8012356 <_malloc_r+0x92>
 801230c:	230c      	movs	r3, #12
 801230e:	6033      	str	r3, [r6, #0]
 8012310:	4630      	mov	r0, r6
 8012312:	f000 fb99 	bl	8012a48 <__malloc_unlock>
 8012316:	e7e4      	b.n	80122e2 <_malloc_r+0x1e>
 8012318:	680b      	ldr	r3, [r1, #0]
 801231a:	1b5b      	subs	r3, r3, r5
 801231c:	d418      	bmi.n	8012350 <_malloc_r+0x8c>
 801231e:	2b0b      	cmp	r3, #11
 8012320:	d90f      	bls.n	8012342 <_malloc_r+0x7e>
 8012322:	600b      	str	r3, [r1, #0]
 8012324:	50cd      	str	r5, [r1, r3]
 8012326:	18cc      	adds	r4, r1, r3
 8012328:	4630      	mov	r0, r6
 801232a:	f000 fb8d 	bl	8012a48 <__malloc_unlock>
 801232e:	f104 000b 	add.w	r0, r4, #11
 8012332:	1d23      	adds	r3, r4, #4
 8012334:	f020 0007 	bic.w	r0, r0, #7
 8012338:	1ac3      	subs	r3, r0, r3
 801233a:	d0d3      	beq.n	80122e4 <_malloc_r+0x20>
 801233c:	425a      	negs	r2, r3
 801233e:	50e2      	str	r2, [r4, r3]
 8012340:	e7d0      	b.n	80122e4 <_malloc_r+0x20>
 8012342:	428c      	cmp	r4, r1
 8012344:	684b      	ldr	r3, [r1, #4]
 8012346:	bf16      	itet	ne
 8012348:	6063      	strne	r3, [r4, #4]
 801234a:	6013      	streq	r3, [r2, #0]
 801234c:	460c      	movne	r4, r1
 801234e:	e7eb      	b.n	8012328 <_malloc_r+0x64>
 8012350:	460c      	mov	r4, r1
 8012352:	6849      	ldr	r1, [r1, #4]
 8012354:	e7cc      	b.n	80122f0 <_malloc_r+0x2c>
 8012356:	1cc4      	adds	r4, r0, #3
 8012358:	f024 0403 	bic.w	r4, r4, #3
 801235c:	42a0      	cmp	r0, r4
 801235e:	d005      	beq.n	801236c <_malloc_r+0xa8>
 8012360:	1a21      	subs	r1, r4, r0
 8012362:	4630      	mov	r0, r6
 8012364:	f000 fa9a 	bl	801289c <_sbrk_r>
 8012368:	3001      	adds	r0, #1
 801236a:	d0cf      	beq.n	801230c <_malloc_r+0x48>
 801236c:	6025      	str	r5, [r4, #0]
 801236e:	e7db      	b.n	8012328 <_malloc_r+0x64>
 8012370:	20002084 	.word	0x20002084
 8012374:	20002088 	.word	0x20002088

08012378 <__ssputs_r>:
 8012378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801237c:	688e      	ldr	r6, [r1, #8]
 801237e:	429e      	cmp	r6, r3
 8012380:	4682      	mov	sl, r0
 8012382:	460c      	mov	r4, r1
 8012384:	4690      	mov	r8, r2
 8012386:	4699      	mov	r9, r3
 8012388:	d837      	bhi.n	80123fa <__ssputs_r+0x82>
 801238a:	898a      	ldrh	r2, [r1, #12]
 801238c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012390:	d031      	beq.n	80123f6 <__ssputs_r+0x7e>
 8012392:	6825      	ldr	r5, [r4, #0]
 8012394:	6909      	ldr	r1, [r1, #16]
 8012396:	1a6f      	subs	r7, r5, r1
 8012398:	6965      	ldr	r5, [r4, #20]
 801239a:	2302      	movs	r3, #2
 801239c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80123a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80123a4:	f109 0301 	add.w	r3, r9, #1
 80123a8:	443b      	add	r3, r7
 80123aa:	429d      	cmp	r5, r3
 80123ac:	bf38      	it	cc
 80123ae:	461d      	movcc	r5, r3
 80123b0:	0553      	lsls	r3, r2, #21
 80123b2:	d530      	bpl.n	8012416 <__ssputs_r+0x9e>
 80123b4:	4629      	mov	r1, r5
 80123b6:	f7ff ff85 	bl	80122c4 <_malloc_r>
 80123ba:	4606      	mov	r6, r0
 80123bc:	b950      	cbnz	r0, 80123d4 <__ssputs_r+0x5c>
 80123be:	230c      	movs	r3, #12
 80123c0:	f8ca 3000 	str.w	r3, [sl]
 80123c4:	89a3      	ldrh	r3, [r4, #12]
 80123c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123ca:	81a3      	strh	r3, [r4, #12]
 80123cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123d4:	463a      	mov	r2, r7
 80123d6:	6921      	ldr	r1, [r4, #16]
 80123d8:	f7ff fc32 	bl	8011c40 <memcpy>
 80123dc:	89a3      	ldrh	r3, [r4, #12]
 80123de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80123e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123e6:	81a3      	strh	r3, [r4, #12]
 80123e8:	6126      	str	r6, [r4, #16]
 80123ea:	6165      	str	r5, [r4, #20]
 80123ec:	443e      	add	r6, r7
 80123ee:	1bed      	subs	r5, r5, r7
 80123f0:	6026      	str	r6, [r4, #0]
 80123f2:	60a5      	str	r5, [r4, #8]
 80123f4:	464e      	mov	r6, r9
 80123f6:	454e      	cmp	r6, r9
 80123f8:	d900      	bls.n	80123fc <__ssputs_r+0x84>
 80123fa:	464e      	mov	r6, r9
 80123fc:	4632      	mov	r2, r6
 80123fe:	4641      	mov	r1, r8
 8012400:	6820      	ldr	r0, [r4, #0]
 8012402:	f000 fb07 	bl	8012a14 <memmove>
 8012406:	68a3      	ldr	r3, [r4, #8]
 8012408:	1b9b      	subs	r3, r3, r6
 801240a:	60a3      	str	r3, [r4, #8]
 801240c:	6823      	ldr	r3, [r4, #0]
 801240e:	441e      	add	r6, r3
 8012410:	6026      	str	r6, [r4, #0]
 8012412:	2000      	movs	r0, #0
 8012414:	e7dc      	b.n	80123d0 <__ssputs_r+0x58>
 8012416:	462a      	mov	r2, r5
 8012418:	f000 fb17 	bl	8012a4a <_realloc_r>
 801241c:	4606      	mov	r6, r0
 801241e:	2800      	cmp	r0, #0
 8012420:	d1e2      	bne.n	80123e8 <__ssputs_r+0x70>
 8012422:	6921      	ldr	r1, [r4, #16]
 8012424:	4650      	mov	r0, sl
 8012426:	f7ff feff 	bl	8012228 <_free_r>
 801242a:	e7c8      	b.n	80123be <__ssputs_r+0x46>

0801242c <_svfiprintf_r>:
 801242c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012430:	461d      	mov	r5, r3
 8012432:	898b      	ldrh	r3, [r1, #12]
 8012434:	061f      	lsls	r7, r3, #24
 8012436:	b09d      	sub	sp, #116	; 0x74
 8012438:	4680      	mov	r8, r0
 801243a:	460c      	mov	r4, r1
 801243c:	4616      	mov	r6, r2
 801243e:	d50f      	bpl.n	8012460 <_svfiprintf_r+0x34>
 8012440:	690b      	ldr	r3, [r1, #16]
 8012442:	b96b      	cbnz	r3, 8012460 <_svfiprintf_r+0x34>
 8012444:	2140      	movs	r1, #64	; 0x40
 8012446:	f7ff ff3d 	bl	80122c4 <_malloc_r>
 801244a:	6020      	str	r0, [r4, #0]
 801244c:	6120      	str	r0, [r4, #16]
 801244e:	b928      	cbnz	r0, 801245c <_svfiprintf_r+0x30>
 8012450:	230c      	movs	r3, #12
 8012452:	f8c8 3000 	str.w	r3, [r8]
 8012456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801245a:	e0c8      	b.n	80125ee <_svfiprintf_r+0x1c2>
 801245c:	2340      	movs	r3, #64	; 0x40
 801245e:	6163      	str	r3, [r4, #20]
 8012460:	2300      	movs	r3, #0
 8012462:	9309      	str	r3, [sp, #36]	; 0x24
 8012464:	2320      	movs	r3, #32
 8012466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801246a:	2330      	movs	r3, #48	; 0x30
 801246c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012470:	9503      	str	r5, [sp, #12]
 8012472:	f04f 0b01 	mov.w	fp, #1
 8012476:	4637      	mov	r7, r6
 8012478:	463d      	mov	r5, r7
 801247a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801247e:	b10b      	cbz	r3, 8012484 <_svfiprintf_r+0x58>
 8012480:	2b25      	cmp	r3, #37	; 0x25
 8012482:	d13e      	bne.n	8012502 <_svfiprintf_r+0xd6>
 8012484:	ebb7 0a06 	subs.w	sl, r7, r6
 8012488:	d00b      	beq.n	80124a2 <_svfiprintf_r+0x76>
 801248a:	4653      	mov	r3, sl
 801248c:	4632      	mov	r2, r6
 801248e:	4621      	mov	r1, r4
 8012490:	4640      	mov	r0, r8
 8012492:	f7ff ff71 	bl	8012378 <__ssputs_r>
 8012496:	3001      	adds	r0, #1
 8012498:	f000 80a4 	beq.w	80125e4 <_svfiprintf_r+0x1b8>
 801249c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801249e:	4453      	add	r3, sl
 80124a0:	9309      	str	r3, [sp, #36]	; 0x24
 80124a2:	783b      	ldrb	r3, [r7, #0]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f000 809d 	beq.w	80125e4 <_svfiprintf_r+0x1b8>
 80124aa:	2300      	movs	r3, #0
 80124ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124b4:	9304      	str	r3, [sp, #16]
 80124b6:	9307      	str	r3, [sp, #28]
 80124b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124bc:	931a      	str	r3, [sp, #104]	; 0x68
 80124be:	462f      	mov	r7, r5
 80124c0:	2205      	movs	r2, #5
 80124c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80124c6:	4850      	ldr	r0, [pc, #320]	; (8012608 <_svfiprintf_r+0x1dc>)
 80124c8:	f7ed feb2 	bl	8000230 <memchr>
 80124cc:	9b04      	ldr	r3, [sp, #16]
 80124ce:	b9d0      	cbnz	r0, 8012506 <_svfiprintf_r+0xda>
 80124d0:	06d9      	lsls	r1, r3, #27
 80124d2:	bf44      	itt	mi
 80124d4:	2220      	movmi	r2, #32
 80124d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80124da:	071a      	lsls	r2, r3, #28
 80124dc:	bf44      	itt	mi
 80124de:	222b      	movmi	r2, #43	; 0x2b
 80124e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80124e4:	782a      	ldrb	r2, [r5, #0]
 80124e6:	2a2a      	cmp	r2, #42	; 0x2a
 80124e8:	d015      	beq.n	8012516 <_svfiprintf_r+0xea>
 80124ea:	9a07      	ldr	r2, [sp, #28]
 80124ec:	462f      	mov	r7, r5
 80124ee:	2000      	movs	r0, #0
 80124f0:	250a      	movs	r5, #10
 80124f2:	4639      	mov	r1, r7
 80124f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124f8:	3b30      	subs	r3, #48	; 0x30
 80124fa:	2b09      	cmp	r3, #9
 80124fc:	d94d      	bls.n	801259a <_svfiprintf_r+0x16e>
 80124fe:	b1b8      	cbz	r0, 8012530 <_svfiprintf_r+0x104>
 8012500:	e00f      	b.n	8012522 <_svfiprintf_r+0xf6>
 8012502:	462f      	mov	r7, r5
 8012504:	e7b8      	b.n	8012478 <_svfiprintf_r+0x4c>
 8012506:	4a40      	ldr	r2, [pc, #256]	; (8012608 <_svfiprintf_r+0x1dc>)
 8012508:	1a80      	subs	r0, r0, r2
 801250a:	fa0b f000 	lsl.w	r0, fp, r0
 801250e:	4318      	orrs	r0, r3
 8012510:	9004      	str	r0, [sp, #16]
 8012512:	463d      	mov	r5, r7
 8012514:	e7d3      	b.n	80124be <_svfiprintf_r+0x92>
 8012516:	9a03      	ldr	r2, [sp, #12]
 8012518:	1d11      	adds	r1, r2, #4
 801251a:	6812      	ldr	r2, [r2, #0]
 801251c:	9103      	str	r1, [sp, #12]
 801251e:	2a00      	cmp	r2, #0
 8012520:	db01      	blt.n	8012526 <_svfiprintf_r+0xfa>
 8012522:	9207      	str	r2, [sp, #28]
 8012524:	e004      	b.n	8012530 <_svfiprintf_r+0x104>
 8012526:	4252      	negs	r2, r2
 8012528:	f043 0302 	orr.w	r3, r3, #2
 801252c:	9207      	str	r2, [sp, #28]
 801252e:	9304      	str	r3, [sp, #16]
 8012530:	783b      	ldrb	r3, [r7, #0]
 8012532:	2b2e      	cmp	r3, #46	; 0x2e
 8012534:	d10c      	bne.n	8012550 <_svfiprintf_r+0x124>
 8012536:	787b      	ldrb	r3, [r7, #1]
 8012538:	2b2a      	cmp	r3, #42	; 0x2a
 801253a:	d133      	bne.n	80125a4 <_svfiprintf_r+0x178>
 801253c:	9b03      	ldr	r3, [sp, #12]
 801253e:	1d1a      	adds	r2, r3, #4
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	9203      	str	r2, [sp, #12]
 8012544:	2b00      	cmp	r3, #0
 8012546:	bfb8      	it	lt
 8012548:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801254c:	3702      	adds	r7, #2
 801254e:	9305      	str	r3, [sp, #20]
 8012550:	4d2e      	ldr	r5, [pc, #184]	; (801260c <_svfiprintf_r+0x1e0>)
 8012552:	7839      	ldrb	r1, [r7, #0]
 8012554:	2203      	movs	r2, #3
 8012556:	4628      	mov	r0, r5
 8012558:	f7ed fe6a 	bl	8000230 <memchr>
 801255c:	b138      	cbz	r0, 801256e <_svfiprintf_r+0x142>
 801255e:	2340      	movs	r3, #64	; 0x40
 8012560:	1b40      	subs	r0, r0, r5
 8012562:	fa03 f000 	lsl.w	r0, r3, r0
 8012566:	9b04      	ldr	r3, [sp, #16]
 8012568:	4303      	orrs	r3, r0
 801256a:	3701      	adds	r7, #1
 801256c:	9304      	str	r3, [sp, #16]
 801256e:	7839      	ldrb	r1, [r7, #0]
 8012570:	4827      	ldr	r0, [pc, #156]	; (8012610 <_svfiprintf_r+0x1e4>)
 8012572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012576:	2206      	movs	r2, #6
 8012578:	1c7e      	adds	r6, r7, #1
 801257a:	f7ed fe59 	bl	8000230 <memchr>
 801257e:	2800      	cmp	r0, #0
 8012580:	d038      	beq.n	80125f4 <_svfiprintf_r+0x1c8>
 8012582:	4b24      	ldr	r3, [pc, #144]	; (8012614 <_svfiprintf_r+0x1e8>)
 8012584:	bb13      	cbnz	r3, 80125cc <_svfiprintf_r+0x1a0>
 8012586:	9b03      	ldr	r3, [sp, #12]
 8012588:	3307      	adds	r3, #7
 801258a:	f023 0307 	bic.w	r3, r3, #7
 801258e:	3308      	adds	r3, #8
 8012590:	9303      	str	r3, [sp, #12]
 8012592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012594:	444b      	add	r3, r9
 8012596:	9309      	str	r3, [sp, #36]	; 0x24
 8012598:	e76d      	b.n	8012476 <_svfiprintf_r+0x4a>
 801259a:	fb05 3202 	mla	r2, r5, r2, r3
 801259e:	2001      	movs	r0, #1
 80125a0:	460f      	mov	r7, r1
 80125a2:	e7a6      	b.n	80124f2 <_svfiprintf_r+0xc6>
 80125a4:	2300      	movs	r3, #0
 80125a6:	3701      	adds	r7, #1
 80125a8:	9305      	str	r3, [sp, #20]
 80125aa:	4619      	mov	r1, r3
 80125ac:	250a      	movs	r5, #10
 80125ae:	4638      	mov	r0, r7
 80125b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125b4:	3a30      	subs	r2, #48	; 0x30
 80125b6:	2a09      	cmp	r2, #9
 80125b8:	d903      	bls.n	80125c2 <_svfiprintf_r+0x196>
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d0c8      	beq.n	8012550 <_svfiprintf_r+0x124>
 80125be:	9105      	str	r1, [sp, #20]
 80125c0:	e7c6      	b.n	8012550 <_svfiprintf_r+0x124>
 80125c2:	fb05 2101 	mla	r1, r5, r1, r2
 80125c6:	2301      	movs	r3, #1
 80125c8:	4607      	mov	r7, r0
 80125ca:	e7f0      	b.n	80125ae <_svfiprintf_r+0x182>
 80125cc:	ab03      	add	r3, sp, #12
 80125ce:	9300      	str	r3, [sp, #0]
 80125d0:	4622      	mov	r2, r4
 80125d2:	4b11      	ldr	r3, [pc, #68]	; (8012618 <_svfiprintf_r+0x1ec>)
 80125d4:	a904      	add	r1, sp, #16
 80125d6:	4640      	mov	r0, r8
 80125d8:	f7fd fdb0 	bl	801013c <_printf_float>
 80125dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80125e0:	4681      	mov	r9, r0
 80125e2:	d1d6      	bne.n	8012592 <_svfiprintf_r+0x166>
 80125e4:	89a3      	ldrh	r3, [r4, #12]
 80125e6:	065b      	lsls	r3, r3, #25
 80125e8:	f53f af35 	bmi.w	8012456 <_svfiprintf_r+0x2a>
 80125ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125ee:	b01d      	add	sp, #116	; 0x74
 80125f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f4:	ab03      	add	r3, sp, #12
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	4622      	mov	r2, r4
 80125fa:	4b07      	ldr	r3, [pc, #28]	; (8012618 <_svfiprintf_r+0x1ec>)
 80125fc:	a904      	add	r1, sp, #16
 80125fe:	4640      	mov	r0, r8
 8012600:	f7fe f852 	bl	80106a8 <_printf_i>
 8012604:	e7ea      	b.n	80125dc <_svfiprintf_r+0x1b0>
 8012606:	bf00      	nop
 8012608:	08015394 	.word	0x08015394
 801260c:	0801539a 	.word	0x0801539a
 8012610:	0801539e 	.word	0x0801539e
 8012614:	0801013d 	.word	0x0801013d
 8012618:	08012379 	.word	0x08012379

0801261c <__sfputc_r>:
 801261c:	6893      	ldr	r3, [r2, #8]
 801261e:	3b01      	subs	r3, #1
 8012620:	2b00      	cmp	r3, #0
 8012622:	b410      	push	{r4}
 8012624:	6093      	str	r3, [r2, #8]
 8012626:	da08      	bge.n	801263a <__sfputc_r+0x1e>
 8012628:	6994      	ldr	r4, [r2, #24]
 801262a:	42a3      	cmp	r3, r4
 801262c:	db01      	blt.n	8012632 <__sfputc_r+0x16>
 801262e:	290a      	cmp	r1, #10
 8012630:	d103      	bne.n	801263a <__sfputc_r+0x1e>
 8012632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012636:	f7fe ba09 	b.w	8010a4c <__swbuf_r>
 801263a:	6813      	ldr	r3, [r2, #0]
 801263c:	1c58      	adds	r0, r3, #1
 801263e:	6010      	str	r0, [r2, #0]
 8012640:	7019      	strb	r1, [r3, #0]
 8012642:	4608      	mov	r0, r1
 8012644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012648:	4770      	bx	lr

0801264a <__sfputs_r>:
 801264a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264c:	4606      	mov	r6, r0
 801264e:	460f      	mov	r7, r1
 8012650:	4614      	mov	r4, r2
 8012652:	18d5      	adds	r5, r2, r3
 8012654:	42ac      	cmp	r4, r5
 8012656:	d101      	bne.n	801265c <__sfputs_r+0x12>
 8012658:	2000      	movs	r0, #0
 801265a:	e007      	b.n	801266c <__sfputs_r+0x22>
 801265c:	463a      	mov	r2, r7
 801265e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012662:	4630      	mov	r0, r6
 8012664:	f7ff ffda 	bl	801261c <__sfputc_r>
 8012668:	1c43      	adds	r3, r0, #1
 801266a:	d1f3      	bne.n	8012654 <__sfputs_r+0xa>
 801266c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012670 <_vfiprintf_r>:
 8012670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	460c      	mov	r4, r1
 8012676:	b09d      	sub	sp, #116	; 0x74
 8012678:	4617      	mov	r7, r2
 801267a:	461d      	mov	r5, r3
 801267c:	4606      	mov	r6, r0
 801267e:	b118      	cbz	r0, 8012688 <_vfiprintf_r+0x18>
 8012680:	6983      	ldr	r3, [r0, #24]
 8012682:	b90b      	cbnz	r3, 8012688 <_vfiprintf_r+0x18>
 8012684:	f7ff f9d8 	bl	8011a38 <__sinit>
 8012688:	4b7c      	ldr	r3, [pc, #496]	; (801287c <_vfiprintf_r+0x20c>)
 801268a:	429c      	cmp	r4, r3
 801268c:	d158      	bne.n	8012740 <_vfiprintf_r+0xd0>
 801268e:	6874      	ldr	r4, [r6, #4]
 8012690:	89a3      	ldrh	r3, [r4, #12]
 8012692:	0718      	lsls	r0, r3, #28
 8012694:	d55e      	bpl.n	8012754 <_vfiprintf_r+0xe4>
 8012696:	6923      	ldr	r3, [r4, #16]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d05b      	beq.n	8012754 <_vfiprintf_r+0xe4>
 801269c:	2300      	movs	r3, #0
 801269e:	9309      	str	r3, [sp, #36]	; 0x24
 80126a0:	2320      	movs	r3, #32
 80126a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126a6:	2330      	movs	r3, #48	; 0x30
 80126a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126ac:	9503      	str	r5, [sp, #12]
 80126ae:	f04f 0b01 	mov.w	fp, #1
 80126b2:	46b8      	mov	r8, r7
 80126b4:	4645      	mov	r5, r8
 80126b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80126ba:	b10b      	cbz	r3, 80126c0 <_vfiprintf_r+0x50>
 80126bc:	2b25      	cmp	r3, #37	; 0x25
 80126be:	d154      	bne.n	801276a <_vfiprintf_r+0xfa>
 80126c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80126c4:	d00b      	beq.n	80126de <_vfiprintf_r+0x6e>
 80126c6:	4653      	mov	r3, sl
 80126c8:	463a      	mov	r2, r7
 80126ca:	4621      	mov	r1, r4
 80126cc:	4630      	mov	r0, r6
 80126ce:	f7ff ffbc 	bl	801264a <__sfputs_r>
 80126d2:	3001      	adds	r0, #1
 80126d4:	f000 80c2 	beq.w	801285c <_vfiprintf_r+0x1ec>
 80126d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126da:	4453      	add	r3, sl
 80126dc:	9309      	str	r3, [sp, #36]	; 0x24
 80126de:	f898 3000 	ldrb.w	r3, [r8]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f000 80ba 	beq.w	801285c <_vfiprintf_r+0x1ec>
 80126e8:	2300      	movs	r3, #0
 80126ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126f2:	9304      	str	r3, [sp, #16]
 80126f4:	9307      	str	r3, [sp, #28]
 80126f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126fa:	931a      	str	r3, [sp, #104]	; 0x68
 80126fc:	46a8      	mov	r8, r5
 80126fe:	2205      	movs	r2, #5
 8012700:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012704:	485e      	ldr	r0, [pc, #376]	; (8012880 <_vfiprintf_r+0x210>)
 8012706:	f7ed fd93 	bl	8000230 <memchr>
 801270a:	9b04      	ldr	r3, [sp, #16]
 801270c:	bb78      	cbnz	r0, 801276e <_vfiprintf_r+0xfe>
 801270e:	06d9      	lsls	r1, r3, #27
 8012710:	bf44      	itt	mi
 8012712:	2220      	movmi	r2, #32
 8012714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012718:	071a      	lsls	r2, r3, #28
 801271a:	bf44      	itt	mi
 801271c:	222b      	movmi	r2, #43	; 0x2b
 801271e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012722:	782a      	ldrb	r2, [r5, #0]
 8012724:	2a2a      	cmp	r2, #42	; 0x2a
 8012726:	d02a      	beq.n	801277e <_vfiprintf_r+0x10e>
 8012728:	9a07      	ldr	r2, [sp, #28]
 801272a:	46a8      	mov	r8, r5
 801272c:	2000      	movs	r0, #0
 801272e:	250a      	movs	r5, #10
 8012730:	4641      	mov	r1, r8
 8012732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012736:	3b30      	subs	r3, #48	; 0x30
 8012738:	2b09      	cmp	r3, #9
 801273a:	d969      	bls.n	8012810 <_vfiprintf_r+0x1a0>
 801273c:	b360      	cbz	r0, 8012798 <_vfiprintf_r+0x128>
 801273e:	e024      	b.n	801278a <_vfiprintf_r+0x11a>
 8012740:	4b50      	ldr	r3, [pc, #320]	; (8012884 <_vfiprintf_r+0x214>)
 8012742:	429c      	cmp	r4, r3
 8012744:	d101      	bne.n	801274a <_vfiprintf_r+0xda>
 8012746:	68b4      	ldr	r4, [r6, #8]
 8012748:	e7a2      	b.n	8012690 <_vfiprintf_r+0x20>
 801274a:	4b4f      	ldr	r3, [pc, #316]	; (8012888 <_vfiprintf_r+0x218>)
 801274c:	429c      	cmp	r4, r3
 801274e:	bf08      	it	eq
 8012750:	68f4      	ldreq	r4, [r6, #12]
 8012752:	e79d      	b.n	8012690 <_vfiprintf_r+0x20>
 8012754:	4621      	mov	r1, r4
 8012756:	4630      	mov	r0, r6
 8012758:	f7fe f9ca 	bl	8010af0 <__swsetup_r>
 801275c:	2800      	cmp	r0, #0
 801275e:	d09d      	beq.n	801269c <_vfiprintf_r+0x2c>
 8012760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012764:	b01d      	add	sp, #116	; 0x74
 8012766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801276a:	46a8      	mov	r8, r5
 801276c:	e7a2      	b.n	80126b4 <_vfiprintf_r+0x44>
 801276e:	4a44      	ldr	r2, [pc, #272]	; (8012880 <_vfiprintf_r+0x210>)
 8012770:	1a80      	subs	r0, r0, r2
 8012772:	fa0b f000 	lsl.w	r0, fp, r0
 8012776:	4318      	orrs	r0, r3
 8012778:	9004      	str	r0, [sp, #16]
 801277a:	4645      	mov	r5, r8
 801277c:	e7be      	b.n	80126fc <_vfiprintf_r+0x8c>
 801277e:	9a03      	ldr	r2, [sp, #12]
 8012780:	1d11      	adds	r1, r2, #4
 8012782:	6812      	ldr	r2, [r2, #0]
 8012784:	9103      	str	r1, [sp, #12]
 8012786:	2a00      	cmp	r2, #0
 8012788:	db01      	blt.n	801278e <_vfiprintf_r+0x11e>
 801278a:	9207      	str	r2, [sp, #28]
 801278c:	e004      	b.n	8012798 <_vfiprintf_r+0x128>
 801278e:	4252      	negs	r2, r2
 8012790:	f043 0302 	orr.w	r3, r3, #2
 8012794:	9207      	str	r2, [sp, #28]
 8012796:	9304      	str	r3, [sp, #16]
 8012798:	f898 3000 	ldrb.w	r3, [r8]
 801279c:	2b2e      	cmp	r3, #46	; 0x2e
 801279e:	d10e      	bne.n	80127be <_vfiprintf_r+0x14e>
 80127a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80127a4:	2b2a      	cmp	r3, #42	; 0x2a
 80127a6:	d138      	bne.n	801281a <_vfiprintf_r+0x1aa>
 80127a8:	9b03      	ldr	r3, [sp, #12]
 80127aa:	1d1a      	adds	r2, r3, #4
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	9203      	str	r2, [sp, #12]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	bfb8      	it	lt
 80127b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80127b8:	f108 0802 	add.w	r8, r8, #2
 80127bc:	9305      	str	r3, [sp, #20]
 80127be:	4d33      	ldr	r5, [pc, #204]	; (801288c <_vfiprintf_r+0x21c>)
 80127c0:	f898 1000 	ldrb.w	r1, [r8]
 80127c4:	2203      	movs	r2, #3
 80127c6:	4628      	mov	r0, r5
 80127c8:	f7ed fd32 	bl	8000230 <memchr>
 80127cc:	b140      	cbz	r0, 80127e0 <_vfiprintf_r+0x170>
 80127ce:	2340      	movs	r3, #64	; 0x40
 80127d0:	1b40      	subs	r0, r0, r5
 80127d2:	fa03 f000 	lsl.w	r0, r3, r0
 80127d6:	9b04      	ldr	r3, [sp, #16]
 80127d8:	4303      	orrs	r3, r0
 80127da:	f108 0801 	add.w	r8, r8, #1
 80127de:	9304      	str	r3, [sp, #16]
 80127e0:	f898 1000 	ldrb.w	r1, [r8]
 80127e4:	482a      	ldr	r0, [pc, #168]	; (8012890 <_vfiprintf_r+0x220>)
 80127e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127ea:	2206      	movs	r2, #6
 80127ec:	f108 0701 	add.w	r7, r8, #1
 80127f0:	f7ed fd1e 	bl	8000230 <memchr>
 80127f4:	2800      	cmp	r0, #0
 80127f6:	d037      	beq.n	8012868 <_vfiprintf_r+0x1f8>
 80127f8:	4b26      	ldr	r3, [pc, #152]	; (8012894 <_vfiprintf_r+0x224>)
 80127fa:	bb1b      	cbnz	r3, 8012844 <_vfiprintf_r+0x1d4>
 80127fc:	9b03      	ldr	r3, [sp, #12]
 80127fe:	3307      	adds	r3, #7
 8012800:	f023 0307 	bic.w	r3, r3, #7
 8012804:	3308      	adds	r3, #8
 8012806:	9303      	str	r3, [sp, #12]
 8012808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801280a:	444b      	add	r3, r9
 801280c:	9309      	str	r3, [sp, #36]	; 0x24
 801280e:	e750      	b.n	80126b2 <_vfiprintf_r+0x42>
 8012810:	fb05 3202 	mla	r2, r5, r2, r3
 8012814:	2001      	movs	r0, #1
 8012816:	4688      	mov	r8, r1
 8012818:	e78a      	b.n	8012730 <_vfiprintf_r+0xc0>
 801281a:	2300      	movs	r3, #0
 801281c:	f108 0801 	add.w	r8, r8, #1
 8012820:	9305      	str	r3, [sp, #20]
 8012822:	4619      	mov	r1, r3
 8012824:	250a      	movs	r5, #10
 8012826:	4640      	mov	r0, r8
 8012828:	f810 2b01 	ldrb.w	r2, [r0], #1
 801282c:	3a30      	subs	r2, #48	; 0x30
 801282e:	2a09      	cmp	r2, #9
 8012830:	d903      	bls.n	801283a <_vfiprintf_r+0x1ca>
 8012832:	2b00      	cmp	r3, #0
 8012834:	d0c3      	beq.n	80127be <_vfiprintf_r+0x14e>
 8012836:	9105      	str	r1, [sp, #20]
 8012838:	e7c1      	b.n	80127be <_vfiprintf_r+0x14e>
 801283a:	fb05 2101 	mla	r1, r5, r1, r2
 801283e:	2301      	movs	r3, #1
 8012840:	4680      	mov	r8, r0
 8012842:	e7f0      	b.n	8012826 <_vfiprintf_r+0x1b6>
 8012844:	ab03      	add	r3, sp, #12
 8012846:	9300      	str	r3, [sp, #0]
 8012848:	4622      	mov	r2, r4
 801284a:	4b13      	ldr	r3, [pc, #76]	; (8012898 <_vfiprintf_r+0x228>)
 801284c:	a904      	add	r1, sp, #16
 801284e:	4630      	mov	r0, r6
 8012850:	f7fd fc74 	bl	801013c <_printf_float>
 8012854:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012858:	4681      	mov	r9, r0
 801285a:	d1d5      	bne.n	8012808 <_vfiprintf_r+0x198>
 801285c:	89a3      	ldrh	r3, [r4, #12]
 801285e:	065b      	lsls	r3, r3, #25
 8012860:	f53f af7e 	bmi.w	8012760 <_vfiprintf_r+0xf0>
 8012864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012866:	e77d      	b.n	8012764 <_vfiprintf_r+0xf4>
 8012868:	ab03      	add	r3, sp, #12
 801286a:	9300      	str	r3, [sp, #0]
 801286c:	4622      	mov	r2, r4
 801286e:	4b0a      	ldr	r3, [pc, #40]	; (8012898 <_vfiprintf_r+0x228>)
 8012870:	a904      	add	r1, sp, #16
 8012872:	4630      	mov	r0, r6
 8012874:	f7fd ff18 	bl	80106a8 <_printf_i>
 8012878:	e7ec      	b.n	8012854 <_vfiprintf_r+0x1e4>
 801287a:	bf00      	nop
 801287c:	08015254 	.word	0x08015254
 8012880:	08015394 	.word	0x08015394
 8012884:	08015274 	.word	0x08015274
 8012888:	08015234 	.word	0x08015234
 801288c:	0801539a 	.word	0x0801539a
 8012890:	0801539e 	.word	0x0801539e
 8012894:	0801013d 	.word	0x0801013d
 8012898:	0801264b 	.word	0x0801264b

0801289c <_sbrk_r>:
 801289c:	b538      	push	{r3, r4, r5, lr}
 801289e:	4c06      	ldr	r4, [pc, #24]	; (80128b8 <_sbrk_r+0x1c>)
 80128a0:	2300      	movs	r3, #0
 80128a2:	4605      	mov	r5, r0
 80128a4:	4608      	mov	r0, r1
 80128a6:	6023      	str	r3, [r4, #0]
 80128a8:	f7f5 fa9c 	bl	8007de4 <_sbrk>
 80128ac:	1c43      	adds	r3, r0, #1
 80128ae:	d102      	bne.n	80128b6 <_sbrk_r+0x1a>
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	b103      	cbz	r3, 80128b6 <_sbrk_r+0x1a>
 80128b4:	602b      	str	r3, [r5, #0]
 80128b6:	bd38      	pop	{r3, r4, r5, pc}
 80128b8:	20002b10 	.word	0x20002b10

080128bc <__sread>:
 80128bc:	b510      	push	{r4, lr}
 80128be:	460c      	mov	r4, r1
 80128c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128c4:	f000 f8e8 	bl	8012a98 <_read_r>
 80128c8:	2800      	cmp	r0, #0
 80128ca:	bfab      	itete	ge
 80128cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80128ce:	89a3      	ldrhlt	r3, [r4, #12]
 80128d0:	181b      	addge	r3, r3, r0
 80128d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80128d6:	bfac      	ite	ge
 80128d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80128da:	81a3      	strhlt	r3, [r4, #12]
 80128dc:	bd10      	pop	{r4, pc}

080128de <__swrite>:
 80128de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e2:	461f      	mov	r7, r3
 80128e4:	898b      	ldrh	r3, [r1, #12]
 80128e6:	05db      	lsls	r3, r3, #23
 80128e8:	4605      	mov	r5, r0
 80128ea:	460c      	mov	r4, r1
 80128ec:	4616      	mov	r6, r2
 80128ee:	d505      	bpl.n	80128fc <__swrite+0x1e>
 80128f0:	2302      	movs	r3, #2
 80128f2:	2200      	movs	r2, #0
 80128f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128f8:	f000 f868 	bl	80129cc <_lseek_r>
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012906:	81a3      	strh	r3, [r4, #12]
 8012908:	4632      	mov	r2, r6
 801290a:	463b      	mov	r3, r7
 801290c:	4628      	mov	r0, r5
 801290e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012912:	f000 b817 	b.w	8012944 <_write_r>

08012916 <__sseek>:
 8012916:	b510      	push	{r4, lr}
 8012918:	460c      	mov	r4, r1
 801291a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801291e:	f000 f855 	bl	80129cc <_lseek_r>
 8012922:	1c43      	adds	r3, r0, #1
 8012924:	89a3      	ldrh	r3, [r4, #12]
 8012926:	bf15      	itete	ne
 8012928:	6560      	strne	r0, [r4, #84]	; 0x54
 801292a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801292e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012932:	81a3      	strheq	r3, [r4, #12]
 8012934:	bf18      	it	ne
 8012936:	81a3      	strhne	r3, [r4, #12]
 8012938:	bd10      	pop	{r4, pc}

0801293a <__sclose>:
 801293a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801293e:	f000 b813 	b.w	8012968 <_close_r>
	...

08012944 <_write_r>:
 8012944:	b538      	push	{r3, r4, r5, lr}
 8012946:	4c07      	ldr	r4, [pc, #28]	; (8012964 <_write_r+0x20>)
 8012948:	4605      	mov	r5, r0
 801294a:	4608      	mov	r0, r1
 801294c:	4611      	mov	r1, r2
 801294e:	2200      	movs	r2, #0
 8012950:	6022      	str	r2, [r4, #0]
 8012952:	461a      	mov	r2, r3
 8012954:	f7f4 fef3 	bl	800773e <_write>
 8012958:	1c43      	adds	r3, r0, #1
 801295a:	d102      	bne.n	8012962 <_write_r+0x1e>
 801295c:	6823      	ldr	r3, [r4, #0]
 801295e:	b103      	cbz	r3, 8012962 <_write_r+0x1e>
 8012960:	602b      	str	r3, [r5, #0]
 8012962:	bd38      	pop	{r3, r4, r5, pc}
 8012964:	20002b10 	.word	0x20002b10

08012968 <_close_r>:
 8012968:	b538      	push	{r3, r4, r5, lr}
 801296a:	4c06      	ldr	r4, [pc, #24]	; (8012984 <_close_r+0x1c>)
 801296c:	2300      	movs	r3, #0
 801296e:	4605      	mov	r5, r0
 8012970:	4608      	mov	r0, r1
 8012972:	6023      	str	r3, [r4, #0]
 8012974:	f7f5 fa01 	bl	8007d7a <_close>
 8012978:	1c43      	adds	r3, r0, #1
 801297a:	d102      	bne.n	8012982 <_close_r+0x1a>
 801297c:	6823      	ldr	r3, [r4, #0]
 801297e:	b103      	cbz	r3, 8012982 <_close_r+0x1a>
 8012980:	602b      	str	r3, [r5, #0]
 8012982:	bd38      	pop	{r3, r4, r5, pc}
 8012984:	20002b10 	.word	0x20002b10

08012988 <_fstat_r>:
 8012988:	b538      	push	{r3, r4, r5, lr}
 801298a:	4c07      	ldr	r4, [pc, #28]	; (80129a8 <_fstat_r+0x20>)
 801298c:	2300      	movs	r3, #0
 801298e:	4605      	mov	r5, r0
 8012990:	4608      	mov	r0, r1
 8012992:	4611      	mov	r1, r2
 8012994:	6023      	str	r3, [r4, #0]
 8012996:	f7f5 f9fc 	bl	8007d92 <_fstat>
 801299a:	1c43      	adds	r3, r0, #1
 801299c:	d102      	bne.n	80129a4 <_fstat_r+0x1c>
 801299e:	6823      	ldr	r3, [r4, #0]
 80129a0:	b103      	cbz	r3, 80129a4 <_fstat_r+0x1c>
 80129a2:	602b      	str	r3, [r5, #0]
 80129a4:	bd38      	pop	{r3, r4, r5, pc}
 80129a6:	bf00      	nop
 80129a8:	20002b10 	.word	0x20002b10

080129ac <_isatty_r>:
 80129ac:	b538      	push	{r3, r4, r5, lr}
 80129ae:	4c06      	ldr	r4, [pc, #24]	; (80129c8 <_isatty_r+0x1c>)
 80129b0:	2300      	movs	r3, #0
 80129b2:	4605      	mov	r5, r0
 80129b4:	4608      	mov	r0, r1
 80129b6:	6023      	str	r3, [r4, #0]
 80129b8:	f7f5 f9fb 	bl	8007db2 <_isatty>
 80129bc:	1c43      	adds	r3, r0, #1
 80129be:	d102      	bne.n	80129c6 <_isatty_r+0x1a>
 80129c0:	6823      	ldr	r3, [r4, #0]
 80129c2:	b103      	cbz	r3, 80129c6 <_isatty_r+0x1a>
 80129c4:	602b      	str	r3, [r5, #0]
 80129c6:	bd38      	pop	{r3, r4, r5, pc}
 80129c8:	20002b10 	.word	0x20002b10

080129cc <_lseek_r>:
 80129cc:	b538      	push	{r3, r4, r5, lr}
 80129ce:	4c07      	ldr	r4, [pc, #28]	; (80129ec <_lseek_r+0x20>)
 80129d0:	4605      	mov	r5, r0
 80129d2:	4608      	mov	r0, r1
 80129d4:	4611      	mov	r1, r2
 80129d6:	2200      	movs	r2, #0
 80129d8:	6022      	str	r2, [r4, #0]
 80129da:	461a      	mov	r2, r3
 80129dc:	f7f5 f9f4 	bl	8007dc8 <_lseek>
 80129e0:	1c43      	adds	r3, r0, #1
 80129e2:	d102      	bne.n	80129ea <_lseek_r+0x1e>
 80129e4:	6823      	ldr	r3, [r4, #0]
 80129e6:	b103      	cbz	r3, 80129ea <_lseek_r+0x1e>
 80129e8:	602b      	str	r3, [r5, #0]
 80129ea:	bd38      	pop	{r3, r4, r5, pc}
 80129ec:	20002b10 	.word	0x20002b10

080129f0 <__ascii_mbtowc>:
 80129f0:	b082      	sub	sp, #8
 80129f2:	b901      	cbnz	r1, 80129f6 <__ascii_mbtowc+0x6>
 80129f4:	a901      	add	r1, sp, #4
 80129f6:	b142      	cbz	r2, 8012a0a <__ascii_mbtowc+0x1a>
 80129f8:	b14b      	cbz	r3, 8012a0e <__ascii_mbtowc+0x1e>
 80129fa:	7813      	ldrb	r3, [r2, #0]
 80129fc:	600b      	str	r3, [r1, #0]
 80129fe:	7812      	ldrb	r2, [r2, #0]
 8012a00:	1c10      	adds	r0, r2, #0
 8012a02:	bf18      	it	ne
 8012a04:	2001      	movne	r0, #1
 8012a06:	b002      	add	sp, #8
 8012a08:	4770      	bx	lr
 8012a0a:	4610      	mov	r0, r2
 8012a0c:	e7fb      	b.n	8012a06 <__ascii_mbtowc+0x16>
 8012a0e:	f06f 0001 	mvn.w	r0, #1
 8012a12:	e7f8      	b.n	8012a06 <__ascii_mbtowc+0x16>

08012a14 <memmove>:
 8012a14:	4288      	cmp	r0, r1
 8012a16:	b510      	push	{r4, lr}
 8012a18:	eb01 0302 	add.w	r3, r1, r2
 8012a1c:	d807      	bhi.n	8012a2e <memmove+0x1a>
 8012a1e:	1e42      	subs	r2, r0, #1
 8012a20:	4299      	cmp	r1, r3
 8012a22:	d00a      	beq.n	8012a3a <memmove+0x26>
 8012a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a28:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012a2c:	e7f8      	b.n	8012a20 <memmove+0xc>
 8012a2e:	4283      	cmp	r3, r0
 8012a30:	d9f5      	bls.n	8012a1e <memmove+0xa>
 8012a32:	1881      	adds	r1, r0, r2
 8012a34:	1ad2      	subs	r2, r2, r3
 8012a36:	42d3      	cmn	r3, r2
 8012a38:	d100      	bne.n	8012a3c <memmove+0x28>
 8012a3a:	bd10      	pop	{r4, pc}
 8012a3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a40:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012a44:	e7f7      	b.n	8012a36 <memmove+0x22>

08012a46 <__malloc_lock>:
 8012a46:	4770      	bx	lr

08012a48 <__malloc_unlock>:
 8012a48:	4770      	bx	lr

08012a4a <_realloc_r>:
 8012a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4c:	4607      	mov	r7, r0
 8012a4e:	4614      	mov	r4, r2
 8012a50:	460e      	mov	r6, r1
 8012a52:	b921      	cbnz	r1, 8012a5e <_realloc_r+0x14>
 8012a54:	4611      	mov	r1, r2
 8012a56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012a5a:	f7ff bc33 	b.w	80122c4 <_malloc_r>
 8012a5e:	b922      	cbnz	r2, 8012a6a <_realloc_r+0x20>
 8012a60:	f7ff fbe2 	bl	8012228 <_free_r>
 8012a64:	4625      	mov	r5, r4
 8012a66:	4628      	mov	r0, r5
 8012a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a6a:	f000 f834 	bl	8012ad6 <_malloc_usable_size_r>
 8012a6e:	42a0      	cmp	r0, r4
 8012a70:	d20f      	bcs.n	8012a92 <_realloc_r+0x48>
 8012a72:	4621      	mov	r1, r4
 8012a74:	4638      	mov	r0, r7
 8012a76:	f7ff fc25 	bl	80122c4 <_malloc_r>
 8012a7a:	4605      	mov	r5, r0
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	d0f2      	beq.n	8012a66 <_realloc_r+0x1c>
 8012a80:	4631      	mov	r1, r6
 8012a82:	4622      	mov	r2, r4
 8012a84:	f7ff f8dc 	bl	8011c40 <memcpy>
 8012a88:	4631      	mov	r1, r6
 8012a8a:	4638      	mov	r0, r7
 8012a8c:	f7ff fbcc 	bl	8012228 <_free_r>
 8012a90:	e7e9      	b.n	8012a66 <_realloc_r+0x1c>
 8012a92:	4635      	mov	r5, r6
 8012a94:	e7e7      	b.n	8012a66 <_realloc_r+0x1c>
	...

08012a98 <_read_r>:
 8012a98:	b538      	push	{r3, r4, r5, lr}
 8012a9a:	4c07      	ldr	r4, [pc, #28]	; (8012ab8 <_read_r+0x20>)
 8012a9c:	4605      	mov	r5, r0
 8012a9e:	4608      	mov	r0, r1
 8012aa0:	4611      	mov	r1, r2
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	6022      	str	r2, [r4, #0]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	f7f5 f94a 	bl	8007d40 <_read>
 8012aac:	1c43      	adds	r3, r0, #1
 8012aae:	d102      	bne.n	8012ab6 <_read_r+0x1e>
 8012ab0:	6823      	ldr	r3, [r4, #0]
 8012ab2:	b103      	cbz	r3, 8012ab6 <_read_r+0x1e>
 8012ab4:	602b      	str	r3, [r5, #0]
 8012ab6:	bd38      	pop	{r3, r4, r5, pc}
 8012ab8:	20002b10 	.word	0x20002b10

08012abc <__ascii_wctomb>:
 8012abc:	b149      	cbz	r1, 8012ad2 <__ascii_wctomb+0x16>
 8012abe:	2aff      	cmp	r2, #255	; 0xff
 8012ac0:	bf85      	ittet	hi
 8012ac2:	238a      	movhi	r3, #138	; 0x8a
 8012ac4:	6003      	strhi	r3, [r0, #0]
 8012ac6:	700a      	strbls	r2, [r1, #0]
 8012ac8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012acc:	bf98      	it	ls
 8012ace:	2001      	movls	r0, #1
 8012ad0:	4770      	bx	lr
 8012ad2:	4608      	mov	r0, r1
 8012ad4:	4770      	bx	lr

08012ad6 <_malloc_usable_size_r>:
 8012ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ada:	1f18      	subs	r0, r3, #4
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	bfbc      	itt	lt
 8012ae0:	580b      	ldrlt	r3, [r1, r0]
 8012ae2:	18c0      	addlt	r0, r0, r3
 8012ae4:	4770      	bx	lr
	...

08012ae8 <log10>:
 8012ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012aea:	ed2d 8b02 	vpush	{d8}
 8012aee:	b08b      	sub	sp, #44	; 0x2c
 8012af0:	ec55 4b10 	vmov	r4, r5, d0
 8012af4:	f000 f9e8 	bl	8012ec8 <__ieee754_log10>
 8012af8:	4b36      	ldr	r3, [pc, #216]	; (8012bd4 <log10+0xec>)
 8012afa:	eeb0 8a40 	vmov.f32	s16, s0
 8012afe:	eef0 8a60 	vmov.f32	s17, s1
 8012b02:	f993 6000 	ldrsb.w	r6, [r3]
 8012b06:	1c73      	adds	r3, r6, #1
 8012b08:	d05c      	beq.n	8012bc4 <log10+0xdc>
 8012b0a:	4622      	mov	r2, r4
 8012b0c:	462b      	mov	r3, r5
 8012b0e:	4620      	mov	r0, r4
 8012b10:	4629      	mov	r1, r5
 8012b12:	f7ee f833 	bl	8000b7c <__aeabi_dcmpun>
 8012b16:	4607      	mov	r7, r0
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d153      	bne.n	8012bc4 <log10+0xdc>
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	2300      	movs	r3, #0
 8012b20:	4620      	mov	r0, r4
 8012b22:	4629      	mov	r1, r5
 8012b24:	f7ee f80c 	bl	8000b40 <__aeabi_dcmple>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	d04b      	beq.n	8012bc4 <log10+0xdc>
 8012b2c:	4b2a      	ldr	r3, [pc, #168]	; (8012bd8 <log10+0xf0>)
 8012b2e:	9301      	str	r3, [sp, #4]
 8012b30:	9708      	str	r7, [sp, #32]
 8012b32:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012b36:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8012b3a:	b9a6      	cbnz	r6, 8012b66 <log10+0x7e>
 8012b3c:	4b27      	ldr	r3, [pc, #156]	; (8012bdc <log10+0xf4>)
 8012b3e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012b42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012b46:	4620      	mov	r0, r4
 8012b48:	2200      	movs	r2, #0
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	4629      	mov	r1, r5
 8012b4e:	f7ed ffe3 	bl	8000b18 <__aeabi_dcmpeq>
 8012b52:	bb40      	cbnz	r0, 8012ba6 <log10+0xbe>
 8012b54:	2301      	movs	r3, #1
 8012b56:	2e02      	cmp	r6, #2
 8012b58:	9300      	str	r3, [sp, #0]
 8012b5a:	d119      	bne.n	8012b90 <log10+0xa8>
 8012b5c:	f7fd fa28 	bl	800ffb0 <__errno>
 8012b60:	2321      	movs	r3, #33	; 0x21
 8012b62:	6003      	str	r3, [r0, #0]
 8012b64:	e019      	b.n	8012b9a <log10+0xb2>
 8012b66:	4b1e      	ldr	r3, [pc, #120]	; (8012be0 <log10+0xf8>)
 8012b68:	2200      	movs	r2, #0
 8012b6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012b6e:	4620      	mov	r0, r4
 8012b70:	2200      	movs	r2, #0
 8012b72:	2300      	movs	r3, #0
 8012b74:	4629      	mov	r1, r5
 8012b76:	f7ed ffcf 	bl	8000b18 <__aeabi_dcmpeq>
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	d0ea      	beq.n	8012b54 <log10+0x6c>
 8012b7e:	2302      	movs	r3, #2
 8012b80:	429e      	cmp	r6, r3
 8012b82:	9300      	str	r3, [sp, #0]
 8012b84:	d111      	bne.n	8012baa <log10+0xc2>
 8012b86:	f7fd fa13 	bl	800ffb0 <__errno>
 8012b8a:	2322      	movs	r3, #34	; 0x22
 8012b8c:	6003      	str	r3, [r0, #0]
 8012b8e:	e011      	b.n	8012bb4 <log10+0xcc>
 8012b90:	4668      	mov	r0, sp
 8012b92:	f000 fff4 	bl	8013b7e <matherr>
 8012b96:	2800      	cmp	r0, #0
 8012b98:	d0e0      	beq.n	8012b5c <log10+0x74>
 8012b9a:	4812      	ldr	r0, [pc, #72]	; (8012be4 <log10+0xfc>)
 8012b9c:	f000 fff4 	bl	8013b88 <nan>
 8012ba0:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012ba4:	e006      	b.n	8012bb4 <log10+0xcc>
 8012ba6:	2302      	movs	r3, #2
 8012ba8:	9300      	str	r3, [sp, #0]
 8012baa:	4668      	mov	r0, sp
 8012bac:	f000 ffe7 	bl	8013b7e <matherr>
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	d0e8      	beq.n	8012b86 <log10+0x9e>
 8012bb4:	9b08      	ldr	r3, [sp, #32]
 8012bb6:	b11b      	cbz	r3, 8012bc0 <log10+0xd8>
 8012bb8:	f7fd f9fa 	bl	800ffb0 <__errno>
 8012bbc:	9b08      	ldr	r3, [sp, #32]
 8012bbe:	6003      	str	r3, [r0, #0]
 8012bc0:	ed9d 8b06 	vldr	d8, [sp, #24]
 8012bc4:	eeb0 0a48 	vmov.f32	s0, s16
 8012bc8:	eef0 0a68 	vmov.f32	s1, s17
 8012bcc:	b00b      	add	sp, #44	; 0x2c
 8012bce:	ecbd 8b02 	vpop	{d8}
 8012bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bd4:	20001e04 	.word	0x20001e04
 8012bd8:	080154b0 	.word	0x080154b0
 8012bdc:	c7efffff 	.word	0xc7efffff
 8012be0:	fff00000 	.word	0xfff00000
 8012be4:	08015399 	.word	0x08015399

08012be8 <pow>:
 8012be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bec:	ed2d 8b04 	vpush	{d8-d9}
 8012bf0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8012ec4 <pow+0x2dc>
 8012bf4:	b08d      	sub	sp, #52	; 0x34
 8012bf6:	ec57 6b10 	vmov	r6, r7, d0
 8012bfa:	ec55 4b11 	vmov	r4, r5, d1
 8012bfe:	f000 f9ef 	bl	8012fe0 <__ieee754_pow>
 8012c02:	f999 3000 	ldrsb.w	r3, [r9]
 8012c06:	9300      	str	r3, [sp, #0]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	eeb0 8a40 	vmov.f32	s16, s0
 8012c0e:	eef0 8a60 	vmov.f32	s17, s1
 8012c12:	46c8      	mov	r8, r9
 8012c14:	d05f      	beq.n	8012cd6 <pow+0xee>
 8012c16:	4622      	mov	r2, r4
 8012c18:	462b      	mov	r3, r5
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	f7ed ffad 	bl	8000b7c <__aeabi_dcmpun>
 8012c22:	4683      	mov	fp, r0
 8012c24:	2800      	cmp	r0, #0
 8012c26:	d156      	bne.n	8012cd6 <pow+0xee>
 8012c28:	4632      	mov	r2, r6
 8012c2a:	463b      	mov	r3, r7
 8012c2c:	4630      	mov	r0, r6
 8012c2e:	4639      	mov	r1, r7
 8012c30:	f7ed ffa4 	bl	8000b7c <__aeabi_dcmpun>
 8012c34:	9001      	str	r0, [sp, #4]
 8012c36:	b1e8      	cbz	r0, 8012c74 <pow+0x8c>
 8012c38:	2200      	movs	r2, #0
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	4629      	mov	r1, r5
 8012c40:	f7ed ff6a 	bl	8000b18 <__aeabi_dcmpeq>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d046      	beq.n	8012cd6 <pow+0xee>
 8012c48:	2301      	movs	r3, #1
 8012c4a:	9302      	str	r3, [sp, #8]
 8012c4c:	4b96      	ldr	r3, [pc, #600]	; (8012ea8 <pow+0x2c0>)
 8012c4e:	9303      	str	r3, [sp, #12]
 8012c50:	4b96      	ldr	r3, [pc, #600]	; (8012eac <pow+0x2c4>)
 8012c52:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012c56:	2200      	movs	r2, #0
 8012c58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012c5c:	9b00      	ldr	r3, [sp, #0]
 8012c5e:	2b02      	cmp	r3, #2
 8012c60:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012c64:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012c68:	d033      	beq.n	8012cd2 <pow+0xea>
 8012c6a:	a802      	add	r0, sp, #8
 8012c6c:	f000 ff87 	bl	8013b7e <matherr>
 8012c70:	bb48      	cbnz	r0, 8012cc6 <pow+0xde>
 8012c72:	e05d      	b.n	8012d30 <pow+0x148>
 8012c74:	f04f 0a00 	mov.w	sl, #0
 8012c78:	f04f 0b00 	mov.w	fp, #0
 8012c7c:	4652      	mov	r2, sl
 8012c7e:	465b      	mov	r3, fp
 8012c80:	4630      	mov	r0, r6
 8012c82:	4639      	mov	r1, r7
 8012c84:	f7ed ff48 	bl	8000b18 <__aeabi_dcmpeq>
 8012c88:	ec4b ab19 	vmov	d9, sl, fp
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d054      	beq.n	8012d3a <pow+0x152>
 8012c90:	4652      	mov	r2, sl
 8012c92:	465b      	mov	r3, fp
 8012c94:	4620      	mov	r0, r4
 8012c96:	4629      	mov	r1, r5
 8012c98:	f7ed ff3e 	bl	8000b18 <__aeabi_dcmpeq>
 8012c9c:	4680      	mov	r8, r0
 8012c9e:	b318      	cbz	r0, 8012ce8 <pow+0x100>
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	9302      	str	r3, [sp, #8]
 8012ca4:	4b80      	ldr	r3, [pc, #512]	; (8012ea8 <pow+0x2c0>)
 8012ca6:	9303      	str	r3, [sp, #12]
 8012ca8:	9b01      	ldr	r3, [sp, #4]
 8012caa:	930a      	str	r3, [sp, #40]	; 0x28
 8012cac:	9b00      	ldr	r3, [sp, #0]
 8012cae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012cb2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012cb6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d0d5      	beq.n	8012c6a <pow+0x82>
 8012cbe:	4b7b      	ldr	r3, [pc, #492]	; (8012eac <pow+0x2c4>)
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cc8:	b11b      	cbz	r3, 8012cd2 <pow+0xea>
 8012cca:	f7fd f971 	bl	800ffb0 <__errno>
 8012cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cd0:	6003      	str	r3, [r0, #0]
 8012cd2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8012cd6:	eeb0 0a48 	vmov.f32	s0, s16
 8012cda:	eef0 0a68 	vmov.f32	s1, s17
 8012cde:	b00d      	add	sp, #52	; 0x34
 8012ce0:	ecbd 8b04 	vpop	{d8-d9}
 8012ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce8:	ec45 4b10 	vmov	d0, r4, r5
 8012cec:	f000 ff3f 	bl	8013b6e <finite>
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	d0f0      	beq.n	8012cd6 <pow+0xee>
 8012cf4:	4652      	mov	r2, sl
 8012cf6:	465b      	mov	r3, fp
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	4629      	mov	r1, r5
 8012cfc:	f7ed ff16 	bl	8000b2c <__aeabi_dcmplt>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d0e8      	beq.n	8012cd6 <pow+0xee>
 8012d04:	2301      	movs	r3, #1
 8012d06:	9302      	str	r3, [sp, #8]
 8012d08:	4b67      	ldr	r3, [pc, #412]	; (8012ea8 <pow+0x2c0>)
 8012d0a:	9303      	str	r3, [sp, #12]
 8012d0c:	f999 3000 	ldrsb.w	r3, [r9]
 8012d10:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8012d14:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012d18:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012d1c:	b913      	cbnz	r3, 8012d24 <pow+0x13c>
 8012d1e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012d22:	e7a2      	b.n	8012c6a <pow+0x82>
 8012d24:	4962      	ldr	r1, [pc, #392]	; (8012eb0 <pow+0x2c8>)
 8012d26:	2000      	movs	r0, #0
 8012d28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012d2c:	2b02      	cmp	r3, #2
 8012d2e:	d19c      	bne.n	8012c6a <pow+0x82>
 8012d30:	f7fd f93e 	bl	800ffb0 <__errno>
 8012d34:	2321      	movs	r3, #33	; 0x21
 8012d36:	6003      	str	r3, [r0, #0]
 8012d38:	e7c5      	b.n	8012cc6 <pow+0xde>
 8012d3a:	eeb0 0a48 	vmov.f32	s0, s16
 8012d3e:	eef0 0a68 	vmov.f32	s1, s17
 8012d42:	f000 ff14 	bl	8013b6e <finite>
 8012d46:	9000      	str	r0, [sp, #0]
 8012d48:	2800      	cmp	r0, #0
 8012d4a:	f040 8081 	bne.w	8012e50 <pow+0x268>
 8012d4e:	ec47 6b10 	vmov	d0, r6, r7
 8012d52:	f000 ff0c 	bl	8013b6e <finite>
 8012d56:	2800      	cmp	r0, #0
 8012d58:	d07a      	beq.n	8012e50 <pow+0x268>
 8012d5a:	ec45 4b10 	vmov	d0, r4, r5
 8012d5e:	f000 ff06 	bl	8013b6e <finite>
 8012d62:	2800      	cmp	r0, #0
 8012d64:	d074      	beq.n	8012e50 <pow+0x268>
 8012d66:	ec53 2b18 	vmov	r2, r3, d8
 8012d6a:	ee18 0a10 	vmov	r0, s16
 8012d6e:	4619      	mov	r1, r3
 8012d70:	f7ed ff04 	bl	8000b7c <__aeabi_dcmpun>
 8012d74:	f999 9000 	ldrsb.w	r9, [r9]
 8012d78:	4b4b      	ldr	r3, [pc, #300]	; (8012ea8 <pow+0x2c0>)
 8012d7a:	b1b0      	cbz	r0, 8012daa <pow+0x1c2>
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012d82:	9b00      	ldr	r3, [sp, #0]
 8012d84:	930a      	str	r3, [sp, #40]	; 0x28
 8012d86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012d8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012d8e:	f1b9 0f00 	cmp.w	r9, #0
 8012d92:	d0c4      	beq.n	8012d1e <pow+0x136>
 8012d94:	4652      	mov	r2, sl
 8012d96:	465b      	mov	r3, fp
 8012d98:	4650      	mov	r0, sl
 8012d9a:	4659      	mov	r1, fp
 8012d9c:	f7ed fd7e 	bl	800089c <__aeabi_ddiv>
 8012da0:	f1b9 0f02 	cmp.w	r9, #2
 8012da4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012da8:	e7c1      	b.n	8012d2e <pow+0x146>
 8012daa:	2203      	movs	r2, #3
 8012dac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012db0:	900a      	str	r0, [sp, #40]	; 0x28
 8012db2:	4629      	mov	r1, r5
 8012db4:	4620      	mov	r0, r4
 8012db6:	2200      	movs	r2, #0
 8012db8:	4b3e      	ldr	r3, [pc, #248]	; (8012eb4 <pow+0x2cc>)
 8012dba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012dbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012dc2:	f7ed fc41 	bl	8000648 <__aeabi_dmul>
 8012dc6:	4604      	mov	r4, r0
 8012dc8:	460d      	mov	r5, r1
 8012dca:	f1b9 0f00 	cmp.w	r9, #0
 8012dce:	d124      	bne.n	8012e1a <pow+0x232>
 8012dd0:	4b39      	ldr	r3, [pc, #228]	; (8012eb8 <pow+0x2d0>)
 8012dd2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012dd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012dda:	4630      	mov	r0, r6
 8012ddc:	4652      	mov	r2, sl
 8012dde:	465b      	mov	r3, fp
 8012de0:	4639      	mov	r1, r7
 8012de2:	f7ed fea3 	bl	8000b2c <__aeabi_dcmplt>
 8012de6:	2800      	cmp	r0, #0
 8012de8:	d056      	beq.n	8012e98 <pow+0x2b0>
 8012dea:	ec45 4b10 	vmov	d0, r4, r5
 8012dee:	f000 fed3 	bl	8013b98 <rint>
 8012df2:	4622      	mov	r2, r4
 8012df4:	462b      	mov	r3, r5
 8012df6:	ec51 0b10 	vmov	r0, r1, d0
 8012dfa:	f7ed fe8d 	bl	8000b18 <__aeabi_dcmpeq>
 8012dfe:	b920      	cbnz	r0, 8012e0a <pow+0x222>
 8012e00:	4b2e      	ldr	r3, [pc, #184]	; (8012ebc <pow+0x2d4>)
 8012e02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012e06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e0a:	f998 3000 	ldrsb.w	r3, [r8]
 8012e0e:	2b02      	cmp	r3, #2
 8012e10:	d142      	bne.n	8012e98 <pow+0x2b0>
 8012e12:	f7fd f8cd 	bl	800ffb0 <__errno>
 8012e16:	2322      	movs	r3, #34	; 0x22
 8012e18:	e78d      	b.n	8012d36 <pow+0x14e>
 8012e1a:	4b29      	ldr	r3, [pc, #164]	; (8012ec0 <pow+0x2d8>)
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e22:	4630      	mov	r0, r6
 8012e24:	4652      	mov	r2, sl
 8012e26:	465b      	mov	r3, fp
 8012e28:	4639      	mov	r1, r7
 8012e2a:	f7ed fe7f 	bl	8000b2c <__aeabi_dcmplt>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d0eb      	beq.n	8012e0a <pow+0x222>
 8012e32:	ec45 4b10 	vmov	d0, r4, r5
 8012e36:	f000 feaf 	bl	8013b98 <rint>
 8012e3a:	4622      	mov	r2, r4
 8012e3c:	462b      	mov	r3, r5
 8012e3e:	ec51 0b10 	vmov	r0, r1, d0
 8012e42:	f7ed fe69 	bl	8000b18 <__aeabi_dcmpeq>
 8012e46:	2800      	cmp	r0, #0
 8012e48:	d1df      	bne.n	8012e0a <pow+0x222>
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	4b18      	ldr	r3, [pc, #96]	; (8012eb0 <pow+0x2c8>)
 8012e4e:	e7da      	b.n	8012e06 <pow+0x21e>
 8012e50:	2200      	movs	r2, #0
 8012e52:	2300      	movs	r3, #0
 8012e54:	ec51 0b18 	vmov	r0, r1, d8
 8012e58:	f7ed fe5e 	bl	8000b18 <__aeabi_dcmpeq>
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	f43f af3a 	beq.w	8012cd6 <pow+0xee>
 8012e62:	ec47 6b10 	vmov	d0, r6, r7
 8012e66:	f000 fe82 	bl	8013b6e <finite>
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	f43f af33 	beq.w	8012cd6 <pow+0xee>
 8012e70:	ec45 4b10 	vmov	d0, r4, r5
 8012e74:	f000 fe7b 	bl	8013b6e <finite>
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	f43f af2c 	beq.w	8012cd6 <pow+0xee>
 8012e7e:	2304      	movs	r3, #4
 8012e80:	9302      	str	r3, [sp, #8]
 8012e82:	4b09      	ldr	r3, [pc, #36]	; (8012ea8 <pow+0x2c0>)
 8012e84:	9303      	str	r3, [sp, #12]
 8012e86:	2300      	movs	r3, #0
 8012e88:	930a      	str	r3, [sp, #40]	; 0x28
 8012e8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012e8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012e92:	ed8d 9b08 	vstr	d9, [sp, #32]
 8012e96:	e7b8      	b.n	8012e0a <pow+0x222>
 8012e98:	a802      	add	r0, sp, #8
 8012e9a:	f000 fe70 	bl	8013b7e <matherr>
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	f47f af11 	bne.w	8012cc6 <pow+0xde>
 8012ea4:	e7b5      	b.n	8012e12 <pow+0x22a>
 8012ea6:	bf00      	nop
 8012ea8:	080154b6 	.word	0x080154b6
 8012eac:	3ff00000 	.word	0x3ff00000
 8012eb0:	fff00000 	.word	0xfff00000
 8012eb4:	3fe00000 	.word	0x3fe00000
 8012eb8:	47efffff 	.word	0x47efffff
 8012ebc:	c7efffff 	.word	0xc7efffff
 8012ec0:	7ff00000 	.word	0x7ff00000
 8012ec4:	20001e04 	.word	0x20001e04

08012ec8 <__ieee754_log10>:
 8012ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ecc:	ec55 4b10 	vmov	r4, r5, d0
 8012ed0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8012ed4:	462b      	mov	r3, r5
 8012ed6:	da2f      	bge.n	8012f38 <__ieee754_log10+0x70>
 8012ed8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8012edc:	4322      	orrs	r2, r4
 8012ede:	d10a      	bne.n	8012ef6 <__ieee754_log10+0x2e>
 8012ee0:	493b      	ldr	r1, [pc, #236]	; (8012fd0 <__ieee754_log10+0x108>)
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	2000      	movs	r0, #0
 8012ee8:	f7ed fcd8 	bl	800089c <__aeabi_ddiv>
 8012eec:	ec41 0b10 	vmov	d0, r0, r1
 8012ef0:	b003      	add	sp, #12
 8012ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ef6:	2d00      	cmp	r5, #0
 8012ef8:	da08      	bge.n	8012f0c <__ieee754_log10+0x44>
 8012efa:	ee10 2a10 	vmov	r2, s0
 8012efe:	4620      	mov	r0, r4
 8012f00:	4629      	mov	r1, r5
 8012f02:	f7ed f9e9 	bl	80002d8 <__aeabi_dsub>
 8012f06:	2200      	movs	r2, #0
 8012f08:	2300      	movs	r3, #0
 8012f0a:	e7ed      	b.n	8012ee8 <__ieee754_log10+0x20>
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	4b31      	ldr	r3, [pc, #196]	; (8012fd4 <__ieee754_log10+0x10c>)
 8012f10:	4629      	mov	r1, r5
 8012f12:	ee10 0a10 	vmov	r0, s0
 8012f16:	f7ed fb97 	bl	8000648 <__aeabi_dmul>
 8012f1a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8012f1e:	4604      	mov	r4, r0
 8012f20:	460d      	mov	r5, r1
 8012f22:	460b      	mov	r3, r1
 8012f24:	492c      	ldr	r1, [pc, #176]	; (8012fd8 <__ieee754_log10+0x110>)
 8012f26:	428b      	cmp	r3, r1
 8012f28:	dd08      	ble.n	8012f3c <__ieee754_log10+0x74>
 8012f2a:	4622      	mov	r2, r4
 8012f2c:	462b      	mov	r3, r5
 8012f2e:	4620      	mov	r0, r4
 8012f30:	4629      	mov	r1, r5
 8012f32:	f7ed f9d3 	bl	80002dc <__adddf3>
 8012f36:	e7d9      	b.n	8012eec <__ieee754_log10+0x24>
 8012f38:	2200      	movs	r2, #0
 8012f3a:	e7f3      	b.n	8012f24 <__ieee754_log10+0x5c>
 8012f3c:	1518      	asrs	r0, r3, #20
 8012f3e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8012f42:	4410      	add	r0, r2
 8012f44:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8012f48:	4448      	add	r0, r9
 8012f4a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8012f4e:	f7ed fb11 	bl	8000574 <__aeabi_i2d>
 8012f52:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8012f56:	3303      	adds	r3, #3
 8012f58:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8012f5c:	ec45 4b10 	vmov	d0, r4, r5
 8012f60:	4606      	mov	r6, r0
 8012f62:	460f      	mov	r7, r1
 8012f64:	f000 ff14 	bl	8013d90 <__ieee754_log>
 8012f68:	a313      	add	r3, pc, #76	; (adr r3, 8012fb8 <__ieee754_log10+0xf0>)
 8012f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6e:	4630      	mov	r0, r6
 8012f70:	4639      	mov	r1, r7
 8012f72:	ed8d 0b00 	vstr	d0, [sp]
 8012f76:	f7ed fb67 	bl	8000648 <__aeabi_dmul>
 8012f7a:	ed9d 0b00 	vldr	d0, [sp]
 8012f7e:	4604      	mov	r4, r0
 8012f80:	460d      	mov	r5, r1
 8012f82:	a30f      	add	r3, pc, #60	; (adr r3, 8012fc0 <__ieee754_log10+0xf8>)
 8012f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f88:	ec51 0b10 	vmov	r0, r1, d0
 8012f8c:	f7ed fb5c 	bl	8000648 <__aeabi_dmul>
 8012f90:	4602      	mov	r2, r0
 8012f92:	460b      	mov	r3, r1
 8012f94:	4620      	mov	r0, r4
 8012f96:	4629      	mov	r1, r5
 8012f98:	f7ed f9a0 	bl	80002dc <__adddf3>
 8012f9c:	a30a      	add	r3, pc, #40	; (adr r3, 8012fc8 <__ieee754_log10+0x100>)
 8012f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	460d      	mov	r5, r1
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	4639      	mov	r1, r7
 8012faa:	f7ed fb4d 	bl	8000648 <__aeabi_dmul>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	4629      	mov	r1, r5
 8012fb6:	e7bc      	b.n	8012f32 <__ieee754_log10+0x6a>
 8012fb8:	11f12b36 	.word	0x11f12b36
 8012fbc:	3d59fef3 	.word	0x3d59fef3
 8012fc0:	1526e50e 	.word	0x1526e50e
 8012fc4:	3fdbcb7b 	.word	0x3fdbcb7b
 8012fc8:	509f6000 	.word	0x509f6000
 8012fcc:	3fd34413 	.word	0x3fd34413
 8012fd0:	c3500000 	.word	0xc3500000
 8012fd4:	43500000 	.word	0x43500000
 8012fd8:	7fefffff 	.word	0x7fefffff
 8012fdc:	00000000 	.word	0x00000000

08012fe0 <__ieee754_pow>:
 8012fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe4:	b091      	sub	sp, #68	; 0x44
 8012fe6:	ed8d 1b00 	vstr	d1, [sp]
 8012fea:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012fee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012ff2:	ea58 0302 	orrs.w	r3, r8, r2
 8012ff6:	ec57 6b10 	vmov	r6, r7, d0
 8012ffa:	f000 84be 	beq.w	801397a <__ieee754_pow+0x99a>
 8012ffe:	4b7a      	ldr	r3, [pc, #488]	; (80131e8 <__ieee754_pow+0x208>)
 8013000:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013004:	429c      	cmp	r4, r3
 8013006:	463d      	mov	r5, r7
 8013008:	ee10 aa10 	vmov	sl, s0
 801300c:	dc09      	bgt.n	8013022 <__ieee754_pow+0x42>
 801300e:	d103      	bne.n	8013018 <__ieee754_pow+0x38>
 8013010:	b93e      	cbnz	r6, 8013022 <__ieee754_pow+0x42>
 8013012:	45a0      	cmp	r8, r4
 8013014:	dc0d      	bgt.n	8013032 <__ieee754_pow+0x52>
 8013016:	e001      	b.n	801301c <__ieee754_pow+0x3c>
 8013018:	4598      	cmp	r8, r3
 801301a:	dc02      	bgt.n	8013022 <__ieee754_pow+0x42>
 801301c:	4598      	cmp	r8, r3
 801301e:	d10e      	bne.n	801303e <__ieee754_pow+0x5e>
 8013020:	b16a      	cbz	r2, 801303e <__ieee754_pow+0x5e>
 8013022:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013026:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801302a:	ea54 030a 	orrs.w	r3, r4, sl
 801302e:	f000 84a4 	beq.w	801397a <__ieee754_pow+0x99a>
 8013032:	486e      	ldr	r0, [pc, #440]	; (80131ec <__ieee754_pow+0x20c>)
 8013034:	b011      	add	sp, #68	; 0x44
 8013036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801303a:	f000 bda5 	b.w	8013b88 <nan>
 801303e:	2d00      	cmp	r5, #0
 8013040:	da53      	bge.n	80130ea <__ieee754_pow+0x10a>
 8013042:	4b6b      	ldr	r3, [pc, #428]	; (80131f0 <__ieee754_pow+0x210>)
 8013044:	4598      	cmp	r8, r3
 8013046:	dc4d      	bgt.n	80130e4 <__ieee754_pow+0x104>
 8013048:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801304c:	4598      	cmp	r8, r3
 801304e:	dd4c      	ble.n	80130ea <__ieee754_pow+0x10a>
 8013050:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013054:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013058:	2b14      	cmp	r3, #20
 801305a:	dd26      	ble.n	80130aa <__ieee754_pow+0xca>
 801305c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013060:	fa22 f103 	lsr.w	r1, r2, r3
 8013064:	fa01 f303 	lsl.w	r3, r1, r3
 8013068:	4293      	cmp	r3, r2
 801306a:	d13e      	bne.n	80130ea <__ieee754_pow+0x10a>
 801306c:	f001 0101 	and.w	r1, r1, #1
 8013070:	f1c1 0b02 	rsb	fp, r1, #2
 8013074:	2a00      	cmp	r2, #0
 8013076:	d15b      	bne.n	8013130 <__ieee754_pow+0x150>
 8013078:	4b5b      	ldr	r3, [pc, #364]	; (80131e8 <__ieee754_pow+0x208>)
 801307a:	4598      	cmp	r8, r3
 801307c:	d124      	bne.n	80130c8 <__ieee754_pow+0xe8>
 801307e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013082:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013086:	ea53 030a 	orrs.w	r3, r3, sl
 801308a:	f000 8476 	beq.w	801397a <__ieee754_pow+0x99a>
 801308e:	4b59      	ldr	r3, [pc, #356]	; (80131f4 <__ieee754_pow+0x214>)
 8013090:	429c      	cmp	r4, r3
 8013092:	dd2d      	ble.n	80130f0 <__ieee754_pow+0x110>
 8013094:	f1b9 0f00 	cmp.w	r9, #0
 8013098:	f280 8473 	bge.w	8013982 <__ieee754_pow+0x9a2>
 801309c:	2000      	movs	r0, #0
 801309e:	2100      	movs	r1, #0
 80130a0:	ec41 0b10 	vmov	d0, r0, r1
 80130a4:	b011      	add	sp, #68	; 0x44
 80130a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130aa:	2a00      	cmp	r2, #0
 80130ac:	d13e      	bne.n	801312c <__ieee754_pow+0x14c>
 80130ae:	f1c3 0314 	rsb	r3, r3, #20
 80130b2:	fa48 f103 	asr.w	r1, r8, r3
 80130b6:	fa01 f303 	lsl.w	r3, r1, r3
 80130ba:	4543      	cmp	r3, r8
 80130bc:	f040 8469 	bne.w	8013992 <__ieee754_pow+0x9b2>
 80130c0:	f001 0101 	and.w	r1, r1, #1
 80130c4:	f1c1 0b02 	rsb	fp, r1, #2
 80130c8:	4b4b      	ldr	r3, [pc, #300]	; (80131f8 <__ieee754_pow+0x218>)
 80130ca:	4598      	cmp	r8, r3
 80130cc:	d118      	bne.n	8013100 <__ieee754_pow+0x120>
 80130ce:	f1b9 0f00 	cmp.w	r9, #0
 80130d2:	f280 845a 	bge.w	801398a <__ieee754_pow+0x9aa>
 80130d6:	4948      	ldr	r1, [pc, #288]	; (80131f8 <__ieee754_pow+0x218>)
 80130d8:	4632      	mov	r2, r6
 80130da:	463b      	mov	r3, r7
 80130dc:	2000      	movs	r0, #0
 80130de:	f7ed fbdd 	bl	800089c <__aeabi_ddiv>
 80130e2:	e7dd      	b.n	80130a0 <__ieee754_pow+0xc0>
 80130e4:	f04f 0b02 	mov.w	fp, #2
 80130e8:	e7c4      	b.n	8013074 <__ieee754_pow+0x94>
 80130ea:	f04f 0b00 	mov.w	fp, #0
 80130ee:	e7c1      	b.n	8013074 <__ieee754_pow+0x94>
 80130f0:	f1b9 0f00 	cmp.w	r9, #0
 80130f4:	dad2      	bge.n	801309c <__ieee754_pow+0xbc>
 80130f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80130fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80130fe:	e7cf      	b.n	80130a0 <__ieee754_pow+0xc0>
 8013100:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013104:	d106      	bne.n	8013114 <__ieee754_pow+0x134>
 8013106:	4632      	mov	r2, r6
 8013108:	463b      	mov	r3, r7
 801310a:	4610      	mov	r0, r2
 801310c:	4619      	mov	r1, r3
 801310e:	f7ed fa9b 	bl	8000648 <__aeabi_dmul>
 8013112:	e7c5      	b.n	80130a0 <__ieee754_pow+0xc0>
 8013114:	4b39      	ldr	r3, [pc, #228]	; (80131fc <__ieee754_pow+0x21c>)
 8013116:	4599      	cmp	r9, r3
 8013118:	d10a      	bne.n	8013130 <__ieee754_pow+0x150>
 801311a:	2d00      	cmp	r5, #0
 801311c:	db08      	blt.n	8013130 <__ieee754_pow+0x150>
 801311e:	ec47 6b10 	vmov	d0, r6, r7
 8013122:	b011      	add	sp, #68	; 0x44
 8013124:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013128:	f000 bc68 	b.w	80139fc <__ieee754_sqrt>
 801312c:	f04f 0b00 	mov.w	fp, #0
 8013130:	ec47 6b10 	vmov	d0, r6, r7
 8013134:	f000 fd12 	bl	8013b5c <fabs>
 8013138:	ec51 0b10 	vmov	r0, r1, d0
 801313c:	f1ba 0f00 	cmp.w	sl, #0
 8013140:	d127      	bne.n	8013192 <__ieee754_pow+0x1b2>
 8013142:	b124      	cbz	r4, 801314e <__ieee754_pow+0x16e>
 8013144:	4b2c      	ldr	r3, [pc, #176]	; (80131f8 <__ieee754_pow+0x218>)
 8013146:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801314a:	429a      	cmp	r2, r3
 801314c:	d121      	bne.n	8013192 <__ieee754_pow+0x1b2>
 801314e:	f1b9 0f00 	cmp.w	r9, #0
 8013152:	da05      	bge.n	8013160 <__ieee754_pow+0x180>
 8013154:	4602      	mov	r2, r0
 8013156:	460b      	mov	r3, r1
 8013158:	2000      	movs	r0, #0
 801315a:	4927      	ldr	r1, [pc, #156]	; (80131f8 <__ieee754_pow+0x218>)
 801315c:	f7ed fb9e 	bl	800089c <__aeabi_ddiv>
 8013160:	2d00      	cmp	r5, #0
 8013162:	da9d      	bge.n	80130a0 <__ieee754_pow+0xc0>
 8013164:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013168:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801316c:	ea54 030b 	orrs.w	r3, r4, fp
 8013170:	d108      	bne.n	8013184 <__ieee754_pow+0x1a4>
 8013172:	4602      	mov	r2, r0
 8013174:	460b      	mov	r3, r1
 8013176:	4610      	mov	r0, r2
 8013178:	4619      	mov	r1, r3
 801317a:	f7ed f8ad 	bl	80002d8 <__aeabi_dsub>
 801317e:	4602      	mov	r2, r0
 8013180:	460b      	mov	r3, r1
 8013182:	e7ac      	b.n	80130de <__ieee754_pow+0xfe>
 8013184:	f1bb 0f01 	cmp.w	fp, #1
 8013188:	d18a      	bne.n	80130a0 <__ieee754_pow+0xc0>
 801318a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801318e:	4619      	mov	r1, r3
 8013190:	e786      	b.n	80130a0 <__ieee754_pow+0xc0>
 8013192:	0fed      	lsrs	r5, r5, #31
 8013194:	1e6b      	subs	r3, r5, #1
 8013196:	930d      	str	r3, [sp, #52]	; 0x34
 8013198:	ea5b 0303 	orrs.w	r3, fp, r3
 801319c:	d102      	bne.n	80131a4 <__ieee754_pow+0x1c4>
 801319e:	4632      	mov	r2, r6
 80131a0:	463b      	mov	r3, r7
 80131a2:	e7e8      	b.n	8013176 <__ieee754_pow+0x196>
 80131a4:	4b16      	ldr	r3, [pc, #88]	; (8013200 <__ieee754_pow+0x220>)
 80131a6:	4598      	cmp	r8, r3
 80131a8:	f340 80fe 	ble.w	80133a8 <__ieee754_pow+0x3c8>
 80131ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80131b0:	4598      	cmp	r8, r3
 80131b2:	dd0a      	ble.n	80131ca <__ieee754_pow+0x1ea>
 80131b4:	4b0f      	ldr	r3, [pc, #60]	; (80131f4 <__ieee754_pow+0x214>)
 80131b6:	429c      	cmp	r4, r3
 80131b8:	dc0d      	bgt.n	80131d6 <__ieee754_pow+0x1f6>
 80131ba:	f1b9 0f00 	cmp.w	r9, #0
 80131be:	f6bf af6d 	bge.w	801309c <__ieee754_pow+0xbc>
 80131c2:	a307      	add	r3, pc, #28	; (adr r3, 80131e0 <__ieee754_pow+0x200>)
 80131c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c8:	e79f      	b.n	801310a <__ieee754_pow+0x12a>
 80131ca:	4b0e      	ldr	r3, [pc, #56]	; (8013204 <__ieee754_pow+0x224>)
 80131cc:	429c      	cmp	r4, r3
 80131ce:	ddf4      	ble.n	80131ba <__ieee754_pow+0x1da>
 80131d0:	4b09      	ldr	r3, [pc, #36]	; (80131f8 <__ieee754_pow+0x218>)
 80131d2:	429c      	cmp	r4, r3
 80131d4:	dd18      	ble.n	8013208 <__ieee754_pow+0x228>
 80131d6:	f1b9 0f00 	cmp.w	r9, #0
 80131da:	dcf2      	bgt.n	80131c2 <__ieee754_pow+0x1e2>
 80131dc:	e75e      	b.n	801309c <__ieee754_pow+0xbc>
 80131de:	bf00      	nop
 80131e0:	8800759c 	.word	0x8800759c
 80131e4:	7e37e43c 	.word	0x7e37e43c
 80131e8:	7ff00000 	.word	0x7ff00000
 80131ec:	08015399 	.word	0x08015399
 80131f0:	433fffff 	.word	0x433fffff
 80131f4:	3fefffff 	.word	0x3fefffff
 80131f8:	3ff00000 	.word	0x3ff00000
 80131fc:	3fe00000 	.word	0x3fe00000
 8013200:	41e00000 	.word	0x41e00000
 8013204:	3feffffe 	.word	0x3feffffe
 8013208:	2200      	movs	r2, #0
 801320a:	4b63      	ldr	r3, [pc, #396]	; (8013398 <__ieee754_pow+0x3b8>)
 801320c:	f7ed f864 	bl	80002d8 <__aeabi_dsub>
 8013210:	a355      	add	r3, pc, #340	; (adr r3, 8013368 <__ieee754_pow+0x388>)
 8013212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013216:	4604      	mov	r4, r0
 8013218:	460d      	mov	r5, r1
 801321a:	f7ed fa15 	bl	8000648 <__aeabi_dmul>
 801321e:	a354      	add	r3, pc, #336	; (adr r3, 8013370 <__ieee754_pow+0x390>)
 8013220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013224:	4606      	mov	r6, r0
 8013226:	460f      	mov	r7, r1
 8013228:	4620      	mov	r0, r4
 801322a:	4629      	mov	r1, r5
 801322c:	f7ed fa0c 	bl	8000648 <__aeabi_dmul>
 8013230:	2200      	movs	r2, #0
 8013232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013236:	4b59      	ldr	r3, [pc, #356]	; (801339c <__ieee754_pow+0x3bc>)
 8013238:	4620      	mov	r0, r4
 801323a:	4629      	mov	r1, r5
 801323c:	f7ed fa04 	bl	8000648 <__aeabi_dmul>
 8013240:	4602      	mov	r2, r0
 8013242:	460b      	mov	r3, r1
 8013244:	a14c      	add	r1, pc, #304	; (adr r1, 8013378 <__ieee754_pow+0x398>)
 8013246:	e9d1 0100 	ldrd	r0, r1, [r1]
 801324a:	f7ed f845 	bl	80002d8 <__aeabi_dsub>
 801324e:	4622      	mov	r2, r4
 8013250:	462b      	mov	r3, r5
 8013252:	f7ed f9f9 	bl	8000648 <__aeabi_dmul>
 8013256:	4602      	mov	r2, r0
 8013258:	460b      	mov	r3, r1
 801325a:	2000      	movs	r0, #0
 801325c:	4950      	ldr	r1, [pc, #320]	; (80133a0 <__ieee754_pow+0x3c0>)
 801325e:	f7ed f83b 	bl	80002d8 <__aeabi_dsub>
 8013262:	4622      	mov	r2, r4
 8013264:	462b      	mov	r3, r5
 8013266:	4680      	mov	r8, r0
 8013268:	4689      	mov	r9, r1
 801326a:	4620      	mov	r0, r4
 801326c:	4629      	mov	r1, r5
 801326e:	f7ed f9eb 	bl	8000648 <__aeabi_dmul>
 8013272:	4602      	mov	r2, r0
 8013274:	460b      	mov	r3, r1
 8013276:	4640      	mov	r0, r8
 8013278:	4649      	mov	r1, r9
 801327a:	f7ed f9e5 	bl	8000648 <__aeabi_dmul>
 801327e:	a340      	add	r3, pc, #256	; (adr r3, 8013380 <__ieee754_pow+0x3a0>)
 8013280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013284:	f7ed f9e0 	bl	8000648 <__aeabi_dmul>
 8013288:	4602      	mov	r2, r0
 801328a:	460b      	mov	r3, r1
 801328c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013290:	f7ed f822 	bl	80002d8 <__aeabi_dsub>
 8013294:	4602      	mov	r2, r0
 8013296:	460b      	mov	r3, r1
 8013298:	4604      	mov	r4, r0
 801329a:	460d      	mov	r5, r1
 801329c:	4630      	mov	r0, r6
 801329e:	4639      	mov	r1, r7
 80132a0:	f7ed f81c 	bl	80002dc <__adddf3>
 80132a4:	2000      	movs	r0, #0
 80132a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80132aa:	4632      	mov	r2, r6
 80132ac:	463b      	mov	r3, r7
 80132ae:	f7ed f813 	bl	80002d8 <__aeabi_dsub>
 80132b2:	4602      	mov	r2, r0
 80132b4:	460b      	mov	r3, r1
 80132b6:	4620      	mov	r0, r4
 80132b8:	4629      	mov	r1, r5
 80132ba:	f7ed f80d 	bl	80002d8 <__aeabi_dsub>
 80132be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132c0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80132c4:	4313      	orrs	r3, r2
 80132c6:	4606      	mov	r6, r0
 80132c8:	460f      	mov	r7, r1
 80132ca:	f040 81eb 	bne.w	80136a4 <__ieee754_pow+0x6c4>
 80132ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013388 <__ieee754_pow+0x3a8>
 80132d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80132d6:	2400      	movs	r4, #0
 80132d8:	4622      	mov	r2, r4
 80132da:	462b      	mov	r3, r5
 80132dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80132e4:	f7ec fff8 	bl	80002d8 <__aeabi_dsub>
 80132e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132ec:	f7ed f9ac 	bl	8000648 <__aeabi_dmul>
 80132f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132f4:	4680      	mov	r8, r0
 80132f6:	4689      	mov	r9, r1
 80132f8:	4630      	mov	r0, r6
 80132fa:	4639      	mov	r1, r7
 80132fc:	f7ed f9a4 	bl	8000648 <__aeabi_dmul>
 8013300:	4602      	mov	r2, r0
 8013302:	460b      	mov	r3, r1
 8013304:	4640      	mov	r0, r8
 8013306:	4649      	mov	r1, r9
 8013308:	f7ec ffe8 	bl	80002dc <__adddf3>
 801330c:	4622      	mov	r2, r4
 801330e:	462b      	mov	r3, r5
 8013310:	4680      	mov	r8, r0
 8013312:	4689      	mov	r9, r1
 8013314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013318:	f7ed f996 	bl	8000648 <__aeabi_dmul>
 801331c:	460b      	mov	r3, r1
 801331e:	4604      	mov	r4, r0
 8013320:	460d      	mov	r5, r1
 8013322:	4602      	mov	r2, r0
 8013324:	4649      	mov	r1, r9
 8013326:	4640      	mov	r0, r8
 8013328:	e9cd 4500 	strd	r4, r5, [sp]
 801332c:	f7ec ffd6 	bl	80002dc <__adddf3>
 8013330:	4b1c      	ldr	r3, [pc, #112]	; (80133a4 <__ieee754_pow+0x3c4>)
 8013332:	4299      	cmp	r1, r3
 8013334:	4606      	mov	r6, r0
 8013336:	460f      	mov	r7, r1
 8013338:	468b      	mov	fp, r1
 801333a:	f340 82f7 	ble.w	801392c <__ieee754_pow+0x94c>
 801333e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013342:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013346:	4303      	orrs	r3, r0
 8013348:	f000 81ea 	beq.w	8013720 <__ieee754_pow+0x740>
 801334c:	a310      	add	r3, pc, #64	; (adr r3, 8013390 <__ieee754_pow+0x3b0>)
 801334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013356:	f7ed f977 	bl	8000648 <__aeabi_dmul>
 801335a:	a30d      	add	r3, pc, #52	; (adr r3, 8013390 <__ieee754_pow+0x3b0>)
 801335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013360:	e6d5      	b.n	801310e <__ieee754_pow+0x12e>
 8013362:	bf00      	nop
 8013364:	f3af 8000 	nop.w
 8013368:	60000000 	.word	0x60000000
 801336c:	3ff71547 	.word	0x3ff71547
 8013370:	f85ddf44 	.word	0xf85ddf44
 8013374:	3e54ae0b 	.word	0x3e54ae0b
 8013378:	55555555 	.word	0x55555555
 801337c:	3fd55555 	.word	0x3fd55555
 8013380:	652b82fe 	.word	0x652b82fe
 8013384:	3ff71547 	.word	0x3ff71547
 8013388:	00000000 	.word	0x00000000
 801338c:	bff00000 	.word	0xbff00000
 8013390:	8800759c 	.word	0x8800759c
 8013394:	7e37e43c 	.word	0x7e37e43c
 8013398:	3ff00000 	.word	0x3ff00000
 801339c:	3fd00000 	.word	0x3fd00000
 80133a0:	3fe00000 	.word	0x3fe00000
 80133a4:	408fffff 	.word	0x408fffff
 80133a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80133ac:	f04f 0200 	mov.w	r2, #0
 80133b0:	da05      	bge.n	80133be <__ieee754_pow+0x3de>
 80133b2:	4bd3      	ldr	r3, [pc, #844]	; (8013700 <__ieee754_pow+0x720>)
 80133b4:	f7ed f948 	bl	8000648 <__aeabi_dmul>
 80133b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80133bc:	460c      	mov	r4, r1
 80133be:	1523      	asrs	r3, r4, #20
 80133c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80133c4:	4413      	add	r3, r2
 80133c6:	9309      	str	r3, [sp, #36]	; 0x24
 80133c8:	4bce      	ldr	r3, [pc, #824]	; (8013704 <__ieee754_pow+0x724>)
 80133ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80133ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80133d2:	429c      	cmp	r4, r3
 80133d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80133d8:	dd08      	ble.n	80133ec <__ieee754_pow+0x40c>
 80133da:	4bcb      	ldr	r3, [pc, #812]	; (8013708 <__ieee754_pow+0x728>)
 80133dc:	429c      	cmp	r4, r3
 80133de:	f340 815e 	ble.w	801369e <__ieee754_pow+0x6be>
 80133e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133e4:	3301      	adds	r3, #1
 80133e6:	9309      	str	r3, [sp, #36]	; 0x24
 80133e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80133ec:	f04f 0a00 	mov.w	sl, #0
 80133f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80133f4:	930c      	str	r3, [sp, #48]	; 0x30
 80133f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133f8:	4bc4      	ldr	r3, [pc, #784]	; (801370c <__ieee754_pow+0x72c>)
 80133fa:	4413      	add	r3, r2
 80133fc:	ed93 7b00 	vldr	d7, [r3]
 8013400:	4629      	mov	r1, r5
 8013402:	ec53 2b17 	vmov	r2, r3, d7
 8013406:	ed8d 7b06 	vstr	d7, [sp, #24]
 801340a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801340e:	f7ec ff63 	bl	80002d8 <__aeabi_dsub>
 8013412:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013416:	4606      	mov	r6, r0
 8013418:	460f      	mov	r7, r1
 801341a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801341e:	f7ec ff5d 	bl	80002dc <__adddf3>
 8013422:	4602      	mov	r2, r0
 8013424:	460b      	mov	r3, r1
 8013426:	2000      	movs	r0, #0
 8013428:	49b9      	ldr	r1, [pc, #740]	; (8013710 <__ieee754_pow+0x730>)
 801342a:	f7ed fa37 	bl	800089c <__aeabi_ddiv>
 801342e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013432:	4602      	mov	r2, r0
 8013434:	460b      	mov	r3, r1
 8013436:	4630      	mov	r0, r6
 8013438:	4639      	mov	r1, r7
 801343a:	f7ed f905 	bl	8000648 <__aeabi_dmul>
 801343e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013442:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013446:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801344a:	2300      	movs	r3, #0
 801344c:	9302      	str	r3, [sp, #8]
 801344e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013452:	106d      	asrs	r5, r5, #1
 8013454:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013458:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801345c:	2200      	movs	r2, #0
 801345e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013462:	4640      	mov	r0, r8
 8013464:	4649      	mov	r1, r9
 8013466:	4614      	mov	r4, r2
 8013468:	461d      	mov	r5, r3
 801346a:	f7ed f8ed 	bl	8000648 <__aeabi_dmul>
 801346e:	4602      	mov	r2, r0
 8013470:	460b      	mov	r3, r1
 8013472:	4630      	mov	r0, r6
 8013474:	4639      	mov	r1, r7
 8013476:	f7ec ff2f 	bl	80002d8 <__aeabi_dsub>
 801347a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801347e:	4606      	mov	r6, r0
 8013480:	460f      	mov	r7, r1
 8013482:	4620      	mov	r0, r4
 8013484:	4629      	mov	r1, r5
 8013486:	f7ec ff27 	bl	80002d8 <__aeabi_dsub>
 801348a:	4602      	mov	r2, r0
 801348c:	460b      	mov	r3, r1
 801348e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013492:	f7ec ff21 	bl	80002d8 <__aeabi_dsub>
 8013496:	4642      	mov	r2, r8
 8013498:	464b      	mov	r3, r9
 801349a:	f7ed f8d5 	bl	8000648 <__aeabi_dmul>
 801349e:	4602      	mov	r2, r0
 80134a0:	460b      	mov	r3, r1
 80134a2:	4630      	mov	r0, r6
 80134a4:	4639      	mov	r1, r7
 80134a6:	f7ec ff17 	bl	80002d8 <__aeabi_dsub>
 80134aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80134ae:	f7ed f8cb 	bl	8000648 <__aeabi_dmul>
 80134b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80134ba:	4610      	mov	r0, r2
 80134bc:	4619      	mov	r1, r3
 80134be:	f7ed f8c3 	bl	8000648 <__aeabi_dmul>
 80134c2:	a37b      	add	r3, pc, #492	; (adr r3, 80136b0 <__ieee754_pow+0x6d0>)
 80134c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c8:	4604      	mov	r4, r0
 80134ca:	460d      	mov	r5, r1
 80134cc:	f7ed f8bc 	bl	8000648 <__aeabi_dmul>
 80134d0:	a379      	add	r3, pc, #484	; (adr r3, 80136b8 <__ieee754_pow+0x6d8>)
 80134d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d6:	f7ec ff01 	bl	80002dc <__adddf3>
 80134da:	4622      	mov	r2, r4
 80134dc:	462b      	mov	r3, r5
 80134de:	f7ed f8b3 	bl	8000648 <__aeabi_dmul>
 80134e2:	a377      	add	r3, pc, #476	; (adr r3, 80136c0 <__ieee754_pow+0x6e0>)
 80134e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e8:	f7ec fef8 	bl	80002dc <__adddf3>
 80134ec:	4622      	mov	r2, r4
 80134ee:	462b      	mov	r3, r5
 80134f0:	f7ed f8aa 	bl	8000648 <__aeabi_dmul>
 80134f4:	a374      	add	r3, pc, #464	; (adr r3, 80136c8 <__ieee754_pow+0x6e8>)
 80134f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fa:	f7ec feef 	bl	80002dc <__adddf3>
 80134fe:	4622      	mov	r2, r4
 8013500:	462b      	mov	r3, r5
 8013502:	f7ed f8a1 	bl	8000648 <__aeabi_dmul>
 8013506:	a372      	add	r3, pc, #456	; (adr r3, 80136d0 <__ieee754_pow+0x6f0>)
 8013508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350c:	f7ec fee6 	bl	80002dc <__adddf3>
 8013510:	4622      	mov	r2, r4
 8013512:	462b      	mov	r3, r5
 8013514:	f7ed f898 	bl	8000648 <__aeabi_dmul>
 8013518:	a36f      	add	r3, pc, #444	; (adr r3, 80136d8 <__ieee754_pow+0x6f8>)
 801351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351e:	f7ec fedd 	bl	80002dc <__adddf3>
 8013522:	4622      	mov	r2, r4
 8013524:	4606      	mov	r6, r0
 8013526:	460f      	mov	r7, r1
 8013528:	462b      	mov	r3, r5
 801352a:	4620      	mov	r0, r4
 801352c:	4629      	mov	r1, r5
 801352e:	f7ed f88b 	bl	8000648 <__aeabi_dmul>
 8013532:	4602      	mov	r2, r0
 8013534:	460b      	mov	r3, r1
 8013536:	4630      	mov	r0, r6
 8013538:	4639      	mov	r1, r7
 801353a:	f7ed f885 	bl	8000648 <__aeabi_dmul>
 801353e:	4642      	mov	r2, r8
 8013540:	4604      	mov	r4, r0
 8013542:	460d      	mov	r5, r1
 8013544:	464b      	mov	r3, r9
 8013546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801354a:	f7ec fec7 	bl	80002dc <__adddf3>
 801354e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013552:	f7ed f879 	bl	8000648 <__aeabi_dmul>
 8013556:	4622      	mov	r2, r4
 8013558:	462b      	mov	r3, r5
 801355a:	f7ec febf 	bl	80002dc <__adddf3>
 801355e:	4642      	mov	r2, r8
 8013560:	4606      	mov	r6, r0
 8013562:	460f      	mov	r7, r1
 8013564:	464b      	mov	r3, r9
 8013566:	4640      	mov	r0, r8
 8013568:	4649      	mov	r1, r9
 801356a:	f7ed f86d 	bl	8000648 <__aeabi_dmul>
 801356e:	2200      	movs	r2, #0
 8013570:	4b68      	ldr	r3, [pc, #416]	; (8013714 <__ieee754_pow+0x734>)
 8013572:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013576:	f7ec feb1 	bl	80002dc <__adddf3>
 801357a:	4632      	mov	r2, r6
 801357c:	463b      	mov	r3, r7
 801357e:	f7ec fead 	bl	80002dc <__adddf3>
 8013582:	9802      	ldr	r0, [sp, #8]
 8013584:	460d      	mov	r5, r1
 8013586:	4604      	mov	r4, r0
 8013588:	4602      	mov	r2, r0
 801358a:	460b      	mov	r3, r1
 801358c:	4640      	mov	r0, r8
 801358e:	4649      	mov	r1, r9
 8013590:	f7ed f85a 	bl	8000648 <__aeabi_dmul>
 8013594:	2200      	movs	r2, #0
 8013596:	4680      	mov	r8, r0
 8013598:	4689      	mov	r9, r1
 801359a:	4b5e      	ldr	r3, [pc, #376]	; (8013714 <__ieee754_pow+0x734>)
 801359c:	4620      	mov	r0, r4
 801359e:	4629      	mov	r1, r5
 80135a0:	f7ec fe9a 	bl	80002d8 <__aeabi_dsub>
 80135a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80135a8:	f7ec fe96 	bl	80002d8 <__aeabi_dsub>
 80135ac:	4602      	mov	r2, r0
 80135ae:	460b      	mov	r3, r1
 80135b0:	4630      	mov	r0, r6
 80135b2:	4639      	mov	r1, r7
 80135b4:	f7ec fe90 	bl	80002d8 <__aeabi_dsub>
 80135b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135bc:	f7ed f844 	bl	8000648 <__aeabi_dmul>
 80135c0:	4622      	mov	r2, r4
 80135c2:	4606      	mov	r6, r0
 80135c4:	460f      	mov	r7, r1
 80135c6:	462b      	mov	r3, r5
 80135c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135cc:	f7ed f83c 	bl	8000648 <__aeabi_dmul>
 80135d0:	4602      	mov	r2, r0
 80135d2:	460b      	mov	r3, r1
 80135d4:	4630      	mov	r0, r6
 80135d6:	4639      	mov	r1, r7
 80135d8:	f7ec fe80 	bl	80002dc <__adddf3>
 80135dc:	4606      	mov	r6, r0
 80135de:	460f      	mov	r7, r1
 80135e0:	4602      	mov	r2, r0
 80135e2:	460b      	mov	r3, r1
 80135e4:	4640      	mov	r0, r8
 80135e6:	4649      	mov	r1, r9
 80135e8:	f7ec fe78 	bl	80002dc <__adddf3>
 80135ec:	9802      	ldr	r0, [sp, #8]
 80135ee:	a33c      	add	r3, pc, #240	; (adr r3, 80136e0 <__ieee754_pow+0x700>)
 80135f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f4:	4604      	mov	r4, r0
 80135f6:	460d      	mov	r5, r1
 80135f8:	f7ed f826 	bl	8000648 <__aeabi_dmul>
 80135fc:	4642      	mov	r2, r8
 80135fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013602:	464b      	mov	r3, r9
 8013604:	4620      	mov	r0, r4
 8013606:	4629      	mov	r1, r5
 8013608:	f7ec fe66 	bl	80002d8 <__aeabi_dsub>
 801360c:	4602      	mov	r2, r0
 801360e:	460b      	mov	r3, r1
 8013610:	4630      	mov	r0, r6
 8013612:	4639      	mov	r1, r7
 8013614:	f7ec fe60 	bl	80002d8 <__aeabi_dsub>
 8013618:	a333      	add	r3, pc, #204	; (adr r3, 80136e8 <__ieee754_pow+0x708>)
 801361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801361e:	f7ed f813 	bl	8000648 <__aeabi_dmul>
 8013622:	a333      	add	r3, pc, #204	; (adr r3, 80136f0 <__ieee754_pow+0x710>)
 8013624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013628:	4606      	mov	r6, r0
 801362a:	460f      	mov	r7, r1
 801362c:	4620      	mov	r0, r4
 801362e:	4629      	mov	r1, r5
 8013630:	f7ed f80a 	bl	8000648 <__aeabi_dmul>
 8013634:	4602      	mov	r2, r0
 8013636:	460b      	mov	r3, r1
 8013638:	4630      	mov	r0, r6
 801363a:	4639      	mov	r1, r7
 801363c:	f7ec fe4e 	bl	80002dc <__adddf3>
 8013640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013642:	4b35      	ldr	r3, [pc, #212]	; (8013718 <__ieee754_pow+0x738>)
 8013644:	4413      	add	r3, r2
 8013646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364a:	f7ec fe47 	bl	80002dc <__adddf3>
 801364e:	4604      	mov	r4, r0
 8013650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013652:	460d      	mov	r5, r1
 8013654:	f7ec ff8e 	bl	8000574 <__aeabi_i2d>
 8013658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801365a:	4b30      	ldr	r3, [pc, #192]	; (801371c <__ieee754_pow+0x73c>)
 801365c:	4413      	add	r3, r2
 801365e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013662:	4606      	mov	r6, r0
 8013664:	460f      	mov	r7, r1
 8013666:	4622      	mov	r2, r4
 8013668:	462b      	mov	r3, r5
 801366a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801366e:	f7ec fe35 	bl	80002dc <__adddf3>
 8013672:	4642      	mov	r2, r8
 8013674:	464b      	mov	r3, r9
 8013676:	f7ec fe31 	bl	80002dc <__adddf3>
 801367a:	4632      	mov	r2, r6
 801367c:	463b      	mov	r3, r7
 801367e:	f7ec fe2d 	bl	80002dc <__adddf3>
 8013682:	9802      	ldr	r0, [sp, #8]
 8013684:	4632      	mov	r2, r6
 8013686:	463b      	mov	r3, r7
 8013688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801368c:	f7ec fe24 	bl	80002d8 <__aeabi_dsub>
 8013690:	4642      	mov	r2, r8
 8013692:	464b      	mov	r3, r9
 8013694:	f7ec fe20 	bl	80002d8 <__aeabi_dsub>
 8013698:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801369c:	e607      	b.n	80132ae <__ieee754_pow+0x2ce>
 801369e:	f04f 0a01 	mov.w	sl, #1
 80136a2:	e6a5      	b.n	80133f0 <__ieee754_pow+0x410>
 80136a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80136f8 <__ieee754_pow+0x718>
 80136a8:	e613      	b.n	80132d2 <__ieee754_pow+0x2f2>
 80136aa:	bf00      	nop
 80136ac:	f3af 8000 	nop.w
 80136b0:	4a454eef 	.word	0x4a454eef
 80136b4:	3fca7e28 	.word	0x3fca7e28
 80136b8:	93c9db65 	.word	0x93c9db65
 80136bc:	3fcd864a 	.word	0x3fcd864a
 80136c0:	a91d4101 	.word	0xa91d4101
 80136c4:	3fd17460 	.word	0x3fd17460
 80136c8:	518f264d 	.word	0x518f264d
 80136cc:	3fd55555 	.word	0x3fd55555
 80136d0:	db6fabff 	.word	0xdb6fabff
 80136d4:	3fdb6db6 	.word	0x3fdb6db6
 80136d8:	33333303 	.word	0x33333303
 80136dc:	3fe33333 	.word	0x3fe33333
 80136e0:	e0000000 	.word	0xe0000000
 80136e4:	3feec709 	.word	0x3feec709
 80136e8:	dc3a03fd 	.word	0xdc3a03fd
 80136ec:	3feec709 	.word	0x3feec709
 80136f0:	145b01f5 	.word	0x145b01f5
 80136f4:	be3e2fe0 	.word	0xbe3e2fe0
 80136f8:	00000000 	.word	0x00000000
 80136fc:	3ff00000 	.word	0x3ff00000
 8013700:	43400000 	.word	0x43400000
 8013704:	0003988e 	.word	0x0003988e
 8013708:	000bb679 	.word	0x000bb679
 801370c:	080154c0 	.word	0x080154c0
 8013710:	3ff00000 	.word	0x3ff00000
 8013714:	40080000 	.word	0x40080000
 8013718:	080154e0 	.word	0x080154e0
 801371c:	080154d0 	.word	0x080154d0
 8013720:	a3b4      	add	r3, pc, #720	; (adr r3, 80139f4 <__ieee754_pow+0xa14>)
 8013722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013726:	4640      	mov	r0, r8
 8013728:	4649      	mov	r1, r9
 801372a:	f7ec fdd7 	bl	80002dc <__adddf3>
 801372e:	4622      	mov	r2, r4
 8013730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013734:	462b      	mov	r3, r5
 8013736:	4630      	mov	r0, r6
 8013738:	4639      	mov	r1, r7
 801373a:	f7ec fdcd 	bl	80002d8 <__aeabi_dsub>
 801373e:	4602      	mov	r2, r0
 8013740:	460b      	mov	r3, r1
 8013742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013746:	f7ed fa0f 	bl	8000b68 <__aeabi_dcmpgt>
 801374a:	2800      	cmp	r0, #0
 801374c:	f47f adfe 	bne.w	801334c <__ieee754_pow+0x36c>
 8013750:	4aa3      	ldr	r2, [pc, #652]	; (80139e0 <__ieee754_pow+0xa00>)
 8013752:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013756:	4293      	cmp	r3, r2
 8013758:	f340 810a 	ble.w	8013970 <__ieee754_pow+0x990>
 801375c:	151b      	asrs	r3, r3, #20
 801375e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013762:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013766:	fa4a f303 	asr.w	r3, sl, r3
 801376a:	445b      	add	r3, fp
 801376c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013770:	4e9c      	ldr	r6, [pc, #624]	; (80139e4 <__ieee754_pow+0xa04>)
 8013772:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013776:	4116      	asrs	r6, r2
 8013778:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801377c:	2000      	movs	r0, #0
 801377e:	ea23 0106 	bic.w	r1, r3, r6
 8013782:	f1c2 0214 	rsb	r2, r2, #20
 8013786:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801378a:	fa4a fa02 	asr.w	sl, sl, r2
 801378e:	f1bb 0f00 	cmp.w	fp, #0
 8013792:	4602      	mov	r2, r0
 8013794:	460b      	mov	r3, r1
 8013796:	4620      	mov	r0, r4
 8013798:	4629      	mov	r1, r5
 801379a:	bfb8      	it	lt
 801379c:	f1ca 0a00 	rsblt	sl, sl, #0
 80137a0:	f7ec fd9a 	bl	80002d8 <__aeabi_dsub>
 80137a4:	e9cd 0100 	strd	r0, r1, [sp]
 80137a8:	4642      	mov	r2, r8
 80137aa:	464b      	mov	r3, r9
 80137ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80137b0:	f7ec fd94 	bl	80002dc <__adddf3>
 80137b4:	2000      	movs	r0, #0
 80137b6:	a378      	add	r3, pc, #480	; (adr r3, 8013998 <__ieee754_pow+0x9b8>)
 80137b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137bc:	4604      	mov	r4, r0
 80137be:	460d      	mov	r5, r1
 80137c0:	f7ec ff42 	bl	8000648 <__aeabi_dmul>
 80137c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137c8:	4606      	mov	r6, r0
 80137ca:	460f      	mov	r7, r1
 80137cc:	4620      	mov	r0, r4
 80137ce:	4629      	mov	r1, r5
 80137d0:	f7ec fd82 	bl	80002d8 <__aeabi_dsub>
 80137d4:	4602      	mov	r2, r0
 80137d6:	460b      	mov	r3, r1
 80137d8:	4640      	mov	r0, r8
 80137da:	4649      	mov	r1, r9
 80137dc:	f7ec fd7c 	bl	80002d8 <__aeabi_dsub>
 80137e0:	a36f      	add	r3, pc, #444	; (adr r3, 80139a0 <__ieee754_pow+0x9c0>)
 80137e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e6:	f7ec ff2f 	bl	8000648 <__aeabi_dmul>
 80137ea:	a36f      	add	r3, pc, #444	; (adr r3, 80139a8 <__ieee754_pow+0x9c8>)
 80137ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f0:	4680      	mov	r8, r0
 80137f2:	4689      	mov	r9, r1
 80137f4:	4620      	mov	r0, r4
 80137f6:	4629      	mov	r1, r5
 80137f8:	f7ec ff26 	bl	8000648 <__aeabi_dmul>
 80137fc:	4602      	mov	r2, r0
 80137fe:	460b      	mov	r3, r1
 8013800:	4640      	mov	r0, r8
 8013802:	4649      	mov	r1, r9
 8013804:	f7ec fd6a 	bl	80002dc <__adddf3>
 8013808:	4604      	mov	r4, r0
 801380a:	460d      	mov	r5, r1
 801380c:	4602      	mov	r2, r0
 801380e:	460b      	mov	r3, r1
 8013810:	4630      	mov	r0, r6
 8013812:	4639      	mov	r1, r7
 8013814:	f7ec fd62 	bl	80002dc <__adddf3>
 8013818:	4632      	mov	r2, r6
 801381a:	463b      	mov	r3, r7
 801381c:	4680      	mov	r8, r0
 801381e:	4689      	mov	r9, r1
 8013820:	f7ec fd5a 	bl	80002d8 <__aeabi_dsub>
 8013824:	4602      	mov	r2, r0
 8013826:	460b      	mov	r3, r1
 8013828:	4620      	mov	r0, r4
 801382a:	4629      	mov	r1, r5
 801382c:	f7ec fd54 	bl	80002d8 <__aeabi_dsub>
 8013830:	4642      	mov	r2, r8
 8013832:	4606      	mov	r6, r0
 8013834:	460f      	mov	r7, r1
 8013836:	464b      	mov	r3, r9
 8013838:	4640      	mov	r0, r8
 801383a:	4649      	mov	r1, r9
 801383c:	f7ec ff04 	bl	8000648 <__aeabi_dmul>
 8013840:	a35b      	add	r3, pc, #364	; (adr r3, 80139b0 <__ieee754_pow+0x9d0>)
 8013842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013846:	4604      	mov	r4, r0
 8013848:	460d      	mov	r5, r1
 801384a:	f7ec fefd 	bl	8000648 <__aeabi_dmul>
 801384e:	a35a      	add	r3, pc, #360	; (adr r3, 80139b8 <__ieee754_pow+0x9d8>)
 8013850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013854:	f7ec fd40 	bl	80002d8 <__aeabi_dsub>
 8013858:	4622      	mov	r2, r4
 801385a:	462b      	mov	r3, r5
 801385c:	f7ec fef4 	bl	8000648 <__aeabi_dmul>
 8013860:	a357      	add	r3, pc, #348	; (adr r3, 80139c0 <__ieee754_pow+0x9e0>)
 8013862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013866:	f7ec fd39 	bl	80002dc <__adddf3>
 801386a:	4622      	mov	r2, r4
 801386c:	462b      	mov	r3, r5
 801386e:	f7ec feeb 	bl	8000648 <__aeabi_dmul>
 8013872:	a355      	add	r3, pc, #340	; (adr r3, 80139c8 <__ieee754_pow+0x9e8>)
 8013874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013878:	f7ec fd2e 	bl	80002d8 <__aeabi_dsub>
 801387c:	4622      	mov	r2, r4
 801387e:	462b      	mov	r3, r5
 8013880:	f7ec fee2 	bl	8000648 <__aeabi_dmul>
 8013884:	a352      	add	r3, pc, #328	; (adr r3, 80139d0 <__ieee754_pow+0x9f0>)
 8013886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801388a:	f7ec fd27 	bl	80002dc <__adddf3>
 801388e:	4622      	mov	r2, r4
 8013890:	462b      	mov	r3, r5
 8013892:	f7ec fed9 	bl	8000648 <__aeabi_dmul>
 8013896:	4602      	mov	r2, r0
 8013898:	460b      	mov	r3, r1
 801389a:	4640      	mov	r0, r8
 801389c:	4649      	mov	r1, r9
 801389e:	f7ec fd1b 	bl	80002d8 <__aeabi_dsub>
 80138a2:	4604      	mov	r4, r0
 80138a4:	460d      	mov	r5, r1
 80138a6:	4602      	mov	r2, r0
 80138a8:	460b      	mov	r3, r1
 80138aa:	4640      	mov	r0, r8
 80138ac:	4649      	mov	r1, r9
 80138ae:	f7ec fecb 	bl	8000648 <__aeabi_dmul>
 80138b2:	2200      	movs	r2, #0
 80138b4:	e9cd 0100 	strd	r0, r1, [sp]
 80138b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80138bc:	4620      	mov	r0, r4
 80138be:	4629      	mov	r1, r5
 80138c0:	f7ec fd0a 	bl	80002d8 <__aeabi_dsub>
 80138c4:	4602      	mov	r2, r0
 80138c6:	460b      	mov	r3, r1
 80138c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138cc:	f7ec ffe6 	bl	800089c <__aeabi_ddiv>
 80138d0:	4632      	mov	r2, r6
 80138d2:	4604      	mov	r4, r0
 80138d4:	460d      	mov	r5, r1
 80138d6:	463b      	mov	r3, r7
 80138d8:	4640      	mov	r0, r8
 80138da:	4649      	mov	r1, r9
 80138dc:	f7ec feb4 	bl	8000648 <__aeabi_dmul>
 80138e0:	4632      	mov	r2, r6
 80138e2:	463b      	mov	r3, r7
 80138e4:	f7ec fcfa 	bl	80002dc <__adddf3>
 80138e8:	4602      	mov	r2, r0
 80138ea:	460b      	mov	r3, r1
 80138ec:	4620      	mov	r0, r4
 80138ee:	4629      	mov	r1, r5
 80138f0:	f7ec fcf2 	bl	80002d8 <__aeabi_dsub>
 80138f4:	4642      	mov	r2, r8
 80138f6:	464b      	mov	r3, r9
 80138f8:	f7ec fcee 	bl	80002d8 <__aeabi_dsub>
 80138fc:	4602      	mov	r2, r0
 80138fe:	460b      	mov	r3, r1
 8013900:	2000      	movs	r0, #0
 8013902:	4939      	ldr	r1, [pc, #228]	; (80139e8 <__ieee754_pow+0xa08>)
 8013904:	f7ec fce8 	bl	80002d8 <__aeabi_dsub>
 8013908:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801390c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013910:	4602      	mov	r2, r0
 8013912:	460b      	mov	r3, r1
 8013914:	da2f      	bge.n	8013976 <__ieee754_pow+0x996>
 8013916:	4650      	mov	r0, sl
 8013918:	ec43 2b10 	vmov	d0, r2, r3
 801391c:	f000 f9c0 	bl	8013ca0 <scalbn>
 8013920:	ec51 0b10 	vmov	r0, r1, d0
 8013924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013928:	f7ff bbf1 	b.w	801310e <__ieee754_pow+0x12e>
 801392c:	4b2f      	ldr	r3, [pc, #188]	; (80139ec <__ieee754_pow+0xa0c>)
 801392e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013932:	429e      	cmp	r6, r3
 8013934:	f77f af0c 	ble.w	8013750 <__ieee754_pow+0x770>
 8013938:	4b2d      	ldr	r3, [pc, #180]	; (80139f0 <__ieee754_pow+0xa10>)
 801393a:	440b      	add	r3, r1
 801393c:	4303      	orrs	r3, r0
 801393e:	d00b      	beq.n	8013958 <__ieee754_pow+0x978>
 8013940:	a325      	add	r3, pc, #148	; (adr r3, 80139d8 <__ieee754_pow+0x9f8>)
 8013942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801394a:	f7ec fe7d 	bl	8000648 <__aeabi_dmul>
 801394e:	a322      	add	r3, pc, #136	; (adr r3, 80139d8 <__ieee754_pow+0x9f8>)
 8013950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013954:	f7ff bbdb 	b.w	801310e <__ieee754_pow+0x12e>
 8013958:	4622      	mov	r2, r4
 801395a:	462b      	mov	r3, r5
 801395c:	f7ec fcbc 	bl	80002d8 <__aeabi_dsub>
 8013960:	4642      	mov	r2, r8
 8013962:	464b      	mov	r3, r9
 8013964:	f7ed f8f6 	bl	8000b54 <__aeabi_dcmpge>
 8013968:	2800      	cmp	r0, #0
 801396a:	f43f aef1 	beq.w	8013750 <__ieee754_pow+0x770>
 801396e:	e7e7      	b.n	8013940 <__ieee754_pow+0x960>
 8013970:	f04f 0a00 	mov.w	sl, #0
 8013974:	e718      	b.n	80137a8 <__ieee754_pow+0x7c8>
 8013976:	4621      	mov	r1, r4
 8013978:	e7d4      	b.n	8013924 <__ieee754_pow+0x944>
 801397a:	2000      	movs	r0, #0
 801397c:	491a      	ldr	r1, [pc, #104]	; (80139e8 <__ieee754_pow+0xa08>)
 801397e:	f7ff bb8f 	b.w	80130a0 <__ieee754_pow+0xc0>
 8013982:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013986:	f7ff bb8b 	b.w	80130a0 <__ieee754_pow+0xc0>
 801398a:	4630      	mov	r0, r6
 801398c:	4639      	mov	r1, r7
 801398e:	f7ff bb87 	b.w	80130a0 <__ieee754_pow+0xc0>
 8013992:	4693      	mov	fp, r2
 8013994:	f7ff bb98 	b.w	80130c8 <__ieee754_pow+0xe8>
 8013998:	00000000 	.word	0x00000000
 801399c:	3fe62e43 	.word	0x3fe62e43
 80139a0:	fefa39ef 	.word	0xfefa39ef
 80139a4:	3fe62e42 	.word	0x3fe62e42
 80139a8:	0ca86c39 	.word	0x0ca86c39
 80139ac:	be205c61 	.word	0xbe205c61
 80139b0:	72bea4d0 	.word	0x72bea4d0
 80139b4:	3e663769 	.word	0x3e663769
 80139b8:	c5d26bf1 	.word	0xc5d26bf1
 80139bc:	3ebbbd41 	.word	0x3ebbbd41
 80139c0:	af25de2c 	.word	0xaf25de2c
 80139c4:	3f11566a 	.word	0x3f11566a
 80139c8:	16bebd93 	.word	0x16bebd93
 80139cc:	3f66c16c 	.word	0x3f66c16c
 80139d0:	5555553e 	.word	0x5555553e
 80139d4:	3fc55555 	.word	0x3fc55555
 80139d8:	c2f8f359 	.word	0xc2f8f359
 80139dc:	01a56e1f 	.word	0x01a56e1f
 80139e0:	3fe00000 	.word	0x3fe00000
 80139e4:	000fffff 	.word	0x000fffff
 80139e8:	3ff00000 	.word	0x3ff00000
 80139ec:	4090cbff 	.word	0x4090cbff
 80139f0:	3f6f3400 	.word	0x3f6f3400
 80139f4:	652b82fe 	.word	0x652b82fe
 80139f8:	3c971547 	.word	0x3c971547

080139fc <__ieee754_sqrt>:
 80139fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a00:	4955      	ldr	r1, [pc, #340]	; (8013b58 <__ieee754_sqrt+0x15c>)
 8013a02:	ec55 4b10 	vmov	r4, r5, d0
 8013a06:	43a9      	bics	r1, r5
 8013a08:	462b      	mov	r3, r5
 8013a0a:	462a      	mov	r2, r5
 8013a0c:	d112      	bne.n	8013a34 <__ieee754_sqrt+0x38>
 8013a0e:	ee10 2a10 	vmov	r2, s0
 8013a12:	ee10 0a10 	vmov	r0, s0
 8013a16:	4629      	mov	r1, r5
 8013a18:	f7ec fe16 	bl	8000648 <__aeabi_dmul>
 8013a1c:	4602      	mov	r2, r0
 8013a1e:	460b      	mov	r3, r1
 8013a20:	4620      	mov	r0, r4
 8013a22:	4629      	mov	r1, r5
 8013a24:	f7ec fc5a 	bl	80002dc <__adddf3>
 8013a28:	4604      	mov	r4, r0
 8013a2a:	460d      	mov	r5, r1
 8013a2c:	ec45 4b10 	vmov	d0, r4, r5
 8013a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a34:	2d00      	cmp	r5, #0
 8013a36:	ee10 0a10 	vmov	r0, s0
 8013a3a:	4621      	mov	r1, r4
 8013a3c:	dc0f      	bgt.n	8013a5e <__ieee754_sqrt+0x62>
 8013a3e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013a42:	4330      	orrs	r0, r6
 8013a44:	d0f2      	beq.n	8013a2c <__ieee754_sqrt+0x30>
 8013a46:	b155      	cbz	r5, 8013a5e <__ieee754_sqrt+0x62>
 8013a48:	ee10 2a10 	vmov	r2, s0
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	4629      	mov	r1, r5
 8013a50:	f7ec fc42 	bl	80002d8 <__aeabi_dsub>
 8013a54:	4602      	mov	r2, r0
 8013a56:	460b      	mov	r3, r1
 8013a58:	f7ec ff20 	bl	800089c <__aeabi_ddiv>
 8013a5c:	e7e4      	b.n	8013a28 <__ieee754_sqrt+0x2c>
 8013a5e:	151b      	asrs	r3, r3, #20
 8013a60:	d073      	beq.n	8013b4a <__ieee754_sqrt+0x14e>
 8013a62:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013a66:	07dd      	lsls	r5, r3, #31
 8013a68:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013a6c:	bf48      	it	mi
 8013a6e:	0fc8      	lsrmi	r0, r1, #31
 8013a70:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013a74:	bf44      	itt	mi
 8013a76:	0049      	lslmi	r1, r1, #1
 8013a78:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013a7c:	2500      	movs	r5, #0
 8013a7e:	1058      	asrs	r0, r3, #1
 8013a80:	0fcb      	lsrs	r3, r1, #31
 8013a82:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013a86:	0049      	lsls	r1, r1, #1
 8013a88:	2316      	movs	r3, #22
 8013a8a:	462c      	mov	r4, r5
 8013a8c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013a90:	19a7      	adds	r7, r4, r6
 8013a92:	4297      	cmp	r7, r2
 8013a94:	bfde      	ittt	le
 8013a96:	19bc      	addle	r4, r7, r6
 8013a98:	1bd2      	suble	r2, r2, r7
 8013a9a:	19ad      	addle	r5, r5, r6
 8013a9c:	0fcf      	lsrs	r7, r1, #31
 8013a9e:	3b01      	subs	r3, #1
 8013aa0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013aa4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013aa8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013aac:	d1f0      	bne.n	8013a90 <__ieee754_sqrt+0x94>
 8013aae:	f04f 0c20 	mov.w	ip, #32
 8013ab2:	469e      	mov	lr, r3
 8013ab4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013ab8:	42a2      	cmp	r2, r4
 8013aba:	eb06 070e 	add.w	r7, r6, lr
 8013abe:	dc02      	bgt.n	8013ac6 <__ieee754_sqrt+0xca>
 8013ac0:	d112      	bne.n	8013ae8 <__ieee754_sqrt+0xec>
 8013ac2:	428f      	cmp	r7, r1
 8013ac4:	d810      	bhi.n	8013ae8 <__ieee754_sqrt+0xec>
 8013ac6:	2f00      	cmp	r7, #0
 8013ac8:	eb07 0e06 	add.w	lr, r7, r6
 8013acc:	da42      	bge.n	8013b54 <__ieee754_sqrt+0x158>
 8013ace:	f1be 0f00 	cmp.w	lr, #0
 8013ad2:	db3f      	blt.n	8013b54 <__ieee754_sqrt+0x158>
 8013ad4:	f104 0801 	add.w	r8, r4, #1
 8013ad8:	1b12      	subs	r2, r2, r4
 8013ada:	428f      	cmp	r7, r1
 8013adc:	bf88      	it	hi
 8013ade:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8013ae2:	1bc9      	subs	r1, r1, r7
 8013ae4:	4433      	add	r3, r6
 8013ae6:	4644      	mov	r4, r8
 8013ae8:	0052      	lsls	r2, r2, #1
 8013aea:	f1bc 0c01 	subs.w	ip, ip, #1
 8013aee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8013af2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013af6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013afa:	d1dd      	bne.n	8013ab8 <__ieee754_sqrt+0xbc>
 8013afc:	430a      	orrs	r2, r1
 8013afe:	d006      	beq.n	8013b0e <__ieee754_sqrt+0x112>
 8013b00:	1c5c      	adds	r4, r3, #1
 8013b02:	bf13      	iteet	ne
 8013b04:	3301      	addne	r3, #1
 8013b06:	3501      	addeq	r5, #1
 8013b08:	4663      	moveq	r3, ip
 8013b0a:	f023 0301 	bicne.w	r3, r3, #1
 8013b0e:	106a      	asrs	r2, r5, #1
 8013b10:	085b      	lsrs	r3, r3, #1
 8013b12:	07e9      	lsls	r1, r5, #31
 8013b14:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013b18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013b1c:	bf48      	it	mi
 8013b1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013b22:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8013b26:	461c      	mov	r4, r3
 8013b28:	e780      	b.n	8013a2c <__ieee754_sqrt+0x30>
 8013b2a:	0aca      	lsrs	r2, r1, #11
 8013b2c:	3815      	subs	r0, #21
 8013b2e:	0549      	lsls	r1, r1, #21
 8013b30:	2a00      	cmp	r2, #0
 8013b32:	d0fa      	beq.n	8013b2a <__ieee754_sqrt+0x12e>
 8013b34:	02d6      	lsls	r6, r2, #11
 8013b36:	d50a      	bpl.n	8013b4e <__ieee754_sqrt+0x152>
 8013b38:	f1c3 0420 	rsb	r4, r3, #32
 8013b3c:	fa21 f404 	lsr.w	r4, r1, r4
 8013b40:	1e5d      	subs	r5, r3, #1
 8013b42:	4099      	lsls	r1, r3
 8013b44:	4322      	orrs	r2, r4
 8013b46:	1b43      	subs	r3, r0, r5
 8013b48:	e78b      	b.n	8013a62 <__ieee754_sqrt+0x66>
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	e7f0      	b.n	8013b30 <__ieee754_sqrt+0x134>
 8013b4e:	0052      	lsls	r2, r2, #1
 8013b50:	3301      	adds	r3, #1
 8013b52:	e7ef      	b.n	8013b34 <__ieee754_sqrt+0x138>
 8013b54:	46a0      	mov	r8, r4
 8013b56:	e7bf      	b.n	8013ad8 <__ieee754_sqrt+0xdc>
 8013b58:	7ff00000 	.word	0x7ff00000

08013b5c <fabs>:
 8013b5c:	ec51 0b10 	vmov	r0, r1, d0
 8013b60:	ee10 2a10 	vmov	r2, s0
 8013b64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013b68:	ec43 2b10 	vmov	d0, r2, r3
 8013b6c:	4770      	bx	lr

08013b6e <finite>:
 8013b6e:	ee10 3a90 	vmov	r3, s1
 8013b72:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8013b76:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013b7a:	0fc0      	lsrs	r0, r0, #31
 8013b7c:	4770      	bx	lr

08013b7e <matherr>:
 8013b7e:	2000      	movs	r0, #0
 8013b80:	4770      	bx	lr
 8013b82:	0000      	movs	r0, r0
 8013b84:	0000      	movs	r0, r0
	...

08013b88 <nan>:
 8013b88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013b90 <nan+0x8>
 8013b8c:	4770      	bx	lr
 8013b8e:	bf00      	nop
 8013b90:	00000000 	.word	0x00000000
 8013b94:	7ff80000 	.word	0x7ff80000

08013b98 <rint>:
 8013b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b9a:	ec51 0b10 	vmov	r0, r1, d0
 8013b9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013ba2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8013ba6:	2e13      	cmp	r6, #19
 8013ba8:	460b      	mov	r3, r1
 8013baa:	ee10 4a10 	vmov	r4, s0
 8013bae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8013bb2:	dc56      	bgt.n	8013c62 <rint+0xca>
 8013bb4:	2e00      	cmp	r6, #0
 8013bb6:	da2b      	bge.n	8013c10 <rint+0x78>
 8013bb8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8013bbc:	4302      	orrs	r2, r0
 8013bbe:	d023      	beq.n	8013c08 <rint+0x70>
 8013bc0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013bc4:	4302      	orrs	r2, r0
 8013bc6:	4254      	negs	r4, r2
 8013bc8:	4314      	orrs	r4, r2
 8013bca:	0c4b      	lsrs	r3, r1, #17
 8013bcc:	0b24      	lsrs	r4, r4, #12
 8013bce:	045b      	lsls	r3, r3, #17
 8013bd0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8013bd4:	ea44 0103 	orr.w	r1, r4, r3
 8013bd8:	460b      	mov	r3, r1
 8013bda:	492f      	ldr	r1, [pc, #188]	; (8013c98 <rint+0x100>)
 8013bdc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8013be0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8013be4:	4602      	mov	r2, r0
 8013be6:	4639      	mov	r1, r7
 8013be8:	4630      	mov	r0, r6
 8013bea:	f7ec fb77 	bl	80002dc <__adddf3>
 8013bee:	e9cd 0100 	strd	r0, r1, [sp]
 8013bf2:	463b      	mov	r3, r7
 8013bf4:	4632      	mov	r2, r6
 8013bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013bfa:	f7ec fb6d 	bl	80002d8 <__aeabi_dsub>
 8013bfe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013c02:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8013c06:	4639      	mov	r1, r7
 8013c08:	ec41 0b10 	vmov	d0, r0, r1
 8013c0c:	b003      	add	sp, #12
 8013c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c10:	4a22      	ldr	r2, [pc, #136]	; (8013c9c <rint+0x104>)
 8013c12:	4132      	asrs	r2, r6
 8013c14:	ea01 0702 	and.w	r7, r1, r2
 8013c18:	4307      	orrs	r7, r0
 8013c1a:	d0f5      	beq.n	8013c08 <rint+0x70>
 8013c1c:	0852      	lsrs	r2, r2, #1
 8013c1e:	4011      	ands	r1, r2
 8013c20:	430c      	orrs	r4, r1
 8013c22:	d00b      	beq.n	8013c3c <rint+0xa4>
 8013c24:	ea23 0202 	bic.w	r2, r3, r2
 8013c28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013c2c:	2e13      	cmp	r6, #19
 8013c2e:	fa43 f306 	asr.w	r3, r3, r6
 8013c32:	bf0c      	ite	eq
 8013c34:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8013c38:	2400      	movne	r4, #0
 8013c3a:	4313      	orrs	r3, r2
 8013c3c:	4916      	ldr	r1, [pc, #88]	; (8013c98 <rint+0x100>)
 8013c3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8013c42:	4622      	mov	r2, r4
 8013c44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013c48:	4620      	mov	r0, r4
 8013c4a:	4629      	mov	r1, r5
 8013c4c:	f7ec fb46 	bl	80002dc <__adddf3>
 8013c50:	e9cd 0100 	strd	r0, r1, [sp]
 8013c54:	4622      	mov	r2, r4
 8013c56:	462b      	mov	r3, r5
 8013c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c5c:	f7ec fb3c 	bl	80002d8 <__aeabi_dsub>
 8013c60:	e7d2      	b.n	8013c08 <rint+0x70>
 8013c62:	2e33      	cmp	r6, #51	; 0x33
 8013c64:	dd07      	ble.n	8013c76 <rint+0xde>
 8013c66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013c6a:	d1cd      	bne.n	8013c08 <rint+0x70>
 8013c6c:	ee10 2a10 	vmov	r2, s0
 8013c70:	f7ec fb34 	bl	80002dc <__adddf3>
 8013c74:	e7c8      	b.n	8013c08 <rint+0x70>
 8013c76:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8013c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c7e:	40f2      	lsrs	r2, r6
 8013c80:	4210      	tst	r0, r2
 8013c82:	d0c1      	beq.n	8013c08 <rint+0x70>
 8013c84:	0852      	lsrs	r2, r2, #1
 8013c86:	4210      	tst	r0, r2
 8013c88:	bf1f      	itttt	ne
 8013c8a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8013c8e:	ea20 0202 	bicne.w	r2, r0, r2
 8013c92:	4134      	asrne	r4, r6
 8013c94:	4314      	orrne	r4, r2
 8013c96:	e7d1      	b.n	8013c3c <rint+0xa4>
 8013c98:	080154f0 	.word	0x080154f0
 8013c9c:	000fffff 	.word	0x000fffff

08013ca0 <scalbn>:
 8013ca0:	b570      	push	{r4, r5, r6, lr}
 8013ca2:	ec55 4b10 	vmov	r4, r5, d0
 8013ca6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013caa:	4606      	mov	r6, r0
 8013cac:	462b      	mov	r3, r5
 8013cae:	b9aa      	cbnz	r2, 8013cdc <scalbn+0x3c>
 8013cb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013cb4:	4323      	orrs	r3, r4
 8013cb6:	d03b      	beq.n	8013d30 <scalbn+0x90>
 8013cb8:	4b31      	ldr	r3, [pc, #196]	; (8013d80 <scalbn+0xe0>)
 8013cba:	4629      	mov	r1, r5
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	ee10 0a10 	vmov	r0, s0
 8013cc2:	f7ec fcc1 	bl	8000648 <__aeabi_dmul>
 8013cc6:	4b2f      	ldr	r3, [pc, #188]	; (8013d84 <scalbn+0xe4>)
 8013cc8:	429e      	cmp	r6, r3
 8013cca:	4604      	mov	r4, r0
 8013ccc:	460d      	mov	r5, r1
 8013cce:	da12      	bge.n	8013cf6 <scalbn+0x56>
 8013cd0:	a327      	add	r3, pc, #156	; (adr r3, 8013d70 <scalbn+0xd0>)
 8013cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd6:	f7ec fcb7 	bl	8000648 <__aeabi_dmul>
 8013cda:	e009      	b.n	8013cf0 <scalbn+0x50>
 8013cdc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013ce0:	428a      	cmp	r2, r1
 8013ce2:	d10c      	bne.n	8013cfe <scalbn+0x5e>
 8013ce4:	ee10 2a10 	vmov	r2, s0
 8013ce8:	4620      	mov	r0, r4
 8013cea:	4629      	mov	r1, r5
 8013cec:	f7ec faf6 	bl	80002dc <__adddf3>
 8013cf0:	4604      	mov	r4, r0
 8013cf2:	460d      	mov	r5, r1
 8013cf4:	e01c      	b.n	8013d30 <scalbn+0x90>
 8013cf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013cfa:	460b      	mov	r3, r1
 8013cfc:	3a36      	subs	r2, #54	; 0x36
 8013cfe:	4432      	add	r2, r6
 8013d00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013d04:	428a      	cmp	r2, r1
 8013d06:	dd0b      	ble.n	8013d20 <scalbn+0x80>
 8013d08:	ec45 4b11 	vmov	d1, r4, r5
 8013d0c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013d78 <scalbn+0xd8>
 8013d10:	f000 f9f0 	bl	80140f4 <copysign>
 8013d14:	a318      	add	r3, pc, #96	; (adr r3, 8013d78 <scalbn+0xd8>)
 8013d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d1a:	ec51 0b10 	vmov	r0, r1, d0
 8013d1e:	e7da      	b.n	8013cd6 <scalbn+0x36>
 8013d20:	2a00      	cmp	r2, #0
 8013d22:	dd08      	ble.n	8013d36 <scalbn+0x96>
 8013d24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013d2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d30:	ec45 4b10 	vmov	d0, r4, r5
 8013d34:	bd70      	pop	{r4, r5, r6, pc}
 8013d36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013d3a:	da0d      	bge.n	8013d58 <scalbn+0xb8>
 8013d3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013d40:	429e      	cmp	r6, r3
 8013d42:	ec45 4b11 	vmov	d1, r4, r5
 8013d46:	dce1      	bgt.n	8013d0c <scalbn+0x6c>
 8013d48:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013d70 <scalbn+0xd0>
 8013d4c:	f000 f9d2 	bl	80140f4 <copysign>
 8013d50:	a307      	add	r3, pc, #28	; (adr r3, 8013d70 <scalbn+0xd0>)
 8013d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d56:	e7e0      	b.n	8013d1a <scalbn+0x7a>
 8013d58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d5c:	3236      	adds	r2, #54	; 0x36
 8013d5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013d62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d66:	4620      	mov	r0, r4
 8013d68:	4629      	mov	r1, r5
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	4b06      	ldr	r3, [pc, #24]	; (8013d88 <scalbn+0xe8>)
 8013d6e:	e7b2      	b.n	8013cd6 <scalbn+0x36>
 8013d70:	c2f8f359 	.word	0xc2f8f359
 8013d74:	01a56e1f 	.word	0x01a56e1f
 8013d78:	8800759c 	.word	0x8800759c
 8013d7c:	7e37e43c 	.word	0x7e37e43c
 8013d80:	43500000 	.word	0x43500000
 8013d84:	ffff3cb0 	.word	0xffff3cb0
 8013d88:	3c900000 	.word	0x3c900000
 8013d8c:	00000000 	.word	0x00000000

08013d90 <__ieee754_log>:
 8013d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d94:	ec51 0b10 	vmov	r0, r1, d0
 8013d98:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8013d9c:	b087      	sub	sp, #28
 8013d9e:	460d      	mov	r5, r1
 8013da0:	da27      	bge.n	8013df2 <__ieee754_log+0x62>
 8013da2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013da6:	4303      	orrs	r3, r0
 8013da8:	ee10 2a10 	vmov	r2, s0
 8013dac:	d10a      	bne.n	8013dc4 <__ieee754_log+0x34>
 8013dae:	49cc      	ldr	r1, [pc, #816]	; (80140e0 <__ieee754_log+0x350>)
 8013db0:	2200      	movs	r2, #0
 8013db2:	2300      	movs	r3, #0
 8013db4:	2000      	movs	r0, #0
 8013db6:	f7ec fd71 	bl	800089c <__aeabi_ddiv>
 8013dba:	ec41 0b10 	vmov	d0, r0, r1
 8013dbe:	b007      	add	sp, #28
 8013dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dc4:	2900      	cmp	r1, #0
 8013dc6:	da05      	bge.n	8013dd4 <__ieee754_log+0x44>
 8013dc8:	460b      	mov	r3, r1
 8013dca:	f7ec fa85 	bl	80002d8 <__aeabi_dsub>
 8013dce:	2200      	movs	r2, #0
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	e7f0      	b.n	8013db6 <__ieee754_log+0x26>
 8013dd4:	4bc3      	ldr	r3, [pc, #780]	; (80140e4 <__ieee754_log+0x354>)
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	f7ec fc36 	bl	8000648 <__aeabi_dmul>
 8013ddc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8013de0:	460d      	mov	r5, r1
 8013de2:	4ac1      	ldr	r2, [pc, #772]	; (80140e8 <__ieee754_log+0x358>)
 8013de4:	4295      	cmp	r5, r2
 8013de6:	dd06      	ble.n	8013df6 <__ieee754_log+0x66>
 8013de8:	4602      	mov	r2, r0
 8013dea:	460b      	mov	r3, r1
 8013dec:	f7ec fa76 	bl	80002dc <__adddf3>
 8013df0:	e7e3      	b.n	8013dba <__ieee754_log+0x2a>
 8013df2:	2300      	movs	r3, #0
 8013df4:	e7f5      	b.n	8013de2 <__ieee754_log+0x52>
 8013df6:	152c      	asrs	r4, r5, #20
 8013df8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013dfc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013e00:	441c      	add	r4, r3
 8013e02:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8013e06:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8013e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013e0e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8013e12:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8013e16:	ea42 0105 	orr.w	r1, r2, r5
 8013e1a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8013e1e:	2200      	movs	r2, #0
 8013e20:	4bb2      	ldr	r3, [pc, #712]	; (80140ec <__ieee754_log+0x35c>)
 8013e22:	f7ec fa59 	bl	80002d8 <__aeabi_dsub>
 8013e26:	1cab      	adds	r3, r5, #2
 8013e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e2c:	2b02      	cmp	r3, #2
 8013e2e:	4682      	mov	sl, r0
 8013e30:	468b      	mov	fp, r1
 8013e32:	f04f 0200 	mov.w	r2, #0
 8013e36:	dc53      	bgt.n	8013ee0 <__ieee754_log+0x150>
 8013e38:	2300      	movs	r3, #0
 8013e3a:	f7ec fe6d 	bl	8000b18 <__aeabi_dcmpeq>
 8013e3e:	b1d0      	cbz	r0, 8013e76 <__ieee754_log+0xe6>
 8013e40:	2c00      	cmp	r4, #0
 8013e42:	f000 8120 	beq.w	8014086 <__ieee754_log+0x2f6>
 8013e46:	4620      	mov	r0, r4
 8013e48:	f7ec fb94 	bl	8000574 <__aeabi_i2d>
 8013e4c:	a390      	add	r3, pc, #576	; (adr r3, 8014090 <__ieee754_log+0x300>)
 8013e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e52:	4606      	mov	r6, r0
 8013e54:	460f      	mov	r7, r1
 8013e56:	f7ec fbf7 	bl	8000648 <__aeabi_dmul>
 8013e5a:	a38f      	add	r3, pc, #572	; (adr r3, 8014098 <__ieee754_log+0x308>)
 8013e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e60:	4604      	mov	r4, r0
 8013e62:	460d      	mov	r5, r1
 8013e64:	4630      	mov	r0, r6
 8013e66:	4639      	mov	r1, r7
 8013e68:	f7ec fbee 	bl	8000648 <__aeabi_dmul>
 8013e6c:	4602      	mov	r2, r0
 8013e6e:	460b      	mov	r3, r1
 8013e70:	4620      	mov	r0, r4
 8013e72:	4629      	mov	r1, r5
 8013e74:	e7ba      	b.n	8013dec <__ieee754_log+0x5c>
 8013e76:	a38a      	add	r3, pc, #552	; (adr r3, 80140a0 <__ieee754_log+0x310>)
 8013e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7c:	4650      	mov	r0, sl
 8013e7e:	4659      	mov	r1, fp
 8013e80:	f7ec fbe2 	bl	8000648 <__aeabi_dmul>
 8013e84:	4602      	mov	r2, r0
 8013e86:	460b      	mov	r3, r1
 8013e88:	2000      	movs	r0, #0
 8013e8a:	4999      	ldr	r1, [pc, #612]	; (80140f0 <__ieee754_log+0x360>)
 8013e8c:	f7ec fa24 	bl	80002d8 <__aeabi_dsub>
 8013e90:	4652      	mov	r2, sl
 8013e92:	4606      	mov	r6, r0
 8013e94:	460f      	mov	r7, r1
 8013e96:	465b      	mov	r3, fp
 8013e98:	4650      	mov	r0, sl
 8013e9a:	4659      	mov	r1, fp
 8013e9c:	f7ec fbd4 	bl	8000648 <__aeabi_dmul>
 8013ea0:	4602      	mov	r2, r0
 8013ea2:	460b      	mov	r3, r1
 8013ea4:	4630      	mov	r0, r6
 8013ea6:	4639      	mov	r1, r7
 8013ea8:	f7ec fbce 	bl	8000648 <__aeabi_dmul>
 8013eac:	4606      	mov	r6, r0
 8013eae:	460f      	mov	r7, r1
 8013eb0:	b914      	cbnz	r4, 8013eb8 <__ieee754_log+0x128>
 8013eb2:	4632      	mov	r2, r6
 8013eb4:	463b      	mov	r3, r7
 8013eb6:	e0a0      	b.n	8013ffa <__ieee754_log+0x26a>
 8013eb8:	4620      	mov	r0, r4
 8013eba:	f7ec fb5b 	bl	8000574 <__aeabi_i2d>
 8013ebe:	a374      	add	r3, pc, #464	; (adr r3, 8014090 <__ieee754_log+0x300>)
 8013ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec4:	4680      	mov	r8, r0
 8013ec6:	4689      	mov	r9, r1
 8013ec8:	f7ec fbbe 	bl	8000648 <__aeabi_dmul>
 8013ecc:	a372      	add	r3, pc, #456	; (adr r3, 8014098 <__ieee754_log+0x308>)
 8013ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed2:	4604      	mov	r4, r0
 8013ed4:	460d      	mov	r5, r1
 8013ed6:	4640      	mov	r0, r8
 8013ed8:	4649      	mov	r1, r9
 8013eda:	f7ec fbb5 	bl	8000648 <__aeabi_dmul>
 8013ede:	e0a5      	b.n	801402c <__ieee754_log+0x29c>
 8013ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013ee4:	f7ec f9fa 	bl	80002dc <__adddf3>
 8013ee8:	4602      	mov	r2, r0
 8013eea:	460b      	mov	r3, r1
 8013eec:	4650      	mov	r0, sl
 8013eee:	4659      	mov	r1, fp
 8013ef0:	f7ec fcd4 	bl	800089c <__aeabi_ddiv>
 8013ef4:	e9cd 0100 	strd	r0, r1, [sp]
 8013ef8:	4620      	mov	r0, r4
 8013efa:	f7ec fb3b 	bl	8000574 <__aeabi_i2d>
 8013efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f06:	4610      	mov	r0, r2
 8013f08:	4619      	mov	r1, r3
 8013f0a:	f7ec fb9d 	bl	8000648 <__aeabi_dmul>
 8013f0e:	4602      	mov	r2, r0
 8013f10:	460b      	mov	r3, r1
 8013f12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f16:	f7ec fb97 	bl	8000648 <__aeabi_dmul>
 8013f1a:	a363      	add	r3, pc, #396	; (adr r3, 80140a8 <__ieee754_log+0x318>)
 8013f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f20:	4680      	mov	r8, r0
 8013f22:	4689      	mov	r9, r1
 8013f24:	f7ec fb90 	bl	8000648 <__aeabi_dmul>
 8013f28:	a361      	add	r3, pc, #388	; (adr r3, 80140b0 <__ieee754_log+0x320>)
 8013f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f2e:	f7ec f9d5 	bl	80002dc <__adddf3>
 8013f32:	4642      	mov	r2, r8
 8013f34:	464b      	mov	r3, r9
 8013f36:	f7ec fb87 	bl	8000648 <__aeabi_dmul>
 8013f3a:	a35f      	add	r3, pc, #380	; (adr r3, 80140b8 <__ieee754_log+0x328>)
 8013f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f40:	f7ec f9cc 	bl	80002dc <__adddf3>
 8013f44:	4642      	mov	r2, r8
 8013f46:	464b      	mov	r3, r9
 8013f48:	f7ec fb7e 	bl	8000648 <__aeabi_dmul>
 8013f4c:	a35c      	add	r3, pc, #368	; (adr r3, 80140c0 <__ieee754_log+0x330>)
 8013f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f52:	f7ec f9c3 	bl	80002dc <__adddf3>
 8013f56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f5a:	f7ec fb75 	bl	8000648 <__aeabi_dmul>
 8013f5e:	a35a      	add	r3, pc, #360	; (adr r3, 80140c8 <__ieee754_log+0x338>)
 8013f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f68:	4640      	mov	r0, r8
 8013f6a:	4649      	mov	r1, r9
 8013f6c:	f7ec fb6c 	bl	8000648 <__aeabi_dmul>
 8013f70:	a357      	add	r3, pc, #348	; (adr r3, 80140d0 <__ieee754_log+0x340>)
 8013f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f76:	f7ec f9b1 	bl	80002dc <__adddf3>
 8013f7a:	4642      	mov	r2, r8
 8013f7c:	464b      	mov	r3, r9
 8013f7e:	f7ec fb63 	bl	8000648 <__aeabi_dmul>
 8013f82:	a355      	add	r3, pc, #340	; (adr r3, 80140d8 <__ieee754_log+0x348>)
 8013f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f88:	f7ec f9a8 	bl	80002dc <__adddf3>
 8013f8c:	4642      	mov	r2, r8
 8013f8e:	464b      	mov	r3, r9
 8013f90:	f7ec fb5a 	bl	8000648 <__aeabi_dmul>
 8013f94:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8013f98:	4602      	mov	r2, r0
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8013fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013fa4:	f7ec f99a 	bl	80002dc <__adddf3>
 8013fa8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8013fac:	3551      	adds	r5, #81	; 0x51
 8013fae:	4335      	orrs	r5, r6
 8013fb0:	2d00      	cmp	r5, #0
 8013fb2:	4680      	mov	r8, r0
 8013fb4:	4689      	mov	r9, r1
 8013fb6:	dd48      	ble.n	801404a <__ieee754_log+0x2ba>
 8013fb8:	2200      	movs	r2, #0
 8013fba:	4b4d      	ldr	r3, [pc, #308]	; (80140f0 <__ieee754_log+0x360>)
 8013fbc:	4650      	mov	r0, sl
 8013fbe:	4659      	mov	r1, fp
 8013fc0:	f7ec fb42 	bl	8000648 <__aeabi_dmul>
 8013fc4:	4652      	mov	r2, sl
 8013fc6:	465b      	mov	r3, fp
 8013fc8:	f7ec fb3e 	bl	8000648 <__aeabi_dmul>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	460b      	mov	r3, r1
 8013fd0:	4606      	mov	r6, r0
 8013fd2:	460f      	mov	r7, r1
 8013fd4:	4640      	mov	r0, r8
 8013fd6:	4649      	mov	r1, r9
 8013fd8:	f7ec f980 	bl	80002dc <__adddf3>
 8013fdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fe0:	f7ec fb32 	bl	8000648 <__aeabi_dmul>
 8013fe4:	4680      	mov	r8, r0
 8013fe6:	4689      	mov	r9, r1
 8013fe8:	b964      	cbnz	r4, 8014004 <__ieee754_log+0x274>
 8013fea:	4602      	mov	r2, r0
 8013fec:	460b      	mov	r3, r1
 8013fee:	4630      	mov	r0, r6
 8013ff0:	4639      	mov	r1, r7
 8013ff2:	f7ec f971 	bl	80002d8 <__aeabi_dsub>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	4650      	mov	r0, sl
 8013ffc:	4659      	mov	r1, fp
 8013ffe:	f7ec f96b 	bl	80002d8 <__aeabi_dsub>
 8014002:	e6da      	b.n	8013dba <__ieee754_log+0x2a>
 8014004:	a322      	add	r3, pc, #136	; (adr r3, 8014090 <__ieee754_log+0x300>)
 8014006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801400a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801400e:	f7ec fb1b 	bl	8000648 <__aeabi_dmul>
 8014012:	a321      	add	r3, pc, #132	; (adr r3, 8014098 <__ieee754_log+0x308>)
 8014014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014018:	4604      	mov	r4, r0
 801401a:	460d      	mov	r5, r1
 801401c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014020:	f7ec fb12 	bl	8000648 <__aeabi_dmul>
 8014024:	4642      	mov	r2, r8
 8014026:	464b      	mov	r3, r9
 8014028:	f7ec f958 	bl	80002dc <__adddf3>
 801402c:	4602      	mov	r2, r0
 801402e:	460b      	mov	r3, r1
 8014030:	4630      	mov	r0, r6
 8014032:	4639      	mov	r1, r7
 8014034:	f7ec f950 	bl	80002d8 <__aeabi_dsub>
 8014038:	4652      	mov	r2, sl
 801403a:	465b      	mov	r3, fp
 801403c:	f7ec f94c 	bl	80002d8 <__aeabi_dsub>
 8014040:	4602      	mov	r2, r0
 8014042:	460b      	mov	r3, r1
 8014044:	4620      	mov	r0, r4
 8014046:	4629      	mov	r1, r5
 8014048:	e7d9      	b.n	8013ffe <__ieee754_log+0x26e>
 801404a:	4602      	mov	r2, r0
 801404c:	460b      	mov	r3, r1
 801404e:	4650      	mov	r0, sl
 8014050:	4659      	mov	r1, fp
 8014052:	f7ec f941 	bl	80002d8 <__aeabi_dsub>
 8014056:	e9dd 2300 	ldrd	r2, r3, [sp]
 801405a:	f7ec faf5 	bl	8000648 <__aeabi_dmul>
 801405e:	4606      	mov	r6, r0
 8014060:	460f      	mov	r7, r1
 8014062:	2c00      	cmp	r4, #0
 8014064:	f43f af25 	beq.w	8013eb2 <__ieee754_log+0x122>
 8014068:	a309      	add	r3, pc, #36	; (adr r3, 8014090 <__ieee754_log+0x300>)
 801406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801406e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014072:	f7ec fae9 	bl	8000648 <__aeabi_dmul>
 8014076:	a308      	add	r3, pc, #32	; (adr r3, 8014098 <__ieee754_log+0x308>)
 8014078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801407c:	4604      	mov	r4, r0
 801407e:	460d      	mov	r5, r1
 8014080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014084:	e729      	b.n	8013eda <__ieee754_log+0x14a>
 8014086:	2000      	movs	r0, #0
 8014088:	2100      	movs	r1, #0
 801408a:	e696      	b.n	8013dba <__ieee754_log+0x2a>
 801408c:	f3af 8000 	nop.w
 8014090:	fee00000 	.word	0xfee00000
 8014094:	3fe62e42 	.word	0x3fe62e42
 8014098:	35793c76 	.word	0x35793c76
 801409c:	3dea39ef 	.word	0x3dea39ef
 80140a0:	55555555 	.word	0x55555555
 80140a4:	3fd55555 	.word	0x3fd55555
 80140a8:	df3e5244 	.word	0xdf3e5244
 80140ac:	3fc2f112 	.word	0x3fc2f112
 80140b0:	96cb03de 	.word	0x96cb03de
 80140b4:	3fc74664 	.word	0x3fc74664
 80140b8:	94229359 	.word	0x94229359
 80140bc:	3fd24924 	.word	0x3fd24924
 80140c0:	55555593 	.word	0x55555593
 80140c4:	3fe55555 	.word	0x3fe55555
 80140c8:	d078c69f 	.word	0xd078c69f
 80140cc:	3fc39a09 	.word	0x3fc39a09
 80140d0:	1d8e78af 	.word	0x1d8e78af
 80140d4:	3fcc71c5 	.word	0x3fcc71c5
 80140d8:	9997fa04 	.word	0x9997fa04
 80140dc:	3fd99999 	.word	0x3fd99999
 80140e0:	c3500000 	.word	0xc3500000
 80140e4:	43500000 	.word	0x43500000
 80140e8:	7fefffff 	.word	0x7fefffff
 80140ec:	3ff00000 	.word	0x3ff00000
 80140f0:	3fe00000 	.word	0x3fe00000

080140f4 <copysign>:
 80140f4:	ec51 0b10 	vmov	r0, r1, d0
 80140f8:	ee11 0a90 	vmov	r0, s3
 80140fc:	ee10 2a10 	vmov	r2, s0
 8014100:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014104:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014108:	ea41 0300 	orr.w	r3, r1, r0
 801410c:	ec43 2b10 	vmov	d0, r2, r3
 8014110:	4770      	bx	lr
	...

08014114 <_init>:
 8014114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014116:	bf00      	nop
 8014118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801411a:	bc08      	pop	{r3}
 801411c:	469e      	mov	lr, r3
 801411e:	4770      	bx	lr

08014120 <_fini>:
 8014120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014122:	bf00      	nop
 8014124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014126:	bc08      	pop	{r3}
 8014128:	469e      	mov	lr, r3
 801412a:	4770      	bx	lr
