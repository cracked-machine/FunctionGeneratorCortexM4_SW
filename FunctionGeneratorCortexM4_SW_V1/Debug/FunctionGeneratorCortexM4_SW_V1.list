
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a348  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800a528  0800a528  0001a528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa9c  0800aa9c  00020bc8  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa9c  0800aa9c  00020bc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa9c  0800aa9c  00020bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa9c  0800aa9c  0001aa9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaa0  0800aaa0  0001aaa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc8  20000000  0800aaa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000bc8  0800b66c  00020bc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  0800b66c  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000283ca  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000543c  00000000  00000000  00048fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d58  00000000  00000000  0004e400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a30  00000000  00000000  00050158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ff1a  00000000  00000000  00051b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fae3  00000000  00000000  00081aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012427e  00000000  00000000  000a1585  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c5803  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dc0  00000000  00000000  001c5880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000bc8 	.word	0x20000bc8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a510 	.word	0x0800a510

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000bcc 	.word	0x20000bcc
 800021c:	0800a510 	.word	0x0800a510

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f008 fd4a 	bl	8008d5c <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f008 fce9 	bl	8008ca0 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f008 fef9 	bl	80090c8 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f008 fbd4 	bl	8008aa0 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f002 fec2 	bl	8003084 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fb96 	bl	8000a30 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f009 f987 	bl	8009618 <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800a528 	.word	0x0800a528
 8000314:	0800a538 	.word	0x0800a538

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8


	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 800031e:	4b4a      	ldr	r3, [pc, #296]	; (8000448 <DM_UpdateDisplay+0x130>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d002      	beq.n	800032c <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000326:	f000 f8b9 	bl	800049c <_DrawFuncSelectMenu>
 800032a:	e06d      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 800032c:	4b47      	ldr	r3, [pc, #284]	; (800044c <DM_UpdateDisplay+0x134>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <DM_UpdateDisplay+0x22>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawGainSelectMenu();
 8000334:	f000 fa7c 	bl	8000830 <_DrawGainSelectMenu>
 8000338:	e066      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else if(eNextFreqMenuStatus)		//  == ENABLE_FREQMENU
 800033a:	4b45      	ldr	r3, [pc, #276]	; (8000450 <DM_UpdateDisplay+0x138>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d02e      	beq.n	80003a0 <DM_UpdateDisplay+0x88>
	{
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
 8000342:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	2302      	movs	r3, #2
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2300      	movs	r3, #0
 800034e:	22d2      	movs	r2, #210	; 0xd2
 8000350:	2118      	movs	r1, #24
 8000352:	4840      	ldr	r0, [pc, #256]	; (8000454 <DM_UpdateDisplay+0x13c>)
 8000354:	f008 fba4 	bl	8008aa0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
 8000358:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2302      	movs	r3, #2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2300      	movs	r3, #0
 8000364:	22d2      	movs	r2, #210	; 0xd2
 8000366:	215d      	movs	r1, #93	; 0x5d
 8000368:	483b      	ldr	r0, [pc, #236]	; (8000458 <DM_UpdateDisplay+0x140>)
 800036a:	f008 fb99 	bl	8008aa0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
 800036e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	2302      	movs	r3, #2
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2300      	movs	r3, #0
 800037a:	22d2      	movs	r2, #210	; 0xd2
 800037c:	21af      	movs	r1, #175	; 0xaf
 800037e:	4837      	ldr	r0, [pc, #220]	; (800045c <DM_UpdateDisplay+0x144>)
 8000380:	f008 fb8e 	bl	8008aa0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
 8000384:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2302      	movs	r3, #2
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	2300      	movs	r3, #0
 8000390:	22d2      	movs	r2, #210	; 0xd2
 8000392:	21f7      	movs	r1, #247	; 0xf7
 8000394:	4832      	ldr	r0, [pc, #200]	; (8000460 <DM_UpdateDisplay+0x148>)
 8000396:	f008 fb83 	bl	8008aa0 <ILI9341_Draw_Text>

		_DrawFreqSelectMenu();
 800039a:	f000 fa87 	bl	80008ac <_DrawFreqSelectMenu>
 800039e:	e033      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 80003a0:	4b30      	ldr	r3, [pc, #192]	; (8000464 <DM_UpdateDisplay+0x14c>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d002      	beq.n	80003ae <DM_UpdateDisplay+0x96>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawBiasSelectMenu();
 80003a8:	f000 fac0 	bl	800092c <_DrawBiasSelectMenu>
 80003ac:	e02c      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else
	{
		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 80003ae:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	2302      	movs	r3, #2
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	2300      	movs	r3, #0
 80003ba:	22d2      	movs	r2, #210	; 0xd2
 80003bc:	210a      	movs	r1, #10
 80003be:	482a      	ldr	r0, [pc, #168]	; (8000468 <DM_UpdateDisplay+0x150>)
 80003c0:	f008 fb6e 	bl	8008aa0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 80003c4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	2302      	movs	r3, #2
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	2300      	movs	r3, #0
 80003d0:	22d2      	movs	r2, #210	; 0xd2
 80003d2:	2164      	movs	r1, #100	; 0x64
 80003d4:	4825      	ldr	r0, [pc, #148]	; (800046c <DM_UpdateDisplay+0x154>)
 80003d6:	f008 fb63 	bl	8008aa0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 80003da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	2302      	movs	r3, #2
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2300      	movs	r3, #0
 80003e6:	22d2      	movs	r2, #210	; 0xd2
 80003e8:	21af      	movs	r1, #175	; 0xaf
 80003ea:	4821      	ldr	r0, [pc, #132]	; (8000470 <DM_UpdateDisplay+0x158>)
 80003ec:	f008 fb58 	bl	8008aa0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 80003f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	2302      	movs	r3, #2
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2300      	movs	r3, #0
 80003fc:	22d2      	movs	r2, #210	; 0xd2
 80003fe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000402:	481c      	ldr	r0, [pc, #112]	; (8000474 <DM_UpdateDisplay+0x15c>)
 8000404:	f008 fb4c 	bl	8008aa0 <ILI9341_Draw_Text>
	}

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 8000408:	2300      	movs	r3, #0
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	2300      	movs	r3, #0
 800040e:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <DM_UpdateDisplay+0x160>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	b29b      	uxth	r3, r3
 8000416:	4639      	mov	r1, r7
 8000418:	2205      	movs	r2, #5
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fb4c 	bl	8000ab8 <DM_AddDigitPadding>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d10b      	bne.n	800043e <DM_UpdateDisplay+0x126>
		ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 8000426:	4638      	mov	r0, r7
 8000428:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2302      	movs	r3, #2
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2300      	movs	r3, #0
 8000434:	2232      	movs	r2, #50	; 0x32
 8000436:	f44f 7182 	mov.w	r1, #260	; 0x104
 800043a:	f008 fb31 	bl	8008aa0 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000be4 	.word	0x20000be4
 800044c:	20000be5 	.word	0x20000be5
 8000450:	20000be6 	.word	0x20000be6
 8000454:	0800a548 	.word	0x0800a548
 8000458:	0800a54c 	.word	0x0800a54c
 800045c:	0800a554 	.word	0x0800a554
 8000460:	0800a55c 	.word	0x0800a55c
 8000464:	20000be7 	.word	0x20000be7
 8000468:	0800a564 	.word	0x0800a564
 800046c:	0800a56c 	.word	0x0800a56c
 8000470:	0800a574 	.word	0x0800a574
 8000474:	0800a57c 	.word	0x0800a57c
 8000478:	40012c00 	.word	0x40012c00

0800047c <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000486:	4a04      	ldr	r2, [pc, #16]	; (8000498 <DM_ShowFuncSelectMenu+0x1c>)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	7013      	strb	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	20000be4 	.word	0x20000be4

0800049c <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af02      	add	r7, sp, #8

	switch(FuncO_GetOutputMode())
 80004a2:	f000 fea5 	bl	80011f0 <FuncO_GetOutputMode>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b05      	cmp	r3, #5
 80004aa:	f200 81a1 	bhi.w	80007f0 <_DrawFuncSelectMenu+0x354>
 80004ae:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <_DrawFuncSelectMenu+0x18>)
 80004b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b4:	080004cd 	.word	0x080004cd
 80004b8:	08000553 	.word	0x08000553
 80004bc:	080005d9 	.word	0x080005d9
 80004c0:	0800065f 	.word	0x0800065f
 80004c4:	080006e5 	.word	0x080006e5
 80004c8:	0800076b 	.word	0x0800076b
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 80004cc:	2300      	movs	r3, #0
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	2302      	movs	r3, #2
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d8:	221e      	movs	r2, #30
 80004da:	210a      	movs	r1, #10
 80004dc:	48c6      	ldr	r0, [pc, #792]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 80004de:	f008 fadf 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80004e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	2302      	movs	r3, #2
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	2300      	movs	r3, #0
 80004ee:	2232      	movs	r2, #50	; 0x32
 80004f0:	210a      	movs	r1, #10
 80004f2:	48c2      	ldr	r0, [pc, #776]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 80004f4:	f008 fad4 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80004f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2302      	movs	r3, #2
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2246      	movs	r2, #70	; 0x46
 8000506:	210a      	movs	r1, #10
 8000508:	48bd      	ldr	r0, [pc, #756]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 800050a:	f008 fac9 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800050e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	225a      	movs	r2, #90	; 0x5a
 800051c:	210a      	movs	r1, #10
 800051e:	48b9      	ldr	r0, [pc, #740]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 8000520:	f008 fabe 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2302      	movs	r3, #2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	226e      	movs	r2, #110	; 0x6e
 8000532:	210a      	movs	r1, #10
 8000534:	48b4      	ldr	r0, [pc, #720]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 8000536:	f008 fab3 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 800053a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	2302      	movs	r3, #2
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	2282      	movs	r2, #130	; 0x82
 8000548:	210a      	movs	r1, #10
 800054a:	48b0      	ldr	r0, [pc, #704]	; (800080c <_DrawFuncSelectMenu+0x370>)
 800054c:	f008 faa8 	bl	8008aa0 <ILI9341_Draw_Text>
			break;
 8000550:	e14e      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2302      	movs	r3, #2
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	221e      	movs	r2, #30
 8000560:	210a      	movs	r1, #10
 8000562:	48a5      	ldr	r0, [pc, #660]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 8000564:	f008 fa9c 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 8000568:	2300      	movs	r3, #0
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2302      	movs	r3, #2
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000574:	2232      	movs	r2, #50	; 0x32
 8000576:	210a      	movs	r1, #10
 8000578:	48a0      	ldr	r0, [pc, #640]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 800057a:	f008 fa91 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2246      	movs	r2, #70	; 0x46
 800058c:	210a      	movs	r1, #10
 800058e:	489c      	ldr	r0, [pc, #624]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 8000590:	f008 fa86 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2302      	movs	r3, #2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	225a      	movs	r2, #90	; 0x5a
 80005a2:	210a      	movs	r1, #10
 80005a4:	4897      	ldr	r0, [pc, #604]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 80005a6:	f008 fa7b 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	226e      	movs	r2, #110	; 0x6e
 80005b8:	210a      	movs	r1, #10
 80005ba:	4893      	ldr	r0, [pc, #588]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 80005bc:	f008 fa70 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2282      	movs	r2, #130	; 0x82
 80005ce:	210a      	movs	r1, #10
 80005d0:	488e      	ldr	r0, [pc, #568]	; (800080c <_DrawFuncSelectMenu+0x370>)
 80005d2:	f008 fa65 	bl	8008aa0 <ILI9341_Draw_Text>
			break;
 80005d6:	e10b      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2302      	movs	r3, #2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	221e      	movs	r2, #30
 80005e6:	210a      	movs	r1, #10
 80005e8:	4883      	ldr	r0, [pc, #524]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 80005ea:	f008 fa59 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80005ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	2232      	movs	r2, #50	; 0x32
 80005fc:	210a      	movs	r1, #10
 80005fe:	487f      	ldr	r0, [pc, #508]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 8000600:	f008 fa4e 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 8000604:	2300      	movs	r3, #0
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000610:	2246      	movs	r2, #70	; 0x46
 8000612:	210a      	movs	r1, #10
 8000614:	487a      	ldr	r0, [pc, #488]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 8000616:	f008 fa43 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2302      	movs	r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	225a      	movs	r2, #90	; 0x5a
 8000628:	210a      	movs	r1, #10
 800062a:	4876      	ldr	r0, [pc, #472]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 800062c:	f008 fa38 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	226e      	movs	r2, #110	; 0x6e
 800063e:	210a      	movs	r1, #10
 8000640:	4871      	ldr	r0, [pc, #452]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 8000642:	f008 fa2d 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2302      	movs	r3, #2
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	2282      	movs	r2, #130	; 0x82
 8000654:	210a      	movs	r1, #10
 8000656:	486d      	ldr	r0, [pc, #436]	; (800080c <_DrawFuncSelectMenu+0x370>)
 8000658:	f008 fa22 	bl	8008aa0 <ILI9341_Draw_Text>
			break;
 800065c:	e0c8      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800065e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2302      	movs	r3, #2
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	221e      	movs	r2, #30
 800066c:	210a      	movs	r1, #10
 800066e:	4862      	ldr	r0, [pc, #392]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 8000670:	f008 fa16 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	2232      	movs	r2, #50	; 0x32
 8000682:	210a      	movs	r1, #10
 8000684:	485d      	ldr	r0, [pc, #372]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 8000686:	f008 fa0b 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800068a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	2302      	movs	r3, #2
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	2246      	movs	r2, #70	; 0x46
 8000698:	210a      	movs	r1, #10
 800069a:	4859      	ldr	r0, [pc, #356]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 800069c:	f008 fa00 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 80006a0:	2300      	movs	r3, #0
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2302      	movs	r3, #2
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ac:	225a      	movs	r2, #90	; 0x5a
 80006ae:	210a      	movs	r1, #10
 80006b0:	4854      	ldr	r0, [pc, #336]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 80006b2:	f008 f9f5 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80006b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2302      	movs	r3, #2
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	226e      	movs	r2, #110	; 0x6e
 80006c4:	210a      	movs	r1, #10
 80006c6:	4850      	ldr	r0, [pc, #320]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 80006c8:	f008 f9ea 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80006cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2302      	movs	r3, #2
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2300      	movs	r3, #0
 80006d8:	2282      	movs	r2, #130	; 0x82
 80006da:	210a      	movs	r1, #10
 80006dc:	484b      	ldr	r0, [pc, #300]	; (800080c <_DrawFuncSelectMenu+0x370>)
 80006de:	f008 f9df 	bl	8008aa0 <ILI9341_Draw_Text>
			break;
 80006e2:	e085      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80006e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	2302      	movs	r3, #2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	221e      	movs	r2, #30
 80006f2:	210a      	movs	r1, #10
 80006f4:	4840      	ldr	r0, [pc, #256]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 80006f6:	f008 f9d3 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2302      	movs	r3, #2
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	2232      	movs	r2, #50	; 0x32
 8000708:	210a      	movs	r1, #10
 800070a:	483c      	ldr	r0, [pc, #240]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 800070c:	f008 f9c8 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2302      	movs	r3, #2
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2300      	movs	r3, #0
 800071c:	2246      	movs	r2, #70	; 0x46
 800071e:	210a      	movs	r1, #10
 8000720:	4837      	ldr	r0, [pc, #220]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 8000722:	f008 f9bd 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	2302      	movs	r3, #2
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	225a      	movs	r2, #90	; 0x5a
 8000734:	210a      	movs	r1, #10
 8000736:	4833      	ldr	r0, [pc, #204]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 8000738:	f008 f9b2 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 800073c:	2300      	movs	r3, #0
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2302      	movs	r3, #2
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000748:	226e      	movs	r2, #110	; 0x6e
 800074a:	210a      	movs	r1, #10
 800074c:	482e      	ldr	r0, [pc, #184]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 800074e:	f008 f9a7 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2302      	movs	r3, #2
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2300      	movs	r3, #0
 800075e:	2282      	movs	r2, #130	; 0x82
 8000760:	210a      	movs	r1, #10
 8000762:	482a      	ldr	r0, [pc, #168]	; (800080c <_DrawFuncSelectMenu+0x370>)
 8000764:	f008 f99c 	bl	8008aa0 <ILI9341_Draw_Text>
			break;
 8000768:	e042      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2302      	movs	r3, #2
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2300      	movs	r3, #0
 8000776:	221e      	movs	r2, #30
 8000778:	210a      	movs	r1, #10
 800077a:	481f      	ldr	r0, [pc, #124]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 800077c:	f008 f990 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2302      	movs	r3, #2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	2232      	movs	r2, #50	; 0x32
 800078e:	210a      	movs	r1, #10
 8000790:	481a      	ldr	r0, [pc, #104]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 8000792:	f008 f985 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	2302      	movs	r3, #2
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2300      	movs	r3, #0
 80007a2:	2246      	movs	r2, #70	; 0x46
 80007a4:	210a      	movs	r1, #10
 80007a6:	4816      	ldr	r0, [pc, #88]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 80007a8:	f008 f97a 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80007ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2302      	movs	r3, #2
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	225a      	movs	r2, #90	; 0x5a
 80007ba:	210a      	movs	r1, #10
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 80007be:	f008 f96f 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80007c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	2302      	movs	r3, #2
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	226e      	movs	r2, #110	; 0x6e
 80007d0:	210a      	movs	r1, #10
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 80007d4:	f008 f964 	bl	8008aa0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 80007d8:	2300      	movs	r3, #0
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	2302      	movs	r3, #2
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e4:	2282      	movs	r2, #130	; 0x82
 80007e6:	210a      	movs	r1, #10
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <_DrawFuncSelectMenu+0x370>)
 80007ea:	f008 f959 	bl	8008aa0 <ILI9341_Draw_Text>
			break;
 80007ee:	bf00      	nop

	}

}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	0800a584 	.word	0x0800a584
 80007fc:	0800a58c 	.word	0x0800a58c
 8000800:	0800a598 	.word	0x0800a598
 8000804:	0800a5a0 	.word	0x0800a5a0
 8000808:	0800a5ac 	.word	0x0800a5ac
 800080c:	0800a5b8 	.word	0x0800a5b8

08000810 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <DM_ShowGainSelectMenu+0x1c>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	7013      	strb	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	20000be5 	.word	0x20000be5

08000830 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	2302      	movs	r3, #2
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2300      	movs	r3, #0
 8000842:	2278      	movs	r2, #120	; 0x78
 8000844:	210a      	movs	r1, #10
 8000846:	4810      	ldr	r0, [pc, #64]	; (8000888 <_DrawGainSelectMenu+0x58>)
 8000848:	f008 f92a 	bl	8008aa0 <ILI9341_Draw_Text>

	char gain[4] = "";
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
 8000850:	f000 fdc6 	bl	80013e0 <GO_GetOutputGain>
 8000854:	4603      	mov	r3, r0
 8000856:	b29b      	uxth	r3, r3
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	2204      	movs	r2, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f92b 	bl	8000ab8 <DM_AddDigitPadding>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10a      	bne.n	800087e <_DrawGainSelectMenu+0x4e>
		ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 8000868:	1d38      	adds	r0, r7, #4
 800086a:	2300      	movs	r3, #0
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	2302      	movs	r3, #2
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000876:	2278      	movs	r2, #120	; 0x78
 8000878:	21fa      	movs	r1, #250	; 0xfa
 800087a:	f008 f911 	bl	8008aa0 <ILI9341_Draw_Text>

}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	0800a5c0 	.word	0x0800a5c0

0800088c <DM_ShowFreqSelectMenu>:
 *
 *
 *
 */
void DM_ShowFreqSelectMenu(eFreqMenu_Status pValue)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <DM_ShowFreqSelectMenu+0x1c>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	7013      	strb	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	20000be6 	.word	0x20000be6

080008ac <_DrawFreqSelectMenu>:
 *
 *
 *
 */
void _DrawFreqSelectMenu()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 120, BLACK, 2, WHITE);
 80008b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2300      	movs	r3, #0
 80008be:	2278      	movs	r2, #120	; 0x78
 80008c0:	210a      	movs	r1, #10
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <_DrawFreqSelectMenu+0x5c>)
 80008c4:	f008 f8ec 	bl	8008aa0 <ILI9341_Draw_Text>

	char freq[6] = "";
 80008c8:	2300      	movs	r3, #0
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 80008d0:	f000 fbd0 	bl	8001074 <FreqO_GetOutputFreq>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	4639      	mov	r1, r7
 80008da:	2206      	movs	r2, #6
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f8eb 	bl	8000ab8 <DM_AddDigitPadding>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10a      	bne.n	80008fe <_DrawFreqSelectMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
 80008e8:	4638      	mov	r0, r7
 80008ea:	2300      	movs	r3, #0
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	2302      	movs	r3, #2
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	2278      	movs	r2, #120	; 0x78
 80008f8:	21fa      	movs	r1, #250	; 0xfa
 80008fa:	f008 f8d1 	bl	8008aa0 <ILI9341_Draw_Text>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	0800a5d8 	.word	0x0800a5d8

0800090c <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <DM_ShowBiasSelectMenu+0x1c>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	7013      	strb	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	20000be7 	.word	0x20000be7

0800092c <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 8000932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	2302      	movs	r3, #2
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2278      	movs	r2, #120	; 0x78
 8000940:	210a      	movs	r1, #10
 8000942:	4823      	ldr	r0, [pc, #140]	; (80009d0 <_DrawBiasSelectMenu+0xa4>)
 8000944:	f008 f8ac 	bl	8008aa0 <ILI9341_Draw_Text>

	char bias[5] = "";
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	2300      	movs	r3, #0
 800094e:	733b      	strb	r3, [r7, #12]
	//snprintf(bias, sizeof(bias), "%u", (uint8_t)BO_GetOutputBias());
	if(DM_AddDigitPadding((uint16_t)BO_GetOutputBias(), bias, sizeof(bias)) == 0)
 8000950:	f000 fb76 	bl	8001040 <BO_GetOutputBias>
 8000954:	4603      	mov	r3, r0
 8000956:	b29b      	uxth	r3, r3
 8000958:	f107 0108 	add.w	r1, r7, #8
 800095c:	2205      	movs	r2, #5
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f8aa 	bl	8000ab8 <DM_AddDigitPadding>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d12d      	bne.n	80009c6 <_DrawBiasSelectMenu+0x9a>
	{
		if(BO_GetBiasPolarity())
 800096a:	f000 fb17 	bl	8000f9c <BO_GetBiasPolarity>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d014      	beq.n	800099e <_DrawBiasSelectMenu+0x72>
		{
			char symbol[2] = "+\0";
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <_DrawBiasSelectMenu+0xa8>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	80bb      	strh	r3, [r7, #4]
			//char test[10] = strcat(symbol, "10");
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 800097a:	f107 0208 	add.w	r2, r7, #8
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f008 fe84 	bl	8009690 <strcat>
 8000988:	2300      	movs	r3, #0
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	2302      	movs	r3, #2
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000994:	2278      	movs	r2, #120	; 0x78
 8000996:	21fa      	movs	r1, #250	; 0xfa
 8000998:	f008 f882 	bl	8008aa0 <ILI9341_Draw_Text>
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
		}
	}

}
 800099c:	e013      	b.n	80009c6 <_DrawBiasSelectMenu+0x9a>
			char symbol[2] = "-\0";
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <_DrawBiasSelectMenu+0xac>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	803b      	strh	r3, [r7, #0]
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 80009a4:	f107 0208 	add.w	r2, r7, #8
 80009a8:	463b      	mov	r3, r7
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f008 fe6f 	bl	8009690 <strcat>
 80009b2:	2300      	movs	r3, #0
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	2302      	movs	r3, #2
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009be:	2278      	movs	r2, #120	; 0x78
 80009c0:	21fa      	movs	r1, #250	; 0xfa
 80009c2:	f008 f86d 	bl	8008aa0 <ILI9341_Draw_Text>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	0800a5f0 	.word	0x0800a5f0
 80009d4:	0800a608 	.word	0x0800a608
 80009d8:	0800a60c 	.word	0x0800a60c

080009dc <DM_DigitCount>:
 *
 *
 *
 */
int DM_DigitCount(int num)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	if(num < 10)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b09      	cmp	r3, #9
 80009e8:	dc01      	bgt.n	80009ee <DM_DigitCount+0x12>
		return 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e018      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 100)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b63      	cmp	r3, #99	; 0x63
 80009f2:	dc01      	bgt.n	80009f8 <DM_DigitCount+0x1c>
		return 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	e013      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 1000)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009fe:	da01      	bge.n	8000a04 <DM_DigitCount+0x28>
		return 3;
 8000a00:	2303      	movs	r3, #3
 8000a02:	e00d      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 10000)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	dc01      	bgt.n	8000a12 <DM_DigitCount+0x36>
		return 4;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e006      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 100000)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <DM_DigitCount+0x50>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	dc01      	bgt.n	8000a1e <DM_DigitCount+0x42>
		return 5;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e000      	b.n	8000a20 <DM_DigitCount+0x44>
	else
		return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	0001869f 	.word	0x0001869f

08000a30 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af04      	add	r7, sp, #16


	ILI9341_Fill_Screen(WHITE);
 8000a36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a3a:	f008 fb45 	bl	80090c8 <ILI9341_Fill_Screen>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <DM_RefreshBackgroundLayout+0x84>)
 8000a40:	8818      	ldrh	r0, [r3, #0]
 8000a42:	2300      	movs	r3, #0
 8000a44:	9302      	str	r3, [sp, #8]
 8000a46:	2302      	movs	r3, #2
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2332      	movs	r3, #50	; 0x32
 8000a52:	2250      	movs	r2, #80	; 0x50
 8000a54:	21c8      	movs	r1, #200	; 0xc8
 8000a56:	f007 feb9 	bl	80087cc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <DM_RefreshBackgroundLayout+0x84>)
 8000a5c:	8858      	ldrh	r0, [r3, #2]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	2302      	movs	r3, #2
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2332      	movs	r3, #50	; 0x32
 8000a6e:	2250      	movs	r2, #80	; 0x50
 8000a70:	21c8      	movs	r1, #200	; 0xc8
 8000a72:	f007 feab 	bl	80087cc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <DM_RefreshBackgroundLayout+0x84>)
 8000a78:	8898      	ldrh	r0, [r3, #4]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9302      	str	r3, [sp, #8]
 8000a7e:	2302      	movs	r3, #2
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2332      	movs	r3, #50	; 0x32
 8000a8a:	2250      	movs	r2, #80	; 0x50
 8000a8c:	21c8      	movs	r1, #200	; 0xc8
 8000a8e:	f007 fe9d 	bl	80087cc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <DM_RefreshBackgroundLayout+0x84>)
 8000a94:	88d8      	ldrh	r0, [r3, #6]
 8000a96:	2300      	movs	r3, #0
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2332      	movs	r3, #50	; 0x32
 8000aa6:	2250      	movs	r2, #80	; 0x50
 8000aa8:	21c8      	movs	r1, #200	; 0xc8
 8000aaa:	f007 fe8f 	bl	80087cc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <DM_AddDigitPadding>:
 *				1 if buflen is invalid size
 *				2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	80fb      	strh	r3, [r7, #6]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <DM_AddDigitPadding+0x1c>
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	2b06      	cmp	r3, #6
 8000ad2:	d901      	bls.n	8000ad8 <DM_AddDigitPadding+0x20>
		return 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e048      	b.n	8000b6a <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8000adc:	89fb      	ldrh	r3, [r7, #14]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff7c 	bl	80009dc <DM_DigitCount>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b05      	cmp	r3, #5
 8000ae8:	d83e      	bhi.n	8000b68 <DM_AddDigitPadding+0xb0>
 8000aea:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <DM_AddDigitPadding+0x38>)
 8000aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af0:	08000b09 	.word	0x08000b09
 8000af4:	08000b19 	.word	0x08000b19
 8000af8:	08000b29 	.word	0x08000b29
 8000afc:	08000b39 	.word	0x08000b39
 8000b00:	08000b49 	.word	0x08000b49
 8000b04:	08000b59 	.word	0x08000b59
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <DM_AddDigitPadding+0xbc>)
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6838      	ldr	r0, [r7, #0]
 8000b10:	f008 fd8a 	bl	8009628 <sniprintf>
			return 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	e028      	b.n	8000b6a <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8000b18:	88b9      	ldrh	r1, [r7, #4]
 8000b1a:	89fb      	ldrh	r3, [r7, #14]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <DM_AddDigitPadding+0xc0>)
 8000b1e:	6838      	ldr	r0, [r7, #0]
 8000b20:	f008 fd82 	bl	8009628 <sniprintf>
			return 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	e020      	b.n	8000b6a <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8000b28:	88b9      	ldrh	r1, [r7, #4]
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <DM_AddDigitPadding+0xc4>)
 8000b2e:	6838      	ldr	r0, [r7, #0]
 8000b30:	f008 fd7a 	bl	8009628 <sniprintf>
			return 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e018      	b.n	8000b6a <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8000b38:	88b9      	ldrh	r1, [r7, #4]
 8000b3a:	89fb      	ldrh	r3, [r7, #14]
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <DM_AddDigitPadding+0xc8>)
 8000b3e:	6838      	ldr	r0, [r7, #0]
 8000b40:	f008 fd72 	bl	8009628 <sniprintf>
			return 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e010      	b.n	8000b6a <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8000b48:	88b9      	ldrh	r1, [r7, #4]
 8000b4a:	89fb      	ldrh	r3, [r7, #14]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <DM_AddDigitPadding+0xcc>)
 8000b4e:	6838      	ldr	r0, [r7, #0]
 8000b50:	f008 fd6a 	bl	8009628 <sniprintf>
			return 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e008      	b.n	8000b6a <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8000b58:	88b9      	ldrh	r1, [r7, #4]
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <DM_AddDigitPadding+0xd0>)
 8000b5e:	6838      	ldr	r0, [r7, #0]
 8000b60:	f008 fd62 	bl	8009628 <sniprintf>
			return 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	e000      	b.n	8000b6a <DM_AddDigitPadding+0xb2>

	}

	return 2;
 8000b68:	2302      	movs	r3, #2


}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	0800a648 	.word	0x0800a648
 8000b78:	0800a650 	.word	0x0800a650
 8000b7c:	0800a658 	.word	0x0800a658
 8000b80:	0800a660 	.word	0x0800a660
 8000b84:	0800a668 	.word	0x0800a668
 8000b88:	0800a66c 	.word	0x0800a66c

08000b8c <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8000b90:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	f200 808a 	bhi.w	8000cae <EM_ProcessEvent+0x122>
 8000b9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <EM_ProcessEvent+0x14>)
 8000b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba0:	08000bb5 	.word	0x08000bb5
 8000ba4:	08000c07 	.word	0x08000c07
 8000ba8:	08000c31 	.word	0x08000c31
 8000bac:	08000c5b 	.word	0x08000c5b
 8000bb0:	08000c85 	.word	0x08000c85
	{
		case Idle_State:
			if(eNewEvent == evFuncMenu)
 8000bb4:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d105      	bne.n	8000bc8 <EM_ProcessEvent+0x3c>
			{
				eNextState = _FuncMenuHandler();
 8000bbc:	f000 f888 	bl	8000cd0 <_FuncMenuHandler>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000bc6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evFreqMenu)
 8000bc8:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d105      	bne.n	8000bdc <EM_ProcessEvent+0x50>
			{
				eNextState = _FreqMenuHandler();
 8000bd0:	f000 f97c 	bl	8000ecc <_FreqMenuHandler>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000bda:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGainMenu)
 8000bdc:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d105      	bne.n	8000bf0 <EM_ProcessEvent+0x64>
			{
				eNextState = _GainMenuHandler();
 8000be4:	f000 f8c8 	bl	8000d78 <_GainMenuHandler>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000bee:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBiasMenu)
 8000bf0:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d15c      	bne.n	8000cb2 <EM_ProcessEvent+0x126>
			{
				eNextState = _BiasMenuHandler();
 8000bf8:	f000 f912 	bl	8000e20 <_BiasMenuHandler>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000c02:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000c04:	e055      	b.n	8000cb2 <EM_ProcessEvent+0x126>

		case Func_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b05      	cmp	r3, #5
 8000c0c:	d105      	bne.n	8000c1a <EM_ProcessEvent+0x8e>
			{
				eNextState = _FuncSetHandler();
 8000c0e:	f000 f87f 	bl	8000d10 <_FuncSetHandler>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000c18:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d149      	bne.n	8000cb6 <EM_ProcessEvent+0x12a>
			{
				eNextState = _ExitFuncMenuHandler();
 8000c22:	f000 f887 	bl	8000d34 <_ExitFuncMenuHandler>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000c2c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c2e:	e042      	b.n	8000cb6 <EM_ProcessEvent+0x12a>

		case Gain_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d105      	bne.n	8000c44 <EM_ProcessEvent+0xb8>
			{
				eNextState = _GainSetHandler();
 8000c38:	f000 f8be 	bl	8000db8 <_GainSetHandler>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000c42:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b06      	cmp	r3, #6
 8000c4a:	d136      	bne.n	8000cba <EM_ProcessEvent+0x12e>
			{
				eNextState = _ExitGainMenuHandler();
 8000c4c:	f000 f8c6 	bl	8000ddc <_ExitGainMenuHandler>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000c56:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c58:	e02f      	b.n	8000cba <EM_ProcessEvent+0x12e>

		case Freq_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d105      	bne.n	8000c6e <EM_ProcessEvent+0xe2>
			{
				eNextState = _FreqSetHandler();
 8000c62:	f000 f957 	bl	8000f14 <_FreqSetHandler>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000c6c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d123      	bne.n	8000cbe <EM_ProcessEvent+0x132>
			{
				eNextState = _ExitFreqMenuHandler();
 8000c76:	f000 f95f 	bl	8000f38 <_ExitFreqMenuHandler>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000c80:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c82:	e01c      	b.n	8000cbe <EM_ProcessEvent+0x132>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b05      	cmp	r3, #5
 8000c8a:	d105      	bne.n	8000c98 <EM_ProcessEvent+0x10c>
			{
				eNextState = _BiasSetHandler();
 8000c8c:	f000 f8ea 	bl	8000e64 <_BiasSetHandler>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000c96:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <EM_ProcessEvent+0x140>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b06      	cmp	r3, #6
 8000c9e:	d110      	bne.n	8000cc2 <EM_ProcessEvent+0x136>
			{
				eNextState = _ExitBiasMenuHandler();
 8000ca0:	f000 f8f2 	bl	8000e88 <_ExitBiasMenuHandler>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <EM_ProcessEvent+0x13c>)
 8000caa:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000cac:	e009      	b.n	8000cc2 <EM_ProcessEvent+0x136>

		default:
			break;
 8000cae:	bf00      	nop
 8000cb0:	e008      	b.n	8000cc4 <EM_ProcessEvent+0x138>
			break;
 8000cb2:	bf00      	nop
 8000cb4:	e006      	b.n	8000cc4 <EM_ProcessEvent+0x138>
			break;
 8000cb6:	bf00      	nop
 8000cb8:	e004      	b.n	8000cc4 <EM_ProcessEvent+0x138>
			break;
 8000cba:	bf00      	nop
 8000cbc:	e002      	b.n	8000cc4 <EM_ProcessEvent+0x138>
			break;
 8000cbe:	bf00      	nop
 8000cc0:	e000      	b.n	8000cc4 <EM_ProcessEvent+0x138>
			break;
 8000cc2:	bf00      	nop
	}

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000be8 	.word	0x20000be8
 8000ccc:	20000be9 	.word	0x20000be9

08000cd0 <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <_FuncMenuHandler+0x34>)
 8000cd6:	f008 fc9f 	bl	8009618 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <_FuncMenuHandler+0x38>)
 8000cdc:	f006 fa9e 	bl	800721c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000ce0:	f7ff fea6 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <_FuncMenuHandler+0x38>)
 8000ce6:	f006 fa63 	bl	80071b0 <HAL_TIM_Base_Start_IT>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff fbc6 	bl	800047c <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 20;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <_FuncMenuHandler+0x3c>)
 8000cf2:	2214      	movs	r2, #20
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 20;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <_FuncMenuHandler+0x3c>)
 8000cf8:	2214      	movs	r2, #20
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	0800a674 	.word	0x0800a674
 8000d08:	20000e98 	.word	0x20000e98
 8000d0c:	40012c00 	.word	0x40012c00

08000d10 <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <_FuncSetHandler+0x1c>)
 8000d16:	f008 fc7f 	bl	8009618 <puts>
#endif


	FuncO_ModifyOutput();
 8000d1a:	f000 f9b7 	bl	800108c <FuncO_ModifyOutput>
	eNewEvent = evFuncMenu;
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <_FuncSetHandler+0x20>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8000d24:	2301      	movs	r3, #1
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	0800a690 	.word	0x0800a690
 8000d30:	20000be9 	.word	0x20000be9

08000d34 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <_ExitFuncMenuHandler+0x34>)
 8000d3a:	f008 fc6d 	bl	8009618 <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fb9c 	bl	800047c <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <_ExitFuncMenuHandler+0x38>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d4c:	4808      	ldr	r0, [pc, #32]	; (8000d70 <_ExitFuncMenuHandler+0x3c>)
 8000d4e:	f006 fa65 	bl	800721c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d52:	f7ff fe6d 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <_ExitFuncMenuHandler+0x3c>)
 8000d58:	f006 fa2a 	bl	80071b0 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <_ExitFuncMenuHandler+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	0800a6b0 	.word	0x0800a6b0
 8000d6c:	40012c00 	.word	0x40012c00
 8000d70:	20000e98 	.word	0x20000e98
 8000d74:	20000be9 	.word	0x20000be9

08000d78 <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <_GainMenuHandler+0x34>)
 8000d7e:	f008 fc4b 	bl	8009618 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d82:	480b      	ldr	r0, [pc, #44]	; (8000db0 <_GainMenuHandler+0x38>)
 8000d84:	f006 fa4a 	bl	800721c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d88:	f7ff fe52 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <_GainMenuHandler+0x38>)
 8000d8e:	f006 fa0f 	bl	80071b0 <HAL_TIM_Base_Start_IT>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f7ff fd3c 	bl	8000810 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 7;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <_GainMenuHandler+0x3c>)
 8000d9a:	2207      	movs	r2, #7
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 32;
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <_GainMenuHandler+0x3c>)
 8000da0:	2220      	movs	r2, #32
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8000da4:	2302      	movs	r3, #2
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0800a6cc 	.word	0x0800a6cc
 8000db0:	20000e98 	.word	0x20000e98
 8000db4:	40012c00 	.word	0x40012c00

08000db8 <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <_GainSetHandler+0x1c>)
 8000dbe:	f008 fc2b 	bl	8009618 <puts>
#endif

	GO_ModifyOutput();
 8000dc2:	f000 fa21 	bl	8001208 <GO_ModifyOutput>

	eNewEvent = evGainMenu;
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <_GainSetHandler+0x20>)
 8000dc8:	2203      	movs	r2, #3
 8000dca:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8000dcc:	2302      	movs	r3, #2
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	0800a6e4 	.word	0x0800a6e4
 8000dd8:	20000be9 	.word	0x20000be9

08000ddc <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <_ExitGainMenuHandler+0x34>)
 8000de2:	f008 fc19 	bl	8009618 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fd12 	bl	8000810 <DM_ShowGainSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <_ExitGainMenuHandler+0x38>)
 8000dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000df4:	4808      	ldr	r0, [pc, #32]	; (8000e18 <_ExitGainMenuHandler+0x3c>)
 8000df6:	f006 fa11 	bl	800721c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000dfa:	f7ff fe19 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <_ExitGainMenuHandler+0x3c>)
 8000e00:	f006 f9d6 	bl	80071b0 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <_ExitGainMenuHandler+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	0800a6fc 	.word	0x0800a6fc
 8000e14:	40012c00 	.word	0x40012c00
 8000e18:	20000e98 	.word	0x20000e98
 8000e1c:	20000be9 	.word	0x20000be9

08000e20 <_BiasMenuHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuHandler()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <_BiasMenuHandler+0x38>)
 8000e26:	f008 fbf7 	bl	8009618 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <_BiasMenuHandler+0x3c>)
 8000e2c:	f006 f9f6 	bl	800721c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000e30:	f7ff fdfe 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <_BiasMenuHandler+0x3c>)
 8000e36:	f006 f9bb 	bl	80071b0 <HAL_TIM_Base_Start_IT>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff fd66 	bl	800090c <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_BiasMenuHandler+0x40>)
 8000e42:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <_BiasMenuHandler+0x40>)
 8000e4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8000e50:	2304      	movs	r3, #4
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	0800a718 	.word	0x0800a718
 8000e5c:	20000e98 	.word	0x20000e98
 8000e60:	40012c00 	.word	0x40012c00

08000e64 <_BiasSetHandler>:
 *
 *
 *
 */
eSystemState _BiasSetHandler()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <_BiasSetHandler+0x1c>)
 8000e6a:	f008 fbd5 	bl	8009618 <puts>
#endif

	BO_ModifyOutput();
 8000e6e:	f000 f8a1 	bl	8000fb4 <BO_ModifyOutput>

	eNewEvent = evBiasMenu;
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <_BiasSetHandler+0x20>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8000e78:	2304      	movs	r3, #4
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800a730 	.word	0x0800a730
 8000e84:	20000be9 	.word	0x20000be9

08000e88 <_ExitBiasMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitBiasMenuHandler()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <_ExitBiasMenuHandler+0x34>)
 8000e8e:	f008 fbc3 	bl	8009618 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fd3a 	bl	800090c <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <_ExitBiasMenuHandler+0x38>)
 8000e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <_ExitBiasMenuHandler+0x3c>)
 8000ea2:	f006 f9bb 	bl	800721c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000ea6:	f7ff fdc3 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <_ExitBiasMenuHandler+0x3c>)
 8000eac:	f006 f980 	bl	80071b0 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <_ExitBiasMenuHandler+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	0800a748 	.word	0x0800a748
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	20000e98 	.word	0x20000e98
 8000ec8:	20000be9 	.word	0x20000be9

08000ecc <_FreqMenuHandler>:
 *
 *	Business logic for FREQ MENU events
 *
 */
eSystemState _FreqMenuHandler()
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <_FreqMenuHandler+0x38>)
 8000ed2:	f008 fba1 	bl	8009618 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000ed6:	480c      	ldr	r0, [pc, #48]	; (8000f08 <_FreqMenuHandler+0x3c>)
 8000ed8:	f006 f9a0 	bl	800721c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000edc:	f7ff fda8 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <_FreqMenuHandler+0x3c>)
 8000ee2:	f006 f965 	bl	80071b0 <HAL_TIM_Base_Start_IT>

	DM_ShowFreqSelectMenu(ENABLE_FREQMENU);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff fcd0 	bl	800088c <DM_ShowFreqSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <_FreqMenuHandler+0x40>)
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <_FreqMenuHandler+0x44>)
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = FREQ_ENCODER_MAX;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <_FreqMenuHandler+0x44>)
 8000ef6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c

	return Freq_Menu_State;
 8000efc:	2303      	movs	r3, #3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	0800a764 	.word	0x0800a764
 8000f08:	20000e98 	.word	0x20000e98
 8000f0c:	40013400 	.word	0x40013400
 8000f10:	40012c00 	.word	0x40012c00

08000f14 <_FreqSetHandler>:
 *
 *
 *
 */
eSystemState _FreqSetHandler()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <_FreqSetHandler+0x1c>)
 8000f1a:	f008 fb7d 	bl	8009618 <puts>
#endif

	FreqO_ModifyOutput();
 8000f1e:	f000 f89b 	bl	8001058 <FreqO_ModifyOutput>

	eNewEvent = evFreqMenu;
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <_FreqSetHandler+0x20>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	701a      	strb	r2, [r3, #0]
	return Freq_Menu_State;
 8000f28:	2303      	movs	r3, #3
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800a77c 	.word	0x0800a77c
 8000f34:	20000be9 	.word	0x20000be9

08000f38 <_ExitFreqMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFreqMenuHandler()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFreqMenu Event captured\n");
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <_ExitFreqMenuHandler+0x34>)
 8000f3e:	f008 fb6b 	bl	8009618 <puts>
#endif


	// disable the menu
	DM_ShowFreqSelectMenu(DISABLE_FREQMENU);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fca2 	bl	800088c <DM_ShowFreqSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <_ExitFreqMenuHandler+0x38>)
 8000f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <_ExitFreqMenuHandler+0x3c>)
 8000f52:	f006 f963 	bl	800721c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000f56:	f7ff fd6b 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <_ExitFreqMenuHandler+0x3c>)
 8000f5c:	f006 f928 	bl	80071b0 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <_ExitFreqMenuHandler+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800a794 	.word	0x0800a794
 8000f70:	40012c00 	.word	0x40012c00
 8000f74:	20000e98 	.word	0x20000e98
 8000f78:	20000be9 	.word	0x20000be9

08000f7c <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <EM_SetNewEvent+0x1c>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	7013      	strb	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	20000be9 	.word	0x20000be9

08000f9c <BO_GetBiasPolarity>:
 *
 *
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <BO_GetBiasPolarity+0x14>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <BO_ModifyOutput>:
 *
 *
 *
 */
void BO_ModifyOutput()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f000 fa1d 	bl	80013f8 <SM_GetEncoderValue>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fc4:	d217      	bcs.n	8000ff6 <BO_ModifyOutput+0x42>

		eBiasPolarity = INVERSEBIAS;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <BO_ModifyOutput+0x84>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f000 fa13 	bl	80013f8 <SM_GetEncoderValue>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <BO_ModifyOutput+0x88>)
 8000fe6:	f003 fe4b 	bl	8004c80 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8000fea:	2201      	movs	r2, #1
 8000fec:	2108      	movs	r1, #8
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f004 fd33 	bl	8005a5c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 f9fe 	bl	80013f8 <SM_GetEncoderValue>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001002:	d317      	bcc.n	8001034 <BO_ModifyOutput+0x80>

		eBiasPolarity = NORMALBIAS;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <BO_ModifyOutput+0x84>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 800100a:	2001      	movs	r0, #1
 800100c:	f000 f9f4 	bl	80013f8 <SM_GetEncoderValue>
 8001010:	4603      	mov	r3, r0
 8001012:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 800101e:	2200      	movs	r2, #0
 8001020:	2110      	movs	r1, #16
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <BO_ModifyOutput+0x88>)
 8001024:	f003 fe2c 	bl	8004c80 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8001028:	2200      	movs	r2, #0
 800102a:	2108      	movs	r1, #8
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f004 fd14 	bl	8005a5c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000008 	.word	0x20000008
 800103c:	20000d14 	.word	0x20000d14

08001040 <BO_GetOutputBias>:
 *
 *
 *
 */
uint32_t BO_GetOutputBias()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8001044:	2110      	movs	r1, #16
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <BO_GetOutputBias+0x14>)
 8001048:	f003 fe56 	bl	8004cf8 <HAL_DAC_GetValue>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000d14 	.word	0x20000d14

08001058 <FreqO_ModifyOutput>:
 *
 *
 *
 */
void FreqO_ModifyOutput()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_MAG;
 800105c:	2000      	movs	r0, #0
 800105e:	f000 f9cb 	bl	80013f8 <SM_GetEncoderValue>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b02      	ldr	r3, [pc, #8]	; (8001070 <FreqO_ModifyOutput+0x18>)
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40013400 	.word	0x40013400

08001074 <FreqO_GetOutputFreq>:
 *
 *
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <FreqO_GetOutputFreq+0x14>)
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40013400 	.word	0x40013400

0800108c <FuncO_ModifyOutput>:

// signal output function
eOutput_mode eNewOutMode = Sine_Out_Mode;

void FuncO_ModifyOutput()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af02      	add	r7, sp, #8


	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 8001092:	2001      	movs	r0, #1
 8001094:	f000 f9b0 	bl	80013f8 <SM_GetEncoderValue>
 8001098:	4603      	mov	r3, r0
 800109a:	2b17      	cmp	r3, #23
 800109c:	f200 8094 	bhi.w	80011c8 <FuncO_ModifyOutput+0x13c>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <FuncO_ModifyOutput+0x1c>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	08001109 	.word	0x08001109
 80010ac:	08001109 	.word	0x08001109
 80010b0:	08001109 	.word	0x08001109
 80010b4:	08001129 	.word	0x08001129
 80010b8:	08001129 	.word	0x08001129
 80010bc:	08001129 	.word	0x08001129
 80010c0:	08001129 	.word	0x08001129
 80010c4:	08001149 	.word	0x08001149
 80010c8:	08001149 	.word	0x08001149
 80010cc:	08001149 	.word	0x08001149
 80010d0:	08001149 	.word	0x08001149
 80010d4:	08001169 	.word	0x08001169
 80010d8:	08001169 	.word	0x08001169
 80010dc:	08001169 	.word	0x08001169
 80010e0:	08001169 	.word	0x08001169
 80010e4:	08001189 	.word	0x08001189
 80010e8:	08001189 	.word	0x08001189
 80010ec:	08001189 	.word	0x08001189
 80010f0:	08001189 	.word	0x08001189
 80010f4:	080011a9 	.word	0x080011a9
 80010f8:	080011a9 	.word	0x080011a9
 80010fc:	080011a9 	.word	0x080011a9
 8001100:	080011a9 	.word	0x080011a9
 8001104:	080011a9 	.word	0x080011a9
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <FuncO_ModifyOutput+0x144>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800110e:	2100      	movs	r1, #0
 8001110:	4830      	ldr	r0, [pc, #192]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 8001112:	f003 fd5f 	bl	8004bd4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001116:	2300      	movs	r3, #0
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2378      	movs	r3, #120	; 0x78
 800111c:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <FuncO_ModifyOutput+0x14c>)
 800111e:	2100      	movs	r1, #0
 8001120:	482c      	ldr	r0, [pc, #176]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 8001122:	f003 fc95 	bl	8004a50 <HAL_DAC_Start_DMA>
			break;
 8001126:	e04f      	b.n	80011c8 <FuncO_ModifyOutput+0x13c>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <FuncO_ModifyOutput+0x144>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800112e:	2100      	movs	r1, #0
 8001130:	4828      	ldr	r0, [pc, #160]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 8001132:	f003 fd4f 	bl	8004bd4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001136:	2300      	movs	r3, #0
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2378      	movs	r3, #120	; 0x78
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <FuncO_ModifyOutput+0x150>)
 800113e:	2100      	movs	r1, #0
 8001140:	4824      	ldr	r0, [pc, #144]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 8001142:	f003 fc85 	bl	8004a50 <HAL_DAC_Start_DMA>

			break;
 8001146:	e03f      	b.n	80011c8 <FuncO_ModifyOutput+0x13c>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <FuncO_ModifyOutput+0x144>)
 800114a:	2202      	movs	r2, #2
 800114c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800114e:	2100      	movs	r1, #0
 8001150:	4820      	ldr	r0, [pc, #128]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 8001152:	f003 fd3f 	bl	8004bd4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8001156:	2300      	movs	r3, #0
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2378      	movs	r3, #120	; 0x78
 800115c:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <FuncO_ModifyOutput+0x154>)
 800115e:	2100      	movs	r1, #0
 8001160:	481c      	ldr	r0, [pc, #112]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 8001162:	f003 fc75 	bl	8004a50 <HAL_DAC_Start_DMA>
			break;
 8001166:	e02f      	b.n	80011c8 <FuncO_ModifyOutput+0x13c>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <FuncO_ModifyOutput+0x144>)
 800116a:	2203      	movs	r2, #3
 800116c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800116e:	2100      	movs	r1, #0
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 8001172:	f003 fd2f 	bl	8004bd4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2378      	movs	r3, #120	; 0x78
 800117c:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <FuncO_ModifyOutput+0x158>)
 800117e:	2100      	movs	r1, #0
 8001180:	4814      	ldr	r0, [pc, #80]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 8001182:	f003 fc65 	bl	8004a50 <HAL_DAC_Start_DMA>
			break;
 8001186:	e01f      	b.n	80011c8 <FuncO_ModifyOutput+0x13c>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <FuncO_ModifyOutput+0x144>)
 800118a:	2204      	movs	r2, #4
 800118c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800118e:	2100      	movs	r1, #0
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 8001192:	f003 fd1f 	bl	8004bd4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2378      	movs	r3, #120	; 0x78
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <FuncO_ModifyOutput+0x15c>)
 800119e:	2100      	movs	r1, #0
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 80011a2:	f003 fc55 	bl	8004a50 <HAL_DAC_Start_DMA>
			break;
 80011a6:	e00f      	b.n	80011c8 <FuncO_ModifyOutput+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <FuncO_ModifyOutput+0x144>)
 80011aa:	2205      	movs	r2, #5
 80011ac:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80011ae:	2100      	movs	r1, #0
 80011b0:	4808      	ldr	r0, [pc, #32]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 80011b2:	f003 fd0f 	bl	8004bd4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 80011b6:	2300      	movs	r3, #0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2378      	movs	r3, #120	; 0x78
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <FuncO_ModifyOutput+0x160>)
 80011be:	2100      	movs	r1, #0
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <FuncO_ModifyOutput+0x148>)
 80011c2:	f003 fc45 	bl	8004a50 <HAL_DAC_Start_DMA>
			break;
 80011c6:	bf00      	nop
	}
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000bea 	.word	0x20000bea
 80011d4:	20000d14 	.word	0x20000d14
 80011d8:	200003e4 	.word	0x200003e4
 80011dc:	200005c4 	.word	0x200005c4
 80011e0:	20000024 	.word	0x20000024
 80011e4:	20000204 	.word	0x20000204
 80011e8:	200007a4 	.word	0x200007a4
 80011ec:	20000984 	.word	0x20000984

080011f0 <FuncO_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode FuncO_GetOutputMode()
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	return eNewOutMode;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <FuncO_GetOutputMode+0x14>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000bea 	.word	0x20000bea

08001208 <GO_ModifyOutput>:
 *
 *
 *
 */
void GO_ModifyOutput()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 800120c:	2001      	movs	r0, #1
 800120e:	f000 f8f3 	bl	80013f8 <SM_GetEncoderValue>
 8001212:	4603      	mov	r3, r0
 8001214:	2b1f      	cmp	r3, #31
 8001216:	f200 80db 	bhi.w	80013d0 <GO_ModifyOutput+0x1c8>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <GO_ModifyOutput+0x18>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	080012a1 	.word	0x080012a1
 8001224:	080012a1 	.word	0x080012a1
 8001228:	080012a1 	.word	0x080012a1
 800122c:	080012a1 	.word	0x080012a1
 8001230:	080012c7 	.word	0x080012c7
 8001234:	080012c7 	.word	0x080012c7
 8001238:	080012c7 	.word	0x080012c7
 800123c:	080012c7 	.word	0x080012c7
 8001240:	080012ed 	.word	0x080012ed
 8001244:	080012ed 	.word	0x080012ed
 8001248:	080012ed 	.word	0x080012ed
 800124c:	080012ed 	.word	0x080012ed
 8001250:	08001313 	.word	0x08001313
 8001254:	08001313 	.word	0x08001313
 8001258:	08001313 	.word	0x08001313
 800125c:	08001313 	.word	0x08001313
 8001260:	08001339 	.word	0x08001339
 8001264:	08001339 	.word	0x08001339
 8001268:	08001339 	.word	0x08001339
 800126c:	08001339 	.word	0x08001339
 8001270:	0800135f 	.word	0x0800135f
 8001274:	0800135f 	.word	0x0800135f
 8001278:	0800135f 	.word	0x0800135f
 800127c:	0800135f 	.word	0x0800135f
 8001280:	08001385 	.word	0x08001385
 8001284:	08001385 	.word	0x08001385
 8001288:	08001385 	.word	0x08001385
 800128c:	08001385 	.word	0x08001385
 8001290:	080013ab 	.word	0x080013ab
 8001294:	080013ab 	.word	0x080013ab
 8001298:	080013ab 	.word	0x080013ab
 800129c:	080013ab 	.word	0x080013ab
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2101      	movs	r1, #1
 80012a4:	484b      	ldr	r0, [pc, #300]	; (80013d4 <GO_ModifyOutput+0x1cc>)
 80012a6:	f004 fbd9 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2120      	movs	r1, #32
 80012ae:	484a      	ldr	r0, [pc, #296]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 80012b0:	f004 fbd4 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2110      	movs	r1, #16
 80012b8:	4847      	ldr	r0, [pc, #284]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 80012ba:	f004 fbcf 	bl	8005a5c <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <GO_ModifyOutput+0x1d4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
			break;
 80012c4:	e084      	b.n	80013d0 <GO_ModifyOutput+0x1c8>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2101      	movs	r1, #1
 80012ca:	4842      	ldr	r0, [pc, #264]	; (80013d4 <GO_ModifyOutput+0x1cc>)
 80012cc:	f004 fbc6 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2120      	movs	r1, #32
 80012d4:	4840      	ldr	r0, [pc, #256]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 80012d6:	f004 fbc1 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2110      	movs	r1, #16
 80012de:	483e      	ldr	r0, [pc, #248]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 80012e0:	f004 fbbc 	bl	8005a5c <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 80012e4:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <GO_ModifyOutput+0x1d4>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
			break;
 80012ea:	e071      	b.n	80013d0 <GO_ModifyOutput+0x1c8>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2101      	movs	r1, #1
 80012f0:	4838      	ldr	r0, [pc, #224]	; (80013d4 <GO_ModifyOutput+0x1cc>)
 80012f2:	f004 fbb3 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2120      	movs	r1, #32
 80012fa:	4837      	ldr	r0, [pc, #220]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 80012fc:	f004 fbae 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2110      	movs	r1, #16
 8001304:	4834      	ldr	r0, [pc, #208]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 8001306:	f004 fba9 	bl	8005a5c <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <GO_ModifyOutput+0x1d4>)
 800130c:	2202      	movs	r2, #2
 800130e:	701a      	strb	r2, [r3, #0]
			break;
 8001310:	e05e      	b.n	80013d0 <GO_ModifyOutput+0x1c8>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2101      	movs	r1, #1
 8001316:	482f      	ldr	r0, [pc, #188]	; (80013d4 <GO_ModifyOutput+0x1cc>)
 8001318:	f004 fba0 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2120      	movs	r1, #32
 8001320:	482d      	ldr	r0, [pc, #180]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 8001322:	f004 fb9b 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2110      	movs	r1, #16
 800132a:	482b      	ldr	r0, [pc, #172]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 800132c:	f004 fb96 	bl	8005a5c <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <GO_ModifyOutput+0x1d4>)
 8001332:	2203      	movs	r2, #3
 8001334:	701a      	strb	r2, [r3, #0]
			break;
 8001336:	e04b      	b.n	80013d0 <GO_ModifyOutput+0x1c8>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2101      	movs	r1, #1
 800133c:	4825      	ldr	r0, [pc, #148]	; (80013d4 <GO_ModifyOutput+0x1cc>)
 800133e:	f004 fb8d 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2120      	movs	r1, #32
 8001346:	4824      	ldr	r0, [pc, #144]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 8001348:	f004 fb88 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2110      	movs	r1, #16
 8001350:	4821      	ldr	r0, [pc, #132]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 8001352:	f004 fb83 	bl	8005a5c <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <GO_ModifyOutput+0x1d4>)
 8001358:	2204      	movs	r2, #4
 800135a:	701a      	strb	r2, [r3, #0]
			break;
 800135c:	e038      	b.n	80013d0 <GO_ModifyOutput+0x1c8>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2101      	movs	r1, #1
 8001362:	481c      	ldr	r0, [pc, #112]	; (80013d4 <GO_ModifyOutput+0x1cc>)
 8001364:	f004 fb7a 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2120      	movs	r1, #32
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 800136e:	f004 fb75 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2110      	movs	r1, #16
 8001376:	4818      	ldr	r0, [pc, #96]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 8001378:	f004 fb70 	bl	8005a5c <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <GO_ModifyOutput+0x1d4>)
 800137e:	2205      	movs	r2, #5
 8001380:	701a      	strb	r2, [r3, #0]
			break;
 8001382:	e025      	b.n	80013d0 <GO_ModifyOutput+0x1c8>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2101      	movs	r1, #1
 8001388:	4812      	ldr	r0, [pc, #72]	; (80013d4 <GO_ModifyOutput+0x1cc>)
 800138a:	f004 fb67 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2120      	movs	r1, #32
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 8001394:	f004 fb62 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001398:	2201      	movs	r2, #1
 800139a:	2110      	movs	r1, #16
 800139c:	480e      	ldr	r0, [pc, #56]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 800139e:	f004 fb5d 	bl	8005a5c <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <GO_ModifyOutput+0x1d4>)
 80013a4:	2206      	movs	r2, #6
 80013a6:	701a      	strb	r2, [r3, #0]
			break;
 80013a8:	e012      	b.n	80013d0 <GO_ModifyOutput+0x1c8>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2101      	movs	r1, #1
 80013ae:	4809      	ldr	r0, [pc, #36]	; (80013d4 <GO_ModifyOutput+0x1cc>)
 80013b0:	f004 fb54 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2120      	movs	r1, #32
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 80013ba:	f004 fb4f 	bl	8005a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2110      	movs	r1, #16
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <GO_ModifyOutput+0x1d0>)
 80013c4:	f004 fb4a 	bl	8005a5c <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <GO_ModifyOutput+0x1d4>)
 80013ca:	2207      	movs	r2, #7
 80013cc:	701a      	strb	r2, [r3, #0]
			break;
 80013ce:	bf00      	nop
	}

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000800 	.word	0x48000800
 80013dc:	20000009 	.word	0x20000009

080013e0 <GO_GetOutputGain>:
 *
 *
 *
 */
uint8_t GO_GetOutputGain()
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <GO_GetOutputGain+0x14>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000009 	.word	0x20000009

080013f8 <SM_GetEncoderValue>:

#include "SignalManager.h"


uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d008      	beq.n	800141a <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <SM_GetEncoderValue+0x34>)
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <SM_GetEncoderValue+0x34>)
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	b29b      	uxth	r3, r3
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b29b      	uxth	r3, r3
 8001418:	e002      	b.n	8001420 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SM_GetEncoderValue+0x34>)
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	b29b      	uxth	r3, r3
	}
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40012c00 	.word	0x40012c00

08001430 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2220      	movs	r2, #32
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f008 f881 	bl	8009550 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800144e:	4b32      	ldr	r3, [pc, #200]	; (8001518 <MX_ADC1_Init+0xe8>)
 8001450:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001454:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <MX_ADC1_Init+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800145c:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <MX_ADC1_Init+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <MX_ADC1_Init+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <MX_ADC1_Init+0xe8>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <MX_ADC1_Init+0xe8>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <MX_ADC1_Init+0xe8>)
 8001476:	2204      	movs	r2, #4
 8001478:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MX_ADC1_Init+0xe8>)
 800147c:	2200      	movs	r2, #0
 800147e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <MX_ADC1_Init+0xe8>)
 8001482:	2201      	movs	r2, #1
 8001484:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <MX_ADC1_Init+0xe8>)
 8001488:	2201      	movs	r2, #1
 800148a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <MX_ADC1_Init+0xe8>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_ADC1_Init+0xe8>)
 8001496:	2200      	movs	r2, #0
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_ADC1_Init+0xe8>)
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_ADC1_Init+0xe8>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_ADC1_Init+0xe8>)
 80014aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_ADC1_Init+0xe8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b8:	4817      	ldr	r0, [pc, #92]	; (8001518 <MX_ADC1_Init+0xe8>)
 80014ba:	f001 ffc7 	bl	800344c <HAL_ADC_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80014c4:	f000 ff40 	bl	8002348 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	4811      	ldr	r0, [pc, #68]	; (8001518 <MX_ADC1_Init+0xe8>)
 80014d4:	f002 fd50 	bl	8003f78 <HAL_ADCEx_MultiModeConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014de:	f000 ff33 	bl	8002348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_ADC1_Init+0xec>)
 80014e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014e6:	2306      	movs	r3, #6
 80014e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ee:	237f      	movs	r3, #127	; 0x7f
 80014f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014f2:	2304      	movs	r3, #4
 80014f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <MX_ADC1_Init+0xe8>)
 8001500:	f002 f964 	bl	80037cc <HAL_ADC_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800150a:	f000 ff1d 	bl	8002348 <Error_Handler>
  }

}
 800150e:	bf00      	nop
 8001510:	3730      	adds	r7, #48	; 0x30
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000c10 	.word	0x20000c10
 800151c:	0c900008 	.word	0x0c900008

08001520 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001540:	d14f      	bne.n	80015e2 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_ADC_MspInit+0xcc>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a29      	ldr	r2, [pc, #164]	; (80015ec <HAL_ADC_MspInit+0xcc>)
 8001548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_ADC_MspInit+0xcc>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_ADC_MspInit+0xcc>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <HAL_ADC_MspInit+0xcc>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_ADC_MspInit+0xcc>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001572:	2304      	movs	r3, #4
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001576:	2303      	movs	r3, #3
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f004 f8ce 	bl	8005728 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_ADC_MspInit+0xd4>)
 8001590:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 8001594:	2205      	movs	r2, #5
 8001596:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 80015b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 80015bc:	2220      	movs	r2, #32
 80015be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015c6:	480a      	ldr	r0, [pc, #40]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 80015c8:	f003 fde2 	bl	8005190 <HAL_DMA_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80015d2:	f000 feb9 	bl	8002348 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_ADC_MspInit+0xd0>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	20000c7c 	.word	0x20000c7c
 80015f4:	40020008 	.word	0x40020008

080015f8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_COMP1_Init+0x44>)
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <MX_COMP1_Init+0x48>)
 8001600:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_COMP1_Init+0x44>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_COMP1_Init+0x44>)
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <MX_COMP1_Init+0x4c>)
 800160c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_COMP1_Init+0x44>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_COMP1_Init+0x44>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_COMP1_Init+0x44>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_COMP1_Init+0x44>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_COMP1_Init+0x44>)
 8001628:	f002 fefa 	bl	8004420 <HAL_COMP_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8001632:	f000 fe89 	bl	8002348 <Error_Handler>
  }

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000cdc 	.word	0x20000cdc
 8001640:	40010200 	.word	0x40010200
 8001644:	00800030 	.word	0x00800030

08001648 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_COMP_MspInit+0x5c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d118      	bne.n	800169c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_COMP_MspInit+0x60>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_COMP_MspInit+0x60>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_COMP_MspInit+0x60>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001682:	2302      	movs	r3, #2
 8001684:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001686:	2303      	movs	r3, #3
 8001688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f004 f846 	bl	8005728 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40010200 	.word	0x40010200
 80016a8:	40021000 	.word	0x40021000

080016ac <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2230      	movs	r2, #48	; 0x30
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f007 ff49 	bl	8009550 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80016be:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <MX_DAC1_Init+0x8c>)
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <MX_DAC1_Init+0x90>)
 80016c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016c4:	481c      	ldr	r0, [pc, #112]	; (8001738 <MX_DAC1_Init+0x8c>)
 80016c6:	f003 f94e 	bl	8004966 <HAL_DAC_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016d0:	f000 fe3a 	bl	8002348 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80016d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016d8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80016e6:	2306      	movs	r3, #6
 80016e8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	2200      	movs	r2, #0
 80016fe:	4619      	mov	r1, r3
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <MX_DAC1_Init+0x8c>)
 8001702:	f003 fb0f 	bl	8004d24 <HAL_DAC_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 800170c:	f000 fe1c 	bl	8002348 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001714:	2301      	movs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	2210      	movs	r2, #16
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <MX_DAC1_Init+0x8c>)
 8001720:	f003 fb00 	bl	8004d24 <HAL_DAC_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800172a:	f000 fe0d 	bl	8002348 <Error_Handler>
  }

}
 800172e:	bf00      	nop
 8001730:	3730      	adds	r7, #48	; 0x30
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000d14 	.word	0x20000d14
 800173c:	50000800 	.word	0x50000800

08001740 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001746:	463b      	mov	r3, r7
 8001748:	2230      	movs	r2, #48	; 0x30
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f007 feff 	bl	8009550 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_DAC2_Init+0x6c>)
 8001754:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <MX_DAC2_Init+0x70>)
 8001756:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001758:	4814      	ldr	r0, [pc, #80]	; (80017ac <MX_DAC2_Init+0x6c>)
 800175a:	f003 f904 	bl	8004966 <HAL_DAC_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001764:	f000 fdf0 	bl	8002348 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800177a:	2306      	movs	r3, #6
 800177c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001786:	2301      	movs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_DAC2_Init+0x6c>)
 8001796:	f003 fac5 	bl	8004d24 <HAL_DAC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80017a0:	f000 fdd2 	bl	8002348 <Error_Handler>
  }

}
 80017a4:	bf00      	nop
 80017a6:	3730      	adds	r7, #48	; 0x30
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000d00 	.word	0x20000d00
 80017b0:	50000c00 	.word	0x50000c00

080017b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a56      	ldr	r2, [pc, #344]	; (800192c <HAL_DAC_MspInit+0x178>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d150      	bne.n	8001878 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a55      	ldr	r2, [pc, #340]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fa:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001806:	2330      	movs	r3, #48	; 0x30
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f003 ff84 	bl	8005728 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001820:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_DAC_MspInit+0x180>)
 8001822:	4a45      	ldr	r2, [pc, #276]	; (8001938 <HAL_DAC_MspInit+0x184>)
 8001824:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <HAL_DAC_MspInit+0x180>)
 8001828:	2206      	movs	r2, #6
 800182a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800182c:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_DAC_MspInit+0x180>)
 800182e:	2210      	movs	r2, #16
 8001830:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001832:	4b40      	ldr	r3, [pc, #256]	; (8001934 <HAL_DAC_MspInit+0x180>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001838:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <HAL_DAC_MspInit+0x180>)
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_DAC_MspInit+0x180>)
 8001840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001844:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_DAC_MspInit+0x180>)
 8001848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800184c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <HAL_DAC_MspInit+0x180>)
 8001850:	2220      	movs	r2, #32
 8001852:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001854:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_DAC_MspInit+0x180>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800185a:	4836      	ldr	r0, [pc, #216]	; (8001934 <HAL_DAC_MspInit+0x180>)
 800185c:	f003 fc98 	bl	8005190 <HAL_DMA_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001866:	f000 fd6f 	bl	8002348 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_DAC_MspInit+0x180>)
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	4a30      	ldr	r2, [pc, #192]	; (8001934 <HAL_DAC_MspInit+0x180>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001876:	e054      	b.n	8001922 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2f      	ldr	r2, [pc, #188]	; (800193c <HAL_DAC_MspInit+0x188>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d14f      	bne.n	8001922 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_DAC_MspInit+0x17c>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b2:	2340      	movs	r3, #64	; 0x40
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b6:	2303      	movs	r3, #3
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f003 ff2e 	bl	8005728 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 80018ce:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_DAC_MspInit+0x190>)
 80018d0:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 80018d4:	2229      	movs	r2, #41	; 0x29
 80018d6:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 80018da:	2210      	movs	r2, #16
 80018dc:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 80018e6:	2280      	movs	r2, #128	; 0x80
 80018e8:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 80018ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f0:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 80018f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f8:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 80018fc:	2220      	movs	r2, #32
 80018fe:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 8001902:	2200      	movs	r2, #0
 8001904:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8001906:	480e      	ldr	r0, [pc, #56]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 8001908:	f003 fc42 	bl	8005190 <HAL_DMA_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8001912:	f000 fd19 	bl	8002348 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_DAC_MspInit+0x18c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001922:	bf00      	nop
 8001924:	3730      	adds	r7, #48	; 0x30
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	50000800 	.word	0x50000800
 8001930:	40021000 	.word	0x40021000
 8001934:	20000d28 	.word	0x20000d28
 8001938:	4002001c 	.word	0x4002001c
 800193c:	50000c00 	.word	0x50000c00
 8001940:	20000d88 	.word	0x20000d88
 8001944:	40020030 	.word	0x40020030

08001948 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_DMA_Init+0x70>)
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <MX_DMA_Init+0x70>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6493      	str	r3, [r2, #72]	; 0x48
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_DMA_Init+0x70>)
 800195c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_DMA_Init+0x70>)
 8001968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196a:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <MX_DMA_Init+0x70>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6493      	str	r3, [r2, #72]	; 0x48
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_DMA_Init+0x70>)
 8001974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2101      	movs	r1, #1
 8001982:	200b      	movs	r0, #11
 8001984:	f002 ffbb 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001988:	200b      	movs	r0, #11
 800198a:	f002 ffd2 	bl	8004932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	200c      	movs	r0, #12
 8001994:	f002 ffb3 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001998:	200c      	movs	r0, #12
 800199a:	f002 ffca 	bl	8004932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	200d      	movs	r0, #13
 80019a4:	f002 ffab 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019a8:	200d      	movs	r0, #13
 80019aa:	f002 ffc2 	bl	8004932 <HAL_NVIC_EnableIRQ>

}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000

080019bc <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <update_dc_bias_sweep+0x88>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <update_dc_bias_sweep+0x1a>
 80019c8:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <update_dc_bias_sweep+0x8c>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <update_dc_bias_sweep+0x8c>)
 80019d2:	801a      	strh	r2, [r3, #0]
 80019d4:	e005      	b.n	80019e2 <update_dc_bias_sweep+0x26>
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <update_dc_bias_sweep+0x8c>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <update_dc_bias_sweep+0x8c>)
 80019e0:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <update_dc_bias_sweep+0x8c>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <update_dc_bias_sweep+0x90>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <update_dc_bias_sweep+0x3e>
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <update_dc_bias_sweep+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e002      	b.n	8001a00 <update_dc_bias_sweep+0x44>
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <update_dc_bias_sweep+0x90>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <update_dc_bias_sweep+0x8c>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <update_dc_bias_sweep+0x52>
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <update_dc_bias_sweep+0x88>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <update_dc_bias_sweep+0x8c>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a16:	d302      	bcc.n	8001a1e <update_dc_bias_sweep+0x62>
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <update_dc_bias_sweep+0x88>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <update_dc_bias_sweep+0x90>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	2108      	movs	r1, #8
 8001a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2c:	f004 f816 	bl	8005a5c <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <update_dc_bias_sweep+0x8c>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	2110      	movs	r1, #16
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <update_dc_bias_sweep+0x94>)
 8001a3a:	f003 f921 	bl	8004c80 <HAL_DAC_SetValue>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	20000bec 	.word	0x20000bec
 8001a4c:	20000bf0 	.word	0x20000bf0
 8001a50:	20000d14 	.word	0x20000d14

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <__NVIC_EnableIRQ+0x38>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	; (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8001b72:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	0c1b      	lsrs	r3, r3, #16
 8001b84:	43db      	mvns	r3, r3
 8001b86:	ea02 0103 	and.w	r1, r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	613b      	str	r3, [r7, #16]
  return result;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2103      	movs	r1, #3
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	61bb      	str	r3, [r7, #24]
  return result;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	431a      	orrs	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	601a      	str	r2, [r3, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b089      	sub	sp, #36	; 0x24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	613b      	str	r3, [r7, #16]
  return result;
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2103      	movs	r1, #3
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	401a      	ands	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	61bb      	str	r3, [r7, #24]
  return result;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	431a      	orrs	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	60da      	str	r2, [r3, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3724      	adds	r7, #36	; 0x24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001cb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001cf2:	2004      	movs	r0, #4
 8001cf4:	f7ff ffd4 	bl	8001ca0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001cf8:	2020      	movs	r0, #32
 8001cfa:	f7ff ffd1 	bl	8001ca0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff ffce 	bl	8001ca0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001d04:	2002      	movs	r0, #2
 8001d06:	f7ff ffcb 	bl	8001ca0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	48d3      	ldr	r0, [pc, #844]	; (800205c <MX_GPIO_Init+0x38c>)
 8001d0e:	f7ff ffb9 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8001d12:	2108      	movs	r1, #8
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f7ff ffb4 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8001d1c:	2110      	movs	r1, #16
 8001d1e:	48cf      	ldr	r0, [pc, #828]	; (800205c <MX_GPIO_Init+0x38c>)
 8001d20:	f7ff ffb0 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001d24:	2120      	movs	r1, #32
 8001d26:	48cd      	ldr	r0, [pc, #820]	; (800205c <MX_GPIO_Init+0x38c>)
 8001d28:	f7ff ffac 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	48cc      	ldr	r0, [pc, #816]	; (8002060 <MX_GPIO_Init+0x390>)
 8001d30:	f7ff ffa8 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d38:	48c8      	ldr	r0, [pc, #800]	; (800205c <MX_GPIO_Init+0x38c>)
 8001d3a:	f7ff ffa3 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8001d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d42:	48c6      	ldr	r0, [pc, #792]	; (800205c <MX_GPIO_Init+0x38c>)
 8001d44:	f7ff ff9e 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001d48:	2140      	movs	r1, #64	; 0x40
 8001d4a:	48c5      	ldr	r0, [pc, #788]	; (8002060 <MX_GPIO_Init+0x390>)
 8001d4c:	f7ff ff9a 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	48c3      	ldr	r0, [pc, #780]	; (8002060 <MX_GPIO_Init+0x390>)
 8001d54:	f7ff ff96 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d5c:	48c0      	ldr	r0, [pc, #768]	; (8002060 <MX_GPIO_Init+0x390>)
 8001d5e:	f7ff ff91 	bl	8001c84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001d62:	49c0      	ldr	r1, [pc, #768]	; (8002064 <MX_GPIO_Init+0x394>)
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7ff feff 	bl	8001b68 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8001d6a:	49bf      	ldr	r1, [pc, #764]	; (8002068 <MX_GPIO_Init+0x398>)
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f7ff fefb 	bl	8001b68 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001d72:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001d76:	2005      	movs	r0, #5
 8001d78:	f7ff fef6 	bl	8001b68 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001d7c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001d80:	2005      	movs	r0, #5
 8001d82:	f7ff fef1 	bl	8001b68 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001d86:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f7ff feec 	bl	8001b68 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001d90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d94:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001da2:	2302      	movs	r3, #2
 8001da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4618      	mov	r0, r3
 8001dae:	f006 faab 	bl	8008308 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f006 fa9a 	bl	8008308 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001de4:	2302      	movs	r3, #2
 8001de6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4618      	mov	r0, r3
 8001df0:	f006 fa8a 	bl	8008308 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001e04:	2302      	movs	r3, #2
 8001e06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f006 fa7a 	bl	8008308 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001e14:	2304      	movs	r3, #4
 8001e16:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f006 fa6a 	bl	8008308 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e3a:	4888      	ldr	r0, [pc, #544]	; (800205c <MX_GPIO_Init+0x38c>)
 8001e3c:	f7ff fef3 	bl	8001c26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e46:	4885      	ldr	r0, [pc, #532]	; (800205c <MX_GPIO_Init+0x38c>)
 8001e48:	f7ff feed 	bl	8001c26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4886      	ldr	r0, [pc, #536]	; (800206c <MX_GPIO_Init+0x39c>)
 8001e52:	f7ff fee8 	bl	8001c26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4884      	ldr	r0, [pc, #528]	; (800206c <MX_GPIO_Init+0x39c>)
 8001e5c:	f7ff fee3 	bl	8001c26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2104      	movs	r1, #4
 8001e64:	487d      	ldr	r0, [pc, #500]	; (800205c <MX_GPIO_Init+0x38c>)
 8001e66:	f7ff fede 	bl	8001c26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e70:	487a      	ldr	r0, [pc, #488]	; (800205c <MX_GPIO_Init+0x38c>)
 8001e72:	f7ff fea9 	bl	8001bc8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e7c:	4877      	ldr	r0, [pc, #476]	; (800205c <MX_GPIO_Init+0x38c>)
 8001e7e:	f7ff fea3 	bl	8001bc8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2101      	movs	r1, #1
 8001e86:	4879      	ldr	r0, [pc, #484]	; (800206c <MX_GPIO_Init+0x39c>)
 8001e88:	f7ff fe9e 	bl	8001bc8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2102      	movs	r1, #2
 8001e90:	4876      	ldr	r0, [pc, #472]	; (800206c <MX_GPIO_Init+0x39c>)
 8001e92:	f7ff fe99 	bl	8001bc8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2104      	movs	r1, #4
 8001e9a:	4870      	ldr	r0, [pc, #448]	; (800205c <MX_GPIO_Init+0x38c>)
 8001e9c:	f7ff fe94 	bl	8001bc8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4868      	ldr	r0, [pc, #416]	; (800205c <MX_GPIO_Init+0x38c>)
 8001eba:	f006 fc18 	bl	80086ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f006 fc08 	bl	80086ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8001ede:	2310      	movs	r3, #16
 8001ee0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4859      	ldr	r0, [pc, #356]	; (800205c <MX_GPIO_Init+0x38c>)
 8001ef8:	f006 fbf9 	bl	80086ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8001efc:	2320      	movs	r3, #32
 8001efe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f00:	2301      	movs	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4851      	ldr	r0, [pc, #324]	; (800205c <MX_GPIO_Init+0x38c>)
 8001f16:	f006 fbea 	bl	80086ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	484b      	ldr	r0, [pc, #300]	; (8002060 <MX_GPIO_Init+0x390>)
 8001f34:	f006 fbdb 	bl	80086ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4842      	ldr	r0, [pc, #264]	; (800205c <MX_GPIO_Init+0x38c>)
 8001f54:	f006 fbcb 	bl	80086ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	483a      	ldr	r0, [pc, #232]	; (800205c <MX_GPIO_Init+0x38c>)
 8001f74:	f006 fbbb 	bl	80086ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8001f78:	2340      	movs	r3, #64	; 0x40
 8001f7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4833      	ldr	r0, [pc, #204]	; (8002060 <MX_GPIO_Init+0x390>)
 8001f92:	f006 fbac 	bl	80086ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	482c      	ldr	r0, [pc, #176]	; (8002060 <MX_GPIO_Init+0x390>)
 8001fb0:	f006 fb9d 	bl	80086ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8001fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4824      	ldr	r0, [pc, #144]	; (8002060 <MX_GPIO_Init+0x390>)
 8001fd0:	f006 fb8d 	bl	80086ee <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001fd4:	f7ff fd3e 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fd8e 	bl	8001b00 <NVIC_EncodePriority>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	2006      	movs	r0, #6
 8001fea:	f7ff fd5f 	bl	8001aac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001fee:	2006      	movs	r0, #6
 8001ff0:	f7ff fd3e 	bl	8001a70 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ff4:	f7ff fd2e 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fd7e 	bl	8001b00 <NVIC_EncodePriority>
 8002004:	4603      	mov	r3, r0
 8002006:	4619      	mov	r1, r3
 8002008:	2007      	movs	r0, #7
 800200a:	f7ff fd4f 	bl	8001aac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800200e:	2007      	movs	r0, #7
 8002010:	f7ff fd2e 	bl	8001a70 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002014:	f7ff fd1e 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8002018:	4603      	mov	r3, r0
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fd6e 	bl	8001b00 <NVIC_EncodePriority>
 8002024:	4603      	mov	r3, r0
 8002026:	4619      	mov	r1, r3
 8002028:	2008      	movs	r0, #8
 800202a:	f7ff fd3f 	bl	8001aac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800202e:	2008      	movs	r0, #8
 8002030:	f7ff fd1e 	bl	8001a70 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002034:	f7ff fd0e 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8002038:	4603      	mov	r3, r0
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fd5e 	bl	8001b00 <NVIC_EncodePriority>
 8002044:	4603      	mov	r3, r0
 8002046:	4619      	mov	r1, r3
 8002048:	2028      	movs	r0, #40	; 0x28
 800204a:	f7ff fd2f 	bl	8001aac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800204e:	2028      	movs	r0, #40	; 0x28
 8002050:	f7ff fd0e 	bl	8001a70 <__NVIC_EnableIRQ>

}
 8002054:	bf00      	nop
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	e009      	b.n	8002070 <MX_GPIO_Init+0x3a0>
 800205c:	48000800 	.word	0x48000800
 8002060:	48000400 	.word	0x48000400
 8002064:	0f000003 	.word	0x0f000003
 8002068:	f0000003 	.word	0xf0000003
 800206c:	48001400 	.word	0x48001400
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop

08002074 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800207c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002080:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800208c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002090:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002094:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800209c:	e000      	b.n	80020a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800209e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80020a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f9      	beq.n	800209e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80020aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80020b4:	687b      	ldr	r3, [r7, #4]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e009      	b.n	80020ec <_write+0x2a>
    ITM_SendChar((*ptr++));
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ffc7 	bl	8002074 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3301      	adds	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dbf1      	blt.n	80020d8 <_write+0x16>
  return len;
 80020f4:	687b      	ldr	r3, [r7, #4]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
	// do something
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800211a:	f000 ff42 	bl	8002fa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800211e:	f000 f8a5 	bl	800226c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002122:	f7ff fdd5 	bl	8001cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002126:	f7ff fc0f 	bl	8001948 <MX_DMA_Init>
  MX_DAC1_Init();
 800212a:	f7ff fabf 	bl	80016ac <MX_DAC1_Init>
  MX_DAC2_Init();
 800212e:	f7ff fb07 	bl	8001740 <MX_DAC2_Init>
  MX_ADC1_Init();
 8002132:	f7ff f97d 	bl	8001430 <MX_ADC1_Init>
  MX_COMP1_Init();
 8002136:	f7ff fa5f 	bl	80015f8 <MX_COMP1_Init>
  MX_TIM2_Init();
 800213a:	f000 fc29 	bl	8002990 <MX_TIM2_Init>
  MX_TIM17_Init();
 800213e:	f000 fdc1 	bl	8002cc4 <MX_TIM17_Init>
  MX_SPI3_Init();
 8002142:	f000 f93f 	bl	80023c4 <MX_SPI3_Init>
  MX_RNG_Init();
 8002146:	f000 f92f 	bl	80023a8 <MX_RNG_Init>
  MX_TIM1_Init();
 800214a:	f000 fbb1 	bl	80028b0 <MX_TIM1_Init>
  MX_TIM8_Init();
 800214e:	f000 fcd9 	bl	8002b04 <MX_TIM8_Init>
  MX_TIM16_Init();
 8002152:	f000 fd91 	bl	8002c78 <MX_TIM16_Init>
  MX_TIM15_Init();
 8002156:	f000 fd3d 	bl	8002bd4 <MX_TIM15_Init>
  MX_TIM5_Init();
 800215a:	f000 fc83 	bl	8002a64 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800215e:	2300      	movs	r3, #0
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2378      	movs	r3, #120	; 0x78
 8002164:	4a34      	ldr	r2, [pc, #208]	; (8002238 <main+0x124>)
 8002166:	2100      	movs	r1, #0
 8002168:	4834      	ldr	r0, [pc, #208]	; (800223c <main+0x128>)
 800216a:	f002 fc71 	bl	8004a50 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800216e:	2110      	movs	r1, #16
 8002170:	4832      	ldr	r0, [pc, #200]	; (800223c <main+0x128>)
 8002172:	f002 fc1a 	bl	80049aa <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8002176:	2300      	movs	r3, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2378      	movs	r3, #120	; 0x78
 800217c:	4a30      	ldr	r2, [pc, #192]	; (8002240 <main+0x12c>)
 800217e:	2100      	movs	r1, #0
 8002180:	4830      	ldr	r0, [pc, #192]	; (8002244 <main+0x130>)
 8002182:	f002 fc65 	bl	8004a50 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8002186:	4830      	ldr	r0, [pc, #192]	; (8002248 <main+0x134>)
 8002188:	f004 ffe4 	bl	8007154 <HAL_TIM_Base_Start>
  TIM8->ARR = 14015;			// 100Hz
 800218c:	4b2f      	ldr	r3, [pc, #188]	; (800224c <main+0x138>)
 800218e:	f243 62bf 	movw	r2, #14015	; 0x36bf
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  //TIM8->ARR = 65535;
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	2108      	movs	r1, #8
 8002198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219c:	f003 fc5e 	bl	8005a5c <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80021a0:	2201      	movs	r2, #1
 80021a2:	2101      	movs	r1, #1
 80021a4:	482a      	ldr	r0, [pc, #168]	; (8002250 <main+0x13c>)
 80021a6:	f003 fc59 	bl	8005a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	2120      	movs	r1, #32
 80021ae:	4829      	ldr	r0, [pc, #164]	; (8002254 <main+0x140>)
 80021b0:	f003 fc54 	bl	8005a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2110      	movs	r1, #16
 80021b8:	4826      	ldr	r0, [pc, #152]	; (8002254 <main+0x140>)
 80021ba:	f003 fc4f 	bl	8005a5c <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c4:	4823      	ldr	r0, [pc, #140]	; (8002254 <main+0x140>)
 80021c6:	f003 fc49 	bl	8005a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80021ca:	2200      	movs	r2, #0
 80021cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d0:	4820      	ldr	r0, [pc, #128]	; (8002254 <main+0x140>)
 80021d2:	f003 fc43 	bl	8005a5c <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80021d6:	2201      	movs	r2, #1
 80021d8:	2108      	movs	r1, #8
 80021da:	481e      	ldr	r0, [pc, #120]	; (8002254 <main+0x140>)
 80021dc:	f003 fc3e 	bl	8005a5c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80021e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ea:	f023 0307 	bic.w	r3, r3, #7
 80021ee:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 80021f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021fa:	f043 0305 	orr.w	r3, r3, #5
 80021fe:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8002200:	4815      	ldr	r0, [pc, #84]	; (8002258 <main+0x144>)
 8002202:	f004 ffd5 	bl	80071b0 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8002206:	4815      	ldr	r0, [pc, #84]	; (800225c <main+0x148>)
 8002208:	f004 ffa4 	bl	8007154 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <main+0x14c>)
 800220e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <main+0x14c>)
 8002216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 800221c:	f7fe f850 	bl	80002c0 <DM_Init>
  DM_PostInit();
 8002220:	f7fe f85c 	bl	80002dc <DM_PostInit>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 8002224:	480f      	ldr	r0, [pc, #60]	; (8002264 <main+0x150>)
 8002226:	f004 ffc3 	bl	80071b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 800222a:	480f      	ldr	r0, [pc, #60]	; (8002268 <main+0x154>)
 800222c:	f004 ff92 	bl	8007154 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8002230:	f7fe fcac 	bl	8000b8c <EM_ProcessEvent>
 8002234:	e7fc      	b.n	8002230 <main+0x11c>
 8002236:	bf00      	nop
 8002238:	200003e4 	.word	0x200003e4
 800223c:	20000d14 	.word	0x20000d14
 8002240:	200007a4 	.word	0x200007a4
 8002244:	20000d00 	.word	0x20000d00
 8002248:	20000e4c 	.word	0x20000e4c
 800224c:	40013400 	.word	0x40013400
 8002250:	48000400 	.word	0x48000400
 8002254:	48000800 	.word	0x48000800
 8002258:	20000fc8 	.word	0x20000fc8
 800225c:	20000f7c 	.word	0x20000f7c
 8002260:	40001000 	.word	0x40001000
 8002264:	20000e98 	.word	0x20000e98
 8002268:	20000f30 	.word	0x20000f30

0800226c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0a8      	sub	sp, #160	; 0xa0
 8002270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002272:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002276:	2238      	movs	r2, #56	; 0x38
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f007 f968 	bl	8009550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002280:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002290:	463b      	mov	r3, r7
 8002292:	2254      	movs	r2, #84	; 0x54
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f007 f95a 	bl	8009550 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800229c:	2000      	movs	r0, #0
 800229e:	f003 fbf5 	bl	8005a8c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80022a2:	2322      	movs	r3, #34	; 0x22
 80022a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022aa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80022c2:	2302      	movs	r3, #2
 80022c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80022c8:	232a      	movs	r3, #42	; 0x2a
 80022ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80022d4:	2304      	movs	r3, #4
 80022d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022da:	2302      	movs	r3, #2
 80022dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fc75 	bl	8005bd4 <HAL_RCC_OscConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80022f0:	f000 f82a 	bl	8002348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f4:	230f      	movs	r3, #15
 80022f6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f8:	2303      	movs	r3, #3
 80022fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002300:	2300      	movs	r3, #0
 8002302:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002304:	2300      	movs	r3, #0
 8002306:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8002308:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800230c:	2108      	movs	r1, #8
 800230e:	4618      	mov	r0, r3
 8002310:	f003 ff78 	bl	8006204 <HAL_RCC_ClockConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800231a:	f000 f815 	bl	8002348 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800231e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002322:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002324:	2300      	movs	r3, #0
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002328:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800232c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800232e:	463b      	mov	r3, r7
 8002330:	4618      	mov	r0, r3
 8002332:	f004 f957 	bl	80065e4 <HAL_RCCEx_PeriphCLKConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800233c:	f000 f804 	bl	8002348 <Error_Handler>
  }
}
 8002340:	bf00      	nop
 8002342:	37a0      	adds	r7, #160	; 0xa0
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f043 0204 	orr.w	r2, r3, #4
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <LL_AHB2_GRP1_EnableClock>:
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4313      	orrs	r3, r2
 800238a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800238e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4013      	ands	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40021000 	.word	0x40021000

080023a8 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80023ac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80023b0:	f7ff ffe2 	bl	8002378 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <MX_RNG_Init+0x18>)
 80023b6:	f7ff ffce 	bl	8002356 <LL_RNG_Enable>

}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	50060800 	.word	0x50060800

080023c4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MX_SPI3_Init+0x74>)
 80023ca:	4a1c      	ldr	r2, [pc, #112]	; (800243c <MX_SPI3_Init+0x78>)
 80023cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_SPI3_Init+0x74>)
 80023d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_SPI3_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <MX_SPI3_Init+0x74>)
 80023de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MX_SPI3_Init+0x74>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <MX_SPI3_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_SPI3_Init+0x74>)
 80023f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_SPI3_Init+0x74>)
 80023fa:	2210      	movs	r2, #16
 80023fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_SPI3_Init+0x74>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_SPI3_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_SPI3_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_SPI3_Init+0x74>)
 8002412:	2207      	movs	r2, #7
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_SPI3_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_SPI3_Init+0x74>)
 800241e:	2208      	movs	r2, #8
 8002420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_SPI3_Init+0x74>)
 8002424:	f004 fb2a 	bl	8006a7c <HAL_SPI_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800242e:	f7ff ff8b 	bl	8002348 <Error_Handler>
  }

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000de8 	.word	0x20000de8
 800243c:	40003c00 	.word	0x40003c00

08002440 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_SPI_MspInit+0x7c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d128      	bne.n	80024b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_SPI_MspInit+0x80>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <HAL_SPI_MspInit+0x80>)
 8002468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246c:	6593      	str	r3, [r2, #88]	; 0x58
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_SPI_MspInit+0x80>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_SPI_MspInit+0x80>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_SPI_MspInit+0x80>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_SPI_MspInit+0x80>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002492:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024a4:	2306      	movs	r3, #6
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_SPI_MspInit+0x84>)
 80024b0:	f003 f93a 	bl	8005728 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80024b4:	bf00      	nop
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40003c00 	.word	0x40003c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	48000800 	.word	0x48000800

080024c8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80024d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d6:	6093      	str	r3, [r2, #8]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40007000 	.word	0x40007000

080024e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_MspInit+0x44>)
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <HAL_MspInit+0x44>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6613      	str	r3, [r2, #96]	; 0x60
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_MspInit+0x44>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_MspInit+0x44>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <HAL_MspInit+0x44>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002510:	6593      	str	r3, [r2, #88]	; 0x58
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_MspInit+0x44>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800251e:	f7ff ffd3 	bl	80024c8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000

08002530 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4013      	ands	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d101      	bne.n	800254a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40010400 	.word	0x40010400

0800255c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6153      	str	r3, [r2, #20]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40010400 	.word	0x40010400

0800257c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <HardFault_Handler+0x4>

08002590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <MemManage_Handler+0x4>

08002596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <BusFault_Handler+0x4>

0800259c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <UsageFault_Handler+0x4>

080025a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d0:	f000 fd3a 	bl	8003048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evBiasMenu);
 80025dc:	2004      	movs	r0, #4
 80025de:	f7fe fccd 	bl	8000f7c <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7ff ffa4 	bl	8002530 <LL_EXTI_IsActiveFlag_0_31>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7ff ffb4 	bl	800255c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evFreqMenu);
 80025fc:	2002      	movs	r0, #2
 80025fe:	f7fe fcbd 	bl	8000f7c <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8002602:	2002      	movs	r0, #2
 8002604:	f7ff ff94 	bl	8002530 <LL_EXTI_IsActiveFlag_0_31>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800260e:	2002      	movs	r0, #2
 8002610:	f7ff ffa4 	bl	800255c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 800261c:	2006      	movs	r0, #6
 800261e:	f7fe fcad 	bl	8000f7c <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8002622:	2004      	movs	r0, #4
 8002624:	f7ff ff84 	bl	8002530 <LL_EXTI_IsActiveFlag_0_31>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800262e:	2004      	movs	r0, #4
 8002630:	f7ff ff94 	bl	800255c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <DMA1_Channel1_IRQHandler+0x10>)
 800263e:	f002 ff23 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000c7c 	.word	0x20000c7c

0800264c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <DMA1_Channel2_IRQHandler+0x10>)
 8002652:	f002 ff19 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000d28 	.word	0x20000d28

08002660 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <DMA1_Channel3_IRQHandler+0x10>)
 8002666:	f002 ff0f 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000d88 	.word	0x20000d88

08002674 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8002678:	f7fd fe4e 	bl	8000318 <DM_UpdateDisplay>

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8002682:	8812      	ldrh	r2, [r2, #0]
 8002684:	4293      	cmp	r3, r2
 8002686:	d305      	bcc.n	8002694 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 800268e:	8812      	ldrh	r2, [r2, #0]
 8002690:	4293      	cmp	r3, r2
 8002692:	d902      	bls.n	800269a <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8002694:	2005      	movs	r0, #5
 8002696:	f7fe fc71 	bl	8000f7c <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 80026a2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <TIM1_BRK_TIM15_IRQHandler+0x48>)
 80026a6:	f004 fe8e 	bl	80073c6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80026aa:	4805      	ldr	r0, [pc, #20]	; (80026c0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80026ac:	f004 fe8b 	bl	80073c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	20000bf4 	.word	0x20000bf4
 80026bc:	20000f7c 	.word	0x20000f7c
 80026c0:	20000e98 	.word	0x20000e98

080026c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 80026c8:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80026d2:	f004 fe78 	bl	80073c6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <TIM1_UP_TIM16_IRQHandler+0x28>)
 80026d8:	f004 fe75 	bl	80073c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000c04 	.word	0x20000c04
 80026e4:	0800a7b0 	.word	0x0800a7b0
 80026e8:	20000f7c 	.word	0x20000f7c
 80026ec:	20001014 	.word	0x20001014

080026f0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80026f4:	f7ff f962 	bl	80019bc <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026f8:	4803      	ldr	r0, [pc, #12]	; (8002708 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80026fa:	f004 fe64 	bl	80073c6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80026fe:	4803      	ldr	r0, [pc, #12]	; (800270c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8002700:	f004 fe61 	bl	80073c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000f7c 	.word	0x20000f7c
 800270c:	20000ee4 	.word	0x20000ee4

08002710 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <TIM2_IRQHandler+0x10>)
 8002716:	f004 fe56 	bl	80073c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000fc8 	.word	0x20000fc8

08002724 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8002728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800272c:	4815      	ldr	r0, [pc, #84]	; (8002784 <EXTI15_10_IRQHandler+0x60>)
 800272e:	f003 f97d 	bl	8005a2c <HAL_GPIO_ReadPin>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evGainMenu);
 8002738:	2003      	movs	r0, #3
 800273a:	f7fe fc1f 	bl	8000f7c <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 800273e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002742:	4810      	ldr	r0, [pc, #64]	; (8002784 <EXTI15_10_IRQHandler+0x60>)
 8002744:	f003 f972 	bl	8005a2c <HAL_GPIO_ReadPin>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evFuncMenu);
 800274e:	2001      	movs	r0, #1
 8002750:	f7fe fc14 	bl	8000f7c <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8002754:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002758:	f7ff feea 	bl	8002530 <LL_EXTI_IsActiveFlag_0_31>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8002762:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002766:	f7ff fef9 	bl	800255c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800276a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800276e:	f7ff fedf 	bl	8002530 <LL_EXTI_IsActiveFlag_0_31>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8002778:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800277c:	f7ff feee 	bl	800255c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	48000800 	.word	0x48000800

08002788 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	e00a      	b.n	80027b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800279a:	f3af 8000 	nop.w
 800279e:	4601      	mov	r1, r0
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	60ba      	str	r2, [r7, #8]
 80027a6:	b2ca      	uxtb	r2, r1
 80027a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	3301      	adds	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	dbf0      	blt.n	800279a <_read+0x12>
	}

return len;
 80027b8:	687b      	ldr	r3, [r7, #4]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
	return -1;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ea:	605a      	str	r2, [r3, #4]
	return 0;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_isatty>:

int _isatty(int file)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
	return 1;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
	return 0;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <_sbrk+0x50>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <_sbrk+0x16>
		heap_end = &end;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <_sbrk+0x50>)
 800283e:	4a10      	ldr	r2, [pc, #64]	; (8002880 <_sbrk+0x54>)
 8002840:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <_sbrk+0x50>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <_sbrk+0x50>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4413      	add	r3, r2
 8002850:	466a      	mov	r2, sp
 8002852:	4293      	cmp	r3, r2
 8002854:	d907      	bls.n	8002866 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002856:	f006 fe51 	bl	80094fc <__errno>
 800285a:	4602      	mov	r2, r0
 800285c:	230c      	movs	r3, #12
 800285e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002864:	e006      	b.n	8002874 <_sbrk+0x48>
	}

	heap_end += incr;
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <_sbrk+0x50>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	4a03      	ldr	r2, [pc, #12]	; (800287c <_sbrk+0x50>)
 8002870:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000bf8 	.word	0x20000bf8
 8002880:	20001068 	.word	0x20001068

08002884 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <SystemInit+0x28>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <SystemInit+0x28>)
 8002890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SystemInit+0x28>)
 800289a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800289e:	609a      	str	r2, [r3, #8]
#endif
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b09a      	sub	sp, #104	; 0x68
 80028b4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80028b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f006 fe46 	bl	8009550 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2234      	movs	r2, #52	; 0x34
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f006 fe3a 	bl	8009550 <memset>

  htim1.Instance = TIM1;
 80028dc:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <MX_TIM1_Init+0xd8>)
 80028de:	4a2b      	ldr	r2, [pc, #172]	; (800298c <MX_TIM1_Init+0xdc>)
 80028e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <MX_TIM1_Init+0xd8>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <MX_TIM1_Init+0xd8>)
 80028ea:	2240      	movs	r2, #64	; 0x40
 80028ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <MX_TIM1_Init+0xd8>)
 80028f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <MX_TIM1_Init+0xd8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <MX_TIM1_Init+0xd8>)
 80028fe:	2200      	movs	r2, #0
 8002900:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <MX_TIM1_Init+0xd8>)
 8002904:	2200      	movs	r2, #0
 8002906:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002908:	2303      	movs	r3, #3
 800290a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800290c:	2300      	movs	r3, #0
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002910:	2301      	movs	r3, #1
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002914:	2300      	movs	r3, #0
 8002916:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800291c:	2300      	movs	r3, #0
 800291e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002920:	2301      	movs	r3, #1
 8002922:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002924:	2300      	movs	r3, #0
 8002926:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800292c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002930:	4619      	mov	r1, r3
 8002932:	4815      	ldr	r0, [pc, #84]	; (8002988 <MX_TIM1_Init+0xd8>)
 8002934:	f004 fca1 	bl	800727a <HAL_TIM_Encoder_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800293e:	f7ff fd03 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800294e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002952:	4619      	mov	r1, r3
 8002954:	480c      	ldr	r0, [pc, #48]	; (8002988 <MX_TIM1_Init+0xd8>)
 8002956:	f005 fa19 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002960:	f7ff fcf2 	bl	8002348 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002968:	2300      	movs	r3, #0
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	4619      	mov	r1, r3
 8002970:	4805      	ldr	r0, [pc, #20]	; (8002988 <MX_TIM1_Init+0xd8>)
 8002972:	f005 faa1 	bl	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800297c:	f7ff fce4 	bl	8002348 <Error_Handler>
  }

}
 8002980:	bf00      	nop
 8002982:	3768      	adds	r7, #104	; 0x68
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000f7c 	.word	0x20000f7c
 800298c:	40012c00 	.word	0x40012c00

08002990 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	; 0x30
 8002994:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b4:	463b      	mov	r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80029be:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <MX_TIM2_Init+0xd0>)
 80029c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <MX_TIM2_Init+0xd0>)
 80029c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <MX_TIM2_Init+0xd0>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <MX_TIM2_Init+0xd0>)
 80029d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029dc:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <MX_TIM2_Init+0xd0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <MX_TIM2_Init+0xd0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029e8:	481d      	ldr	r0, [pc, #116]	; (8002a60 <MX_TIM2_Init+0xd0>)
 80029ea:	f004 fb5c 	bl	80070a6 <HAL_TIM_Base_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80029f4:	f7ff fca8 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029fe:	f107 0320 	add.w	r3, r7, #32
 8002a02:	4619      	mov	r1, r3
 8002a04:	4816      	ldr	r0, [pc, #88]	; (8002a60 <MX_TIM2_Init+0xd0>)
 8002a06:	f004 fe5d 	bl	80076c4 <HAL_TIM_ConfigClockSource>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a10:	f7ff fc9a 	bl	8002348 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002a14:	2305      	movs	r3, #5
 8002a16:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002a18:	2350      	movs	r3, #80	; 0x50
 8002a1a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480d      	ldr	r0, [pc, #52]	; (8002a60 <MX_TIM2_Init+0xd0>)
 8002a2c:	f004 ff3a 	bl	80078a4 <HAL_TIM_SlaveConfigSynchro>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002a36:	f7ff fc87 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a42:	463b      	mov	r3, r7
 8002a44:	4619      	mov	r1, r3
 8002a46:	4806      	ldr	r0, [pc, #24]	; (8002a60 <MX_TIM2_Init+0xd0>)
 8002a48:	f005 f9a0 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002a52:	f7ff fc79 	bl	8002348 <Error_Handler>
  }

}
 8002a56:	bf00      	nop
 8002a58:	3730      	adds	r7, #48	; 0x30
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000fc8 	.word	0x20000fc8

08002a64 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8002a82:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <MX_TIM5_Init+0x98>)
 8002a84:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <MX_TIM5_Init+0x9c>)
 8002a86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8002a88:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <MX_TIM5_Init+0x98>)
 8002a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <MX_TIM5_Init+0x98>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <MX_TIM5_Init+0x98>)
 8002a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a9c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <MX_TIM5_Init+0x98>)
 8002aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <MX_TIM5_Init+0x98>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002aac:	4813      	ldr	r0, [pc, #76]	; (8002afc <MX_TIM5_Init+0x98>)
 8002aae:	f004 fafa 	bl	80070a6 <HAL_TIM_Base_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002ab8:	f7ff fc46 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480c      	ldr	r0, [pc, #48]	; (8002afc <MX_TIM5_Init+0x98>)
 8002aca:	f004 fdfb 	bl	80076c4 <HAL_TIM_ConfigClockSource>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002ad4:	f7ff fc38 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4805      	ldr	r0, [pc, #20]	; (8002afc <MX_TIM5_Init+0x98>)
 8002ae6:	f005 f951 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002af0:	f7ff fc2a 	bl	8002348 <Error_Handler>
  }

}
 8002af4:	bf00      	nop
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000f30 	.word	0x20000f30
 8002b00:	40000c00 	.word	0x40000c00

08002b04 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b094      	sub	sp, #80	; 0x50
 8002b08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b24:	463b      	mov	r3, r7
 8002b26:	2234      	movs	r2, #52	; 0x34
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f006 fd10 	bl	8009550 <memset>

  htim8.Instance = TIM8;
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b32:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <MX_TIM8_Init+0xcc>)
 8002b34:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002b36:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b48:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b5a:	481c      	ldr	r0, [pc, #112]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b5c:	f004 faa3 	bl	80070a6 <HAL_TIM_Base_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8002b66:	f7ff fbef 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b6e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b74:	4619      	mov	r1, r3
 8002b76:	4815      	ldr	r0, [pc, #84]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b78:	f004 fda4 	bl	80076c4 <HAL_TIM_ConfigClockSource>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002b82:	f7ff fbe1 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b86:	2320      	movs	r3, #32
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002b9a:	f005 f8f7 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002ba4:	f7ff fbd0 	bl	8002348 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_TIM8_Init+0xc8>)
 8002bb6:	f005 f97f 	bl	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8002bc0:	f7ff fbc2 	bl	8002348 <Error_Handler>
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	3750      	adds	r7, #80	; 0x50
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000e4c 	.word	0x20000e4c
 8002bd0:	40013400 	.word	0x40013400

08002bd4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bda:	f107 0310 	add.w	r3, r7, #16
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <MX_TIM15_Init+0xa0>)
 8002bf6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bfe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c0c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002c20:	4813      	ldr	r0, [pc, #76]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c22:	f004 fa40 	bl	80070a6 <HAL_TIM_Base_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002c2c:	f7ff fb8c 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480c      	ldr	r0, [pc, #48]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c3e:	f004 fd41 	bl	80076c4 <HAL_TIM_ConfigClockSource>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002c48:	f7ff fb7e 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c5a:	f005 f897 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002c64:	f7ff fb70 	bl	8002348 <Error_Handler>
  }

}
 8002c68:	bf00      	nop
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000e98 	.word	0x20000e98
 8002c74:	40014000 	.word	0x40014000

08002c78 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <MX_TIM16_Init+0x44>)
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <MX_TIM16_Init+0x48>)
 8002c80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <MX_TIM16_Init+0x44>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <MX_TIM16_Init+0x44>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <MX_TIM16_Init+0x44>)
 8002c90:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002c94:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <MX_TIM16_Init+0x44>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <MX_TIM16_Init+0x44>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <MX_TIM16_Init+0x44>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002ca8:	4804      	ldr	r0, [pc, #16]	; (8002cbc <MX_TIM16_Init+0x44>)
 8002caa:	f004 f9fc 	bl	80070a6 <HAL_TIM_Base_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002cb4:	f7ff fb48 	bl	8002348 <Error_Handler>
  }

}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20001014 	.word	0x20001014
 8002cc0:	40014400 	.word	0x40014400

08002cc4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <MX_TIM17_Init+0x44>)
 8002cca:	4a10      	ldr	r2, [pc, #64]	; (8002d0c <MX_TIM17_Init+0x48>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MX_TIM17_Init+0x44>)
 8002cd0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002cd4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_TIM17_Init+0x44>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <MX_TIM17_Init+0x44>)
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_TIM17_Init+0x44>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <MX_TIM17_Init+0x44>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_TIM17_Init+0x44>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002cf4:	4804      	ldr	r0, [pc, #16]	; (8002d08 <MX_TIM17_Init+0x44>)
 8002cf6:	f004 f9d6 	bl	80070a6 <HAL_TIM_Base_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002d00:	f7ff fb22 	bl	8002348 <Error_Handler>
  }

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000ee4 	.word	0x20000ee4
 8002d0c:	40014800 	.word	0x40014800

08002d10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <HAL_TIM_Encoder_MspInit+0xac>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d13f      	bne.n	8002db2 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002d38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d62:	2303      	movs	r3, #3
 8002d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d72:	2302      	movs	r3, #2
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <HAL_TIM_Encoder_MspInit+0xb4>)
 8002d7e:	f002 fcd3 	bl	8005728 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	2018      	movs	r0, #24
 8002d88:	f001 fdb9 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002d8c:	2018      	movs	r0, #24
 8002d8e:	f001 fdd0 	bl	8004932 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2101      	movs	r1, #1
 8002d96:	2019      	movs	r0, #25
 8002d98:	f001 fdb1 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d9c:	2019      	movs	r0, #25
 8002d9e:	f001 fdc8 	bl	8004932 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2101      	movs	r1, #1
 8002da6:	201a      	movs	r0, #26
 8002da8:	f001 fda9 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002dac:	201a      	movs	r0, #26
 8002dae:	f001 fdc0 	bl	8004932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002db2:	bf00      	nop
 8002db4:	3728      	adds	r7, #40	; 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	48000800 	.word	0x48000800

08002dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08e      	sub	sp, #56	; 0x38
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de8:	d131      	bne.n	8002e4e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dea:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6593      	str	r3, [r2, #88]	; 0x58
 8002df6:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	4a4c      	ldr	r2, [pc, #304]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e32:	4619      	mov	r1, r3
 8002e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e38:	f002 fc76 	bl	8005728 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2101      	movs	r1, #1
 8002e40:	201c      	movs	r0, #28
 8002e42:	f001 fd5c 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e46:	201c      	movs	r0, #28
 8002e48:	f001 fd73 	bl	8004932 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002e4c:	e070      	b.n	8002f30 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a3a      	ldr	r2, [pc, #232]	; (8002f3c <HAL_TIM_Base_MspInit+0x174>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d10c      	bne.n	8002e72 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e58:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	4a36      	ldr	r2, [pc, #216]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002e5e:	f043 0308 	orr.w	r3, r3, #8
 8002e62:	6593      	str	r3, [r2, #88]	; 0x58
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
}
 8002e70:	e05e      	b.n	8002f30 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a32      	ldr	r2, [pc, #200]	; (8002f40 <HAL_TIM_Base_MspInit+0x178>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d10c      	bne.n	8002e96 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e7c:	4b2e      	ldr	r3, [pc, #184]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e86:	6613      	str	r3, [r2, #96]	; 0x60
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]
}
 8002e94:	e04c      	b.n	8002f30 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <HAL_TIM_Base_MspInit+0x17c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d114      	bne.n	8002eca <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea4:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eaa:	6613      	str	r3, [r2, #96]	; 0x60
 8002eac:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2100      	movs	r1, #0
 8002ebc:	2018      	movs	r0, #24
 8002ebe:	f001 fd1e 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ec2:	2018      	movs	r0, #24
 8002ec4:	f001 fd35 	bl	8004932 <HAL_NVIC_EnableIRQ>
}
 8002ec8:	e032      	b.n	8002f30 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <HAL_TIM_Base_MspInit+0x180>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d114      	bne.n	8002efe <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ede:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee0:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2019      	movs	r0, #25
 8002ef2:	f001 fd04 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ef6:	2019      	movs	r0, #25
 8002ef8:	f001 fd1b 	bl	8004932 <HAL_NVIC_EnableIRQ>
}
 8002efc:	e018      	b.n	8002f30 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <HAL_TIM_Base_MspInit+0x184>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d113      	bne.n	8002f30 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f12:	6613      	str	r3, [r2, #96]	; 0x60
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_TIM_Base_MspInit+0x170>)
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2101      	movs	r1, #1
 8002f24:	201a      	movs	r0, #26
 8002f26:	f001 fcea 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002f2a:	201a      	movs	r0, #26
 8002f2c:	f001 fd01 	bl	8004932 <HAL_NVIC_EnableIRQ>
}
 8002f30:	bf00      	nop
 8002f32:	3738      	adds	r7, #56	; 0x38
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40000c00 	.word	0x40000c00
 8002f40:	40013400 	.word	0x40013400
 8002f44:	40014000 	.word	0x40014000
 8002f48:	40014400 	.word	0x40014400
 8002f4c:	40014800 	.word	0x40014800

08002f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f50:	480d      	ldr	r0, [pc, #52]	; (8002f88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f54:	480d      	ldr	r0, [pc, #52]	; (8002f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f56:	490e      	ldr	r1, [pc, #56]	; (8002f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <LoopForever+0xe>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002f5c:	e002      	b.n	8002f64 <LoopCopyDataInit>

08002f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f62:	3304      	adds	r3, #4

08002f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f68:	d3f9      	bcc.n	8002f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6a:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f6c:	4c0b      	ldr	r4, [pc, #44]	; (8002f9c <LoopForever+0x16>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f70:	e001      	b.n	8002f76 <LoopFillZerobss>

08002f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f74:	3204      	adds	r2, #4

08002f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f78:	d3fb      	bcc.n	8002f72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f7a:	f7ff fc83 	bl	8002884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f7e:	f006 fac3 	bl	8009508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f82:	f7ff f8c7 	bl	8002114 <main>

08002f86 <LoopForever>:

LoopForever:
    b LoopForever
 8002f86:	e7fe      	b.n	8002f86 <LoopForever>
  ldr   r0, =_estack
 8002f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f90:	20000bc8 	.word	0x20000bc8
  ldr r2, =_sidata
 8002f94:	0800aaa4 	.word	0x0800aaa4
  ldr r2, =_sbss
 8002f98:	20000bc8 	.word	0x20000bc8
  ldr r4, =_ebss
 8002f9c:	20001068 	.word	0x20001068

08002fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fa0:	e7fe      	b.n	8002fa0 <ADC1_2_IRQHandler>

08002fa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fac:	2003      	movs	r0, #3
 8002fae:	f001 fc9b 	bl	80048e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f000 f80e 	bl	8002fd4 <HAL_InitTick>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	71fb      	strb	r3, [r7, #7]
 8002fc2:	e001      	b.n	8002fc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fc4:	f7ff fa90 	bl	80024e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fc8:	79fb      	ldrb	r3, [r7, #7]

}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_InitTick+0x68>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d022      	beq.n	800302e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_InitTick+0x6c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_InitTick+0x68>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 fca6 	bl	800494e <HAL_SYSTICK_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10f      	bne.n	8003028 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d809      	bhi.n	8003022 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800300e:	2200      	movs	r2, #0
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003016:	f001 fc72 	bl	80048fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_InitTick+0x70>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e007      	b.n	8003032 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	e004      	b.n	8003032 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	e001      	b.n	8003032 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000018 	.word	0x20000018
 8003040:	20000010 	.word	0x20000010
 8003044:	20000014 	.word	0x20000014

08003048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_IncTick+0x1c>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_IncTick+0x20>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4413      	add	r3, r2
 8003056:	4a03      	ldr	r2, [pc, #12]	; (8003064 <HAL_IncTick+0x1c>)
 8003058:	6013      	str	r3, [r2, #0]
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	20001060 	.word	0x20001060
 8003068:	20000018 	.word	0x20000018

0800306c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return uwTick;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_GetTick+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20001060 	.word	0x20001060

08003084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff ffee 	bl	800306c <HAL_GetTick>
 8003090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800309c:	d004      	beq.n	80030a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_Delay+0x40>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030a8:	bf00      	nop
 80030aa:	f7ff ffdf 	bl	800306c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d8f7      	bhi.n	80030aa <HAL_Delay+0x26>
  {
  }
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000018 	.word	0x20000018

080030c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	609a      	str	r2, [r3, #8]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003130:	b490      	push	{r4, r7}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3360      	adds	r3, #96	; 0x60
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <LL_ADC_SetOffset+0x40>)
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	4313      	orrs	r3, r2
 800315e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003162:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bc90      	pop	{r4, r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	03fff000 	.word	0x03fff000

08003174 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003174:	b490      	push	{r4, r7}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3360      	adds	r3, #96	; 0x60
 8003182:	461a      	mov	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bc90      	pop	{r4, r7}
 800319a:	4770      	bx	lr

0800319c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800319c:	b490      	push	{r4, r7}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3360      	adds	r3, #96	; 0x60
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4313      	orrs	r3, r2
 80031c0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc90      	pop	{r4, r7}
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80031cc:	b490      	push	{r4, r7}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3360      	adds	r3, #96	; 0x60
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc90      	pop	{r4, r7}
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80031fc:	b490      	push	{r4, r7}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3360      	adds	r3, #96	; 0x60
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4313      	orrs	r3, r2
 8003220:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bc90      	pop	{r4, r7}
 800322a:	4770      	bx	lr

0800322c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	615a      	str	r2, [r3, #20]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003252:	b490      	push	{r4, r7}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3330      	adds	r3, #48	; 0x30
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	4413      	add	r3, r2
 8003270:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	211f      	movs	r1, #31
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	401a      	ands	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	f003 011f 	and.w	r1, r3, #31
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	4313      	orrs	r3, r2
 8003298:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc90      	pop	{r4, r7}
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032a4:	b490      	push	{r4, r7}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3314      	adds	r3, #20
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	0e5b      	lsrs	r3, r3, #25
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	4413      	add	r3, r2
 80032c2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80032c4:	6822      	ldr	r2, [r4, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	0d1b      	lsrs	r3, r3, #20
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2107      	movs	r1, #7
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	401a      	ands	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	0d1b      	lsrs	r3, r3, #20
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	4313      	orrs	r3, r2
 80032e8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc90      	pop	{r4, r7}
 80032f2:	4770      	bx	lr

080032f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0318 	and.w	r3, r3, #24
 8003316:	4908      	ldr	r1, [pc, #32]	; (8003338 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003318:	40d9      	lsrs	r1, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	400b      	ands	r3, r1
 800331e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003322:	431a      	orrs	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	0007ffff 	.word	0x0007ffff

0800333c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800334c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6093      	str	r3, [r2, #8]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003374:	d101      	bne.n	800337a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800339c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c4:	d101      	bne.n	80033ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <LL_ADC_IsEnabled+0x18>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <LL_ADC_IsEnabled+0x1a>
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b04      	cmp	r3, #4
 8003410:	d101      	bne.n	8003416 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d101      	bne.n	800343c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800344c:	b590      	push	{r4, r7, lr}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1ad      	b.n	80037c2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fe f853 	bl	8001520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff67 	bl	8003360 <LL_ADC_IsDeepPowerDownEnabled>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff4d 	bl	800333c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff82 	bl	80033b0 <LL_ADC_IsInternalRegulatorEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d113      	bne.n	80034da <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff66 	bl	8003388 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80034bc:	4b9e      	ldr	r3, [pc, #632]	; (8003738 <HAL_ADC_Init+0x2ec>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	4a9e      	ldr	r2, [pc, #632]	; (800373c <HAL_ADC_Init+0x2f0>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034cc:	e002      	b.n	80034d4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f9      	bne.n	80034ce <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff66 	bl	80033b0 <LL_ADC_IsInternalRegulatorEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10d      	bne.n	8003506 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	f043 0210 	orr.w	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ff77 	bl	80033fe <LL_ADC_REG_IsConversionOngoing>
 8003510:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 8148 	bne.w	80037b0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 8144 	bne.w	80037b0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003530:	f043 0202 	orr.w	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff4b 	bl	80033d8 <LL_ADC_IsEnabled>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d141      	bne.n	80035cc <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003550:	d004      	beq.n	800355c <HAL_ADC_Init+0x110>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <HAL_ADC_Init+0x2f4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d10f      	bne.n	800357c <HAL_ADC_Init+0x130>
 800355c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003560:	f7ff ff3a 	bl	80033d8 <LL_ADC_IsEnabled>
 8003564:	4604      	mov	r4, r0
 8003566:	4876      	ldr	r0, [pc, #472]	; (8003740 <HAL_ADC_Init+0x2f4>)
 8003568:	f7ff ff36 	bl	80033d8 <LL_ADC_IsEnabled>
 800356c:	4603      	mov	r3, r0
 800356e:	4323      	orrs	r3, r4
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e012      	b.n	80035a2 <HAL_ADC_Init+0x156>
 800357c:	4871      	ldr	r0, [pc, #452]	; (8003744 <HAL_ADC_Init+0x2f8>)
 800357e:	f7ff ff2b 	bl	80033d8 <LL_ADC_IsEnabled>
 8003582:	4604      	mov	r4, r0
 8003584:	4870      	ldr	r0, [pc, #448]	; (8003748 <HAL_ADC_Init+0x2fc>)
 8003586:	f7ff ff27 	bl	80033d8 <LL_ADC_IsEnabled>
 800358a:	4603      	mov	r3, r0
 800358c:	431c      	orrs	r4, r3
 800358e:	486f      	ldr	r0, [pc, #444]	; (800374c <HAL_ADC_Init+0x300>)
 8003590:	f7ff ff22 	bl	80033d8 <LL_ADC_IsEnabled>
 8003594:	4603      	mov	r3, r0
 8003596:	4323      	orrs	r3, r4
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d012      	beq.n	80035cc <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ae:	d004      	beq.n	80035ba <HAL_ADC_Init+0x16e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a62      	ldr	r2, [pc, #392]	; (8003740 <HAL_ADC_Init+0x2f4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_ADC_Init+0x172>
 80035ba:	4a65      	ldr	r2, [pc, #404]	; (8003750 <HAL_ADC_Init+0x304>)
 80035bc:	e000      	b.n	80035c0 <HAL_ADC_Init+0x174>
 80035be:	4a65      	ldr	r2, [pc, #404]	; (8003754 <HAL_ADC_Init+0x308>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f7ff fd7e 	bl	80030c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7f5b      	ldrb	r3, [r3, #29]
 80035d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80035dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80035e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d106      	bne.n	8003608 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	045b      	lsls	r3, r3, #17
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <HAL_ADC_Init+0x30c>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	69b9      	ldr	r1, [r7, #24]
 8003634:	430b      	orrs	r3, r1
 8003636:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fed3 	bl	80033fe <LL_ADC_REG_IsConversionOngoing>
 8003658:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fee0 	bl	8003424 <LL_ADC_INJ_IsConversionOngoing>
 8003664:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d17f      	bne.n	800376c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d17c      	bne.n	800376c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003676:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800367e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800368e:	f023 0302 	bic.w	r3, r3, #2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	69b9      	ldr	r1, [r7, #24]
 8003698:	430b      	orrs	r3, r1
 800369a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d017      	beq.n	80036d4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6911      	ldr	r1, [r2, #16]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80036d2:	e013      	b.n	80036fc <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003702:	2b01      	cmp	r3, #1
 8003704:	d12a      	bne.n	800375c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003710:	f023 0304 	bic.w	r3, r3, #4
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800371c:	4311      	orrs	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003722:	4311      	orrs	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003728:	430a      	orrs	r2, r1
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	611a      	str	r2, [r3, #16]
 8003736:	e019      	b.n	800376c <HAL_ADC_Init+0x320>
 8003738:	20000010 	.word	0x20000010
 800373c:	053e2d63 	.word	0x053e2d63
 8003740:	50000100 	.word	0x50000100
 8003744:	50000400 	.word	0x50000400
 8003748:	50000500 	.word	0x50000500
 800374c:	50000600 	.word	0x50000600
 8003750:	50000300 	.word	0x50000300
 8003754:	50000700 	.word	0x50000700
 8003758:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d10c      	bne.n	800378e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f023 010f 	bic.w	r1, r3, #15
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	1e5a      	subs	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
 800378c:	e007      	b.n	800379e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 020f 	bic.w	r2, r2, #15
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	f023 0303 	bic.w	r3, r3, #3
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80037ae:	e007      	b.n	80037c0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b4:	f043 0210 	orr.w	r2, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3724      	adds	r7, #36	; 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop

080037cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b0a6      	sub	sp, #152	; 0x98
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x22>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e38e      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x740>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fdff 	bl	80033fe <LL_ADC_REG_IsConversionOngoing>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 836f 	bne.w	8003ee6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	f7ff fd1c 	bl	8003252 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fded 	bl	80033fe <LL_ADC_REG_IsConversionOngoing>
 8003824:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fdf9 	bl	8003424 <LL_ADC_INJ_IsConversionOngoing>
 8003832:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003836:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800383a:	2b00      	cmp	r3, #0
 800383c:	f040 817b 	bne.w	8003b36 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 8176 	bne.w	8003b36 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003852:	d10f      	bne.n	8003874 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2200      	movs	r2, #0
 800385e:	4619      	mov	r1, r3
 8003860:	f7ff fd20 	bl	80032a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fcdd 	bl	800322c <LL_ADC_SetSamplingTimeCommonConfig>
 8003872:	e00e      	b.n	8003892 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	6819      	ldr	r1, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	461a      	mov	r2, r3
 8003882:	f7ff fd0f 	bl	80032a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fccd 	bl	800322c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	08db      	lsrs	r3, r3, #3
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d022      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6919      	ldr	r1, [r3, #16]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038c4:	f7ff fc34 	bl	8003130 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6919      	ldr	r1, [r3, #16]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	461a      	mov	r2, r3
 80038d6:	f7ff fc79 	bl	80031cc <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6919      	ldr	r1, [r3, #16]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	7f1b      	ldrb	r3, [r3, #28]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d102      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x124>
 80038ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ee:	e000      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x126>
 80038f0:	2300      	movs	r3, #0
 80038f2:	461a      	mov	r2, r3
 80038f4:	f7ff fc82 	bl	80031fc <LL_ADC_SetOffsetSaturation>
 80038f8:	e11d      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fc37 	bl	8003174 <LL_ADC_GetOffsetChannel>
 8003906:	4603      	mov	r3, r0
 8003908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x15a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fc2c 	bl	8003174 <LL_ADC_GetOffsetChannel>
 800391c:	4603      	mov	r3, r0
 800391e:	0e9b      	lsrs	r3, r3, #26
 8003920:	f003 021f 	and.w	r2, r3, #31
 8003924:	e012      	b.n	800394c <HAL_ADC_ConfigChannel+0x180>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fc21 	bl	8003174 <LL_ADC_GetOffsetChannel>
 8003932:	4603      	mov	r3, r0
 8003934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003942:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003944:	fab3 f383 	clz	r3, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003954:	2b00      	cmp	r3, #0
 8003956:	d105      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x198>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	0e9b      	lsrs	r3, r3, #26
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	e00a      	b.n	800397a <HAL_ADC_ConfigChannel+0x1ae>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8003972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	429a      	cmp	r2, r3
 800397c:	d106      	bne.n	800398c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	2100      	movs	r1, #0
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fc08 	bl	800319c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fbee 	bl	8003174 <LL_ADC_GetOffsetChannel>
 8003998:	4603      	mov	r3, r0
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1ec>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2101      	movs	r1, #1
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fbe3 	bl	8003174 <LL_ADC_GetOffsetChannel>
 80039ae:	4603      	mov	r3, r0
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	f003 021f 	and.w	r2, r3, #31
 80039b6:	e010      	b.n	80039da <HAL_ADC_ConfigChannel+0x20e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fbd8 	bl	8003174 <LL_ADC_GetOffsetChannel>
 80039c4:	4603      	mov	r3, r0
 80039c6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x226>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	0e9b      	lsrs	r3, r3, #26
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	e00a      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x23c>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d106      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fbc1 	bl	800319c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2102      	movs	r1, #2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fba7 	bl	8003174 <LL_ADC_GetOffsetChannel>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x27a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2102      	movs	r1, #2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fb9c 	bl	8003174 <LL_ADC_GetOffsetChannel>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	0e9b      	lsrs	r3, r3, #26
 8003a40:	f003 021f 	and.w	r2, r3, #31
 8003a44:	e010      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x29c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fb91 	bl	8003174 <LL_ADC_GetOffsetChannel>
 8003a52:	4603      	mov	r3, r0
 8003a54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8003a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x2b4>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	0e9b      	lsrs	r3, r3, #26
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	e00a      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x2ca>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a88:	fa93 f3a3 	rbit	r3, r3
 8003a8c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a90:	fab3 f383 	clz	r3, r3
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d106      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fb7a 	bl	800319c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2103      	movs	r1, #3
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fb60 	bl	8003174 <LL_ADC_GetOffsetChannel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x308>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fb55 	bl	8003174 <LL_ADC_GetOffsetChannel>
 8003aca:	4603      	mov	r3, r0
 8003acc:	0e9b      	lsrs	r3, r3, #26
 8003ace:	f003 021f 	and.w	r2, r3, #31
 8003ad2:	e010      	b.n	8003af6 <HAL_ADC_ConfigChannel+0x32a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2103      	movs	r1, #3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fb4a 	bl	8003174 <LL_ADC_GetOffsetChannel>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d105      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x342>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	0e9b      	lsrs	r3, r3, #26
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	e00a      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x358>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d106      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2103      	movs	r1, #3
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fb33 	bl	800319c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fc4c 	bl	80033d8 <LL_ADC_IsEnabled>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 810c 	bne.w	8003d60 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	461a      	mov	r2, r3
 8003b56:	f7ff fbcd 	bl	80032f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4aaf      	ldr	r2, [pc, #700]	; (8003e1c <HAL_ADC_ConfigChannel+0x650>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	f040 80fd 	bne.w	8003d60 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x3c2>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	0e9b      	lsrs	r3, r3, #26
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	bf94      	ite	ls
 8003b86:	2301      	movls	r3, #1
 8003b88:	2300      	movhi	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	e012      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x3e8>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b96:	fa93 f3a3 	rbit	r3, r3
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2b09      	cmp	r3, #9
 8003bac:	bf94      	ite	ls
 8003bae:	2301      	movls	r3, #1
 8003bb0:	2300      	movhi	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d064      	beq.n	8003c82 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x408>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e9b      	lsrs	r3, r3, #26
 8003bca:	3301      	adds	r3, #1
 8003bcc:	069b      	lsls	r3, r3, #26
 8003bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bd2:	e00e      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x426>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	069b      	lsls	r3, r3, #26
 8003bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x446>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	0e9b      	lsrs	r3, r3, #26
 8003c04:	3301      	adds	r3, #1
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	e010      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x468>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	2101      	movs	r1, #1
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	ea42 0103 	orr.w	r1, r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x48e>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f003 021f 	and.w	r2, r3, #31
 8003c50:	4613      	mov	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	051b      	lsls	r3, r3, #20
 8003c58:	e011      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x4b2>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f003 021f 	and.w	r2, r3, #31
 8003c76:	4613      	mov	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	e069      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x4d2>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	0e9b      	lsrs	r3, r3, #26
 8003c94:	3301      	adds	r3, #1
 8003c96:	069b      	lsls	r3, r3, #26
 8003c98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c9c:	e00e      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x4f0>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	61fb      	str	r3, [r7, #28]
  return result;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	069b      	lsls	r3, r3, #26
 8003cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x510>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0e9b      	lsrs	r3, r3, #26
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	e010      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x532>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	617b      	str	r3, [r7, #20]
  return result;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	ea42 0103 	orr.w	r1, r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10d      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x55e>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	3301      	adds	r3, #1
 8003d16:	f003 021f 	and.w	r2, r3, #31
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	3b1e      	subs	r3, #30
 8003d22:	051b      	lsls	r3, r3, #20
 8003d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d28:	e014      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x588>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	60fb      	str	r3, [r7, #12]
  return result;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	3301      	adds	r3, #1
 8003d42:	f003 021f 	and.w	r2, r3, #31
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3b1e      	subs	r3, #30
 8003d4e:	051b      	lsls	r3, r3, #20
 8003d50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d54:	430b      	orrs	r3, r1
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	6892      	ldr	r2, [r2, #8]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f7ff faa2 	bl	80032a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b2e      	ldr	r3, [pc, #184]	; (8003e20 <HAL_ADC_ConfigChannel+0x654>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80c9 	beq.w	8003f00 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d76:	d004      	beq.n	8003d82 <HAL_ADC_ConfigChannel+0x5b6>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <HAL_ADC_ConfigChannel+0x658>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x5ba>
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_ADC_ConfigChannel+0x65c>)
 8003d84:	e000      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x5bc>
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_ADC_ConfigChannel+0x660>)
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff f9c3 	bl	8003114 <LL_ADC_GetCommonPathInternalCh>
 8003d8e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <HAL_ADC_ConfigChannel+0x664>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_ADC_ConfigChannel+0x5da>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <HAL_ADC_ConfigChannel+0x668>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d14e      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d148      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dba:	d005      	beq.n	8003dc8 <HAL_ADC_ConfigChannel+0x5fc>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <HAL_ADC_ConfigChannel+0x66c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	f040 8099 	bne.w	8003efa <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0x610>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <HAL_ADC_ConfigChannel+0x658>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x614>
 8003ddc:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <HAL_ADC_ConfigChannel+0x65c>)
 8003dde:	e000      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x616>
 8003de0:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <HAL_ADC_ConfigChannel+0x660>)
 8003de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003de6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7ff f97e 	bl	80030ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_ADC_ConfigChannel+0x670>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <HAL_ADC_ConfigChannel+0x674>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	099a      	lsrs	r2, r3, #6
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e0a:	e002      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f9      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e18:	e06f      	b.n	8003efa <HAL_ADC_ConfigChannel+0x72e>
 8003e1a:	bf00      	nop
 8003e1c:	407f0000 	.word	0x407f0000
 8003e20:	80080000 	.word	0x80080000
 8003e24:	50000100 	.word	0x50000100
 8003e28:	50000300 	.word	0x50000300
 8003e2c:	50000700 	.word	0x50000700
 8003e30:	c3210000 	.word	0xc3210000
 8003e34:	90c00010 	.word	0x90c00010
 8003e38:	50000600 	.word	0x50000600
 8003e3c:	20000010 	.word	0x20000010
 8003e40:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a32      	ldr	r2, [pc, #200]	; (8003f14 <HAL_ADC_ConfigChannel+0x748>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d125      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x6ce>
 8003e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d11f      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <HAL_ADC_ConfigChannel+0x74c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d104      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x6a2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2c      	ldr	r2, [pc, #176]	; (8003f1c <HAL_ADC_ConfigChannel+0x750>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d047      	beq.n	8003efe <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e76:	d004      	beq.n	8003e82 <HAL_ADC_ConfigChannel+0x6b6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a26      	ldr	r2, [pc, #152]	; (8003f18 <HAL_ADC_ConfigChannel+0x74c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x6ba>
 8003e82:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <HAL_ADC_ConfigChannel+0x754>)
 8003e84:	e000      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x6bc>
 8003e86:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <HAL_ADC_ConfigChannel+0x758>)
 8003e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f7ff f92b 	bl	80030ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e98:	e031      	b.n	8003efe <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <HAL_ADC_ConfigChannel+0x75c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d12d      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d127      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <HAL_ADC_ConfigChannel+0x74c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d022      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ec2:	d004      	beq.n	8003ece <HAL_ADC_ConfigChannel+0x702>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_ADC_ConfigChannel+0x74c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x706>
 8003ece:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <HAL_ADC_ConfigChannel+0x754>)
 8003ed0:	e000      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x708>
 8003ed2:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <HAL_ADC_ConfigChannel+0x758>)
 8003ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f7ff f905 	bl	80030ee <LL_ADC_SetCommonPathInternalCh>
 8003ee4:	e00c      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003ef8:	e002      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003efe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3798      	adds	r7, #152	; 0x98
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	c7520000 	.word	0xc7520000
 8003f18:	50000100 	.word	0x50000100
 8003f1c:	50000500 	.word	0x50000500
 8003f20:	50000300 	.word	0x50000300
 8003f24:	50000700 	.word	0x50000700
 8003f28:	cb840000 	.word	0xcb840000

08003f2c <LL_ADC_IsEnabled>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <LL_ADC_IsEnabled+0x18>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <LL_ADC_IsEnabled+0x1a>
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d101      	bne.n	8003f6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b0a1      	sub	sp, #132	; 0x84
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e0e3      	b.n	800415e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa6:	d102      	bne.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003fa8:	4b6f      	ldr	r3, [pc, #444]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	e009      	b.n	8003fc2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6e      	ldr	r2, [pc, #440]	; (800416c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d102      	bne.n	8003fbe <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8003fb8:	4b6d      	ldr	r3, [pc, #436]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	e001      	b.n	8003fc2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0be      	b.n	800415e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff ffb5 	bl	8003f52 <LL_ADC_REG_IsConversionOngoing>
 8003fe8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff ffaf 	bl	8003f52 <LL_ADC_REG_IsConversionOngoing>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f040 80a0 	bne.w	800413c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f040 809c 	bne.w	800413c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800400c:	d004      	beq.n	8004018 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a55      	ldr	r2, [pc, #340]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d101      	bne.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8004018:	4b56      	ldr	r3, [pc, #344]	; (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800401a:	e000      	b.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800401c:	4b56      	ldr	r3, [pc, #344]	; (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800401e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d04b      	beq.n	80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800403a:	035b      	lsls	r3, r3, #13
 800403c:	430b      	orrs	r3, r1
 800403e:	431a      	orrs	r2, r3
 8004040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004042:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800404c:	d004      	beq.n	8004058 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a45      	ldr	r2, [pc, #276]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d10f      	bne.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004058:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800405c:	f7ff ff66 	bl	8003f2c <LL_ADC_IsEnabled>
 8004060:	4604      	mov	r4, r0
 8004062:	4841      	ldr	r0, [pc, #260]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8004064:	f7ff ff62 	bl	8003f2c <LL_ADC_IsEnabled>
 8004068:	4603      	mov	r3, r0
 800406a:	4323      	orrs	r3, r4
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e012      	b.n	800409e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004078:	483c      	ldr	r0, [pc, #240]	; (800416c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800407a:	f7ff ff57 	bl	8003f2c <LL_ADC_IsEnabled>
 800407e:	4604      	mov	r4, r0
 8004080:	483b      	ldr	r0, [pc, #236]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004082:	f7ff ff53 	bl	8003f2c <LL_ADC_IsEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	431c      	orrs	r4, r3
 800408a:	483c      	ldr	r0, [pc, #240]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800408c:	f7ff ff4e 	bl	8003f2c <LL_ADC_IsEnabled>
 8004090:	4603      	mov	r3, r0
 8004092:	4323      	orrs	r3, r4
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d056      	beq.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040aa:	f023 030f 	bic.w	r3, r3, #15
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	6811      	ldr	r1, [r2, #0]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	6892      	ldr	r2, [r2, #8]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	431a      	orrs	r2, r3
 80040ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040bc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040be:	e047      	b.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040d4:	d004      	beq.n	80040e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a23      	ldr	r2, [pc, #140]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10f      	bne.n	8004100 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80040e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040e4:	f7ff ff22 	bl	8003f2c <LL_ADC_IsEnabled>
 80040e8:	4604      	mov	r4, r0
 80040ea:	481f      	ldr	r0, [pc, #124]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80040ec:	f7ff ff1e 	bl	8003f2c <LL_ADC_IsEnabled>
 80040f0:	4603      	mov	r3, r0
 80040f2:	4323      	orrs	r3, r4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e012      	b.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8004100:	481a      	ldr	r0, [pc, #104]	; (800416c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8004102:	f7ff ff13 	bl	8003f2c <LL_ADC_IsEnabled>
 8004106:	4604      	mov	r4, r0
 8004108:	4819      	ldr	r0, [pc, #100]	; (8004170 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800410a:	f7ff ff0f 	bl	8003f2c <LL_ADC_IsEnabled>
 800410e:	4603      	mov	r3, r0
 8004110:	431c      	orrs	r4, r3
 8004112:	481a      	ldr	r0, [pc, #104]	; (800417c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004114:	f7ff ff0a 	bl	8003f2c <LL_ADC_IsEnabled>
 8004118:	4603      	mov	r3, r0
 800411a:	4323      	orrs	r3, r4
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d012      	beq.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004132:	f023 030f 	bic.w	r3, r3, #15
 8004136:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004138:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800413a:	e009      	b.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800414e:	e000      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004150:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800415a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800415e:	4618      	mov	r0, r3
 8004160:	3784      	adds	r7, #132	; 0x84
 8004162:	46bd      	mov	sp, r7
 8004164:	bd90      	pop	{r4, r7, pc}
 8004166:	bf00      	nop
 8004168:	50000100 	.word	0x50000100
 800416c:	50000400 	.word	0x50000400
 8004170:	50000500 	.word	0x50000500
 8004174:	50000300 	.word	0x50000300
 8004178:	50000700 	.word	0x50000700
 800417c:	50000600 	.word	0x50000600

08004180 <LL_EXTI_EnableIT_0_31>:
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <LL_EXTI_EnableIT_0_31+0x20>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4904      	ldr	r1, [pc, #16]	; (80041a0 <LL_EXTI_EnableIT_0_31+0x20>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40010400 	.word	0x40010400

080041a4 <LL_EXTI_EnableIT_32_63>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <LL_EXTI_EnableIT_32_63+0x20>)
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	4904      	ldr	r1, [pc, #16]	; (80041c4 <LL_EXTI_EnableIT_32_63+0x20>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	620b      	str	r3, [r1, #32]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40010400 	.word	0x40010400

080041c8 <LL_EXTI_DisableIT_0_31>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <LL_EXTI_DisableIT_0_31+0x24>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	4904      	ldr	r1, [pc, #16]	; (80041ec <LL_EXTI_DisableIT_0_31+0x24>)
 80041da:	4013      	ands	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010400 	.word	0x40010400

080041f0 <LL_EXTI_DisableIT_32_63>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <LL_EXTI_DisableIT_32_63+0x24>)
 80041fa:	6a1a      	ldr	r2, [r3, #32]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	43db      	mvns	r3, r3
 8004200:	4904      	ldr	r1, [pc, #16]	; (8004214 <LL_EXTI_DisableIT_32_63+0x24>)
 8004202:	4013      	ands	r3, r2
 8004204:	620b      	str	r3, [r1, #32]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40010400 	.word	0x40010400

08004218 <LL_EXTI_EnableEvent_0_31>:
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	4904      	ldr	r1, [pc, #16]	; (8004238 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4313      	orrs	r3, r2
 800422a:	604b      	str	r3, [r1, #4]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40010400 	.word	0x40010400

0800423c <LL_EXTI_EnableEvent_32_63>:
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <LL_EXTI_EnableEvent_32_63+0x20>)
 8004246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004248:	4904      	ldr	r1, [pc, #16]	; (800425c <LL_EXTI_EnableEvent_32_63+0x20>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4313      	orrs	r3, r2
 800424e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40010400 	.word	0x40010400

08004260 <LL_EXTI_DisableEvent_0_31>:
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <LL_EXTI_DisableEvent_0_31+0x24>)
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	43db      	mvns	r3, r3
 8004270:	4904      	ldr	r1, [pc, #16]	; (8004284 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004272:	4013      	ands	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40010400 	.word	0x40010400

08004288 <LL_EXTI_DisableEvent_32_63>:
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <LL_EXTI_DisableEvent_32_63+0x24>)
 8004292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	43db      	mvns	r3, r3
 8004298:	4904      	ldr	r1, [pc, #16]	; (80042ac <LL_EXTI_DisableEvent_32_63+0x24>)
 800429a:	4013      	ands	r3, r2
 800429c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40010400 	.word	0x40010400

080042b0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	4904      	ldr	r1, [pc, #16]	; (80042d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40010400 	.word	0x40010400

080042d4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80042de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042e0:	4904      	ldr	r1, [pc, #16]	; (80042f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40010400 	.word	0x40010400

080042f8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	43db      	mvns	r3, r3
 8004308:	4904      	ldr	r1, [pc, #16]	; (800431c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800430a:	4013      	ands	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010400 	.word	0x40010400

08004320 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800432a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	43db      	mvns	r3, r3
 8004330:	4904      	ldr	r1, [pc, #16]	; (8004344 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004332:	4013      	ands	r3, r2
 8004334:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40010400 	.word	0x40010400

08004348 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	4904      	ldr	r1, [pc, #16]	; (8004368 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4313      	orrs	r3, r2
 800435a:	60cb      	str	r3, [r1, #12]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	40010400 	.word	0x40010400

0800436c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	4904      	ldr	r1, [pc, #16]	; (800438c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4313      	orrs	r3, r2
 800437e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40010400 	.word	0x40010400

08004390 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	43db      	mvns	r3, r3
 80043a0:	4904      	ldr	r1, [pc, #16]	; (80043b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	60cb      	str	r3, [r1, #12]
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40010400 	.word	0x40010400

080043b8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	4904      	ldr	r1, [pc, #16]	; (80043dc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40010400 	.word	0x40010400

080043e0 <LL_EXTI_ClearFlag_0_31>:
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6153      	str	r3, [r2, #20]
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010400 	.word	0x40010400

08004400 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004408:	4a04      	ldr	r2, [pc, #16]	; (800441c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010400 	.word	0x40010400

08004420 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e180      	b.n	800473e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800444a:	d102      	bne.n	8004452 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e175      	b.n	800473e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	7f5b      	ldrb	r3, [r3, #29]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d108      	bne.n	800446e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fd f8ed 	bl	8001648 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004478:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b98      	ldr	r3, [pc, #608]	; (8004700 <HAL_COMP_Init+0x2e0>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	6979      	ldr	r1, [r7, #20]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d015      	beq.n	80044e6 <HAL_COMP_Init+0xc6>
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d112      	bne.n	80044e6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80044c0:	4b90      	ldr	r3, [pc, #576]	; (8004704 <HAL_COMP_Init+0x2e4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	099b      	lsrs	r3, r3, #6
 80044c6:	4a90      	ldr	r2, [pc, #576]	; (8004708 <HAL_COMP_Init+0x2e8>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	099a      	lsrs	r2, r3, #6
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80044d8:	e002      	b.n	80044e0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b01      	subs	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f9      	bne.n	80044da <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a88      	ldr	r2, [pc, #544]	; (800470c <HAL_COMP_Init+0x2ec>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d028      	beq.n	8004542 <HAL_COMP_Init+0x122>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a86      	ldr	r2, [pc, #536]	; (8004710 <HAL_COMP_Init+0x2f0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d020      	beq.n	800453c <HAL_COMP_Init+0x11c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a85      	ldr	r2, [pc, #532]	; (8004714 <HAL_COMP_Init+0x2f4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_COMP_Init+0x116>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a83      	ldr	r2, [pc, #524]	; (8004718 <HAL_COMP_Init+0x2f8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d010      	beq.n	8004530 <HAL_COMP_Init+0x110>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a82      	ldr	r2, [pc, #520]	; (800471c <HAL_COMP_Init+0x2fc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d008      	beq.n	800452a <HAL_COMP_Init+0x10a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a80      	ldr	r2, [pc, #512]	; (8004720 <HAL_COMP_Init+0x300>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <HAL_COMP_Init+0x106>
 8004522:	2301      	movs	r3, #1
 8004524:	e00f      	b.n	8004546 <HAL_COMP_Init+0x126>
 8004526:	2302      	movs	r3, #2
 8004528:	e00d      	b.n	8004546 <HAL_COMP_Init+0x126>
 800452a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800452e:	e00a      	b.n	8004546 <HAL_COMP_Init+0x126>
 8004530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004534:	e007      	b.n	8004546 <HAL_COMP_Init+0x126>
 8004536:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800453a:	e004      	b.n	8004546 <HAL_COMP_Init+0x126>
 800453c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004540:	e001      	b.n	8004546 <HAL_COMP_Init+0x126>
 8004542:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004546:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80b6 	beq.w	80046c2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d011      	beq.n	8004586 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6e      	ldr	r2, [pc, #440]	; (8004720 <HAL_COMP_Init+0x300>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_COMP_Init+0x156>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6c      	ldr	r2, [pc, #432]	; (8004724 <HAL_COMP_Init+0x304>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d103      	bne.n	800457e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8004576:	6938      	ldr	r0, [r7, #16]
 8004578:	f7ff feac 	bl	80042d4 <LL_EXTI_EnableRisingTrig_32_63>
 800457c:	e014      	b.n	80045a8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800457e:	6938      	ldr	r0, [r7, #16]
 8004580:	f7ff fe96 	bl	80042b0 <LL_EXTI_EnableRisingTrig_0_31>
 8004584:	e010      	b.n	80045a8 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a65      	ldr	r2, [pc, #404]	; (8004720 <HAL_COMP_Init+0x300>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_COMP_Init+0x17a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a63      	ldr	r2, [pc, #396]	; (8004724 <HAL_COMP_Init+0x304>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d103      	bne.n	80045a2 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800459a:	6938      	ldr	r0, [r7, #16]
 800459c:	f7ff fec0 	bl	8004320 <LL_EXTI_DisableRisingTrig_32_63>
 80045a0:	e002      	b.n	80045a8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80045a2:	6938      	ldr	r0, [r7, #16]
 80045a4:	f7ff fea8 	bl	80042f8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d011      	beq.n	80045d8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a59      	ldr	r2, [pc, #356]	; (8004720 <HAL_COMP_Init+0x300>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_COMP_Init+0x1a8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_COMP_Init+0x304>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d103      	bne.n	80045d0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80045c8:	6938      	ldr	r0, [r7, #16]
 80045ca:	f7ff fecf 	bl	800436c <LL_EXTI_EnableFallingTrig_32_63>
 80045ce:	e014      	b.n	80045fa <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80045d0:	6938      	ldr	r0, [r7, #16]
 80045d2:	f7ff feb9 	bl	8004348 <LL_EXTI_EnableFallingTrig_0_31>
 80045d6:	e010      	b.n	80045fa <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a50      	ldr	r2, [pc, #320]	; (8004720 <HAL_COMP_Init+0x300>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_COMP_Init+0x1cc>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a4f      	ldr	r2, [pc, #316]	; (8004724 <HAL_COMP_Init+0x304>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d103      	bne.n	80045f4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80045ec:	6938      	ldr	r0, [r7, #16]
 80045ee:	f7ff fee3 	bl	80043b8 <LL_EXTI_DisableFallingTrig_32_63>
 80045f2:	e002      	b.n	80045fa <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80045f4:	6938      	ldr	r0, [r7, #16]
 80045f6:	f7ff fecb 	bl	8004390 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a48      	ldr	r2, [pc, #288]	; (8004720 <HAL_COMP_Init+0x300>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_COMP_Init+0x1ee>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a46      	ldr	r2, [pc, #280]	; (8004724 <HAL_COMP_Init+0x304>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d103      	bne.n	8004616 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800460e:	6938      	ldr	r0, [r7, #16]
 8004610:	f7ff fef6 	bl	8004400 <LL_EXTI_ClearFlag_32_63>
 8004614:	e002      	b.n	800461c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8004616:	6938      	ldr	r0, [r7, #16]
 8004618:	f7ff fee2 	bl	80043e0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d011      	beq.n	800464c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a3c      	ldr	r2, [pc, #240]	; (8004720 <HAL_COMP_Init+0x300>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_COMP_Init+0x21c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3b      	ldr	r2, [pc, #236]	; (8004724 <HAL_COMP_Init+0x304>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d103      	bne.n	8004644 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800463c:	6938      	ldr	r0, [r7, #16]
 800463e:	f7ff fdfd 	bl	800423c <LL_EXTI_EnableEvent_32_63>
 8004642:	e014      	b.n	800466e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004644:	6938      	ldr	r0, [r7, #16]
 8004646:	f7ff fde7 	bl	8004218 <LL_EXTI_EnableEvent_0_31>
 800464a:	e010      	b.n	800466e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a33      	ldr	r2, [pc, #204]	; (8004720 <HAL_COMP_Init+0x300>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_COMP_Init+0x240>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a32      	ldr	r2, [pc, #200]	; (8004724 <HAL_COMP_Init+0x304>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d103      	bne.n	8004668 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8004660:	6938      	ldr	r0, [r7, #16]
 8004662:	f7ff fe11 	bl	8004288 <LL_EXTI_DisableEvent_32_63>
 8004666:	e002      	b.n	800466e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8004668:	6938      	ldr	r0, [r7, #16]
 800466a:	f7ff fdf9 	bl	8004260 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a28      	ldr	r2, [pc, #160]	; (8004720 <HAL_COMP_Init+0x300>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_COMP_Init+0x26e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a26      	ldr	r2, [pc, #152]	; (8004724 <HAL_COMP_Init+0x304>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d103      	bne.n	8004696 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800468e:	6938      	ldr	r0, [r7, #16]
 8004690:	f7ff fd88 	bl	80041a4 <LL_EXTI_EnableIT_32_63>
 8004694:	e04b      	b.n	800472e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8004696:	6938      	ldr	r0, [r7, #16]
 8004698:	f7ff fd72 	bl	8004180 <LL_EXTI_EnableIT_0_31>
 800469c:	e047      	b.n	800472e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <HAL_COMP_Init+0x300>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_COMP_Init+0x292>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <HAL_COMP_Init+0x304>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d103      	bne.n	80046ba <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80046b2:	6938      	ldr	r0, [r7, #16]
 80046b4:	f7ff fd9c 	bl	80041f0 <LL_EXTI_DisableIT_32_63>
 80046b8:	e039      	b.n	800472e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80046ba:	6938      	ldr	r0, [r7, #16]
 80046bc:	f7ff fd84 	bl	80041c8 <LL_EXTI_DisableIT_0_31>
 80046c0:	e035      	b.n	800472e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a16      	ldr	r2, [pc, #88]	; (8004720 <HAL_COMP_Init+0x300>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_COMP_Init+0x2b6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <HAL_COMP_Init+0x304>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d103      	bne.n	80046de <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80046d6:	6938      	ldr	r0, [r7, #16]
 80046d8:	f7ff fdd6 	bl	8004288 <LL_EXTI_DisableEvent_32_63>
 80046dc:	e002      	b.n	80046e4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80046de:	6938      	ldr	r0, [r7, #16]
 80046e0:	f7ff fdbe 	bl	8004260 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a0d      	ldr	r2, [pc, #52]	; (8004720 <HAL_COMP_Init+0x300>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_COMP_Init+0x2d8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <HAL_COMP_Init+0x304>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d117      	bne.n	8004728 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80046f8:	6938      	ldr	r0, [r7, #16]
 80046fa:	f7ff fd79 	bl	80041f0 <LL_EXTI_DisableIT_32_63>
 80046fe:	e016      	b.n	800472e <HAL_COMP_Init+0x30e>
 8004700:	ff007e0f 	.word	0xff007e0f
 8004704:	20000010 	.word	0x20000010
 8004708:	053e2d63 	.word	0x053e2d63
 800470c:	40010200 	.word	0x40010200
 8004710:	40010204 	.word	0x40010204
 8004714:	40010208 	.word	0x40010208
 8004718:	4001020c 	.word	0x4001020c
 800471c:	40010210 	.word	0x40010210
 8004720:	40010214 	.word	0x40010214
 8004724:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004728:	6938      	ldr	r0, [r7, #16]
 800472a:	f7ff fd4d 	bl	80041c8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	7f5b      	ldrb	r3, [r3, #29]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d102      	bne.n	800473e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800473e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <__NVIC_SetPriorityGrouping>:
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <__NVIC_SetPriorityGrouping+0x44>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004764:	4013      	ands	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800477a:	4a04      	ldr	r2, [pc, #16]	; (800478c <__NVIC_SetPriorityGrouping+0x44>)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	60d3      	str	r3, [r2, #12]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <__NVIC_GetPriorityGrouping>:
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004794:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 0307 	and.w	r3, r3, #7
}
 800479e:	4618      	mov	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_EnableIRQ>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	db0b      	blt.n	80047d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	f003 021f 	and.w	r2, r3, #31
 80047c4:	4907      	ldr	r1, [pc, #28]	; (80047e4 <__NVIC_EnableIRQ+0x38>)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2001      	movs	r0, #1
 80047ce:	fa00 f202 	lsl.w	r2, r0, r2
 80047d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000e100 	.word	0xe000e100

080047e8 <__NVIC_SetPriority>:
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	6039      	str	r1, [r7, #0]
 80047f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	db0a      	blt.n	8004812 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	490c      	ldr	r1, [pc, #48]	; (8004834 <__NVIC_SetPriority+0x4c>)
 8004802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004806:	0112      	lsls	r2, r2, #4
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	440b      	add	r3, r1
 800480c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004810:	e00a      	b.n	8004828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	4908      	ldr	r1, [pc, #32]	; (8004838 <__NVIC_SetPriority+0x50>)
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	3b04      	subs	r3, #4
 8004820:	0112      	lsls	r2, r2, #4
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	440b      	add	r3, r1
 8004826:	761a      	strb	r2, [r3, #24]
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	e000e100 	.word	0xe000e100
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <NVIC_EncodePriority>:
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f1c3 0307 	rsb	r3, r3, #7
 8004856:	2b04      	cmp	r3, #4
 8004858:	bf28      	it	cs
 800485a:	2304      	movcs	r3, #4
 800485c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3304      	adds	r3, #4
 8004862:	2b06      	cmp	r3, #6
 8004864:	d902      	bls.n	800486c <NVIC_EncodePriority+0x30>
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3b03      	subs	r3, #3
 800486a:	e000      	b.n	800486e <NVIC_EncodePriority+0x32>
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43da      	mvns	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	401a      	ands	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	fa01 f303 	lsl.w	r3, r1, r3
 800488e:	43d9      	mvns	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004894:	4313      	orrs	r3, r2
}
 8004896:	4618      	mov	r0, r3
 8004898:	3724      	adds	r7, #36	; 0x24
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <SysTick_Config>:
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b4:	d301      	bcc.n	80048ba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00f      	b.n	80048da <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <SysTick_Config+0x40>)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048c2:	210f      	movs	r1, #15
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048c8:	f7ff ff8e 	bl	80047e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <SysTick_Config+0x40>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048d2:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <SysTick_Config+0x40>)
 80048d4:	2207      	movs	r2, #7
 80048d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	e000e010 	.word	0xe000e010

080048e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ff29 	bl	8004748 <__NVIC_SetPriorityGrouping>
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	4603      	mov	r3, r0
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800490c:	f7ff ff40 	bl	8004790 <__NVIC_GetPriorityGrouping>
 8004910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	6978      	ldr	r0, [r7, #20]
 8004918:	f7ff ff90 	bl	800483c <NVIC_EncodePriority>
 800491c:	4602      	mov	r2, r0
 800491e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004922:	4611      	mov	r1, r2
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff ff5f 	bl	80047e8 <__NVIC_SetPriority>
}
 800492a:	bf00      	nop
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	4603      	mov	r3, r0
 800493a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800493c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ff33 	bl	80047ac <__NVIC_EnableIRQ>
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ffa4 	bl	80048a4 <SysTick_Config>
 800495c:	4603      	mov	r3, r0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e014      	b.n	80049a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	791b      	ldrb	r3, [r3, #4]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fc ff13 	bl	80017b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	795b      	ldrb	r3, [r3, #5]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_DAC_Start+0x16>
 80049bc:	2302      	movs	r3, #2
 80049be:	e043      	b.n	8004a48 <HAL_DAC_Start+0x9e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6819      	ldr	r1, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2201      	movs	r2, #1
 80049da:	409a      	lsls	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80049e4:	2001      	movs	r0, #1
 80049e6:	f7fe fb4d 	bl	8003084 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10f      	bne.n	8004a10 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d11d      	bne.n	8004a3a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	e014      	b.n	8004a3a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2102      	movs	r1, #2
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d107      	bne.n	8004a3a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0202 	orr.w	r2, r2, #2
 8004a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	795b      	ldrb	r3, [r3, #5]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_DAC_Start_DMA+0x1e>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e0a1      	b.n	8004bb2 <HAL_DAC_Start_DMA+0x162>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2202      	movs	r2, #2
 8004a78:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d12a      	bne.n	8004ad6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a4d      	ldr	r2, [pc, #308]	; (8004bbc <HAL_DAC_Start_DMA+0x16c>)
 8004a86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a4c      	ldr	r2, [pc, #304]	; (8004bc0 <HAL_DAC_Start_DMA+0x170>)
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a4b      	ldr	r2, [pc, #300]	; (8004bc4 <HAL_DAC_Start_DMA+0x174>)
 8004a96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d009      	beq.n	8004ac2 <HAL_DAC_Start_DMA+0x72>
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d00c      	beq.n	8004acc <HAL_DAC_Start_DMA+0x7c>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d000      	beq.n	8004ab8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004ab6:	e039      	b.n	8004b2c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	613b      	str	r3, [r7, #16]
        break;
 8004ac0:	e034      	b.n	8004b2c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	613b      	str	r3, [r7, #16]
        break;
 8004aca:	e02f      	b.n	8004b2c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3310      	adds	r3, #16
 8004ad2:	613b      	str	r3, [r7, #16]
        break;
 8004ad4:	e02a      	b.n	8004b2c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4a3b      	ldr	r2, [pc, #236]	; (8004bc8 <HAL_DAC_Start_DMA+0x178>)
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4a3a      	ldr	r2, [pc, #232]	; (8004bcc <HAL_DAC_Start_DMA+0x17c>)
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4a39      	ldr	r2, [pc, #228]	; (8004bd0 <HAL_DAC_Start_DMA+0x180>)
 8004aec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d009      	beq.n	8004b18 <HAL_DAC_Start_DMA+0xc8>
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d00c      	beq.n	8004b22 <HAL_DAC_Start_DMA+0xd2>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d000      	beq.n	8004b0e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004b0c:	e00e      	b.n	8004b2c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3314      	adds	r3, #20
 8004b14:	613b      	str	r3, [r7, #16]
        break;
 8004b16:	e009      	b.n	8004b2c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3318      	adds	r3, #24
 8004b1e:	613b      	str	r3, [r7, #16]
        break;
 8004b20:	e004      	b.n	8004b2c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	331c      	adds	r3, #28
 8004b28:	613b      	str	r3, [r7, #16]
        break;
 8004b2a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d111      	bne.n	8004b56 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b40:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6898      	ldr	r0, [r3, #8]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	f000 fbc8 	bl	80052e0 <HAL_DMA_Start_IT>
 8004b50:	4603      	mov	r3, r0
 8004b52:	75fb      	strb	r3, [r7, #23]
 8004b54:	e010      	b.n	8004b78 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004b64:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68d8      	ldr	r0, [r3, #12]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	f000 fbb6 	bl	80052e0 <HAL_DMA_Start_IT>
 8004b74:	4603      	mov	r3, r0
 8004b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10f      	bne.n	8004ba4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2201      	movs	r2, #1
 8004b92:	409a      	lsls	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	f7fe fa71 	bl	8003084 <HAL_Delay>
 8004ba2:	e005      	b.n	8004bb0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f043 0204 	orr.w	r2, r3, #4
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	0800507d 	.word	0x0800507d
 8004bc0:	0800509f 	.word	0x0800509f
 8004bc4:	080050bb 	.word	0x080050bb
 8004bc8:	08005125 	.word	0x08005125
 8004bcc:	08005147 	.word	0x08005147
 8004bd0:	08005163 	.word	0x08005163

08004bd4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43da      	mvns	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	400a      	ands	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2201      	movs	r2, #1
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	400a      	ands	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7fe fa33 	bl	8003084 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10f      	bne.n	8004c44 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fbd4 	bl	80053d6 <HAL_DMA_Abort>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e00e      	b.n	8004c62 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fbc4 	bl	80053d6 <HAL_DMA_Abort>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004c60:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	711a      	strb	r2, [r3, #4]
 8004c6e:	e002      	b.n	8004c76 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4413      	add	r3, r2
 8004caa:	3308      	adds	r3, #8
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	e004      	b.n	8004cba <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3314      	adds	r3, #20
 8004cb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	e002      	b.n	8004d16 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	795b      	ldrb	r3, [r3, #5]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_DAC_ConfigChannel+0x1c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e194      	b.n	800506a <HAL_DAC_ConfigChannel+0x346>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d174      	bne.n	8004e3e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d137      	bne.n	8004dca <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8004d5a:	f7fe f987 	bl	800306c <HAL_GetTick>
 8004d5e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d60:	e011      	b.n	8004d86 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d62:	f7fe f983 	bl	800306c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d90a      	bls.n	8004d86 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f043 0208 	orr.w	r2, r3, #8
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2203      	movs	r2, #3
 8004d80:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e171      	b.n	800506a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e6      	bne.n	8004d62 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004d94:	2001      	movs	r0, #1
 8004d96:	f7fe f975 	bl	8003084 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
 8004da4:	e01e      	b.n	8004de4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004da6:	f7fe f961 	bl	800306c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d90a      	bls.n	8004dca <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f043 0208 	orr.w	r2, r3, #8
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e14f      	b.n	800506a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	dbe8      	blt.n	8004da6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f7fe f955 	bl	8003084 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004df4:	fa01 f303 	lsl.w	r3, r1, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	ea02 0103 	and.w	r1, r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	21ff      	movs	r1, #255	; 0xff
 8004e20:	fa01 f303 	lsl.w	r3, r1, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	ea02 0103 	and.w	r1, r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	409a      	lsls	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d11d      	bne.n	8004e82 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	221f      	movs	r2, #31
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	4013      	ands	r3, r2
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e76:	4313      	orrs	r3, r2
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2207      	movs	r2, #7
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	e011      	b.n	8004ed4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	e008      	b.n	8004ed4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	e001      	b.n	8004ed4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	791b      	ldrb	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d102      	bne.n	8004f08 <HAL_DAC_ConfigChannel+0x1e4>
 8004f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f06:	e000      	b.n	8004f0a <HAL_DAC_ConfigChannel+0x1e6>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f22:	4013      	ands	r3, r2
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	795b      	ldrb	r3, [r3, #5]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d102      	bne.n	8004f34 <HAL_DAC_ConfigChannel+0x210>
 8004f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f32:	e000      	b.n	8004f36 <HAL_DAC_ConfigChannel+0x212>
 8004f34:	2300      	movs	r3, #0
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d114      	bne.n	8004f76 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004f4c:	f001 faf8 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 8004f50:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	4a47      	ldr	r2, [pc, #284]	; (8005074 <HAL_DAC_ConfigChannel+0x350>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d904      	bls.n	8004f64 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
 8004f62:	e00d      	b.n	8004f80 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4a44      	ldr	r2, [pc, #272]	; (8005078 <HAL_DAC_ConfigChannel+0x354>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d909      	bls.n	8004f80 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
 8004f74:	e004      	b.n	8004f80 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6819      	ldr	r1, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43da      	mvns	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fea:	4313      	orrs	r3, r2
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6819      	ldr	r1, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	22c0      	movs	r2, #192	; 0xc0
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43da      	mvns	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	400a      	ands	r2, r1
 8005010:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	ea02 0103 	and.w	r1, r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	409a      	lsls	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3728      	adds	r7, #40	; 0x28
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	09896800 	.word	0x09896800
 8005078:	04c4b400 	.word	0x04c4b400

0800507c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fe20 	bl	8004cd0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	711a      	strb	r2, [r3, #4]
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff fe19 	bl	8004ce4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f043 0204 	orr.w	r2, r3, #4
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7fd f812 	bl	80020fe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	711a      	strb	r2, [r3, #4]
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff ffd8 	bl	80050e8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	711a      	strb	r2, [r3, #4]
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7ff ffd1 	bl	80050fc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f043 0204 	orr.w	r2, r3, #4
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff ffc7 	bl	8005110 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	711a      	strb	r2, [r3, #4]
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e08d      	b.n	80052be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_DMA_Init+0x138>)
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d80f      	bhi.n	80051ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	4b45      	ldr	r3, [pc, #276]	; (80052cc <HAL_DMA_Init+0x13c>)
 80051b6:	4413      	add	r3, r2
 80051b8:	4a45      	ldr	r2, [pc, #276]	; (80052d0 <HAL_DMA_Init+0x140>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	009a      	lsls	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a42      	ldr	r2, [pc, #264]	; (80052d4 <HAL_DMA_Init+0x144>)
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
 80051cc:	e00e      	b.n	80051ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <HAL_DMA_Init+0x148>)
 80051d6:	4413      	add	r3, r2
 80051d8:	4a3d      	ldr	r2, [pc, #244]	; (80052d0 <HAL_DMA_Init+0x140>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	009a      	lsls	r2, r3, #2
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a3c      	ldr	r2, [pc, #240]	; (80052dc <HAL_DMA_Init+0x14c>)
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fa10 	bl	8005664 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800524c:	d102      	bne.n	8005254 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005268:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d010      	beq.n	8005294 <HAL_DMA_Init+0x104>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d80c      	bhi.n	8005294 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa30 	bl	80056e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	e008      	b.n	80052a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40020407 	.word	0x40020407
 80052cc:	bffdfff8 	.word	0xbffdfff8
 80052d0:	cccccccd 	.word	0xcccccccd
 80052d4:	40020000 	.word	0x40020000
 80052d8:	bffdfbf8 	.word	0xbffdfbf8
 80052dc:	40020400 	.word	0x40020400

080052e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_DMA_Start_IT+0x20>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e066      	b.n	80053ce <HAL_DMA_Start_IT+0xee>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	d155      	bne.n	80053c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0201 	bic.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f954 	bl	80055e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 020e 	orr.w	r2, r2, #14
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e00f      	b.n	8005378 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0204 	bic.w	r2, r2, #4
 8005366:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 020a 	orr.w	r2, r2, #10
 8005376:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005394:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	2b00      	cmp	r3, #0
 800539c:	d007      	beq.n	80053ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e005      	b.n	80053cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
 80053ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d005      	beq.n	80053fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2204      	movs	r2, #4
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
 80053f8:	e037      	b.n	800546a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 020e 	bic.w	r2, r2, #14
 8005408:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005418:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	f003 021f 	and.w	r2, r3, #31
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2101      	movs	r1, #1
 8005438:	fa01 f202 	lsl.w	r2, r1, r2
 800543c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005446:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00c      	beq.n	800546a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800545e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005468:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	2204      	movs	r2, #4
 80054aa:	409a      	lsls	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d026      	beq.n	8005502 <HAL_DMA_IRQHandler+0x7a>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d021      	beq.n	8005502 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d107      	bne.n	80054dc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e0:	f003 021f 	and.w	r2, r3, #31
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	2104      	movs	r1, #4
 80054ea:	fa01 f202 	lsl.w	r2, r1, r2
 80054ee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d071      	beq.n	80055dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005500:	e06c      	b.n	80055dc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2202      	movs	r2, #2
 800550c:	409a      	lsls	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02e      	beq.n	8005574 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d029      	beq.n	8005574 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10b      	bne.n	8005546 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 020a 	bic.w	r2, r2, #10
 800553c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f003 021f 	and.w	r2, r3, #31
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2102      	movs	r1, #2
 8005554:	fa01 f202 	lsl.w	r2, r1, r2
 8005558:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d038      	beq.n	80055dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005572:	e033      	b.n	80055dc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	2208      	movs	r2, #8
 800557e:	409a      	lsls	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02a      	beq.n	80055de <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d025      	beq.n	80055de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 020e 	bic.w	r2, r2, #14
 80055a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	f003 021f 	and.w	r2, r3, #31
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	2101      	movs	r1, #1
 80055b0:	fa01 f202 	lsl.w	r2, r1, r2
 80055b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
}
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055fc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800560e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	f003 021f 	and.w	r2, r3, #31
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	2101      	movs	r1, #1
 800561e:	fa01 f202 	lsl.w	r2, r1, r2
 8005622:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b10      	cmp	r3, #16
 8005632:	d108      	bne.n	8005646 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005644:	e007      	b.n	8005656 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	60da      	str	r2, [r3, #12]
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
	...

08005664 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005674:	429a      	cmp	r2, r3
 8005676:	d802      	bhi.n	800567e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e001      	b.n	8005682 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005680:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	b2db      	uxtb	r3, r3
 800568c:	3b08      	subs	r3, #8
 800568e:	4a12      	ldr	r2, [pc, #72]	; (80056d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569c:	089b      	lsrs	r3, r3, #2
 800569e:	009a      	lsls	r2, r3, #2
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a0b      	ldr	r2, [pc, #44]	; (80056dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80056ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2201      	movs	r2, #1
 80056b8:	409a      	lsls	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40020407 	.word	0x40020407
 80056d0:	40020800 	.word	0x40020800
 80056d4:	40020820 	.word	0x40020820
 80056d8:	cccccccd 	.word	0xcccccccd
 80056dc:	40020880 	.word	0x40020880

080056e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	461a      	mov	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a08      	ldr	r2, [pc, #32]	; (8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005702:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3b01      	subs	r3, #1
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2201      	movs	r2, #1
 800570e:	409a      	lsls	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	1000823f 	.word	0x1000823f
 8005724:	40020940 	.word	0x40020940

08005728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005736:	e15a      	b.n	80059ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	2101      	movs	r1, #1
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	fa01 f303 	lsl.w	r3, r1, r3
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 814c 	beq.w	80059e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d00b      	beq.n	8005770 <HAL_GPIO_Init+0x48>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d007      	beq.n	8005770 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005764:	2b11      	cmp	r3, #17
 8005766:	d003      	beq.n	8005770 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b12      	cmp	r3, #18
 800576e:	d130      	bne.n	80057d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	2203      	movs	r2, #3
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	43db      	mvns	r3, r3
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057a6:	2201      	movs	r2, #1
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43db      	mvns	r3, r3
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4013      	ands	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	091b      	lsrs	r3, r3, #4
 80057bc:	f003 0201 	and.w	r2, r3, #1
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	2203      	movs	r2, #3
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4013      	ands	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d003      	beq.n	8005812 <HAL_GPIO_Init+0xea>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b12      	cmp	r3, #18
 8005810:	d123      	bne.n	800585a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	08da      	lsrs	r2, r3, #3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3208      	adds	r2, #8
 800581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	220f      	movs	r2, #15
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4013      	ands	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	08da      	lsrs	r2, r3, #3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3208      	adds	r2, #8
 8005854:	6939      	ldr	r1, [r7, #16]
 8005856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	2203      	movs	r2, #3
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43db      	mvns	r3, r3
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4013      	ands	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f003 0203 	and.w	r2, r3, #3
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 80a6 	beq.w	80059e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800589c:	4b5b      	ldr	r3, [pc, #364]	; (8005a0c <HAL_GPIO_Init+0x2e4>)
 800589e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a0:	4a5a      	ldr	r2, [pc, #360]	; (8005a0c <HAL_GPIO_Init+0x2e4>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6613      	str	r3, [r2, #96]	; 0x60
 80058a8:	4b58      	ldr	r3, [pc, #352]	; (8005a0c <HAL_GPIO_Init+0x2e4>)
 80058aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058b4:	4a56      	ldr	r2, [pc, #344]	; (8005a10 <HAL_GPIO_Init+0x2e8>)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	089b      	lsrs	r3, r3, #2
 80058ba:	3302      	adds	r3, #2
 80058bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	220f      	movs	r2, #15
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4013      	ands	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058de:	d01f      	beq.n	8005920 <HAL_GPIO_Init+0x1f8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a4c      	ldr	r2, [pc, #304]	; (8005a14 <HAL_GPIO_Init+0x2ec>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d019      	beq.n	800591c <HAL_GPIO_Init+0x1f4>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a4b      	ldr	r2, [pc, #300]	; (8005a18 <HAL_GPIO_Init+0x2f0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_GPIO_Init+0x1f0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a4a      	ldr	r2, [pc, #296]	; (8005a1c <HAL_GPIO_Init+0x2f4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00d      	beq.n	8005914 <HAL_GPIO_Init+0x1ec>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a49      	ldr	r2, [pc, #292]	; (8005a20 <HAL_GPIO_Init+0x2f8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <HAL_GPIO_Init+0x1e8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a48      	ldr	r2, [pc, #288]	; (8005a24 <HAL_GPIO_Init+0x2fc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d101      	bne.n	800590c <HAL_GPIO_Init+0x1e4>
 8005908:	2305      	movs	r3, #5
 800590a:	e00a      	b.n	8005922 <HAL_GPIO_Init+0x1fa>
 800590c:	2306      	movs	r3, #6
 800590e:	e008      	b.n	8005922 <HAL_GPIO_Init+0x1fa>
 8005910:	2304      	movs	r3, #4
 8005912:	e006      	b.n	8005922 <HAL_GPIO_Init+0x1fa>
 8005914:	2303      	movs	r3, #3
 8005916:	e004      	b.n	8005922 <HAL_GPIO_Init+0x1fa>
 8005918:	2302      	movs	r3, #2
 800591a:	e002      	b.n	8005922 <HAL_GPIO_Init+0x1fa>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <HAL_GPIO_Init+0x1fa>
 8005920:	2300      	movs	r3, #0
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	f002 0203 	and.w	r2, r2, #3
 8005928:	0092      	lsls	r2, r2, #2
 800592a:	4093      	lsls	r3, r2
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005932:	4937      	ldr	r1, [pc, #220]	; (8005a10 <HAL_GPIO_Init+0x2e8>)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	3302      	adds	r3, #2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005940:	4b39      	ldr	r3, [pc, #228]	; (8005a28 <HAL_GPIO_Init+0x300>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	43db      	mvns	r3, r3
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4013      	ands	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005964:	4a30      	ldr	r2, [pc, #192]	; (8005a28 <HAL_GPIO_Init+0x300>)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800596a:	4b2f      	ldr	r3, [pc, #188]	; (8005a28 <HAL_GPIO_Init+0x300>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	43db      	mvns	r3, r3
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4013      	ands	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800598e:	4a26      	ldr	r2, [pc, #152]	; (8005a28 <HAL_GPIO_Init+0x300>)
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005994:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <HAL_GPIO_Init+0x300>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	43db      	mvns	r3, r3
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059b8:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <HAL_GPIO_Init+0x300>)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80059be:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <HAL_GPIO_Init+0x300>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	43db      	mvns	r3, r3
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4013      	ands	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059e2:	4a11      	ldr	r2, [pc, #68]	; (8005a28 <HAL_GPIO_Init+0x300>)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	3301      	adds	r3, #1
 80059ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f47f ae9d 	bne.w	8005738 <HAL_GPIO_Init+0x10>
  }
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40010000 	.word	0x40010000
 8005a14:	48000400 	.word	0x48000400
 8005a18:	48000800 	.word	0x48000800
 8005a1c:	48000c00 	.word	0x48000c00
 8005a20:	48001000 	.word	0x48001000
 8005a24:	48001400 	.word	0x48001400
 8005a28:	40010400 	.word	0x40010400

08005a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	887b      	ldrh	r3, [r7, #2]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a44:	2301      	movs	r3, #1
 8005a46:	73fb      	strb	r3, [r7, #15]
 8005a48:	e001      	b.n	8005a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	807b      	strh	r3, [r7, #2]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a6c:	787b      	ldrb	r3, [r7, #1]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a72:	887a      	ldrh	r2, [r7, #2]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a78:	e002      	b.n	8005a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d141      	bne.n	8005b1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a9a:	4b4b      	ldr	r3, [pc, #300]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa6:	d131      	bne.n	8005b0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005aa8:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aae:	4a46      	ldr	r2, [pc, #280]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ab8:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ac0:	4a41      	ldr	r2, [pc, #260]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ac6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ac8:	4b40      	ldr	r3, [pc, #256]	; (8005bcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2232      	movs	r2, #50	; 0x32
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	4a3f      	ldr	r2, [pc, #252]	; (8005bd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	0c9b      	lsrs	r3, r3, #18
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ade:	e002      	b.n	8005ae6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ae6:	4b38      	ldr	r3, [pc, #224]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af2:	d102      	bne.n	8005afa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f2      	bne.n	8005ae0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005afa:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b06:	d158      	bne.n	8005bba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e057      	b.n	8005bbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b0c:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b12:	4a2d      	ldr	r2, [pc, #180]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b1c:	e04d      	b.n	8005bba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b24:	d141      	bne.n	8005baa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b26:	4b28      	ldr	r3, [pc, #160]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b32:	d131      	bne.n	8005b98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b3a:	4a23      	ldr	r2, [pc, #140]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b44:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b4c:	4a1e      	ldr	r2, [pc, #120]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b54:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2232      	movs	r2, #50	; 0x32
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b60:	fba2 2303 	umull	r2, r3, r2, r3
 8005b64:	0c9b      	lsrs	r3, r3, #18
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b6a:	e002      	b.n	8005b72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7e:	d102      	bne.n	8005b86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f2      	bne.n	8005b6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b92:	d112      	bne.n	8005bba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e011      	b.n	8005bbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b98:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ba8:	e007      	b.n	8005bba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bb2:	4a05      	ldr	r2, [pc, #20]	; (8005bc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40007000 	.word	0x40007000
 8005bcc:	20000010 	.word	0x20000010
 8005bd0:	431bde83 	.word	0x431bde83

08005bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e308      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d075      	beq.n	8005cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bf2:	4ba3      	ldr	r3, [pc, #652]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
 8005bfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bfc:	4ba0      	ldr	r3, [pc, #640]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b0c      	cmp	r3, #12
 8005c0a:	d102      	bne.n	8005c12 <HAL_RCC_OscConfig+0x3e>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d002      	beq.n	8005c18 <HAL_RCC_OscConfig+0x44>
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d10b      	bne.n	8005c30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c18:	4b99      	ldr	r3, [pc, #612]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d05b      	beq.n	8005cdc <HAL_RCC_OscConfig+0x108>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d157      	bne.n	8005cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e2e3      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d106      	bne.n	8005c48 <HAL_RCC_OscConfig+0x74>
 8005c3a:	4b91      	ldr	r3, [pc, #580]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a90      	ldr	r2, [pc, #576]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	e01d      	b.n	8005c84 <HAL_RCC_OscConfig+0xb0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c50:	d10c      	bne.n	8005c6c <HAL_RCC_OscConfig+0x98>
 8005c52:	4b8b      	ldr	r3, [pc, #556]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a8a      	ldr	r2, [pc, #552]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	4b88      	ldr	r3, [pc, #544]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a87      	ldr	r2, [pc, #540]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e00b      	b.n	8005c84 <HAL_RCC_OscConfig+0xb0>
 8005c6c:	4b84      	ldr	r3, [pc, #528]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a83      	ldr	r2, [pc, #524]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	4b81      	ldr	r3, [pc, #516]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a80      	ldr	r2, [pc, #512]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d013      	beq.n	8005cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8c:	f7fd f9ee 	bl	800306c <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c94:	f7fd f9ea 	bl	800306c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b64      	cmp	r3, #100	; 0x64
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e2a8      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ca6:	4b76      	ldr	r3, [pc, #472]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0f0      	beq.n	8005c94 <HAL_RCC_OscConfig+0xc0>
 8005cb2:	e014      	b.n	8005cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fd f9da 	bl	800306c <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cbc:	f7fd f9d6 	bl	800306c <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b64      	cmp	r3, #100	; 0x64
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e294      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cce:	4b6c      	ldr	r3, [pc, #432]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0xe8>
 8005cda:	e000      	b.n	8005cde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d075      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cea:	4b65      	ldr	r3, [pc, #404]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
 8005cf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cf4:	4b62      	ldr	r3, [pc, #392]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d102      	bne.n	8005d0a <HAL_RCC_OscConfig+0x136>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d002      	beq.n	8005d10 <HAL_RCC_OscConfig+0x13c>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d11f      	bne.n	8005d50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d10:	4b5b      	ldr	r3, [pc, #364]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_OscConfig+0x154>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e267      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d28:	4b55      	ldr	r3, [pc, #340]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	061b      	lsls	r3, r3, #24
 8005d36:	4952      	ldr	r1, [pc, #328]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d3c:	4b51      	ldr	r3, [pc, #324]	; (8005e84 <HAL_RCC_OscConfig+0x2b0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fd f947 	bl	8002fd4 <HAL_InitTick>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d043      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e253      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d023      	beq.n	8005da0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d58:	4b49      	ldr	r3, [pc, #292]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a48      	ldr	r2, [pc, #288]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fd f982 	bl	800306c <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d6c:	f7fd f97e 	bl	800306c <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e23c      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d7e:	4b40      	ldr	r3, [pc, #256]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d8a:	4b3d      	ldr	r3, [pc, #244]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	061b      	lsls	r3, r3, #24
 8005d98:	4939      	ldr	r1, [pc, #228]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	604b      	str	r3, [r1, #4]
 8005d9e:	e01a      	b.n	8005dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005da0:	4b37      	ldr	r3, [pc, #220]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a36      	ldr	r2, [pc, #216]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005da6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fd f95e 	bl	800306c <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005db4:	f7fd f95a 	bl	800306c <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e218      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dc6:	4b2e      	ldr	r3, [pc, #184]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f0      	bne.n	8005db4 <HAL_RCC_OscConfig+0x1e0>
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d03c      	beq.n	8005e5c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01c      	beq.n	8005e24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dea:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df0:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfa:	f7fd f937 	bl	800306c <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e02:	f7fd f933 	bl	800306c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e1f1      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e14:	4b1a      	ldr	r3, [pc, #104]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0ef      	beq.n	8005e02 <HAL_RCC_OscConfig+0x22e>
 8005e22:	e01b      	b.n	8005e5c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e24:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e2a:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e34:	f7fd f91a 	bl	800306c <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e3c:	f7fd f916 	bl	800306c <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e1d4      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e4e:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ef      	bne.n	8005e3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 80ab 	beq.w	8005fc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e6e:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_RCC_OscConfig+0x2b4>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e005      	b.n	8005e8a <HAL_RCC_OscConfig+0x2b6>
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000
 8005e84:	20000014 	.word	0x20000014
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e8e:	4baf      	ldr	r3, [pc, #700]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	4aae      	ldr	r2, [pc, #696]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e98:	6593      	str	r3, [r2, #88]	; 0x58
 8005e9a:	4bac      	ldr	r3, [pc, #688]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eaa:	4ba9      	ldr	r3, [pc, #676]	; (8006150 <HAL_RCC_OscConfig+0x57c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d118      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb6:	4ba6      	ldr	r3, [pc, #664]	; (8006150 <HAL_RCC_OscConfig+0x57c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4aa5      	ldr	r2, [pc, #660]	; (8006150 <HAL_RCC_OscConfig+0x57c>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec2:	f7fd f8d3 	bl	800306c <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ec8:	e008      	b.n	8005edc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eca:	f7fd f8cf 	bl	800306c <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e18d      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005edc:	4b9c      	ldr	r3, [pc, #624]	; (8006150 <HAL_RCC_OscConfig+0x57c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0f0      	beq.n	8005eca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d108      	bne.n	8005f02 <HAL_RCC_OscConfig+0x32e>
 8005ef0:	4b96      	ldr	r3, [pc, #600]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	4a95      	ldr	r2, [pc, #596]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f00:	e024      	b.n	8005f4c <HAL_RCC_OscConfig+0x378>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	d110      	bne.n	8005f2c <HAL_RCC_OscConfig+0x358>
 8005f0a:	4b90      	ldr	r3, [pc, #576]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f10:	4a8e      	ldr	r2, [pc, #568]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005f12:	f043 0304 	orr.w	r3, r3, #4
 8005f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f1a:	4b8c      	ldr	r3, [pc, #560]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f20:	4a8a      	ldr	r2, [pc, #552]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f2a:	e00f      	b.n	8005f4c <HAL_RCC_OscConfig+0x378>
 8005f2c:	4b87      	ldr	r3, [pc, #540]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f32:	4a86      	ldr	r2, [pc, #536]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f3c:	4b83      	ldr	r3, [pc, #524]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f42:	4a82      	ldr	r2, [pc, #520]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005f44:	f023 0304 	bic.w	r3, r3, #4
 8005f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d016      	beq.n	8005f82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fd f88a 	bl	800306c <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f5a:	e00a      	b.n	8005f72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5c:	f7fd f886 	bl	800306c <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e142      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f72:	4b76      	ldr	r3, [pc, #472]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0ed      	beq.n	8005f5c <HAL_RCC_OscConfig+0x388>
 8005f80:	e015      	b.n	8005fae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f82:	f7fd f873 	bl	800306c <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f88:	e00a      	b.n	8005fa0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f8a:	f7fd f86f 	bl	800306c <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e12b      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fa0:	4b6a      	ldr	r3, [pc, #424]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1ed      	bne.n	8005f8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fae:	7ffb      	ldrb	r3, [r7, #31]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d105      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb4:	4b65      	ldr	r3, [pc, #404]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb8:	4a64      	ldr	r2, [pc, #400]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d03c      	beq.n	8006046 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01c      	beq.n	800600e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fd4:	4b5d      	ldr	r3, [pc, #372]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fda:	4a5c      	ldr	r2, [pc, #368]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe4:	f7fd f842 	bl	800306c <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fec:	f7fd f83e 	bl	800306c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e0fc      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ffe:	4b53      	ldr	r3, [pc, #332]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8006000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0ef      	beq.n	8005fec <HAL_RCC_OscConfig+0x418>
 800600c:	e01b      	b.n	8006046 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800600e:	4b4f      	ldr	r3, [pc, #316]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8006010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006014:	4a4d      	ldr	r2, [pc, #308]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601e:	f7fd f825 	bl	800306c <HAL_GetTick>
 8006022:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006026:	f7fd f821 	bl	800306c <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e0df      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006038:	4b44      	ldr	r3, [pc, #272]	; (800614c <HAL_RCC_OscConfig+0x578>)
 800603a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1ef      	bne.n	8006026 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80d3 	beq.w	80061f6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006050:	4b3e      	ldr	r3, [pc, #248]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 030c 	and.w	r3, r3, #12
 8006058:	2b0c      	cmp	r3, #12
 800605a:	f000 808d 	beq.w	8006178 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	2b02      	cmp	r3, #2
 8006064:	d15a      	bne.n	800611c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006066:	4b39      	ldr	r3, [pc, #228]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a38      	ldr	r2, [pc, #224]	; (800614c <HAL_RCC_OscConfig+0x578>)
 800606c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006072:	f7fc fffb 	bl	800306c <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607a:	f7fc fff7 	bl	800306c <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e0b5      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800608c:	4b2f      	ldr	r3, [pc, #188]	; (800614c <HAL_RCC_OscConfig+0x578>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1f0      	bne.n	800607a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006098:	4b2c      	ldr	r3, [pc, #176]	; (800614c <HAL_RCC_OscConfig+0x578>)
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <HAL_RCC_OscConfig+0x580>)
 800609e:	4013      	ands	r3, r2
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	6a11      	ldr	r1, [r2, #32]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060a8:	3a01      	subs	r2, #1
 80060aa:	0112      	lsls	r2, r2, #4
 80060ac:	4311      	orrs	r1, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80060b2:	0212      	lsls	r2, r2, #8
 80060b4:	4311      	orrs	r1, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80060ba:	0852      	lsrs	r2, r2, #1
 80060bc:	3a01      	subs	r2, #1
 80060be:	0552      	lsls	r2, r2, #21
 80060c0:	4311      	orrs	r1, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060c6:	0852      	lsrs	r2, r2, #1
 80060c8:	3a01      	subs	r2, #1
 80060ca:	0652      	lsls	r2, r2, #25
 80060cc:	4311      	orrs	r1, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060d2:	06d2      	lsls	r2, r2, #27
 80060d4:	430a      	orrs	r2, r1
 80060d6:	491d      	ldr	r1, [pc, #116]	; (800614c <HAL_RCC_OscConfig+0x578>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060dc:	4b1b      	ldr	r3, [pc, #108]	; (800614c <HAL_RCC_OscConfig+0x578>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1a      	ldr	r2, [pc, #104]	; (800614c <HAL_RCC_OscConfig+0x578>)
 80060e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060e8:	4b18      	ldr	r3, [pc, #96]	; (800614c <HAL_RCC_OscConfig+0x578>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <HAL_RCC_OscConfig+0x578>)
 80060ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f4:	f7fc ffba 	bl	800306c <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fc ffb6 	bl	800306c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e074      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0x528>
 800611a:	e06c      	b.n	80061f6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <HAL_RCC_OscConfig+0x578>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a0a      	ldr	r2, [pc, #40]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8006122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006126:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006128:	4b08      	ldr	r3, [pc, #32]	; (800614c <HAL_RCC_OscConfig+0x578>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4a07      	ldr	r2, [pc, #28]	; (800614c <HAL_RCC_OscConfig+0x578>)
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006134:	4b05      	ldr	r3, [pc, #20]	; (800614c <HAL_RCC_OscConfig+0x578>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4a04      	ldr	r2, [pc, #16]	; (800614c <HAL_RCC_OscConfig+0x578>)
 800613a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800613e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006142:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fc ff92 	bl	800306c <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800614a:	e00e      	b.n	800616a <HAL_RCC_OscConfig+0x596>
 800614c:	40021000 	.word	0x40021000
 8006150:	40007000 	.word	0x40007000
 8006154:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006158:	f7fc ff88 	bl	800306c <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e046      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800616a:	4b25      	ldr	r3, [pc, #148]	; (8006200 <HAL_RCC_OscConfig+0x62c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x584>
 8006176:	e03e      	b.n	80061f6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e039      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006184:	4b1e      	ldr	r3, [pc, #120]	; (8006200 <HAL_RCC_OscConfig+0x62c>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f003 0203 	and.w	r2, r3, #3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	429a      	cmp	r2, r3
 8006196:	d12c      	bne.n	80061f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	3b01      	subs	r3, #1
 80061a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d123      	bne.n	80061f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d11b      	bne.n	80061f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d113      	bne.n	80061f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	3b01      	subs	r3, #1
 80061d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061da:	429a      	cmp	r2, r3
 80061dc:	d109      	bne.n	80061f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	3b01      	subs	r3, #1
 80061ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d001      	beq.n	80061f6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40021000 	.word	0x40021000

08006204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e11e      	b.n	800645a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800621c:	4b91      	ldr	r3, [pc, #580]	; (8006464 <HAL_RCC_ClockConfig+0x260>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d910      	bls.n	800624c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622a:	4b8e      	ldr	r3, [pc, #568]	; (8006464 <HAL_RCC_ClockConfig+0x260>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 020f 	bic.w	r2, r3, #15
 8006232:	498c      	ldr	r1, [pc, #560]	; (8006464 <HAL_RCC_ClockConfig+0x260>)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	4313      	orrs	r3, r2
 8006238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b8a      	ldr	r3, [pc, #552]	; (8006464 <HAL_RCC_ClockConfig+0x260>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e106      	b.n	800645a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d073      	beq.n	8006340 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d129      	bne.n	80062b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006260:	4b81      	ldr	r3, [pc, #516]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0f4      	b.n	800645a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006270:	f000 f972 	bl	8006558 <RCC_GetSysClockFreqFromPLLSource>
 8006274:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4a7c      	ldr	r2, [pc, #496]	; (800646c <HAL_RCC_ClockConfig+0x268>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d93f      	bls.n	80062fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800627e:	4b7a      	ldr	r3, [pc, #488]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d009      	beq.n	800629e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006292:	2b00      	cmp	r3, #0
 8006294:	d033      	beq.n	80062fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800629a:	2b00      	cmp	r3, #0
 800629c:	d12f      	bne.n	80062fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800629e:	4b72      	ldr	r3, [pc, #456]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062a6:	4a70      	ldr	r2, [pc, #448]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	e024      	b.n	80062fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d107      	bne.n	80062cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062bc:	4b6a      	ldr	r3, [pc, #424]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0c6      	b.n	800645a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062cc:	4b66      	ldr	r3, [pc, #408]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0be      	b.n	800645a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80062dc:	f000 f8ce 	bl	800647c <HAL_RCC_GetSysClockFreq>
 80062e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4a61      	ldr	r2, [pc, #388]	; (800646c <HAL_RCC_ClockConfig+0x268>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d909      	bls.n	80062fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062ea:	4b5f      	ldr	r3, [pc, #380]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f2:	4a5d      	ldr	r2, [pc, #372]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 80062f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80062fa:	2380      	movs	r3, #128	; 0x80
 80062fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062fe:	4b5a      	ldr	r3, [pc, #360]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f023 0203 	bic.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4957      	ldr	r1, [pc, #348]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 800630c:	4313      	orrs	r3, r2
 800630e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006310:	f7fc feac 	bl	800306c <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	e00a      	b.n	800632e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006318:	f7fc fea8 	bl	800306c <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f241 3288 	movw	r2, #5000	; 0x1388
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e095      	b.n	800645a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632e:	4b4e      	ldr	r3, [pc, #312]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 020c 	and.w	r2, r3, #12
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	429a      	cmp	r2, r3
 800633e:	d1eb      	bne.n	8006318 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d023      	beq.n	8006394 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006358:	4b43      	ldr	r3, [pc, #268]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4a42      	ldr	r2, [pc, #264]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 800635e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006362:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006370:	4b3d      	ldr	r3, [pc, #244]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006378:	4a3b      	ldr	r2, [pc, #236]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 800637a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800637e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006380:	4b39      	ldr	r3, [pc, #228]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4936      	ldr	r1, [pc, #216]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 800638e:	4313      	orrs	r3, r2
 8006390:	608b      	str	r3, [r1, #8]
 8006392:	e008      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b80      	cmp	r3, #128	; 0x80
 8006398:	d105      	bne.n	80063a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800639a:	4b33      	ldr	r3, [pc, #204]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	4a32      	ldr	r2, [pc, #200]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 80063a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063a6:	4b2f      	ldr	r3, [pc, #188]	; (8006464 <HAL_RCC_ClockConfig+0x260>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d21d      	bcs.n	80063f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b4:	4b2b      	ldr	r3, [pc, #172]	; (8006464 <HAL_RCC_ClockConfig+0x260>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f023 020f 	bic.w	r2, r3, #15
 80063bc:	4929      	ldr	r1, [pc, #164]	; (8006464 <HAL_RCC_ClockConfig+0x260>)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80063c4:	f7fc fe52 	bl	800306c <HAL_GetTick>
 80063c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ca:	e00a      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063cc:	f7fc fe4e 	bl	800306c <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063da:	4293      	cmp	r3, r2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e03b      	b.n	800645a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e2:	4b20      	ldr	r3, [pc, #128]	; (8006464 <HAL_RCC_ClockConfig+0x260>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d1ed      	bne.n	80063cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d008      	beq.n	800640e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063fc:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	4917      	ldr	r1, [pc, #92]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800641a:	4b13      	ldr	r3, [pc, #76]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	490f      	ldr	r1, [pc, #60]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 800642a:	4313      	orrs	r3, r2
 800642c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800642e:	f000 f825 	bl	800647c <HAL_RCC_GetSysClockFreq>
 8006432:	4601      	mov	r1, r0
 8006434:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <HAL_RCC_ClockConfig+0x264>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	091b      	lsrs	r3, r3, #4
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <HAL_RCC_ClockConfig+0x26c>)
 8006440:	5cd3      	ldrb	r3, [r2, r3]
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	fa21 f303 	lsr.w	r3, r1, r3
 800644a:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <HAL_RCC_ClockConfig+0x270>)
 800644c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800644e:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <HAL_RCC_ClockConfig+0x274>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f7fc fdbe 	bl	8002fd4 <HAL_InitTick>
 8006458:	4603      	mov	r3, r0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40022000 	.word	0x40022000
 8006468:	40021000 	.word	0x40021000
 800646c:	04c4b400 	.word	0x04c4b400
 8006470:	0800a7b4 	.word	0x0800a7b4
 8006474:	20000010 	.word	0x20000010
 8006478:	20000014 	.word	0x20000014

0800647c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006482:	4b2c      	ldr	r3, [pc, #176]	; (8006534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 030c 	and.w	r3, r3, #12
 800648a:	2b04      	cmp	r3, #4
 800648c:	d102      	bne.n	8006494 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800648e:	4b2a      	ldr	r3, [pc, #168]	; (8006538 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	e047      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006494:	4b27      	ldr	r3, [pc, #156]	; (8006534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 030c 	and.w	r3, r3, #12
 800649c:	2b08      	cmp	r3, #8
 800649e:	d102      	bne.n	80064a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064a0:	4b26      	ldr	r3, [pc, #152]	; (800653c <HAL_RCC_GetSysClockFreq+0xc0>)
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	e03e      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80064a6:	4b23      	ldr	r3, [pc, #140]	; (8006534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 030c 	and.w	r3, r3, #12
 80064ae:	2b0c      	cmp	r3, #12
 80064b0:	d136      	bne.n	8006520 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064b2:	4b20      	ldr	r3, [pc, #128]	; (8006534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064bc:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	3301      	adds	r3, #1
 80064c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d10c      	bne.n	80064ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064d0:	4a1a      	ldr	r2, [pc, #104]	; (800653c <HAL_RCC_GetSysClockFreq+0xc0>)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	4a16      	ldr	r2, [pc, #88]	; (8006534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064da:	68d2      	ldr	r2, [r2, #12]
 80064dc:	0a12      	lsrs	r2, r2, #8
 80064de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	617b      	str	r3, [r7, #20]
      break;
 80064e8:	e00c      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064ea:	4a13      	ldr	r2, [pc, #76]	; (8006538 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	4a10      	ldr	r2, [pc, #64]	; (8006534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064f4:	68d2      	ldr	r2, [r2, #12]
 80064f6:	0a12      	lsrs	r2, r2, #8
 80064f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]
      break;
 8006502:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	0e5b      	lsrs	r3, r3, #25
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	3301      	adds	r3, #1
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	e001      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006524:	693b      	ldr	r3, [r7, #16]
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40021000 	.word	0x40021000
 8006538:	00f42400 	.word	0x00f42400
 800653c:	007a1200 	.word	0x007a1200

08006540 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006544:	4b03      	ldr	r3, [pc, #12]	; (8006554 <HAL_RCC_GetHCLKFreq+0x14>)
 8006546:	681b      	ldr	r3, [r3, #0]
}
 8006548:	4618      	mov	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000010 	.word	0x20000010

08006558 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800655e:	4b1e      	ldr	r3, [pc, #120]	; (80065d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006568:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	3301      	adds	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b03      	cmp	r3, #3
 800657a:	d10c      	bne.n	8006596 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800657c:	4a17      	ldr	r2, [pc, #92]	; (80065dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	fbb2 f3f3 	udiv	r3, r2, r3
 8006584:	4a14      	ldr	r2, [pc, #80]	; (80065d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006586:	68d2      	ldr	r2, [r2, #12]
 8006588:	0a12      	lsrs	r2, r2, #8
 800658a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	617b      	str	r3, [r7, #20]
    break;
 8006594:	e00c      	b.n	80065b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006596:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	fbb2 f3f3 	udiv	r3, r2, r3
 800659e:	4a0e      	ldr	r2, [pc, #56]	; (80065d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065a0:	68d2      	ldr	r2, [r2, #12]
 80065a2:	0a12      	lsrs	r2, r2, #8
 80065a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065a8:	fb02 f303 	mul.w	r3, r2, r3
 80065ac:	617b      	str	r3, [r7, #20]
    break;
 80065ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065b0:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	0e5b      	lsrs	r3, r3, #25
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	3301      	adds	r3, #1
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80065ca:	687b      	ldr	r3, [r7, #4]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	40021000 	.word	0x40021000
 80065dc:	007a1200 	.word	0x007a1200
 80065e0:	00f42400 	.word	0x00f42400

080065e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065ec:	2300      	movs	r3, #0
 80065ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065f0:	2300      	movs	r3, #0
 80065f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8098 	beq.w	8006732 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006602:	2300      	movs	r3, #0
 8006604:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006606:	4b43      	ldr	r3, [pc, #268]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10d      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006612:	4b40      	ldr	r3, [pc, #256]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	4a3f      	ldr	r2, [pc, #252]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661c:	6593      	str	r3, [r2, #88]	; 0x58
 800661e:	4b3d      	ldr	r3, [pc, #244]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006626:	60bb      	str	r3, [r7, #8]
 8006628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800662a:	2301      	movs	r3, #1
 800662c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800662e:	4b3a      	ldr	r3, [pc, #232]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a39      	ldr	r2, [pc, #228]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800663a:	f7fc fd17 	bl	800306c <HAL_GetTick>
 800663e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006640:	e009      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006642:	f7fc fd13 	bl	800306c <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d902      	bls.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	74fb      	strb	r3, [r7, #19]
        break;
 8006654:	e005      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006656:	4b30      	ldr	r3, [pc, #192]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0ef      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d159      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006668:	4b2a      	ldr	r3, [pc, #168]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006672:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01e      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	429a      	cmp	r2, r3
 8006682:	d019      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006684:	4b23      	ldr	r3, [pc, #140]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006690:	4b20      	ldr	r3, [pc, #128]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006696:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066a0:	4b1c      	ldr	r3, [pc, #112]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a6:	4a1b      	ldr	r2, [pc, #108]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066b0:	4a18      	ldr	r2, [pc, #96]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d016      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c2:	f7fc fcd3 	bl	800306c <HAL_GetTick>
 80066c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066c8:	e00b      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ca:	f7fc fccf 	bl	800306c <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d8:	4293      	cmp	r3, r2
 80066da:	d902      	bls.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	74fb      	strb	r3, [r7, #19]
            break;
 80066e0:	e006      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066e2:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0ec      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10b      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066f6:	4b07      	ldr	r3, [pc, #28]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006704:	4903      	ldr	r1, [pc, #12]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800670c:	e008      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800670e:	7cfb      	ldrb	r3, [r7, #19]
 8006710:	74bb      	strb	r3, [r7, #18]
 8006712:	e005      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006714:	40021000 	.word	0x40021000
 8006718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671c:	7cfb      	ldrb	r3, [r7, #19]
 800671e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006720:	7c7b      	ldrb	r3, [r7, #17]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d105      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006726:	4baf      	ldr	r3, [pc, #700]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672a:	4aae      	ldr	r2, [pc, #696]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800672c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006730:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800673e:	4ba9      	ldr	r3, [pc, #676]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006744:	f023 0203 	bic.w	r2, r3, #3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	49a5      	ldr	r1, [pc, #660]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006760:	4ba0      	ldr	r3, [pc, #640]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006766:	f023 020c 	bic.w	r2, r3, #12
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	499d      	ldr	r1, [pc, #628]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006782:	4b98      	ldr	r3, [pc, #608]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006788:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4994      	ldr	r1, [pc, #592]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067a4:	4b8f      	ldr	r3, [pc, #572]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	498c      	ldr	r1, [pc, #560]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067c6:	4b87      	ldr	r3, [pc, #540]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	4983      	ldr	r1, [pc, #524]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067e8:	4b7e      	ldr	r3, [pc, #504]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	497b      	ldr	r1, [pc, #492]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800680a:	4b76      	ldr	r3, [pc, #472]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006810:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	4972      	ldr	r1, [pc, #456]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800681a:	4313      	orrs	r3, r2
 800681c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800682c:	4b6d      	ldr	r3, [pc, #436]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800682e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006832:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	496a      	ldr	r1, [pc, #424]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800683c:	4313      	orrs	r3, r2
 800683e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800684e:	4b65      	ldr	r3, [pc, #404]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	4961      	ldr	r1, [pc, #388]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006870:	4b5c      	ldr	r3, [pc, #368]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006876:	f023 0203 	bic.w	r2, r3, #3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	4959      	ldr	r1, [pc, #356]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006880:	4313      	orrs	r3, r2
 8006882:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006892:	4b54      	ldr	r3, [pc, #336]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	4950      	ldr	r1, [pc, #320]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d015      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068b4:	4b4b      	ldr	r3, [pc, #300]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	4948      	ldr	r1, [pc, #288]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d2:	d105      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068d4:	4b43      	ldr	r3, [pc, #268]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	4a42      	ldr	r2, [pc, #264]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d015      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068ec:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fa:	493a      	ldr	r1, [pc, #232]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800690a:	d105      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800690c:	4b35      	ldr	r3, [pc, #212]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	4a34      	ldr	r2, [pc, #208]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006916:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d015      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006924:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	492c      	ldr	r1, [pc, #176]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006942:	d105      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006944:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4a26      	ldr	r2, [pc, #152]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800694a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800694e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800695c:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006962:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696a:	491e      	ldr	r1, [pc, #120]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800697a:	d105      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800697c:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006986:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006994:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	4910      	ldr	r1, [pc, #64]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b2:	d105      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b4:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d018      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069da:	4902      	ldr	r1, [pc, #8]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80069e2:	e001      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80069e4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069f0:	d105      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80069f2:	4b21      	ldr	r3, [pc, #132]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80069f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069fc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d015      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006a0a:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a10:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a18:	4917      	ldr	r1, [pc, #92]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a28:	d105      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a2a:	4b13      	ldr	r3, [pc, #76]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	4a12      	ldr	r2, [pc, #72]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a34:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d015      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a42:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a50:	4909      	ldr	r1, [pc, #36]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a60:	d105      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a62:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	4a04      	ldr	r2, [pc, #16]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a6c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006a6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40021000 	.word	0x40021000

08006a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e084      	b.n	8006b98 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7fb fcc9 	bl	8002440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ace:	d902      	bls.n	8006ad6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e002      	b.n	8006adc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ada:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ae4:	d007      	beq.n	8006af6 <HAL_SPI_Init+0x7a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aee:	d002      	beq.n	8006af6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10b      	bne.n	8006b16 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b06:	d903      	bls.n	8006b10 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b0e:	e002      	b.n	8006b16 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	ea42 0103 	orr.w	r1, r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	f003 0204 	and.w	r2, r3, #4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	ea42 0103 	orr.w	r1, r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69da      	ldr	r2, [r3, #28]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_SPI_Transmit+0x22>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e150      	b.n	8006e64 <HAL_SPI_Transmit+0x2c4>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bca:	f7fc fa4f 	bl	800306c <HAL_GetTick>
 8006bce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d002      	beq.n	8006be6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006be0:	2302      	movs	r3, #2
 8006be2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006be4:	e135      	b.n	8006e52 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_SPI_Transmit+0x52>
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bf6:	e12c      	b.n	8006e52 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	88fa      	ldrh	r2, [r7, #6]
 8006c16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c42:	d107      	bne.n	8006c54 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d007      	beq.n	8006c72 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c7a:	d94b      	bls.n	8006d14 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <HAL_SPI_Transmit+0xea>
 8006c84:	8afb      	ldrh	r3, [r7, #22]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d13e      	bne.n	8006d08 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	881a      	ldrh	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	1c9a      	adds	r2, r3, #2
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cae:	e02b      	b.n	8006d08 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d112      	bne.n	8006ce4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	881a      	ldrh	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	1c9a      	adds	r2, r3, #2
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ce2:	e011      	b.n	8006d08 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ce4:	f7fc f9c2 	bl	800306c <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d803      	bhi.n	8006cfc <HAL_SPI_Transmit+0x15c>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cfa:	d102      	bne.n	8006d02 <HAL_SPI_Transmit+0x162>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d102      	bne.n	8006d08 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d06:	e0a4      	b.n	8006e52 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1ce      	bne.n	8006cb0 <HAL_SPI_Transmit+0x110>
 8006d12:	e07c      	b.n	8006e0e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <HAL_SPI_Transmit+0x182>
 8006d1c:	8afb      	ldrh	r3, [r7, #22]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d170      	bne.n	8006e04 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d912      	bls.n	8006d52 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	881a      	ldrh	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	1c9a      	adds	r2, r3, #2
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b02      	subs	r3, #2
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d50:	e058      	b.n	8006e04 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	7812      	ldrb	r2, [r2, #0]
 8006d5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006d78:	e044      	b.n	8006e04 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d12b      	bne.n	8006de0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d912      	bls.n	8006db8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	881a      	ldrh	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	1c9a      	adds	r2, r3, #2
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b02      	subs	r3, #2
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006db6:	e025      	b.n	8006e04 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	7812      	ldrb	r2, [r2, #0]
 8006dc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dde:	e011      	b.n	8006e04 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006de0:	f7fc f944 	bl	800306c <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d803      	bhi.n	8006df8 <HAL_SPI_Transmit+0x258>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df6:	d102      	bne.n	8006dfe <HAL_SPI_Transmit+0x25e>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e02:	e026      	b.n	8006e52 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1b5      	bne.n	8006d7a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f901 	bl	800701a <SPI_EndRxTxTransaction>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2220      	movs	r2, #32
 8006e22:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	613b      	str	r3, [r7, #16]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	77fb      	strb	r3, [r7, #31]
 8006e4e:	e000      	b.n	8006e52 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006e50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3720      	adds	r7, #32
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e7c:	e04c      	b.n	8006f18 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e84:	d048      	beq.n	8006f18 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e86:	f7fc f8f1 	bl	800306c <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d902      	bls.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d13d      	bne.n	8006f18 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006eaa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eb4:	d111      	bne.n	8006eda <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ebe:	d004      	beq.n	8006eca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec8:	d107      	bne.n	8006eda <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee2:	d10f      	bne.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e00f      	b.n	8006f38 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4013      	ands	r3, r2
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	bf0c      	ite	eq
 8006f28:	2301      	moveq	r3, #1
 8006f2a:	2300      	movne	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d1a3      	bne.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f4e:	e057      	b.n	8007000 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f56:	d106      	bne.n	8006f66 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6c:	d048      	beq.n	8007000 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f6e:	f7fc f87d 	bl	800306c <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d902      	bls.n	8006f84 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d13d      	bne.n	8007000 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f9c:	d111      	bne.n	8006fc2 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa6:	d004      	beq.n	8006fb2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb0:	d107      	bne.n	8006fc2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fca:	d10f      	bne.n	8006fec <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e008      	b.n	8007012 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	4013      	ands	r3, r2
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	429a      	cmp	r2, r3
 800700e:	d19f      	bne.n	8006f50 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b086      	sub	sp, #24
 800701e:	af02      	add	r7, sp, #8
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2200      	movs	r2, #0
 800702e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff ff84 	bl	8006f40 <SPI_WaitFifoStateUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007042:	f043 0220 	orr.w	r2, r3, #32
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e027      	b.n	800709e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	2180      	movs	r1, #128	; 0x80
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f7ff ff07 	bl	8006e6c <SPI_WaitFlagStateUntilTimeout>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d007      	beq.n	8007074 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007068:	f043 0220 	orr.w	r2, r3, #32
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e014      	b.n	800709e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ff5d 	bl	8006f40 <SPI_WaitFifoStateUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d007      	beq.n	800709c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e000      	b.n	800709e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e049      	b.n	800714c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7fb fe7b 	bl	8002dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3304      	adds	r3, #4
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f000 fc51 	bl	800798c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	d001      	beq.n	800716c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e019      	b.n	80071a0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <HAL_TIM_Base_Start+0x58>)
 800717c:	4013      	ands	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b06      	cmp	r3, #6
 8007184:	d00b      	beq.n	800719e <HAL_TIM_Base_Start+0x4a>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718c:	d007      	beq.n	800719e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0201 	orr.w	r2, r2, #1
 800719c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	00010007 	.word	0x00010007

080071b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d001      	beq.n	80071c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e021      	b.n	800720c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <HAL_TIM_Base_Start_IT+0x68>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b06      	cmp	r3, #6
 80071f0:	d00b      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x5a>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f8:	d007      	beq.n	800720a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0201 	orr.w	r2, r2, #1
 8007208:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	00010007 	.word	0x00010007

0800721c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0201 	bic.w	r2, r2, #1
 8007232:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6a1a      	ldr	r2, [r3, #32]
 800723a:	f241 1311 	movw	r3, #4369	; 0x1111
 800723e:	4013      	ands	r3, r2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10f      	bne.n	8007264 <HAL_TIM_Base_Stop_IT+0x48>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6a1a      	ldr	r2, [r3, #32]
 800724a:	f244 4344 	movw	r3, #17476	; 0x4444
 800724e:	4013      	ands	r3, r2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d107      	bne.n	8007264 <HAL_TIM_Base_Stop_IT+0x48>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0201 	bic.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e097      	b.n	80073be <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb fd34 	bl	8002d10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6812      	ldr	r2, [r2, #0]
 80072ba:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80072be:	f023 0307 	bic.w	r3, r3, #7
 80072c2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f000 fb5c 	bl	800798c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fc:	f023 0303 	bic.w	r3, r3, #3
 8007300:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	4313      	orrs	r3, r2
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800731a:	f023 030c 	bic.w	r3, r3, #12
 800731e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800732a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	4313      	orrs	r3, r2
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4313      	orrs	r3, r2
 800733c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	011a      	lsls	r2, r3, #4
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	031b      	lsls	r3, r3, #12
 800734a:	4313      	orrs	r3, r2
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007358:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007360:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	4313      	orrs	r3, r2
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d122      	bne.n	8007422 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d11b      	bne.n	8007422 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f06f 0202 	mvn.w	r2, #2
 80073f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 faa1 	bl	8007950 <HAL_TIM_IC_CaptureCallback>
 800740e:	e005      	b.n	800741c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fa93 	bl	800793c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 faa4 	bl	8007964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b04      	cmp	r3, #4
 800742e:	d122      	bne.n	8007476 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b04      	cmp	r3, #4
 800743c:	d11b      	bne.n	8007476 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f06f 0204 	mvn.w	r2, #4
 8007446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fa77 	bl	8007950 <HAL_TIM_IC_CaptureCallback>
 8007462:	e005      	b.n	8007470 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa69 	bl	800793c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa7a 	bl	8007964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b08      	cmp	r3, #8
 8007482:	d122      	bne.n	80074ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b08      	cmp	r3, #8
 8007490:	d11b      	bne.n	80074ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f06f 0208 	mvn.w	r2, #8
 800749a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2204      	movs	r2, #4
 80074a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fa4d 	bl	8007950 <HAL_TIM_IC_CaptureCallback>
 80074b6:	e005      	b.n	80074c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fa3f 	bl	800793c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa50 	bl	8007964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b10      	cmp	r3, #16
 80074d6:	d122      	bne.n	800751e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0310 	and.w	r3, r3, #16
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d11b      	bne.n	800751e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f06f 0210 	mvn.w	r2, #16
 80074ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2208      	movs	r2, #8
 80074f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fa23 	bl	8007950 <HAL_TIM_IC_CaptureCallback>
 800750a:	e005      	b.n	8007518 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fa15 	bl	800793c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa26 	bl	8007964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b01      	cmp	r3, #1
 800752a:	d10e      	bne.n	800754a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b01      	cmp	r3, #1
 8007538:	d107      	bne.n	800754a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f06f 0201 	mvn.w	r2, #1
 8007542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f9ef 	bl	8007928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007554:	2b80      	cmp	r3, #128	; 0x80
 8007556:	d10e      	bne.n	8007576 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d107      	bne.n	8007576 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800756e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fd5d 	bl	8008030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007584:	d10e      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007590:	2b80      	cmp	r3, #128	; 0x80
 8007592:	d107      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fd50 	bl	8008044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	d10e      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	d107      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9d4 	bl	8007978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b20      	cmp	r3, #32
 80075dc:	d10e      	bne.n	80075fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0220 	mvn.w	r2, #32
 80075f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fd10 	bl	800801c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800760a:	d10f      	bne.n	800762c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800761a:	d107      	bne.n	800762c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fd16 	bl	8008058 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800763a:	d10f      	bne.n	800765c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800764a:	d107      	bne.n	800765c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fd08 	bl	800806c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800766a:	d10f      	bne.n	800768c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800767a:	d107      	bne.n	800768c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fcfa 	bl	8008080 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800769a:	d10f      	bne.n	80076bc <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076aa:	d107      	bne.n	80076bc <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80076b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fcec 	bl	8008094 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIM_ConfigClockSource+0x18>
 80076d8:	2302      	movs	r3, #2
 80076da:	e0d2      	b.n	8007882 <HAL_TIM_ConfigClockSource+0x1be>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80076fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007706:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	f000 80a9 	beq.w	800786e <HAL_TIM_ConfigClockSource+0x1aa>
 800771c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007720:	d81a      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x94>
 8007722:	2b30      	cmp	r3, #48	; 0x30
 8007724:	f000 809a 	beq.w	800785c <HAL_TIM_ConfigClockSource+0x198>
 8007728:	2b30      	cmp	r3, #48	; 0x30
 800772a:	d809      	bhi.n	8007740 <HAL_TIM_ConfigClockSource+0x7c>
 800772c:	2b10      	cmp	r3, #16
 800772e:	f000 8095 	beq.w	800785c <HAL_TIM_ConfigClockSource+0x198>
 8007732:	2b20      	cmp	r3, #32
 8007734:	f000 8092 	beq.w	800785c <HAL_TIM_ConfigClockSource+0x198>
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 808f 	beq.w	800785c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800773e:	e097      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007740:	2b50      	cmp	r3, #80	; 0x50
 8007742:	d05b      	beq.n	80077fc <HAL_TIM_ConfigClockSource+0x138>
 8007744:	2b50      	cmp	r3, #80	; 0x50
 8007746:	d802      	bhi.n	800774e <HAL_TIM_ConfigClockSource+0x8a>
 8007748:	2b40      	cmp	r3, #64	; 0x40
 800774a:	d077      	beq.n	800783c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800774c:	e090      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800774e:	2b60      	cmp	r3, #96	; 0x60
 8007750:	d064      	beq.n	800781c <HAL_TIM_ConfigClockSource+0x158>
 8007752:	2b70      	cmp	r3, #112	; 0x70
 8007754:	d028      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8007756:	e08b      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007758:	4a4c      	ldr	r2, [pc, #304]	; (800788c <HAL_TIM_ConfigClockSource+0x1c8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d07e      	beq.n	800785c <HAL_TIM_ConfigClockSource+0x198>
 800775e:	4a4b      	ldr	r2, [pc, #300]	; (800788c <HAL_TIM_ConfigClockSource+0x1c8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d810      	bhi.n	8007786 <HAL_TIM_ConfigClockSource+0xc2>
 8007764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007768:	d078      	beq.n	800785c <HAL_TIM_ConfigClockSource+0x198>
 800776a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776e:	d803      	bhi.n	8007778 <HAL_TIM_ConfigClockSource+0xb4>
 8007770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007774:	d02f      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8007776:	e07b      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007778:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800777c:	d06e      	beq.n	800785c <HAL_TIM_ConfigClockSource+0x198>
 800777e:	4a44      	ldr	r2, [pc, #272]	; (8007890 <HAL_TIM_ConfigClockSource+0x1cc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d06b      	beq.n	800785c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007784:	e074      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007786:	4a43      	ldr	r2, [pc, #268]	; (8007894 <HAL_TIM_ConfigClockSource+0x1d0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d067      	beq.n	800785c <HAL_TIM_ConfigClockSource+0x198>
 800778c:	4a41      	ldr	r2, [pc, #260]	; (8007894 <HAL_TIM_ConfigClockSource+0x1d0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d803      	bhi.n	800779a <HAL_TIM_ConfigClockSource+0xd6>
 8007792:	4a41      	ldr	r2, [pc, #260]	; (8007898 <HAL_TIM_ConfigClockSource+0x1d4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d061      	beq.n	800785c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007798:	e06a      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800779a:	4a40      	ldr	r2, [pc, #256]	; (800789c <HAL_TIM_ConfigClockSource+0x1d8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d05d      	beq.n	800785c <HAL_TIM_ConfigClockSource+0x198>
 80077a0:	4a3f      	ldr	r2, [pc, #252]	; (80078a0 <HAL_TIM_ConfigClockSource+0x1dc>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d05a      	beq.n	800785c <HAL_TIM_ConfigClockSource+0x198>
      break;
 80077a6:	e063      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	6899      	ldr	r1, [r3, #8]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f000 fac8 	bl	8007d4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	609a      	str	r2, [r3, #8]
      break;
 80077d4:	e04c      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	6899      	ldr	r1, [r3, #8]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f000 fab1 	bl	8007d4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077f8:	609a      	str	r2, [r3, #8]
      break;
 80077fa:	e039      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	6859      	ldr	r1, [r3, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	461a      	mov	r2, r3
 800780a:	f000 fa23 	bl	8007c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2150      	movs	r1, #80	; 0x50
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fa7c 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 800781a:	e029      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	6859      	ldr	r1, [r3, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	461a      	mov	r2, r3
 800782a:	f000 fa42 	bl	8007cb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2160      	movs	r1, #96	; 0x60
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fa6c 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 800783a:	e019      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	6859      	ldr	r1, [r3, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	461a      	mov	r2, r3
 800784a:	f000 fa03 	bl	8007c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2140      	movs	r1, #64	; 0x40
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fa5c 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 800785a:	e009      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	f000 fa53 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 800786c:	e000      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800786e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	00100030 	.word	0x00100030
 8007890:	00100020 	.word	0x00100020
 8007894:	00100050 	.word	0x00100050
 8007898:	00100040 	.word	0x00100040
 800789c:	00100060 	.word	0x00100060
 80078a0:	00100070 	.word	0x00100070

080078a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e031      	b.n	8007920 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f904 	bl	8007adc <TIM_SlaveTimer_SetConfig>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e018      	b.n	8007920 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800790c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a46      	ldr	r2, [pc, #280]	; (8007ab8 <TIM_Base_SetConfig+0x12c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d017      	beq.n	80079d4 <TIM_Base_SetConfig+0x48>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079aa:	d013      	beq.n	80079d4 <TIM_Base_SetConfig+0x48>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a43      	ldr	r2, [pc, #268]	; (8007abc <TIM_Base_SetConfig+0x130>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00f      	beq.n	80079d4 <TIM_Base_SetConfig+0x48>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a42      	ldr	r2, [pc, #264]	; (8007ac0 <TIM_Base_SetConfig+0x134>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00b      	beq.n	80079d4 <TIM_Base_SetConfig+0x48>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a41      	ldr	r2, [pc, #260]	; (8007ac4 <TIM_Base_SetConfig+0x138>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_Base_SetConfig+0x48>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a40      	ldr	r2, [pc, #256]	; (8007ac8 <TIM_Base_SetConfig+0x13c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_Base_SetConfig+0x48>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a3f      	ldr	r2, [pc, #252]	; (8007acc <TIM_Base_SetConfig+0x140>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d108      	bne.n	80079e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a33      	ldr	r2, [pc, #204]	; (8007ab8 <TIM_Base_SetConfig+0x12c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d023      	beq.n	8007a36 <TIM_Base_SetConfig+0xaa>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f4:	d01f      	beq.n	8007a36 <TIM_Base_SetConfig+0xaa>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a30      	ldr	r2, [pc, #192]	; (8007abc <TIM_Base_SetConfig+0x130>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d01b      	beq.n	8007a36 <TIM_Base_SetConfig+0xaa>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2f      	ldr	r2, [pc, #188]	; (8007ac0 <TIM_Base_SetConfig+0x134>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d017      	beq.n	8007a36 <TIM_Base_SetConfig+0xaa>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2e      	ldr	r2, [pc, #184]	; (8007ac4 <TIM_Base_SetConfig+0x138>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <TIM_Base_SetConfig+0xaa>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2d      	ldr	r2, [pc, #180]	; (8007ac8 <TIM_Base_SetConfig+0x13c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00f      	beq.n	8007a36 <TIM_Base_SetConfig+0xaa>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a2d      	ldr	r2, [pc, #180]	; (8007ad0 <TIM_Base_SetConfig+0x144>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00b      	beq.n	8007a36 <TIM_Base_SetConfig+0xaa>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2c      	ldr	r2, [pc, #176]	; (8007ad4 <TIM_Base_SetConfig+0x148>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d007      	beq.n	8007a36 <TIM_Base_SetConfig+0xaa>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a2b      	ldr	r2, [pc, #172]	; (8007ad8 <TIM_Base_SetConfig+0x14c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d003      	beq.n	8007a36 <TIM_Base_SetConfig+0xaa>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a26      	ldr	r2, [pc, #152]	; (8007acc <TIM_Base_SetConfig+0x140>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d108      	bne.n	8007a48 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a12      	ldr	r2, [pc, #72]	; (8007ab8 <TIM_Base_SetConfig+0x12c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <TIM_Base_SetConfig+0x110>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a14      	ldr	r2, [pc, #80]	; (8007ac8 <TIM_Base_SetConfig+0x13c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00f      	beq.n	8007a9c <TIM_Base_SetConfig+0x110>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a14      	ldr	r2, [pc, #80]	; (8007ad0 <TIM_Base_SetConfig+0x144>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_Base_SetConfig+0x110>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a13      	ldr	r2, [pc, #76]	; (8007ad4 <TIM_Base_SetConfig+0x148>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_Base_SetConfig+0x110>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a12      	ldr	r2, [pc, #72]	; (8007ad8 <TIM_Base_SetConfig+0x14c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_Base_SetConfig+0x110>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <TIM_Base_SetConfig+0x140>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d103      	bne.n	8007aa4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	691a      	ldr	r2, [r3, #16]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	615a      	str	r2, [r3, #20]
}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40000c00 	.word	0x40000c00
 8007ac8:	40013400 	.word	0x40013400
 8007acc:	40015000 	.word	0x40015000
 8007ad0:	40014000 	.word	0x40014000
 8007ad4:	40014400 	.word	0x40014400
 8007ad8:	40014800 	.word	0x40014800

08007adc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0a:	f023 0307 	bic.w	r3, r3, #7
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2b70      	cmp	r3, #112	; 0x70
 8007b28:	d034      	beq.n	8007b94 <TIM_SlaveTimer_SetConfig+0xb8>
 8007b2a:	2b70      	cmp	r3, #112	; 0x70
 8007b2c:	d811      	bhi.n	8007b52 <TIM_SlaveTimer_SetConfig+0x76>
 8007b2e:	2b30      	cmp	r3, #48	; 0x30
 8007b30:	d07d      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
 8007b32:	2b30      	cmp	r3, #48	; 0x30
 8007b34:	d806      	bhi.n	8007b44 <TIM_SlaveTimer_SetConfig+0x68>
 8007b36:	2b10      	cmp	r3, #16
 8007b38:	d079      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d077      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d075      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8007b42:	e075      	b.n	8007c30 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007b44:	2b50      	cmp	r3, #80	; 0x50
 8007b46:	d05e      	beq.n	8007c06 <TIM_SlaveTimer_SetConfig+0x12a>
 8007b48:	2b60      	cmp	r3, #96	; 0x60
 8007b4a:	d066      	beq.n	8007c1a <TIM_SlaveTimer_SetConfig+0x13e>
 8007b4c:	2b40      	cmp	r3, #64	; 0x40
 8007b4e:	d02c      	beq.n	8007baa <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8007b50:	e06e      	b.n	8007c30 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007b52:	4a3a      	ldr	r2, [pc, #232]	; (8007c3c <TIM_SlaveTimer_SetConfig+0x160>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d06a      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
 8007b58:	4a38      	ldr	r2, [pc, #224]	; (8007c3c <TIM_SlaveTimer_SetConfig+0x160>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d809      	bhi.n	8007b72 <TIM_SlaveTimer_SetConfig+0x96>
 8007b5e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b62:	d064      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
 8007b64:	4a36      	ldr	r2, [pc, #216]	; (8007c40 <TIM_SlaveTimer_SetConfig+0x164>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d061      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
 8007b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b6e:	d05e      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007b70:	e05e      	b.n	8007c30 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007b72:	4a34      	ldr	r2, [pc, #208]	; (8007c44 <TIM_SlaveTimer_SetConfig+0x168>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d05a      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
 8007b78:	4a32      	ldr	r2, [pc, #200]	; (8007c44 <TIM_SlaveTimer_SetConfig+0x168>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d803      	bhi.n	8007b86 <TIM_SlaveTimer_SetConfig+0xaa>
 8007b7e:	4a32      	ldr	r2, [pc, #200]	; (8007c48 <TIM_SlaveTimer_SetConfig+0x16c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d054      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007b84:	e054      	b.n	8007c30 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007b86:	4a31      	ldr	r2, [pc, #196]	; (8007c4c <TIM_SlaveTimer_SetConfig+0x170>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d050      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
 8007b8c:	4a30      	ldr	r2, [pc, #192]	; (8007c50 <TIM_SlaveTimer_SetConfig+0x174>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d04d      	beq.n	8007c2e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007b92:	e04d      	b.n	8007c30 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	68d9      	ldr	r1, [r3, #12]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	f000 f8d2 	bl	8007d4c <TIM_ETR_SetConfig>
      break;
 8007ba8:	e042      	b.n	8007c30 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b05      	cmp	r3, #5
 8007bb0:	d004      	beq.n	8007bbc <TIM_SlaveTimer_SetConfig+0xe0>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007bba:	d101      	bne.n	8007bc0 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e038      	b.n	8007c32 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6a1a      	ldr	r2, [r3, #32]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007be6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	621a      	str	r2, [r3, #32]
      break;
 8007c04:	e014      	b.n	8007c30 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	6899      	ldr	r1, [r3, #8]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	461a      	mov	r2, r3
 8007c14:	f000 f81e 	bl	8007c54 <TIM_TI1_ConfigInputStage>
      break;
 8007c18:	e00a      	b.n	8007c30 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	6899      	ldr	r1, [r3, #8]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f000 f843 	bl	8007cb2 <TIM_TI2_ConfigInputStage>
      break;
 8007c2c:	e000      	b.n	8007c30 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8007c2e:	bf00      	nop
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	00100030 	.word	0x00100030
 8007c40:	00100020 	.word	0x00100020
 8007c44:	00100050 	.word	0x00100050
 8007c48:	00100040 	.word	0x00100040
 8007c4c:	00100060 	.word	0x00100060
 8007c50:	00100070 	.word	0x00100070

08007c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	f023 0201 	bic.w	r2, r3, #1
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f023 030a 	bic.w	r3, r3, #10
 8007c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	621a      	str	r2, [r3, #32]
}
 8007ca6:	bf00      	nop
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b087      	sub	sp, #28
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	f023 0210 	bic.w	r2, r3, #16
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	031b      	lsls	r3, r3, #12
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	621a      	str	r2, [r3, #32]
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	f043 0307 	orr.w	r3, r3, #7
 8007d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	609a      	str	r2, [r3, #8]
}
 8007d40:	bf00      	nop
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	021a      	lsls	r2, r3, #8
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	609a      	str	r2, [r3, #8]
}
 8007d80:	bf00      	nop
 8007d82:	371c      	adds	r7, #28
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e074      	b.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a34      	ldr	r2, [pc, #208]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d009      	beq.n	8007de2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a33      	ldr	r2, [pc, #204]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d004      	beq.n	8007de2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a31      	ldr	r2, [pc, #196]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d108      	bne.n	8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007de8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a21      	ldr	r2, [pc, #132]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d022      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e24:	d01d      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1f      	ldr	r2, [pc, #124]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d018      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1d      	ldr	r2, [pc, #116]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d013      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a1c      	ldr	r2, [pc, #112]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00e      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d009      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d004      	beq.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a11      	ldr	r2, [pc, #68]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d10c      	bne.n	8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40012c00 	.word	0x40012c00
 8007ea0:	40013400 	.word	0x40013400
 8007ea4:	40015000 	.word	0x40015000
 8007ea8:	40000400 	.word	0x40000400
 8007eac:	40000800 	.word	0x40000800
 8007eb0:	40000c00 	.word	0x40000c00
 8007eb4:	40014000 	.word	0x40014000

08007eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	e096      	b.n	8008002 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	041b      	lsls	r3, r3, #16
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a2f      	ldr	r2, [pc, #188]	; (8008010 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d009      	beq.n	8007f6c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a2d      	ldr	r2, [pc, #180]	; (8008014 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a2c      	ldr	r2, [pc, #176]	; (8008018 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d106      	bne.n	8007f7a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a24      	ldr	r2, [pc, #144]	; (8008010 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d009      	beq.n	8007f98 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a22      	ldr	r2, [pc, #136]	; (8008014 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a21      	ldr	r2, [pc, #132]	; (8008018 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d12b      	bne.n	8007ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	051b      	lsls	r3, r3, #20
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a11      	ldr	r2, [pc, #68]	; (8008010 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d009      	beq.n	8007fe2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a10      	ldr	r2, [pc, #64]	; (8008014 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d004      	beq.n	8007fe2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a0e      	ldr	r2, [pc, #56]	; (8008018 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d106      	bne.n	8007ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40013400 	.word	0x40013400
 8008018:	40015000 	.word	0x40015000

0800801c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <LL_EXTI_EnableIT_0_31>:
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80080b0:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	4904      	ldr	r1, [pc, #16]	; (80080c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	600b      	str	r3, [r1, #0]
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	40010400 	.word	0x40010400

080080cc <LL_EXTI_EnableIT_32_63>:
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <LL_EXTI_EnableIT_32_63+0x20>)
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	4904      	ldr	r1, [pc, #16]	; (80080ec <LL_EXTI_EnableIT_32_63+0x20>)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4313      	orrs	r3, r2
 80080de:	620b      	str	r3, [r1, #32]
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	40010400 	.word	0x40010400

080080f0 <LL_EXTI_DisableIT_0_31>:
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80080f8:	4b06      	ldr	r3, [pc, #24]	; (8008114 <LL_EXTI_DisableIT_0_31+0x24>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	43db      	mvns	r3, r3
 8008100:	4904      	ldr	r1, [pc, #16]	; (8008114 <LL_EXTI_DisableIT_0_31+0x24>)
 8008102:	4013      	ands	r3, r2
 8008104:	600b      	str	r3, [r1, #0]
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	40010400 	.word	0x40010400

08008118 <LL_EXTI_DisableIT_32_63>:
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008120:	4b06      	ldr	r3, [pc, #24]	; (800813c <LL_EXTI_DisableIT_32_63+0x24>)
 8008122:	6a1a      	ldr	r2, [r3, #32]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	43db      	mvns	r3, r3
 8008128:	4904      	ldr	r1, [pc, #16]	; (800813c <LL_EXTI_DisableIT_32_63+0x24>)
 800812a:	4013      	ands	r3, r2
 800812c:	620b      	str	r3, [r1, #32]
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40010400 	.word	0x40010400

08008140 <LL_EXTI_EnableEvent_0_31>:
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <LL_EXTI_EnableEvent_0_31+0x20>)
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	4904      	ldr	r1, [pc, #16]	; (8008160 <LL_EXTI_EnableEvent_0_31+0x20>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4313      	orrs	r3, r2
 8008152:	604b      	str	r3, [r1, #4]
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	40010400 	.word	0x40010400

08008164 <LL_EXTI_EnableEvent_32_63>:
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800816c:	4b05      	ldr	r3, [pc, #20]	; (8008184 <LL_EXTI_EnableEvent_32_63+0x20>)
 800816e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008170:	4904      	ldr	r1, [pc, #16]	; (8008184 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4313      	orrs	r3, r2
 8008176:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	40010400 	.word	0x40010400

08008188 <LL_EXTI_DisableEvent_0_31>:
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008190:	4b06      	ldr	r3, [pc, #24]	; (80081ac <LL_EXTI_DisableEvent_0_31+0x24>)
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	43db      	mvns	r3, r3
 8008198:	4904      	ldr	r1, [pc, #16]	; (80081ac <LL_EXTI_DisableEvent_0_31+0x24>)
 800819a:	4013      	ands	r3, r2
 800819c:	604b      	str	r3, [r1, #4]
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40010400 	.word	0x40010400

080081b0 <LL_EXTI_DisableEvent_32_63>:
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80081b8:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80081ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	43db      	mvns	r3, r3
 80081c0:	4904      	ldr	r1, [pc, #16]	; (80081d4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80081c2:	4013      	ands	r3, r2
 80081c4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40010400 	.word	0x40010400

080081d8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	4904      	ldr	r1, [pc, #16]	; (80081f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	608b      	str	r3, [r1, #8]
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	40010400 	.word	0x40010400

080081fc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008208:	4904      	ldr	r1, [pc, #16]	; (800821c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4313      	orrs	r3, r2
 800820e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	40010400 	.word	0x40010400

08008220 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8008228:	4b06      	ldr	r3, [pc, #24]	; (8008244 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	43db      	mvns	r3, r3
 8008230:	4904      	ldr	r1, [pc, #16]	; (8008244 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008232:	4013      	ands	r3, r2
 8008234:	608b      	str	r3, [r1, #8]
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	40010400 	.word	0x40010400

08008248 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	43db      	mvns	r3, r3
 8008258:	4904      	ldr	r1, [pc, #16]	; (800826c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800825a:	4013      	ands	r3, r2
 800825c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40010400 	.word	0x40010400

08008270 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008278:	4b05      	ldr	r3, [pc, #20]	; (8008290 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	4904      	ldr	r1, [pc, #16]	; (8008290 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4313      	orrs	r3, r2
 8008282:	60cb      	str	r3, [r1, #12]
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	40010400 	.word	0x40010400

08008294 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800829c:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800829e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a0:	4904      	ldr	r1, [pc, #16]	; (80082b4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	40010400 	.word	0x40010400

080082b8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80082c0:	4b06      	ldr	r3, [pc, #24]	; (80082dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	43db      	mvns	r3, r3
 80082c8:	4904      	ldr	r1, [pc, #16]	; (80082dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80082ca:	4013      	ands	r3, r2
 80082cc:	60cb      	str	r3, [r1, #12]
}
 80082ce:	bf00      	nop
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40010400 	.word	0x40010400

080082e0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80082e8:	4b06      	ldr	r3, [pc, #24]	; (8008304 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	43db      	mvns	r3, r3
 80082f0:	4904      	ldr	r1, [pc, #16]	; (8008304 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80082f2:	4013      	ands	r3, r2
 80082f4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40010400 	.word	0x40010400

08008308 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7a1b      	ldrb	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 80c8 	beq.w	80084ae <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d05d      	beq.n	80083e2 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	7a5b      	ldrb	r3, [r3, #9]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d00e      	beq.n	800834c <LL_EXTI_Init+0x44>
 800832e:	2b02      	cmp	r3, #2
 8008330:	d017      	beq.n	8008362 <LL_EXTI_Init+0x5a>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d120      	bne.n	8008378 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff ff24 	bl	8008188 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff feaf 	bl	80080a8 <LL_EXTI_EnableIT_0_31>
          break;
 800834a:	e018      	b.n	800837e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fecd 	bl	80080f0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff fef0 	bl	8008140 <LL_EXTI_EnableEvent_0_31>
          break;
 8008360:	e00d      	b.n	800837e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff fe9e 	bl	80080a8 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff fee5 	bl	8008140 <LL_EXTI_EnableEvent_0_31>
          break;
 8008376:	e002      	b.n	800837e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8008378:	2301      	movs	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]
          break;
 800837c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	7a9b      	ldrb	r3, [r3, #10]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d02d      	beq.n	80083e2 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	7a9b      	ldrb	r3, [r3, #10]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d00e      	beq.n	80083ac <LL_EXTI_Init+0xa4>
 800838e:	2b03      	cmp	r3, #3
 8008390:	d017      	beq.n	80083c2 <LL_EXTI_Init+0xba>
 8008392:	2b01      	cmp	r3, #1
 8008394:	d120      	bne.n	80083d8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f7ff ff8c 	bl	80082b8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff ff17 	bl	80081d8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80083aa:	e01b      	b.n	80083e4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff ff35 	bl	8008220 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff ff58 	bl	8008270 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80083c0:	e010      	b.n	80083e4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff ff06 	bl	80081d8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff ff4d 	bl	8008270 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80083d6:	e005      	b.n	80083e4 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f043 0302 	orr.w	r3, r3, #2
 80083de:	60fb      	str	r3, [r7, #12]
            break;
 80083e0:	e000      	b.n	80083e4 <LL_EXTI_Init+0xdc>
        }
      }
 80083e2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d075      	beq.n	80084d8 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	7a5b      	ldrb	r3, [r3, #9]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d00e      	beq.n	8008412 <LL_EXTI_Init+0x10a>
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d017      	beq.n	8008428 <LL_EXTI_Init+0x120>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d120      	bne.n	800843e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fed5 	bl	80081b0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff fe5e 	bl	80080cc <LL_EXTI_EnableIT_32_63>
          break;
 8008410:	e01a      	b.n	8008448 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff fe7e 	bl	8008118 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff fe9f 	bl	8008164 <LL_EXTI_EnableEvent_32_63>
          break;
 8008426:	e00f      	b.n	8008448 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff fe4d 	bl	80080cc <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff fe94 	bl	8008164 <LL_EXTI_EnableEvent_32_63>
          break;
 800843c:	e004      	b.n	8008448 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f043 0304 	orr.w	r3, r3, #4
 8008444:	60fb      	str	r3, [r7, #12]
          break;
 8008446:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7a9b      	ldrb	r3, [r3, #10]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d043      	beq.n	80084d8 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	7a9b      	ldrb	r3, [r3, #10]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d00e      	beq.n	8008476 <LL_EXTI_Init+0x16e>
 8008458:	2b03      	cmp	r3, #3
 800845a:	d017      	beq.n	800848c <LL_EXTI_Init+0x184>
 800845c:	2b01      	cmp	r3, #1
 800845e:	d120      	bne.n	80084a2 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff ff3b 	bl	80082e0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff fec4 	bl	80081fc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8008474:	e031      	b.n	80084da <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff fee4 	bl	8008248 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff ff05 	bl	8008294 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800848a:	e026      	b.n	80084da <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff feb3 	bl	80081fc <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fefa 	bl	8008294 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80084a0:	e01b      	b.n	80084da <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f043 0305 	orr.w	r3, r3, #5
 80084a8:	60fb      	str	r3, [r7, #12]
            break;
 80084aa:	bf00      	nop
 80084ac:	e015      	b.n	80084da <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff fe1c 	bl	80080f0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff fe63 	bl	8008188 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff fe26 	bl	8008118 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff fe6d 	bl	80081b0 <LL_EXTI_DisableEvent_32_63>
 80084d6:	e000      	b.n	80084da <LL_EXTI_Init+0x1d2>
      }
 80084d8:	bf00      	nop
  }

  return status;
 80084da:	68fb      	ldr	r3, [r7, #12]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <LL_GPIO_SetPinMode>:
{
 80084e4:	b480      	push	{r7}
 80084e6:	b089      	sub	sp, #36	; 0x24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	fa93 f3a3 	rbit	r3, r3
 80084fe:	613b      	str	r3, [r7, #16]
  return result;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	fab3 f383 	clz	r3, r3
 8008506:	b2db      	uxtb	r3, r3
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	2103      	movs	r1, #3
 800850c:	fa01 f303 	lsl.w	r3, r1, r3
 8008510:	43db      	mvns	r3, r3
 8008512:	401a      	ands	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	fa93 f3a3 	rbit	r3, r3
 800851e:	61bb      	str	r3, [r7, #24]
  return result;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	fab3 f383 	clz	r3, r3
 8008526:	b2db      	uxtb	r3, r3
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	fa01 f303 	lsl.w	r3, r1, r3
 8008530:	431a      	orrs	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]
}
 8008536:	bf00      	nop
 8008538:	3724      	adds	r7, #36	; 0x24
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <LL_GPIO_SetPinOutputType>:
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	43db      	mvns	r3, r3
 8008556:	401a      	ands	r2, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	fb01 f303 	mul.w	r3, r1, r3
 8008560:	431a      	orrs	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	605a      	str	r2, [r3, #4]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <LL_GPIO_SetPinSpeed>:
{
 8008572:	b480      	push	{r7}
 8008574:	b089      	sub	sp, #36	; 0x24
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	fa93 f3a3 	rbit	r3, r3
 800858c:	613b      	str	r3, [r7, #16]
  return result;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	fab3 f383 	clz	r3, r3
 8008594:	b2db      	uxtb	r3, r3
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	2103      	movs	r1, #3
 800859a:	fa01 f303 	lsl.w	r3, r1, r3
 800859e:	43db      	mvns	r3, r3
 80085a0:	401a      	ands	r2, r3
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	fa93 f3a3 	rbit	r3, r3
 80085ac:	61bb      	str	r3, [r7, #24]
  return result;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	fab3 f383 	clz	r3, r3
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	fa01 f303 	lsl.w	r3, r1, r3
 80085be:	431a      	orrs	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	609a      	str	r2, [r3, #8]
}
 80085c4:	bf00      	nop
 80085c6:	3724      	adds	r7, #36	; 0x24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <LL_GPIO_SetPinPull>:
{
 80085d0:	b480      	push	{r7}
 80085d2:	b089      	sub	sp, #36	; 0x24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	fa93 f3a3 	rbit	r3, r3
 80085ea:	613b      	str	r3, [r7, #16]
  return result;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	fab3 f383 	clz	r3, r3
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	2103      	movs	r1, #3
 80085f8:	fa01 f303 	lsl.w	r3, r1, r3
 80085fc:	43db      	mvns	r3, r3
 80085fe:	401a      	ands	r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	fa93 f3a3 	rbit	r3, r3
 800860a:	61bb      	str	r3, [r7, #24]
  return result;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	fab3 f383 	clz	r3, r3
 8008612:	b2db      	uxtb	r3, r3
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	6879      	ldr	r1, [r7, #4]
 8008618:	fa01 f303 	lsl.w	r3, r1, r3
 800861c:	431a      	orrs	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	60da      	str	r2, [r3, #12]
}
 8008622:	bf00      	nop
 8008624:	3724      	adds	r7, #36	; 0x24
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <LL_GPIO_SetAFPin_0_7>:
{
 800862e:	b480      	push	{r7}
 8008630:	b089      	sub	sp, #36	; 0x24
 8008632:	af00      	add	r7, sp, #0
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1a      	ldr	r2, [r3, #32]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	fa93 f3a3 	rbit	r3, r3
 8008648:	613b      	str	r3, [r7, #16]
  return result;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	fab3 f383 	clz	r3, r3
 8008650:	b2db      	uxtb	r3, r3
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	210f      	movs	r1, #15
 8008656:	fa01 f303 	lsl.w	r3, r1, r3
 800865a:	43db      	mvns	r3, r3
 800865c:	401a      	ands	r2, r3
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	fa93 f3a3 	rbit	r3, r3
 8008668:	61bb      	str	r3, [r7, #24]
  return result;
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	fab3 f383 	clz	r3, r3
 8008670:	b2db      	uxtb	r3, r3
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	fa01 f303 	lsl.w	r3, r1, r3
 800867a:	431a      	orrs	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	621a      	str	r2, [r3, #32]
}
 8008680:	bf00      	nop
 8008682:	3724      	adds	r7, #36	; 0x24
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <LL_GPIO_SetAFPin_8_15>:
{
 800868c:	b480      	push	{r7}
 800868e:	b089      	sub	sp, #36	; 0x24
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	0a1b      	lsrs	r3, r3, #8
 80086a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	fa93 f3a3 	rbit	r3, r3
 80086a8:	613b      	str	r3, [r7, #16]
  return result;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	fab3 f383 	clz	r3, r3
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	210f      	movs	r1, #15
 80086b6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ba:	43db      	mvns	r3, r3
 80086bc:	401a      	ands	r2, r3
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	0a1b      	lsrs	r3, r3, #8
 80086c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	fa93 f3a3 	rbit	r3, r3
 80086ca:	61bb      	str	r3, [r7, #24]
  return result;
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	fab3 f383 	clz	r3, r3
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	431a      	orrs	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80086e2:	bf00      	nop
 80086e4:	3724      	adds	r7, #36	; 0x24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	fa93 f3a3 	rbit	r3, r3
 8008704:	60bb      	str	r3, [r7, #8]
  return result;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	fab3 f383 	clz	r3, r3
 800870c:	b2db      	uxtb	r3, r3
 800870e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008710:	e040      	b.n	8008794 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	2101      	movs	r1, #1
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	fa01 f303 	lsl.w	r3, r1, r3
 800871e:	4013      	ands	r3, r2
 8008720:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d032      	beq.n	800878e <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	461a      	mov	r2, r3
 800872e:	6939      	ldr	r1, [r7, #16]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fed7 	bl	80084e4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d003      	beq.n	8008746 <LL_GPIO_Init+0x58>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2b02      	cmp	r3, #2
 8008744:	d106      	bne.n	8008754 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	461a      	mov	r2, r3
 800874c:	6939      	ldr	r1, [r7, #16]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff ff0f 	bl	8008572 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	461a      	mov	r2, r3
 800875a:	6939      	ldr	r1, [r7, #16]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff ff37 	bl	80085d0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2b02      	cmp	r3, #2
 8008768:	d111      	bne.n	800878e <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2bff      	cmp	r3, #255	; 0xff
 800876e:	d807      	bhi.n	8008780 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	461a      	mov	r2, r3
 8008776:	6939      	ldr	r1, [r7, #16]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff ff58 	bl	800862e <LL_GPIO_SetAFPin_0_7>
 800877e:	e006      	b.n	800878e <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	461a      	mov	r2, r3
 8008786:	6939      	ldr	r1, [r7, #16]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff ff7f 	bl	800868c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	3301      	adds	r3, #1
 8008792:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	fa22 f303 	lsr.w	r3, r2, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1b7      	bne.n	8008712 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d003      	beq.n	80087b2 <LL_GPIO_Init+0xc4>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d107      	bne.n	80087c2 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	6819      	ldr	r1, [r3, #0]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	461a      	mov	r2, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff fec0 	bl	8008542 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 80087cc:	b590      	push	{r4, r7, lr}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af02      	add	r7, sp, #8
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	4611      	mov	r1, r2
 80087d8:	461a      	mov	r2, r3
 80087da:	4623      	mov	r3, r4
 80087dc:	80fb      	strh	r3, [r7, #6]
 80087de:	4603      	mov	r3, r0
 80087e0:	80bb      	strh	r3, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	807b      	strh	r3, [r7, #2]
 80087e6:	4613      	mov	r3, r2
 80087e8:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 80087ee:	7bfa      	ldrb	r2, [r7, #15]
 80087f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d93a      	bls.n	800886e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80087f8:	88ba      	ldrh	r2, [r7, #4]
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	441a      	add	r2, r3
 80087fe:	88b9      	ldrh	r1, [r7, #4]
 8008800:	883b      	ldrh	r3, [r7, #0]
 8008802:	4419      	add	r1, r3
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	1acb      	subs	r3, r1, r3
 8008808:	429a      	cmp	r2, r3
 800880a:	f000 8090 	beq.w	800892e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800880e:	88fa      	ldrh	r2, [r7, #6]
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	441a      	add	r2, r3
 8008814:	88f9      	ldrh	r1, [r7, #6]
 8008816:	887b      	ldrh	r3, [r7, #2]
 8008818:	4419      	add	r1, r3
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	1acb      	subs	r3, r1, r3
 800881e:	429a      	cmp	r2, r3
 8008820:	f000 8085 	beq.w	800892e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	b29a      	uxth	r2, r3
 8008828:	88fb      	ldrh	r3, [r7, #6]
 800882a:	4413      	add	r3, r2
 800882c:	b298      	uxth	r0, r3
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	b29a      	uxth	r2, r3
 8008832:	88bb      	ldrh	r3, [r7, #4]
 8008834:	4413      	add	r3, r2
 8008836:	b299      	uxth	r1, r3
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	b29b      	uxth	r3, r3
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	b29b      	uxth	r3, r3
 8008840:	887a      	ldrh	r2, [r7, #2]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	b29b      	uxth	r3, r3
 8008846:	3301      	adds	r3, #1
 8008848:	b29c      	uxth	r4, r3
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	b29b      	uxth	r3, r3
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	b29b      	uxth	r3, r3
 8008852:	883a      	ldrh	r2, [r7, #0]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	b29b      	uxth	r3, r3
 8008858:	3301      	adds	r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	2304      	movs	r3, #4
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	8c3b      	ldrh	r3, [r7, #32]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4613      	mov	r3, r2
 8008866:	4622      	mov	r2, r4
 8008868:	f000 fd32 	bl	80092d0 <ILI9341_Draw_Rectangle>
				goto finish;
 800886c:	e060      	b.n	8008930 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	b29a      	uxth	r2, r3
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	4413      	add	r3, r2
 8008876:	b298      	uxth	r0, r3
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	b29a      	uxth	r2, r3
 800887c:	88bb      	ldrh	r3, [r7, #4]
 800887e:	4413      	add	r3, r2
 8008880:	b299      	uxth	r1, r3
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	b29b      	uxth	r3, r3
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	b29b      	uxth	r3, r3
 800888a:	887a      	ldrh	r2, [r7, #2]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	b29a      	uxth	r2, r3
 8008890:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008894:	b29b      	uxth	r3, r3
 8008896:	f000 fda1 	bl	80093dc <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	b29a      	uxth	r2, r3
 800889e:	88fb      	ldrh	r3, [r7, #6]
 80088a0:	4413      	add	r3, r2
 80088a2:	b298      	uxth	r0, r3
										(y + h) - b,
 80088a4:	88ba      	ldrh	r2, [r7, #4]
 80088a6:	883b      	ldrh	r3, [r7, #0]
 80088a8:	4413      	add	r3, r2
 80088aa:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	b299      	uxth	r1, r3
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	887a      	ldrh	r2, [r7, #2]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	b29a      	uxth	r2, r3
 80088be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	f000 fd8a 	bl	80093dc <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	88fb      	ldrh	r3, [r7, #6]
 80088ce:	4413      	add	r3, r2
 80088d0:	b298      	uxth	r0, r3
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	88bb      	ldrh	r3, [r7, #4]
 80088d8:	4413      	add	r3, r2
 80088da:	b299      	uxth	r1, r3
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	883a      	ldrh	r2, [r7, #0]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f000 fdbc 	bl	800946c <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 80088f4:	88fa      	ldrh	r2, [r7, #6]
 80088f6:	887b      	ldrh	r3, [r7, #2]
 80088f8:	4413      	add	r3, r2
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	b298      	uxth	r0, r3
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	b29a      	uxth	r2, r3
 8008908:	88bb      	ldrh	r3, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	b299      	uxth	r1, r3
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	b29b      	uxth	r3, r3
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	b29b      	uxth	r3, r3
 8008916:	883a      	ldrh	r2, [r7, #0]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	b29a      	uxth	r2, r3
 800891c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008920:	b29b      	uxth	r3, r3
 8008922:	f000 fda3 	bl	800946c <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	3301      	adds	r3, #1
 800892a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800892c:	e75f      	b.n	80087ee <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800892e:	bf00      	nop
	// done
	return;
 8008930:	bf00      	nop
}
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	bd90      	pop	{r4, r7, pc}

08008938 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008938:	b590      	push	{r4, r7, lr}
 800893a:	b089      	sub	sp, #36	; 0x24
 800893c:	af02      	add	r7, sp, #8
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	4611      	mov	r1, r2
 8008944:	461a      	mov	r2, r3
 8008946:	4623      	mov	r3, r4
 8008948:	71fb      	strb	r3, [r7, #7]
 800894a:	4603      	mov	r3, r0
 800894c:	80bb      	strh	r3, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	807b      	strh	r3, [r7, #2]
 8008952:	4613      	mov	r3, r2
 8008954:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	2b1f      	cmp	r3, #31
 800895e:	d802      	bhi.n	8008966 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	71fb      	strb	r3, [r7, #7]
 8008964:	e002      	b.n	800896c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	3b20      	subs	r3, #32
 800896a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800896c:	2300      	movs	r3, #0
 800896e:	753b      	strb	r3, [r7, #20]
 8008970:	e012      	b.n	8008998 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8008972:	7dfa      	ldrb	r2, [r7, #23]
 8008974:	7d38      	ldrb	r0, [r7, #20]
 8008976:	7d39      	ldrb	r1, [r7, #20]
 8008978:	4c48      	ldr	r4, [pc, #288]	; (8008a9c <ILI9341_Draw_Char+0x164>)
 800897a:	4613      	mov	r3, r2
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	4413      	add	r3, r2
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	4423      	add	r3, r4
 8008984:	4403      	add	r3, r0
 8008986:	781a      	ldrb	r2, [r3, #0]
 8008988:	f107 0318 	add.w	r3, r7, #24
 800898c:	440b      	add	r3, r1
 800898e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8008992:	7d3b      	ldrb	r3, [r7, #20]
 8008994:	3301      	adds	r3, #1
 8008996:	753b      	strb	r3, [r7, #20]
 8008998:	7d3b      	ldrb	r3, [r7, #20]
 800899a:	2b05      	cmp	r3, #5
 800899c:	d9e9      	bls.n	8008972 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800899e:	2300      	movs	r3, #0
 80089a0:	757b      	strb	r3, [r7, #21]
 80089a2:	e074      	b.n	8008a8e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80089a4:	2300      	movs	r3, #0
 80089a6:	75bb      	strb	r3, [r7, #22]
 80089a8:	e06b      	b.n	8008a82 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 80089aa:	7d7b      	ldrb	r3, [r7, #21]
 80089ac:	f107 0218 	add.w	r2, r7, #24
 80089b0:	4413      	add	r3, r2
 80089b2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80089b6:	461a      	mov	r2, r3
 80089b8:	7dbb      	ldrb	r3, [r7, #22]
 80089ba:	fa42 f303 	asr.w	r3, r2, r3
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d02d      	beq.n	8008a22 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 80089c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d10e      	bne.n	80089ea <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 80089cc:	7d7b      	ldrb	r3, [r7, #21]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	88bb      	ldrh	r3, [r7, #4]
 80089d2:	4413      	add	r3, r2
 80089d4:	b298      	uxth	r0, r3
 80089d6:	7dbb      	ldrb	r3, [r7, #22]
 80089d8:	b29a      	uxth	r2, r3
 80089da:	887b      	ldrh	r3, [r7, #2]
 80089dc:	4413      	add	r3, r2
 80089de:	b29b      	uxth	r3, r3
 80089e0:	883a      	ldrh	r2, [r7, #0]
 80089e2:	4619      	mov	r1, r3
 80089e4:	f000 fb9a 	bl	800911c <ILI9341_Draw_Pixel>
 80089e8:	e048      	b.n	8008a7c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 80089ea:	7d7b      	ldrb	r3, [r7, #21]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80089f0:	fb12 f303 	smulbb	r3, r2, r3
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	88bb      	ldrh	r3, [r7, #4]
 80089f8:	4413      	add	r3, r2
 80089fa:	b298      	uxth	r0, r3
 80089fc:	7dbb      	ldrb	r3, [r7, #22]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a02:	fb12 f303 	smulbb	r3, r2, r3
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	887b      	ldrh	r3, [r7, #2]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	b299      	uxth	r1, r3
 8008a0e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008a10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a12:	2301      	movs	r3, #1
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	883b      	ldrh	r3, [r7, #0]
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	f000 fc58 	bl	80092d0 <ILI9341_Draw_Rectangle>
 8008a20:	e02c      	b.n	8008a7c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8008a22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d10e      	bne.n	8008a46 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8008a28:	7d7b      	ldrb	r3, [r7, #21]
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	88bb      	ldrh	r3, [r7, #4]
 8008a2e:	4413      	add	r3, r2
 8008a30:	b298      	uxth	r0, r3
 8008a32:	7dbb      	ldrb	r3, [r7, #22]
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	887b      	ldrh	r3, [r7, #2]
 8008a38:	4413      	add	r3, r2
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008a3e:	4619      	mov	r1, r3
 8008a40:	f000 fb6c 	bl	800911c <ILI9341_Draw_Pixel>
 8008a44:	e01a      	b.n	8008a7c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8008a46:	7d7b      	ldrb	r3, [r7, #21]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a4c:	fb12 f303 	smulbb	r3, r2, r3
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	88bb      	ldrh	r3, [r7, #4]
 8008a54:	4413      	add	r3, r2
 8008a56:	b298      	uxth	r0, r3
 8008a58:	7dbb      	ldrb	r3, [r7, #22]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a5e:	fb12 f303 	smulbb	r3, r2, r3
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	887b      	ldrh	r3, [r7, #2]
 8008a66:	4413      	add	r3, r2
 8008a68:	b299      	uxth	r1, r3
 8008a6a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008a6c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a6e:	2301      	movs	r3, #1
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	4623      	mov	r3, r4
 8008a78:	f000 fc2a 	bl	80092d0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8008a7c:	7dbb      	ldrb	r3, [r7, #22]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	75bb      	strb	r3, [r7, #22]
 8008a82:	7dbb      	ldrb	r3, [r7, #22]
 8008a84:	2b07      	cmp	r3, #7
 8008a86:	d990      	bls.n	80089aa <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8008a88:	7d7b      	ldrb	r3, [r7, #21]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	757b      	strb	r3, [r7, #21]
 8008a8e:	7d7b      	ldrb	r3, [r7, #21]
 8008a90:	2b05      	cmp	r3, #5
 8008a92:	d987      	bls.n	80089a4 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8008a94:	bf00      	nop
 8008a96:	371c      	adds	r7, #28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd90      	pop	{r4, r7, pc}
 8008a9c:	0800a7c4 	.word	0x0800a7c4

08008aa0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008aa0:	b590      	push	{r4, r7, lr}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	461a      	mov	r2, r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	817b      	strh	r3, [r7, #10]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	813b      	strh	r3, [r7, #8]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8008aba:	e016      	b.n	8008aea <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	60fa      	str	r2, [r7, #12]
 8008ac2:	7818      	ldrb	r0, [r3, #0]
 8008ac4:	88fc      	ldrh	r4, [r7, #6]
 8008ac6:	893a      	ldrh	r2, [r7, #8]
 8008ac8:	8979      	ldrh	r1, [r7, #10]
 8008aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	8c3b      	ldrh	r3, [r7, #32]
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	4623      	mov	r3, r4
 8008ad4:	f7ff ff30 	bl	8008938 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8008ad8:	8c3b      	ldrh	r3, [r7, #32]
 8008ada:	461a      	mov	r2, r3
 8008adc:	0052      	lsls	r2, r2, #1
 8008ade:	4413      	add	r3, r2
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	897b      	ldrh	r3, [r7, #10]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e4      	bne.n	8008abc <ILI9341_Draw_Text+0x1c>
    }


}
 8008af2:	bf00      	nop
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd90      	pop	{r4, r7, pc}
	...

08008afc <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <ILI9341_SPI_Init+0x1c>)
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	4a04      	ldr	r2, [pc, #16]	; (8008b18 <ILI9341_SPI_Init+0x1c>)
 8008b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b0a:	6153      	str	r3, [r2, #20]
}
 8008b0c:	bf00      	nop
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	48000400 	.word	0x48000400

08008b1c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 8008b26:	1df9      	adds	r1, r7, #7
 8008b28:	2301      	movs	r3, #1
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	4804      	ldr	r0, [pc, #16]	; (8008b40 <ILI9341_SPI_Send+0x24>)
 8008b2e:	f7fe f837 	bl	8006ba0 <HAL_SPI_Transmit>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 8008b36:	bf00      	nop
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20000de8 	.word	0x20000de8

08008b44 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008b4e:	4b0d      	ldr	r3, [pc, #52]	; (8008b84 <ILI9341_Write_Command+0x40>)
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	4a0c      	ldr	r2, [pc, #48]	; (8008b84 <ILI9341_Write_Command+0x40>)
 8008b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b58:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008b5a:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <ILI9341_Write_Command+0x40>)
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <ILI9341_Write_Command+0x40>)
 8008b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b64:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7ff ffd7 	bl	8008b1c <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <ILI9341_Write_Command+0x40>)
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	4a04      	ldr	r2, [pc, #16]	; (8008b84 <ILI9341_Write_Command+0x40>)
 8008b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b78:	6153      	str	r3, [r2, #20]
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	48000400 	.word	0x48000400

08008b88 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008b92:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <ILI9341_Write_Data+0x40>)
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	4a0c      	ldr	r2, [pc, #48]	; (8008bc8 <ILI9341_Write_Data+0x40>)
 8008b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <ILI9341_Write_Data+0x40>)
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	4a09      	ldr	r2, [pc, #36]	; (8008bc8 <ILI9341_Write_Data+0x40>)
 8008ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba8:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff ffb5 	bl	8008b1c <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008bb2:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <ILI9341_Write_Data+0x40>)
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	4a04      	ldr	r2, [pc, #16]	; (8008bc8 <ILI9341_Write_Data+0x40>)
 8008bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bbc:	6153      	str	r3, [r2, #20]
}
 8008bbe:	bf00      	nop
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	48000400 	.word	0x48000400

08008bcc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8008bcc:	b590      	push	{r4, r7, lr}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4623      	mov	r3, r4
 8008bdc:	80fb      	strh	r3, [r7, #6]
 8008bde:	4603      	mov	r3, r0
 8008be0:	80bb      	strh	r3, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	807b      	strh	r3, [r7, #2]
 8008be6:	4613      	mov	r3, r2
 8008be8:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8008bea:	202a      	movs	r0, #42	; 0x2a
 8008bec:	f7ff ffaa 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8008bf0:	88fb      	ldrh	r3, [r7, #6]
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff ffc5 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8008bfe:	88fb      	ldrh	r3, [r7, #6]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff ffc0 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8008c08:	887b      	ldrh	r3, [r7, #2]
 8008c0a:	0a1b      	lsrs	r3, r3, #8
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff ffb9 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8008c16:	887b      	ldrh	r3, [r7, #2]
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff ffb4 	bl	8008b88 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8008c20:	202b      	movs	r0, #43	; 0x2b
 8008c22:	f7ff ff8f 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8008c26:	88bb      	ldrh	r3, [r7, #4]
 8008c28:	0a1b      	lsrs	r3, r3, #8
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff ffaa 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8008c34:	88bb      	ldrh	r3, [r7, #4]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7ff ffa5 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8008c3e:	883b      	ldrh	r3, [r7, #0]
 8008c40:	0a1b      	lsrs	r3, r3, #8
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff ff9e 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8008c4c:	883b      	ldrh	r3, [r7, #0]
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff ff99 	bl	8008b88 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8008c56:	202c      	movs	r0, #44	; 0x2c
 8008c58:	f7ff ff74 	bl	8008b44 <ILI9341_Write_Command>
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd90      	pop	{r4, r7, pc}

08008c64 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <ILI9341_Reset+0x38>)
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	4a0b      	ldr	r2, [pc, #44]	; (8008c9c <ILI9341_Reset+0x38>)
 8008c6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c72:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8008c74:	20c8      	movs	r0, #200	; 0xc8
 8008c76:	f7fa fa05 	bl	8003084 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008c7a:	4b08      	ldr	r3, [pc, #32]	; (8008c9c <ILI9341_Reset+0x38>)
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	4a07      	ldr	r2, [pc, #28]	; (8008c9c <ILI9341_Reset+0x38>)
 8008c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c84:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8008c86:	20c8      	movs	r0, #200	; 0xc8
 8008c88:	f7fa f9fc 	bl	8003084 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008c8c:	4b03      	ldr	r3, [pc, #12]	; (8008c9c <ILI9341_Reset+0x38>)
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	4a02      	ldr	r2, [pc, #8]	; (8008c9c <ILI9341_Reset+0x38>)
 8008c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c96:	6153      	str	r3, [r2, #20]
}
 8008c98:	bf00      	nop
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	48000400 	.word	0x48000400

08008ca0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8008cae:	2036      	movs	r0, #54	; 0x36
 8008cb0:	f7ff ff48 	bl	8008b44 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d836      	bhi.n	8008d28 <ILI9341_Set_Rotation+0x88>
 8008cba:	a201      	add	r2, pc, #4	; (adr r2, 8008cc0 <ILI9341_Set_Rotation+0x20>)
 8008cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc0:	08008cd1 	.word	0x08008cd1
 8008cc4:	08008ce7 	.word	0x08008ce7
 8008cc8:	08008cfd 	.word	0x08008cfd
 8008ccc:	08008d13 	.word	0x08008d13
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8008cd0:	2048      	movs	r0, #72	; 0x48
 8008cd2:	f7ff ff59 	bl	8008b88 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8008cd6:	4b17      	ldr	r3, [pc, #92]	; (8008d34 <ILI9341_Set_Rotation+0x94>)
 8008cd8:	22f0      	movs	r2, #240	; 0xf0
 8008cda:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008cdc:	4b16      	ldr	r3, [pc, #88]	; (8008d38 <ILI9341_Set_Rotation+0x98>)
 8008cde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008ce2:	801a      	strh	r2, [r3, #0]
			break;
 8008ce4:	e021      	b.n	8008d2a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8008ce6:	2028      	movs	r0, #40	; 0x28
 8008ce8:	f7ff ff4e 	bl	8008b88 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008cec:	4b11      	ldr	r3, [pc, #68]	; (8008d34 <ILI9341_Set_Rotation+0x94>)
 8008cee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008cf2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008cf4:	4b10      	ldr	r3, [pc, #64]	; (8008d38 <ILI9341_Set_Rotation+0x98>)
 8008cf6:	22f0      	movs	r2, #240	; 0xf0
 8008cf8:	801a      	strh	r2, [r3, #0]
			break;
 8008cfa:	e016      	b.n	8008d2a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8008cfc:	2088      	movs	r0, #136	; 0x88
 8008cfe:	f7ff ff43 	bl	8008b88 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8008d02:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <ILI9341_Set_Rotation+0x94>)
 8008d04:	22f0      	movs	r2, #240	; 0xf0
 8008d06:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008d08:	4b0b      	ldr	r3, [pc, #44]	; (8008d38 <ILI9341_Set_Rotation+0x98>)
 8008d0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008d0e:	801a      	strh	r2, [r3, #0]
			break;
 8008d10:	e00b      	b.n	8008d2a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8008d12:	20e8      	movs	r0, #232	; 0xe8
 8008d14:	f7ff ff38 	bl	8008b88 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008d18:	4b06      	ldr	r3, [pc, #24]	; (8008d34 <ILI9341_Set_Rotation+0x94>)
 8008d1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008d1e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008d20:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <ILI9341_Set_Rotation+0x98>)
 8008d22:	22f0      	movs	r2, #240	; 0xf0
 8008d24:	801a      	strh	r2, [r3, #0]
			break;
 8008d26:	e000      	b.n	8008d2a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8008d28:	bf00      	nop
	}
}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	2000001e 	.word	0x2000001e
 8008d38:	2000001c 	.word	0x2000001c

08008d3c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008d40:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <ILI9341_Enable+0x1c>)
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	4a04      	ldr	r2, [pc, #16]	; (8008d58 <ILI9341_Enable+0x1c>)
 8008d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d4a:	6153      	str	r3, [r2, #20]
}
 8008d4c:	bf00      	nop
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	48000400 	.word	0x48000400

08008d5c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8008d60:	f7ff ffec 	bl	8008d3c <ILI9341_Enable>
	ILI9341_SPI_Init();
 8008d64:	f7ff feca 	bl	8008afc <ILI9341_SPI_Init>
	ILI9341_Reset();
 8008d68:	f7ff ff7c 	bl	8008c64 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	f7ff fee9 	bl	8008b44 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8008d72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008d76:	f7fa f985 	bl	8003084 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8008d7a:	20cb      	movs	r0, #203	; 0xcb
 8008d7c:	f7ff fee2 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8008d80:	2039      	movs	r0, #57	; 0x39
 8008d82:	f7ff ff01 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8008d86:	202c      	movs	r0, #44	; 0x2c
 8008d88:	f7ff fefe 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	f7ff fefb 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8008d92:	2034      	movs	r0, #52	; 0x34
 8008d94:	f7ff fef8 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8008d98:	2002      	movs	r0, #2
 8008d9a:	f7ff fef5 	bl	8008b88 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8008d9e:	20cf      	movs	r0, #207	; 0xcf
 8008da0:	f7ff fed0 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008da4:	2000      	movs	r0, #0
 8008da6:	f7ff feef 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008daa:	20c1      	movs	r0, #193	; 0xc1
 8008dac:	f7ff feec 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8008db0:	2030      	movs	r0, #48	; 0x30
 8008db2:	f7ff fee9 	bl	8008b88 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8008db6:	20e8      	movs	r0, #232	; 0xe8
 8008db8:	f7ff fec4 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8008dbc:	2085      	movs	r0, #133	; 0x85
 8008dbe:	f7ff fee3 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	f7ff fee0 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8008dc8:	2078      	movs	r0, #120	; 0x78
 8008dca:	f7ff fedd 	bl	8008b88 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8008dce:	20ea      	movs	r0, #234	; 0xea
 8008dd0:	f7ff feb8 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	f7ff fed7 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f7ff fed4 	bl	8008b88 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8008de0:	20ed      	movs	r0, #237	; 0xed
 8008de2:	f7ff feaf 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8008de6:	2064      	movs	r0, #100	; 0x64
 8008de8:	f7ff fece 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008dec:	2003      	movs	r0, #3
 8008dee:	f7ff fecb 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8008df2:	2012      	movs	r0, #18
 8008df4:	f7ff fec8 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8008df8:	2081      	movs	r0, #129	; 0x81
 8008dfa:	f7ff fec5 	bl	8008b88 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8008dfe:	20f7      	movs	r0, #247	; 0xf7
 8008e00:	f7ff fea0 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8008e04:	2020      	movs	r0, #32
 8008e06:	f7ff febf 	bl	8008b88 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8008e0a:	20c0      	movs	r0, #192	; 0xc0
 8008e0c:	f7ff fe9a 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8008e10:	2023      	movs	r0, #35	; 0x23
 8008e12:	f7ff feb9 	bl	8008b88 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8008e16:	20c1      	movs	r0, #193	; 0xc1
 8008e18:	f7ff fe94 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8008e1c:	2010      	movs	r0, #16
 8008e1e:	f7ff feb3 	bl	8008b88 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8008e22:	20c5      	movs	r0, #197	; 0xc5
 8008e24:	f7ff fe8e 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8008e28:	203e      	movs	r0, #62	; 0x3e
 8008e2a:	f7ff fead 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8008e2e:	2028      	movs	r0, #40	; 0x28
 8008e30:	f7ff feaa 	bl	8008b88 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8008e34:	20c7      	movs	r0, #199	; 0xc7
 8008e36:	f7ff fe85 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8008e3a:	2086      	movs	r0, #134	; 0x86
 8008e3c:	f7ff fea4 	bl	8008b88 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8008e40:	2036      	movs	r0, #54	; 0x36
 8008e42:	f7ff fe7f 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8008e46:	2048      	movs	r0, #72	; 0x48
 8008e48:	f7ff fe9e 	bl	8008b88 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8008e4c:	203a      	movs	r0, #58	; 0x3a
 8008e4e:	f7ff fe79 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8008e52:	2055      	movs	r0, #85	; 0x55
 8008e54:	f7ff fe98 	bl	8008b88 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8008e58:	20b1      	movs	r0, #177	; 0xb1
 8008e5a:	f7ff fe73 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f7ff fe92 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8008e64:	2018      	movs	r0, #24
 8008e66:	f7ff fe8f 	bl	8008b88 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8008e6a:	20b6      	movs	r0, #182	; 0xb6
 8008e6c:	f7ff fe6a 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8008e70:	2008      	movs	r0, #8
 8008e72:	f7ff fe89 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8008e76:	2082      	movs	r0, #130	; 0x82
 8008e78:	f7ff fe86 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8008e7c:	2027      	movs	r0, #39	; 0x27
 8008e7e:	f7ff fe83 	bl	8008b88 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8008e82:	20f2      	movs	r0, #242	; 0xf2
 8008e84:	f7ff fe5e 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f7ff fe7d 	bl	8008b88 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8008e8e:	2026      	movs	r0, #38	; 0x26
 8008e90:	f7ff fe58 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8008e94:	2001      	movs	r0, #1
 8008e96:	f7ff fe77 	bl	8008b88 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8008e9a:	20e0      	movs	r0, #224	; 0xe0
 8008e9c:	f7ff fe52 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8008ea0:	200f      	movs	r0, #15
 8008ea2:	f7ff fe71 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008ea6:	2031      	movs	r0, #49	; 0x31
 8008ea8:	f7ff fe6e 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8008eac:	202b      	movs	r0, #43	; 0x2b
 8008eae:	f7ff fe6b 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008eb2:	200c      	movs	r0, #12
 8008eb4:	f7ff fe68 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008eb8:	200e      	movs	r0, #14
 8008eba:	f7ff fe65 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008ebe:	2008      	movs	r0, #8
 8008ec0:	f7ff fe62 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8008ec4:	204e      	movs	r0, #78	; 0x4e
 8008ec6:	f7ff fe5f 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8008eca:	20f1      	movs	r0, #241	; 0xf1
 8008ecc:	f7ff fe5c 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8008ed0:	2037      	movs	r0, #55	; 0x37
 8008ed2:	f7ff fe59 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008ed6:	2007      	movs	r0, #7
 8008ed8:	f7ff fe56 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8008edc:	2010      	movs	r0, #16
 8008ede:	f7ff fe53 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008ee2:	2003      	movs	r0, #3
 8008ee4:	f7ff fe50 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008ee8:	200e      	movs	r0, #14
 8008eea:	f7ff fe4d 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8008eee:	2009      	movs	r0, #9
 8008ef0:	f7ff fe4a 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	f7ff fe47 	bl	8008b88 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8008efa:	20e1      	movs	r0, #225	; 0xe1
 8008efc:	f7ff fe22 	bl	8008b44 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008f00:	2000      	movs	r0, #0
 8008f02:	f7ff fe41 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008f06:	200e      	movs	r0, #14
 8008f08:	f7ff fe3e 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8008f0c:	2014      	movs	r0, #20
 8008f0e:	f7ff fe3b 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008f12:	2003      	movs	r0, #3
 8008f14:	f7ff fe38 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8008f18:	2011      	movs	r0, #17
 8008f1a:	f7ff fe35 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008f1e:	2007      	movs	r0, #7
 8008f20:	f7ff fe32 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008f24:	2031      	movs	r0, #49	; 0x31
 8008f26:	f7ff fe2f 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008f2a:	20c1      	movs	r0, #193	; 0xc1
 8008f2c:	f7ff fe2c 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8008f30:	2048      	movs	r0, #72	; 0x48
 8008f32:	f7ff fe29 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008f36:	2008      	movs	r0, #8
 8008f38:	f7ff fe26 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008f3c:	200f      	movs	r0, #15
 8008f3e:	f7ff fe23 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008f42:	200c      	movs	r0, #12
 8008f44:	f7ff fe20 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008f48:	2031      	movs	r0, #49	; 0x31
 8008f4a:	f7ff fe1d 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8008f4e:	2036      	movs	r0, #54	; 0x36
 8008f50:	f7ff fe1a 	bl	8008b88 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008f54:	200f      	movs	r0, #15
 8008f56:	f7ff fe17 	bl	8008b88 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8008f5a:	2011      	movs	r0, #17
 8008f5c:	f7ff fdf2 	bl	8008b44 <ILI9341_Write_Command>
	HAL_Delay(240);
 8008f60:	20f0      	movs	r0, #240	; 0xf0
 8008f62:	f7fa f88f 	bl	8003084 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8008f66:	2029      	movs	r0, #41	; 0x29
 8008f68:	f7ff fdec 	bl	8008b44 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f7ff fe97 	bl	8008ca0 <ILI9341_Set_Rotation>
}
 8008f72:	bf00      	nop
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8008f78:	b5b0      	push	{r4, r5, r7, lr}
 8008f7a:	b08e      	sub	sp, #56	; 0x38
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	607b      	str	r3, [r7, #4]
 8008f80:	4603      	mov	r3, r0
 8008f82:	81fb      	strh	r3, [r7, #14]
 8008f84:	460b      	mov	r3, r1
 8008f86:	81bb      	strh	r3, [r7, #12]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	817b      	strh	r3, [r7, #10]
 8008f8c:	466b      	mov	r3, sp
 8008f8e:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	4a48      	ldr	r2, [pc, #288]	; (80090bc <ILI9341_Draw_colour_Burst+0x144>)
 8008f9a:	8812      	ldrh	r2, [r2, #0]
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d202      	bcs.n	8008fa6 <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fa4:	e002      	b.n	8008fac <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8008fa6:	4b45      	ldr	r3, [pc, #276]	; (80090bc <ILI9341_Draw_colour_Burst+0x144>)
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 8008fac:	897b      	ldrh	r3, [r7, #10]
 8008fae:	0a1b      	lsrs	r3, r3, #8
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8008fb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fb8:	4603      	mov	r3, r0
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
 8008fbe:	4601      	mov	r1, r0
 8008fc0:	f04f 0200 	mov.w	r2, #0
 8008fc4:	f04f 0300 	mov.w	r3, #0
 8008fc8:	f04f 0400 	mov.w	r4, #0
 8008fcc:	00d4      	lsls	r4, r2, #3
 8008fce:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008fd2:	00cb      	lsls	r3, r1, #3
 8008fd4:	4601      	mov	r1, r0
 8008fd6:	f04f 0200 	mov.w	r2, #0
 8008fda:	f04f 0300 	mov.w	r3, #0
 8008fde:	f04f 0400 	mov.w	r4, #0
 8008fe2:	00d4      	lsls	r4, r2, #3
 8008fe4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008fe8:	00cb      	lsls	r3, r1, #3
 8008fea:	1dc3      	adds	r3, r0, #7
 8008fec:	08db      	lsrs	r3, r3, #3
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	ebad 0d03 	sub.w	sp, sp, r3
 8008ff4:	466b      	mov	r3, sp
 8008ff6:	3300      	adds	r3, #0
 8008ff8:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8008ffe:	e00e      	b.n	800901e <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	4413      	add	r3, r2
 8009006:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800900a:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	3301      	adds	r3, #1
 8009010:	897a      	ldrh	r2, [r7, #10]
 8009012:	b2d1      	uxtb	r1, r2
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	3302      	adds	r3, #2
 800901c:	633b      	str	r3, [r7, #48]	; 0x30
 800901e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	429a      	cmp	r2, r3
 8009024:	d3ec      	bcc.n	8009000 <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800902c:	2301      	movs	r3, #1
 800902e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00d      	beq.n	8009056 <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009042:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009048:	fbb3 f2f2 	udiv	r2, r3, r2
 800904c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800904e:	fb01 f202 	mul.w	r2, r1, r2
 8009052:	1a9b      	subs	r3, r3, r2
 8009054:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009056:	4b1a      	ldr	r3, [pc, #104]	; (80090c0 <ILI9341_Draw_colour_Burst+0x148>)
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	4a19      	ldr	r2, [pc, #100]	; (80090c0 <ILI9341_Draw_colour_Burst+0x148>)
 800905c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009060:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009062:	4b17      	ldr	r3, [pc, #92]	; (80090c0 <ILI9341_Draw_colour_Burst+0x148>)
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	4a16      	ldr	r2, [pc, #88]	; (80090c0 <ILI9341_Draw_colour_Burst+0x148>)
 8009068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800906c:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	2b00      	cmp	r3, #0
 8009072:	d010      	beq.n	8009096 <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8009074:	2300      	movs	r3, #0
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
 8009078:	e009      	b.n	800908e <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 800907a:	69b9      	ldr	r1, [r7, #24]
 800907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907e:	b29a      	uxth	r2, r3
 8009080:	2302      	movs	r3, #2
 8009082:	4810      	ldr	r0, [pc, #64]	; (80090c4 <ILI9341_Draw_colour_Burst+0x14c>)
 8009084:	f7fd fd8c 	bl	8006ba0 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	3301      	adds	r3, #1
 800908c:	627b      	str	r3, [r7, #36]	; 0x24
 800908e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009092:	429a      	cmp	r2, r3
 8009094:	d3f1      	bcc.n	800907a <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 8009096:	69b9      	ldr	r1, [r7, #24]
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	b29a      	uxth	r2, r3
 800909c:	2302      	movs	r3, #2
 800909e:	4809      	ldr	r0, [pc, #36]	; (80090c4 <ILI9341_Draw_colour_Burst+0x14c>)
 80090a0:	f7fd fd7e 	bl	8006ba0 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80090a4:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <ILI9341_Draw_colour_Burst+0x148>)
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	4a05      	ldr	r2, [pc, #20]	; (80090c0 <ILI9341_Draw_colour_Burst+0x148>)
 80090aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ae:	6153      	str	r3, [r2, #20]
 80090b0:	46ad      	mov	sp, r5


}
 80090b2:	bf00      	nop
 80090b4:	3738      	adds	r7, #56	; 0x38
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bdb0      	pop	{r4, r5, r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000020 	.word	0x20000020
 80090c0:	48000400 	.word	0x48000400
 80090c4:	20000de8 	.word	0x20000de8

080090c8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af02      	add	r7, sp, #8
 80090ce:	4603      	mov	r3, r0
 80090d0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 80090d2:	4b10      	ldr	r3, [pc, #64]	; (8009114 <ILI9341_Fill_Screen+0x4c>)
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <ILI9341_Fill_Screen+0x50>)
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	2100      	movs	r1, #0
 80090e0:	2000      	movs	r0, #0
 80090e2:	f7ff fd73 	bl	8008bcc <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 80090e6:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <ILI9341_Fill_Screen+0x4c>)
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	461a      	mov	r2, r3
 80090ee:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <ILI9341_Fill_Screen+0x50>)
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	fb03 f302 	mul.w	r3, r3, r2
 80090f8:	4619      	mov	r1, r3
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	2304      	movs	r3, #4
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	460b      	mov	r3, r1
 8009102:	2100      	movs	r1, #0
 8009104:	2000      	movs	r0, #0
 8009106:	f7ff ff37 	bl	8008f78 <ILI9341_Draw_colour_Burst>
}
 800910a:	bf00      	nop
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	2000001e 	.word	0x2000001e
 8009118:	2000001c 	.word	0x2000001c

0800911c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	80fb      	strh	r3, [r7, #6]
 8009126:	460b      	mov	r3, r1
 8009128:	80bb      	strh	r3, [r7, #4]
 800912a:	4613      	mov	r3, r2
 800912c:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800912e:	4b64      	ldr	r3, [pc, #400]	; (80092c0 <ILI9341_Draw_Pixel+0x1a4>)
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	429a      	cmp	r2, r3
 8009138:	f080 80be 	bcs.w	80092b8 <ILI9341_Draw_Pixel+0x19c>
 800913c:	4b61      	ldr	r3, [pc, #388]	; (80092c4 <ILI9341_Draw_Pixel+0x1a8>)
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	b29b      	uxth	r3, r3
 8009142:	88ba      	ldrh	r2, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	f080 80b7 	bcs.w	80092b8 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800914a:	4b5f      	ldr	r3, [pc, #380]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	4a5e      	ldr	r2, [pc, #376]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009154:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009156:	4b5c      	ldr	r3, [pc, #368]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	4a5b      	ldr	r2, [pc, #364]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800915c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009160:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8009162:	202a      	movs	r0, #42	; 0x2a
 8009164:	f7ff fcda 	bl	8008b1c <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009168:	4b57      	ldr	r3, [pc, #348]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	4a56      	ldr	r2, [pc, #344]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800916e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009172:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009174:	4b54      	ldr	r3, [pc, #336]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	4a53      	ldr	r2, [pc, #332]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800917a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800917e:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009180:	4b51      	ldr	r3, [pc, #324]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	4a50      	ldr	r2, [pc, #320]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800918a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800918c:	88fb      	ldrh	r3, [r7, #6]
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	b29b      	uxth	r3, r3
 8009192:	b2db      	uxtb	r3, r3
 8009194:	753b      	strb	r3, [r7, #20]
 8009196:	88fb      	ldrh	r3, [r7, #6]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	757b      	strb	r3, [r7, #21]
 800919c:	88fb      	ldrh	r3, [r7, #6]
 800919e:	3301      	adds	r3, #1
 80091a0:	121b      	asrs	r3, r3, #8
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	75bb      	strb	r3, [r7, #22]
 80091a6:	88fb      	ldrh	r3, [r7, #6]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	3301      	adds	r3, #1
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80091b0:	f107 0114 	add.w	r1, r7, #20
 80091b4:	2301      	movs	r3, #1
 80091b6:	2204      	movs	r2, #4
 80091b8:	4844      	ldr	r0, [pc, #272]	; (80092cc <ILI9341_Draw_Pixel+0x1b0>)
 80091ba:	f7fd fcf1 	bl	8006ba0 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80091be:	4b42      	ldr	r3, [pc, #264]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	4a41      	ldr	r2, [pc, #260]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80091ca:	4b3f      	ldr	r3, [pc, #252]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	4a3e      	ldr	r2, [pc, #248]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091d4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80091d6:	4b3c      	ldr	r3, [pc, #240]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	4a3b      	ldr	r2, [pc, #236]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091e0:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 80091e2:	202b      	movs	r0, #43	; 0x2b
 80091e4:	f7ff fc9a 	bl	8008b1c <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80091e8:	4b37      	ldr	r3, [pc, #220]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	4a36      	ldr	r2, [pc, #216]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f2:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80091f4:	4b34      	ldr	r3, [pc, #208]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	4a33      	ldr	r2, [pc, #204]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80091fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fe:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009200:	4b31      	ldr	r3, [pc, #196]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	4a30      	ldr	r2, [pc, #192]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800920a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800920c:	88bb      	ldrh	r3, [r7, #4]
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	b29b      	uxth	r3, r3
 8009212:	b2db      	uxtb	r3, r3
 8009214:	743b      	strb	r3, [r7, #16]
 8009216:	88bb      	ldrh	r3, [r7, #4]
 8009218:	b2db      	uxtb	r3, r3
 800921a:	747b      	strb	r3, [r7, #17]
 800921c:	88bb      	ldrh	r3, [r7, #4]
 800921e:	3301      	adds	r3, #1
 8009220:	121b      	asrs	r3, r3, #8
 8009222:	b2db      	uxtb	r3, r3
 8009224:	74bb      	strb	r3, [r7, #18]
 8009226:	88bb      	ldrh	r3, [r7, #4]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	3301      	adds	r3, #1
 800922c:	b2db      	uxtb	r3, r3
 800922e:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8009230:	f107 0110 	add.w	r1, r7, #16
 8009234:	2301      	movs	r3, #1
 8009236:	2204      	movs	r2, #4
 8009238:	4824      	ldr	r0, [pc, #144]	; (80092cc <ILI9341_Draw_Pixel+0x1b0>)
 800923a:	f7fd fcb1 	bl	8006ba0 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800923e:	4b22      	ldr	r3, [pc, #136]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	4a21      	ldr	r2, [pc, #132]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009248:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800924a:	4b1f      	ldr	r3, [pc, #124]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	4a1e      	ldr	r2, [pc, #120]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009254:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009256:	4b1c      	ldr	r3, [pc, #112]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	4a1b      	ldr	r2, [pc, #108]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800925c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009260:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8009262:	202c      	movs	r0, #44	; 0x2c
 8009264:	f7ff fc5a 	bl	8008b1c <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009268:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	4a16      	ldr	r2, [pc, #88]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800926e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009272:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009274:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	4a13      	ldr	r2, [pc, #76]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 800927a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800927e:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009280:	4b11      	ldr	r3, [pc, #68]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	4a10      	ldr	r2, [pc, #64]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 8009286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800928a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800928c:	887b      	ldrh	r3, [r7, #2]
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	b29b      	uxth	r3, r3
 8009292:	b2db      	uxtb	r3, r3
 8009294:	733b      	strb	r3, [r7, #12]
 8009296:	887b      	ldrh	r3, [r7, #2]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800929c:	f107 010c 	add.w	r1, r7, #12
 80092a0:	2301      	movs	r3, #1
 80092a2:	2202      	movs	r2, #2
 80092a4:	4809      	ldr	r0, [pc, #36]	; (80092cc <ILI9341_Draw_Pixel+0x1b0>)
 80092a6:	f7fd fc7b 	bl	8006ba0 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80092aa:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	4a06      	ldr	r2, [pc, #24]	; (80092c8 <ILI9341_Draw_Pixel+0x1ac>)
 80092b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b4:	6153      	str	r3, [r2, #20]
 80092b6:	e000      	b.n	80092ba <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80092b8:	bf00      	nop

	
}
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	2000001e 	.word	0x2000001e
 80092c4:	2000001c 	.word	0x2000001c
 80092c8:	48000400 	.word	0x48000400
 80092cc:	20000de8 	.word	0x20000de8

080092d0 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 80092d0:	b590      	push	{r4, r7, lr}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	4611      	mov	r1, r2
 80092dc:	461a      	mov	r2, r3
 80092de:	4623      	mov	r3, r4
 80092e0:	80fb      	strh	r3, [r7, #6]
 80092e2:	4603      	mov	r3, r0
 80092e4:	80bb      	strh	r3, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	807b      	strh	r3, [r7, #2]
 80092ea:	4613      	mov	r3, r2
 80092ec:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80092ee:	4b39      	ldr	r3, [pc, #228]	; (80093d4 <ILI9341_Draw_Rectangle+0x104>)
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	88fa      	ldrh	r2, [r7, #6]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d268      	bcs.n	80093cc <ILI9341_Draw_Rectangle+0xfc>
 80092fa:	4b37      	ldr	r3, [pc, #220]	; (80093d8 <ILI9341_Draw_Rectangle+0x108>)
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	88ba      	ldrh	r2, [r7, #4]
 8009302:	429a      	cmp	r2, r3
 8009304:	d262      	bcs.n	80093cc <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	887b      	ldrh	r3, [r7, #2]
 800930a:	4413      	add	r3, r2
 800930c:	3b01      	subs	r3, #1
 800930e:	4a31      	ldr	r2, [pc, #196]	; (80093d4 <ILI9341_Draw_Rectangle+0x104>)
 8009310:	8812      	ldrh	r2, [r2, #0]
 8009312:	b292      	uxth	r2, r2
 8009314:	4293      	cmp	r3, r2
 8009316:	db05      	blt.n	8009324 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8009318:	4b2e      	ldr	r3, [pc, #184]	; (80093d4 <ILI9341_Draw_Rectangle+0x104>)
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	b29a      	uxth	r2, r3
 800931e:	88fb      	ldrh	r3, [r7, #6]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8009324:	88ba      	ldrh	r2, [r7, #4]
 8009326:	883b      	ldrh	r3, [r7, #0]
 8009328:	4413      	add	r3, r2
 800932a:	3b01      	subs	r3, #1
 800932c:	4a2a      	ldr	r2, [pc, #168]	; (80093d8 <ILI9341_Draw_Rectangle+0x108>)
 800932e:	8812      	ldrh	r2, [r2, #0]
 8009330:	b292      	uxth	r2, r2
 8009332:	4293      	cmp	r3, r2
 8009334:	db05      	blt.n	8009342 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8009336:	4b28      	ldr	r3, [pc, #160]	; (80093d8 <ILI9341_Draw_Rectangle+0x108>)
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	b29a      	uxth	r2, r3
 800933c:	88bb      	ldrh	r3, [r7, #4]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 8009342:	88fa      	ldrh	r2, [r7, #6]
 8009344:	887b      	ldrh	r3, [r7, #2]
 8009346:	4413      	add	r3, r2
 8009348:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 800934a:	3b01      	subs	r3, #1
 800934c:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800934e:	88ba      	ldrh	r2, [r7, #4]
 8009350:	883b      	ldrh	r3, [r7, #0]
 8009352:	4413      	add	r3, r2
 8009354:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8009356:	3b01      	subs	r3, #1
 8009358:	b29b      	uxth	r3, r3
 800935a:	88b9      	ldrh	r1, [r7, #4]
 800935c:	88f8      	ldrh	r0, [r7, #6]
 800935e:	4622      	mov	r2, r4
 8009360:	f7ff fc34 	bl	8008bcc <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8009364:	883a      	ldrh	r2, [r7, #0]
 8009366:	887b      	ldrh	r3, [r7, #2]
 8009368:	fb12 f303 	smulbb	r3, r2, r3
 800936c:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8009372:	89fb      	ldrh	r3, [r7, #14]
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d009      	beq.n	8009390 <ILI9341_Draw_Rectangle+0xc0>
 800937c:	89fb      	ldrh	r3, [r7, #14]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d906      	bls.n	8009390 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 8009382:	2301      	movs	r3, #1
 8009384:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8009386:	89fb      	ldrh	r3, [r7, #14]
 8009388:	085b      	lsrs	r3, r3, #1
 800938a:	b29b      	uxth	r3, r3
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 8009390:	89fc      	ldrh	r4, [r7, #14]
 8009392:	8c3a      	ldrh	r2, [r7, #32]
 8009394:	88b9      	ldrh	r1, [r7, #4]
 8009396:	88f8      	ldrh	r0, [r7, #6]
 8009398:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	4623      	mov	r3, r4
 80093a0:	f7ff fdea 	bl	8008f78 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 80093a4:	7b7b      	ldrb	r3, [r7, #13]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d011      	beq.n	80093ce <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80093aa:	88fa      	ldrh	r2, [r7, #6]
 80093ac:	887b      	ldrh	r3, [r7, #2]
 80093ae:	4413      	add	r3, r2
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80093b6:	88ba      	ldrh	r2, [r7, #4]
 80093b8:	883b      	ldrh	r3, [r7, #0]
 80093ba:	4413      	add	r3, r2
 80093bc:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80093be:	3b01      	subs	r3, #1
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	8c3a      	ldrh	r2, [r7, #32]
 80093c4:	4619      	mov	r1, r3
 80093c6:	f7ff fea9 	bl	800911c <ILI9341_Draw_Pixel>
 80093ca:	e000      	b.n	80093ce <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80093cc:	bf00      	nop
							colour);
	}
}
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd90      	pop	{r4, r7, pc}
 80093d4:	2000001e 	.word	0x2000001e
 80093d8:	2000001c 	.word	0x2000001c

080093dc <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 80093dc:	b590      	push	{r4, r7, lr}
 80093de:	b085      	sub	sp, #20
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	4604      	mov	r4, r0
 80093e4:	4608      	mov	r0, r1
 80093e6:	4611      	mov	r1, r2
 80093e8:	461a      	mov	r2, r3
 80093ea:	4623      	mov	r3, r4
 80093ec:	80fb      	strh	r3, [r7, #6]
 80093ee:	4603      	mov	r3, r0
 80093f0:	80bb      	strh	r3, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	807b      	strh	r3, [r7, #2]
 80093f6:	4613      	mov	r3, r2
 80093f8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80093fa:	4b1a      	ldr	r3, [pc, #104]	; (8009464 <ILI9341_Draw_Horizontal_Line+0x88>)
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	88fa      	ldrh	r2, [r7, #6]
 8009402:	429a      	cmp	r2, r3
 8009404:	d229      	bcs.n	800945a <ILI9341_Draw_Horizontal_Line+0x7e>
 8009406:	4b18      	ldr	r3, [pc, #96]	; (8009468 <ILI9341_Draw_Horizontal_Line+0x8c>)
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	88ba      	ldrh	r2, [r7, #4]
 800940e:	429a      	cmp	r2, r3
 8009410:	d223      	bcs.n	800945a <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8009412:	88fa      	ldrh	r2, [r7, #6]
 8009414:	887b      	ldrh	r3, [r7, #2]
 8009416:	4413      	add	r3, r2
 8009418:	3b01      	subs	r3, #1
 800941a:	4a12      	ldr	r2, [pc, #72]	; (8009464 <ILI9341_Draw_Horizontal_Line+0x88>)
 800941c:	8812      	ldrh	r2, [r2, #0]
 800941e:	b292      	uxth	r2, r2
 8009420:	4293      	cmp	r3, r2
 8009422:	db05      	blt.n	8009430 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8009424:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <ILI9341_Draw_Horizontal_Line+0x88>)
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	b29a      	uxth	r2, r3
 800942a:	88fb      	ldrh	r3, [r7, #6]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 8009430:	88fa      	ldrh	r2, [r7, #6]
 8009432:	887b      	ldrh	r3, [r7, #2]
 8009434:	4413      	add	r3, r2
 8009436:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8009438:	3b01      	subs	r3, #1
 800943a:	b29a      	uxth	r2, r3
 800943c:	88bb      	ldrh	r3, [r7, #4]
 800943e:	88b9      	ldrh	r1, [r7, #4]
 8009440:	88f8      	ldrh	r0, [r7, #6]
 8009442:	f7ff fbc3 	bl	8008bcc <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 8009446:	887c      	ldrh	r4, [r7, #2]
 8009448:	883a      	ldrh	r2, [r7, #0]
 800944a:	88b9      	ldrh	r1, [r7, #4]
 800944c:	88f8      	ldrh	r0, [r7, #6]
 800944e:	2303      	movs	r3, #3
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	4623      	mov	r3, r4
 8009454:	f7ff fd90 	bl	8008f78 <ILI9341_Draw_colour_Burst>
 8009458:	e000      	b.n	800945c <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800945a:	bf00      	nop
}
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	bd90      	pop	{r4, r7, pc}
 8009462:	bf00      	nop
 8009464:	2000001e 	.word	0x2000001e
 8009468:	2000001c 	.word	0x2000001c

0800946c <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800946c:	b590      	push	{r4, r7, lr}
 800946e:	b085      	sub	sp, #20
 8009470:	af02      	add	r7, sp, #8
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	4611      	mov	r1, r2
 8009478:	461a      	mov	r2, r3
 800947a:	4623      	mov	r3, r4
 800947c:	80fb      	strh	r3, [r7, #6]
 800947e:	4603      	mov	r3, r0
 8009480:	80bb      	strh	r3, [r7, #4]
 8009482:	460b      	mov	r3, r1
 8009484:	807b      	strh	r3, [r7, #2]
 8009486:	4613      	mov	r3, r2
 8009488:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800948a:	4b1a      	ldr	r3, [pc, #104]	; (80094f4 <ILI9341_Draw_Vertical_Line+0x88>)
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	b29b      	uxth	r3, r3
 8009490:	88fa      	ldrh	r2, [r7, #6]
 8009492:	429a      	cmp	r2, r3
 8009494:	d229      	bcs.n	80094ea <ILI9341_Draw_Vertical_Line+0x7e>
 8009496:	4b18      	ldr	r3, [pc, #96]	; (80094f8 <ILI9341_Draw_Vertical_Line+0x8c>)
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	b29b      	uxth	r3, r3
 800949c:	88ba      	ldrh	r2, [r7, #4]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d223      	bcs.n	80094ea <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 80094a2:	88ba      	ldrh	r2, [r7, #4]
 80094a4:	887b      	ldrh	r3, [r7, #2]
 80094a6:	4413      	add	r3, r2
 80094a8:	3b01      	subs	r3, #1
 80094aa:	4a13      	ldr	r2, [pc, #76]	; (80094f8 <ILI9341_Draw_Vertical_Line+0x8c>)
 80094ac:	8812      	ldrh	r2, [r2, #0]
 80094ae:	b292      	uxth	r2, r2
 80094b0:	4293      	cmp	r3, r2
 80094b2:	db05      	blt.n	80094c0 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 80094b4:	4b10      	ldr	r3, [pc, #64]	; (80094f8 <ILI9341_Draw_Vertical_Line+0x8c>)
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	88bb      	ldrh	r3, [r7, #4]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 80094c0:	88ba      	ldrh	r2, [r7, #4]
 80094c2:	887b      	ldrh	r3, [r7, #2]
 80094c4:	4413      	add	r3, r2
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	88fa      	ldrh	r2, [r7, #6]
 80094ce:	88b9      	ldrh	r1, [r7, #4]
 80094d0:	88f8      	ldrh	r0, [r7, #6]
 80094d2:	f7ff fb7b 	bl	8008bcc <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 80094d6:	887c      	ldrh	r4, [r7, #2]
 80094d8:	883a      	ldrh	r2, [r7, #0]
 80094da:	88b9      	ldrh	r1, [r7, #4]
 80094dc:	88f8      	ldrh	r0, [r7, #6]
 80094de:	2303      	movs	r3, #3
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	4623      	mov	r3, r4
 80094e4:	f7ff fd48 	bl	8008f78 <ILI9341_Draw_colour_Burst>
 80094e8:	e000      	b.n	80094ec <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80094ea:	bf00      	nop
}
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd90      	pop	{r4, r7, pc}
 80094f2:	bf00      	nop
 80094f4:	2000001e 	.word	0x2000001e
 80094f8:	2000001c 	.word	0x2000001c

080094fc <__errno>:
 80094fc:	4b01      	ldr	r3, [pc, #4]	; (8009504 <__errno+0x8>)
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000b64 	.word	0x20000b64

08009508 <__libc_init_array>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	4e0d      	ldr	r6, [pc, #52]	; (8009540 <__libc_init_array+0x38>)
 800950c:	4c0d      	ldr	r4, [pc, #52]	; (8009544 <__libc_init_array+0x3c>)
 800950e:	1ba4      	subs	r4, r4, r6
 8009510:	10a4      	asrs	r4, r4, #2
 8009512:	2500      	movs	r5, #0
 8009514:	42a5      	cmp	r5, r4
 8009516:	d109      	bne.n	800952c <__libc_init_array+0x24>
 8009518:	4e0b      	ldr	r6, [pc, #44]	; (8009548 <__libc_init_array+0x40>)
 800951a:	4c0c      	ldr	r4, [pc, #48]	; (800954c <__libc_init_array+0x44>)
 800951c:	f000 fff8 	bl	800a510 <_init>
 8009520:	1ba4      	subs	r4, r4, r6
 8009522:	10a4      	asrs	r4, r4, #2
 8009524:	2500      	movs	r5, #0
 8009526:	42a5      	cmp	r5, r4
 8009528:	d105      	bne.n	8009536 <__libc_init_array+0x2e>
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009530:	4798      	blx	r3
 8009532:	3501      	adds	r5, #1
 8009534:	e7ee      	b.n	8009514 <__libc_init_array+0xc>
 8009536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800953a:	4798      	blx	r3
 800953c:	3501      	adds	r5, #1
 800953e:	e7f2      	b.n	8009526 <__libc_init_array+0x1e>
 8009540:	0800aa9c 	.word	0x0800aa9c
 8009544:	0800aa9c 	.word	0x0800aa9c
 8009548:	0800aa9c 	.word	0x0800aa9c
 800954c:	0800aaa0 	.word	0x0800aaa0

08009550 <memset>:
 8009550:	4402      	add	r2, r0
 8009552:	4603      	mov	r3, r0
 8009554:	4293      	cmp	r3, r2
 8009556:	d100      	bne.n	800955a <memset+0xa>
 8009558:	4770      	bx	lr
 800955a:	f803 1b01 	strb.w	r1, [r3], #1
 800955e:	e7f9      	b.n	8009554 <memset+0x4>

08009560 <_puts_r>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	460e      	mov	r6, r1
 8009564:	4605      	mov	r5, r0
 8009566:	b118      	cbz	r0, 8009570 <_puts_r+0x10>
 8009568:	6983      	ldr	r3, [r0, #24]
 800956a:	b90b      	cbnz	r3, 8009570 <_puts_r+0x10>
 800956c:	f000 fa50 	bl	8009a10 <__sinit>
 8009570:	69ab      	ldr	r3, [r5, #24]
 8009572:	68ac      	ldr	r4, [r5, #8]
 8009574:	b913      	cbnz	r3, 800957c <_puts_r+0x1c>
 8009576:	4628      	mov	r0, r5
 8009578:	f000 fa4a 	bl	8009a10 <__sinit>
 800957c:	4b23      	ldr	r3, [pc, #140]	; (800960c <_puts_r+0xac>)
 800957e:	429c      	cmp	r4, r3
 8009580:	d117      	bne.n	80095b2 <_puts_r+0x52>
 8009582:	686c      	ldr	r4, [r5, #4]
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	071b      	lsls	r3, r3, #28
 8009588:	d51d      	bpl.n	80095c6 <_puts_r+0x66>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	b1db      	cbz	r3, 80095c6 <_puts_r+0x66>
 800958e:	3e01      	subs	r6, #1
 8009590:	68a3      	ldr	r3, [r4, #8]
 8009592:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009596:	3b01      	subs	r3, #1
 8009598:	60a3      	str	r3, [r4, #8]
 800959a:	b9e9      	cbnz	r1, 80095d8 <_puts_r+0x78>
 800959c:	2b00      	cmp	r3, #0
 800959e:	da2e      	bge.n	80095fe <_puts_r+0x9e>
 80095a0:	4622      	mov	r2, r4
 80095a2:	210a      	movs	r1, #10
 80095a4:	4628      	mov	r0, r5
 80095a6:	f000 f883 	bl	80096b0 <__swbuf_r>
 80095aa:	3001      	adds	r0, #1
 80095ac:	d011      	beq.n	80095d2 <_puts_r+0x72>
 80095ae:	200a      	movs	r0, #10
 80095b0:	e011      	b.n	80095d6 <_puts_r+0x76>
 80095b2:	4b17      	ldr	r3, [pc, #92]	; (8009610 <_puts_r+0xb0>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	d101      	bne.n	80095bc <_puts_r+0x5c>
 80095b8:	68ac      	ldr	r4, [r5, #8]
 80095ba:	e7e3      	b.n	8009584 <_puts_r+0x24>
 80095bc:	4b15      	ldr	r3, [pc, #84]	; (8009614 <_puts_r+0xb4>)
 80095be:	429c      	cmp	r4, r3
 80095c0:	bf08      	it	eq
 80095c2:	68ec      	ldreq	r4, [r5, #12]
 80095c4:	e7de      	b.n	8009584 <_puts_r+0x24>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4628      	mov	r0, r5
 80095ca:	f000 f8c3 	bl	8009754 <__swsetup_r>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d0dd      	beq.n	800958e <_puts_r+0x2e>
 80095d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da04      	bge.n	80095e6 <_puts_r+0x86>
 80095dc:	69a2      	ldr	r2, [r4, #24]
 80095de:	429a      	cmp	r2, r3
 80095e0:	dc06      	bgt.n	80095f0 <_puts_r+0x90>
 80095e2:	290a      	cmp	r1, #10
 80095e4:	d004      	beq.n	80095f0 <_puts_r+0x90>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	6022      	str	r2, [r4, #0]
 80095ec:	7019      	strb	r1, [r3, #0]
 80095ee:	e7cf      	b.n	8009590 <_puts_r+0x30>
 80095f0:	4622      	mov	r2, r4
 80095f2:	4628      	mov	r0, r5
 80095f4:	f000 f85c 	bl	80096b0 <__swbuf_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	d1c9      	bne.n	8009590 <_puts_r+0x30>
 80095fc:	e7e9      	b.n	80095d2 <_puts_r+0x72>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	200a      	movs	r0, #10
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	6022      	str	r2, [r4, #0]
 8009606:	7018      	strb	r0, [r3, #0]
 8009608:	e7e5      	b.n	80095d6 <_puts_r+0x76>
 800960a:	bf00      	nop
 800960c:	0800aa28 	.word	0x0800aa28
 8009610:	0800aa48 	.word	0x0800aa48
 8009614:	0800aa08 	.word	0x0800aa08

08009618 <puts>:
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <puts+0xc>)
 800961a:	4601      	mov	r1, r0
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	f7ff bf9f 	b.w	8009560 <_puts_r>
 8009622:	bf00      	nop
 8009624:	20000b64 	.word	0x20000b64

08009628 <sniprintf>:
 8009628:	b40c      	push	{r2, r3}
 800962a:	b530      	push	{r4, r5, lr}
 800962c:	4b17      	ldr	r3, [pc, #92]	; (800968c <sniprintf+0x64>)
 800962e:	1e0c      	subs	r4, r1, #0
 8009630:	b09d      	sub	sp, #116	; 0x74
 8009632:	681d      	ldr	r5, [r3, #0]
 8009634:	da08      	bge.n	8009648 <sniprintf+0x20>
 8009636:	238b      	movs	r3, #139	; 0x8b
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800963e:	b01d      	add	sp, #116	; 0x74
 8009640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009644:	b002      	add	sp, #8
 8009646:	4770      	bx	lr
 8009648:	f44f 7302 	mov.w	r3, #520	; 0x208
 800964c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009650:	bf14      	ite	ne
 8009652:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009656:	4623      	moveq	r3, r4
 8009658:	9304      	str	r3, [sp, #16]
 800965a:	9307      	str	r3, [sp, #28]
 800965c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009660:	9002      	str	r0, [sp, #8]
 8009662:	9006      	str	r0, [sp, #24]
 8009664:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009668:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800966a:	ab21      	add	r3, sp, #132	; 0x84
 800966c:	a902      	add	r1, sp, #8
 800966e:	4628      	mov	r0, r5
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	f000 fbbd 	bl	8009df0 <_svfiprintf_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	bfbc      	itt	lt
 800967a:	238b      	movlt	r3, #139	; 0x8b
 800967c:	602b      	strlt	r3, [r5, #0]
 800967e:	2c00      	cmp	r4, #0
 8009680:	d0dd      	beq.n	800963e <sniprintf+0x16>
 8009682:	9b02      	ldr	r3, [sp, #8]
 8009684:	2200      	movs	r2, #0
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	e7d9      	b.n	800963e <sniprintf+0x16>
 800968a:	bf00      	nop
 800968c:	20000b64 	.word	0x20000b64

08009690 <strcat>:
 8009690:	b510      	push	{r4, lr}
 8009692:	4603      	mov	r3, r0
 8009694:	781a      	ldrb	r2, [r3, #0]
 8009696:	1c5c      	adds	r4, r3, #1
 8009698:	b93a      	cbnz	r2, 80096aa <strcat+0x1a>
 800969a:	3b01      	subs	r3, #1
 800969c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096a4:	2a00      	cmp	r2, #0
 80096a6:	d1f9      	bne.n	800969c <strcat+0xc>
 80096a8:	bd10      	pop	{r4, pc}
 80096aa:	4623      	mov	r3, r4
 80096ac:	e7f2      	b.n	8009694 <strcat+0x4>
	...

080096b0 <__swbuf_r>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	460e      	mov	r6, r1
 80096b4:	4614      	mov	r4, r2
 80096b6:	4605      	mov	r5, r0
 80096b8:	b118      	cbz	r0, 80096c2 <__swbuf_r+0x12>
 80096ba:	6983      	ldr	r3, [r0, #24]
 80096bc:	b90b      	cbnz	r3, 80096c2 <__swbuf_r+0x12>
 80096be:	f000 f9a7 	bl	8009a10 <__sinit>
 80096c2:	4b21      	ldr	r3, [pc, #132]	; (8009748 <__swbuf_r+0x98>)
 80096c4:	429c      	cmp	r4, r3
 80096c6:	d12a      	bne.n	800971e <__swbuf_r+0x6e>
 80096c8:	686c      	ldr	r4, [r5, #4]
 80096ca:	69a3      	ldr	r3, [r4, #24]
 80096cc:	60a3      	str	r3, [r4, #8]
 80096ce:	89a3      	ldrh	r3, [r4, #12]
 80096d0:	071a      	lsls	r2, r3, #28
 80096d2:	d52e      	bpl.n	8009732 <__swbuf_r+0x82>
 80096d4:	6923      	ldr	r3, [r4, #16]
 80096d6:	b363      	cbz	r3, 8009732 <__swbuf_r+0x82>
 80096d8:	6923      	ldr	r3, [r4, #16]
 80096da:	6820      	ldr	r0, [r4, #0]
 80096dc:	1ac0      	subs	r0, r0, r3
 80096de:	6963      	ldr	r3, [r4, #20]
 80096e0:	b2f6      	uxtb	r6, r6
 80096e2:	4283      	cmp	r3, r0
 80096e4:	4637      	mov	r7, r6
 80096e6:	dc04      	bgt.n	80096f2 <__swbuf_r+0x42>
 80096e8:	4621      	mov	r1, r4
 80096ea:	4628      	mov	r0, r5
 80096ec:	f000 f926 	bl	800993c <_fflush_r>
 80096f0:	bb28      	cbnz	r0, 800973e <__swbuf_r+0x8e>
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	60a3      	str	r3, [r4, #8]
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	6022      	str	r2, [r4, #0]
 80096fe:	701e      	strb	r6, [r3, #0]
 8009700:	6963      	ldr	r3, [r4, #20]
 8009702:	3001      	adds	r0, #1
 8009704:	4283      	cmp	r3, r0
 8009706:	d004      	beq.n	8009712 <__swbuf_r+0x62>
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	07db      	lsls	r3, r3, #31
 800970c:	d519      	bpl.n	8009742 <__swbuf_r+0x92>
 800970e:	2e0a      	cmp	r6, #10
 8009710:	d117      	bne.n	8009742 <__swbuf_r+0x92>
 8009712:	4621      	mov	r1, r4
 8009714:	4628      	mov	r0, r5
 8009716:	f000 f911 	bl	800993c <_fflush_r>
 800971a:	b190      	cbz	r0, 8009742 <__swbuf_r+0x92>
 800971c:	e00f      	b.n	800973e <__swbuf_r+0x8e>
 800971e:	4b0b      	ldr	r3, [pc, #44]	; (800974c <__swbuf_r+0x9c>)
 8009720:	429c      	cmp	r4, r3
 8009722:	d101      	bne.n	8009728 <__swbuf_r+0x78>
 8009724:	68ac      	ldr	r4, [r5, #8]
 8009726:	e7d0      	b.n	80096ca <__swbuf_r+0x1a>
 8009728:	4b09      	ldr	r3, [pc, #36]	; (8009750 <__swbuf_r+0xa0>)
 800972a:	429c      	cmp	r4, r3
 800972c:	bf08      	it	eq
 800972e:	68ec      	ldreq	r4, [r5, #12]
 8009730:	e7cb      	b.n	80096ca <__swbuf_r+0x1a>
 8009732:	4621      	mov	r1, r4
 8009734:	4628      	mov	r0, r5
 8009736:	f000 f80d 	bl	8009754 <__swsetup_r>
 800973a:	2800      	cmp	r0, #0
 800973c:	d0cc      	beq.n	80096d8 <__swbuf_r+0x28>
 800973e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009742:	4638      	mov	r0, r7
 8009744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009746:	bf00      	nop
 8009748:	0800aa28 	.word	0x0800aa28
 800974c:	0800aa48 	.word	0x0800aa48
 8009750:	0800aa08 	.word	0x0800aa08

08009754 <__swsetup_r>:
 8009754:	4b32      	ldr	r3, [pc, #200]	; (8009820 <__swsetup_r+0xcc>)
 8009756:	b570      	push	{r4, r5, r6, lr}
 8009758:	681d      	ldr	r5, [r3, #0]
 800975a:	4606      	mov	r6, r0
 800975c:	460c      	mov	r4, r1
 800975e:	b125      	cbz	r5, 800976a <__swsetup_r+0x16>
 8009760:	69ab      	ldr	r3, [r5, #24]
 8009762:	b913      	cbnz	r3, 800976a <__swsetup_r+0x16>
 8009764:	4628      	mov	r0, r5
 8009766:	f000 f953 	bl	8009a10 <__sinit>
 800976a:	4b2e      	ldr	r3, [pc, #184]	; (8009824 <__swsetup_r+0xd0>)
 800976c:	429c      	cmp	r4, r3
 800976e:	d10f      	bne.n	8009790 <__swsetup_r+0x3c>
 8009770:	686c      	ldr	r4, [r5, #4]
 8009772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009776:	b29a      	uxth	r2, r3
 8009778:	0715      	lsls	r5, r2, #28
 800977a:	d42c      	bmi.n	80097d6 <__swsetup_r+0x82>
 800977c:	06d0      	lsls	r0, r2, #27
 800977e:	d411      	bmi.n	80097a4 <__swsetup_r+0x50>
 8009780:	2209      	movs	r2, #9
 8009782:	6032      	str	r2, [r6, #0]
 8009784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009788:	81a3      	strh	r3, [r4, #12]
 800978a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800978e:	e03e      	b.n	800980e <__swsetup_r+0xba>
 8009790:	4b25      	ldr	r3, [pc, #148]	; (8009828 <__swsetup_r+0xd4>)
 8009792:	429c      	cmp	r4, r3
 8009794:	d101      	bne.n	800979a <__swsetup_r+0x46>
 8009796:	68ac      	ldr	r4, [r5, #8]
 8009798:	e7eb      	b.n	8009772 <__swsetup_r+0x1e>
 800979a:	4b24      	ldr	r3, [pc, #144]	; (800982c <__swsetup_r+0xd8>)
 800979c:	429c      	cmp	r4, r3
 800979e:	bf08      	it	eq
 80097a0:	68ec      	ldreq	r4, [r5, #12]
 80097a2:	e7e6      	b.n	8009772 <__swsetup_r+0x1e>
 80097a4:	0751      	lsls	r1, r2, #29
 80097a6:	d512      	bpl.n	80097ce <__swsetup_r+0x7a>
 80097a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097aa:	b141      	cbz	r1, 80097be <__swsetup_r+0x6a>
 80097ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097b0:	4299      	cmp	r1, r3
 80097b2:	d002      	beq.n	80097ba <__swsetup_r+0x66>
 80097b4:	4630      	mov	r0, r6
 80097b6:	f000 fa19 	bl	8009bec <_free_r>
 80097ba:	2300      	movs	r3, #0
 80097bc:	6363      	str	r3, [r4, #52]	; 0x34
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097c4:	81a3      	strh	r3, [r4, #12]
 80097c6:	2300      	movs	r3, #0
 80097c8:	6063      	str	r3, [r4, #4]
 80097ca:	6923      	ldr	r3, [r4, #16]
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f043 0308 	orr.w	r3, r3, #8
 80097d4:	81a3      	strh	r3, [r4, #12]
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	b94b      	cbnz	r3, 80097ee <__swsetup_r+0x9a>
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e4:	d003      	beq.n	80097ee <__swsetup_r+0x9a>
 80097e6:	4621      	mov	r1, r4
 80097e8:	4630      	mov	r0, r6
 80097ea:	f000 f9bf 	bl	8009b6c <__smakebuf_r>
 80097ee:	89a2      	ldrh	r2, [r4, #12]
 80097f0:	f012 0301 	ands.w	r3, r2, #1
 80097f4:	d00c      	beq.n	8009810 <__swsetup_r+0xbc>
 80097f6:	2300      	movs	r3, #0
 80097f8:	60a3      	str	r3, [r4, #8]
 80097fa:	6963      	ldr	r3, [r4, #20]
 80097fc:	425b      	negs	r3, r3
 80097fe:	61a3      	str	r3, [r4, #24]
 8009800:	6923      	ldr	r3, [r4, #16]
 8009802:	b953      	cbnz	r3, 800981a <__swsetup_r+0xc6>
 8009804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009808:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800980c:	d1ba      	bne.n	8009784 <__swsetup_r+0x30>
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	0792      	lsls	r2, r2, #30
 8009812:	bf58      	it	pl
 8009814:	6963      	ldrpl	r3, [r4, #20]
 8009816:	60a3      	str	r3, [r4, #8]
 8009818:	e7f2      	b.n	8009800 <__swsetup_r+0xac>
 800981a:	2000      	movs	r0, #0
 800981c:	e7f7      	b.n	800980e <__swsetup_r+0xba>
 800981e:	bf00      	nop
 8009820:	20000b64 	.word	0x20000b64
 8009824:	0800aa28 	.word	0x0800aa28
 8009828:	0800aa48 	.word	0x0800aa48
 800982c:	0800aa08 	.word	0x0800aa08

08009830 <__sflush_r>:
 8009830:	898a      	ldrh	r2, [r1, #12]
 8009832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009836:	4605      	mov	r5, r0
 8009838:	0710      	lsls	r0, r2, #28
 800983a:	460c      	mov	r4, r1
 800983c:	d458      	bmi.n	80098f0 <__sflush_r+0xc0>
 800983e:	684b      	ldr	r3, [r1, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	dc05      	bgt.n	8009850 <__sflush_r+0x20>
 8009844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc02      	bgt.n	8009850 <__sflush_r+0x20>
 800984a:	2000      	movs	r0, #0
 800984c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009852:	2e00      	cmp	r6, #0
 8009854:	d0f9      	beq.n	800984a <__sflush_r+0x1a>
 8009856:	2300      	movs	r3, #0
 8009858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800985c:	682f      	ldr	r7, [r5, #0]
 800985e:	6a21      	ldr	r1, [r4, #32]
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	d032      	beq.n	80098ca <__sflush_r+0x9a>
 8009864:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	075a      	lsls	r2, r3, #29
 800986a:	d505      	bpl.n	8009878 <__sflush_r+0x48>
 800986c:	6863      	ldr	r3, [r4, #4]
 800986e:	1ac0      	subs	r0, r0, r3
 8009870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009872:	b10b      	cbz	r3, 8009878 <__sflush_r+0x48>
 8009874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009876:	1ac0      	subs	r0, r0, r3
 8009878:	2300      	movs	r3, #0
 800987a:	4602      	mov	r2, r0
 800987c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800987e:	6a21      	ldr	r1, [r4, #32]
 8009880:	4628      	mov	r0, r5
 8009882:	47b0      	blx	r6
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	d106      	bne.n	8009898 <__sflush_r+0x68>
 800988a:	6829      	ldr	r1, [r5, #0]
 800988c:	291d      	cmp	r1, #29
 800988e:	d848      	bhi.n	8009922 <__sflush_r+0xf2>
 8009890:	4a29      	ldr	r2, [pc, #164]	; (8009938 <__sflush_r+0x108>)
 8009892:	40ca      	lsrs	r2, r1
 8009894:	07d6      	lsls	r6, r2, #31
 8009896:	d544      	bpl.n	8009922 <__sflush_r+0xf2>
 8009898:	2200      	movs	r2, #0
 800989a:	6062      	str	r2, [r4, #4]
 800989c:	04d9      	lsls	r1, r3, #19
 800989e:	6922      	ldr	r2, [r4, #16]
 80098a0:	6022      	str	r2, [r4, #0]
 80098a2:	d504      	bpl.n	80098ae <__sflush_r+0x7e>
 80098a4:	1c42      	adds	r2, r0, #1
 80098a6:	d101      	bne.n	80098ac <__sflush_r+0x7c>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	b903      	cbnz	r3, 80098ae <__sflush_r+0x7e>
 80098ac:	6560      	str	r0, [r4, #84]	; 0x54
 80098ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098b0:	602f      	str	r7, [r5, #0]
 80098b2:	2900      	cmp	r1, #0
 80098b4:	d0c9      	beq.n	800984a <__sflush_r+0x1a>
 80098b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098ba:	4299      	cmp	r1, r3
 80098bc:	d002      	beq.n	80098c4 <__sflush_r+0x94>
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f994 	bl	8009bec <_free_r>
 80098c4:	2000      	movs	r0, #0
 80098c6:	6360      	str	r0, [r4, #52]	; 0x34
 80098c8:	e7c0      	b.n	800984c <__sflush_r+0x1c>
 80098ca:	2301      	movs	r3, #1
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b0      	blx	r6
 80098d0:	1c41      	adds	r1, r0, #1
 80098d2:	d1c8      	bne.n	8009866 <__sflush_r+0x36>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0c5      	beq.n	8009866 <__sflush_r+0x36>
 80098da:	2b1d      	cmp	r3, #29
 80098dc:	d001      	beq.n	80098e2 <__sflush_r+0xb2>
 80098de:	2b16      	cmp	r3, #22
 80098e0:	d101      	bne.n	80098e6 <__sflush_r+0xb6>
 80098e2:	602f      	str	r7, [r5, #0]
 80098e4:	e7b1      	b.n	800984a <__sflush_r+0x1a>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	e7ad      	b.n	800984c <__sflush_r+0x1c>
 80098f0:	690f      	ldr	r7, [r1, #16]
 80098f2:	2f00      	cmp	r7, #0
 80098f4:	d0a9      	beq.n	800984a <__sflush_r+0x1a>
 80098f6:	0793      	lsls	r3, r2, #30
 80098f8:	680e      	ldr	r6, [r1, #0]
 80098fa:	bf08      	it	eq
 80098fc:	694b      	ldreq	r3, [r1, #20]
 80098fe:	600f      	str	r7, [r1, #0]
 8009900:	bf18      	it	ne
 8009902:	2300      	movne	r3, #0
 8009904:	eba6 0807 	sub.w	r8, r6, r7
 8009908:	608b      	str	r3, [r1, #8]
 800990a:	f1b8 0f00 	cmp.w	r8, #0
 800990e:	dd9c      	ble.n	800984a <__sflush_r+0x1a>
 8009910:	4643      	mov	r3, r8
 8009912:	463a      	mov	r2, r7
 8009914:	6a21      	ldr	r1, [r4, #32]
 8009916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009918:	4628      	mov	r0, r5
 800991a:	47b0      	blx	r6
 800991c:	2800      	cmp	r0, #0
 800991e:	dc06      	bgt.n	800992e <__sflush_r+0xfe>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009926:	81a3      	strh	r3, [r4, #12]
 8009928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800992c:	e78e      	b.n	800984c <__sflush_r+0x1c>
 800992e:	4407      	add	r7, r0
 8009930:	eba8 0800 	sub.w	r8, r8, r0
 8009934:	e7e9      	b.n	800990a <__sflush_r+0xda>
 8009936:	bf00      	nop
 8009938:	20400001 	.word	0x20400001

0800993c <_fflush_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	690b      	ldr	r3, [r1, #16]
 8009940:	4605      	mov	r5, r0
 8009942:	460c      	mov	r4, r1
 8009944:	b1db      	cbz	r3, 800997e <_fflush_r+0x42>
 8009946:	b118      	cbz	r0, 8009950 <_fflush_r+0x14>
 8009948:	6983      	ldr	r3, [r0, #24]
 800994a:	b90b      	cbnz	r3, 8009950 <_fflush_r+0x14>
 800994c:	f000 f860 	bl	8009a10 <__sinit>
 8009950:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <_fflush_r+0x48>)
 8009952:	429c      	cmp	r4, r3
 8009954:	d109      	bne.n	800996a <_fflush_r+0x2e>
 8009956:	686c      	ldr	r4, [r5, #4]
 8009958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800995c:	b17b      	cbz	r3, 800997e <_fflush_r+0x42>
 800995e:	4621      	mov	r1, r4
 8009960:	4628      	mov	r0, r5
 8009962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009966:	f7ff bf63 	b.w	8009830 <__sflush_r>
 800996a:	4b07      	ldr	r3, [pc, #28]	; (8009988 <_fflush_r+0x4c>)
 800996c:	429c      	cmp	r4, r3
 800996e:	d101      	bne.n	8009974 <_fflush_r+0x38>
 8009970:	68ac      	ldr	r4, [r5, #8]
 8009972:	e7f1      	b.n	8009958 <_fflush_r+0x1c>
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <_fflush_r+0x50>)
 8009976:	429c      	cmp	r4, r3
 8009978:	bf08      	it	eq
 800997a:	68ec      	ldreq	r4, [r5, #12]
 800997c:	e7ec      	b.n	8009958 <_fflush_r+0x1c>
 800997e:	2000      	movs	r0, #0
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	bf00      	nop
 8009984:	0800aa28 	.word	0x0800aa28
 8009988:	0800aa48 	.word	0x0800aa48
 800998c:	0800aa08 	.word	0x0800aa08

08009990 <std>:
 8009990:	2300      	movs	r3, #0
 8009992:	b510      	push	{r4, lr}
 8009994:	4604      	mov	r4, r0
 8009996:	e9c0 3300 	strd	r3, r3, [r0]
 800999a:	6083      	str	r3, [r0, #8]
 800999c:	8181      	strh	r1, [r0, #12]
 800999e:	6643      	str	r3, [r0, #100]	; 0x64
 80099a0:	81c2      	strh	r2, [r0, #14]
 80099a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099a6:	6183      	str	r3, [r0, #24]
 80099a8:	4619      	mov	r1, r3
 80099aa:	2208      	movs	r2, #8
 80099ac:	305c      	adds	r0, #92	; 0x5c
 80099ae:	f7ff fdcf 	bl	8009550 <memset>
 80099b2:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <std+0x38>)
 80099b4:	6263      	str	r3, [r4, #36]	; 0x24
 80099b6:	4b05      	ldr	r3, [pc, #20]	; (80099cc <std+0x3c>)
 80099b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <std+0x40>)
 80099bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099be:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <std+0x44>)
 80099c0:	6224      	str	r4, [r4, #32]
 80099c2:	6323      	str	r3, [r4, #48]	; 0x30
 80099c4:	bd10      	pop	{r4, pc}
 80099c6:	bf00      	nop
 80099c8:	0800a311 	.word	0x0800a311
 80099cc:	0800a333 	.word	0x0800a333
 80099d0:	0800a36b 	.word	0x0800a36b
 80099d4:	0800a38f 	.word	0x0800a38f

080099d8 <_cleanup_r>:
 80099d8:	4901      	ldr	r1, [pc, #4]	; (80099e0 <_cleanup_r+0x8>)
 80099da:	f000 b885 	b.w	8009ae8 <_fwalk_reent>
 80099de:	bf00      	nop
 80099e0:	0800993d 	.word	0x0800993d

080099e4 <__sfmoreglue>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	1e4a      	subs	r2, r1, #1
 80099e8:	2568      	movs	r5, #104	; 0x68
 80099ea:	4355      	muls	r5, r2
 80099ec:	460e      	mov	r6, r1
 80099ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099f2:	f000 f949 	bl	8009c88 <_malloc_r>
 80099f6:	4604      	mov	r4, r0
 80099f8:	b140      	cbz	r0, 8009a0c <__sfmoreglue+0x28>
 80099fa:	2100      	movs	r1, #0
 80099fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009a00:	300c      	adds	r0, #12
 8009a02:	60a0      	str	r0, [r4, #8]
 8009a04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a08:	f7ff fda2 	bl	8009550 <memset>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}

08009a10 <__sinit>:
 8009a10:	6983      	ldr	r3, [r0, #24]
 8009a12:	b510      	push	{r4, lr}
 8009a14:	4604      	mov	r4, r0
 8009a16:	bb33      	cbnz	r3, 8009a66 <__sinit+0x56>
 8009a18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009a1c:	6503      	str	r3, [r0, #80]	; 0x50
 8009a1e:	4b12      	ldr	r3, [pc, #72]	; (8009a68 <__sinit+0x58>)
 8009a20:	4a12      	ldr	r2, [pc, #72]	; (8009a6c <__sinit+0x5c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6282      	str	r2, [r0, #40]	; 0x28
 8009a26:	4298      	cmp	r0, r3
 8009a28:	bf04      	itt	eq
 8009a2a:	2301      	moveq	r3, #1
 8009a2c:	6183      	streq	r3, [r0, #24]
 8009a2e:	f000 f81f 	bl	8009a70 <__sfp>
 8009a32:	6060      	str	r0, [r4, #4]
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 f81b 	bl	8009a70 <__sfp>
 8009a3a:	60a0      	str	r0, [r4, #8]
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 f817 	bl	8009a70 <__sfp>
 8009a42:	2200      	movs	r2, #0
 8009a44:	60e0      	str	r0, [r4, #12]
 8009a46:	2104      	movs	r1, #4
 8009a48:	6860      	ldr	r0, [r4, #4]
 8009a4a:	f7ff ffa1 	bl	8009990 <std>
 8009a4e:	2201      	movs	r2, #1
 8009a50:	2109      	movs	r1, #9
 8009a52:	68a0      	ldr	r0, [r4, #8]
 8009a54:	f7ff ff9c 	bl	8009990 <std>
 8009a58:	2202      	movs	r2, #2
 8009a5a:	2112      	movs	r1, #18
 8009a5c:	68e0      	ldr	r0, [r4, #12]
 8009a5e:	f7ff ff97 	bl	8009990 <std>
 8009a62:	2301      	movs	r3, #1
 8009a64:	61a3      	str	r3, [r4, #24]
 8009a66:	bd10      	pop	{r4, pc}
 8009a68:	0800aa04 	.word	0x0800aa04
 8009a6c:	080099d9 	.word	0x080099d9

08009a70 <__sfp>:
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	4b1b      	ldr	r3, [pc, #108]	; (8009ae0 <__sfp+0x70>)
 8009a74:	681e      	ldr	r6, [r3, #0]
 8009a76:	69b3      	ldr	r3, [r6, #24]
 8009a78:	4607      	mov	r7, r0
 8009a7a:	b913      	cbnz	r3, 8009a82 <__sfp+0x12>
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7ff ffc7 	bl	8009a10 <__sinit>
 8009a82:	3648      	adds	r6, #72	; 0x48
 8009a84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	d503      	bpl.n	8009a94 <__sfp+0x24>
 8009a8c:	6833      	ldr	r3, [r6, #0]
 8009a8e:	b133      	cbz	r3, 8009a9e <__sfp+0x2e>
 8009a90:	6836      	ldr	r6, [r6, #0]
 8009a92:	e7f7      	b.n	8009a84 <__sfp+0x14>
 8009a94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a98:	b16d      	cbz	r5, 8009ab6 <__sfp+0x46>
 8009a9a:	3468      	adds	r4, #104	; 0x68
 8009a9c:	e7f4      	b.n	8009a88 <__sfp+0x18>
 8009a9e:	2104      	movs	r1, #4
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	f7ff ff9f 	bl	80099e4 <__sfmoreglue>
 8009aa6:	6030      	str	r0, [r6, #0]
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d1f1      	bne.n	8009a90 <__sfp+0x20>
 8009aac:	230c      	movs	r3, #12
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab6:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <__sfp+0x74>)
 8009ab8:	6665      	str	r5, [r4, #100]	; 0x64
 8009aba:	e9c4 5500 	strd	r5, r5, [r4]
 8009abe:	60a5      	str	r5, [r4, #8]
 8009ac0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009ac4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009ac8:	2208      	movs	r2, #8
 8009aca:	4629      	mov	r1, r5
 8009acc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ad0:	f7ff fd3e 	bl	8009550 <memset>
 8009ad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009adc:	e7e9      	b.n	8009ab2 <__sfp+0x42>
 8009ade:	bf00      	nop
 8009ae0:	0800aa04 	.word	0x0800aa04
 8009ae4:	ffff0001 	.word	0xffff0001

08009ae8 <_fwalk_reent>:
 8009ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aec:	4680      	mov	r8, r0
 8009aee:	4689      	mov	r9, r1
 8009af0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009af4:	2600      	movs	r6, #0
 8009af6:	b914      	cbnz	r4, 8009afe <_fwalk_reent+0x16>
 8009af8:	4630      	mov	r0, r6
 8009afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009b02:	3f01      	subs	r7, #1
 8009b04:	d501      	bpl.n	8009b0a <_fwalk_reent+0x22>
 8009b06:	6824      	ldr	r4, [r4, #0]
 8009b08:	e7f5      	b.n	8009af6 <_fwalk_reent+0xe>
 8009b0a:	89ab      	ldrh	r3, [r5, #12]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d907      	bls.n	8009b20 <_fwalk_reent+0x38>
 8009b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b14:	3301      	adds	r3, #1
 8009b16:	d003      	beq.n	8009b20 <_fwalk_reent+0x38>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	47c8      	blx	r9
 8009b1e:	4306      	orrs	r6, r0
 8009b20:	3568      	adds	r5, #104	; 0x68
 8009b22:	e7ee      	b.n	8009b02 <_fwalk_reent+0x1a>

08009b24 <__swhatbuf_r>:
 8009b24:	b570      	push	{r4, r5, r6, lr}
 8009b26:	460e      	mov	r6, r1
 8009b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2c:	2900      	cmp	r1, #0
 8009b2e:	b096      	sub	sp, #88	; 0x58
 8009b30:	4614      	mov	r4, r2
 8009b32:	461d      	mov	r5, r3
 8009b34:	da07      	bge.n	8009b46 <__swhatbuf_r+0x22>
 8009b36:	2300      	movs	r3, #0
 8009b38:	602b      	str	r3, [r5, #0]
 8009b3a:	89b3      	ldrh	r3, [r6, #12]
 8009b3c:	061a      	lsls	r2, r3, #24
 8009b3e:	d410      	bmi.n	8009b62 <__swhatbuf_r+0x3e>
 8009b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b44:	e00e      	b.n	8009b64 <__swhatbuf_r+0x40>
 8009b46:	466a      	mov	r2, sp
 8009b48:	f000 fc48 	bl	800a3dc <_fstat_r>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	dbf2      	blt.n	8009b36 <__swhatbuf_r+0x12>
 8009b50:	9a01      	ldr	r2, [sp, #4]
 8009b52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b5a:	425a      	negs	r2, r3
 8009b5c:	415a      	adcs	r2, r3
 8009b5e:	602a      	str	r2, [r5, #0]
 8009b60:	e7ee      	b.n	8009b40 <__swhatbuf_r+0x1c>
 8009b62:	2340      	movs	r3, #64	; 0x40
 8009b64:	2000      	movs	r0, #0
 8009b66:	6023      	str	r3, [r4, #0]
 8009b68:	b016      	add	sp, #88	; 0x58
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}

08009b6c <__smakebuf_r>:
 8009b6c:	898b      	ldrh	r3, [r1, #12]
 8009b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b70:	079d      	lsls	r5, r3, #30
 8009b72:	4606      	mov	r6, r0
 8009b74:	460c      	mov	r4, r1
 8009b76:	d507      	bpl.n	8009b88 <__smakebuf_r+0x1c>
 8009b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	2301      	movs	r3, #1
 8009b82:	6163      	str	r3, [r4, #20]
 8009b84:	b002      	add	sp, #8
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	ab01      	add	r3, sp, #4
 8009b8a:	466a      	mov	r2, sp
 8009b8c:	f7ff ffca 	bl	8009b24 <__swhatbuf_r>
 8009b90:	9900      	ldr	r1, [sp, #0]
 8009b92:	4605      	mov	r5, r0
 8009b94:	4630      	mov	r0, r6
 8009b96:	f000 f877 	bl	8009c88 <_malloc_r>
 8009b9a:	b948      	cbnz	r0, 8009bb0 <__smakebuf_r+0x44>
 8009b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba0:	059a      	lsls	r2, r3, #22
 8009ba2:	d4ef      	bmi.n	8009b84 <__smakebuf_r+0x18>
 8009ba4:	f023 0303 	bic.w	r3, r3, #3
 8009ba8:	f043 0302 	orr.w	r3, r3, #2
 8009bac:	81a3      	strh	r3, [r4, #12]
 8009bae:	e7e3      	b.n	8009b78 <__smakebuf_r+0xc>
 8009bb0:	4b0d      	ldr	r3, [pc, #52]	; (8009be8 <__smakebuf_r+0x7c>)
 8009bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	6020      	str	r0, [r4, #0]
 8009bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	9b00      	ldr	r3, [sp, #0]
 8009bc0:	6163      	str	r3, [r4, #20]
 8009bc2:	9b01      	ldr	r3, [sp, #4]
 8009bc4:	6120      	str	r0, [r4, #16]
 8009bc6:	b15b      	cbz	r3, 8009be0 <__smakebuf_r+0x74>
 8009bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f000 fc17 	bl	800a400 <_isatty_r>
 8009bd2:	b128      	cbz	r0, 8009be0 <__smakebuf_r+0x74>
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	f023 0303 	bic.w	r3, r3, #3
 8009bda:	f043 0301 	orr.w	r3, r3, #1
 8009bde:	81a3      	strh	r3, [r4, #12]
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	431d      	orrs	r5, r3
 8009be4:	81a5      	strh	r5, [r4, #12]
 8009be6:	e7cd      	b.n	8009b84 <__smakebuf_r+0x18>
 8009be8:	080099d9 	.word	0x080099d9

08009bec <_free_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4605      	mov	r5, r0
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	d045      	beq.n	8009c80 <_free_r+0x94>
 8009bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf8:	1f0c      	subs	r4, r1, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bfb8      	it	lt
 8009bfe:	18e4      	addlt	r4, r4, r3
 8009c00:	f000 fc44 	bl	800a48c <__malloc_lock>
 8009c04:	4a1f      	ldr	r2, [pc, #124]	; (8009c84 <_free_r+0x98>)
 8009c06:	6813      	ldr	r3, [r2, #0]
 8009c08:	4610      	mov	r0, r2
 8009c0a:	b933      	cbnz	r3, 8009c1a <_free_r+0x2e>
 8009c0c:	6063      	str	r3, [r4, #4]
 8009c0e:	6014      	str	r4, [r2, #0]
 8009c10:	4628      	mov	r0, r5
 8009c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c16:	f000 bc3a 	b.w	800a48e <__malloc_unlock>
 8009c1a:	42a3      	cmp	r3, r4
 8009c1c:	d90c      	bls.n	8009c38 <_free_r+0x4c>
 8009c1e:	6821      	ldr	r1, [r4, #0]
 8009c20:	1862      	adds	r2, r4, r1
 8009c22:	4293      	cmp	r3, r2
 8009c24:	bf04      	itt	eq
 8009c26:	681a      	ldreq	r2, [r3, #0]
 8009c28:	685b      	ldreq	r3, [r3, #4]
 8009c2a:	6063      	str	r3, [r4, #4]
 8009c2c:	bf04      	itt	eq
 8009c2e:	1852      	addeq	r2, r2, r1
 8009c30:	6022      	streq	r2, [r4, #0]
 8009c32:	6004      	str	r4, [r0, #0]
 8009c34:	e7ec      	b.n	8009c10 <_free_r+0x24>
 8009c36:	4613      	mov	r3, r2
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	b10a      	cbz	r2, 8009c40 <_free_r+0x54>
 8009c3c:	42a2      	cmp	r2, r4
 8009c3e:	d9fa      	bls.n	8009c36 <_free_r+0x4a>
 8009c40:	6819      	ldr	r1, [r3, #0]
 8009c42:	1858      	adds	r0, r3, r1
 8009c44:	42a0      	cmp	r0, r4
 8009c46:	d10b      	bne.n	8009c60 <_free_r+0x74>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	4401      	add	r1, r0
 8009c4c:	1858      	adds	r0, r3, r1
 8009c4e:	4282      	cmp	r2, r0
 8009c50:	6019      	str	r1, [r3, #0]
 8009c52:	d1dd      	bne.n	8009c10 <_free_r+0x24>
 8009c54:	6810      	ldr	r0, [r2, #0]
 8009c56:	6852      	ldr	r2, [r2, #4]
 8009c58:	605a      	str	r2, [r3, #4]
 8009c5a:	4401      	add	r1, r0
 8009c5c:	6019      	str	r1, [r3, #0]
 8009c5e:	e7d7      	b.n	8009c10 <_free_r+0x24>
 8009c60:	d902      	bls.n	8009c68 <_free_r+0x7c>
 8009c62:	230c      	movs	r3, #12
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	e7d3      	b.n	8009c10 <_free_r+0x24>
 8009c68:	6820      	ldr	r0, [r4, #0]
 8009c6a:	1821      	adds	r1, r4, r0
 8009c6c:	428a      	cmp	r2, r1
 8009c6e:	bf04      	itt	eq
 8009c70:	6811      	ldreq	r1, [r2, #0]
 8009c72:	6852      	ldreq	r2, [r2, #4]
 8009c74:	6062      	str	r2, [r4, #4]
 8009c76:	bf04      	itt	eq
 8009c78:	1809      	addeq	r1, r1, r0
 8009c7a:	6021      	streq	r1, [r4, #0]
 8009c7c:	605c      	str	r4, [r3, #4]
 8009c7e:	e7c7      	b.n	8009c10 <_free_r+0x24>
 8009c80:	bd38      	pop	{r3, r4, r5, pc}
 8009c82:	bf00      	nop
 8009c84:	20000bfc 	.word	0x20000bfc

08009c88 <_malloc_r>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	1ccd      	adds	r5, r1, #3
 8009c8c:	f025 0503 	bic.w	r5, r5, #3
 8009c90:	3508      	adds	r5, #8
 8009c92:	2d0c      	cmp	r5, #12
 8009c94:	bf38      	it	cc
 8009c96:	250c      	movcc	r5, #12
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	db01      	blt.n	8009ca2 <_malloc_r+0x1a>
 8009c9e:	42a9      	cmp	r1, r5
 8009ca0:	d903      	bls.n	8009caa <_malloc_r+0x22>
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	6033      	str	r3, [r6, #0]
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	bd70      	pop	{r4, r5, r6, pc}
 8009caa:	f000 fbef 	bl	800a48c <__malloc_lock>
 8009cae:	4a21      	ldr	r2, [pc, #132]	; (8009d34 <_malloc_r+0xac>)
 8009cb0:	6814      	ldr	r4, [r2, #0]
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	b991      	cbnz	r1, 8009cdc <_malloc_r+0x54>
 8009cb6:	4c20      	ldr	r4, [pc, #128]	; (8009d38 <_malloc_r+0xb0>)
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	b91b      	cbnz	r3, 8009cc4 <_malloc_r+0x3c>
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f000 fb17 	bl	800a2f0 <_sbrk_r>
 8009cc2:	6020      	str	r0, [r4, #0]
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f000 fb12 	bl	800a2f0 <_sbrk_r>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d124      	bne.n	8009d1a <_malloc_r+0x92>
 8009cd0:	230c      	movs	r3, #12
 8009cd2:	6033      	str	r3, [r6, #0]
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f000 fbda 	bl	800a48e <__malloc_unlock>
 8009cda:	e7e4      	b.n	8009ca6 <_malloc_r+0x1e>
 8009cdc:	680b      	ldr	r3, [r1, #0]
 8009cde:	1b5b      	subs	r3, r3, r5
 8009ce0:	d418      	bmi.n	8009d14 <_malloc_r+0x8c>
 8009ce2:	2b0b      	cmp	r3, #11
 8009ce4:	d90f      	bls.n	8009d06 <_malloc_r+0x7e>
 8009ce6:	600b      	str	r3, [r1, #0]
 8009ce8:	50cd      	str	r5, [r1, r3]
 8009cea:	18cc      	adds	r4, r1, r3
 8009cec:	4630      	mov	r0, r6
 8009cee:	f000 fbce 	bl	800a48e <__malloc_unlock>
 8009cf2:	f104 000b 	add.w	r0, r4, #11
 8009cf6:	1d23      	adds	r3, r4, #4
 8009cf8:	f020 0007 	bic.w	r0, r0, #7
 8009cfc:	1ac3      	subs	r3, r0, r3
 8009cfe:	d0d3      	beq.n	8009ca8 <_malloc_r+0x20>
 8009d00:	425a      	negs	r2, r3
 8009d02:	50e2      	str	r2, [r4, r3]
 8009d04:	e7d0      	b.n	8009ca8 <_malloc_r+0x20>
 8009d06:	428c      	cmp	r4, r1
 8009d08:	684b      	ldr	r3, [r1, #4]
 8009d0a:	bf16      	itet	ne
 8009d0c:	6063      	strne	r3, [r4, #4]
 8009d0e:	6013      	streq	r3, [r2, #0]
 8009d10:	460c      	movne	r4, r1
 8009d12:	e7eb      	b.n	8009cec <_malloc_r+0x64>
 8009d14:	460c      	mov	r4, r1
 8009d16:	6849      	ldr	r1, [r1, #4]
 8009d18:	e7cc      	b.n	8009cb4 <_malloc_r+0x2c>
 8009d1a:	1cc4      	adds	r4, r0, #3
 8009d1c:	f024 0403 	bic.w	r4, r4, #3
 8009d20:	42a0      	cmp	r0, r4
 8009d22:	d005      	beq.n	8009d30 <_malloc_r+0xa8>
 8009d24:	1a21      	subs	r1, r4, r0
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 fae2 	bl	800a2f0 <_sbrk_r>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d0cf      	beq.n	8009cd0 <_malloc_r+0x48>
 8009d30:	6025      	str	r5, [r4, #0]
 8009d32:	e7db      	b.n	8009cec <_malloc_r+0x64>
 8009d34:	20000bfc 	.word	0x20000bfc
 8009d38:	20000c00 	.word	0x20000c00

08009d3c <__ssputs_r>:
 8009d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d40:	688e      	ldr	r6, [r1, #8]
 8009d42:	429e      	cmp	r6, r3
 8009d44:	4682      	mov	sl, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	4690      	mov	r8, r2
 8009d4a:	4699      	mov	r9, r3
 8009d4c:	d837      	bhi.n	8009dbe <__ssputs_r+0x82>
 8009d4e:	898a      	ldrh	r2, [r1, #12]
 8009d50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d54:	d031      	beq.n	8009dba <__ssputs_r+0x7e>
 8009d56:	6825      	ldr	r5, [r4, #0]
 8009d58:	6909      	ldr	r1, [r1, #16]
 8009d5a:	1a6f      	subs	r7, r5, r1
 8009d5c:	6965      	ldr	r5, [r4, #20]
 8009d5e:	2302      	movs	r3, #2
 8009d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d64:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d68:	f109 0301 	add.w	r3, r9, #1
 8009d6c:	443b      	add	r3, r7
 8009d6e:	429d      	cmp	r5, r3
 8009d70:	bf38      	it	cc
 8009d72:	461d      	movcc	r5, r3
 8009d74:	0553      	lsls	r3, r2, #21
 8009d76:	d530      	bpl.n	8009dda <__ssputs_r+0x9e>
 8009d78:	4629      	mov	r1, r5
 8009d7a:	f7ff ff85 	bl	8009c88 <_malloc_r>
 8009d7e:	4606      	mov	r6, r0
 8009d80:	b950      	cbnz	r0, 8009d98 <__ssputs_r+0x5c>
 8009d82:	230c      	movs	r3, #12
 8009d84:	f8ca 3000 	str.w	r3, [sl]
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d8e:	81a3      	strh	r3, [r4, #12]
 8009d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d98:	463a      	mov	r2, r7
 8009d9a:	6921      	ldr	r1, [r4, #16]
 8009d9c:	f000 fb52 	bl	800a444 <memcpy>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	6126      	str	r6, [r4, #16]
 8009dae:	6165      	str	r5, [r4, #20]
 8009db0:	443e      	add	r6, r7
 8009db2:	1bed      	subs	r5, r5, r7
 8009db4:	6026      	str	r6, [r4, #0]
 8009db6:	60a5      	str	r5, [r4, #8]
 8009db8:	464e      	mov	r6, r9
 8009dba:	454e      	cmp	r6, r9
 8009dbc:	d900      	bls.n	8009dc0 <__ssputs_r+0x84>
 8009dbe:	464e      	mov	r6, r9
 8009dc0:	4632      	mov	r2, r6
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	6820      	ldr	r0, [r4, #0]
 8009dc6:	f000 fb48 	bl	800a45a <memmove>
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	1b9b      	subs	r3, r3, r6
 8009dce:	60a3      	str	r3, [r4, #8]
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	441e      	add	r6, r3
 8009dd4:	6026      	str	r6, [r4, #0]
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e7dc      	b.n	8009d94 <__ssputs_r+0x58>
 8009dda:	462a      	mov	r2, r5
 8009ddc:	f000 fb58 	bl	800a490 <_realloc_r>
 8009de0:	4606      	mov	r6, r0
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d1e2      	bne.n	8009dac <__ssputs_r+0x70>
 8009de6:	6921      	ldr	r1, [r4, #16]
 8009de8:	4650      	mov	r0, sl
 8009dea:	f7ff feff 	bl	8009bec <_free_r>
 8009dee:	e7c8      	b.n	8009d82 <__ssputs_r+0x46>

08009df0 <_svfiprintf_r>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	461d      	mov	r5, r3
 8009df6:	898b      	ldrh	r3, [r1, #12]
 8009df8:	061f      	lsls	r7, r3, #24
 8009dfa:	b09d      	sub	sp, #116	; 0x74
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	4616      	mov	r6, r2
 8009e02:	d50f      	bpl.n	8009e24 <_svfiprintf_r+0x34>
 8009e04:	690b      	ldr	r3, [r1, #16]
 8009e06:	b96b      	cbnz	r3, 8009e24 <_svfiprintf_r+0x34>
 8009e08:	2140      	movs	r1, #64	; 0x40
 8009e0a:	f7ff ff3d 	bl	8009c88 <_malloc_r>
 8009e0e:	6020      	str	r0, [r4, #0]
 8009e10:	6120      	str	r0, [r4, #16]
 8009e12:	b928      	cbnz	r0, 8009e20 <_svfiprintf_r+0x30>
 8009e14:	230c      	movs	r3, #12
 8009e16:	f8c8 3000 	str.w	r3, [r8]
 8009e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e1e:	e0c8      	b.n	8009fb2 <_svfiprintf_r+0x1c2>
 8009e20:	2340      	movs	r3, #64	; 0x40
 8009e22:	6163      	str	r3, [r4, #20]
 8009e24:	2300      	movs	r3, #0
 8009e26:	9309      	str	r3, [sp, #36]	; 0x24
 8009e28:	2320      	movs	r3, #32
 8009e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e2e:	2330      	movs	r3, #48	; 0x30
 8009e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e34:	9503      	str	r5, [sp, #12]
 8009e36:	f04f 0b01 	mov.w	fp, #1
 8009e3a:	4637      	mov	r7, r6
 8009e3c:	463d      	mov	r5, r7
 8009e3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e42:	b10b      	cbz	r3, 8009e48 <_svfiprintf_r+0x58>
 8009e44:	2b25      	cmp	r3, #37	; 0x25
 8009e46:	d13e      	bne.n	8009ec6 <_svfiprintf_r+0xd6>
 8009e48:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e4c:	d00b      	beq.n	8009e66 <_svfiprintf_r+0x76>
 8009e4e:	4653      	mov	r3, sl
 8009e50:	4632      	mov	r2, r6
 8009e52:	4621      	mov	r1, r4
 8009e54:	4640      	mov	r0, r8
 8009e56:	f7ff ff71 	bl	8009d3c <__ssputs_r>
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	f000 80a4 	beq.w	8009fa8 <_svfiprintf_r+0x1b8>
 8009e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e62:	4453      	add	r3, sl
 8009e64:	9309      	str	r3, [sp, #36]	; 0x24
 8009e66:	783b      	ldrb	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 809d 	beq.w	8009fa8 <_svfiprintf_r+0x1b8>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e78:	9304      	str	r3, [sp, #16]
 8009e7a:	9307      	str	r3, [sp, #28]
 8009e7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e80:	931a      	str	r3, [sp, #104]	; 0x68
 8009e82:	462f      	mov	r7, r5
 8009e84:	2205      	movs	r2, #5
 8009e86:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e8a:	4850      	ldr	r0, [pc, #320]	; (8009fcc <_svfiprintf_r+0x1dc>)
 8009e8c:	f7f6 f9c8 	bl	8000220 <memchr>
 8009e90:	9b04      	ldr	r3, [sp, #16]
 8009e92:	b9d0      	cbnz	r0, 8009eca <_svfiprintf_r+0xda>
 8009e94:	06d9      	lsls	r1, r3, #27
 8009e96:	bf44      	itt	mi
 8009e98:	2220      	movmi	r2, #32
 8009e9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e9e:	071a      	lsls	r2, r3, #28
 8009ea0:	bf44      	itt	mi
 8009ea2:	222b      	movmi	r2, #43	; 0x2b
 8009ea4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ea8:	782a      	ldrb	r2, [r5, #0]
 8009eaa:	2a2a      	cmp	r2, #42	; 0x2a
 8009eac:	d015      	beq.n	8009eda <_svfiprintf_r+0xea>
 8009eae:	9a07      	ldr	r2, [sp, #28]
 8009eb0:	462f      	mov	r7, r5
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	250a      	movs	r5, #10
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ebc:	3b30      	subs	r3, #48	; 0x30
 8009ebe:	2b09      	cmp	r3, #9
 8009ec0:	d94d      	bls.n	8009f5e <_svfiprintf_r+0x16e>
 8009ec2:	b1b8      	cbz	r0, 8009ef4 <_svfiprintf_r+0x104>
 8009ec4:	e00f      	b.n	8009ee6 <_svfiprintf_r+0xf6>
 8009ec6:	462f      	mov	r7, r5
 8009ec8:	e7b8      	b.n	8009e3c <_svfiprintf_r+0x4c>
 8009eca:	4a40      	ldr	r2, [pc, #256]	; (8009fcc <_svfiprintf_r+0x1dc>)
 8009ecc:	1a80      	subs	r0, r0, r2
 8009ece:	fa0b f000 	lsl.w	r0, fp, r0
 8009ed2:	4318      	orrs	r0, r3
 8009ed4:	9004      	str	r0, [sp, #16]
 8009ed6:	463d      	mov	r5, r7
 8009ed8:	e7d3      	b.n	8009e82 <_svfiprintf_r+0x92>
 8009eda:	9a03      	ldr	r2, [sp, #12]
 8009edc:	1d11      	adds	r1, r2, #4
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	9103      	str	r1, [sp, #12]
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	db01      	blt.n	8009eea <_svfiprintf_r+0xfa>
 8009ee6:	9207      	str	r2, [sp, #28]
 8009ee8:	e004      	b.n	8009ef4 <_svfiprintf_r+0x104>
 8009eea:	4252      	negs	r2, r2
 8009eec:	f043 0302 	orr.w	r3, r3, #2
 8009ef0:	9207      	str	r2, [sp, #28]
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	783b      	ldrb	r3, [r7, #0]
 8009ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef8:	d10c      	bne.n	8009f14 <_svfiprintf_r+0x124>
 8009efa:	787b      	ldrb	r3, [r7, #1]
 8009efc:	2b2a      	cmp	r3, #42	; 0x2a
 8009efe:	d133      	bne.n	8009f68 <_svfiprintf_r+0x178>
 8009f00:	9b03      	ldr	r3, [sp, #12]
 8009f02:	1d1a      	adds	r2, r3, #4
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	9203      	str	r2, [sp, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	bfb8      	it	lt
 8009f0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f10:	3702      	adds	r7, #2
 8009f12:	9305      	str	r3, [sp, #20]
 8009f14:	4d2e      	ldr	r5, [pc, #184]	; (8009fd0 <_svfiprintf_r+0x1e0>)
 8009f16:	7839      	ldrb	r1, [r7, #0]
 8009f18:	2203      	movs	r2, #3
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	f7f6 f980 	bl	8000220 <memchr>
 8009f20:	b138      	cbz	r0, 8009f32 <_svfiprintf_r+0x142>
 8009f22:	2340      	movs	r3, #64	; 0x40
 8009f24:	1b40      	subs	r0, r0, r5
 8009f26:	fa03 f000 	lsl.w	r0, r3, r0
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	4303      	orrs	r3, r0
 8009f2e:	3701      	adds	r7, #1
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	7839      	ldrb	r1, [r7, #0]
 8009f34:	4827      	ldr	r0, [pc, #156]	; (8009fd4 <_svfiprintf_r+0x1e4>)
 8009f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f3a:	2206      	movs	r2, #6
 8009f3c:	1c7e      	adds	r6, r7, #1
 8009f3e:	f7f6 f96f 	bl	8000220 <memchr>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d038      	beq.n	8009fb8 <_svfiprintf_r+0x1c8>
 8009f46:	4b24      	ldr	r3, [pc, #144]	; (8009fd8 <_svfiprintf_r+0x1e8>)
 8009f48:	bb13      	cbnz	r3, 8009f90 <_svfiprintf_r+0x1a0>
 8009f4a:	9b03      	ldr	r3, [sp, #12]
 8009f4c:	3307      	adds	r3, #7
 8009f4e:	f023 0307 	bic.w	r3, r3, #7
 8009f52:	3308      	adds	r3, #8
 8009f54:	9303      	str	r3, [sp, #12]
 8009f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f58:	444b      	add	r3, r9
 8009f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5c:	e76d      	b.n	8009e3a <_svfiprintf_r+0x4a>
 8009f5e:	fb05 3202 	mla	r2, r5, r2, r3
 8009f62:	2001      	movs	r0, #1
 8009f64:	460f      	mov	r7, r1
 8009f66:	e7a6      	b.n	8009eb6 <_svfiprintf_r+0xc6>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	3701      	adds	r7, #1
 8009f6c:	9305      	str	r3, [sp, #20]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	250a      	movs	r5, #10
 8009f72:	4638      	mov	r0, r7
 8009f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f78:	3a30      	subs	r2, #48	; 0x30
 8009f7a:	2a09      	cmp	r2, #9
 8009f7c:	d903      	bls.n	8009f86 <_svfiprintf_r+0x196>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0c8      	beq.n	8009f14 <_svfiprintf_r+0x124>
 8009f82:	9105      	str	r1, [sp, #20]
 8009f84:	e7c6      	b.n	8009f14 <_svfiprintf_r+0x124>
 8009f86:	fb05 2101 	mla	r1, r5, r1, r2
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	e7f0      	b.n	8009f72 <_svfiprintf_r+0x182>
 8009f90:	ab03      	add	r3, sp, #12
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	4622      	mov	r2, r4
 8009f96:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <_svfiprintf_r+0x1ec>)
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	f3af 8000 	nop.w
 8009fa0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009fa4:	4681      	mov	r9, r0
 8009fa6:	d1d6      	bne.n	8009f56 <_svfiprintf_r+0x166>
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	065b      	lsls	r3, r3, #25
 8009fac:	f53f af35 	bmi.w	8009e1a <_svfiprintf_r+0x2a>
 8009fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fb2:	b01d      	add	sp, #116	; 0x74
 8009fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb8:	ab03      	add	r3, sp, #12
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4b07      	ldr	r3, [pc, #28]	; (8009fdc <_svfiprintf_r+0x1ec>)
 8009fc0:	a904      	add	r1, sp, #16
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	f000 f882 	bl	800a0cc <_printf_i>
 8009fc8:	e7ea      	b.n	8009fa0 <_svfiprintf_r+0x1b0>
 8009fca:	bf00      	nop
 8009fcc:	0800aa68 	.word	0x0800aa68
 8009fd0:	0800aa6e 	.word	0x0800aa6e
 8009fd4:	0800aa72 	.word	0x0800aa72
 8009fd8:	00000000 	.word	0x00000000
 8009fdc:	08009d3d 	.word	0x08009d3d

08009fe0 <_printf_common>:
 8009fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe4:	4691      	mov	r9, r2
 8009fe6:	461f      	mov	r7, r3
 8009fe8:	688a      	ldr	r2, [r1, #8]
 8009fea:	690b      	ldr	r3, [r1, #16]
 8009fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	bfb8      	it	lt
 8009ff4:	4613      	movlt	r3, r2
 8009ff6:	f8c9 3000 	str.w	r3, [r9]
 8009ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ffe:	4606      	mov	r6, r0
 800a000:	460c      	mov	r4, r1
 800a002:	b112      	cbz	r2, 800a00a <_printf_common+0x2a>
 800a004:	3301      	adds	r3, #1
 800a006:	f8c9 3000 	str.w	r3, [r9]
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	0699      	lsls	r1, r3, #26
 800a00e:	bf42      	ittt	mi
 800a010:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a014:	3302      	addmi	r3, #2
 800a016:	f8c9 3000 	strmi.w	r3, [r9]
 800a01a:	6825      	ldr	r5, [r4, #0]
 800a01c:	f015 0506 	ands.w	r5, r5, #6
 800a020:	d107      	bne.n	800a032 <_printf_common+0x52>
 800a022:	f104 0a19 	add.w	sl, r4, #25
 800a026:	68e3      	ldr	r3, [r4, #12]
 800a028:	f8d9 2000 	ldr.w	r2, [r9]
 800a02c:	1a9b      	subs	r3, r3, r2
 800a02e:	42ab      	cmp	r3, r5
 800a030:	dc28      	bgt.n	800a084 <_printf_common+0xa4>
 800a032:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a036:	6822      	ldr	r2, [r4, #0]
 800a038:	3300      	adds	r3, #0
 800a03a:	bf18      	it	ne
 800a03c:	2301      	movne	r3, #1
 800a03e:	0692      	lsls	r2, r2, #26
 800a040:	d42d      	bmi.n	800a09e <_printf_common+0xbe>
 800a042:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a046:	4639      	mov	r1, r7
 800a048:	4630      	mov	r0, r6
 800a04a:	47c0      	blx	r8
 800a04c:	3001      	adds	r0, #1
 800a04e:	d020      	beq.n	800a092 <_printf_common+0xb2>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	68e5      	ldr	r5, [r4, #12]
 800a054:	f8d9 2000 	ldr.w	r2, [r9]
 800a058:	f003 0306 	and.w	r3, r3, #6
 800a05c:	2b04      	cmp	r3, #4
 800a05e:	bf08      	it	eq
 800a060:	1aad      	subeq	r5, r5, r2
 800a062:	68a3      	ldr	r3, [r4, #8]
 800a064:	6922      	ldr	r2, [r4, #16]
 800a066:	bf0c      	ite	eq
 800a068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a06c:	2500      	movne	r5, #0
 800a06e:	4293      	cmp	r3, r2
 800a070:	bfc4      	itt	gt
 800a072:	1a9b      	subgt	r3, r3, r2
 800a074:	18ed      	addgt	r5, r5, r3
 800a076:	f04f 0900 	mov.w	r9, #0
 800a07a:	341a      	adds	r4, #26
 800a07c:	454d      	cmp	r5, r9
 800a07e:	d11a      	bne.n	800a0b6 <_printf_common+0xd6>
 800a080:	2000      	movs	r0, #0
 800a082:	e008      	b.n	800a096 <_printf_common+0xb6>
 800a084:	2301      	movs	r3, #1
 800a086:	4652      	mov	r2, sl
 800a088:	4639      	mov	r1, r7
 800a08a:	4630      	mov	r0, r6
 800a08c:	47c0      	blx	r8
 800a08e:	3001      	adds	r0, #1
 800a090:	d103      	bne.n	800a09a <_printf_common+0xba>
 800a092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09a:	3501      	adds	r5, #1
 800a09c:	e7c3      	b.n	800a026 <_printf_common+0x46>
 800a09e:	18e1      	adds	r1, r4, r3
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	2030      	movs	r0, #48	; 0x30
 800a0a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0a8:	4422      	add	r2, r4
 800a0aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0b2:	3302      	adds	r3, #2
 800a0b4:	e7c5      	b.n	800a042 <_printf_common+0x62>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	4622      	mov	r2, r4
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	4630      	mov	r0, r6
 800a0be:	47c0      	blx	r8
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d0e6      	beq.n	800a092 <_printf_common+0xb2>
 800a0c4:	f109 0901 	add.w	r9, r9, #1
 800a0c8:	e7d8      	b.n	800a07c <_printf_common+0x9c>
	...

0800a0cc <_printf_i>:
 800a0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	7e09      	ldrb	r1, [r1, #24]
 800a0d8:	b085      	sub	sp, #20
 800a0da:	296e      	cmp	r1, #110	; 0x6e
 800a0dc:	4617      	mov	r7, r2
 800a0de:	4606      	mov	r6, r0
 800a0e0:	4698      	mov	r8, r3
 800a0e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0e4:	f000 80b3 	beq.w	800a24e <_printf_i+0x182>
 800a0e8:	d822      	bhi.n	800a130 <_printf_i+0x64>
 800a0ea:	2963      	cmp	r1, #99	; 0x63
 800a0ec:	d036      	beq.n	800a15c <_printf_i+0x90>
 800a0ee:	d80a      	bhi.n	800a106 <_printf_i+0x3a>
 800a0f0:	2900      	cmp	r1, #0
 800a0f2:	f000 80b9 	beq.w	800a268 <_printf_i+0x19c>
 800a0f6:	2958      	cmp	r1, #88	; 0x58
 800a0f8:	f000 8083 	beq.w	800a202 <_printf_i+0x136>
 800a0fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a100:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a104:	e032      	b.n	800a16c <_printf_i+0xa0>
 800a106:	2964      	cmp	r1, #100	; 0x64
 800a108:	d001      	beq.n	800a10e <_printf_i+0x42>
 800a10a:	2969      	cmp	r1, #105	; 0x69
 800a10c:	d1f6      	bne.n	800a0fc <_printf_i+0x30>
 800a10e:	6820      	ldr	r0, [r4, #0]
 800a110:	6813      	ldr	r3, [r2, #0]
 800a112:	0605      	lsls	r5, r0, #24
 800a114:	f103 0104 	add.w	r1, r3, #4
 800a118:	d52a      	bpl.n	800a170 <_printf_i+0xa4>
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6011      	str	r1, [r2, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	da03      	bge.n	800a12a <_printf_i+0x5e>
 800a122:	222d      	movs	r2, #45	; 0x2d
 800a124:	425b      	negs	r3, r3
 800a126:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a12a:	486f      	ldr	r0, [pc, #444]	; (800a2e8 <_printf_i+0x21c>)
 800a12c:	220a      	movs	r2, #10
 800a12e:	e039      	b.n	800a1a4 <_printf_i+0xd8>
 800a130:	2973      	cmp	r1, #115	; 0x73
 800a132:	f000 809d 	beq.w	800a270 <_printf_i+0x1a4>
 800a136:	d808      	bhi.n	800a14a <_printf_i+0x7e>
 800a138:	296f      	cmp	r1, #111	; 0x6f
 800a13a:	d020      	beq.n	800a17e <_printf_i+0xb2>
 800a13c:	2970      	cmp	r1, #112	; 0x70
 800a13e:	d1dd      	bne.n	800a0fc <_printf_i+0x30>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	f043 0320 	orr.w	r3, r3, #32
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	e003      	b.n	800a152 <_printf_i+0x86>
 800a14a:	2975      	cmp	r1, #117	; 0x75
 800a14c:	d017      	beq.n	800a17e <_printf_i+0xb2>
 800a14e:	2978      	cmp	r1, #120	; 0x78
 800a150:	d1d4      	bne.n	800a0fc <_printf_i+0x30>
 800a152:	2378      	movs	r3, #120	; 0x78
 800a154:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a158:	4864      	ldr	r0, [pc, #400]	; (800a2ec <_printf_i+0x220>)
 800a15a:	e055      	b.n	800a208 <_printf_i+0x13c>
 800a15c:	6813      	ldr	r3, [r2, #0]
 800a15e:	1d19      	adds	r1, r3, #4
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6011      	str	r1, [r2, #0]
 800a164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a16c:	2301      	movs	r3, #1
 800a16e:	e08c      	b.n	800a28a <_printf_i+0x1be>
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6011      	str	r1, [r2, #0]
 800a174:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a178:	bf18      	it	ne
 800a17a:	b21b      	sxthne	r3, r3
 800a17c:	e7cf      	b.n	800a11e <_printf_i+0x52>
 800a17e:	6813      	ldr	r3, [r2, #0]
 800a180:	6825      	ldr	r5, [r4, #0]
 800a182:	1d18      	adds	r0, r3, #4
 800a184:	6010      	str	r0, [r2, #0]
 800a186:	0628      	lsls	r0, r5, #24
 800a188:	d501      	bpl.n	800a18e <_printf_i+0xc2>
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	e002      	b.n	800a194 <_printf_i+0xc8>
 800a18e:	0668      	lsls	r0, r5, #25
 800a190:	d5fb      	bpl.n	800a18a <_printf_i+0xbe>
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	4854      	ldr	r0, [pc, #336]	; (800a2e8 <_printf_i+0x21c>)
 800a196:	296f      	cmp	r1, #111	; 0x6f
 800a198:	bf14      	ite	ne
 800a19a:	220a      	movne	r2, #10
 800a19c:	2208      	moveq	r2, #8
 800a19e:	2100      	movs	r1, #0
 800a1a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1a4:	6865      	ldr	r5, [r4, #4]
 800a1a6:	60a5      	str	r5, [r4, #8]
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	f2c0 8095 	blt.w	800a2d8 <_printf_i+0x20c>
 800a1ae:	6821      	ldr	r1, [r4, #0]
 800a1b0:	f021 0104 	bic.w	r1, r1, #4
 800a1b4:	6021      	str	r1, [r4, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d13d      	bne.n	800a236 <_printf_i+0x16a>
 800a1ba:	2d00      	cmp	r5, #0
 800a1bc:	f040 808e 	bne.w	800a2dc <_printf_i+0x210>
 800a1c0:	4665      	mov	r5, ip
 800a1c2:	2a08      	cmp	r2, #8
 800a1c4:	d10b      	bne.n	800a1de <_printf_i+0x112>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	07db      	lsls	r3, r3, #31
 800a1ca:	d508      	bpl.n	800a1de <_printf_i+0x112>
 800a1cc:	6923      	ldr	r3, [r4, #16]
 800a1ce:	6862      	ldr	r2, [r4, #4]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	bfde      	ittt	le
 800a1d4:	2330      	movle	r3, #48	; 0x30
 800a1d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a1de:	ebac 0305 	sub.w	r3, ip, r5
 800a1e2:	6123      	str	r3, [r4, #16]
 800a1e4:	f8cd 8000 	str.w	r8, [sp]
 800a1e8:	463b      	mov	r3, r7
 800a1ea:	aa03      	add	r2, sp, #12
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7ff fef6 	bl	8009fe0 <_printf_common>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d14d      	bne.n	800a294 <_printf_i+0x1c8>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1fc:	b005      	add	sp, #20
 800a1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a202:	4839      	ldr	r0, [pc, #228]	; (800a2e8 <_printf_i+0x21c>)
 800a204:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a208:	6813      	ldr	r3, [r2, #0]
 800a20a:	6821      	ldr	r1, [r4, #0]
 800a20c:	1d1d      	adds	r5, r3, #4
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6015      	str	r5, [r2, #0]
 800a212:	060a      	lsls	r2, r1, #24
 800a214:	d50b      	bpl.n	800a22e <_printf_i+0x162>
 800a216:	07ca      	lsls	r2, r1, #31
 800a218:	bf44      	itt	mi
 800a21a:	f041 0120 	orrmi.w	r1, r1, #32
 800a21e:	6021      	strmi	r1, [r4, #0]
 800a220:	b91b      	cbnz	r3, 800a22a <_printf_i+0x15e>
 800a222:	6822      	ldr	r2, [r4, #0]
 800a224:	f022 0220 	bic.w	r2, r2, #32
 800a228:	6022      	str	r2, [r4, #0]
 800a22a:	2210      	movs	r2, #16
 800a22c:	e7b7      	b.n	800a19e <_printf_i+0xd2>
 800a22e:	064d      	lsls	r5, r1, #25
 800a230:	bf48      	it	mi
 800a232:	b29b      	uxthmi	r3, r3
 800a234:	e7ef      	b.n	800a216 <_printf_i+0x14a>
 800a236:	4665      	mov	r5, ip
 800a238:	fbb3 f1f2 	udiv	r1, r3, r2
 800a23c:	fb02 3311 	mls	r3, r2, r1, r3
 800a240:	5cc3      	ldrb	r3, [r0, r3]
 800a242:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a246:	460b      	mov	r3, r1
 800a248:	2900      	cmp	r1, #0
 800a24a:	d1f5      	bne.n	800a238 <_printf_i+0x16c>
 800a24c:	e7b9      	b.n	800a1c2 <_printf_i+0xf6>
 800a24e:	6813      	ldr	r3, [r2, #0]
 800a250:	6825      	ldr	r5, [r4, #0]
 800a252:	6961      	ldr	r1, [r4, #20]
 800a254:	1d18      	adds	r0, r3, #4
 800a256:	6010      	str	r0, [r2, #0]
 800a258:	0628      	lsls	r0, r5, #24
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	d501      	bpl.n	800a262 <_printf_i+0x196>
 800a25e:	6019      	str	r1, [r3, #0]
 800a260:	e002      	b.n	800a268 <_printf_i+0x19c>
 800a262:	066a      	lsls	r2, r5, #25
 800a264:	d5fb      	bpl.n	800a25e <_printf_i+0x192>
 800a266:	8019      	strh	r1, [r3, #0]
 800a268:	2300      	movs	r3, #0
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	4665      	mov	r5, ip
 800a26e:	e7b9      	b.n	800a1e4 <_printf_i+0x118>
 800a270:	6813      	ldr	r3, [r2, #0]
 800a272:	1d19      	adds	r1, r3, #4
 800a274:	6011      	str	r1, [r2, #0]
 800a276:	681d      	ldr	r5, [r3, #0]
 800a278:	6862      	ldr	r2, [r4, #4]
 800a27a:	2100      	movs	r1, #0
 800a27c:	4628      	mov	r0, r5
 800a27e:	f7f5 ffcf 	bl	8000220 <memchr>
 800a282:	b108      	cbz	r0, 800a288 <_printf_i+0x1bc>
 800a284:	1b40      	subs	r0, r0, r5
 800a286:	6060      	str	r0, [r4, #4]
 800a288:	6863      	ldr	r3, [r4, #4]
 800a28a:	6123      	str	r3, [r4, #16]
 800a28c:	2300      	movs	r3, #0
 800a28e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a292:	e7a7      	b.n	800a1e4 <_printf_i+0x118>
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	462a      	mov	r2, r5
 800a298:	4639      	mov	r1, r7
 800a29a:	4630      	mov	r0, r6
 800a29c:	47c0      	blx	r8
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d0aa      	beq.n	800a1f8 <_printf_i+0x12c>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	079b      	lsls	r3, r3, #30
 800a2a6:	d413      	bmi.n	800a2d0 <_printf_i+0x204>
 800a2a8:	68e0      	ldr	r0, [r4, #12]
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	4298      	cmp	r0, r3
 800a2ae:	bfb8      	it	lt
 800a2b0:	4618      	movlt	r0, r3
 800a2b2:	e7a3      	b.n	800a1fc <_printf_i+0x130>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	464a      	mov	r2, r9
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	47c0      	blx	r8
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d09a      	beq.n	800a1f8 <_printf_i+0x12c>
 800a2c2:	3501      	adds	r5, #1
 800a2c4:	68e3      	ldr	r3, [r4, #12]
 800a2c6:	9a03      	ldr	r2, [sp, #12]
 800a2c8:	1a9b      	subs	r3, r3, r2
 800a2ca:	42ab      	cmp	r3, r5
 800a2cc:	dcf2      	bgt.n	800a2b4 <_printf_i+0x1e8>
 800a2ce:	e7eb      	b.n	800a2a8 <_printf_i+0x1dc>
 800a2d0:	2500      	movs	r5, #0
 800a2d2:	f104 0919 	add.w	r9, r4, #25
 800a2d6:	e7f5      	b.n	800a2c4 <_printf_i+0x1f8>
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1ac      	bne.n	800a236 <_printf_i+0x16a>
 800a2dc:	7803      	ldrb	r3, [r0, #0]
 800a2de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2e6:	e76c      	b.n	800a1c2 <_printf_i+0xf6>
 800a2e8:	0800aa79 	.word	0x0800aa79
 800a2ec:	0800aa8a 	.word	0x0800aa8a

0800a2f0 <_sbrk_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4c06      	ldr	r4, [pc, #24]	; (800a30c <_sbrk_r+0x1c>)
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	6023      	str	r3, [r4, #0]
 800a2fc:	f7f8 fa96 	bl	800282c <_sbrk>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_sbrk_r+0x1a>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	b103      	cbz	r3, 800a30a <_sbrk_r+0x1a>
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	20001064 	.word	0x20001064

0800a310 <__sread>:
 800a310:	b510      	push	{r4, lr}
 800a312:	460c      	mov	r4, r1
 800a314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a318:	f000 f8e0 	bl	800a4dc <_read_r>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	bfab      	itete	ge
 800a320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a322:	89a3      	ldrhlt	r3, [r4, #12]
 800a324:	181b      	addge	r3, r3, r0
 800a326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a32a:	bfac      	ite	ge
 800a32c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a32e:	81a3      	strhlt	r3, [r4, #12]
 800a330:	bd10      	pop	{r4, pc}

0800a332 <__swrite>:
 800a332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a336:	461f      	mov	r7, r3
 800a338:	898b      	ldrh	r3, [r1, #12]
 800a33a:	05db      	lsls	r3, r3, #23
 800a33c:	4605      	mov	r5, r0
 800a33e:	460c      	mov	r4, r1
 800a340:	4616      	mov	r6, r2
 800a342:	d505      	bpl.n	800a350 <__swrite+0x1e>
 800a344:	2302      	movs	r3, #2
 800a346:	2200      	movs	r2, #0
 800a348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34c:	f000 f868 	bl	800a420 <_lseek_r>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	4632      	mov	r2, r6
 800a35e:	463b      	mov	r3, r7
 800a360:	4628      	mov	r0, r5
 800a362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a366:	f000 b817 	b.w	800a398 <_write_r>

0800a36a <__sseek>:
 800a36a:	b510      	push	{r4, lr}
 800a36c:	460c      	mov	r4, r1
 800a36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a372:	f000 f855 	bl	800a420 <_lseek_r>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	bf15      	itete	ne
 800a37c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a37e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a386:	81a3      	strheq	r3, [r4, #12]
 800a388:	bf18      	it	ne
 800a38a:	81a3      	strhne	r3, [r4, #12]
 800a38c:	bd10      	pop	{r4, pc}

0800a38e <__sclose>:
 800a38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a392:	f000 b813 	b.w	800a3bc <_close_r>
	...

0800a398 <_write_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4c07      	ldr	r4, [pc, #28]	; (800a3b8 <_write_r+0x20>)
 800a39c:	4605      	mov	r5, r0
 800a39e:	4608      	mov	r0, r1
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	6022      	str	r2, [r4, #0]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f7f7 fe8b 	bl	80020c2 <_write>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_write_r+0x1e>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_write_r+0x1e>
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	20001064 	.word	0x20001064

0800a3bc <_close_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4c06      	ldr	r4, [pc, #24]	; (800a3d8 <_close_r+0x1c>)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	f7f8 f9fb 	bl	80027c2 <_close>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_close_r+0x1a>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_close_r+0x1a>
 800a3d4:	602b      	str	r3, [r5, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	20001064 	.word	0x20001064

0800a3dc <_fstat_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4c07      	ldr	r4, [pc, #28]	; (800a3fc <_fstat_r+0x20>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	f7f8 f9f6 	bl	80027da <_fstat>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d102      	bne.n	800a3f8 <_fstat_r+0x1c>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	b103      	cbz	r3, 800a3f8 <_fstat_r+0x1c>
 800a3f6:	602b      	str	r3, [r5, #0]
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20001064 	.word	0x20001064

0800a400 <_isatty_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4c06      	ldr	r4, [pc, #24]	; (800a41c <_isatty_r+0x1c>)
 800a404:	2300      	movs	r3, #0
 800a406:	4605      	mov	r5, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	f7f8 f9f5 	bl	80027fa <_isatty>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_isatty_r+0x1a>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	b103      	cbz	r3, 800a41a <_isatty_r+0x1a>
 800a418:	602b      	str	r3, [r5, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	20001064 	.word	0x20001064

0800a420 <_lseek_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4c07      	ldr	r4, [pc, #28]	; (800a440 <_lseek_r+0x20>)
 800a424:	4605      	mov	r5, r0
 800a426:	4608      	mov	r0, r1
 800a428:	4611      	mov	r1, r2
 800a42a:	2200      	movs	r2, #0
 800a42c:	6022      	str	r2, [r4, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	f7f8 f9ee 	bl	8002810 <_lseek>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_lseek_r+0x1e>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_lseek_r+0x1e>
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	20001064 	.word	0x20001064

0800a444 <memcpy>:
 800a444:	b510      	push	{r4, lr}
 800a446:	1e43      	subs	r3, r0, #1
 800a448:	440a      	add	r2, r1
 800a44a:	4291      	cmp	r1, r2
 800a44c:	d100      	bne.n	800a450 <memcpy+0xc>
 800a44e:	bd10      	pop	{r4, pc}
 800a450:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a454:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a458:	e7f7      	b.n	800a44a <memcpy+0x6>

0800a45a <memmove>:
 800a45a:	4288      	cmp	r0, r1
 800a45c:	b510      	push	{r4, lr}
 800a45e:	eb01 0302 	add.w	r3, r1, r2
 800a462:	d807      	bhi.n	800a474 <memmove+0x1a>
 800a464:	1e42      	subs	r2, r0, #1
 800a466:	4299      	cmp	r1, r3
 800a468:	d00a      	beq.n	800a480 <memmove+0x26>
 800a46a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a46e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a472:	e7f8      	b.n	800a466 <memmove+0xc>
 800a474:	4283      	cmp	r3, r0
 800a476:	d9f5      	bls.n	800a464 <memmove+0xa>
 800a478:	1881      	adds	r1, r0, r2
 800a47a:	1ad2      	subs	r2, r2, r3
 800a47c:	42d3      	cmn	r3, r2
 800a47e:	d100      	bne.n	800a482 <memmove+0x28>
 800a480:	bd10      	pop	{r4, pc}
 800a482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a486:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a48a:	e7f7      	b.n	800a47c <memmove+0x22>

0800a48c <__malloc_lock>:
 800a48c:	4770      	bx	lr

0800a48e <__malloc_unlock>:
 800a48e:	4770      	bx	lr

0800a490 <_realloc_r>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	4607      	mov	r7, r0
 800a494:	4614      	mov	r4, r2
 800a496:	460e      	mov	r6, r1
 800a498:	b921      	cbnz	r1, 800a4a4 <_realloc_r+0x14>
 800a49a:	4611      	mov	r1, r2
 800a49c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4a0:	f7ff bbf2 	b.w	8009c88 <_malloc_r>
 800a4a4:	b922      	cbnz	r2, 800a4b0 <_realloc_r+0x20>
 800a4a6:	f7ff fba1 	bl	8009bec <_free_r>
 800a4aa:	4625      	mov	r5, r4
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b0:	f000 f826 	bl	800a500 <_malloc_usable_size_r>
 800a4b4:	42a0      	cmp	r0, r4
 800a4b6:	d20f      	bcs.n	800a4d8 <_realloc_r+0x48>
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	f7ff fbe4 	bl	8009c88 <_malloc_r>
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d0f2      	beq.n	800a4ac <_realloc_r+0x1c>
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	f7ff ffbb 	bl	800a444 <memcpy>
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f7ff fb8b 	bl	8009bec <_free_r>
 800a4d6:	e7e9      	b.n	800a4ac <_realloc_r+0x1c>
 800a4d8:	4635      	mov	r5, r6
 800a4da:	e7e7      	b.n	800a4ac <_realloc_r+0x1c>

0800a4dc <_read_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4c07      	ldr	r4, [pc, #28]	; (800a4fc <_read_r+0x20>)
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	6022      	str	r2, [r4, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f7f8 f94c 	bl	8002788 <_read>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d102      	bne.n	800a4fa <_read_r+0x1e>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	b103      	cbz	r3, 800a4fa <_read_r+0x1e>
 800a4f8:	602b      	str	r3, [r5, #0]
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	20001064 	.word	0x20001064

0800a500 <_malloc_usable_size_r>:
 800a500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a504:	1f18      	subs	r0, r3, #4
 800a506:	2b00      	cmp	r3, #0
 800a508:	bfbc      	itt	lt
 800a50a:	580b      	ldrlt	r3, [r1, r0]
 800a50c:	18c0      	addlt	r0, r0, r3
 800a50e:	4770      	bx	lr

0800a510 <_init>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	bf00      	nop
 800a514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a516:	bc08      	pop	{r3}
 800a518:	469e      	mov	lr, r3
 800a51a:	4770      	bx	lr

0800a51c <_fini>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	bf00      	nop
 800a520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a522:	bc08      	pop	{r3}
 800a524:	469e      	mov	lr, r3
 800a526:	4770      	bx	lr
